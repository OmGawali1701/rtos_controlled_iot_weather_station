
RTOS_Controlled_IoT_Weather_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f858  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000978  0800f9e8  0800f9e8  000109e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010360  08010360  000121f0  2**0
                  CONTENTS
  4 .ARM          00000008  08010360  08010360  00011360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010368  08010368  000121f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010368  08010368  00011368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801036c  0801036c  0001136c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  08010370  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000121f0  2**0
                  CONTENTS
 10 .bss          00013c00  200001f0  200001f0  000121f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20013df0  20013df0  000121f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000121f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d8c2  00000000  00000000  00012220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004086  00000000  00000000  0002fae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a78  00000000  00000000  00033b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000014c3  00000000  00000000  000355e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a49  00000000  00000000  00036aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002495d  00000000  00000000  0005e4ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f91ed  00000000  00000000  00082e49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0017c036  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000084a4  00000000  00000000  0017c07c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000b3  00000000  00000000  00184520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f9d0 	.word	0x0800f9d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800f9d0 	.word	0x0800f9d0

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	200132cc 	.word	0x200132cc
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_drsub>:
 8000320:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	e002      	b.n	800032c <__adddf3>
 8000326:	bf00      	nop

08000328 <__aeabi_dsub>:
 8000328:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800032c <__adddf3>:
 800032c:	b530      	push	{r4, r5, lr}
 800032e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000332:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000336:	ea94 0f05 	teq	r4, r5
 800033a:	bf08      	it	eq
 800033c:	ea90 0f02 	teqeq	r0, r2
 8000340:	bf1f      	itttt	ne
 8000342:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000346:	ea55 0c02 	orrsne.w	ip, r5, r2
 800034a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800034e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000352:	f000 80e2 	beq.w	800051a <__adddf3+0x1ee>
 8000356:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800035a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800035e:	bfb8      	it	lt
 8000360:	426d      	neglt	r5, r5
 8000362:	dd0c      	ble.n	800037e <__adddf3+0x52>
 8000364:	442c      	add	r4, r5
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	ea82 0000 	eor.w	r0, r2, r0
 8000372:	ea83 0101 	eor.w	r1, r3, r1
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	2d36      	cmp	r5, #54	@ 0x36
 8000380:	bf88      	it	hi
 8000382:	bd30      	pophi	{r4, r5, pc}
 8000384:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000388:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800038c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000390:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000394:	d002      	beq.n	800039c <__adddf3+0x70>
 8000396:	4240      	negs	r0, r0
 8000398:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800039c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003a8:	d002      	beq.n	80003b0 <__adddf3+0x84>
 80003aa:	4252      	negs	r2, r2
 80003ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003b0:	ea94 0f05 	teq	r4, r5
 80003b4:	f000 80a7 	beq.w	8000506 <__adddf3+0x1da>
 80003b8:	f1a4 0401 	sub.w	r4, r4, #1
 80003bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003c0:	db0d      	blt.n	80003de <__adddf3+0xb2>
 80003c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003c6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ca:	1880      	adds	r0, r0, r2
 80003cc:	f141 0100 	adc.w	r1, r1, #0
 80003d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003d4:	1880      	adds	r0, r0, r2
 80003d6:	fa43 f305 	asr.w	r3, r3, r5
 80003da:	4159      	adcs	r1, r3
 80003dc:	e00e      	b.n	80003fc <__adddf3+0xd0>
 80003de:	f1a5 0520 	sub.w	r5, r5, #32
 80003e2:	f10e 0e20 	add.w	lr, lr, #32
 80003e6:	2a01      	cmp	r2, #1
 80003e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ec:	bf28      	it	cs
 80003ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003f2:	fa43 f305 	asr.w	r3, r3, r5
 80003f6:	18c0      	adds	r0, r0, r3
 80003f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000400:	d507      	bpl.n	8000412 <__adddf3+0xe6>
 8000402:	f04f 0e00 	mov.w	lr, #0
 8000406:	f1dc 0c00 	rsbs	ip, ip, #0
 800040a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800040e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000412:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000416:	d31b      	bcc.n	8000450 <__adddf3+0x124>
 8000418:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800041c:	d30c      	bcc.n	8000438 <__adddf3+0x10c>
 800041e:	0849      	lsrs	r1, r1, #1
 8000420:	ea5f 0030 	movs.w	r0, r0, rrx
 8000424:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000428:	f104 0401 	add.w	r4, r4, #1
 800042c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000430:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000434:	f080 809a 	bcs.w	800056c <__adddf3+0x240>
 8000438:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800043c:	bf08      	it	eq
 800043e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000442:	f150 0000 	adcs.w	r0, r0, #0
 8000446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800044a:	ea41 0105 	orr.w	r1, r1, r5
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000454:	4140      	adcs	r0, r0
 8000456:	eb41 0101 	adc.w	r1, r1, r1
 800045a:	3c01      	subs	r4, #1
 800045c:	bf28      	it	cs
 800045e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000462:	d2e9      	bcs.n	8000438 <__adddf3+0x10c>
 8000464:	f091 0f00 	teq	r1, #0
 8000468:	bf04      	itt	eq
 800046a:	4601      	moveq	r1, r0
 800046c:	2000      	moveq	r0, #0
 800046e:	fab1 f381 	clz	r3, r1
 8000472:	bf08      	it	eq
 8000474:	3320      	addeq	r3, #32
 8000476:	f1a3 030b 	sub.w	r3, r3, #11
 800047a:	f1b3 0220 	subs.w	r2, r3, #32
 800047e:	da0c      	bge.n	800049a <__adddf3+0x16e>
 8000480:	320c      	adds	r2, #12
 8000482:	dd08      	ble.n	8000496 <__adddf3+0x16a>
 8000484:	f102 0c14 	add.w	ip, r2, #20
 8000488:	f1c2 020c 	rsb	r2, r2, #12
 800048c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000490:	fa21 f102 	lsr.w	r1, r1, r2
 8000494:	e00c      	b.n	80004b0 <__adddf3+0x184>
 8000496:	f102 0214 	add.w	r2, r2, #20
 800049a:	bfd8      	it	le
 800049c:	f1c2 0c20 	rsble	ip, r2, #32
 80004a0:	fa01 f102 	lsl.w	r1, r1, r2
 80004a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004a8:	bfdc      	itt	le
 80004aa:	ea41 010c 	orrle.w	r1, r1, ip
 80004ae:	4090      	lslle	r0, r2
 80004b0:	1ae4      	subs	r4, r4, r3
 80004b2:	bfa2      	ittt	ge
 80004b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004b8:	4329      	orrge	r1, r5
 80004ba:	bd30      	popge	{r4, r5, pc}
 80004bc:	ea6f 0404 	mvn.w	r4, r4
 80004c0:	3c1f      	subs	r4, #31
 80004c2:	da1c      	bge.n	80004fe <__adddf3+0x1d2>
 80004c4:	340c      	adds	r4, #12
 80004c6:	dc0e      	bgt.n	80004e6 <__adddf3+0x1ba>
 80004c8:	f104 0414 	add.w	r4, r4, #20
 80004cc:	f1c4 0220 	rsb	r2, r4, #32
 80004d0:	fa20 f004 	lsr.w	r0, r0, r4
 80004d4:	fa01 f302 	lsl.w	r3, r1, r2
 80004d8:	ea40 0003 	orr.w	r0, r0, r3
 80004dc:	fa21 f304 	lsr.w	r3, r1, r4
 80004e0:	ea45 0103 	orr.w	r1, r5, r3
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f1c4 040c 	rsb	r4, r4, #12
 80004ea:	f1c4 0220 	rsb	r2, r4, #32
 80004ee:	fa20 f002 	lsr.w	r0, r0, r2
 80004f2:	fa01 f304 	lsl.w	r3, r1, r4
 80004f6:	ea40 0003 	orr.w	r0, r0, r3
 80004fa:	4629      	mov	r1, r5
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000502:	4629      	mov	r1, r5
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f094 0f00 	teq	r4, #0
 800050a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800050e:	bf06      	itte	eq
 8000510:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000514:	3401      	addeq	r4, #1
 8000516:	3d01      	subne	r5, #1
 8000518:	e74e      	b.n	80003b8 <__adddf3+0x8c>
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf18      	it	ne
 8000520:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000524:	d029      	beq.n	800057a <__adddf3+0x24e>
 8000526:	ea94 0f05 	teq	r4, r5
 800052a:	bf08      	it	eq
 800052c:	ea90 0f02 	teqeq	r0, r2
 8000530:	d005      	beq.n	800053e <__adddf3+0x212>
 8000532:	ea54 0c00 	orrs.w	ip, r4, r0
 8000536:	bf04      	itt	eq
 8000538:	4619      	moveq	r1, r3
 800053a:	4610      	moveq	r0, r2
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea91 0f03 	teq	r1, r3
 8000542:	bf1e      	ittt	ne
 8000544:	2100      	movne	r1, #0
 8000546:	2000      	movne	r0, #0
 8000548:	bd30      	popne	{r4, r5, pc}
 800054a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800054e:	d105      	bne.n	800055c <__adddf3+0x230>
 8000550:	0040      	lsls	r0, r0, #1
 8000552:	4149      	adcs	r1, r1
 8000554:	bf28      	it	cs
 8000556:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000560:	bf3c      	itt	cc
 8000562:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000566:	bd30      	popcc	{r4, r5, pc}
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800056c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000570:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf1a      	itte	ne
 8000580:	4619      	movne	r1, r3
 8000582:	4610      	movne	r0, r2
 8000584:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000588:	bf1c      	itt	ne
 800058a:	460b      	movne	r3, r1
 800058c:	4602      	movne	r2, r0
 800058e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000592:	bf06      	itte	eq
 8000594:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000598:	ea91 0f03 	teqeq	r1, r3
 800059c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	bf00      	nop

080005a4 <__aeabi_ui2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005b8:	f04f 0500 	mov.w	r5, #0
 80005bc:	f04f 0100 	mov.w	r1, #0
 80005c0:	e750      	b.n	8000464 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_i2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005d8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005dc:	bf48      	it	mi
 80005de:	4240      	negmi	r0, r0
 80005e0:	f04f 0100 	mov.w	r1, #0
 80005e4:	e73e      	b.n	8000464 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_f2d>:
 80005e8:	0042      	lsls	r2, r0, #1
 80005ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80005f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005f6:	bf1f      	itttt	ne
 80005f8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005fc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000600:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000604:	4770      	bxne	lr
 8000606:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800060a:	bf08      	it	eq
 800060c:	4770      	bxeq	lr
 800060e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000612:	bf04      	itt	eq
 8000614:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000618:	4770      	bxeq	lr
 800061a:	b530      	push	{r4, r5, lr}
 800061c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000620:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	e71c      	b.n	8000464 <__adddf3+0x138>
 800062a:	bf00      	nop

0800062c <__aeabi_ul2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	e00a      	b.n	8000652 <__aeabi_l2d+0x16>

0800063c <__aeabi_l2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800064a:	d502      	bpl.n	8000652 <__aeabi_l2d+0x16>
 800064c:	4240      	negs	r0, r0
 800064e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000652:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000656:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800065e:	f43f aed8 	beq.w	8000412 <__adddf3+0xe6>
 8000662:	f04f 0203 	mov.w	r2, #3
 8000666:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800066a:	bf18      	it	ne
 800066c:	3203      	addne	r2, #3
 800066e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000672:	bf18      	it	ne
 8000674:	3203      	addne	r2, #3
 8000676:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800067a:	f1c2 0320 	rsb	r3, r2, #32
 800067e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000682:	fa20 f002 	lsr.w	r0, r0, r2
 8000686:	fa01 fe03 	lsl.w	lr, r1, r3
 800068a:	ea40 000e 	orr.w	r0, r0, lr
 800068e:	fa21 f102 	lsr.w	r1, r1, r2
 8000692:	4414      	add	r4, r2
 8000694:	e6bd      	b.n	8000412 <__adddf3+0xe6>
 8000696:	bf00      	nop

08000698 <__aeabi_dmul>:
 8000698:	b570      	push	{r4, r5, r6, lr}
 800069a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800069e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006a6:	bf1d      	ittte	ne
 80006a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ac:	ea94 0f0c 	teqne	r4, ip
 80006b0:	ea95 0f0c 	teqne	r5, ip
 80006b4:	f000 f8de 	bleq	8000874 <__aeabi_dmul+0x1dc>
 80006b8:	442c      	add	r4, r5
 80006ba:	ea81 0603 	eor.w	r6, r1, r3
 80006be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ca:	bf18      	it	ne
 80006cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006d8:	d038      	beq.n	800074c <__aeabi_dmul+0xb4>
 80006da:	fba0 ce02 	umull	ip, lr, r0, r2
 80006de:	f04f 0500 	mov.w	r5, #0
 80006e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006e6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ee:	f04f 0600 	mov.w	r6, #0
 80006f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006f6:	f09c 0f00 	teq	ip, #0
 80006fa:	bf18      	it	ne
 80006fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000700:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000704:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000708:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800070c:	d204      	bcs.n	8000718 <__aeabi_dmul+0x80>
 800070e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000712:	416d      	adcs	r5, r5
 8000714:	eb46 0606 	adc.w	r6, r6, r6
 8000718:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800071c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000720:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000724:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000728:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800072c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000730:	bf88      	it	hi
 8000732:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000736:	d81e      	bhi.n	8000776 <__aeabi_dmul+0xde>
 8000738:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800073c:	bf08      	it	eq
 800073e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000742:	f150 0000 	adcs.w	r0, r0, #0
 8000746:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000750:	ea46 0101 	orr.w	r1, r6, r1
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000760:	bfc2      	ittt	gt
 8000762:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000766:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800076a:	bd70      	popgt	{r4, r5, r6, pc}
 800076c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000770:	f04f 0e00 	mov.w	lr, #0
 8000774:	3c01      	subs	r4, #1
 8000776:	f300 80ab 	bgt.w	80008d0 <__aeabi_dmul+0x238>
 800077a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800077e:	bfde      	ittt	le
 8000780:	2000      	movle	r0, #0
 8000782:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000786:	bd70      	pople	{r4, r5, r6, pc}
 8000788:	f1c4 0400 	rsb	r4, r4, #0
 800078c:	3c20      	subs	r4, #32
 800078e:	da35      	bge.n	80007fc <__aeabi_dmul+0x164>
 8000790:	340c      	adds	r4, #12
 8000792:	dc1b      	bgt.n	80007cc <__aeabi_dmul+0x134>
 8000794:	f104 0414 	add.w	r4, r4, #20
 8000798:	f1c4 0520 	rsb	r5, r4, #32
 800079c:	fa00 f305 	lsl.w	r3, r0, r5
 80007a0:	fa20 f004 	lsr.w	r0, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea40 0002 	orr.w	r0, r0, r2
 80007ac:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007b0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b8:	fa21 f604 	lsr.w	r6, r1, r4
 80007bc:	eb42 0106 	adc.w	r1, r2, r6
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 040c 	rsb	r4, r4, #12
 80007d0:	f1c4 0520 	rsb	r5, r4, #32
 80007d4:	fa00 f304 	lsl.w	r3, r0, r4
 80007d8:	fa20 f005 	lsr.w	r0, r0, r5
 80007dc:	fa01 f204 	lsl.w	r2, r1, r4
 80007e0:	ea40 0002 	orr.w	r0, r0, r2
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ec:	f141 0100 	adc.w	r1, r1, #0
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f1c4 0520 	rsb	r5, r4, #32
 8000800:	fa00 f205 	lsl.w	r2, r0, r5
 8000804:	ea4e 0e02 	orr.w	lr, lr, r2
 8000808:	fa20 f304 	lsr.w	r3, r0, r4
 800080c:	fa01 f205 	lsl.w	r2, r1, r5
 8000810:	ea43 0302 	orr.w	r3, r3, r2
 8000814:	fa21 f004 	lsr.w	r0, r1, r4
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	fa21 f204 	lsr.w	r2, r1, r4
 8000820:	ea20 0002 	bic.w	r0, r0, r2
 8000824:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000828:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800082c:	bf08      	it	eq
 800082e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000832:	bd70      	pop	{r4, r5, r6, pc}
 8000834:	f094 0f00 	teq	r4, #0
 8000838:	d10f      	bne.n	800085a <__aeabi_dmul+0x1c2>
 800083a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800083e:	0040      	lsls	r0, r0, #1
 8000840:	eb41 0101 	adc.w	r1, r1, r1
 8000844:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000848:	bf08      	it	eq
 800084a:	3c01      	subeq	r4, #1
 800084c:	d0f7      	beq.n	800083e <__aeabi_dmul+0x1a6>
 800084e:	ea41 0106 	orr.w	r1, r1, r6
 8000852:	f095 0f00 	teq	r5, #0
 8000856:	bf18      	it	ne
 8000858:	4770      	bxne	lr
 800085a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800085e:	0052      	lsls	r2, r2, #1
 8000860:	eb43 0303 	adc.w	r3, r3, r3
 8000864:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000868:	bf08      	it	eq
 800086a:	3d01      	subeq	r5, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1c6>
 800086e:	ea43 0306 	orr.w	r3, r3, r6
 8000872:	4770      	bx	lr
 8000874:	ea94 0f0c 	teq	r4, ip
 8000878:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800087c:	bf18      	it	ne
 800087e:	ea95 0f0c 	teqne	r5, ip
 8000882:	d00c      	beq.n	800089e <__aeabi_dmul+0x206>
 8000884:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000888:	bf18      	it	ne
 800088a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800088e:	d1d1      	bne.n	8000834 <__aeabi_dmul+0x19c>
 8000890:	ea81 0103 	eor.w	r1, r1, r3
 8000894:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000898:	f04f 0000 	mov.w	r0, #0
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a2:	bf06      	itte	eq
 80008a4:	4610      	moveq	r0, r2
 80008a6:	4619      	moveq	r1, r3
 80008a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ac:	d019      	beq.n	80008e2 <__aeabi_dmul+0x24a>
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	d102      	bne.n	80008ba <__aeabi_dmul+0x222>
 80008b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008b8:	d113      	bne.n	80008e2 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	d105      	bne.n	80008cc <__aeabi_dmul+0x234>
 80008c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008c4:	bf1c      	itt	ne
 80008c6:	4610      	movne	r0, r2
 80008c8:	4619      	movne	r1, r3
 80008ca:	d10a      	bne.n	80008e2 <__aeabi_dmul+0x24a>
 80008cc:	ea81 0103 	eor.w	r1, r1, r3
 80008d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008d4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008dc:	f04f 0000 	mov.w	r0, #0
 80008e0:	bd70      	pop	{r4, r5, r6, pc}
 80008e2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008e6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ea:	bd70      	pop	{r4, r5, r6, pc}

080008ec <__aeabi_ddiv>:
 80008ec:	b570      	push	{r4, r5, r6, lr}
 80008ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008fa:	bf1d      	ittte	ne
 80008fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000900:	ea94 0f0c 	teqne	r4, ip
 8000904:	ea95 0f0c 	teqne	r5, ip
 8000908:	f000 f8a7 	bleq	8000a5a <__aeabi_ddiv+0x16e>
 800090c:	eba4 0405 	sub.w	r4, r4, r5
 8000910:	ea81 0e03 	eor.w	lr, r1, r3
 8000914:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000918:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800091c:	f000 8088 	beq.w	8000a30 <__aeabi_ddiv+0x144>
 8000920:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000924:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000928:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800092c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000930:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000934:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000938:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800093c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000940:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000944:	429d      	cmp	r5, r3
 8000946:	bf08      	it	eq
 8000948:	4296      	cmpeq	r6, r2
 800094a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800094e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000952:	d202      	bcs.n	800095a <__aeabi_ddiv+0x6e>
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	1ab6      	subs	r6, r6, r2
 800095c:	eb65 0503 	sbc.w	r5, r5, r3
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800096a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000998:	085b      	lsrs	r3, r3, #1
 800099a:	ea4f 0232 	mov.w	r2, r2, rrx
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009be:	bf22      	ittt	cs
 80009c0:	1ab6      	subcs	r6, r6, r2
 80009c2:	4675      	movcs	r5, lr
 80009c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009cc:	d018      	beq.n	8000a00 <__aeabi_ddiv+0x114>
 80009ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ea:	d1c0      	bne.n	800096e <__aeabi_ddiv+0x82>
 80009ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009f0:	d10b      	bne.n	8000a0a <__aeabi_ddiv+0x11e>
 80009f2:	ea41 0100 	orr.w	r1, r1, r0
 80009f6:	f04f 0000 	mov.w	r0, #0
 80009fa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009fe:	e7b6      	b.n	800096e <__aeabi_ddiv+0x82>
 8000a00:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a04:	bf04      	itt	eq
 8000a06:	4301      	orreq	r1, r0
 8000a08:	2000      	moveq	r0, #0
 8000a0a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a0e:	bf88      	it	hi
 8000a10:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a14:	f63f aeaf 	bhi.w	8000776 <__aeabi_dmul+0xde>
 8000a18:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a1c:	bf04      	itt	eq
 8000a1e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a26:	f150 0000 	adcs.w	r0, r0, #0
 8000a2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
 8000a30:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a3c:	bfc2      	ittt	gt
 8000a3e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a46:	bd70      	popgt	{r4, r5, r6, pc}
 8000a48:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4c:	f04f 0e00 	mov.w	lr, #0
 8000a50:	3c01      	subs	r4, #1
 8000a52:	e690      	b.n	8000776 <__aeabi_dmul+0xde>
 8000a54:	ea45 0e06 	orr.w	lr, r5, r6
 8000a58:	e68d      	b.n	8000776 <__aeabi_dmul+0xde>
 8000a5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a5e:	ea94 0f0c 	teq	r4, ip
 8000a62:	bf08      	it	eq
 8000a64:	ea95 0f0c 	teqeq	r5, ip
 8000a68:	f43f af3b 	beq.w	80008e2 <__aeabi_dmul+0x24a>
 8000a6c:	ea94 0f0c 	teq	r4, ip
 8000a70:	d10a      	bne.n	8000a88 <__aeabi_ddiv+0x19c>
 8000a72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a76:	f47f af34 	bne.w	80008e2 <__aeabi_dmul+0x24a>
 8000a7a:	ea95 0f0c 	teq	r5, ip
 8000a7e:	f47f af25 	bne.w	80008cc <__aeabi_dmul+0x234>
 8000a82:	4610      	mov	r0, r2
 8000a84:	4619      	mov	r1, r3
 8000a86:	e72c      	b.n	80008e2 <__aeabi_dmul+0x24a>
 8000a88:	ea95 0f0c 	teq	r5, ip
 8000a8c:	d106      	bne.n	8000a9c <__aeabi_ddiv+0x1b0>
 8000a8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a92:	f43f aefd 	beq.w	8000890 <__aeabi_dmul+0x1f8>
 8000a96:	4610      	mov	r0, r2
 8000a98:	4619      	mov	r1, r3
 8000a9a:	e722      	b.n	80008e2 <__aeabi_dmul+0x24a>
 8000a9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000aa6:	f47f aec5 	bne.w	8000834 <__aeabi_dmul+0x19c>
 8000aaa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aae:	f47f af0d 	bne.w	80008cc <__aeabi_dmul+0x234>
 8000ab2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ab6:	f47f aeeb 	bne.w	8000890 <__aeabi_dmul+0x1f8>
 8000aba:	e712      	b.n	80008e2 <__aeabi_dmul+0x24a>

08000abc <__gedf2>:
 8000abc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ac0:	e006      	b.n	8000ad0 <__cmpdf2+0x4>
 8000ac2:	bf00      	nop

08000ac4 <__ledf2>:
 8000ac4:	f04f 0c01 	mov.w	ip, #1
 8000ac8:	e002      	b.n	8000ad0 <__cmpdf2+0x4>
 8000aca:	bf00      	nop

08000acc <__cmpdf2>:
 8000acc:	f04f 0c01 	mov.w	ip, #1
 8000ad0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ae6:	d01b      	beq.n	8000b20 <__cmpdf2+0x54>
 8000ae8:	b001      	add	sp, #4
 8000aea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aee:	bf0c      	ite	eq
 8000af0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000af4:	ea91 0f03 	teqne	r1, r3
 8000af8:	bf02      	ittt	eq
 8000afa:	ea90 0f02 	teqeq	r0, r2
 8000afe:	2000      	moveq	r0, #0
 8000b00:	4770      	bxeq	lr
 8000b02:	f110 0f00 	cmn.w	r0, #0
 8000b06:	ea91 0f03 	teq	r1, r3
 8000b0a:	bf58      	it	pl
 8000b0c:	4299      	cmppl	r1, r3
 8000b0e:	bf08      	it	eq
 8000b10:	4290      	cmpeq	r0, r2
 8000b12:	bf2c      	ite	cs
 8000b14:	17d8      	asrcs	r0, r3, #31
 8000b16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b1a:	f040 0001 	orr.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__cmpdf2+0x64>
 8000b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2e:	d107      	bne.n	8000b40 <__cmpdf2+0x74>
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d1d6      	bne.n	8000ae8 <__cmpdf2+0x1c>
 8000b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3e:	d0d3      	beq.n	8000ae8 <__cmpdf2+0x1c>
 8000b40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_cdrcmple>:
 8000b48:	4684      	mov	ip, r0
 8000b4a:	4610      	mov	r0, r2
 8000b4c:	4662      	mov	r2, ip
 8000b4e:	468c      	mov	ip, r1
 8000b50:	4619      	mov	r1, r3
 8000b52:	4663      	mov	r3, ip
 8000b54:	e000      	b.n	8000b58 <__aeabi_cdcmpeq>
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdcmpeq>:
 8000b58:	b501      	push	{r0, lr}
 8000b5a:	f7ff ffb7 	bl	8000acc <__cmpdf2>
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	bf48      	it	mi
 8000b62:	f110 0f00 	cmnmi.w	r0, #0
 8000b66:	bd01      	pop	{r0, pc}

08000b68 <__aeabi_dcmpeq>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff fff4 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b70:	bf0c      	ite	eq
 8000b72:	2001      	moveq	r0, #1
 8000b74:	2000      	movne	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmplt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffea 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmple>:
 8000b90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b94:	f7ff ffe0 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b98:	bf94      	ite	ls
 8000b9a:	2001      	movls	r0, #1
 8000b9c:	2000      	movhi	r0, #0
 8000b9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_dcmpge>:
 8000ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba8:	f7ff ffce 	bl	8000b48 <__aeabi_cdrcmple>
 8000bac:	bf94      	ite	ls
 8000bae:	2001      	movls	r0, #1
 8000bb0:	2000      	movhi	r0, #0
 8000bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_dcmpgt>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff ffc4 	bl	8000b48 <__aeabi_cdrcmple>
 8000bc0:	bf34      	ite	cc
 8000bc2:	2001      	movcc	r0, #1
 8000bc4:	2000      	movcs	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmpun>:
 8000bcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bd4:	d102      	bne.n	8000bdc <__aeabi_dcmpun+0x10>
 8000bd6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bda:	d10a      	bne.n	8000bf2 <__aeabi_dcmpun+0x26>
 8000bdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x20>
 8000be6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_dcmpun+0x26>
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0001 	mov.w	r0, #1
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2iz>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d215      	bcs.n	8000c2e <__aeabi_d2iz+0x36>
 8000c02:	d511      	bpl.n	8000c28 <__aeabi_d2iz+0x30>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d912      	bls.n	8000c34 <__aeabi_d2iz+0x3c>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c22:	bf18      	it	ne
 8000c24:	4240      	negne	r0, r0
 8000c26:	4770      	bx	lr
 8000c28:	f04f 0000 	mov.w	r0, #0
 8000c2c:	4770      	bx	lr
 8000c2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c32:	d105      	bne.n	8000c40 <__aeabi_d2iz+0x48>
 8000c34:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	bf08      	it	eq
 8000c3a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_ldivmod>:
 8000ce8:	b97b      	cbnz	r3, 8000d0a <__aeabi_ldivmod+0x22>
 8000cea:	b972      	cbnz	r2, 8000d0a <__aeabi_ldivmod+0x22>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bfbe      	ittt	lt
 8000cf0:	2000      	movlt	r0, #0
 8000cf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cf6:	e006      	blt.n	8000d06 <__aeabi_ldivmod+0x1e>
 8000cf8:	bf08      	it	eq
 8000cfa:	2800      	cmpeq	r0, #0
 8000cfc:	bf1c      	itt	ne
 8000cfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000d02:	f04f 30ff 	movne.w	r0, #4294967295
 8000d06:	f000 b9b5 	b.w	8001074 <__aeabi_idiv0>
 8000d0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d12:	2900      	cmp	r1, #0
 8000d14:	db09      	blt.n	8000d2a <__aeabi_ldivmod+0x42>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db1a      	blt.n	8000d50 <__aeabi_ldivmod+0x68>
 8000d1a:	f000 f84d 	bl	8000db8 <__udivmoddi4>
 8000d1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d26:	b004      	add	sp, #16
 8000d28:	4770      	bx	lr
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db1b      	blt.n	8000d6c <__aeabi_ldivmod+0x84>
 8000d34:	f000 f840 	bl	8000db8 <__udivmoddi4>
 8000d38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d40:	b004      	add	sp, #16
 8000d42:	4240      	negs	r0, r0
 8000d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d48:	4252      	negs	r2, r2
 8000d4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d4e:	4770      	bx	lr
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	f000 f82f 	bl	8000db8 <__udivmoddi4>
 8000d5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d62:	b004      	add	sp, #16
 8000d64:	4240      	negs	r0, r0
 8000d66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d6a:	4770      	bx	lr
 8000d6c:	4252      	negs	r2, r2
 8000d6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d72:	f000 f821 	bl	8000db8 <__udivmoddi4>
 8000d76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d7e:	b004      	add	sp, #16
 8000d80:	4252      	negs	r2, r2
 8000d82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_uldivmod>:
 8000d88:	b953      	cbnz	r3, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8a:	b94a      	cbnz	r2, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	bf08      	it	eq
 8000d90:	2800      	cmpeq	r0, #0
 8000d92:	bf1c      	itt	ne
 8000d94:	f04f 31ff 	movne.w	r1, #4294967295
 8000d98:	f04f 30ff 	movne.w	r0, #4294967295
 8000d9c:	f000 b96a 	b.w	8001074 <__aeabi_idiv0>
 8000da0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da8:	f000 f806 	bl	8000db8 <__udivmoddi4>
 8000dac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <__udivmoddi4>:
 8000db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dbc:	9d08      	ldr	r5, [sp, #32]
 8000dbe:	460c      	mov	r4, r1
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d14e      	bne.n	8000e62 <__udivmoddi4+0xaa>
 8000dc4:	4694      	mov	ip, r2
 8000dc6:	458c      	cmp	ip, r1
 8000dc8:	4686      	mov	lr, r0
 8000dca:	fab2 f282 	clz	r2, r2
 8000dce:	d962      	bls.n	8000e96 <__udivmoddi4+0xde>
 8000dd0:	b14a      	cbz	r2, 8000de6 <__udivmoddi4+0x2e>
 8000dd2:	f1c2 0320 	rsb	r3, r2, #32
 8000dd6:	4091      	lsls	r1, r2
 8000dd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ddc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de0:	4319      	orrs	r1, r3
 8000de2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dea:	fa1f f68c 	uxth.w	r6, ip
 8000dee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000df2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df6:	fb07 1114 	mls	r1, r7, r4, r1
 8000dfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfe:	fb04 f106 	mul.w	r1, r4, r6
 8000e02:	4299      	cmp	r1, r3
 8000e04:	d90a      	bls.n	8000e1c <__udivmoddi4+0x64>
 8000e06:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e0e:	f080 8112 	bcs.w	8001036 <__udivmoddi4+0x27e>
 8000e12:	4299      	cmp	r1, r3
 8000e14:	f240 810f 	bls.w	8001036 <__udivmoddi4+0x27e>
 8000e18:	3c02      	subs	r4, #2
 8000e1a:	4463      	add	r3, ip
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	fa1f f38e 	uxth.w	r3, lr
 8000e22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e26:	fb07 1110 	mls	r1, r7, r0, r1
 8000e2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2e:	fb00 f606 	mul.w	r6, r0, r6
 8000e32:	429e      	cmp	r6, r3
 8000e34:	d90a      	bls.n	8000e4c <__udivmoddi4+0x94>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e3e:	f080 80fc 	bcs.w	800103a <__udivmoddi4+0x282>
 8000e42:	429e      	cmp	r6, r3
 8000e44:	f240 80f9 	bls.w	800103a <__udivmoddi4+0x282>
 8000e48:	4463      	add	r3, ip
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	1b9b      	subs	r3, r3, r6
 8000e4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e52:	2100      	movs	r1, #0
 8000e54:	b11d      	cbz	r5, 8000e5e <__udivmoddi4+0xa6>
 8000e56:	40d3      	lsrs	r3, r2
 8000e58:	2200      	movs	r2, #0
 8000e5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d905      	bls.n	8000e72 <__udivmoddi4+0xba>
 8000e66:	b10d      	cbz	r5, 8000e6c <__udivmoddi4+0xb4>
 8000e68:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e7f5      	b.n	8000e5e <__udivmoddi4+0xa6>
 8000e72:	fab3 f183 	clz	r1, r3
 8000e76:	2900      	cmp	r1, #0
 8000e78:	d146      	bne.n	8000f08 <__udivmoddi4+0x150>
 8000e7a:	42a3      	cmp	r3, r4
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0xcc>
 8000e7e:	4290      	cmp	r0, r2
 8000e80:	f0c0 80f0 	bcc.w	8001064 <__udivmoddi4+0x2ac>
 8000e84:	1a86      	subs	r6, r0, r2
 8000e86:	eb64 0303 	sbc.w	r3, r4, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	2d00      	cmp	r5, #0
 8000e8e:	d0e6      	beq.n	8000e5e <__udivmoddi4+0xa6>
 8000e90:	e9c5 6300 	strd	r6, r3, [r5]
 8000e94:	e7e3      	b.n	8000e5e <__udivmoddi4+0xa6>
 8000e96:	2a00      	cmp	r2, #0
 8000e98:	f040 8090 	bne.w	8000fbc <__udivmoddi4+0x204>
 8000e9c:	eba1 040c 	sub.w	r4, r1, ip
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa1f f78c 	uxth.w	r7, ip
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000eae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000eb2:	fb08 4416 	mls	r4, r8, r6, r4
 8000eb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eba:	fb07 f006 	mul.w	r0, r7, r6
 8000ebe:	4298      	cmp	r0, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x11c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000eca:	d202      	bcs.n	8000ed2 <__udivmoddi4+0x11a>
 8000ecc:	4298      	cmp	r0, r3
 8000ece:	f200 80cd 	bhi.w	800106c <__udivmoddi4+0x2b4>
 8000ed2:	4626      	mov	r6, r4
 8000ed4:	1a1c      	subs	r4, r3, r0
 8000ed6:	fa1f f38e 	uxth.w	r3, lr
 8000eda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ede:	fb08 4410 	mls	r4, r8, r0, r4
 8000ee2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ee6:	fb00 f707 	mul.w	r7, r0, r7
 8000eea:	429f      	cmp	r7, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x148>
 8000eee:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ef6:	d202      	bcs.n	8000efe <__udivmoddi4+0x146>
 8000ef8:	429f      	cmp	r7, r3
 8000efa:	f200 80b0 	bhi.w	800105e <__udivmoddi4+0x2a6>
 8000efe:	4620      	mov	r0, r4
 8000f00:	1bdb      	subs	r3, r3, r7
 8000f02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f06:	e7a5      	b.n	8000e54 <__udivmoddi4+0x9c>
 8000f08:	f1c1 0620 	rsb	r6, r1, #32
 8000f0c:	408b      	lsls	r3, r1
 8000f0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000f12:	431f      	orrs	r7, r3
 8000f14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f18:	fa04 f301 	lsl.w	r3, r4, r1
 8000f1c:	ea43 030c 	orr.w	r3, r3, ip
 8000f20:	40f4      	lsrs	r4, r6
 8000f22:	fa00 f801 	lsl.w	r8, r0, r1
 8000f26:	0c38      	lsrs	r0, r7, #16
 8000f28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000f30:	fa1f fc87 	uxth.w	ip, r7
 8000f34:	fb00 441e 	mls	r4, r0, lr, r4
 8000f38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000f40:	45a1      	cmp	r9, r4
 8000f42:	fa02 f201 	lsl.w	r2, r2, r1
 8000f46:	d90a      	bls.n	8000f5e <__udivmoddi4+0x1a6>
 8000f48:	193c      	adds	r4, r7, r4
 8000f4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f4e:	f080 8084 	bcs.w	800105a <__udivmoddi4+0x2a2>
 8000f52:	45a1      	cmp	r9, r4
 8000f54:	f240 8081 	bls.w	800105a <__udivmoddi4+0x2a2>
 8000f58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f5c:	443c      	add	r4, r7
 8000f5e:	eba4 0409 	sub.w	r4, r4, r9
 8000f62:	fa1f f983 	uxth.w	r9, r3
 8000f66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f76:	45a4      	cmp	ip, r4
 8000f78:	d907      	bls.n	8000f8a <__udivmoddi4+0x1d2>
 8000f7a:	193c      	adds	r4, r7, r4
 8000f7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f80:	d267      	bcs.n	8001052 <__udivmoddi4+0x29a>
 8000f82:	45a4      	cmp	ip, r4
 8000f84:	d965      	bls.n	8001052 <__udivmoddi4+0x29a>
 8000f86:	3b02      	subs	r3, #2
 8000f88:	443c      	add	r4, r7
 8000f8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f92:	eba4 040c 	sub.w	r4, r4, ip
 8000f96:	429c      	cmp	r4, r3
 8000f98:	46ce      	mov	lr, r9
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	d351      	bcc.n	8001042 <__udivmoddi4+0x28a>
 8000f9e:	d04e      	beq.n	800103e <__udivmoddi4+0x286>
 8000fa0:	b155      	cbz	r5, 8000fb8 <__udivmoddi4+0x200>
 8000fa2:	ebb8 030e 	subs.w	r3, r8, lr
 8000fa6:	eb64 040c 	sbc.w	r4, r4, ip
 8000faa:	fa04 f606 	lsl.w	r6, r4, r6
 8000fae:	40cb      	lsrs	r3, r1
 8000fb0:	431e      	orrs	r6, r3
 8000fb2:	40cc      	lsrs	r4, r1
 8000fb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000fb8:	2100      	movs	r1, #0
 8000fba:	e750      	b.n	8000e5e <__udivmoddi4+0xa6>
 8000fbc:	f1c2 0320 	rsb	r3, r2, #32
 8000fc0:	fa20 f103 	lsr.w	r1, r0, r3
 8000fc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fc8:	fa24 f303 	lsr.w	r3, r4, r3
 8000fcc:	4094      	lsls	r4, r2
 8000fce:	430c      	orrs	r4, r1
 8000fd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fd4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fd8:	fa1f f78c 	uxth.w	r7, ip
 8000fdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fe0:	fb08 3110 	mls	r1, r8, r0, r3
 8000fe4:	0c23      	lsrs	r3, r4, #16
 8000fe6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fea:	fb00 f107 	mul.w	r1, r0, r7
 8000fee:	4299      	cmp	r1, r3
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x24c>
 8000ff2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ffa:	d22c      	bcs.n	8001056 <__udivmoddi4+0x29e>
 8000ffc:	4299      	cmp	r1, r3
 8000ffe:	d92a      	bls.n	8001056 <__udivmoddi4+0x29e>
 8001000:	3802      	subs	r0, #2
 8001002:	4463      	add	r3, ip
 8001004:	1a5b      	subs	r3, r3, r1
 8001006:	b2a4      	uxth	r4, r4
 8001008:	fbb3 f1f8 	udiv	r1, r3, r8
 800100c:	fb08 3311 	mls	r3, r8, r1, r3
 8001010:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001014:	fb01 f307 	mul.w	r3, r1, r7
 8001018:	42a3      	cmp	r3, r4
 800101a:	d908      	bls.n	800102e <__udivmoddi4+0x276>
 800101c:	eb1c 0404 	adds.w	r4, ip, r4
 8001020:	f101 36ff 	add.w	r6, r1, #4294967295
 8001024:	d213      	bcs.n	800104e <__udivmoddi4+0x296>
 8001026:	42a3      	cmp	r3, r4
 8001028:	d911      	bls.n	800104e <__udivmoddi4+0x296>
 800102a:	3902      	subs	r1, #2
 800102c:	4464      	add	r4, ip
 800102e:	1ae4      	subs	r4, r4, r3
 8001030:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001034:	e739      	b.n	8000eaa <__udivmoddi4+0xf2>
 8001036:	4604      	mov	r4, r0
 8001038:	e6f0      	b.n	8000e1c <__udivmoddi4+0x64>
 800103a:	4608      	mov	r0, r1
 800103c:	e706      	b.n	8000e4c <__udivmoddi4+0x94>
 800103e:	45c8      	cmp	r8, r9
 8001040:	d2ae      	bcs.n	8000fa0 <__udivmoddi4+0x1e8>
 8001042:	ebb9 0e02 	subs.w	lr, r9, r2
 8001046:	eb63 0c07 	sbc.w	ip, r3, r7
 800104a:	3801      	subs	r0, #1
 800104c:	e7a8      	b.n	8000fa0 <__udivmoddi4+0x1e8>
 800104e:	4631      	mov	r1, r6
 8001050:	e7ed      	b.n	800102e <__udivmoddi4+0x276>
 8001052:	4603      	mov	r3, r0
 8001054:	e799      	b.n	8000f8a <__udivmoddi4+0x1d2>
 8001056:	4630      	mov	r0, r6
 8001058:	e7d4      	b.n	8001004 <__udivmoddi4+0x24c>
 800105a:	46d6      	mov	lr, sl
 800105c:	e77f      	b.n	8000f5e <__udivmoddi4+0x1a6>
 800105e:	4463      	add	r3, ip
 8001060:	3802      	subs	r0, #2
 8001062:	e74d      	b.n	8000f00 <__udivmoddi4+0x148>
 8001064:	4606      	mov	r6, r0
 8001066:	4623      	mov	r3, r4
 8001068:	4608      	mov	r0, r1
 800106a:	e70f      	b.n	8000e8c <__udivmoddi4+0xd4>
 800106c:	3e02      	subs	r6, #2
 800106e:	4463      	add	r3, ip
 8001070:	e730      	b.n	8000ed4 <__udivmoddi4+0x11c>
 8001072:	bf00      	nop

08001074 <__aeabi_idiv0>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08c      	sub	sp, #48	@ 0x30
 800107c:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2319      	movs	r3, #25
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	463b      	mov	r3, r7
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	2288      	movs	r2, #136	@ 0x88
 8001090:	21ec      	movs	r1, #236	@ 0xec
 8001092:	4857      	ldr	r0, [pc, #348]	@ (80011f0 <TrimRead+0x178>)
 8001094:	f004 f914 	bl	80052c0 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8001098:	463b      	mov	r3, r7
 800109a:	3319      	adds	r3, #25
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	9202      	str	r2, [sp, #8]
 80010a2:	2207      	movs	r2, #7
 80010a4:	9201      	str	r2, [sp, #4]
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2301      	movs	r3, #1
 80010aa:	22e1      	movs	r2, #225	@ 0xe1
 80010ac:	21ec      	movs	r1, #236	@ 0xec
 80010ae:	4850      	ldr	r0, [pc, #320]	@ (80011f0 <TrimRead+0x178>)
 80010b0:	f004 f906 	bl	80052c0 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80010b4:	787b      	ldrb	r3, [r7, #1]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	783b      	ldrb	r3, [r7, #0]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	4b4b      	ldr	r3, [pc, #300]	@ (80011f4 <TrimRead+0x17c>)
 80010c6:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	021b      	lsls	r3, r3, #8
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	78bb      	ldrb	r3, [r7, #2]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	4b48      	ldr	r3, [pc, #288]	@ (80011f8 <TrimRead+0x180>)
 80010d8:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 80010da:	797b      	ldrb	r3, [r7, #5]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b21a      	sxth	r2, r3
 80010e0:	793b      	ldrb	r3, [r7, #4]
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	4b44      	ldr	r3, [pc, #272]	@ (80011fc <TrimRead+0x184>)
 80010ea:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	797b      	ldrb	r3, [r7, #5]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	4b40      	ldr	r3, [pc, #256]	@ (8001200 <TrimRead+0x188>)
 80010fe:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001100:	7a7b      	ldrb	r3, [r7, #9]
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	b21a      	sxth	r2, r3
 8001106:	79bb      	ldrb	r3, [r7, #6]
 8001108:	b21b      	sxth	r3, r3
 800110a:	4313      	orrs	r3, r2
 800110c:	b21a      	sxth	r2, r3
 800110e:	4b3d      	ldr	r3, [pc, #244]	@ (8001204 <TrimRead+0x18c>)
 8001110:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001112:	7afb      	ldrb	r3, [r7, #11]
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	b21a      	sxth	r2, r3
 8001118:	7abb      	ldrb	r3, [r7, #10]
 800111a:	b21b      	sxth	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b21a      	sxth	r2, r3
 8001120:	4b39      	ldr	r3, [pc, #228]	@ (8001208 <TrimRead+0x190>)
 8001122:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001124:	7b7b      	ldrb	r3, [r7, #13]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b21a      	sxth	r2, r3
 800112a:	7b3b      	ldrb	r3, [r7, #12]
 800112c:	b21b      	sxth	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	b21a      	sxth	r2, r3
 8001132:	4b36      	ldr	r3, [pc, #216]	@ (800120c <TrimRead+0x194>)
 8001134:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b21a      	sxth	r2, r3
 800113c:	7bbb      	ldrb	r3, [r7, #14]
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	b21a      	sxth	r2, r3
 8001144:	4b32      	ldr	r3, [pc, #200]	@ (8001210 <TrimRead+0x198>)
 8001146:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001148:	7c7b      	ldrb	r3, [r7, #17]
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	b21a      	sxth	r2, r3
 800114e:	7c3b      	ldrb	r3, [r7, #16]
 8001150:	b21b      	sxth	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	b21a      	sxth	r2, r3
 8001156:	4b2f      	ldr	r3, [pc, #188]	@ (8001214 <TrimRead+0x19c>)
 8001158:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 800115a:	7cfb      	ldrb	r3, [r7, #19]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	7cbb      	ldrb	r3, [r7, #18]
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b2b      	ldr	r3, [pc, #172]	@ (8001218 <TrimRead+0x1a0>)
 800116a:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 800116c:	7d7b      	ldrb	r3, [r7, #21]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b21a      	sxth	r2, r3
 8001172:	7d3b      	ldrb	r3, [r7, #20]
 8001174:	b21b      	sxth	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	b21a      	sxth	r2, r3
 800117a:	4b28      	ldr	r3, [pc, #160]	@ (800121c <TrimRead+0x1a4>)
 800117c:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 800117e:	7dfb      	ldrb	r3, [r7, #23]
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b21a      	sxth	r2, r3
 8001184:	7dbb      	ldrb	r3, [r7, #22]
 8001186:	b21b      	sxth	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b21a      	sxth	r2, r3
 800118c:	4b24      	ldr	r3, [pc, #144]	@ (8001220 <TrimRead+0x1a8>)
 800118e:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8001190:	7e3b      	ldrb	r3, [r7, #24]
 8001192:	461a      	mov	r2, r3
 8001194:	4b23      	ldr	r3, [pc, #140]	@ (8001224 <TrimRead+0x1ac>)
 8001196:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8001198:	7ebb      	ldrb	r3, [r7, #26]
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	b21a      	sxth	r2, r3
 800119e:	7e7b      	ldrb	r3, [r7, #25]
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	4313      	orrs	r3, r2
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	4b20      	ldr	r3, [pc, #128]	@ (8001228 <TrimRead+0x1b0>)
 80011a8:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 80011aa:	7efb      	ldrb	r3, [r7, #27]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b1f      	ldr	r3, [pc, #124]	@ (800122c <TrimRead+0x1b4>)
 80011b0:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80011b2:	7f3b      	ldrb	r3, [r7, #28]
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	7f7b      	ldrb	r3, [r7, #29]
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	f003 030f 	and.w	r3, r3, #15
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <TrimRead+0x1b8>)
 80011c8:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 80011ca:	7fbb      	ldrb	r3, [r7, #30]
 80011cc:	011b      	lsls	r3, r3, #4
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	7f7b      	ldrb	r3, [r7, #29]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	4313      	orrs	r3, r2
 80011da:	b21a      	sxth	r2, r3
 80011dc:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <TrimRead+0x1bc>)
 80011de:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 80011e0:	7ffb      	ldrb	r3, [r7, #31]
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <TrimRead+0x1c0>)
 80011e6:	801a      	strh	r2, [r3, #0]
}
 80011e8:	bf00      	nop
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200002b4 	.word	0x200002b4
 80011f4:	20000244 	.word	0x20000244
 80011f8:	2000024c 	.word	0x2000024c
 80011fc:	2000024e 	.word	0x2000024e
 8001200:	20000246 	.word	0x20000246
 8001204:	20000250 	.word	0x20000250
 8001208:	20000252 	.word	0x20000252
 800120c:	20000254 	.word	0x20000254
 8001210:	20000256 	.word	0x20000256
 8001214:	20000258 	.word	0x20000258
 8001218:	2000025a 	.word	0x2000025a
 800121c:	2000025c 	.word	0x2000025c
 8001220:	2000025e 	.word	0x2000025e
 8001224:	20000248 	.word	0x20000248
 8001228:	20000260 	.word	0x20000260
 800122c:	2000024a 	.word	0x2000024a
 8001230:	20000262 	.word	0x20000262
 8001234:	20000264 	.word	0x20000264
 8001238:	20000266 	.word	0x20000266

0800123c <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b089      	sub	sp, #36	@ 0x24
 8001240:	af04      	add	r7, sp, #16
 8001242:	4604      	mov	r4, r0
 8001244:	4608      	mov	r0, r1
 8001246:	4611      	mov	r1, r2
 8001248:	461a      	mov	r2, r3
 800124a:	4623      	mov	r3, r4
 800124c:	71fb      	strb	r3, [r7, #7]
 800124e:	4603      	mov	r3, r0
 8001250:	71bb      	strb	r3, [r7, #6]
 8001252:	460b      	mov	r3, r1
 8001254:	717b      	strb	r3, [r7, #5]
 8001256:	4613      	mov	r3, r2
 8001258:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 800125a:	f7ff ff0d 	bl	8001078 <TrimRead>


	uint8_t datatowrite = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8001266:	23b6      	movs	r3, #182	@ 0xb6
 8001268:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800126a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126e:	9302      	str	r3, [sp, #8]
 8001270:	2301      	movs	r3, #1
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	f107 030f 	add.w	r3, r7, #15
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	22e0      	movs	r2, #224	@ 0xe0
 800127e:	21ec      	movs	r1, #236	@ 0xec
 8001280:	4858      	ldr	r0, [pc, #352]	@ (80013e4 <BME280_Config+0x1a8>)
 8001282:	f003 ff17 	bl	80050b4 <HAL_I2C_Mem_Write>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <BME280_Config+0x56>
	{
		return -1;
 800128c:	f04f 33ff 	mov.w	r3, #4294967295
 8001290:	e0a3      	b.n	80013da <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 8001292:	2064      	movs	r0, #100	@ 0x64
 8001294:	f001 fe50 	bl	8002f38 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8001298:	797b      	ldrb	r3, [r7, #5]
 800129a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800129c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a0:	9302      	str	r3, [sp, #8]
 80012a2:	2301      	movs	r3, #1
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	f107 030f 	add.w	r3, r7, #15
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	22f2      	movs	r2, #242	@ 0xf2
 80012b0:	21ec      	movs	r1, #236	@ 0xec
 80012b2:	484c      	ldr	r0, [pc, #304]	@ (80013e4 <BME280_Config+0x1a8>)
 80012b4:	f003 fefe 	bl	80050b4 <HAL_I2C_Mem_Write>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d002      	beq.n	80012c4 <BME280_Config+0x88>
	{
		return -1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	e08a      	b.n	80013da <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80012c4:	2064      	movs	r0, #100	@ 0x64
 80012c6:	f001 fe37 	bl	8002f38 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 80012ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ce:	9302      	str	r3, [sp, #8]
 80012d0:	2301      	movs	r3, #1
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	f107 030e 	add.w	r3, r7, #14
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2301      	movs	r3, #1
 80012dc:	22f2      	movs	r2, #242	@ 0xf2
 80012de:	21ec      	movs	r1, #236	@ 0xec
 80012e0:	4840      	ldr	r0, [pc, #256]	@ (80013e4 <BME280_Config+0x1a8>)
 80012e2:	f003 ffed 	bl	80052c0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012e6:	7bba      	ldrb	r2, [r7, #14]
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d002      	beq.n	80012f4 <BME280_Config+0xb8>
	{
		return -1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	e072      	b.n	80013da <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 80012f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012f8:	015b      	lsls	r3, r3, #5
 80012fa:	b25a      	sxtb	r2, r3
 80012fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	b25b      	sxtb	r3, r3
 8001304:	4313      	orrs	r3, r2
 8001306:	b25b      	sxtb	r3, r3
 8001308:	b2db      	uxtb	r3, r3
 800130a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800130c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001310:	9302      	str	r3, [sp, #8]
 8001312:	2301      	movs	r3, #1
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	f107 030f 	add.w	r3, r7, #15
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2301      	movs	r3, #1
 800131e:	22f5      	movs	r2, #245	@ 0xf5
 8001320:	21ec      	movs	r1, #236	@ 0xec
 8001322:	4830      	ldr	r0, [pc, #192]	@ (80013e4 <BME280_Config+0x1a8>)
 8001324:	f003 fec6 	bl	80050b4 <HAL_I2C_Mem_Write>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <BME280_Config+0xf8>
	{
		return -1;
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	e052      	b.n	80013da <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001334:	2064      	movs	r0, #100	@ 0x64
 8001336:	f001 fdff 	bl	8002f38 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800133a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800133e:	9302      	str	r3, [sp, #8]
 8001340:	2301      	movs	r3, #1
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	f107 030e 	add.w	r3, r7, #14
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2301      	movs	r3, #1
 800134c:	22f5      	movs	r2, #245	@ 0xf5
 800134e:	21ec      	movs	r1, #236	@ 0xec
 8001350:	4824      	ldr	r0, [pc, #144]	@ (80013e4 <BME280_Config+0x1a8>)
 8001352:	f003 ffb5 	bl	80052c0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001356:	7bba      	ldrb	r2, [r7, #14]
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	429a      	cmp	r2, r3
 800135c:	d002      	beq.n	8001364 <BME280_Config+0x128>
	{
		return -1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e03a      	b.n	80013da <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	015b      	lsls	r3, r3, #5
 8001368:	b25a      	sxtb	r2, r3
 800136a:	79bb      	ldrb	r3, [r7, #6]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	b25b      	sxtb	r3, r3
 8001370:	4313      	orrs	r3, r2
 8001372:	b25a      	sxtb	r2, r3
 8001374:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001378:	4313      	orrs	r3, r2
 800137a:	b25b      	sxtb	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001380:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	2301      	movs	r3, #1
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	f107 030f 	add.w	r3, r7, #15
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2301      	movs	r3, #1
 8001392:	22f4      	movs	r2, #244	@ 0xf4
 8001394:	21ec      	movs	r1, #236	@ 0xec
 8001396:	4813      	ldr	r0, [pc, #76]	@ (80013e4 <BME280_Config+0x1a8>)
 8001398:	f003 fe8c 	bl	80050b4 <HAL_I2C_Mem_Write>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d002      	beq.n	80013a8 <BME280_Config+0x16c>
	{
		return -1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	e018      	b.n	80013da <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80013a8:	2064      	movs	r0, #100	@ 0x64
 80013aa:	f001 fdc5 	bl	8002f38 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80013ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013b2:	9302      	str	r3, [sp, #8]
 80013b4:	2301      	movs	r3, #1
 80013b6:	9301      	str	r3, [sp, #4]
 80013b8:	f107 030e 	add.w	r3, r7, #14
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2301      	movs	r3, #1
 80013c0:	22f4      	movs	r2, #244	@ 0xf4
 80013c2:	21ec      	movs	r1, #236	@ 0xec
 80013c4:	4807      	ldr	r0, [pc, #28]	@ (80013e4 <BME280_Config+0x1a8>)
 80013c6:	f003 ff7b 	bl	80052c0 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013ca:	7bba      	ldrb	r2, [r7, #14]
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d002      	beq.n	80013d8 <BME280_Config+0x19c>
	{
		return -1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e000      	b.n	80013da <BME280_Config+0x19e>
	}

	return 0;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd90      	pop	{r4, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200002b4 	.word	0x200002b4

080013e8 <BMEReadRaw>:


int BMEReadRaw(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 80013ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013f2:	9302      	str	r3, [sp, #8]
 80013f4:	2301      	movs	r3, #1
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001474 <BMEReadRaw+0x8c>)
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2301      	movs	r3, #1
 80013fe:	22d0      	movs	r2, #208	@ 0xd0
 8001400:	21ec      	movs	r1, #236	@ 0xec
 8001402:	481d      	ldr	r0, [pc, #116]	@ (8001478 <BMEReadRaw+0x90>)
 8001404:	f003 ff5c 	bl	80052c0 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001408:	4b1a      	ldr	r3, [pc, #104]	@ (8001474 <BMEReadRaw+0x8c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b60      	cmp	r3, #96	@ 0x60
 800140e:	d12a      	bne.n	8001466 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	2308      	movs	r3, #8
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	463b      	mov	r3, r7
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2301      	movs	r3, #1
 8001420:	22f7      	movs	r2, #247	@ 0xf7
 8001422:	21ec      	movs	r1, #236	@ 0xec
 8001424:	4814      	ldr	r0, [pc, #80]	@ (8001478 <BMEReadRaw+0x90>)
 8001426:	f003 ff4b 	bl	80052c0 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800142a:	783b      	ldrb	r3, [r7, #0]
 800142c:	031a      	lsls	r2, r3, #12
 800142e:	787b      	ldrb	r3, [r7, #1]
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	4313      	orrs	r3, r2
 8001434:	78ba      	ldrb	r2, [r7, #2]
 8001436:	0912      	lsrs	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	4313      	orrs	r3, r2
 800143c:	4a0f      	ldr	r2, [pc, #60]	@ (800147c <BMEReadRaw+0x94>)
 800143e:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001440:	78fb      	ldrb	r3, [r7, #3]
 8001442:	031a      	lsls	r2, r3, #12
 8001444:	793b      	ldrb	r3, [r7, #4]
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	4313      	orrs	r3, r2
 800144a:	797a      	ldrb	r2, [r7, #5]
 800144c:	0912      	lsrs	r2, r2, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	4313      	orrs	r3, r2
 8001452:	4a0b      	ldr	r2, [pc, #44]	@ (8001480 <BMEReadRaw+0x98>)
 8001454:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001456:	79bb      	ldrb	r3, [r7, #6]
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	79fa      	ldrb	r2, [r7, #7]
 800145c:	4313      	orrs	r3, r2
 800145e:	4a09      	ldr	r2, [pc, #36]	@ (8001484 <BMEReadRaw+0x9c>)
 8001460:	6013      	str	r3, [r2, #0]

		return 0;
 8001462:	2300      	movs	r3, #0
 8001464:	e001      	b.n	800146a <BMEReadRaw+0x82>
	}

	else return -1;
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000234 	.word	0x20000234
 8001478:	200002b4 	.word	0x200002b4
 800147c:	2000023c 	.word	0x2000023c
 8001480:	20000238 	.word	0x20000238
 8001484:	20000240 	.word	0x20000240

08001488 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	10da      	asrs	r2, r3, #3
 8001494:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <BME280_compensate_T_int32+0x74>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	4a18      	ldr	r2, [pc, #96]	@ (8001500 <BME280_compensate_T_int32+0x78>)
 800149e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014a2:	fb02 f303 	mul.w	r3, r2, r3
 80014a6:	12db      	asrs	r3, r3, #11
 80014a8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	111b      	asrs	r3, r3, #4
 80014ae:	4a13      	ldr	r2, [pc, #76]	@ (80014fc <BME280_compensate_T_int32+0x74>)
 80014b0:	8812      	ldrh	r2, [r2, #0]
 80014b2:	1a9b      	subs	r3, r3, r2
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	1112      	asrs	r2, r2, #4
 80014b8:	4910      	ldr	r1, [pc, #64]	@ (80014fc <BME280_compensate_T_int32+0x74>)
 80014ba:	8809      	ldrh	r1, [r1, #0]
 80014bc:	1a52      	subs	r2, r2, r1
 80014be:	fb02 f303 	mul.w	r3, r2, r3
 80014c2:	131b      	asrs	r3, r3, #12
 80014c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001504 <BME280_compensate_T_int32+0x7c>)
 80014c6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014ca:	fb02 f303 	mul.w	r3, r2, r3
 80014ce:	139b      	asrs	r3, r3, #14
 80014d0:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4413      	add	r3, r2
 80014d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001508 <BME280_compensate_T_int32+0x80>)
 80014da:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80014dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001508 <BME280_compensate_T_int32+0x80>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	3380      	adds	r3, #128	@ 0x80
 80014e8:	121b      	asrs	r3, r3, #8
 80014ea:	60fb      	str	r3, [r7, #12]
	return T;
 80014ec:	68fb      	ldr	r3, [r7, #12]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	371c      	adds	r7, #28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000244 	.word	0x20000244
 8001500:	2000024c 	.word	0x2000024c
 8001504:	2000024e 	.word	0x2000024e
 8001508:	20000268 	.word	0x20000268

0800150c <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800150c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001510:	b0ca      	sub	sp, #296	@ 0x128
 8001512:	af00      	add	r7, sp, #0
 8001514:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001518:	4baf      	ldr	r3, [pc, #700]	@ (80017d8 <BME280_compensate_P_int64+0x2cc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	17da      	asrs	r2, r3, #31
 800151e:	461c      	mov	r4, r3
 8001520:	4615      	mov	r5, r2
 8001522:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001526:	f145 3bff 	adc.w	fp, r5, #4294967295
 800152a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800152e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001532:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001536:	fb03 f102 	mul.w	r1, r3, r2
 800153a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800153e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	18ca      	adds	r2, r1, r3
 8001548:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800154c:	fba3 8903 	umull	r8, r9, r3, r3
 8001550:	eb02 0309 	add.w	r3, r2, r9
 8001554:	4699      	mov	r9, r3
 8001556:	4ba1      	ldr	r3, [pc, #644]	@ (80017dc <BME280_compensate_P_int64+0x2d0>)
 8001558:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155c:	b21b      	sxth	r3, r3
 800155e:	17da      	asrs	r2, r3, #31
 8001560:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001564:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001568:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800156c:	4603      	mov	r3, r0
 800156e:	fb03 f209 	mul.w	r2, r3, r9
 8001572:	460b      	mov	r3, r1
 8001574:	fb08 f303 	mul.w	r3, r8, r3
 8001578:	4413      	add	r3, r2
 800157a:	4602      	mov	r2, r0
 800157c:	fba8 1202 	umull	r1, r2, r8, r2
 8001580:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001584:	460a      	mov	r2, r1
 8001586:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 800158a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800158e:	4413      	add	r3, r2
 8001590:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001594:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001598:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800159c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80015a0:	4b8f      	ldr	r3, [pc, #572]	@ (80017e0 <BME280_compensate_P_int64+0x2d4>)
 80015a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	17da      	asrs	r2, r3, #31
 80015aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80015ae:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80015b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015b6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80015ba:	462a      	mov	r2, r5
 80015bc:	fb02 f203 	mul.w	r2, r2, r3
 80015c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015c4:	4621      	mov	r1, r4
 80015c6:	fb01 f303 	mul.w	r3, r1, r3
 80015ca:	441a      	add	r2, r3
 80015cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015d0:	4621      	mov	r1, r4
 80015d2:	fba3 1301 	umull	r1, r3, r3, r1
 80015d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80015da:	460b      	mov	r3, r1
 80015dc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80015e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80015e4:	18d3      	adds	r3, r2, r3
 80015e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80015ea:	f04f 0000 	mov.w	r0, #0
 80015ee:	f04f 0100 	mov.w	r1, #0
 80015f2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80015f6:	462b      	mov	r3, r5
 80015f8:	0459      	lsls	r1, r3, #17
 80015fa:	4623      	mov	r3, r4
 80015fc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001600:	4623      	mov	r3, r4
 8001602:	0458      	lsls	r0, r3, #17
 8001604:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001608:	1814      	adds	r4, r2, r0
 800160a:	643c      	str	r4, [r7, #64]	@ 0x40
 800160c:	414b      	adcs	r3, r1
 800160e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001610:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001614:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001618:	4b72      	ldr	r3, [pc, #456]	@ (80017e4 <BME280_compensate_P_int64+0x2d8>)
 800161a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161e:	b21b      	sxth	r3, r3
 8001620:	17da      	asrs	r2, r3, #31
 8001622:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001626:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800162a:	f04f 0000 	mov.w	r0, #0
 800162e:	f04f 0100 	mov.w	r1, #0
 8001632:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001636:	00d9      	lsls	r1, r3, #3
 8001638:	2000      	movs	r0, #0
 800163a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800163e:	1814      	adds	r4, r2, r0
 8001640:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001642:	414b      	adcs	r3, r1
 8001644:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001646:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800164a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800164e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001652:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001656:	fb03 f102 	mul.w	r1, r3, r2
 800165a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800165e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001662:	fb02 f303 	mul.w	r3, r2, r3
 8001666:	18ca      	adds	r2, r1, r3
 8001668:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800166c:	fba3 1303 	umull	r1, r3, r3, r3
 8001670:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001674:	460b      	mov	r3, r1
 8001676:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800167a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800167e:	18d3      	adds	r3, r2, r3
 8001680:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001684:	4b58      	ldr	r3, [pc, #352]	@ (80017e8 <BME280_compensate_P_int64+0x2dc>)
 8001686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168a:	b21b      	sxth	r3, r3
 800168c:	17da      	asrs	r2, r3, #31
 800168e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001692:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001696:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800169a:	462b      	mov	r3, r5
 800169c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80016a0:	4642      	mov	r2, r8
 80016a2:	fb02 f203 	mul.w	r2, r2, r3
 80016a6:	464b      	mov	r3, r9
 80016a8:	4621      	mov	r1, r4
 80016aa:	fb01 f303 	mul.w	r3, r1, r3
 80016ae:	4413      	add	r3, r2
 80016b0:	4622      	mov	r2, r4
 80016b2:	4641      	mov	r1, r8
 80016b4:	fba2 1201 	umull	r1, r2, r2, r1
 80016b8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80016bc:	460a      	mov	r2, r1
 80016be:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80016c2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80016c6:	4413      	add	r3, r2
 80016c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80016cc:	f04f 0000 	mov.w	r0, #0
 80016d0:	f04f 0100 	mov.w	r1, #0
 80016d4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80016d8:	4623      	mov	r3, r4
 80016da:	0a18      	lsrs	r0, r3, #8
 80016dc:	462b      	mov	r3, r5
 80016de:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80016e2:	462b      	mov	r3, r5
 80016e4:	1219      	asrs	r1, r3, #8
 80016e6:	4b41      	ldr	r3, [pc, #260]	@ (80017ec <BME280_compensate_P_int64+0x2e0>)
 80016e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	17da      	asrs	r2, r3, #31
 80016f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80016f4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80016f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016fc:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001700:	464a      	mov	r2, r9
 8001702:	fb02 f203 	mul.w	r2, r2, r3
 8001706:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800170a:	4644      	mov	r4, r8
 800170c:	fb04 f303 	mul.w	r3, r4, r3
 8001710:	441a      	add	r2, r3
 8001712:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001716:	4644      	mov	r4, r8
 8001718:	fba3 4304 	umull	r4, r3, r3, r4
 800171c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001720:	4623      	mov	r3, r4
 8001722:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001726:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800172a:	18d3      	adds	r3, r2, r3
 800172c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800173c:	464c      	mov	r4, r9
 800173e:	0323      	lsls	r3, r4, #12
 8001740:	4644      	mov	r4, r8
 8001742:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001746:	4644      	mov	r4, r8
 8001748:	0322      	lsls	r2, r4, #12
 800174a:	1884      	adds	r4, r0, r2
 800174c:	633c      	str	r4, [r7, #48]	@ 0x30
 800174e:	eb41 0303 	adc.w	r3, r1, r3
 8001752:	637b      	str	r3, [r7, #52]	@ 0x34
 8001754:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001758:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800175c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001760:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001764:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001768:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800176c:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <BME280_compensate_P_int64+0x2e4>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	b29b      	uxth	r3, r3
 8001772:	2200      	movs	r2, #0
 8001774:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001778:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800177c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001780:	462b      	mov	r3, r5
 8001782:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001786:	4642      	mov	r2, r8
 8001788:	fb02 f203 	mul.w	r2, r2, r3
 800178c:	464b      	mov	r3, r9
 800178e:	4621      	mov	r1, r4
 8001790:	fb01 f303 	mul.w	r3, r1, r3
 8001794:	4413      	add	r3, r2
 8001796:	4622      	mov	r2, r4
 8001798:	4641      	mov	r1, r8
 800179a:	fba2 1201 	umull	r1, r2, r2, r1
 800179e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80017a2:	460a      	mov	r2, r1
 80017a4:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80017a8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80017ac:	4413      	add	r3, r2
 80017ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80017be:	4629      	mov	r1, r5
 80017c0:	104a      	asrs	r2, r1, #1
 80017c2:	4629      	mov	r1, r5
 80017c4:	17cb      	asrs	r3, r1, #31
 80017c6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 80017ca:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017ce:	4313      	orrs	r3, r2
 80017d0:	d110      	bne.n	80017f4 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 80017d2:	2300      	movs	r3, #0
 80017d4:	e154      	b.n	8001a80 <BME280_compensate_P_int64+0x574>
 80017d6:	bf00      	nop
 80017d8:	20000268 	.word	0x20000268
 80017dc:	20000258 	.word	0x20000258
 80017e0:	20000256 	.word	0x20000256
 80017e4:	20000254 	.word	0x20000254
 80017e8:	20000252 	.word	0x20000252
 80017ec:	20000250 	.word	0x20000250
 80017f0:	20000246 	.word	0x20000246
	}
	p = 1048576-adc_P;
 80017f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80017f8:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80017fc:	17da      	asrs	r2, r3, #31
 80017fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001800:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001802:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001806:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800180a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800180e:	105b      	asrs	r3, r3, #1
 8001810:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001814:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001818:	07db      	lsls	r3, r3, #31
 800181a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800181e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001822:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001826:	4621      	mov	r1, r4
 8001828:	1a89      	subs	r1, r1, r2
 800182a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800182c:	4629      	mov	r1, r5
 800182e:	eb61 0303 	sbc.w	r3, r1, r3
 8001832:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001834:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001838:	4622      	mov	r2, r4
 800183a:	462b      	mov	r3, r5
 800183c:	1891      	adds	r1, r2, r2
 800183e:	6239      	str	r1, [r7, #32]
 8001840:	415b      	adcs	r3, r3
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
 8001844:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001848:	4621      	mov	r1, r4
 800184a:	1851      	adds	r1, r2, r1
 800184c:	61b9      	str	r1, [r7, #24]
 800184e:	4629      	mov	r1, r5
 8001850:	414b      	adcs	r3, r1
 8001852:	61fb      	str	r3, [r7, #28]
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001860:	4649      	mov	r1, r9
 8001862:	018b      	lsls	r3, r1, #6
 8001864:	4641      	mov	r1, r8
 8001866:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800186a:	4641      	mov	r1, r8
 800186c:	018a      	lsls	r2, r1, #6
 800186e:	4641      	mov	r1, r8
 8001870:	1889      	adds	r1, r1, r2
 8001872:	6139      	str	r1, [r7, #16]
 8001874:	4649      	mov	r1, r9
 8001876:	eb43 0101 	adc.w	r1, r3, r1
 800187a:	6179      	str	r1, [r7, #20]
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001888:	4649      	mov	r1, r9
 800188a:	008b      	lsls	r3, r1, #2
 800188c:	4641      	mov	r1, r8
 800188e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001892:	4641      	mov	r1, r8
 8001894:	008a      	lsls	r2, r1, #2
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	4603      	mov	r3, r0
 800189c:	4622      	mov	r2, r4
 800189e:	189b      	adds	r3, r3, r2
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	460b      	mov	r3, r1
 80018a4:	462a      	mov	r2, r5
 80018a6:	eb42 0303 	adc.w	r3, r2, r3
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80018b8:	4649      	mov	r1, r9
 80018ba:	008b      	lsls	r3, r1, #2
 80018bc:	4641      	mov	r1, r8
 80018be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018c2:	4641      	mov	r1, r8
 80018c4:	008a      	lsls	r2, r1, #2
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	4603      	mov	r3, r0
 80018cc:	4622      	mov	r2, r4
 80018ce:	189b      	adds	r3, r3, r2
 80018d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80018d2:	462b      	mov	r3, r5
 80018d4:	460a      	mov	r2, r1
 80018d6:	eb42 0303 	adc.w	r3, r2, r3
 80018da:	677b      	str	r3, [r7, #116]	@ 0x74
 80018dc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80018e0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80018e4:	f7ff fa00 	bl	8000ce8 <__aeabi_ldivmod>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80018f0:	4b66      	ldr	r3, [pc, #408]	@ (8001a8c <BME280_compensate_P_int64+0x580>)
 80018f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f6:	b21b      	sxth	r3, r3
 80018f8:	17da      	asrs	r2, r3, #31
 80018fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80018fc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80018fe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001902:	f04f 0000 	mov.w	r0, #0
 8001906:	f04f 0100 	mov.w	r1, #0
 800190a:	0b50      	lsrs	r0, r2, #13
 800190c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001910:	1359      	asrs	r1, r3, #13
 8001912:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001916:	462b      	mov	r3, r5
 8001918:	fb00 f203 	mul.w	r2, r0, r3
 800191c:	4623      	mov	r3, r4
 800191e:	fb03 f301 	mul.w	r3, r3, r1
 8001922:	4413      	add	r3, r2
 8001924:	4622      	mov	r2, r4
 8001926:	fba2 1200 	umull	r1, r2, r2, r0
 800192a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800192e:	460a      	mov	r2, r1
 8001930:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001934:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001938:	4413      	add	r3, r2
 800193a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800193e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001942:	f04f 0000 	mov.w	r0, #0
 8001946:	f04f 0100 	mov.w	r1, #0
 800194a:	0b50      	lsrs	r0, r2, #13
 800194c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001950:	1359      	asrs	r1, r3, #13
 8001952:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001956:	462b      	mov	r3, r5
 8001958:	fb00 f203 	mul.w	r2, r0, r3
 800195c:	4623      	mov	r3, r4
 800195e:	fb03 f301 	mul.w	r3, r3, r1
 8001962:	4413      	add	r3, r2
 8001964:	4622      	mov	r2, r4
 8001966:	fba2 1200 	umull	r1, r2, r2, r0
 800196a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800196e:	460a      	mov	r2, r1
 8001970:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001974:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001978:	4413      	add	r3, r2
 800197a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800198a:	4621      	mov	r1, r4
 800198c:	0e4a      	lsrs	r2, r1, #25
 800198e:	4629      	mov	r1, r5
 8001990:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001994:	4629      	mov	r1, r5
 8001996:	164b      	asrs	r3, r1, #25
 8001998:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 800199c:	4b3c      	ldr	r3, [pc, #240]	@ (8001a90 <BME280_compensate_P_int64+0x584>)
 800199e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a2:	b21b      	sxth	r3, r3
 80019a4:	17da      	asrs	r2, r3, #31
 80019a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80019a8:	667a      	str	r2, [r7, #100]	@ 0x64
 80019aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80019ae:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80019b2:	462a      	mov	r2, r5
 80019b4:	fb02 f203 	mul.w	r2, r2, r3
 80019b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80019bc:	4621      	mov	r1, r4
 80019be:	fb01 f303 	mul.w	r3, r1, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80019c8:	4621      	mov	r1, r4
 80019ca:	fba2 1201 	umull	r1, r2, r2, r1
 80019ce:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80019d2:	460a      	mov	r2, r1
 80019d4:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80019d8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80019dc:	4413      	add	r3, r2
 80019de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80019ee:	4621      	mov	r1, r4
 80019f0:	0cca      	lsrs	r2, r1, #19
 80019f2:	4629      	mov	r1, r5
 80019f4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80019f8:	4629      	mov	r1, r5
 80019fa:	14cb      	asrs	r3, r1, #19
 80019fc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a00:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001a04:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001a08:	1884      	adds	r4, r0, r2
 8001a0a:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001a0c:	eb41 0303 	adc.w	r3, r1, r3
 8001a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001a12:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a16:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	1889      	adds	r1, r1, r2
 8001a1e:	6539      	str	r1, [r7, #80]	@ 0x50
 8001a20:	4629      	mov	r1, r5
 8001a22:	eb43 0101 	adc.w	r1, r3, r1
 8001a26:	6579      	str	r1, [r7, #84]	@ 0x54
 8001a28:	f04f 0000 	mov.w	r0, #0
 8001a2c:	f04f 0100 	mov.w	r1, #0
 8001a30:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001a34:	4623      	mov	r3, r4
 8001a36:	0a18      	lsrs	r0, r3, #8
 8001a38:	462b      	mov	r3, r5
 8001a3a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a3e:	462b      	mov	r3, r5
 8001a40:	1219      	asrs	r1, r3, #8
 8001a42:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <BME280_compensate_P_int64+0x588>)
 8001a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a48:	b21b      	sxth	r3, r3
 8001a4a:	17da      	asrs	r2, r3, #31
 8001a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a4e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001a5c:	464c      	mov	r4, r9
 8001a5e:	0123      	lsls	r3, r4, #4
 8001a60:	4644      	mov	r4, r8
 8001a62:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a66:	4644      	mov	r4, r8
 8001a68:	0122      	lsls	r2, r4, #4
 8001a6a:	1884      	adds	r4, r0, r2
 8001a6c:	603c      	str	r4, [r7, #0]
 8001a6e:	eb41 0303 	adc.w	r3, r1, r3
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a78:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8001a7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001a86:	46bd      	mov	sp, r7
 8001a88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a8c:	2000025e 	.word	0x2000025e
 8001a90:	2000025c 	.word	0x2000025c
 8001a94:	2000025a 	.word	0x2000025a

08001a98 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b54 <bme280_compensate_H_int32+0xbc>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001aa8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	039a      	lsls	r2, r3, #14
 8001aae:	4b2a      	ldr	r3, [pc, #168]	@ (8001b58 <bme280_compensate_H_int32+0xc0>)
 8001ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab4:	051b      	lsls	r3, r3, #20
 8001ab6:	1ad2      	subs	r2, r2, r3
 8001ab8:	4b28      	ldr	r3, [pc, #160]	@ (8001b5c <bme280_compensate_H_int32+0xc4>)
 8001aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	fb01 f303 	mul.w	r3, r1, r3
 8001ac6:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001ac8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001acc:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001ace:	4a24      	ldr	r2, [pc, #144]	@ (8001b60 <bme280_compensate_H_int32+0xc8>)
 8001ad0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001ad4:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001adc:	1292      	asrs	r2, r2, #10
 8001ade:	4921      	ldr	r1, [pc, #132]	@ (8001b64 <bme280_compensate_H_int32+0xcc>)
 8001ae0:	8809      	ldrh	r1, [r1, #0]
 8001ae2:	4608      	mov	r0, r1
 8001ae4:	68f9      	ldr	r1, [r7, #12]
 8001ae6:	fb00 f101 	mul.w	r1, r0, r1
 8001aea:	12c9      	asrs	r1, r1, #11
 8001aec:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001af0:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001af4:	1292      	asrs	r2, r2, #10
 8001af6:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001afa:	491b      	ldr	r1, [pc, #108]	@ (8001b68 <bme280_compensate_H_int32+0xd0>)
 8001afc:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b00:	fb01 f202 	mul.w	r2, r1, r2
 8001b04:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
					8192) >> 14));
 8001b08:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	13db      	asrs	r3, r3, #15
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	13d2      	asrs	r2, r2, #15
 8001b18:	fb02 f303 	mul.w	r3, r2, r3
 8001b1c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001b1e:	4a13      	ldr	r2, [pc, #76]	@ (8001b6c <bme280_compensate_H_int32+0xd4>)
 8001b20:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b22:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001b26:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b34:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001b3c:	bfa8      	it	ge
 8001b3e:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001b42:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	131b      	asrs	r3, r3, #12
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	20000268 	.word	0x20000268
 8001b58:	20000262 	.word	0x20000262
 8001b5c:	20000264 	.word	0x20000264
 8001b60:	20000266 	.word	0x20000266
 8001b64:	2000024a 	.word	0x2000024a
 8001b68:	20000260 	.word	0x20000260
 8001b6c:	20000248 	.word	0x20000248

08001b70 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001b74:	f7ff fc38 	bl	80013e8 <BMEReadRaw>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d16c      	bne.n	8001c58 <BME280_Measure+0xe8>
	{
		  if (tRaw == 0x800000) SD.Temperature = 0; // value in case temp measurement was disabled
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c74 <BME280_Measure+0x104>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b86:	d104      	bne.n	8001b92 <BME280_Measure+0x22>
 8001b88:	4b3b      	ldr	r3, [pc, #236]	@ (8001c78 <BME280_Measure+0x108>)
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	e016      	b.n	8001bc0 <BME280_Measure+0x50>
		  else
		  {
			  SD.Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001b92:	4b38      	ldr	r3, [pc, #224]	@ (8001c74 <BME280_Measure+0x104>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fc76 	bl	8001488 <BME280_compensate_T_int32>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fd10 	bl	80005c4 <__aeabi_i2d>
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	4b34      	ldr	r3, [pc, #208]	@ (8001c7c <BME280_Measure+0x10c>)
 8001baa:	f7fe fe9f 	bl	80008ec <__aeabi_ddiv>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f7ff f847 	bl	8000c48 <__aeabi_d2f>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4a2e      	ldr	r2, [pc, #184]	@ (8001c78 <BME280_Measure+0x108>)
 8001bbe:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) SD.Pressure = 0; // value in case temp measurement was disabled
 8001bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8001c80 <BME280_Measure+0x110>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001bc8:	d104      	bne.n	8001bd4 <BME280_Measure+0x64>
 8001bca:	4b2b      	ldr	r3, [pc, #172]	@ (8001c78 <BME280_Measure+0x108>)
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	e01f      	b.n	8001c14 <BME280_Measure+0xa4>
		  else
		  {
#if SUPPORT_64BIT
			  SD.Pressure = (((BME280_compensate_P_int64 (pRaw))/256.0)/1000);  // as per datasheet, the pressure is x256
 8001bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c80 <BME280_Measure+0x110>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fc97 	bl	800150c <BME280_compensate_P_int64>
 8001bde:	4603      	mov	r3, r0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fcdf 	bl	80005a4 <__aeabi_ui2d>
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	4b26      	ldr	r3, [pc, #152]	@ (8001c84 <BME280_Measure+0x114>)
 8001bec:	f7fe fe7e 	bl	80008ec <__aeabi_ddiv>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	4b22      	ldr	r3, [pc, #136]	@ (8001c88 <BME280_Measure+0x118>)
 8001bfe:	f7fe fe75 	bl	80008ec <__aeabi_ddiv>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f7ff f81d 	bl	8000c48 <__aeabi_d2f>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4a19      	ldr	r2, [pc, #100]	@ (8001c78 <BME280_Measure+0x108>)
 8001c12:	6053      	str	r3, [r2, #4]
			  SD.Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) SD.Humidity = 0; // value in case temp measurement was disabled
 8001c14:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <BME280_Measure+0x11c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c1c:	d104      	bne.n	8001c28 <BME280_Measure+0xb8>
 8001c1e:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <BME280_Measure+0x108>)
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
	// if the device is detached
	else
	{
		SD.Temperature = SD.Pressure = SD.Humidity = 0;
	}
}
 8001c26:	e023      	b.n	8001c70 <BME280_Measure+0x100>
			  SD.Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001c28:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <BME280_Measure+0x11c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff33 	bl	8001a98 <bme280_compensate_H_int32>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fcb5 	bl	80005a4 <__aeabi_ui2d>
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	4b14      	ldr	r3, [pc, #80]	@ (8001c90 <BME280_Measure+0x120>)
 8001c40:	f7fe fe54 	bl	80008ec <__aeabi_ddiv>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe fffc 	bl	8000c48 <__aeabi_d2f>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4a09      	ldr	r2, [pc, #36]	@ (8001c78 <BME280_Measure+0x108>)
 8001c54:	6093      	str	r3, [r2, #8]
}
 8001c56:	e00b      	b.n	8001c70 <BME280_Measure+0x100>
		SD.Temperature = SD.Pressure = SD.Humidity = 0;
 8001c58:	4b07      	ldr	r3, [pc, #28]	@ (8001c78 <BME280_Measure+0x108>)
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <BME280_Measure+0x108>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4a04      	ldr	r2, [pc, #16]	@ (8001c78 <BME280_Measure+0x108>)
 8001c66:	6053      	str	r3, [r2, #4]
 8001c68:	4b03      	ldr	r3, [pc, #12]	@ (8001c78 <BME280_Measure+0x108>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	4a02      	ldr	r2, [pc, #8]	@ (8001c78 <BME280_Measure+0x108>)
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000238 	.word	0x20000238
 8001c78:	2000020c 	.word	0x2000020c
 8001c7c:	40590000 	.word	0x40590000
 8001c80:	2000023c 	.word	0x2000023c
 8001c84:	40700000 	.word	0x40700000
 8001c88:	408f4000 	.word	0x408f4000
 8001c8c:	20000240 	.word	0x20000240
 8001c90:	40900000 	.word	0x40900000

08001c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c9a:	f001 f90b 	bl	8002eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c9e:	f000 f87d 	bl	8001d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ca2:	f000 f9ab 	bl	8001ffc <MX_GPIO_Init>
  MX_DMA_Init();
 8001ca6:	f000 f981 	bl	8001fac <MX_DMA_Init>
  MX_ADC1_Init();
 8001caa:	f000 f8d5 	bl	8001e58 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001cae:	f000 f925 	bl	8001efc <MX_I2C1_Init>
  MX_UART5_Init();
 8001cb2:	f000 f951 	bl	8001f58 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_SYSVIEW_Conf();
 8001cb6:	f008 fb49 	bl	800a34c <SEGGER_SYSVIEW_Conf>
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);	//ensure proper priority grouping for freeRTOS//?
 8001cba:	2003      	movs	r0, #3
 8001cbc:	f001 ffc0 	bl	8003c40 <HAL_NVIC_SetPriorityGrouping>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);//?
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	210f      	movs	r1, #15
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f001 ffda 	bl	8003c80 <HAL_NVIC_SetPriority>


  // Initialize BME280
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001ccc:	2304      	movs	r3, #4
 8001cce:	9301      	str	r3, [sp, #4]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	2105      	movs	r1, #5
 8001cda:	2002      	movs	r0, #2
 8001cdc:	f7ff faae 	bl	800123c <BME280_Config>

  // Create RTOS Queue & Semaphore
  SensorDataMutex = xSemaphoreCreateMutex();
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f006 fa71 	bl	80081c8 <xQueueCreateMutex>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4a21      	ldr	r2, [pc, #132]	@ (8001d70 <main+0xdc>)
 8001cea:	6013      	str	r3, [r2, #0]
  assert_param(SensorDataMutex!=NULL);
 8001cec:	4b20      	ldr	r3, [pc, #128]	@ (8001d70 <main+0xdc>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d103      	bne.n	8001cfc <main+0x68>
 8001cf4:	21b1      	movs	r1, #177	@ 0xb1
 8001cf6:	481f      	ldr	r0, [pc, #124]	@ (8001d74 <main+0xe0>)
 8001cf8:	f000 fd0a 	bl	8002710 <assert_failed>

  /* Create RTOS Tasks */
  assert_param(xTaskCreate(Task_SensorRead, "SensorTask", 1024, NULL, 3, &SensorTaskHandle) == pdPASS);
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <main+0xe4>)
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	2303      	movs	r3, #3
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2300      	movs	r3, #0
 8001d06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d0a:	491c      	ldr	r1, [pc, #112]	@ (8001d7c <main+0xe8>)
 8001d0c:	481c      	ldr	r0, [pc, #112]	@ (8001d80 <main+0xec>)
 8001d0e:	f006 fd47 	bl	80087a0 <xTaskCreate>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d003      	beq.n	8001d20 <main+0x8c>
 8001d18:	21b4      	movs	r1, #180	@ 0xb4
 8001d1a:	4816      	ldr	r0, [pc, #88]	@ (8001d74 <main+0xe0>)
 8001d1c:	f000 fcf8 	bl	8002710 <assert_failed>
  assert_param(xTaskCreate(Task_DisplayUpdate, "DisplayTask", 1024, NULL, 2, &DisplayTaskHandle) == pdPASS);
 8001d20:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <main+0xf0>)
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	2302      	movs	r3, #2
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d2e:	4916      	ldr	r1, [pc, #88]	@ (8001d88 <main+0xf4>)
 8001d30:	4816      	ldr	r0, [pc, #88]	@ (8001d8c <main+0xf8>)
 8001d32:	f006 fd35 	bl	80087a0 <xTaskCreate>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d003      	beq.n	8001d44 <main+0xb0>
 8001d3c:	21b5      	movs	r1, #181	@ 0xb5
 8001d3e:	480d      	ldr	r0, [pc, #52]	@ (8001d74 <main+0xe0>)
 8001d40:	f000 fce6 	bl	8002710 <assert_failed>
  assert_param(xTaskCreate(Task_UARTSend, "UartTask", 1024, NULL, 1, &UartTaskHandle) == pdPASS);
 8001d44:	4b12      	ldr	r3, [pc, #72]	@ (8001d90 <main+0xfc>)
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	2301      	movs	r3, #1
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d52:	4910      	ldr	r1, [pc, #64]	@ (8001d94 <main+0x100>)
 8001d54:	4810      	ldr	r0, [pc, #64]	@ (8001d98 <main+0x104>)
 8001d56:	f006 fd23 	bl	80087a0 <xTaskCreate>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d003      	beq.n	8001d68 <main+0xd4>
 8001d60:	21b6      	movs	r1, #182	@ 0xb6
 8001d62:	4804      	ldr	r0, [pc, #16]	@ (8001d74 <main+0xe0>)
 8001d64:	f000 fcd4 	bl	8002710 <assert_failed>

  /* Start Scheduler */
  vTaskStartScheduler();
 8001d68:	f006 feda 	bl	8008b20 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <main+0xd8>
 8001d70:	20000438 	.word	0x20000438
 8001d74:	0800f9e8 	.word	0x0800f9e8
 8001d78:	2000043c 	.word	0x2000043c
 8001d7c:	0800f9fc 	.word	0x0800f9fc
 8001d80:	080020f1 	.word	0x080020f1
 8001d84:	20000440 	.word	0x20000440
 8001d88:	0800fa08 	.word	0x0800fa08
 8001d8c:	080023c1 	.word	0x080023c1
 8001d90:	20000444 	.word	0x20000444
 8001d94:	0800fa14 	.word	0x0800fa14
 8001d98:	0800243d 	.word	0x0800243d

08001d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b094      	sub	sp, #80	@ 0x50
 8001da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da2:	f107 0320 	add.w	r3, r7, #32
 8001da6:	2230      	movs	r2, #48	@ 0x30
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f00a fde9 	bl	800c982 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	4b22      	ldr	r3, [pc, #136]	@ (8001e50 <SystemClock_Config+0xb4>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	4a21      	ldr	r2, [pc, #132]	@ (8001e50 <SystemClock_Config+0xb4>)
 8001dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dce:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e50 <SystemClock_Config+0xb4>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ddc:	2300      	movs	r3, #0
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e54 <SystemClock_Config+0xb8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a1b      	ldr	r2, [pc, #108]	@ (8001e54 <SystemClock_Config+0xb8>)
 8001de6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b19      	ldr	r3, [pc, #100]	@ (8001e54 <SystemClock_Config+0xb8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e00:	2310      	movs	r3, #16
 8001e02:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e08:	f107 0320 	add.w	r3, r7, #32
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f004 f849 	bl	8005ea4 <HAL_RCC_OscConfig>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001e18:	f000 fc74 	bl	8002704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e1c:	230f      	movs	r3, #15
 8001e1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e30:	f107 030c 	add.w	r3, r7, #12
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f004 fb60 	bl	80064fc <HAL_RCC_ClockConfig>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001e42:	f000 fc5f 	bl	8002704 <Error_Handler>
  }
}
 8001e46:	bf00      	nop
 8001e48:	3750      	adds	r7, #80	@ 0x50
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40007000 	.word	0x40007000

08001e58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e5e:	463b      	mov	r3, r7
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e6a:	4b21      	ldr	r3, [pc, #132]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001e6c:	4a21      	ldr	r2, [pc, #132]	@ (8001ef4 <MX_ADC1_Init+0x9c>)
 8001e6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e70:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e82:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e88:	4b19      	ldr	r3, [pc, #100]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e90:	4b17      	ldr	r3, [pc, #92]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e96:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001e98:	4a17      	ldr	r2, [pc, #92]	@ (8001ef8 <MX_ADC1_Init+0xa0>)
 8001e9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ea2:	4b13      	ldr	r3, [pc, #76]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001eb6:	480e      	ldr	r0, [pc, #56]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001eb8:	f001 f862 	bl	8002f80 <HAL_ADC_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001ec2:	f000 fc1f 	bl	8002704 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ed2:	463b      	mov	r3, r7
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4806      	ldr	r0, [pc, #24]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001ed8:	f001 fb9c 	bl	8003614 <HAL_ADC_ConfigChannel>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001ee2:	f000 fc0f 	bl	8002704 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2000026c 	.word	0x2000026c
 8001ef4:	40012000 	.word	0x40012000
 8001ef8:	0f000001 	.word	0x0f000001

08001efc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f00:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f02:	4a13      	ldr	r2, [pc, #76]	@ (8001f50 <MX_I2C1_Init+0x54>)
 8001f04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f06:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f08:	4a12      	ldr	r2, [pc, #72]	@ (8001f54 <MX_I2C1_Init+0x58>)
 8001f0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 236;
 8001f12:	4b0e      	ldr	r3, [pc, #56]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f14:	22ec      	movs	r2, #236	@ 0xec
 8001f16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_10BIT;
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f1a:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8001f1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f20:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f26:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f2c:	4b07      	ldr	r3, [pc, #28]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f38:	4804      	ldr	r0, [pc, #16]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f3a:	f002 fef3 	bl	8004d24 <HAL_I2C_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f44:	f000 fbde 	bl	8002704 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	200002b4 	.word	0x200002b4
 8001f50:	40005400 	.word	0x40005400
 8001f54:	000186a0 	.word	0x000186a0

08001f58 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	@ (8001fa4 <MX_UART5_Init+0x4c>)
 8001f5e:	4a12      	ldr	r2, [pc, #72]	@ (8001fa8 <MX_UART5_Init+0x50>)
 8001f60:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001f62:	4b10      	ldr	r3, [pc, #64]	@ (8001fa4 <MX_UART5_Init+0x4c>)
 8001f64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f68:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa4 <MX_UART5_Init+0x4c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001f70:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <MX_UART5_Init+0x4c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001f76:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <MX_UART5_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001f7c:	4b09      	ldr	r3, [pc, #36]	@ (8001fa4 <MX_UART5_Init+0x4c>)
 8001f7e:	220c      	movs	r2, #12
 8001f80:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f82:	4b08      	ldr	r3, [pc, #32]	@ (8001fa4 <MX_UART5_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f88:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <MX_UART5_Init+0x4c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f8e:	4805      	ldr	r0, [pc, #20]	@ (8001fa4 <MX_UART5_Init+0x4c>)
 8001f90:	f005 f92e 	bl	80071f0 <HAL_UART_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001f9a:	f000 fbb3 	bl	8002704 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000308 	.word	0x20000308
 8001fa8:	40005000 	.word	0x40005000

08001fac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ff8 <MX_DMA_Init+0x4c>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff8 <MX_DMA_Init+0x4c>)
 8001fbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff8 <MX_DMA_Init+0x4c>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	200b      	movs	r0, #11
 8001fd4:	f001 fe54 	bl	8003c80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001fd8:	200b      	movs	r0, #11
 8001fda:	f001 fe7d 	bl	8003cd8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	202f      	movs	r0, #47	@ 0x2f
 8001fe4:	f001 fe4c 	bl	8003c80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001fe8:	202f      	movs	r0, #47	@ 0x2f
 8001fea:	f001 fe75 	bl	8003cd8 <HAL_NVIC_EnableIRQ>

}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800

08001ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	@ 0x28
 8002000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002002:	f107 0314 	add.w	r3, r7, #20
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	60da      	str	r2, [r3, #12]
 8002010:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	4b32      	ldr	r3, [pc, #200]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	4a31      	ldr	r2, [pc, #196]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6313      	str	r3, [r2, #48]	@ 0x30
 8002022:	4b2f      	ldr	r3, [pc, #188]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	4b2b      	ldr	r3, [pc, #172]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	4a2a      	ldr	r2, [pc, #168]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 8002038:	f043 0308 	orr.w	r3, r3, #8
 800203c:	6313      	str	r3, [r2, #48]	@ 0x30
 800203e:	4b28      	ldr	r3, [pc, #160]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	4b24      	ldr	r3, [pc, #144]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	4a23      	ldr	r2, [pc, #140]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 8002054:	f043 0304 	orr.w	r3, r3, #4
 8002058:	6313      	str	r3, [r2, #48]	@ 0x30
 800205a:	4b21      	ldr	r3, [pc, #132]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	4b1d      	ldr	r3, [pc, #116]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	4a1c      	ldr	r2, [pc, #112]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	6313      	str	r3, [r2, #48]	@ 0x30
 8002076:	4b1a      	ldr	r3, [pc, #104]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8002088:	4816      	ldr	r0, [pc, #88]	@ (80020e4 <MX_GPIO_Init+0xe8>)
 800208a:	f002 fe07 	bl	8004c9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800208e:	2301      	movs	r3, #1
 8002090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002092:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	4619      	mov	r1, r3
 80020a2:	4811      	ldr	r0, [pc, #68]	@ (80020e8 <MX_GPIO_Init+0xec>)
 80020a4:	f002 fb1a 	bl	80046dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80020a8:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80020ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ae:	2301      	movs	r3, #1
 80020b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2300      	movs	r3, #0
 80020b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	4808      	ldr	r0, [pc, #32]	@ (80020e4 <MX_GPIO_Init+0xe8>)
 80020c2:	f002 fb0b 	bl	80046dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2100      	movs	r1, #0
 80020ca:	2006      	movs	r0, #6
 80020cc:	f001 fdd8 	bl	8003c80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020d0:	2006      	movs	r0, #6
 80020d2:	f001 fe01 	bl	8003cd8 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020d6:	bf00      	nop
 80020d8:	3728      	adds	r7, #40	@ 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020c00 	.word	0x40020c00
 80020e8:	40020000 	.word	0x40020000
 80020ec:	00000000 	.word	0x00000000

080020f0 <Task_SensorRead>:

/* USER CODE BEGIN 4 */
void Task_SensorRead(void *pvParameters)
{
 80020f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020f4:	b094      	sub	sp, #80	@ 0x50
 80020f6:	af0c      	add	r7, sp, #48	@ 0x30
 80020f8:	61f8      	str	r0, [r7, #28]
    while (1)
    {
	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("Task_SensorRead is running");
 80020fa:	489d      	ldr	r0, [pc, #628]	@ (8002370 <Task_SensorRead+0x280>)
 80020fc:	f009 fe20 	bl	800bd40 <SEGGER_SYSVIEW_PrintfHost>
    #endif

        BME280_Measure();
 8002100:	f7ff fd36 	bl	8001b70 <BME280_Measure>

        SD.ADC_Value = Read_ADC_Value(&hadc1);
 8002104:	489b      	ldr	r0, [pc, #620]	@ (8002374 <Task_SensorRead+0x284>)
 8002106:	f000 fb6f 	bl	80027e8 <Read_ADC_Value>
 800210a:	eef0 7a40 	vmov.f32	s15, s0
 800210e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002112:	ee17 3a90 	vmov	r3, s15
 8002116:	b29a      	uxth	r2, r3
 8002118:	4b97      	ldr	r3, [pc, #604]	@ (8002378 <Task_SensorRead+0x288>)
 800211a:	849a      	strh	r2, [r3, #36]	@ 0x24

        SD.mq135_voltage = ((SD.ADC_Value * 5.0) / 4095.0);
 800211c:	4b96      	ldr	r3, [pc, #600]	@ (8002378 <Task_SensorRead+0x288>)
 800211e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8002120:	4618      	mov	r0, r3
 8002122:	f7fe fa4f 	bl	80005c4 <__aeabi_i2d>
 8002126:	f04f 0200 	mov.w	r2, #0
 800212a:	4b94      	ldr	r3, [pc, #592]	@ (800237c <Task_SensorRead+0x28c>)
 800212c:	f7fe fab4 	bl	8000698 <__aeabi_dmul>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	a38b      	add	r3, pc, #556	@ (adr r3, 8002368 <Task_SensorRead+0x278>)
 800213a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213e:	f7fe fbd5 	bl	80008ec <__aeabi_ddiv>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	f7fe fd7d 	bl	8000c48 <__aeabi_d2f>
 800214e:	4603      	mov	r3, r0
 8002150:	4a89      	ldr	r2, [pc, #548]	@ (8002378 <Task_SensorRead+0x288>)
 8002152:	60d3      	str	r3, [r2, #12]
        SD.Rs = ((5.0 - SD.mq135_voltage) / SD.mq135_voltage) * RL;
 8002154:	4b88      	ldr	r3, [pc, #544]	@ (8002378 <Task_SensorRead+0x288>)
 8002156:	68db      	ldr	r3, [r3, #12]
 8002158:	4618      	mov	r0, r3
 800215a:	f7fe fa45 	bl	80005e8 <__aeabi_f2d>
 800215e:	4602      	mov	r2, r0
 8002160:	460b      	mov	r3, r1
 8002162:	f04f 0000 	mov.w	r0, #0
 8002166:	4985      	ldr	r1, [pc, #532]	@ (800237c <Task_SensorRead+0x28c>)
 8002168:	f7fe f8de 	bl	8000328 <__aeabi_dsub>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	4614      	mov	r4, r2
 8002172:	461d      	mov	r5, r3
 8002174:	4b80      	ldr	r3, [pc, #512]	@ (8002378 <Task_SensorRead+0x288>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	4618      	mov	r0, r3
 800217a:	f7fe fa35 	bl	80005e8 <__aeabi_f2d>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4620      	mov	r0, r4
 8002184:	4629      	mov	r1, r5
 8002186:	f7fe fbb1 	bl	80008ec <__aeabi_ddiv>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	4610      	mov	r0, r2
 8002190:	4619      	mov	r1, r3
 8002192:	f04f 0200 	mov.w	r2, #0
 8002196:	4b7a      	ldr	r3, [pc, #488]	@ (8002380 <Task_SensorRead+0x290>)
 8002198:	f7fe fa7e 	bl	8000698 <__aeabi_dmul>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	f7fe fd50 	bl	8000c48 <__aeabi_d2f>
 80021a8:	4603      	mov	r3, r0
 80021aa:	4a73      	ldr	r2, [pc, #460]	@ (8002378 <Task_SensorRead+0x288>)
 80021ac:	6113      	str	r3, [r2, #16]

        SD.Co2     = calculate_ppm(SD.Rs, R0_CO2, A_CO2, B_CO2);
 80021ae:	4b72      	ldr	r3, [pc, #456]	@ (8002378 <Task_SensorRead+0x288>)
 80021b0:	edd3 7a04 	vldr	s15, [r3, #16]
 80021b4:	eddf 1a73 	vldr	s3, [pc, #460]	@ 8002384 <Task_SensorRead+0x294>
 80021b8:	ed9f 1a73 	vldr	s2, [pc, #460]	@ 8002388 <Task_SensorRead+0x298>
 80021bc:	eddf 0a73 	vldr	s1, [pc, #460]	@ 800238c <Task_SensorRead+0x29c>
 80021c0:	eeb0 0a67 	vmov.f32	s0, s15
 80021c4:	f000 fa4e 	bl	8002664 <calculate_ppm>
 80021c8:	eef0 7a40 	vmov.f32	s15, s0
 80021cc:	4b6a      	ldr	r3, [pc, #424]	@ (8002378 <Task_SensorRead+0x288>)
 80021ce:	edc3 7a05 	vstr	s15, [r3, #20]
        SD.NH3     = calculate_ppm(SD.Rs, R0_NH3, A_NH3, B_NH3);
 80021d2:	4b69      	ldr	r3, [pc, #420]	@ (8002378 <Task_SensorRead+0x288>)
 80021d4:	edd3 7a04 	vldr	s15, [r3, #16]
 80021d8:	eddf 1a6d 	vldr	s3, [pc, #436]	@ 8002390 <Task_SensorRead+0x2a0>
 80021dc:	ed9f 1a6d 	vldr	s2, [pc, #436]	@ 8002394 <Task_SensorRead+0x2a4>
 80021e0:	eddf 0a6d 	vldr	s1, [pc, #436]	@ 8002398 <Task_SensorRead+0x2a8>
 80021e4:	eeb0 0a67 	vmov.f32	s0, s15
 80021e8:	f000 fa3c 	bl	8002664 <calculate_ppm>
 80021ec:	eef0 7a40 	vmov.f32	s15, s0
 80021f0:	4b61      	ldr	r3, [pc, #388]	@ (8002378 <Task_SensorRead+0x288>)
 80021f2:	edc3 7a06 	vstr	s15, [r3, #24]
        SD.Ethanol = calculate_ppm(SD.Rs, R0_Ethanol, A_Ethanol, B_Ethanol);
 80021f6:	4b60      	ldr	r3, [pc, #384]	@ (8002378 <Task_SensorRead+0x288>)
 80021f8:	edd3 7a04 	vldr	s15, [r3, #16]
 80021fc:	eddf 1a67 	vldr	s3, [pc, #412]	@ 800239c <Task_SensorRead+0x2ac>
 8002200:	ed9f 1a67 	vldr	s2, [pc, #412]	@ 80023a0 <Task_SensorRead+0x2b0>
 8002204:	eef0 0a0e 	vmov.f32	s1, #14	@ 0x40700000  3.750
 8002208:	eeb0 0a67 	vmov.f32	s0, s15
 800220c:	f000 fa2a 	bl	8002664 <calculate_ppm>
 8002210:	eef0 7a40 	vmov.f32	s15, s0
 8002214:	4b58      	ldr	r3, [pc, #352]	@ (8002378 <Task_SensorRead+0x288>)
 8002216:	edc3 7a07 	vstr	s15, [r3, #28]
        SD.AQI = ((SD.Co2 / 10) * 0.5) + ((SD.NH3 * 100) * 0.25) + ((SD.Ethanol * 100) * 0.25);
 800221a:	4b57      	ldr	r3, [pc, #348]	@ (8002378 <Task_SensorRead+0x288>)
 800221c:	edd3 7a05 	vldr	s15, [r3, #20]
 8002220:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002224:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002228:	ee16 0a90 	vmov	r0, s13
 800222c:	f7fe f9dc 	bl	80005e8 <__aeabi_f2d>
 8002230:	f04f 0200 	mov.w	r2, #0
 8002234:	4b5b      	ldr	r3, [pc, #364]	@ (80023a4 <Task_SensorRead+0x2b4>)
 8002236:	f7fe fa2f 	bl	8000698 <__aeabi_dmul>
 800223a:	4602      	mov	r2, r0
 800223c:	460b      	mov	r3, r1
 800223e:	4614      	mov	r4, r2
 8002240:	461d      	mov	r5, r3
 8002242:	4b4d      	ldr	r3, [pc, #308]	@ (8002378 <Task_SensorRead+0x288>)
 8002244:	edd3 7a06 	vldr	s15, [r3, #24]
 8002248:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 80023a8 <Task_SensorRead+0x2b8>
 800224c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002250:	ee17 0a90 	vmov	r0, s15
 8002254:	f7fe f9c8 	bl	80005e8 <__aeabi_f2d>
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	4b53      	ldr	r3, [pc, #332]	@ (80023ac <Task_SensorRead+0x2bc>)
 800225e:	f7fe fa1b 	bl	8000698 <__aeabi_dmul>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	4620      	mov	r0, r4
 8002268:	4629      	mov	r1, r5
 800226a:	f7fe f85f 	bl	800032c <__adddf3>
 800226e:	4602      	mov	r2, r0
 8002270:	460b      	mov	r3, r1
 8002272:	4614      	mov	r4, r2
 8002274:	461d      	mov	r5, r3
 8002276:	4b40      	ldr	r3, [pc, #256]	@ (8002378 <Task_SensorRead+0x288>)
 8002278:	edd3 7a07 	vldr	s15, [r3, #28]
 800227c:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 80023a8 <Task_SensorRead+0x2b8>
 8002280:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002284:	ee17 0a90 	vmov	r0, s15
 8002288:	f7fe f9ae 	bl	80005e8 <__aeabi_f2d>
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	4b46      	ldr	r3, [pc, #280]	@ (80023ac <Task_SensorRead+0x2bc>)
 8002292:	f7fe fa01 	bl	8000698 <__aeabi_dmul>
 8002296:	4602      	mov	r2, r0
 8002298:	460b      	mov	r3, r1
 800229a:	4620      	mov	r0, r4
 800229c:	4629      	mov	r1, r5
 800229e:	f7fe f845 	bl	800032c <__adddf3>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	f7fe fccd 	bl	8000c48 <__aeabi_d2f>
 80022ae:	4603      	mov	r3, r0
 80022b0:	4a31      	ldr	r2, [pc, #196]	@ (8002378 <Task_SensorRead+0x288>)
 80022b2:	6213      	str	r3, [r2, #32]

	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("Sensor Read Collected");
 80022b4:	483e      	ldr	r0, [pc, #248]	@ (80023b0 <Task_SensorRead+0x2c0>)
 80022b6:	f009 fd43 	bl	800bd40 <SEGGER_SYSVIEW_PrintfHost>
	#endif

        Write_SensorData(&SD);
 80022ba:	482f      	ldr	r0, [pc, #188]	@ (8002378 <Task_SensorRead+0x288>)
 80022bc:	f000 faca 	bl	8002854 <Write_SensorData>

	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("T=%.2f,P=%2f,H=.2f,Co2=%.2f,NH3=%2f,Eth=.2f,AQI=%.2f",SD.Temperature,SD.Pressure,SD.Humidity,SD.Co2,SD.NH3,SD.Ethanol,SD.AQI);
 80022c0:	4b2d      	ldr	r3, [pc, #180]	@ (8002378 <Task_SensorRead+0x288>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe f98f 	bl	80005e8 <__aeabi_f2d>
 80022ca:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80022ce:	4b2a      	ldr	r3, [pc, #168]	@ (8002378 <Task_SensorRead+0x288>)
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	4618      	mov	r0, r3
 80022d4:	f7fe f988 	bl	80005e8 <__aeabi_f2d>
 80022d8:	4680      	mov	r8, r0
 80022da:	4689      	mov	r9, r1
 80022dc:	4b26      	ldr	r3, [pc, #152]	@ (8002378 <Task_SensorRead+0x288>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	4618      	mov	r0, r3
 80022e2:	f7fe f981 	bl	80005e8 <__aeabi_f2d>
 80022e6:	4682      	mov	sl, r0
 80022e8:	468b      	mov	fp, r1
 80022ea:	4b23      	ldr	r3, [pc, #140]	@ (8002378 <Task_SensorRead+0x288>)
 80022ec:	695b      	ldr	r3, [r3, #20]
 80022ee:	4618      	mov	r0, r3
 80022f0:	f7fe f97a 	bl	80005e8 <__aeabi_f2d>
 80022f4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80022f8:	4b1f      	ldr	r3, [pc, #124]	@ (8002378 <Task_SensorRead+0x288>)
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe f973 	bl	80005e8 <__aeabi_f2d>
 8002302:	e9c7 0100 	strd	r0, r1, [r7]
 8002306:	4b1c      	ldr	r3, [pc, #112]	@ (8002378 <Task_SensorRead+0x288>)
 8002308:	69db      	ldr	r3, [r3, #28]
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe f96c 	bl	80005e8 <__aeabi_f2d>
 8002310:	4604      	mov	r4, r0
 8002312:	460d      	mov	r5, r1
 8002314:	4b18      	ldr	r3, [pc, #96]	@ (8002378 <Task_SensorRead+0x288>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	4618      	mov	r0, r3
 800231a:	f7fe f965 	bl	80005e8 <__aeabi_f2d>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8002326:	e9cd 4508 	strd	r4, r5, [sp, #32]
 800232a:	ed97 7b00 	vldr	d7, [r7]
 800232e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002332:	ed97 7b02 	vldr	d7, [r7, #8]
 8002336:	ed8d 7b04 	vstr	d7, [sp, #16]
 800233a:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800233e:	e9cd 8900 	strd	r8, r9, [sp]
 8002342:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002346:	481b      	ldr	r0, [pc, #108]	@ (80023b4 <Task_SensorRead+0x2c4>)
 8002348:	f009 fcfa 	bl	800bd40 <SEGGER_SYSVIEW_PrintfHost>
	#endif

	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("Task_SensorRead Complete Before Delay");
 800234c:	481a      	ldr	r0, [pc, #104]	@ (80023b8 <Task_SensorRead+0x2c8>)
 800234e:	f009 fcf7 	bl	800bd40 <SEGGER_SYSVIEW_PrintfHost>
	#endif


        vTaskDelay(500);
 8002352:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002356:	f006 fbad 	bl	8008ab4 <vTaskDelay>
	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("Task_SensorRead Complete After Delay");
 800235a:	4818      	ldr	r0, [pc, #96]	@ (80023bc <Task_SensorRead+0x2cc>)
 800235c:	f009 fcf0 	bl	800bd40 <SEGGER_SYSVIEW_PrintfHost>
        SEGGER_SYSVIEW_PrintfHost("Task_SensorRead is running");
 8002360:	bf00      	nop
 8002362:	e6ca      	b.n	80020fa <Task_SensorRead+0xa>
 8002364:	f3af 8000 	nop.w
 8002368:	00000000 	.word	0x00000000
 800236c:	40affe00 	.word	0x40affe00
 8002370:	0800fa20 	.word	0x0800fa20
 8002374:	2000026c 	.word	0x2000026c
 8002378:	2000020c 	.word	0x2000020c
 800237c:	40140000 	.word	0x40140000
 8002380:	40240000 	.word	0x40240000
 8002384:	c03137de 	.word	0xc03137de
 8002388:	42e93442 	.word	0x42e93442
 800238c:	423e0000 	.word	0x423e0000
 8002390:	c01e45a2 	.word	0xc01e45a2
 8002394:	42cc6666 	.word	0x42cc6666
 8002398:	3fee147b 	.word	0x3fee147b
 800239c:	c04b851f 	.word	0xc04b851f
 80023a0:	429a828f 	.word	0x429a828f
 80023a4:	3fe00000 	.word	0x3fe00000
 80023a8:	42c80000 	.word	0x42c80000
 80023ac:	3fd00000 	.word	0x3fd00000
 80023b0:	0800fa3c 	.word	0x0800fa3c
 80023b4:	0800fa54 	.word	0x0800fa54
 80023b8:	0800fa8c 	.word	0x0800fa8c
 80023bc:	0800fab4 	.word	0x0800fab4

080023c0 <Task_DisplayUpdate>:
	#endif
    }
}

void Task_DisplayUpdate(void *pvParameters)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b088      	sub	sp, #32
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
    while (1)
    {
	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("Task_DisplayUpdate Running");
 80023c8:	4816      	ldr	r0, [pc, #88]	@ (8002424 <Task_DisplayUpdate+0x64>)
 80023ca:	f009 fcb9 	bl	800bd40 <SEGGER_SYSVIEW_PrintfHost>
	#endif

        if (buttonPressed)
 80023ce:	4b16      	ldr	r3, [pc, #88]	@ (8002428 <Task_DisplayUpdate+0x68>)
 80023d0:	781b      	ldrb	r3, [r3, #0]
 80023d2:	b2db      	uxtb	r3, r3
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d01b      	beq.n	8002410 <Task_DisplayUpdate+0x50>
        {
            // Send button press event to ESP32
            char displayBuff[20];
            snprintf(displayBuff, sizeof(displayBuff), "Button_Pressed:%d", buttonPressed);
 80023d8:	4b13      	ldr	r3, [pc, #76]	@ (8002428 <Task_DisplayUpdate+0x68>)
 80023da:	781b      	ldrb	r3, [r3, #0]
 80023dc:	b2db      	uxtb	r3, r3
 80023de:	f107 000c 	add.w	r0, r7, #12
 80023e2:	4a12      	ldr	r2, [pc, #72]	@ (800242c <Task_DisplayUpdate+0x6c>)
 80023e4:	2114      	movs	r1, #20
 80023e6:	f00a fa45 	bl	800c874 <sniprintf>
            UART_Transmit_Service((uint8_t *)displayBuff, strlen(displayBuff));
 80023ea:	f107 030c 	add.w	r3, r7, #12
 80023ee:	4618      	mov	r0, r3
 80023f0:	f7fd ff8e 	bl	8000310 <strlen>
 80023f4:	4603      	mov	r3, r0
 80023f6:	b29a      	uxth	r2, r3
 80023f8:	f107 030c 	add.w	r3, r7, #12
 80023fc:	4611      	mov	r1, r2
 80023fe:	4618      	mov	r0, r3
 8002400:	f000 f994 	bl	800272c <UART_Transmit_Service>

	#ifdef DEBUG
            SEGGER_SYSVIEW_PrintfHost("Button Press Data Sent via UART");
 8002404:	480a      	ldr	r0, [pc, #40]	@ (8002430 <Task_DisplayUpdate+0x70>)
 8002406:	f009 fc9b 	bl	800bd40 <SEGGER_SYSVIEW_PrintfHost>
	#endif

            buttonPressed = 0;  // Reset button flag
 800240a:	4b07      	ldr	r3, [pc, #28]	@ (8002428 <Task_DisplayUpdate+0x68>)
 800240c:	2200      	movs	r2, #0
 800240e:	701a      	strb	r2, [r3, #0]
        }
	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("Task_DisplayUpdate Complete Before Delay");
 8002410:	4808      	ldr	r0, [pc, #32]	@ (8002434 <Task_DisplayUpdate+0x74>)
 8002412:	f009 fc95 	bl	800bd40 <SEGGER_SYSVIEW_PrintfHost>
	#endif

        vTaskDelay(100);
 8002416:	2064      	movs	r0, #100	@ 0x64
 8002418:	f006 fb4c 	bl	8008ab4 <vTaskDelay>

	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("Task_DisplayUpdate After Delay Complete");
 800241c:	4806      	ldr	r0, [pc, #24]	@ (8002438 <Task_DisplayUpdate+0x78>)
 800241e:	f009 fc8f 	bl	800bd40 <SEGGER_SYSVIEW_PrintfHost>
        SEGGER_SYSVIEW_PrintfHost("Task_DisplayUpdate Running");
 8002422:	e7d1      	b.n	80023c8 <Task_DisplayUpdate+0x8>
 8002424:	0800fadc 	.word	0x0800fadc
 8002428:	20000448 	.word	0x20000448
 800242c:	0800faf8 	.word	0x0800faf8
 8002430:	0800fb0c 	.word	0x0800fb0c
 8002434:	0800fb2c 	.word	0x0800fb2c
 8002438:	0800fb58 	.word	0x0800fb58

0800243c <Task_UARTSend>:
	#endif
    }
}

void Task_UARTSend(void *pvParameters)
{
 800243c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002440:	b0a6      	sub	sp, #152	@ 0x98
 8002442:	af0e      	add	r7, sp, #56	@ 0x38
 8002444:	61f8      	str	r0, [r7, #28]
    while (1)
    {
	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("Task_UARTSend Running");
 8002446:	4849      	ldr	r0, [pc, #292]	@ (800256c <Task_UARTSend+0x130>)
 8002448:	f009 fc7a 	bl	800bd40 <SEGGER_SYSVIEW_PrintfHost>
	#endif

        Sensordata_t tempData;
        Read_SensorData(&tempData);
 800244c:	f107 0320 	add.w	r3, r7, #32
 8002450:	4618      	mov	r0, r3
 8002452:	f000 fa25 	bl	80028a0 <Read_SensorData>

        // Format sensor data as CSV
        snprintf(uartBuff, sizeof(uartBuff), "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
                 tempData.Temperature, tempData.Pressure, tempData.Humidity,
 8002456:	6a3b      	ldr	r3, [r7, #32]
        snprintf(uartBuff, sizeof(uartBuff), "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8002458:	4618      	mov	r0, r3
 800245a:	f7fe f8c5 	bl	80005e8 <__aeabi_f2d>
 800245e:	4680      	mov	r8, r0
 8002460:	4689      	mov	r9, r1
                 tempData.Temperature, tempData.Pressure, tempData.Humidity,
 8002462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        snprintf(uartBuff, sizeof(uartBuff), "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe f8bf 	bl	80005e8 <__aeabi_f2d>
 800246a:	4682      	mov	sl, r0
 800246c:	468b      	mov	fp, r1
                 tempData.Temperature, tempData.Pressure, tempData.Humidity,
 800246e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        snprintf(uartBuff, sizeof(uartBuff), "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8002470:	4618      	mov	r0, r3
 8002472:	f7fe f8b9 	bl	80005e8 <__aeabi_f2d>
 8002476:	e9c7 0104 	strd	r0, r1, [r7, #16]
                 tempData.Co2, tempData.NH3, tempData.Ethanol, tempData.AQI);
 800247a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
        snprintf(uartBuff, sizeof(uartBuff), "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 800247c:	4618      	mov	r0, r3
 800247e:	f7fe f8b3 	bl	80005e8 <__aeabi_f2d>
 8002482:	e9c7 0102 	strd	r0, r1, [r7, #8]
                 tempData.Co2, tempData.NH3, tempData.Ethanol, tempData.AQI);
 8002486:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
        snprintf(uartBuff, sizeof(uartBuff), "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8002488:	4618      	mov	r0, r3
 800248a:	f7fe f8ad 	bl	80005e8 <__aeabi_f2d>
 800248e:	e9c7 0100 	strd	r0, r1, [r7]
                 tempData.Co2, tempData.NH3, tempData.Ethanol, tempData.AQI);
 8002492:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        snprintf(uartBuff, sizeof(uartBuff), "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe f8a7 	bl	80005e8 <__aeabi_f2d>
 800249a:	4604      	mov	r4, r0
 800249c:	460d      	mov	r5, r1
                 tempData.Co2, tempData.NH3, tempData.Ethanol, tempData.AQI);
 800249e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
        snprintf(uartBuff, sizeof(uartBuff), "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe f8a1 	bl	80005e8 <__aeabi_f2d>
 80024a6:	4602      	mov	r2, r0
 80024a8:	460b      	mov	r3, r1
 80024aa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80024ae:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 80024b2:	ed97 7b00 	vldr	d7, [r7]
 80024b6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80024ba:	ed97 7b02 	vldr	d7, [r7, #8]
 80024be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80024c2:	ed97 7b04 	vldr	d7, [r7, #16]
 80024c6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80024ca:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80024ce:	e9cd 8900 	strd	r8, r9, [sp]
 80024d2:	4a27      	ldr	r2, [pc, #156]	@ (8002570 <Task_UARTSend+0x134>)
 80024d4:	2164      	movs	r1, #100	@ 0x64
 80024d6:	4827      	ldr	r0, [pc, #156]	@ (8002574 <Task_UARTSend+0x138>)
 80024d8:	f00a f9cc 	bl	800c874 <sniprintf>

        uint8_t crc = Calculate_CRC8((uint8_t *)uartBuff, strlen(uartBuff)); // Compute CRC
 80024dc:	4825      	ldr	r0, [pc, #148]	@ (8002574 <Task_UARTSend+0x138>)
 80024de:	f7fd ff17 	bl	8000310 <strlen>
 80024e2:	4603      	mov	r3, r0
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	4619      	mov	r1, r3
 80024e8:	4822      	ldr	r0, [pc, #136]	@ (8002574 <Task_UARTSend+0x138>)
 80024ea:	f000 f87d 	bl	80025e8 <Calculate_CRC8>
 80024ee:	4603      	mov	r3, r0
 80024f0:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
        snprintf(uartBuff + strlen(uartBuff), sizeof(uartBuff) - strlen(uartBuff), ",%02X,@", crc);
 80024f4:	481f      	ldr	r0, [pc, #124]	@ (8002574 <Task_UARTSend+0x138>)
 80024f6:	f7fd ff0b 	bl	8000310 <strlen>
 80024fa:	4603      	mov	r3, r0
 80024fc:	4a1d      	ldr	r2, [pc, #116]	@ (8002574 <Task_UARTSend+0x138>)
 80024fe:	189c      	adds	r4, r3, r2
 8002500:	481c      	ldr	r0, [pc, #112]	@ (8002574 <Task_UARTSend+0x138>)
 8002502:	f7fd ff05 	bl	8000310 <strlen>
 8002506:	4603      	mov	r3, r0
 8002508:	f1c3 0164 	rsb	r1, r3, #100	@ 0x64
 800250c:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8002510:	4a19      	ldr	r2, [pc, #100]	@ (8002578 <Task_UARTSend+0x13c>)
 8002512:	4620      	mov	r0, r4
 8002514:	f00a f9ae 	bl	800c874 <sniprintf>

        UART_Transmit_Service((uint8_t *)uartBuff, strlen(uartBuff));
 8002518:	4816      	ldr	r0, [pc, #88]	@ (8002574 <Task_UARTSend+0x138>)
 800251a:	f7fd fef9 	bl	8000310 <strlen>
 800251e:	4603      	mov	r3, r0
 8002520:	b29b      	uxth	r3, r3
 8002522:	4619      	mov	r1, r3
 8002524:	4813      	ldr	r0, [pc, #76]	@ (8002574 <Task_UARTSend+0x138>)
 8002526:	f000 f901 	bl	800272c <UART_Transmit_Service>

        uint8_t rxBuffer[20];
        if (!UART_Receive_Service(rxBuffer, sizeof(rxBuffer)))
 800252a:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800252e:	2114      	movs	r1, #20
 8002530:	4618      	mov	r0, r3
 8002532:	f000 f91b 	bl	800276c <UART_Receive_Service>
 8002536:	4603      	mov	r3, r0
 8002538:	2b00      	cmp	r3, #0
 800253a:	d10b      	bne.n	8002554 <Task_UARTSend+0x118>
        {
            SEGGER_SYSVIEW_PrintfHost("Retrying UART Transmission...");
 800253c:	480f      	ldr	r0, [pc, #60]	@ (800257c <Task_UARTSend+0x140>)
 800253e:	f009 fbff 	bl	800bd40 <SEGGER_SYSVIEW_PrintfHost>
            UART_Transmit_Service((uint8_t *)uartBuff, strlen(uartBuff));
 8002542:	480c      	ldr	r0, [pc, #48]	@ (8002574 <Task_UARTSend+0x138>)
 8002544:	f7fd fee4 	bl	8000310 <strlen>
 8002548:	4603      	mov	r3, r0
 800254a:	b29b      	uxth	r3, r3
 800254c:	4619      	mov	r1, r3
 800254e:	4809      	ldr	r0, [pc, #36]	@ (8002574 <Task_UARTSend+0x138>)
 8002550:	f000 f8ec 	bl	800272c <UART_Transmit_Service>
        }

	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("Task_UARTSend Complete Before Delay");
 8002554:	480a      	ldr	r0, [pc, #40]	@ (8002580 <Task_UARTSend+0x144>)
 8002556:	f009 fbf3 	bl	800bd40 <SEGGER_SYSVIEW_PrintfHost>
	#endif

        vTaskDelay(1000);
 800255a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800255e:	f006 faa9 	bl	8008ab4 <vTaskDelay>

	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("Task_UARTSend Complete After Delay");
 8002562:	4808      	ldr	r0, [pc, #32]	@ (8002584 <Task_UARTSend+0x148>)
 8002564:	f009 fbec 	bl	800bd40 <SEGGER_SYSVIEW_PrintfHost>
    {
 8002568:	e76d      	b.n	8002446 <Task_UARTSend+0xa>
 800256a:	bf00      	nop
 800256c:	0800fb80 	.word	0x0800fb80
 8002570:	0800fb98 	.word	0x0800fb98
 8002574:	2000044c 	.word	0x2000044c
 8002578:	0800fbbc 	.word	0x0800fbbc
 800257c:	0800fbc4 	.word	0x0800fbc4
 8002580:	0800fbe4 	.word	0x0800fbe4
 8002584:	0800fc08 	.word	0x0800fc08

08002588 <HAL_GPIO_EXTI_Callback>:
	#endif
    }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b082      	sub	sp, #8
 800258c:	af00      	add	r7, sp, #0
 800258e:	4603      	mov	r3, r0
 8002590:	80fb      	strh	r3, [r7, #6]
    static uint32_t lastPressTime = 0;

    if (GPIO_Pin == GPIO_PIN_0)  // Button on PA0
 8002592:	88fb      	ldrh	r3, [r7, #6]
 8002594:	2b01      	cmp	r3, #1
 8002596:	d11e      	bne.n	80025d6 <HAL_GPIO_EXTI_Callback+0x4e>
    {
        if (HAL_GetTick() - lastPressTime > 10)  // Debounce check
 8002598:	f000 fcc2 	bl	8002f20 <HAL_GetTick>
 800259c:	4602      	mov	r2, r0
 800259e:	4b10      	ldr	r3, [pc, #64]	@ (80025e0 <HAL_GPIO_EXTI_Callback+0x58>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b0a      	cmp	r3, #10
 80025a6:	d911      	bls.n	80025cc <HAL_GPIO_EXTI_Callback+0x44>
        {
            buttonPressed++;
 80025a8:	4b0e      	ldr	r3, [pc, #56]	@ (80025e4 <HAL_GPIO_EXTI_Callback+0x5c>)
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	b2db      	uxtb	r3, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4b0c      	ldr	r3, [pc, #48]	@ (80025e4 <HAL_GPIO_EXTI_Callback+0x5c>)
 80025b4:	701a      	strb	r2, [r3, #0]
            if (buttonPressed > 5)
 80025b6:	4b0b      	ldr	r3, [pc, #44]	@ (80025e4 <HAL_GPIO_EXTI_Callback+0x5c>)
 80025b8:	781b      	ldrb	r3, [r3, #0]
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b05      	cmp	r3, #5
 80025be:	d902      	bls.n	80025c6 <HAL_GPIO_EXTI_Callback+0x3e>
            {
            	buttonPressed = 1;
 80025c0:	4b08      	ldr	r3, [pc, #32]	@ (80025e4 <HAL_GPIO_EXTI_Callback+0x5c>)
 80025c2:	2201      	movs	r2, #1
 80025c4:	701a      	strb	r2, [r3, #0]
            }

            HAL_Delay(50);  // Extra debounce delay
 80025c6:	2032      	movs	r0, #50	@ 0x32
 80025c8:	f000 fcb6 	bl	8002f38 <HAL_Delay>
        }
        lastPressTime = HAL_GetTick();
 80025cc:	f000 fca8 	bl	8002f20 <HAL_GetTick>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4a03      	ldr	r2, [pc, #12]	@ (80025e0 <HAL_GPIO_EXTI_Callback+0x58>)
 80025d4:	6013      	str	r3, [r2, #0]
    }
}
 80025d6:	bf00      	nop
 80025d8:	3708      	adds	r7, #8
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	200004b0 	.word	0x200004b0
 80025e4:	20000448 	.word	0x20000448

080025e8 <Calculate_CRC8>:

uint8_t Calculate_CRC8(const uint8_t *data, uint8_t len)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	460b      	mov	r3, r1
 80025f2:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = CRC8_INIT;
 80025f4:	23ff      	movs	r3, #255	@ 0xff
 80025f6:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < len; i++)
 80025f8:	2300      	movs	r3, #0
 80025fa:	73bb      	strb	r3, [r7, #14]
 80025fc:	e021      	b.n	8002642 <Calculate_CRC8+0x5a>
    {
        crc ^= data[i];  // XOR with input byte
 80025fe:	7bbb      	ldrb	r3, [r7, #14]
 8002600:	687a      	ldr	r2, [r7, #4]
 8002602:	4413      	add	r3, r2
 8002604:	781a      	ldrb	r2, [r3, #0]
 8002606:	7bfb      	ldrb	r3, [r7, #15]
 8002608:	4053      	eors	r3, r2
 800260a:	73fb      	strb	r3, [r7, #15]

        for (uint8_t j = 0; j < 8; j++)
 800260c:	2300      	movs	r3, #0
 800260e:	737b      	strb	r3, [r7, #13]
 8002610:	e011      	b.n	8002636 <Calculate_CRC8+0x4e>
        {  // Process each bit
            if (crc & 0x80)  // If MSB is 1
 8002612:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002616:	2b00      	cmp	r3, #0
 8002618:	da07      	bge.n	800262a <Calculate_CRC8+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 800261a:	7bfb      	ldrb	r3, [r7, #15]
 800261c:	005b      	lsls	r3, r3, #1
 800261e:	b25b      	sxtb	r3, r3
 8002620:	f083 0307 	eor.w	r3, r3, #7
 8002624:	b25b      	sxtb	r3, r3
 8002626:	73fb      	strb	r3, [r7, #15]
 8002628:	e002      	b.n	8002630 <Calculate_CRC8+0x48>
            else
                crc = (crc << 1);
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	005b      	lsls	r3, r3, #1
 800262e:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++)
 8002630:	7b7b      	ldrb	r3, [r7, #13]
 8002632:	3301      	adds	r3, #1
 8002634:	737b      	strb	r3, [r7, #13]
 8002636:	7b7b      	ldrb	r3, [r7, #13]
 8002638:	2b07      	cmp	r3, #7
 800263a:	d9ea      	bls.n	8002612 <Calculate_CRC8+0x2a>
    for (uint8_t i = 0; i < len; i++)
 800263c:	7bbb      	ldrb	r3, [r7, #14]
 800263e:	3301      	adds	r3, #1
 8002640:	73bb      	strb	r3, [r7, #14]
 8002642:	7bba      	ldrb	r2, [r7, #14]
 8002644:	78fb      	ldrb	r3, [r7, #3]
 8002646:	429a      	cmp	r2, r3
 8002648:	d3d9      	bcc.n	80025fe <Calculate_CRC8+0x16>
        }
    }
	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("CRC = %d",crc);
 800264a:	7bfb      	ldrb	r3, [r7, #15]
 800264c:	4619      	mov	r1, r3
 800264e:	4804      	ldr	r0, [pc, #16]	@ (8002660 <Calculate_CRC8+0x78>)
 8002650:	f009 fb76 	bl	800bd40 <SEGGER_SYSVIEW_PrintfHost>
	#endif

    return crc;  // Return final CRC
 8002654:	7bfb      	ldrb	r3, [r7, #15]
}
 8002656:	4618      	mov	r0, r3
 8002658:	3710      	adds	r7, #16
 800265a:	46bd      	mov	sp, r7
 800265c:	bd80      	pop	{r7, pc}
 800265e:	bf00      	nop
 8002660:	0800fc2c 	.word	0x0800fc2c

08002664 <calculate_ppm>:

float calculate_ppm(float Rs, float R0, float A, float B)
{
 8002664:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002668:	b084      	sub	sp, #16
 800266a:	af00      	add	r7, sp, #0
 800266c:	ed87 0a03 	vstr	s0, [r7, #12]
 8002670:	edc7 0a02 	vstr	s1, [r7, #8]
 8002674:	ed87 1a01 	vstr	s2, [r7, #4]
 8002678:	edc7 1a00 	vstr	s3, [r7]
    return A * pow((Rs / R0), B);
 800267c:	6878      	ldr	r0, [r7, #4]
 800267e:	f7fd ffb3 	bl	80005e8 <__aeabi_f2d>
 8002682:	4604      	mov	r4, r0
 8002684:	460d      	mov	r5, r1
 8002686:	ed97 7a03 	vldr	s14, [r7, #12]
 800268a:	edd7 7a02 	vldr	s15, [r7, #8]
 800268e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002692:	ee16 0a90 	vmov	r0, s13
 8002696:	f7fd ffa7 	bl	80005e8 <__aeabi_f2d>
 800269a:	4680      	mov	r8, r0
 800269c:	4689      	mov	r9, r1
 800269e:	6838      	ldr	r0, [r7, #0]
 80026a0:	f7fd ffa2 	bl	80005e8 <__aeabi_f2d>
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	ec43 2b11 	vmov	d1, r2, r3
 80026ac:	ec49 8b10 	vmov	d0, r8, r9
 80026b0:	f00c fa20 	bl	800eaf4 <pow>
 80026b4:	ec53 2b10 	vmov	r2, r3, d0
 80026b8:	4620      	mov	r0, r4
 80026ba:	4629      	mov	r1, r5
 80026bc:	f7fd ffec 	bl	8000698 <__aeabi_dmul>
 80026c0:	4602      	mov	r2, r0
 80026c2:	460b      	mov	r3, r1
 80026c4:	4610      	mov	r0, r2
 80026c6:	4619      	mov	r1, r3
 80026c8:	f7fe fabe 	bl	8000c48 <__aeabi_d2f>
 80026cc:	4603      	mov	r3, r0
 80026ce:	ee07 3a90 	vmov	s15, r3
}
 80026d2:	eeb0 0a67 	vmov.f32	s0, s15
 80026d6:	3710      	adds	r7, #16
 80026d8:	46bd      	mov	sp, r7
 80026da:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

080026e0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a04      	ldr	r2, [pc, #16]	@ (8002700 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d101      	bne.n	80026f6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80026f2:	f000 fc01 	bl	8002ef8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 80026f6:	bf00      	nop
 80026f8:	3708      	adds	r7, #8
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40010000 	.word	0x40010000

08002704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002704:	b480      	push	{r7}
 8002706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002708:	b672      	cpsid	i
}
 800270a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800270c:	bf00      	nop
 800270e:	e7fd      	b.n	800270c <Error_Handler+0x8>

08002710 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	SEGGER_SYSVIEW_PrintfHost("Assertion Failed:file %s on line %d\r\n", file, line);
 800271a:	683a      	ldr	r2, [r7, #0]
 800271c:	6879      	ldr	r1, [r7, #4]
 800271e:	4802      	ldr	r0, [pc, #8]	@ (8002728 <assert_failed+0x18>)
 8002720:	f009 fb0e 	bl	800bd40 <SEGGER_SYSVIEW_PrintfHost>
	while(1);
 8002724:	bf00      	nop
 8002726:	e7fd      	b.n	8002724 <assert_failed+0x14>
 8002728:	0800fc38 	.word	0x0800fc38

0800272c <UART_Transmit_Service>:
extern SemaphoreHandle_t SensorDataMutex;
extern Sensordata_t SensorData;

// 🔹 **Service API for UART Transmission**
void UART_Transmit_Service( uint8_t *data, uint16_t len)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b082      	sub	sp, #8
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
 8002734:	460b      	mov	r3, r1
 8002736:	807b      	strh	r3, [r7, #2]
    if (HAL_UART_Transmit_DMA(&huart5, data, len) != HAL_OK)
 8002738:	887b      	ldrh	r3, [r7, #2]
 800273a:	461a      	mov	r2, r3
 800273c:	6879      	ldr	r1, [r7, #4]
 800273e:	4808      	ldr	r0, [pc, #32]	@ (8002760 <UART_Transmit_Service+0x34>)
 8002740:	f004 fec2 	bl	80074c8 <HAL_UART_Transmit_DMA>
 8002744:	4603      	mov	r3, r0
 8002746:	2b00      	cmp	r3, #0
 8002748:	d002      	beq.n	8002750 <UART_Transmit_Service+0x24>

    {
        SEGGER_SYSVIEW_PrintfHost("UART Transmission Failed");
 800274a:	4806      	ldr	r0, [pc, #24]	@ (8002764 <UART_Transmit_Service+0x38>)
 800274c:	f009 faf8 	bl	800bd40 <SEGGER_SYSVIEW_PrintfHost>
    }
	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("UART Data Sent Successfully");
 8002750:	4805      	ldr	r0, [pc, #20]	@ (8002768 <UART_Transmit_Service+0x3c>)
 8002752:	f009 faf5 	bl	800bd40 <SEGGER_SYSVIEW_PrintfHost>
	#endif
}
 8002756:	bf00      	nop
 8002758:	3708      	adds	r7, #8
 800275a:	46bd      	mov	sp, r7
 800275c:	bd80      	pop	{r7, pc}
 800275e:	bf00      	nop
 8002760:	20000308 	.word	0x20000308
 8002764:	0800fc60 	.word	0x0800fc60
 8002768:	0800fc7c 	.word	0x0800fc7c

0800276c <UART_Receive_Service>:

// 🔹 **Service API for UART Reception**
uint8_t UART_Receive_Service(uint8_t *rxBuffer, uint16_t len)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	807b      	strh	r3, [r7, #2]
    if (HAL_UART_Receive(&huart5, rxBuffer, len, 1000) == HAL_OK)
 8002778:	887a      	ldrh	r2, [r7, #2]
 800277a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	4815      	ldr	r0, [pc, #84]	@ (80027d8 <UART_Receive_Service+0x6c>)
 8002782:	f004 fe09 	bl	8007398 <HAL_UART_Receive>
 8002786:	4603      	mov	r3, r0
 8002788:	2b00      	cmp	r3, #0
 800278a:	d11d      	bne.n	80027c8 <UART_Receive_Service+0x5c>
    {
        uint8_t received_crc = rxBuffer[len - 1]; // Last byte is CRC
 800278c:	887b      	ldrh	r3, [r7, #2]
 800278e:	3b01      	subs	r3, #1
 8002790:	687a      	ldr	r2, [r7, #4]
 8002792:	4413      	add	r3, r2
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	73fb      	strb	r3, [r7, #15]
        uint8_t computed_crc = Calculate_CRC8(rxBuffer, len - 1);
 8002798:	887b      	ldrh	r3, [r7, #2]
 800279a:	b2db      	uxtb	r3, r3
 800279c:	3b01      	subs	r3, #1
 800279e:	b2db      	uxtb	r3, r3
 80027a0:	4619      	mov	r1, r3
 80027a2:	6878      	ldr	r0, [r7, #4]
 80027a4:	f7ff ff20 	bl	80025e8 <Calculate_CRC8>
 80027a8:	4603      	mov	r3, r0
 80027aa:	73bb      	strb	r3, [r7, #14]

        if (received_crc == computed_crc)
 80027ac:	7bfa      	ldrb	r2, [r7, #15]
 80027ae:	7bbb      	ldrb	r3, [r7, #14]
 80027b0:	429a      	cmp	r2, r3
 80027b2:	d104      	bne.n	80027be <UART_Receive_Service+0x52>
        {
            SEGGER_SYSVIEW_PrintfHost("CRC Matched: Valid Data");
 80027b4:	4809      	ldr	r0, [pc, #36]	@ (80027dc <UART_Receive_Service+0x70>)
 80027b6:	f009 fac3 	bl	800bd40 <SEGGER_SYSVIEW_PrintfHost>
            return 1; // Success
 80027ba:	2301      	movs	r3, #1
 80027bc:	e008      	b.n	80027d0 <UART_Receive_Service+0x64>
        }
        else
        {
            SEGGER_SYSVIEW_PrintfHost("CRC Mismatch: Data Corrupted");
 80027be:	4808      	ldr	r0, [pc, #32]	@ (80027e0 <UART_Receive_Service+0x74>)
 80027c0:	f009 fabe 	bl	800bd40 <SEGGER_SYSVIEW_PrintfHost>
            return 0; // CRC Failed
 80027c4:	2300      	movs	r3, #0
 80027c6:	e003      	b.n	80027d0 <UART_Receive_Service+0x64>
        }
    }
    SEGGER_SYSVIEW_PrintfHost("ESP32 Acknowledgment Failed");
 80027c8:	4806      	ldr	r0, [pc, #24]	@ (80027e4 <UART_Receive_Service+0x78>)
 80027ca:	f009 fab9 	bl	800bd40 <SEGGER_SYSVIEW_PrintfHost>
    return 0; // Failure
 80027ce:	2300      	movs	r3, #0
}
 80027d0:	4618      	mov	r0, r3
 80027d2:	3710      	adds	r7, #16
 80027d4:	46bd      	mov	sp, r7
 80027d6:	bd80      	pop	{r7, pc}
 80027d8:	20000308 	.word	0x20000308
 80027dc:	0800fc98 	.word	0x0800fc98
 80027e0:	0800fcb0 	.word	0x0800fcb0
 80027e4:	0800fcd0 	.word	0x0800fcd0

080027e8 <Read_ADC_Value>:


// 🔹 **Service API for ADC Read**
float Read_ADC_Value(ADC_HandleTypeDef *hadc)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
    volatile uint32_t adcSum = 0;
 80027f0:	2300      	movs	r3, #0
 80027f2:	60bb      	str	r3, [r7, #8]
    const uint8_t numSamples = 10;
 80027f4:	230a      	movs	r3, #10
 80027f6:	73bb      	strb	r3, [r7, #14]

    for (uint8_t i = 0; i < numSamples; i++)
 80027f8:	2300      	movs	r3, #0
 80027fa:	73fb      	strb	r3, [r7, #15]
 80027fc:	e019      	b.n	8002832 <Read_ADC_Value+0x4a>
    {
        HAL_ADC_Start(hadc);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 fd2a 	bl	8003258 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK)
 8002804:	210a      	movs	r1, #10
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 fe6c 	bl	80034e4 <HAL_ADC_PollForConversion>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d106      	bne.n	8002820 <Read_ADC_Value+0x38>
        {
            adcSum += HAL_ADC_GetValue(hadc);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fef1 	bl	80035fa <HAL_ADC_GetValue>
 8002818:	4602      	mov	r2, r0
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	4413      	add	r3, r2
 800281e:	60bb      	str	r3, [r7, #8]
        }
        HAL_ADC_Stop(hadc);
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 fe11 	bl	8003448 <HAL_ADC_Stop>
        HAL_Delay(1);
 8002826:	2001      	movs	r0, #1
 8002828:	f000 fb86 	bl	8002f38 <HAL_Delay>
    for (uint8_t i = 0; i < numSamples; i++)
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	3301      	adds	r3, #1
 8002830:	73fb      	strb	r3, [r7, #15]
 8002832:	7bfa      	ldrb	r2, [r7, #15]
 8002834:	7bbb      	ldrb	r3, [r7, #14]
 8002836:	429a      	cmp	r2, r3
 8002838:	d3e1      	bcc.n	80027fe <Read_ADC_Value+0x16>
    }

    return (adcSum / numSamples);
 800283a:	68ba      	ldr	r2, [r7, #8]
 800283c:	7bbb      	ldrb	r3, [r7, #14]
 800283e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002842:	ee07 3a90 	vmov	s15, r3
 8002846:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 800284a:	eeb0 0a67 	vmov.f32	s0, s15
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <Write_SensorData>:


// 🔹 **Service API for Writing Sensor Data**
void Write_SensorData(Sensordata_t *data)
{
 8002854:	b5b0      	push	{r4, r5, r7, lr}
 8002856:	b082      	sub	sp, #8
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]
    xSemaphoreTake(SensorDataMutex, portMAX_DELAY);
 800285c:	4b0e      	ldr	r3, [pc, #56]	@ (8002898 <Write_SensorData+0x44>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f04f 31ff 	mov.w	r1, #4294967295
 8002864:	4618      	mov	r0, r3
 8002866:	f005 fdb1 	bl	80083cc <xQueueSemaphoreTake>
    SensorData = *data;
 800286a:	4a0c      	ldr	r2, [pc, #48]	@ (800289c <Write_SensorData+0x48>)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	4614      	mov	r4, r2
 8002870:	461d      	mov	r5, r3
 8002872:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002874:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002876:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002878:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800287a:	e895 0003 	ldmia.w	r5, {r0, r1}
 800287e:	e884 0003 	stmia.w	r4, {r0, r1}
    xSemaphoreGive(SensorDataMutex);
 8002882:	4b05      	ldr	r3, [pc, #20]	@ (8002898 <Write_SensorData+0x44>)
 8002884:	6818      	ldr	r0, [r3, #0]
 8002886:	2300      	movs	r3, #0
 8002888:	2200      	movs	r2, #0
 800288a:	2100      	movs	r1, #0
 800288c:	f005 fcb4 	bl	80081f8 <xQueueGenericSend>
}
 8002890:	bf00      	nop
 8002892:	3708      	adds	r7, #8
 8002894:	46bd      	mov	sp, r7
 8002896:	bdb0      	pop	{r4, r5, r7, pc}
 8002898:	20000438 	.word	0x20000438
 800289c:	20000410 	.word	0x20000410

080028a0 <Read_SensorData>:

// 🔹 **Service API for Reading Sensor Data**
void Read_SensorData(Sensordata_t *data)
{
 80028a0:	b5b0      	push	{r4, r5, r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
    xSemaphoreTake(SensorDataMutex, portMAX_DELAY);
 80028a8:	4b0e      	ldr	r3, [pc, #56]	@ (80028e4 <Read_SensorData+0x44>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f04f 31ff 	mov.w	r1, #4294967295
 80028b0:	4618      	mov	r0, r3
 80028b2:	f005 fd8b 	bl	80083cc <xQueueSemaphoreTake>
    *data = SensorData;
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a0b      	ldr	r2, [pc, #44]	@ (80028e8 <Read_SensorData+0x48>)
 80028ba:	461c      	mov	r4, r3
 80028bc:	4615      	mov	r5, r2
 80028be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028c0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80028c4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80028c6:	e895 0003 	ldmia.w	r5, {r0, r1}
 80028ca:	e884 0003 	stmia.w	r4, {r0, r1}
    xSemaphoreGive(SensorDataMutex);
 80028ce:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <Read_SensorData+0x44>)
 80028d0:	6818      	ldr	r0, [r3, #0]
 80028d2:	2300      	movs	r3, #0
 80028d4:	2200      	movs	r2, #0
 80028d6:	2100      	movs	r1, #0
 80028d8:	f005 fc8e 	bl	80081f8 <xQueueGenericSend>
}
 80028dc:	bf00      	nop
 80028de:	3708      	adds	r7, #8
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bdb0      	pop	{r4, r5, r7, pc}
 80028e4:	20000438 	.word	0x20000438
 80028e8:	20000410 	.word	0x20000410

080028ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028f2:	2300      	movs	r3, #0
 80028f4:	607b      	str	r3, [r7, #4]
 80028f6:	4b10      	ldr	r3, [pc, #64]	@ (8002938 <HAL_MspInit+0x4c>)
 80028f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028fa:	4a0f      	ldr	r2, [pc, #60]	@ (8002938 <HAL_MspInit+0x4c>)
 80028fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002900:	6453      	str	r3, [r2, #68]	@ 0x44
 8002902:	4b0d      	ldr	r3, [pc, #52]	@ (8002938 <HAL_MspInit+0x4c>)
 8002904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800290a:	607b      	str	r3, [r7, #4]
 800290c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800290e:	2300      	movs	r3, #0
 8002910:	603b      	str	r3, [r7, #0]
 8002912:	4b09      	ldr	r3, [pc, #36]	@ (8002938 <HAL_MspInit+0x4c>)
 8002914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002916:	4a08      	ldr	r2, [pc, #32]	@ (8002938 <HAL_MspInit+0x4c>)
 8002918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800291c:	6413      	str	r3, [r2, #64]	@ 0x40
 800291e:	4b06      	ldr	r3, [pc, #24]	@ (8002938 <HAL_MspInit+0x4c>)
 8002920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002926:	603b      	str	r3, [r7, #0]
 8002928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800292a:	bf00      	nop
 800292c:	370c      	adds	r7, #12
 800292e:	46bd      	mov	sp, r7
 8002930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40023800 	.word	0x40023800

0800293c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	b08a      	sub	sp, #40	@ 0x28
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002944:	f107 0314 	add.w	r3, r7, #20
 8002948:	2200      	movs	r2, #0
 800294a:	601a      	str	r2, [r3, #0]
 800294c:	605a      	str	r2, [r3, #4]
 800294e:	609a      	str	r2, [r3, #8]
 8002950:	60da      	str	r2, [r3, #12]
 8002952:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a17      	ldr	r2, [pc, #92]	@ (80029b8 <HAL_ADC_MspInit+0x7c>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d127      	bne.n	80029ae <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800295e:	2300      	movs	r3, #0
 8002960:	613b      	str	r3, [r7, #16]
 8002962:	4b16      	ldr	r3, [pc, #88]	@ (80029bc <HAL_ADC_MspInit+0x80>)
 8002964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002966:	4a15      	ldr	r2, [pc, #84]	@ (80029bc <HAL_ADC_MspInit+0x80>)
 8002968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800296c:	6453      	str	r3, [r2, #68]	@ 0x44
 800296e:	4b13      	ldr	r3, [pc, #76]	@ (80029bc <HAL_ADC_MspInit+0x80>)
 8002970:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002972:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002976:	613b      	str	r3, [r7, #16]
 8002978:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	60fb      	str	r3, [r7, #12]
 800297e:	4b0f      	ldr	r3, [pc, #60]	@ (80029bc <HAL_ADC_MspInit+0x80>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	4a0e      	ldr	r2, [pc, #56]	@ (80029bc <HAL_ADC_MspInit+0x80>)
 8002984:	f043 0301 	orr.w	r3, r3, #1
 8002988:	6313      	str	r3, [r2, #48]	@ 0x30
 800298a:	4b0c      	ldr	r3, [pc, #48]	@ (80029bc <HAL_ADC_MspInit+0x80>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800298e:	f003 0301 	and.w	r3, r3, #1
 8002992:	60fb      	str	r3, [r7, #12]
 8002994:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002996:	2302      	movs	r3, #2
 8002998:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800299a:	2303      	movs	r3, #3
 800299c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800299e:	2300      	movs	r3, #0
 80029a0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a2:	f107 0314 	add.w	r3, r7, #20
 80029a6:	4619      	mov	r1, r3
 80029a8:	4805      	ldr	r0, [pc, #20]	@ (80029c0 <HAL_ADC_MspInit+0x84>)
 80029aa:	f001 fe97 	bl	80046dc <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80029ae:	bf00      	nop
 80029b0:	3728      	adds	r7, #40	@ 0x28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
 80029b6:	bf00      	nop
 80029b8:	40012000 	.word	0x40012000
 80029bc:	40023800 	.word	0x40023800
 80029c0:	40020000 	.word	0x40020000

080029c4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b08a      	sub	sp, #40	@ 0x28
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029cc:	f107 0314 	add.w	r3, r7, #20
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]
 80029d4:	605a      	str	r2, [r3, #4]
 80029d6:	609a      	str	r2, [r3, #8]
 80029d8:	60da      	str	r2, [r3, #12]
 80029da:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a19      	ldr	r2, [pc, #100]	@ (8002a48 <HAL_I2C_MspInit+0x84>)
 80029e2:	4293      	cmp	r3, r2
 80029e4:	d12b      	bne.n	8002a3e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	613b      	str	r3, [r7, #16]
 80029ea:	4b18      	ldr	r3, [pc, #96]	@ (8002a4c <HAL_I2C_MspInit+0x88>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	4a17      	ldr	r2, [pc, #92]	@ (8002a4c <HAL_I2C_MspInit+0x88>)
 80029f0:	f043 0302 	orr.w	r3, r3, #2
 80029f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80029f6:	4b15      	ldr	r3, [pc, #84]	@ (8002a4c <HAL_I2C_MspInit+0x88>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029fa:	f003 0302 	and.w	r3, r3, #2
 80029fe:	613b      	str	r3, [r7, #16]
 8002a00:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a02:	23c0      	movs	r3, #192	@ 0xc0
 8002a04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a06:	2312      	movs	r3, #18
 8002a08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a0e:	2303      	movs	r3, #3
 8002a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a12:	2304      	movs	r3, #4
 8002a14:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a16:	f107 0314 	add.w	r3, r7, #20
 8002a1a:	4619      	mov	r1, r3
 8002a1c:	480c      	ldr	r0, [pc, #48]	@ (8002a50 <HAL_I2C_MspInit+0x8c>)
 8002a1e:	f001 fe5d 	bl	80046dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a22:	2300      	movs	r3, #0
 8002a24:	60fb      	str	r3, [r7, #12]
 8002a26:	4b09      	ldr	r3, [pc, #36]	@ (8002a4c <HAL_I2C_MspInit+0x88>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a2a:	4a08      	ldr	r2, [pc, #32]	@ (8002a4c <HAL_I2C_MspInit+0x88>)
 8002a2c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a30:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a32:	4b06      	ldr	r3, [pc, #24]	@ (8002a4c <HAL_I2C_MspInit+0x88>)
 8002a34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002a3e:	bf00      	nop
 8002a40:	3728      	adds	r7, #40	@ 0x28
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bd80      	pop	{r7, pc}
 8002a46:	bf00      	nop
 8002a48:	40005400 	.word	0x40005400
 8002a4c:	40023800 	.word	0x40023800
 8002a50:	40020400 	.word	0x40020400

08002a54 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a54:	b580      	push	{r7, lr}
 8002a56:	b08a      	sub	sp, #40	@ 0x28
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a5c:	f107 0314 	add.w	r3, r7, #20
 8002a60:	2200      	movs	r2, #0
 8002a62:	601a      	str	r2, [r3, #0]
 8002a64:	605a      	str	r2, [r3, #4]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	60da      	str	r2, [r3, #12]
 8002a6a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a57      	ldr	r2, [pc, #348]	@ (8002bd0 <HAL_UART_MspInit+0x17c>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	f040 80a7 	bne.w	8002bc6 <HAL_UART_MspInit+0x172>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002a78:	2300      	movs	r3, #0
 8002a7a:	613b      	str	r3, [r7, #16]
 8002a7c:	4b55      	ldr	r3, [pc, #340]	@ (8002bd4 <HAL_UART_MspInit+0x180>)
 8002a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a80:	4a54      	ldr	r2, [pc, #336]	@ (8002bd4 <HAL_UART_MspInit+0x180>)
 8002a82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a86:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a88:	4b52      	ldr	r3, [pc, #328]	@ (8002bd4 <HAL_UART_MspInit+0x180>)
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a90:	613b      	str	r3, [r7, #16]
 8002a92:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
 8002a98:	4b4e      	ldr	r3, [pc, #312]	@ (8002bd4 <HAL_UART_MspInit+0x180>)
 8002a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9c:	4a4d      	ldr	r2, [pc, #308]	@ (8002bd4 <HAL_UART_MspInit+0x180>)
 8002a9e:	f043 0304 	orr.w	r3, r3, #4
 8002aa2:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa4:	4b4b      	ldr	r3, [pc, #300]	@ (8002bd4 <HAL_UART_MspInit+0x180>)
 8002aa6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa8:	f003 0304 	and.w	r3, r3, #4
 8002aac:	60fb      	str	r3, [r7, #12]
 8002aae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	60bb      	str	r3, [r7, #8]
 8002ab4:	4b47      	ldr	r3, [pc, #284]	@ (8002bd4 <HAL_UART_MspInit+0x180>)
 8002ab6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab8:	4a46      	ldr	r2, [pc, #280]	@ (8002bd4 <HAL_UART_MspInit+0x180>)
 8002aba:	f043 0308 	orr.w	r3, r3, #8
 8002abe:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ac0:	4b44      	ldr	r3, [pc, #272]	@ (8002bd4 <HAL_UART_MspInit+0x180>)
 8002ac2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac4:	f003 0308 	and.w	r3, r3, #8
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002acc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ad2:	2302      	movs	r3, #2
 8002ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ada:	2303      	movs	r3, #3
 8002adc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002ade:	2308      	movs	r3, #8
 8002ae0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002ae2:	f107 0314 	add.w	r3, r7, #20
 8002ae6:	4619      	mov	r1, r3
 8002ae8:	483b      	ldr	r0, [pc, #236]	@ (8002bd8 <HAL_UART_MspInit+0x184>)
 8002aea:	f001 fdf7 	bl	80046dc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002aee:	2304      	movs	r3, #4
 8002af0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af2:	2302      	movs	r3, #2
 8002af4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afa:	2303      	movs	r3, #3
 8002afc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002afe:	2308      	movs	r3, #8
 8002b00:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002b02:	f107 0314 	add.w	r3, r7, #20
 8002b06:	4619      	mov	r1, r3
 8002b08:	4834      	ldr	r0, [pc, #208]	@ (8002bdc <HAL_UART_MspInit+0x188>)
 8002b0a:	f001 fde7 	bl	80046dc <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002b0e:	4b34      	ldr	r3, [pc, #208]	@ (8002be0 <HAL_UART_MspInit+0x18c>)
 8002b10:	4a34      	ldr	r2, [pc, #208]	@ (8002be4 <HAL_UART_MspInit+0x190>)
 8002b12:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002b14:	4b32      	ldr	r3, [pc, #200]	@ (8002be0 <HAL_UART_MspInit+0x18c>)
 8002b16:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b1a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b1c:	4b30      	ldr	r3, [pc, #192]	@ (8002be0 <HAL_UART_MspInit+0x18c>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b22:	4b2f      	ldr	r3, [pc, #188]	@ (8002be0 <HAL_UART_MspInit+0x18c>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b28:	4b2d      	ldr	r3, [pc, #180]	@ (8002be0 <HAL_UART_MspInit+0x18c>)
 8002b2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b2e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b30:	4b2b      	ldr	r3, [pc, #172]	@ (8002be0 <HAL_UART_MspInit+0x18c>)
 8002b32:	2200      	movs	r2, #0
 8002b34:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b36:	4b2a      	ldr	r3, [pc, #168]	@ (8002be0 <HAL_UART_MspInit+0x18c>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002b3c:	4b28      	ldr	r3, [pc, #160]	@ (8002be0 <HAL_UART_MspInit+0x18c>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b42:	4b27      	ldr	r3, [pc, #156]	@ (8002be0 <HAL_UART_MspInit+0x18c>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b48:	4b25      	ldr	r3, [pc, #148]	@ (8002be0 <HAL_UART_MspInit+0x18c>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002b4e:	4824      	ldr	r0, [pc, #144]	@ (8002be0 <HAL_UART_MspInit+0x18c>)
 8002b50:	f001 f8da 	bl	8003d08 <HAL_DMA_Init>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8002b5a:	f7ff fdd3 	bl	8002704 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a1f      	ldr	r2, [pc, #124]	@ (8002be0 <HAL_UART_MspInit+0x18c>)
 8002b62:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002b64:	4a1e      	ldr	r2, [pc, #120]	@ (8002be0 <HAL_UART_MspInit+0x18c>)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8002b6a:	4b1f      	ldr	r3, [pc, #124]	@ (8002be8 <HAL_UART_MspInit+0x194>)
 8002b6c:	4a1f      	ldr	r2, [pc, #124]	@ (8002bec <HAL_UART_MspInit+0x198>)
 8002b6e:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8002b70:	4b1d      	ldr	r3, [pc, #116]	@ (8002be8 <HAL_UART_MspInit+0x194>)
 8002b72:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8002b76:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b78:	4b1b      	ldr	r3, [pc, #108]	@ (8002be8 <HAL_UART_MspInit+0x194>)
 8002b7a:	2240      	movs	r2, #64	@ 0x40
 8002b7c:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8002be8 <HAL_UART_MspInit+0x194>)
 8002b80:	2200      	movs	r2, #0
 8002b82:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b84:	4b18      	ldr	r3, [pc, #96]	@ (8002be8 <HAL_UART_MspInit+0x194>)
 8002b86:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002b8a:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b8c:	4b16      	ldr	r3, [pc, #88]	@ (8002be8 <HAL_UART_MspInit+0x194>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b92:	4b15      	ldr	r3, [pc, #84]	@ (8002be8 <HAL_UART_MspInit+0x194>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8002b98:	4b13      	ldr	r3, [pc, #76]	@ (8002be8 <HAL_UART_MspInit+0x194>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002b9e:	4b12      	ldr	r3, [pc, #72]	@ (8002be8 <HAL_UART_MspInit+0x194>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002ba4:	4b10      	ldr	r3, [pc, #64]	@ (8002be8 <HAL_UART_MspInit+0x194>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002baa:	480f      	ldr	r0, [pc, #60]	@ (8002be8 <HAL_UART_MspInit+0x194>)
 8002bac:	f001 f8ac 	bl	8003d08 <HAL_DMA_Init>
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d001      	beq.n	8002bba <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 8002bb6:	f7ff fda5 	bl	8002704 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8002be8 <HAL_UART_MspInit+0x194>)
 8002bbe:	639a      	str	r2, [r3, #56]	@ 0x38
 8002bc0:	4a09      	ldr	r2, [pc, #36]	@ (8002be8 <HAL_UART_MspInit+0x194>)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END UART5_MspInit 1 */

  }

}
 8002bc6:	bf00      	nop
 8002bc8:	3728      	adds	r7, #40	@ 0x28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40005000 	.word	0x40005000
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40020800 	.word	0x40020800
 8002bdc:	40020c00 	.word	0x40020c00
 8002be0:	20000350 	.word	0x20000350
 8002be4:	40026010 	.word	0x40026010
 8002be8:	200003b0 	.word	0x200003b0
 8002bec:	400260b8 	.word	0x400260b8

08002bf0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b08c      	sub	sp, #48	@ 0x30
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002c00:	2300      	movs	r3, #0
 8002c02:	60bb      	str	r3, [r7, #8]
 8002c04:	4b2e      	ldr	r3, [pc, #184]	@ (8002cc0 <HAL_InitTick+0xd0>)
 8002c06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c08:	4a2d      	ldr	r2, [pc, #180]	@ (8002cc0 <HAL_InitTick+0xd0>)
 8002c0a:	f043 0301 	orr.w	r3, r3, #1
 8002c0e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c10:	4b2b      	ldr	r3, [pc, #172]	@ (8002cc0 <HAL_InitTick+0xd0>)
 8002c12:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c14:	f003 0301 	and.w	r3, r3, #1
 8002c18:	60bb      	str	r3, [r7, #8]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002c1c:	f107 020c 	add.w	r2, r7, #12
 8002c20:	f107 0310 	add.w	r3, r7, #16
 8002c24:	4611      	mov	r1, r2
 8002c26:	4618      	mov	r0, r3
 8002c28:	f003 fef0 	bl	8006a0c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002c2c:	f003 feda 	bl	80069e4 <HAL_RCC_GetPCLK2Freq>
 8002c30:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002c34:	4a23      	ldr	r2, [pc, #140]	@ (8002cc4 <HAL_InitTick+0xd4>)
 8002c36:	fba2 2303 	umull	r2, r3, r2, r3
 8002c3a:	0c9b      	lsrs	r3, r3, #18
 8002c3c:	3b01      	subs	r3, #1
 8002c3e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002c40:	4b21      	ldr	r3, [pc, #132]	@ (8002cc8 <HAL_InitTick+0xd8>)
 8002c42:	4a22      	ldr	r2, [pc, #136]	@ (8002ccc <HAL_InitTick+0xdc>)
 8002c44:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002c46:	4b20      	ldr	r3, [pc, #128]	@ (8002cc8 <HAL_InitTick+0xd8>)
 8002c48:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002c4c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8002cc8 <HAL_InitTick+0xd8>)
 8002c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c52:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002c54:	4b1c      	ldr	r3, [pc, #112]	@ (8002cc8 <HAL_InitTick+0xd8>)
 8002c56:	2200      	movs	r2, #0
 8002c58:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002cc8 <HAL_InitTick+0xd8>)
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c60:	4b19      	ldr	r3, [pc, #100]	@ (8002cc8 <HAL_InitTick+0xd8>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002c66:	4818      	ldr	r0, [pc, #96]	@ (8002cc8 <HAL_InitTick+0xd8>)
 8002c68:	f003 ff02 	bl	8006a70 <HAL_TIM_Base_Init>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002c72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d11b      	bne.n	8002cb2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002c7a:	4813      	ldr	r0, [pc, #76]	@ (8002cc8 <HAL_InitTick+0xd8>)
 8002c7c:	f004 f81a 	bl	8006cb4 <HAL_TIM_Base_Start_IT>
 8002c80:	4603      	mov	r3, r0
 8002c82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002c86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d111      	bne.n	8002cb2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c8e:	2019      	movs	r0, #25
 8002c90:	f001 f822 	bl	8003cd8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	2b0f      	cmp	r3, #15
 8002c98:	d808      	bhi.n	8002cac <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	6879      	ldr	r1, [r7, #4]
 8002c9e:	2019      	movs	r0, #25
 8002ca0:	f000 ffee 	bl	8003c80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd0 <HAL_InitTick+0xe0>)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6013      	str	r3, [r2, #0]
 8002caa:	e002      	b.n	8002cb2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002cb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3730      	adds	r7, #48	@ 0x30
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40023800 	.word	0x40023800
 8002cc4:	431bde83 	.word	0x431bde83
 8002cc8:	200004b4 	.word	0x200004b4
 8002ccc:	40010000 	.word	0x40010000
 8002cd0:	20000004 	.word	0x20000004

08002cd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002cd8:	bf00      	nop
 8002cda:	e7fd      	b.n	8002cd8 <NMI_Handler+0x4>

08002cdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ce0:	bf00      	nop
 8002ce2:	e7fd      	b.n	8002ce0 <HardFault_Handler+0x4>

08002ce4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ce8:	bf00      	nop
 8002cea:	e7fd      	b.n	8002ce8 <MemManage_Handler+0x4>

08002cec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cf0:	bf00      	nop
 8002cf2:	e7fd      	b.n	8002cf0 <BusFault_Handler+0x4>

08002cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cf8:	bf00      	nop
 8002cfa:	e7fd      	b.n	8002cf8 <UsageFault_Handler+0x4>

08002cfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002d00:	bf00      	nop
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002d0e:	2001      	movs	r0, #1
 8002d10:	f001 fff0 	bl	8004cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002d14:	bf00      	nop
 8002d16:	bd80      	pop	{r7, pc}

08002d18 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002d1c:	4802      	ldr	r0, [pc, #8]	@ (8002d28 <DMA1_Stream0_IRQHandler+0x10>)
 8002d1e:	f001 fa73 	bl	8004208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002d22:	bf00      	nop
 8002d24:	bd80      	pop	{r7, pc}
 8002d26:	bf00      	nop
 8002d28:	20000350 	.word	0x20000350

08002d2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002d30:	4802      	ldr	r0, [pc, #8]	@ (8002d3c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002d32:	f004 f885 	bl	8006e40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200004b4 	.word	0x200004b4

08002d40 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8002d44:	4802      	ldr	r0, [pc, #8]	@ (8002d50 <DMA1_Stream7_IRQHandler+0x10>)
 8002d46:	f001 fa5f 	bl	8004208 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002d4a:	bf00      	nop
 8002d4c:	bd80      	pop	{r7, pc}
 8002d4e:	bf00      	nop
 8002d50:	200003b0 	.word	0x200003b0

08002d54 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002d54:	b480      	push	{r7}
 8002d56:	af00      	add	r7, sp, #0
  return 1;
 8002d58:	2301      	movs	r3, #1
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <_kill>:

int _kill(int pid, int sig)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b082      	sub	sp, #8
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	6078      	str	r0, [r7, #4]
 8002d6c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002d6e:	f009 fe49 	bl	800ca04 <__errno>
 8002d72:	4603      	mov	r3, r0
 8002d74:	2216      	movs	r2, #22
 8002d76:	601a      	str	r2, [r3, #0]
  return -1;
 8002d78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	3708      	adds	r7, #8
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}

08002d84 <_exit>:

void _exit (int status)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d8c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f7ff ffe7 	bl	8002d64 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d96:	bf00      	nop
 8002d98:	e7fd      	b.n	8002d96 <_exit+0x12>

08002d9a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d9a:	b580      	push	{r7, lr}
 8002d9c:	b086      	sub	sp, #24
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	60f8      	str	r0, [r7, #12]
 8002da2:	60b9      	str	r1, [r7, #8]
 8002da4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002da6:	2300      	movs	r3, #0
 8002da8:	617b      	str	r3, [r7, #20]
 8002daa:	e00a      	b.n	8002dc2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002dac:	f3af 8000 	nop.w
 8002db0:	4601      	mov	r1, r0
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	1c5a      	adds	r2, r3, #1
 8002db6:	60ba      	str	r2, [r7, #8]
 8002db8:	b2ca      	uxtb	r2, r1
 8002dba:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	3301      	adds	r3, #1
 8002dc0:	617b      	str	r3, [r7, #20]
 8002dc2:	697a      	ldr	r2, [r7, #20]
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	429a      	cmp	r2, r3
 8002dc8:	dbf0      	blt.n	8002dac <_read+0x12>
  }

  return len;
 8002dca:	687b      	ldr	r3, [r7, #4]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	3718      	adds	r7, #24
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ddc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002de0:	4618      	mov	r0, r3
 8002de2:	370c      	adds	r7, #12
 8002de4:	46bd      	mov	sp, r7
 8002de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dea:	4770      	bx	lr

08002dec <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b083      	sub	sp, #12
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002dfc:	605a      	str	r2, [r3, #4]
  return 0;
 8002dfe:	2300      	movs	r3, #0
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	370c      	adds	r7, #12
 8002e04:	46bd      	mov	sp, r7
 8002e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0a:	4770      	bx	lr

08002e0c <_isatty>:

int _isatty(int file)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b083      	sub	sp, #12
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e14:	2301      	movs	r3, #1
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	370c      	adds	r7, #12
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr

08002e22 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b085      	sub	sp, #20
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e2e:	2300      	movs	r3, #0
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	3714      	adds	r7, #20
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e40:	4b06      	ldr	r3, [pc, #24]	@ (8002e5c <SystemInit+0x20>)
 8002e42:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e46:	4a05      	ldr	r2, [pc, #20]	@ (8002e5c <SystemInit+0x20>)
 8002e48:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002e4c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr
 8002e5a:	bf00      	nop
 8002e5c:	e000ed00 	.word	0xe000ed00

08002e60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002e60:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002e98 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002e64:	f7ff ffea 	bl	8002e3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002e68:	480c      	ldr	r0, [pc, #48]	@ (8002e9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e6a:	490d      	ldr	r1, [pc, #52]	@ (8002ea0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e6c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ea4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e70:	e002      	b.n	8002e78 <LoopCopyDataInit>

08002e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e76:	3304      	adds	r3, #4

08002e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e7c:	d3f9      	bcc.n	8002e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	@ (8002ea8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e80:	4c0a      	ldr	r4, [pc, #40]	@ (8002eac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e84:	e001      	b.n	8002e8a <LoopFillZerobss>

08002e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e88:	3204      	adds	r2, #4

08002e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e8c:	d3fb      	bcc.n	8002e86 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e8e:	f009 fdbf 	bl	800ca10 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002e92:	f7fe feff 	bl	8001c94 <main>
  bx  lr    
 8002e96:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002e98:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ea0:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002ea4:	08010370 	.word	0x08010370
  ldr r2, =_sbss
 8002ea8:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002eac:	20013df0 	.word	0x20013df0

08002eb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002eb0:	e7fe      	b.n	8002eb0 <ADC_IRQHandler>
	...

08002eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002eb8:	4b0e      	ldr	r3, [pc, #56]	@ (8002ef4 <HAL_Init+0x40>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a0d      	ldr	r2, [pc, #52]	@ (8002ef4 <HAL_Init+0x40>)
 8002ebe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002ec2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ec4:	4b0b      	ldr	r3, [pc, #44]	@ (8002ef4 <HAL_Init+0x40>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a0a      	ldr	r2, [pc, #40]	@ (8002ef4 <HAL_Init+0x40>)
 8002eca:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ece:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ed0:	4b08      	ldr	r3, [pc, #32]	@ (8002ef4 <HAL_Init+0x40>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	4a07      	ldr	r2, [pc, #28]	@ (8002ef4 <HAL_Init+0x40>)
 8002ed6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002eda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002edc:	2003      	movs	r0, #3
 8002ede:	f000 feaf 	bl	8003c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ee2:	200f      	movs	r0, #15
 8002ee4:	f7ff fe84 	bl	8002bf0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ee8:	f7ff fd00 	bl	80028ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002eec:	2300      	movs	r3, #0
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	bd80      	pop	{r7, pc}
 8002ef2:	bf00      	nop
 8002ef4:	40023c00 	.word	0x40023c00

08002ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002efc:	4b06      	ldr	r3, [pc, #24]	@ (8002f18 <HAL_IncTick+0x20>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	461a      	mov	r2, r3
 8002f02:	4b06      	ldr	r3, [pc, #24]	@ (8002f1c <HAL_IncTick+0x24>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	4413      	add	r3, r2
 8002f08:	4a04      	ldr	r2, [pc, #16]	@ (8002f1c <HAL_IncTick+0x24>)
 8002f0a:	6013      	str	r3, [r2, #0]
}
 8002f0c:	bf00      	nop
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr
 8002f16:	bf00      	nop
 8002f18:	20000008 	.word	0x20000008
 8002f1c:	200004fc 	.word	0x200004fc

08002f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f20:	b480      	push	{r7}
 8002f22:	af00      	add	r7, sp, #0
  return uwTick;
 8002f24:	4b03      	ldr	r3, [pc, #12]	@ (8002f34 <HAL_GetTick+0x14>)
 8002f26:	681b      	ldr	r3, [r3, #0]
}
 8002f28:	4618      	mov	r0, r3
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f30:	4770      	bx	lr
 8002f32:	bf00      	nop
 8002f34:	200004fc 	.word	0x200004fc

08002f38 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f40:	f7ff ffee 	bl	8002f20 <HAL_GetTick>
 8002f44:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f50:	d005      	beq.n	8002f5e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f52:	4b0a      	ldr	r3, [pc, #40]	@ (8002f7c <HAL_Delay+0x44>)
 8002f54:	781b      	ldrb	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f5e:	bf00      	nop
 8002f60:	f7ff ffde 	bl	8002f20 <HAL_GetTick>
 8002f64:	4602      	mov	r2, r0
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	68fa      	ldr	r2, [r7, #12]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d8f7      	bhi.n	8002f60 <HAL_Delay+0x28>
  {
  }
}
 8002f70:	bf00      	nop
 8002f72:	bf00      	nop
 8002f74:	3710      	adds	r7, #16
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20000008 	.word	0x20000008

08002f80 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b084      	sub	sp, #16
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d101      	bne.n	8002f96 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	e15c      	b.n	8003250 <HAL_ADC_Init+0x2d0>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a8e      	ldr	r2, [pc, #568]	@ (80031d4 <HAL_ADC_Init+0x254>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d00e      	beq.n	8002fbe <HAL_ADC_Init+0x3e>
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a8c      	ldr	r2, [pc, #560]	@ (80031d8 <HAL_ADC_Init+0x258>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d009      	beq.n	8002fbe <HAL_ADC_Init+0x3e>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a8b      	ldr	r2, [pc, #556]	@ (80031dc <HAL_ADC_Init+0x25c>)
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d004      	beq.n	8002fbe <HAL_ADC_Init+0x3e>
 8002fb4:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8002fb8:	4889      	ldr	r0, [pc, #548]	@ (80031e0 <HAL_ADC_Init+0x260>)
 8002fba:	f7ff fba9 	bl	8002710 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d013      	beq.n	8002fee <HAL_ADC_Init+0x6e>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002fce:	d00e      	beq.n	8002fee <HAL_ADC_Init+0x6e>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002fd8:	d009      	beq.n	8002fee <HAL_ADC_Init+0x6e>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002fe2:	d004      	beq.n	8002fee <HAL_ADC_Init+0x6e>
 8002fe4:	f240 1143 	movw	r1, #323	@ 0x143
 8002fe8:	487d      	ldr	r0, [pc, #500]	@ (80031e0 <HAL_ADC_Init+0x260>)
 8002fea:	f7ff fb91 	bl	8002710 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d013      	beq.n	800301e <HAL_ADC_Init+0x9e>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ffe:	d00e      	beq.n	800301e <HAL_ADC_Init+0x9e>
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	689b      	ldr	r3, [r3, #8]
 8003004:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003008:	d009      	beq.n	800301e <HAL_ADC_Init+0x9e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003012:	d004      	beq.n	800301e <HAL_ADC_Init+0x9e>
 8003014:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8003018:	4871      	ldr	r0, [pc, #452]	@ (80031e0 <HAL_ADC_Init+0x260>)
 800301a:	f7ff fb79 	bl	8002710 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	691b      	ldr	r3, [r3, #16]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d008      	beq.n	8003038 <HAL_ADC_Init+0xb8>
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	691b      	ldr	r3, [r3, #16]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d004      	beq.n	8003038 <HAL_ADC_Init+0xb8>
 800302e:	f240 1145 	movw	r1, #325	@ 0x145
 8003032:	486b      	ldr	r0, [pc, #428]	@ (80031e0 <HAL_ADC_Init+0x260>)
 8003034:	f7ff fb6c 	bl	8002710 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	7e1b      	ldrb	r3, [r3, #24]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d008      	beq.n	8003052 <HAL_ADC_Init+0xd2>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	7e1b      	ldrb	r3, [r3, #24]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d004      	beq.n	8003052 <HAL_ADC_Init+0xd2>
 8003048:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 800304c:	4864      	ldr	r0, [pc, #400]	@ (80031e0 <HAL_ADC_Init+0x260>)
 800304e:	f7ff fb5f 	bl	8002710 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003056:	2b00      	cmp	r3, #0
 8003058:	d054      	beq.n	8003104 <HAL_ADC_Init+0x184>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800305e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003062:	d04f      	beq.n	8003104 <HAL_ADC_Init+0x184>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003068:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800306c:	d04a      	beq.n	8003104 <HAL_ADC_Init+0x184>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003072:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8003076:	d045      	beq.n	8003104 <HAL_ADC_Init+0x184>
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800307c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003080:	d040      	beq.n	8003104 <HAL_ADC_Init+0x184>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003086:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 800308a:	d03b      	beq.n	8003104 <HAL_ADC_Init+0x184>
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003090:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8003094:	d036      	beq.n	8003104 <HAL_ADC_Init+0x184>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800309a:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 800309e:	d031      	beq.n	8003104 <HAL_ADC_Init+0x184>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030a4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80030a8:	d02c      	beq.n	8003104 <HAL_ADC_Init+0x184>
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ae:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 80030b2:	d027      	beq.n	8003104 <HAL_ADC_Init+0x184>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030b8:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 80030bc:	d022      	beq.n	8003104 <HAL_ADC_Init+0x184>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030c2:	f1b3 6f30 	cmp.w	r3, #184549376	@ 0xb000000
 80030c6:	d01d      	beq.n	8003104 <HAL_ADC_Init+0x184>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030cc:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 80030d0:	d018      	beq.n	8003104 <HAL_ADC_Init+0x184>
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030d6:	f1b3 6f50 	cmp.w	r3, #218103808	@ 0xd000000
 80030da:	d013      	beq.n	8003104 <HAL_ADC_Init+0x184>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030e0:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 80030e4:	d00e      	beq.n	8003104 <HAL_ADC_Init+0x184>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030ea:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80030ee:	d009      	beq.n	8003104 <HAL_ADC_Init+0x184>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030f4:	4a3b      	ldr	r2, [pc, #236]	@ (80031e4 <HAL_ADC_Init+0x264>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d004      	beq.n	8003104 <HAL_ADC_Init+0x184>
 80030fa:	f240 1147 	movw	r1, #327	@ 0x147
 80030fe:	4838      	ldr	r0, [pc, #224]	@ (80031e0 <HAL_ADC_Init+0x260>)
 8003100:	f7ff fb06 	bl	8002710 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	68db      	ldr	r3, [r3, #12]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d009      	beq.n	8003120 <HAL_ADC_Init+0x1a0>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003114:	d004      	beq.n	8003120 <HAL_ADC_Init+0x1a0>
 8003116:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 800311a:	4831      	ldr	r0, [pc, #196]	@ (80031e0 <HAL_ADC_Init+0x260>)
 800311c:	f7ff faf8 	bl	8002710 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	69db      	ldr	r3, [r3, #28]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d003      	beq.n	8003130 <HAL_ADC_Init+0x1b0>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	69db      	ldr	r3, [r3, #28]
 800312c:	2b10      	cmp	r3, #16
 800312e:	d904      	bls.n	800313a <HAL_ADC_Init+0x1ba>
 8003130:	f240 1149 	movw	r1, #329	@ 0x149
 8003134:	482a      	ldr	r0, [pc, #168]	@ (80031e0 <HAL_ADC_Init+0x260>)
 8003136:	f7ff faeb 	bl	8002710 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003140:	2b00      	cmp	r3, #0
 8003142:	d009      	beq.n	8003158 <HAL_ADC_Init+0x1d8>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800314a:	2b01      	cmp	r3, #1
 800314c:	d004      	beq.n	8003158 <HAL_ADC_Init+0x1d8>
 800314e:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8003152:	4823      	ldr	r0, [pc, #140]	@ (80031e0 <HAL_ADC_Init+0x260>)
 8003154:	f7ff fadc 	bl	8002710 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	695b      	ldr	r3, [r3, #20]
 800315c:	2b01      	cmp	r3, #1
 800315e:	d00c      	beq.n	800317a <HAL_ADC_Init+0x1fa>
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d008      	beq.n	800317a <HAL_ADC_Init+0x1fa>
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	695b      	ldr	r3, [r3, #20]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d004      	beq.n	800317a <HAL_ADC_Init+0x1fa>
 8003170:	f240 114b 	movw	r1, #331	@ 0x14b
 8003174:	481a      	ldr	r0, [pc, #104]	@ (80031e0 <HAL_ADC_Init+0x260>)
 8003176:	f7ff facb 	bl	8002710 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d009      	beq.n	8003198 <HAL_ADC_Init+0x218>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	f893 3020 	ldrb.w	r3, [r3, #32]
 800318a:	2b01      	cmp	r3, #1
 800318c:	d004      	beq.n	8003198 <HAL_ADC_Init+0x218>
 800318e:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8003192:	4813      	ldr	r0, [pc, #76]	@ (80031e0 <HAL_ADC_Init+0x260>)
 8003194:	f7ff fabc 	bl	8002710 <assert_failed>

  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800319c:	4a11      	ldr	r2, [pc, #68]	@ (80031e4 <HAL_ADC_Init+0x264>)
 800319e:	4293      	cmp	r3, r2
 80031a0:	d022      	beq.n	80031e8 <HAL_ADC_Init+0x268>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d01e      	beq.n	80031e8 <HAL_ADC_Init+0x268>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80031b2:	d019      	beq.n	80031e8 <HAL_ADC_Init+0x268>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80031bc:	d014      	beq.n	80031e8 <HAL_ADC_Init+0x268>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031c2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80031c6:	d00f      	beq.n	80031e8 <HAL_ADC_Init+0x268>
 80031c8:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80031cc:	4804      	ldr	r0, [pc, #16]	@ (80031e0 <HAL_ADC_Init+0x260>)
 80031ce:	f7ff fa9f 	bl	8002710 <assert_failed>
 80031d2:	e009      	b.n	80031e8 <HAL_ADC_Init+0x268>
 80031d4:	40012000 	.word	0x40012000
 80031d8:	40012100 	.word	0x40012100
 80031dc:	40012200 	.word	0x40012200
 80031e0:	0800fcec 	.word	0x0800fcec
 80031e4:	0f000001 	.word	0x0f000001
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d109      	bne.n	8003204 <HAL_ADC_Init+0x284>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80031f0:	6878      	ldr	r0, [r7, #4]
 80031f2:	f7ff fba3 	bl	800293c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2200      	movs	r2, #0
 8003200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003208:	f003 0310 	and.w	r3, r3, #16
 800320c:	2b00      	cmp	r3, #0
 800320e:	d118      	bne.n	8003242 <HAL_ADC_Init+0x2c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003214:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003218:	f023 0302 	bic.w	r3, r3, #2
 800321c:	f043 0202 	orr.w	r2, r3, #2
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003224:	6878      	ldr	r0, [r7, #4]
 8003226:	f000 fb53 	bl	80038d0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003234:	f023 0303 	bic.w	r3, r3, #3
 8003238:	f043 0201 	orr.w	r2, r3, #1
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	641a      	str	r2, [r3, #64]	@ 0x40
 8003240:	e001      	b.n	8003246 <HAL_ADC_Init+0x2c6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2200      	movs	r2, #0
 800324a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800324e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003250:	4618      	mov	r0, r3
 8003252:	3710      	adds	r7, #16
 8003254:	46bd      	mov	sp, r7
 8003256:	bd80      	pop	{r7, pc}

08003258 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b084      	sub	sp, #16
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003260:	2300      	movs	r3, #0
 8003262:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	7e1b      	ldrb	r3, [r3, #24]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d008      	beq.n	800327e <HAL_ADC_Start+0x26>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	7e1b      	ldrb	r3, [r3, #24]
 8003270:	2b01      	cmp	r3, #1
 8003272:	d004      	beq.n	800327e <HAL_ADC_Start+0x26>
 8003274:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8003278:	486c      	ldr	r0, [pc, #432]	@ (800342c <HAL_ADC_Start+0x1d4>)
 800327a:	f7ff fa49 	bl	8002710 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003282:	2b00      	cmp	r3, #0
 8003284:	d013      	beq.n	80032ae <HAL_ADC_Start+0x56>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800328a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800328e:	d00e      	beq.n	80032ae <HAL_ADC_Start+0x56>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003294:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003298:	d009      	beq.n	80032ae <HAL_ADC_Start+0x56>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800329e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 80032a2:	d004      	beq.n	80032ae <HAL_ADC_Start+0x56>
 80032a4:	f240 21d3 	movw	r1, #723	@ 0x2d3
 80032a8:	4860      	ldr	r0, [pc, #384]	@ (800342c <HAL_ADC_Start+0x1d4>)
 80032aa:	f7ff fa31 	bl	8002710 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d101      	bne.n	80032bc <HAL_ADC_Start+0x64>
 80032b8:	2302      	movs	r3, #2
 80032ba:	e0b2      	b.n	8003422 <HAL_ADC_Start+0x1ca>
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	2201      	movs	r2, #1
 80032c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 0301 	and.w	r3, r3, #1
 80032ce:	2b01      	cmp	r3, #1
 80032d0:	d018      	beq.n	8003304 <HAL_ADC_Start+0xac>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f042 0201 	orr.w	r2, r2, #1
 80032e0:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80032e2:	4b53      	ldr	r3, [pc, #332]	@ (8003430 <HAL_ADC_Start+0x1d8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a53      	ldr	r2, [pc, #332]	@ (8003434 <HAL_ADC_Start+0x1dc>)
 80032e8:	fba2 2303 	umull	r2, r3, r2, r3
 80032ec:	0c9a      	lsrs	r2, r3, #18
 80032ee:	4613      	mov	r3, r2
 80032f0:	005b      	lsls	r3, r3, #1
 80032f2:	4413      	add	r3, r2
 80032f4:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80032f6:	e002      	b.n	80032fe <HAL_ADC_Start+0xa6>
    {
      counter--;
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80032fe:	68bb      	ldr	r3, [r7, #8]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d1f9      	bne.n	80032f8 <HAL_ADC_Start+0xa0>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	689b      	ldr	r3, [r3, #8]
 800330a:	f003 0301 	and.w	r3, r3, #1
 800330e:	2b01      	cmp	r3, #1
 8003310:	d17a      	bne.n	8003408 <HAL_ADC_Start+0x1b0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003316:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800331a:	f023 0301 	bic.w	r3, r3, #1
 800331e:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	685b      	ldr	r3, [r3, #4]
 800332c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003330:	2b00      	cmp	r3, #0
 8003332:	d007      	beq.n	8003344 <HAL_ADC_Start+0xec>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003338:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800333c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003348:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800334c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003350:	d106      	bne.n	8003360 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003356:	f023 0206 	bic.w	r2, r3, #6
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	645a      	str	r2, [r3, #68]	@ 0x44
 800335e:	e002      	b.n	8003366 <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800336e:	4b32      	ldr	r3, [pc, #200]	@ (8003438 <HAL_ADC_Start+0x1e0>)
 8003370:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 800337a:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	f003 031f 	and.w	r3, r3, #31
 8003384:	2b00      	cmp	r3, #0
 8003386:	d12a      	bne.n	80033de <HAL_ADC_Start+0x186>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2b      	ldr	r2, [pc, #172]	@ (800343c <HAL_ADC_Start+0x1e4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d015      	beq.n	80033be <HAL_ADC_Start+0x166>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	4a2a      	ldr	r2, [pc, #168]	@ (8003440 <HAL_ADC_Start+0x1e8>)
 8003398:	4293      	cmp	r3, r2
 800339a:	d105      	bne.n	80033a8 <HAL_ADC_Start+0x150>
 800339c:	4b26      	ldr	r3, [pc, #152]	@ (8003438 <HAL_ADC_Start+0x1e0>)
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f003 031f 	and.w	r3, r3, #31
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d00a      	beq.n	80033be <HAL_ADC_Start+0x166>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a25      	ldr	r2, [pc, #148]	@ (8003444 <HAL_ADC_Start+0x1ec>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d136      	bne.n	8003420 <HAL_ADC_Start+0x1c8>
 80033b2:	4b21      	ldr	r3, [pc, #132]	@ (8003438 <HAL_ADC_Start+0x1e0>)
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f003 0310 	and.w	r3, r3, #16
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d130      	bne.n	8003420 <HAL_ADC_Start+0x1c8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	689b      	ldr	r3, [r3, #8]
 80033c4:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d129      	bne.n	8003420 <HAL_ADC_Start+0x1c8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	689a      	ldr	r2, [r3, #8]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80033da:	609a      	str	r2, [r3, #8]
 80033dc:	e020      	b.n	8003420 <HAL_ADC_Start+0x1c8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a16      	ldr	r2, [pc, #88]	@ (800343c <HAL_ADC_Start+0x1e4>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d11b      	bne.n	8003420 <HAL_ADC_Start+0x1c8>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d114      	bne.n	8003420 <HAL_ADC_Start+0x1c8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003404:	609a      	str	r2, [r3, #8]
 8003406:	e00b      	b.n	8003420 <HAL_ADC_Start+0x1c8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800340c:	f043 0210 	orr.w	r2, r3, #16
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003418:	f043 0201 	orr.w	r2, r3, #1
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	0800fcec 	.word	0x0800fcec
 8003430:	20000000 	.word	0x20000000
 8003434:	431bde83 	.word	0x431bde83
 8003438:	40012300 	.word	0x40012300
 800343c:	40012000 	.word	0x40012000
 8003440:	40012100 	.word	0x40012100
 8003444:	40012200 	.word	0x40012200

08003448 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1f      	ldr	r2, [pc, #124]	@ (80034d4 <HAL_ADC_Stop+0x8c>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d00e      	beq.n	8003478 <HAL_ADC_Stop+0x30>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1e      	ldr	r2, [pc, #120]	@ (80034d8 <HAL_ADC_Stop+0x90>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d009      	beq.n	8003478 <HAL_ADC_Stop+0x30>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a1c      	ldr	r2, [pc, #112]	@ (80034dc <HAL_ADC_Stop+0x94>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d004      	beq.n	8003478 <HAL_ADC_Stop+0x30>
 800346e:	f240 314a 	movw	r1, #842	@ 0x34a
 8003472:	481b      	ldr	r0, [pc, #108]	@ (80034e0 <HAL_ADC_Stop+0x98>)
 8003474:	f7ff f94c 	bl	8002710 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_ADC_Stop+0x3e>
 8003482:	2302      	movs	r3, #2
 8003484:	e021      	b.n	80034ca <HAL_ADC_Stop+0x82>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	689a      	ldr	r2, [r3, #8]
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f022 0201 	bic.w	r2, r2, #1
 800349c:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d109      	bne.n	80034c0 <HAL_ADC_Stop+0x78>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034b0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80034b4:	f023 0301 	bic.w	r3, r3, #1
 80034b8:	f043 0201 	orr.w	r2, r3, #1
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3708      	adds	r7, #8
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	40012000 	.word	0x40012000
 80034d8:	40012100 	.word	0x40012100
 80034dc:	40012200 	.word	0x40012200
 80034e0:	0800fcec 	.word	0x0800fcec

080034e4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b084      	sub	sp, #16
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
 80034ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80034fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003500:	d113      	bne.n	800352a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800350c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003510:	d10b      	bne.n	800352a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003516:	f043 0220 	orr.w	r2, r3, #32
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	e063      	b.n	80035f2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800352a:	f7ff fcf9 	bl	8002f20 <HAL_GetTick>
 800352e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003530:	e021      	b.n	8003576 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003538:	d01d      	beq.n	8003576 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d007      	beq.n	8003550 <HAL_ADC_PollForConversion+0x6c>
 8003540:	f7ff fcee 	bl	8002f20 <HAL_GetTick>
 8003544:	4602      	mov	r2, r0
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	1ad3      	subs	r3, r2, r3
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	429a      	cmp	r2, r3
 800354e:	d212      	bcs.n	8003576 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	2b02      	cmp	r3, #2
 800355c:	d00b      	beq.n	8003576 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003562:	f043 0204 	orr.w	r2, r3, #4
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e03d      	b.n	80035f2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f003 0302 	and.w	r3, r3, #2
 8003580:	2b02      	cmp	r3, #2
 8003582:	d1d6      	bne.n	8003532 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f06f 0212 	mvn.w	r2, #18
 800358c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003592:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689b      	ldr	r3, [r3, #8]
 80035a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d123      	bne.n	80035f0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d11f      	bne.n	80035f0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d006      	beq.n	80035cc <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	689b      	ldr	r3, [r3, #8]
 80035c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d111      	bne.n	80035f0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035dc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d105      	bne.n	80035f0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035e8:	f043 0201 	orr.w	r2, r3, #1
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80035f0:	2300      	movs	r3, #0
}
 80035f2:	4618      	mov	r0, r3
 80035f4:	3710      	adds	r7, #16
 80035f6:	46bd      	mov	sp, r7
 80035f8:	bd80      	pop	{r7, pc}

080035fa <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80035fa:	b480      	push	{r7}
 80035fc:	b083      	sub	sp, #12
 80035fe:	af00      	add	r7, sp, #0
 8003600:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8003608:	4618      	mov	r0, r3
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr

08003614 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
 800361c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b12      	cmp	r3, #18
 8003628:	d904      	bls.n	8003634 <HAL_ADC_ConfigChannel+0x20>
 800362a:	f240 618b 	movw	r1, #1675	@ 0x68b
 800362e:	486f      	ldr	r0, [pc, #444]	@ (80037ec <HAL_ADC_ConfigChannel+0x1d8>)
 8003630:	f7ff f86e 	bl	8002710 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d003      	beq.n	8003644 <HAL_ADC_ConfigChannel+0x30>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	2b10      	cmp	r3, #16
 8003642:	d904      	bls.n	800364e <HAL_ADC_ConfigChannel+0x3a>
 8003644:	f240 618c 	movw	r1, #1676	@ 0x68c
 8003648:	4868      	ldr	r0, [pc, #416]	@ (80037ec <HAL_ADC_ConfigChannel+0x1d8>)
 800364a:	f7ff f861 	bl	8002710 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	689b      	ldr	r3, [r3, #8]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d020      	beq.n	8003698 <HAL_ADC_ConfigChannel+0x84>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	2b01      	cmp	r3, #1
 800365c:	d01c      	beq.n	8003698 <HAL_ADC_ConfigChannel+0x84>
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	2b02      	cmp	r3, #2
 8003664:	d018      	beq.n	8003698 <HAL_ADC_ConfigChannel+0x84>
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	2b03      	cmp	r3, #3
 800366c:	d014      	beq.n	8003698 <HAL_ADC_ConfigChannel+0x84>
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	2b04      	cmp	r3, #4
 8003674:	d010      	beq.n	8003698 <HAL_ADC_ConfigChannel+0x84>
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	689b      	ldr	r3, [r3, #8]
 800367a:	2b05      	cmp	r3, #5
 800367c:	d00c      	beq.n	8003698 <HAL_ADC_ConfigChannel+0x84>
 800367e:	683b      	ldr	r3, [r7, #0]
 8003680:	689b      	ldr	r3, [r3, #8]
 8003682:	2b06      	cmp	r3, #6
 8003684:	d008      	beq.n	8003698 <HAL_ADC_ConfigChannel+0x84>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	689b      	ldr	r3, [r3, #8]
 800368a:	2b07      	cmp	r3, #7
 800368c:	d004      	beq.n	8003698 <HAL_ADC_ConfigChannel+0x84>
 800368e:	f240 618d 	movw	r1, #1677	@ 0x68d
 8003692:	4856      	ldr	r0, [pc, #344]	@ (80037ec <HAL_ADC_ConfigChannel+0x1d8>)
 8003694:	f7ff f83c 	bl	8002710 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d101      	bne.n	80036a6 <HAL_ADC_ConfigChannel+0x92>
 80036a2:	2302      	movs	r3, #2
 80036a4:	e107      	b.n	80038b6 <HAL_ADC_ConfigChannel+0x2a2>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2201      	movs	r2, #1
 80036aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	2b09      	cmp	r3, #9
 80036b4:	d925      	bls.n	8003702 <HAL_ADC_ConfigChannel+0xee>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68d9      	ldr	r1, [r3, #12]
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	b29b      	uxth	r3, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	4613      	mov	r3, r2
 80036c6:	005b      	lsls	r3, r3, #1
 80036c8:	4413      	add	r3, r2
 80036ca:	3b1e      	subs	r3, #30
 80036cc:	2207      	movs	r2, #7
 80036ce:	fa02 f303 	lsl.w	r3, r2, r3
 80036d2:	43da      	mvns	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	400a      	ands	r2, r1
 80036da:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68d9      	ldr	r1, [r3, #12]
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	689a      	ldr	r2, [r3, #8]
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	b29b      	uxth	r3, r3
 80036ec:	4618      	mov	r0, r3
 80036ee:	4603      	mov	r3, r0
 80036f0:	005b      	lsls	r3, r3, #1
 80036f2:	4403      	add	r3, r0
 80036f4:	3b1e      	subs	r3, #30
 80036f6:	409a      	lsls	r2, r3
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	430a      	orrs	r2, r1
 80036fe:	60da      	str	r2, [r3, #12]
 8003700:	e022      	b.n	8003748 <HAL_ADC_ConfigChannel+0x134>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6919      	ldr	r1, [r3, #16]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	b29b      	uxth	r3, r3
 800370e:	461a      	mov	r2, r3
 8003710:	4613      	mov	r3, r2
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	4413      	add	r3, r2
 8003716:	2207      	movs	r2, #7
 8003718:	fa02 f303 	lsl.w	r3, r2, r3
 800371c:	43da      	mvns	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	400a      	ands	r2, r1
 8003724:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	6919      	ldr	r1, [r3, #16]
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	689a      	ldr	r2, [r3, #8]
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	b29b      	uxth	r3, r3
 8003736:	4618      	mov	r0, r3
 8003738:	4603      	mov	r3, r0
 800373a:	005b      	lsls	r3, r3, #1
 800373c:	4403      	add	r3, r0
 800373e:	409a      	lsls	r2, r3
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	2b06      	cmp	r3, #6
 800374e:	d824      	bhi.n	800379a <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685a      	ldr	r2, [r3, #4]
 800375a:	4613      	mov	r3, r2
 800375c:	009b      	lsls	r3, r3, #2
 800375e:	4413      	add	r3, r2
 8003760:	3b05      	subs	r3, #5
 8003762:	221f      	movs	r2, #31
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	43da      	mvns	r2, r3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	400a      	ands	r2, r1
 8003770:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	b29b      	uxth	r3, r3
 800377e:	4618      	mov	r0, r3
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685a      	ldr	r2, [r3, #4]
 8003784:	4613      	mov	r3, r2
 8003786:	009b      	lsls	r3, r3, #2
 8003788:	4413      	add	r3, r2
 800378a:	3b05      	subs	r3, #5
 800378c:	fa00 f203 	lsl.w	r2, r0, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	430a      	orrs	r2, r1
 8003796:	635a      	str	r2, [r3, #52]	@ 0x34
 8003798:	e04e      	b.n	8003838 <HAL_ADC_ConfigChannel+0x224>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b0c      	cmp	r3, #12
 80037a0:	d826      	bhi.n	80037f0 <HAL_ADC_ConfigChannel+0x1dc>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	685a      	ldr	r2, [r3, #4]
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	3b23      	subs	r3, #35	@ 0x23
 80037b4:	221f      	movs	r2, #31
 80037b6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ba:	43da      	mvns	r2, r3
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	400a      	ands	r2, r1
 80037c2:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80037ca:	683b      	ldr	r3, [r7, #0]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	b29b      	uxth	r3, r3
 80037d0:	4618      	mov	r0, r3
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	4613      	mov	r3, r2
 80037d8:	009b      	lsls	r3, r3, #2
 80037da:	4413      	add	r3, r2
 80037dc:	3b23      	subs	r3, #35	@ 0x23
 80037de:	fa00 f203 	lsl.w	r2, r0, r3
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	631a      	str	r2, [r3, #48]	@ 0x30
 80037ea:	e025      	b.n	8003838 <HAL_ADC_ConfigChannel+0x224>
 80037ec:	0800fcec 	.word	0x0800fcec
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685a      	ldr	r2, [r3, #4]
 80037fa:	4613      	mov	r3, r2
 80037fc:	009b      	lsls	r3, r3, #2
 80037fe:	4413      	add	r3, r2
 8003800:	3b41      	subs	r3, #65	@ 0x41
 8003802:	221f      	movs	r2, #31
 8003804:	fa02 f303 	lsl.w	r3, r2, r3
 8003808:	43da      	mvns	r2, r3
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	400a      	ands	r2, r1
 8003810:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	b29b      	uxth	r3, r3
 800381e:	4618      	mov	r0, r3
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	685a      	ldr	r2, [r3, #4]
 8003824:	4613      	mov	r3, r2
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	4413      	add	r3, r2
 800382a:	3b41      	subs	r3, #65	@ 0x41
 800382c:	fa00 f203 	lsl.w	r2, r0, r3
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003838:	4b21      	ldr	r3, [pc, #132]	@ (80038c0 <HAL_ADC_ConfigChannel+0x2ac>)
 800383a:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4a20      	ldr	r2, [pc, #128]	@ (80038c4 <HAL_ADC_ConfigChannel+0x2b0>)
 8003842:	4293      	cmp	r3, r2
 8003844:	d109      	bne.n	800385a <HAL_ADC_ConfigChannel+0x246>
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b12      	cmp	r3, #18
 800384c:	d105      	bne.n	800385a <HAL_ADC_ConfigChannel+0x246>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4a19      	ldr	r2, [pc, #100]	@ (80038c4 <HAL_ADC_ConfigChannel+0x2b0>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d123      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x298>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2b10      	cmp	r3, #16
 800386a:	d003      	beq.n	8003874 <HAL_ADC_ConfigChannel+0x260>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2b11      	cmp	r3, #17
 8003872:	d11b      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x298>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	685b      	ldr	r3, [r3, #4]
 8003878:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2b10      	cmp	r3, #16
 8003886:	d111      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x298>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003888:	4b0f      	ldr	r3, [pc, #60]	@ (80038c8 <HAL_ADC_ConfigChannel+0x2b4>)
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a0f      	ldr	r2, [pc, #60]	@ (80038cc <HAL_ADC_ConfigChannel+0x2b8>)
 800388e:	fba2 2303 	umull	r2, r3, r2, r3
 8003892:	0c9a      	lsrs	r2, r3, #18
 8003894:	4613      	mov	r3, r2
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	4413      	add	r3, r2
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800389e:	e002      	b.n	80038a6 <HAL_ADC_ConfigChannel+0x292>
      {
        counter--;
 80038a0:	68bb      	ldr	r3, [r7, #8]
 80038a2:	3b01      	subs	r3, #1
 80038a4:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80038a6:	68bb      	ldr	r3, [r7, #8]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d1f9      	bne.n	80038a0 <HAL_ADC_ConfigChannel+0x28c>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40012300 	.word	0x40012300
 80038c4:	40012000 	.word	0x40012000
 80038c8:	20000000 	.word	0x20000000
 80038cc:	431bde83 	.word	0x431bde83

080038d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b084      	sub	sp, #16
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80038d8:	4b7f      	ldr	r3, [pc, #508]	@ (8003ad8 <ADC_Init+0x208>)
 80038da:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	685b      	ldr	r3, [r3, #4]
 80038e0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	431a      	orrs	r2, r3
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003904:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	6859      	ldr	r1, [r3, #4]
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	691b      	ldr	r3, [r3, #16]
 8003910:	021a      	lsls	r2, r3, #8
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	430a      	orrs	r2, r1
 8003918:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	685a      	ldr	r2, [r3, #4]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003928:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	6859      	ldr	r1, [r3, #4]
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	689a      	ldr	r2, [r3, #8]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	430a      	orrs	r2, r1
 800393a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	689a      	ldr	r2, [r3, #8]
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800394a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	6899      	ldr	r1, [r3, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	430a      	orrs	r2, r1
 800395c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003962:	4a5e      	ldr	r2, [pc, #376]	@ (8003adc <ADC_Init+0x20c>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d022      	beq.n	80039ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	689a      	ldr	r2, [r3, #8]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003976:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	6899      	ldr	r1, [r3, #8]
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	430a      	orrs	r2, r1
 8003988:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	689a      	ldr	r2, [r3, #8]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003998:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	6899      	ldr	r1, [r3, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	430a      	orrs	r2, r1
 80039aa:	609a      	str	r2, [r3, #8]
 80039ac:	e00f      	b.n	80039ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	689a      	ldr	r2, [r3, #8]
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80039bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	689a      	ldr	r2, [r3, #8]
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80039cc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0202 	bic.w	r2, r2, #2
 80039dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6899      	ldr	r1, [r3, #8]
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	7e1b      	ldrb	r3, [r3, #24]
 80039e8:	005a      	lsls	r2, r3, #1
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	430a      	orrs	r2, r1
 80039f0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d028      	beq.n	8003a4e <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d003      	beq.n	8003a0c <ADC_Init+0x13c>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a08:	2b08      	cmp	r3, #8
 8003a0a:	d904      	bls.n	8003a16 <ADC_Init+0x146>
 8003a0c:	f44f 61f5 	mov.w	r1, #1960	@ 0x7a8
 8003a10:	4833      	ldr	r0, [pc, #204]	@ (8003ae0 <ADC_Init+0x210>)
 8003a12:	f7fe fe7d 	bl	8002710 <assert_failed>

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	685a      	ldr	r2, [r3, #4]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a24:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	685a      	ldr	r2, [r3, #4]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003a34:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6859      	ldr	r1, [r3, #4]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a40:	3b01      	subs	r3, #1
 8003a42:	035a      	lsls	r2, r3, #13
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	430a      	orrs	r2, r1
 8003a4a:	605a      	str	r2, [r3, #4]
 8003a4c:	e007      	b.n	8003a5e <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a5c:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003a6c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	3b01      	subs	r3, #1
 8003a7a:	051a      	lsls	r2, r3, #20
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	689a      	ldr	r2, [r3, #8]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003a92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	6899      	ldr	r1, [r3, #8]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003aa0:	025a      	lsls	r2, r3, #9
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	689a      	ldr	r2, [r3, #8]
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ab8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	6899      	ldr	r1, [r3, #8]
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	695b      	ldr	r3, [r3, #20]
 8003ac4:	029a      	lsls	r2, r3, #10
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	430a      	orrs	r2, r1
 8003acc:	609a      	str	r2, [r3, #8]
}
 8003ace:	bf00      	nop
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40012300 	.word	0x40012300
 8003adc:	0f000001 	.word	0x0f000001
 8003ae0:	0800fcec 	.word	0x0800fcec

08003ae4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ae4:	b480      	push	{r7}
 8003ae6:	b085      	sub	sp, #20
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003af4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b28 <__NVIC_SetPriorityGrouping+0x44>)
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003afa:	68ba      	ldr	r2, [r7, #8]
 8003afc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b00:	4013      	ands	r3, r2
 8003b02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b08:	68bb      	ldr	r3, [r7, #8]
 8003b0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b0c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b10:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b16:	4a04      	ldr	r2, [pc, #16]	@ (8003b28 <__NVIC_SetPriorityGrouping+0x44>)
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	60d3      	str	r3, [r2, #12]
}
 8003b1c:	bf00      	nop
 8003b1e:	3714      	adds	r7, #20
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	e000ed00 	.word	0xe000ed00

08003b2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b30:	4b04      	ldr	r3, [pc, #16]	@ (8003b44 <__NVIC_GetPriorityGrouping+0x18>)
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	0a1b      	lsrs	r3, r3, #8
 8003b36:	f003 0307 	and.w	r3, r3, #7
}
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	46bd      	mov	sp, r7
 8003b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b42:	4770      	bx	lr
 8003b44:	e000ed00 	.word	0xe000ed00

08003b48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	4603      	mov	r3, r0
 8003b50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	db0b      	blt.n	8003b72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b5a:	79fb      	ldrb	r3, [r7, #7]
 8003b5c:	f003 021f 	and.w	r2, r3, #31
 8003b60:	4907      	ldr	r1, [pc, #28]	@ (8003b80 <__NVIC_EnableIRQ+0x38>)
 8003b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b66:	095b      	lsrs	r3, r3, #5
 8003b68:	2001      	movs	r0, #1
 8003b6a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	e000e100 	.word	0xe000e100

08003b84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	6039      	str	r1, [r7, #0]
 8003b8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	db0a      	blt.n	8003bae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	b2da      	uxtb	r2, r3
 8003b9c:	490c      	ldr	r1, [pc, #48]	@ (8003bd0 <__NVIC_SetPriority+0x4c>)
 8003b9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ba2:	0112      	lsls	r2, r2, #4
 8003ba4:	b2d2      	uxtb	r2, r2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bac:	e00a      	b.n	8003bc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	b2da      	uxtb	r2, r3
 8003bb2:	4908      	ldr	r1, [pc, #32]	@ (8003bd4 <__NVIC_SetPriority+0x50>)
 8003bb4:	79fb      	ldrb	r3, [r7, #7]
 8003bb6:	f003 030f 	and.w	r3, r3, #15
 8003bba:	3b04      	subs	r3, #4
 8003bbc:	0112      	lsls	r2, r2, #4
 8003bbe:	b2d2      	uxtb	r2, r2
 8003bc0:	440b      	add	r3, r1
 8003bc2:	761a      	strb	r2, [r3, #24]
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	e000e100 	.word	0xe000e100
 8003bd4:	e000ed00 	.word	0xe000ed00

08003bd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b089      	sub	sp, #36	@ 0x24
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	f003 0307 	and.w	r3, r3, #7
 8003bea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003bec:	69fb      	ldr	r3, [r7, #28]
 8003bee:	f1c3 0307 	rsb	r3, r3, #7
 8003bf2:	2b04      	cmp	r3, #4
 8003bf4:	bf28      	it	cs
 8003bf6:	2304      	movcs	r3, #4
 8003bf8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003bfa:	69fb      	ldr	r3, [r7, #28]
 8003bfc:	3304      	adds	r3, #4
 8003bfe:	2b06      	cmp	r3, #6
 8003c00:	d902      	bls.n	8003c08 <NVIC_EncodePriority+0x30>
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	3b03      	subs	r3, #3
 8003c06:	e000      	b.n	8003c0a <NVIC_EncodePriority+0x32>
 8003c08:	2300      	movs	r3, #0
 8003c0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c10:	69bb      	ldr	r3, [r7, #24]
 8003c12:	fa02 f303 	lsl.w	r3, r2, r3
 8003c16:	43da      	mvns	r2, r3
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	401a      	ands	r2, r3
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c20:	f04f 31ff 	mov.w	r1, #4294967295
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	fa01 f303 	lsl.w	r3, r1, r3
 8003c2a:	43d9      	mvns	r1, r3
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c30:	4313      	orrs	r3, r2
         );
}
 8003c32:	4618      	mov	r0, r3
 8003c34:	3724      	adds	r7, #36	@ 0x24
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
	...

08003c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	b082      	sub	sp, #8
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2b07      	cmp	r3, #7
 8003c4c:	d00f      	beq.n	8003c6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2b06      	cmp	r3, #6
 8003c52:	d00c      	beq.n	8003c6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2b05      	cmp	r3, #5
 8003c58:	d009      	beq.n	8003c6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2b04      	cmp	r3, #4
 8003c5e:	d006      	beq.n	8003c6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2b03      	cmp	r3, #3
 8003c64:	d003      	beq.n	8003c6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003c66:	2190      	movs	r1, #144	@ 0x90
 8003c68:	4804      	ldr	r0, [pc, #16]	@ (8003c7c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003c6a:	f7fe fd51 	bl	8002710 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f7ff ff38 	bl	8003ae4 <__NVIC_SetPriorityGrouping>
}
 8003c74:	bf00      	nop
 8003c76:	3708      	adds	r7, #8
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	0800fd24 	.word	0x0800fd24

08003c80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b086      	sub	sp, #24
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	60b9      	str	r1, [r7, #8]
 8003c8a:	607a      	str	r2, [r7, #4]
 8003c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2b0f      	cmp	r3, #15
 8003c96:	d903      	bls.n	8003ca0 <HAL_NVIC_SetPriority+0x20>
 8003c98:	21a8      	movs	r1, #168	@ 0xa8
 8003c9a:	480e      	ldr	r0, [pc, #56]	@ (8003cd4 <HAL_NVIC_SetPriority+0x54>)
 8003c9c:	f7fe fd38 	bl	8002710 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	2b0f      	cmp	r3, #15
 8003ca4:	d903      	bls.n	8003cae <HAL_NVIC_SetPriority+0x2e>
 8003ca6:	21a9      	movs	r1, #169	@ 0xa9
 8003ca8:	480a      	ldr	r0, [pc, #40]	@ (8003cd4 <HAL_NVIC_SetPriority+0x54>)
 8003caa:	f7fe fd31 	bl	8002710 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cae:	f7ff ff3d 	bl	8003b2c <__NVIC_GetPriorityGrouping>
 8003cb2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cb4:	687a      	ldr	r2, [r7, #4]
 8003cb6:	68b9      	ldr	r1, [r7, #8]
 8003cb8:	6978      	ldr	r0, [r7, #20]
 8003cba:	f7ff ff8d 	bl	8003bd8 <NVIC_EncodePriority>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cc4:	4611      	mov	r1, r2
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	f7ff ff5c 	bl	8003b84 <__NVIC_SetPriority>
}
 8003ccc:	bf00      	nop
 8003cce:	3718      	adds	r7, #24
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	bd80      	pop	{r7, pc}
 8003cd4:	0800fd24 	.word	0x0800fd24

08003cd8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	4603      	mov	r3, r0
 8003ce0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	da03      	bge.n	8003cf2 <HAL_NVIC_EnableIRQ+0x1a>
 8003cea:	21bc      	movs	r1, #188	@ 0xbc
 8003cec:	4805      	ldr	r0, [pc, #20]	@ (8003d04 <HAL_NVIC_EnableIRQ+0x2c>)
 8003cee:	f7fe fd0f 	bl	8002710 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	f7ff ff26 	bl	8003b48 <__NVIC_EnableIRQ>
}
 8003cfc:	bf00      	nop
 8003cfe:	3708      	adds	r7, #8
 8003d00:	46bd      	mov	sp, r7
 8003d02:	bd80      	pop	{r7, pc}
 8003d04:	0800fd24 	.word	0x0800fd24

08003d08 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d10:	2300      	movs	r3, #0
 8003d12:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d14:	f7ff f904 	bl	8002f20 <HAL_GetTick>
 8003d18:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d101      	bne.n	8003d24 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	e203      	b.n	800412c <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	4a8b      	ldr	r2, [pc, #556]	@ (8003f58 <HAL_DMA_Init+0x250>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d04e      	beq.n	8003dcc <HAL_DMA_Init+0xc4>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4a8a      	ldr	r2, [pc, #552]	@ (8003f5c <HAL_DMA_Init+0x254>)
 8003d34:	4293      	cmp	r3, r2
 8003d36:	d049      	beq.n	8003dcc <HAL_DMA_Init+0xc4>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	4a88      	ldr	r2, [pc, #544]	@ (8003f60 <HAL_DMA_Init+0x258>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d044      	beq.n	8003dcc <HAL_DMA_Init+0xc4>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a87      	ldr	r2, [pc, #540]	@ (8003f64 <HAL_DMA_Init+0x25c>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d03f      	beq.n	8003dcc <HAL_DMA_Init+0xc4>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4a85      	ldr	r2, [pc, #532]	@ (8003f68 <HAL_DMA_Init+0x260>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d03a      	beq.n	8003dcc <HAL_DMA_Init+0xc4>
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	4a84      	ldr	r2, [pc, #528]	@ (8003f6c <HAL_DMA_Init+0x264>)
 8003d5c:	4293      	cmp	r3, r2
 8003d5e:	d035      	beq.n	8003dcc <HAL_DMA_Init+0xc4>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	4a82      	ldr	r2, [pc, #520]	@ (8003f70 <HAL_DMA_Init+0x268>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d030      	beq.n	8003dcc <HAL_DMA_Init+0xc4>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a81      	ldr	r2, [pc, #516]	@ (8003f74 <HAL_DMA_Init+0x26c>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d02b      	beq.n	8003dcc <HAL_DMA_Init+0xc4>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a7f      	ldr	r2, [pc, #508]	@ (8003f78 <HAL_DMA_Init+0x270>)
 8003d7a:	4293      	cmp	r3, r2
 8003d7c:	d026      	beq.n	8003dcc <HAL_DMA_Init+0xc4>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a7e      	ldr	r2, [pc, #504]	@ (8003f7c <HAL_DMA_Init+0x274>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d021      	beq.n	8003dcc <HAL_DMA_Init+0xc4>
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a7c      	ldr	r2, [pc, #496]	@ (8003f80 <HAL_DMA_Init+0x278>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d01c      	beq.n	8003dcc <HAL_DMA_Init+0xc4>
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4a7b      	ldr	r2, [pc, #492]	@ (8003f84 <HAL_DMA_Init+0x27c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d017      	beq.n	8003dcc <HAL_DMA_Init+0xc4>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a79      	ldr	r2, [pc, #484]	@ (8003f88 <HAL_DMA_Init+0x280>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d012      	beq.n	8003dcc <HAL_DMA_Init+0xc4>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a78      	ldr	r2, [pc, #480]	@ (8003f8c <HAL_DMA_Init+0x284>)
 8003dac:	4293      	cmp	r3, r2
 8003dae:	d00d      	beq.n	8003dcc <HAL_DMA_Init+0xc4>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a76      	ldr	r2, [pc, #472]	@ (8003f90 <HAL_DMA_Init+0x288>)
 8003db6:	4293      	cmp	r3, r2
 8003db8:	d008      	beq.n	8003dcc <HAL_DMA_Init+0xc4>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	4a75      	ldr	r2, [pc, #468]	@ (8003f94 <HAL_DMA_Init+0x28c>)
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d003      	beq.n	8003dcc <HAL_DMA_Init+0xc4>
 8003dc4:	21b7      	movs	r1, #183	@ 0xb7
 8003dc6:	4874      	ldr	r0, [pc, #464]	@ (8003f98 <HAL_DMA_Init+0x290>)
 8003dc8:	f7fe fca2 	bl	8002710 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d026      	beq.n	8003e22 <HAL_DMA_Init+0x11a>
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	685b      	ldr	r3, [r3, #4]
 8003dd8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003ddc:	d021      	beq.n	8003e22 <HAL_DMA_Init+0x11a>
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003de6:	d01c      	beq.n	8003e22 <HAL_DMA_Init+0x11a>
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8003df0:	d017      	beq.n	8003e22 <HAL_DMA_Init+0x11a>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003dfa:	d012      	beq.n	8003e22 <HAL_DMA_Init+0x11a>
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	685b      	ldr	r3, [r3, #4]
 8003e00:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 8003e04:	d00d      	beq.n	8003e22 <HAL_DMA_Init+0x11a>
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	685b      	ldr	r3, [r3, #4]
 8003e0a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003e0e:	d008      	beq.n	8003e22 <HAL_DMA_Init+0x11a>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 8003e18:	d003      	beq.n	8003e22 <HAL_DMA_Init+0x11a>
 8003e1a:	21b8      	movs	r1, #184	@ 0xb8
 8003e1c:	485e      	ldr	r0, [pc, #376]	@ (8003f98 <HAL_DMA_Init+0x290>)
 8003e1e:	f7fe fc77 	bl	8002710 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d00b      	beq.n	8003e42 <HAL_DMA_Init+0x13a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	2b40      	cmp	r3, #64	@ 0x40
 8003e30:	d007      	beq.n	8003e42 <HAL_DMA_Init+0x13a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	2b80      	cmp	r3, #128	@ 0x80
 8003e38:	d003      	beq.n	8003e42 <HAL_DMA_Init+0x13a>
 8003e3a:	21b9      	movs	r1, #185	@ 0xb9
 8003e3c:	4856      	ldr	r0, [pc, #344]	@ (8003f98 <HAL_DMA_Init+0x290>)
 8003e3e:	f7fe fc67 	bl	8002710 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	68db      	ldr	r3, [r3, #12]
 8003e46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003e4a:	d007      	beq.n	8003e5c <HAL_DMA_Init+0x154>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	68db      	ldr	r3, [r3, #12]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d003      	beq.n	8003e5c <HAL_DMA_Init+0x154>
 8003e54:	21ba      	movs	r1, #186	@ 0xba
 8003e56:	4850      	ldr	r0, [pc, #320]	@ (8003f98 <HAL_DMA_Init+0x290>)
 8003e58:	f7fe fc5a 	bl	8002710 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003e64:	d007      	beq.n	8003e76 <HAL_DMA_Init+0x16e>
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	691b      	ldr	r3, [r3, #16]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d003      	beq.n	8003e76 <HAL_DMA_Init+0x16e>
 8003e6e:	21bb      	movs	r1, #187	@ 0xbb
 8003e70:	4849      	ldr	r0, [pc, #292]	@ (8003f98 <HAL_DMA_Init+0x290>)
 8003e72:	f7fe fc4d 	bl	8002710 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d00d      	beq.n	8003e9a <HAL_DMA_Init+0x192>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	695b      	ldr	r3, [r3, #20]
 8003e82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003e86:	d008      	beq.n	8003e9a <HAL_DMA_Init+0x192>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e90:	d003      	beq.n	8003e9a <HAL_DMA_Init+0x192>
 8003e92:	21bc      	movs	r1, #188	@ 0xbc
 8003e94:	4840      	ldr	r0, [pc, #256]	@ (8003f98 <HAL_DMA_Init+0x290>)
 8003e96:	f7fe fc3b 	bl	8002710 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	699b      	ldr	r3, [r3, #24]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d00d      	beq.n	8003ebe <HAL_DMA_Init+0x1b6>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	699b      	ldr	r3, [r3, #24]
 8003ea6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eaa:	d008      	beq.n	8003ebe <HAL_DMA_Init+0x1b6>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003eb4:	d003      	beq.n	8003ebe <HAL_DMA_Init+0x1b6>
 8003eb6:	21bd      	movs	r1, #189	@ 0xbd
 8003eb8:	4837      	ldr	r0, [pc, #220]	@ (8003f98 <HAL_DMA_Init+0x290>)
 8003eba:	f7fe fc29 	bl	8002710 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	69db      	ldr	r3, [r3, #28]
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00c      	beq.n	8003ee0 <HAL_DMA_Init+0x1d8>
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	69db      	ldr	r3, [r3, #28]
 8003eca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ece:	d007      	beq.n	8003ee0 <HAL_DMA_Init+0x1d8>
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	2b20      	cmp	r3, #32
 8003ed6:	d003      	beq.n	8003ee0 <HAL_DMA_Init+0x1d8>
 8003ed8:	21be      	movs	r1, #190	@ 0xbe
 8003eda:	482f      	ldr	r0, [pc, #188]	@ (8003f98 <HAL_DMA_Init+0x290>)
 8003edc:	f7fe fc18 	bl	8002710 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6a1b      	ldr	r3, [r3, #32]
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d012      	beq.n	8003f0e <HAL_DMA_Init+0x206>
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003ef0:	d00d      	beq.n	8003f0e <HAL_DMA_Init+0x206>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6a1b      	ldr	r3, [r3, #32]
 8003ef6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003efa:	d008      	beq.n	8003f0e <HAL_DMA_Init+0x206>
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003f04:	d003      	beq.n	8003f0e <HAL_DMA_Init+0x206>
 8003f06:	21bf      	movs	r1, #191	@ 0xbf
 8003f08:	4823      	ldr	r0, [pc, #140]	@ (8003f98 <HAL_DMA_Init+0x290>)
 8003f0a:	f7fe fc01 	bl	8002710 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d007      	beq.n	8003f26 <HAL_DMA_Init+0x21e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d003      	beq.n	8003f26 <HAL_DMA_Init+0x21e>
 8003f1e:	21c0      	movs	r1, #192	@ 0xc0
 8003f20:	481d      	ldr	r0, [pc, #116]	@ (8003f98 <HAL_DMA_Init+0x290>)
 8003f22:	f7fe fbf5 	bl	8002710 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d064      	beq.n	8003ff8 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d032      	beq.n	8003f9c <HAL_DMA_Init+0x294>
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f3a:	2b01      	cmp	r3, #1
 8003f3c:	d02e      	beq.n	8003f9c <HAL_DMA_Init+0x294>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f42:	2b02      	cmp	r3, #2
 8003f44:	d02a      	beq.n	8003f9c <HAL_DMA_Init+0x294>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d026      	beq.n	8003f9c <HAL_DMA_Init+0x294>
 8003f4e:	21c5      	movs	r1, #197	@ 0xc5
 8003f50:	4811      	ldr	r0, [pc, #68]	@ (8003f98 <HAL_DMA_Init+0x290>)
 8003f52:	f7fe fbdd 	bl	8002710 <assert_failed>
 8003f56:	e021      	b.n	8003f9c <HAL_DMA_Init+0x294>
 8003f58:	40026010 	.word	0x40026010
 8003f5c:	40026028 	.word	0x40026028
 8003f60:	40026040 	.word	0x40026040
 8003f64:	40026058 	.word	0x40026058
 8003f68:	40026070 	.word	0x40026070
 8003f6c:	40026088 	.word	0x40026088
 8003f70:	400260a0 	.word	0x400260a0
 8003f74:	400260b8 	.word	0x400260b8
 8003f78:	40026410 	.word	0x40026410
 8003f7c:	40026428 	.word	0x40026428
 8003f80:	40026440 	.word	0x40026440
 8003f84:	40026458 	.word	0x40026458
 8003f88:	40026470 	.word	0x40026470
 8003f8c:	40026488 	.word	0x40026488
 8003f90:	400264a0 	.word	0x400264a0
 8003f94:	400264b8 	.word	0x400264b8
 8003f98:	0800fd60 	.word	0x0800fd60
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d012      	beq.n	8003fca <HAL_DMA_Init+0x2c2>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fa8:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003fac:	d00d      	beq.n	8003fca <HAL_DMA_Init+0x2c2>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003fb6:	d008      	beq.n	8003fca <HAL_DMA_Init+0x2c2>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fbc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003fc0:	d003      	beq.n	8003fca <HAL_DMA_Init+0x2c2>
 8003fc2:	21c6      	movs	r1, #198	@ 0xc6
 8003fc4:	485b      	ldr	r0, [pc, #364]	@ (8004134 <HAL_DMA_Init+0x42c>)
 8003fc6:	f7fe fba3 	bl	8002710 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d012      	beq.n	8003ff8 <HAL_DMA_Init+0x2f0>
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003fda:	d00d      	beq.n	8003ff8 <HAL_DMA_Init+0x2f0>
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003fe4:	d008      	beq.n	8003ff8 <HAL_DMA_Init+0x2f0>
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fea:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003fee:	d003      	beq.n	8003ff8 <HAL_DMA_Init+0x2f0>
 8003ff0:	21c7      	movs	r1, #199	@ 0xc7
 8003ff2:	4850      	ldr	r0, [pc, #320]	@ (8004134 <HAL_DMA_Init+0x42c>)
 8003ff4:	f7fe fb8c 	bl	8002710 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2202      	movs	r2, #2
 8003ffc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681a      	ldr	r2, [r3, #0]
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f022 0201 	bic.w	r2, r2, #1
 8004016:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004018:	e00f      	b.n	800403a <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800401a:	f7fe ff81 	bl	8002f20 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	693b      	ldr	r3, [r7, #16]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b05      	cmp	r3, #5
 8004026:	d908      	bls.n	800403a <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2220      	movs	r2, #32
 800402c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2203      	movs	r2, #3
 8004032:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e078      	b.n	800412c <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b00      	cmp	r3, #0
 8004046:	d1e8      	bne.n	800401a <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004050:	697a      	ldr	r2, [r7, #20]
 8004052:	4b39      	ldr	r3, [pc, #228]	@ (8004138 <HAL_DMA_Init+0x430>)
 8004054:	4013      	ands	r3, r2
 8004056:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004066:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
 800406c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004072:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	699b      	ldr	r3, [r3, #24]
 8004078:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800407e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a1b      	ldr	r3, [r3, #32]
 8004084:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004086:	697a      	ldr	r2, [r7, #20]
 8004088:	4313      	orrs	r3, r2
 800408a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004090:	2b04      	cmp	r3, #4
 8004092:	d107      	bne.n	80040a4 <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409c:	4313      	orrs	r3, r2
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	697a      	ldr	r2, [r7, #20]
 80040aa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	f023 0307 	bic.w	r3, r3, #7
 80040ba:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	4313      	orrs	r3, r2
 80040c4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d117      	bne.n	80040fe <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040d2:	697a      	ldr	r2, [r7, #20]
 80040d4:	4313      	orrs	r3, r2
 80040d6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d00e      	beq.n	80040fe <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040e0:	6878      	ldr	r0, [r7, #4]
 80040e2:	f000 fa7f 	bl	80045e4 <DMA_CheckFifoParam>
 80040e6:	4603      	mov	r3, r0
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d008      	beq.n	80040fe <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2240      	movs	r2, #64	@ 0x40
 80040f0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	2201      	movs	r2, #1
 80040f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80040fa:	2301      	movs	r3, #1
 80040fc:	e016      	b.n	800412c <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	697a      	ldr	r2, [r7, #20]
 8004104:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 fa36 	bl	8004578 <DMA_CalcBaseAndBitshift>
 800410c:	4603      	mov	r3, r0
 800410e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004114:	223f      	movs	r2, #63	@ 0x3f
 8004116:	409a      	lsls	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	2201      	movs	r2, #1
 8004126:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3718      	adds	r7, #24
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}
 8004134:	0800fd60 	.word	0x0800fd60
 8004138:	f010803f 	.word	0xf010803f

0800413c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
 8004148:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800414a:	2300      	movs	r3, #0
 800414c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004152:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d003      	beq.n	8004162 <HAL_DMA_Start_IT+0x26>
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004160:	d304      	bcc.n	800416c <HAL_DMA_Start_IT+0x30>
 8004162:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8004166:	4827      	ldr	r0, [pc, #156]	@ (8004204 <HAL_DMA_Start_IT+0xc8>)
 8004168:	f7fe fad2 	bl	8002710 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8004172:	2b01      	cmp	r3, #1
 8004174:	d101      	bne.n	800417a <HAL_DMA_Start_IT+0x3e>
 8004176:	2302      	movs	r3, #2
 8004178:	e040      	b.n	80041fc <HAL_DMA_Start_IT+0xc0>
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2201      	movs	r2, #1
 800417e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b01      	cmp	r3, #1
 800418c:	d12f      	bne.n	80041ee <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	2202      	movs	r2, #2
 8004192:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2200      	movs	r2, #0
 800419a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	687a      	ldr	r2, [r7, #4]
 80041a0:	68b9      	ldr	r1, [r7, #8]
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f000 f9ba 	bl	800451c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ac:	223f      	movs	r2, #63	@ 0x3f
 80041ae:	409a      	lsls	r2, r3
 80041b0:	693b      	ldr	r3, [r7, #16]
 80041b2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f042 0216 	orr.w	r2, r2, #22
 80041c2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d007      	beq.n	80041dc <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f042 0208 	orr.w	r2, r2, #8
 80041da:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	681a      	ldr	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f042 0201 	orr.w	r2, r2, #1
 80041ea:	601a      	str	r2, [r3, #0]
 80041ec:	e005      	b.n	80041fa <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041f6:	2302      	movs	r3, #2
 80041f8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3718      	adds	r7, #24
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	0800fd60 	.word	0x0800fd60

08004208 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004210:	2300      	movs	r3, #0
 8004212:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004214:	4b8e      	ldr	r3, [pc, #568]	@ (8004450 <HAL_DMA_IRQHandler+0x248>)
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	4a8e      	ldr	r2, [pc, #568]	@ (8004454 <HAL_DMA_IRQHandler+0x24c>)
 800421a:	fba2 2303 	umull	r2, r3, r2, r3
 800421e:	0a9b      	lsrs	r3, r3, #10
 8004220:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004226:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004232:	2208      	movs	r2, #8
 8004234:	409a      	lsls	r2, r3
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	4013      	ands	r3, r2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d01a      	beq.n	8004274 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 0304 	and.w	r3, r3, #4
 8004248:	2b00      	cmp	r3, #0
 800424a:	d013      	beq.n	8004274 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	681a      	ldr	r2, [r3, #0]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f022 0204 	bic.w	r2, r2, #4
 800425a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004260:	2208      	movs	r2, #8
 8004262:	409a      	lsls	r2, r3
 8004264:	693b      	ldr	r3, [r7, #16]
 8004266:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800426c:	f043 0201 	orr.w	r2, r3, #1
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004278:	2201      	movs	r2, #1
 800427a:	409a      	lsls	r2, r3
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4013      	ands	r3, r2
 8004280:	2b00      	cmp	r3, #0
 8004282:	d012      	beq.n	80042aa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	695b      	ldr	r3, [r3, #20]
 800428a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800428e:	2b00      	cmp	r3, #0
 8004290:	d00b      	beq.n	80042aa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004296:	2201      	movs	r2, #1
 8004298:	409a      	lsls	r2, r3
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042a2:	f043 0202 	orr.w	r2, r3, #2
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042ae:	2204      	movs	r2, #4
 80042b0:	409a      	lsls	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	4013      	ands	r3, r2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d012      	beq.n	80042e0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0302 	and.w	r3, r3, #2
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d00b      	beq.n	80042e0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042cc:	2204      	movs	r2, #4
 80042ce:	409a      	lsls	r2, r3
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80042d8:	f043 0204 	orr.w	r2, r3, #4
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80042e4:	2210      	movs	r2, #16
 80042e6:	409a      	lsls	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	4013      	ands	r3, r2
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d043      	beq.n	8004378 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	f003 0308 	and.w	r3, r3, #8
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d03c      	beq.n	8004378 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004302:	2210      	movs	r2, #16
 8004304:	409a      	lsls	r2, r3
 8004306:	693b      	ldr	r3, [r7, #16]
 8004308:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004314:	2b00      	cmp	r3, #0
 8004316:	d018      	beq.n	800434a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d108      	bne.n	8004338 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800432a:	2b00      	cmp	r3, #0
 800432c:	d024      	beq.n	8004378 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004332:	6878      	ldr	r0, [r7, #4]
 8004334:	4798      	blx	r3
 8004336:	e01f      	b.n	8004378 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800433c:	2b00      	cmp	r3, #0
 800433e:	d01b      	beq.n	8004378 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004344:	6878      	ldr	r0, [r7, #4]
 8004346:	4798      	blx	r3
 8004348:	e016      	b.n	8004378 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004354:	2b00      	cmp	r3, #0
 8004356:	d107      	bne.n	8004368 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f022 0208 	bic.w	r2, r2, #8
 8004366:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800436c:	2b00      	cmp	r3, #0
 800436e:	d003      	beq.n	8004378 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004374:	6878      	ldr	r0, [r7, #4]
 8004376:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800437c:	2220      	movs	r2, #32
 800437e:	409a      	lsls	r2, r3
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	4013      	ands	r3, r2
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 808f 	beq.w	80044a8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	f003 0310 	and.w	r3, r3, #16
 8004394:	2b00      	cmp	r3, #0
 8004396:	f000 8087 	beq.w	80044a8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800439e:	2220      	movs	r2, #32
 80043a0:	409a      	lsls	r2, r3
 80043a2:	693b      	ldr	r3, [r7, #16]
 80043a4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043ac:	b2db      	uxtb	r3, r3
 80043ae:	2b05      	cmp	r3, #5
 80043b0:	d136      	bne.n	8004420 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	681a      	ldr	r2, [r3, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f022 0216 	bic.w	r2, r2, #22
 80043c0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	695a      	ldr	r2, [r3, #20]
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80043d0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d103      	bne.n	80043e2 <HAL_DMA_IRQHandler+0x1da>
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d007      	beq.n	80043f2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	f022 0208 	bic.w	r2, r2, #8
 80043f0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80043f6:	223f      	movs	r2, #63	@ 0x3f
 80043f8:	409a      	lsls	r2, r3
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004412:	2b00      	cmp	r3, #0
 8004414:	d07e      	beq.n	8004514 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800441a:	6878      	ldr	r0, [r7, #4]
 800441c:	4798      	blx	r3
        }
        return;
 800441e:	e079      	b.n	8004514 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d01d      	beq.n	800446a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004438:	2b00      	cmp	r3, #0
 800443a:	d10d      	bne.n	8004458 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004440:	2b00      	cmp	r3, #0
 8004442:	d031      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004448:	6878      	ldr	r0, [r7, #4]
 800444a:	4798      	blx	r3
 800444c:	e02c      	b.n	80044a8 <HAL_DMA_IRQHandler+0x2a0>
 800444e:	bf00      	nop
 8004450:	20000000 	.word	0x20000000
 8004454:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800445c:	2b00      	cmp	r3, #0
 800445e:	d023      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004464:	6878      	ldr	r0, [r7, #4]
 8004466:	4798      	blx	r3
 8004468:	e01e      	b.n	80044a8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004474:	2b00      	cmp	r3, #0
 8004476:	d10f      	bne.n	8004498 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	f022 0210 	bic.w	r2, r2, #16
 8004486:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2200      	movs	r2, #0
 8004494:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800449c:	2b00      	cmp	r3, #0
 800449e:	d003      	beq.n	80044a8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044a4:	6878      	ldr	r0, [r7, #4]
 80044a6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d032      	beq.n	8004516 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d022      	beq.n	8004502 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	2205      	movs	r2, #5
 80044c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681a      	ldr	r2, [r3, #0]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f022 0201 	bic.w	r2, r2, #1
 80044d2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	3301      	adds	r3, #1
 80044d8:	60bb      	str	r3, [r7, #8]
 80044da:	697a      	ldr	r2, [r7, #20]
 80044dc:	429a      	cmp	r2, r3
 80044de:	d307      	bcc.n	80044f0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0301 	and.w	r3, r3, #1
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1f2      	bne.n	80044d4 <HAL_DMA_IRQHandler+0x2cc>
 80044ee:	e000      	b.n	80044f2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80044f0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	2200      	movs	r2, #0
 80044fe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004506:	2b00      	cmp	r3, #0
 8004508:	d005      	beq.n	8004516 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	4798      	blx	r3
 8004512:	e000      	b.n	8004516 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004514:	bf00      	nop
    }
  }
}
 8004516:	3718      	adds	r7, #24
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800451c:	b480      	push	{r7}
 800451e:	b085      	sub	sp, #20
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]
 8004528:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	681a      	ldr	r2, [r3, #0]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004538:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	683a      	ldr	r2, [r7, #0]
 8004540:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	2b40      	cmp	r3, #64	@ 0x40
 8004548:	d108      	bne.n	800455c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	68ba      	ldr	r2, [r7, #8]
 8004558:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800455a:	e007      	b.n	800456c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	687a      	ldr	r2, [r7, #4]
 800456a:	60da      	str	r2, [r3, #12]
}
 800456c:	bf00      	nop
 800456e:	3714      	adds	r7, #20
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004578:	b480      	push	{r7}
 800457a:	b085      	sub	sp, #20
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	b2db      	uxtb	r3, r3
 8004586:	3b10      	subs	r3, #16
 8004588:	4a14      	ldr	r2, [pc, #80]	@ (80045dc <DMA_CalcBaseAndBitshift+0x64>)
 800458a:	fba2 2303 	umull	r2, r3, r2, r3
 800458e:	091b      	lsrs	r3, r3, #4
 8004590:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004592:	4a13      	ldr	r2, [pc, #76]	@ (80045e0 <DMA_CalcBaseAndBitshift+0x68>)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	4413      	add	r3, r2
 8004598:	781b      	ldrb	r3, [r3, #0]
 800459a:	461a      	mov	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2b03      	cmp	r3, #3
 80045a4:	d909      	bls.n	80045ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80045ae:	f023 0303 	bic.w	r3, r3, #3
 80045b2:	1d1a      	adds	r2, r3, #4
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	659a      	str	r2, [r3, #88]	@ 0x58
 80045b8:	e007      	b.n	80045ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80045c2:	f023 0303 	bic.w	r3, r3, #3
 80045c6:	687a      	ldr	r2, [r7, #4]
 80045c8:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80045ce:	4618      	mov	r0, r3
 80045d0:	3714      	adds	r7, #20
 80045d2:	46bd      	mov	sp, r7
 80045d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d8:	4770      	bx	lr
 80045da:	bf00      	nop
 80045dc:	aaaaaaab 	.word	0xaaaaaaab
 80045e0:	0800ff90 	.word	0x0800ff90

080045e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b085      	sub	sp, #20
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045ec:	2300      	movs	r3, #0
 80045ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	699b      	ldr	r3, [r3, #24]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d11f      	bne.n	800463e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	2b03      	cmp	r3, #3
 8004602:	d856      	bhi.n	80046b2 <DMA_CheckFifoParam+0xce>
 8004604:	a201      	add	r2, pc, #4	@ (adr r2, 800460c <DMA_CheckFifoParam+0x28>)
 8004606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800460a:	bf00      	nop
 800460c:	0800461d 	.word	0x0800461d
 8004610:	0800462f 	.word	0x0800462f
 8004614:	0800461d 	.word	0x0800461d
 8004618:	080046b3 	.word	0x080046b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004620:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004624:	2b00      	cmp	r3, #0
 8004626:	d046      	beq.n	80046b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004628:	2301      	movs	r3, #1
 800462a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800462c:	e043      	b.n	80046b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004632:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004636:	d140      	bne.n	80046ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800463c:	e03d      	b.n	80046ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	699b      	ldr	r3, [r3, #24]
 8004642:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004646:	d121      	bne.n	800468c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	2b03      	cmp	r3, #3
 800464c:	d837      	bhi.n	80046be <DMA_CheckFifoParam+0xda>
 800464e:	a201      	add	r2, pc, #4	@ (adr r2, 8004654 <DMA_CheckFifoParam+0x70>)
 8004650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004654:	08004665 	.word	0x08004665
 8004658:	0800466b 	.word	0x0800466b
 800465c:	08004665 	.word	0x08004665
 8004660:	0800467d 	.word	0x0800467d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	73fb      	strb	r3, [r7, #15]
      break;
 8004668:	e030      	b.n	80046cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800466e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d025      	beq.n	80046c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800467a:	e022      	b.n	80046c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004680:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004684:	d11f      	bne.n	80046c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800468a:	e01c      	b.n	80046c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b02      	cmp	r3, #2
 8004690:	d903      	bls.n	800469a <DMA_CheckFifoParam+0xb6>
 8004692:	68bb      	ldr	r3, [r7, #8]
 8004694:	2b03      	cmp	r3, #3
 8004696:	d003      	beq.n	80046a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004698:	e018      	b.n	80046cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	73fb      	strb	r3, [r7, #15]
      break;
 800469e:	e015      	b.n	80046cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00e      	beq.n	80046ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	73fb      	strb	r3, [r7, #15]
      break;
 80046b0:	e00b      	b.n	80046ca <DMA_CheckFifoParam+0xe6>
      break;
 80046b2:	bf00      	nop
 80046b4:	e00a      	b.n	80046cc <DMA_CheckFifoParam+0xe8>
      break;
 80046b6:	bf00      	nop
 80046b8:	e008      	b.n	80046cc <DMA_CheckFifoParam+0xe8>
      break;
 80046ba:	bf00      	nop
 80046bc:	e006      	b.n	80046cc <DMA_CheckFifoParam+0xe8>
      break;
 80046be:	bf00      	nop
 80046c0:	e004      	b.n	80046cc <DMA_CheckFifoParam+0xe8>
      break;
 80046c2:	bf00      	nop
 80046c4:	e002      	b.n	80046cc <DMA_CheckFifoParam+0xe8>
      break;   
 80046c6:	bf00      	nop
 80046c8:	e000      	b.n	80046cc <DMA_CheckFifoParam+0xe8>
      break;
 80046ca:	bf00      	nop
    }
  } 
  
  return status; 
 80046cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3714      	adds	r7, #20
 80046d2:	46bd      	mov	sp, r7
 80046d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d8:	4770      	bx	lr
 80046da:	bf00      	nop

080046dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80046e6:	2300      	movs	r3, #0
 80046e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80046ea:	2300      	movs	r3, #0
 80046ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80046ee:	2300      	movs	r3, #0
 80046f0:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a38      	ldr	r2, [pc, #224]	@ (80047d8 <HAL_GPIO_Init+0xfc>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d023      	beq.n	8004742 <HAL_GPIO_Init+0x66>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a37      	ldr	r2, [pc, #220]	@ (80047dc <HAL_GPIO_Init+0x100>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d01f      	beq.n	8004742 <HAL_GPIO_Init+0x66>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a36      	ldr	r2, [pc, #216]	@ (80047e0 <HAL_GPIO_Init+0x104>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d01b      	beq.n	8004742 <HAL_GPIO_Init+0x66>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a35      	ldr	r2, [pc, #212]	@ (80047e4 <HAL_GPIO_Init+0x108>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d017      	beq.n	8004742 <HAL_GPIO_Init+0x66>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a34      	ldr	r2, [pc, #208]	@ (80047e8 <HAL_GPIO_Init+0x10c>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d013      	beq.n	8004742 <HAL_GPIO_Init+0x66>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a33      	ldr	r2, [pc, #204]	@ (80047ec <HAL_GPIO_Init+0x110>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d00f      	beq.n	8004742 <HAL_GPIO_Init+0x66>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a32      	ldr	r2, [pc, #200]	@ (80047f0 <HAL_GPIO_Init+0x114>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d00b      	beq.n	8004742 <HAL_GPIO_Init+0x66>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a31      	ldr	r2, [pc, #196]	@ (80047f4 <HAL_GPIO_Init+0x118>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d007      	beq.n	8004742 <HAL_GPIO_Init+0x66>
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	4a30      	ldr	r2, [pc, #192]	@ (80047f8 <HAL_GPIO_Init+0x11c>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d003      	beq.n	8004742 <HAL_GPIO_Init+0x66>
 800473a:	21ac      	movs	r1, #172	@ 0xac
 800473c:	482f      	ldr	r0, [pc, #188]	@ (80047fc <HAL_GPIO_Init+0x120>)
 800473e:	f7fd ffe7 	bl	8002710 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	b29b      	uxth	r3, r3
 8004748:	2b00      	cmp	r3, #0
 800474a:	d004      	beq.n	8004756 <HAL_GPIO_Init+0x7a>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004754:	d303      	bcc.n	800475e <HAL_GPIO_Init+0x82>
 8004756:	21ad      	movs	r1, #173	@ 0xad
 8004758:	4828      	ldr	r0, [pc, #160]	@ (80047fc <HAL_GPIO_Init+0x120>)
 800475a:	f7fd ffd9 	bl	8002710 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	685b      	ldr	r3, [r3, #4]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d035      	beq.n	80047d2 <HAL_GPIO_Init+0xf6>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	685b      	ldr	r3, [r3, #4]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d031      	beq.n	80047d2 <HAL_GPIO_Init+0xf6>
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	2b11      	cmp	r3, #17
 8004774:	d02d      	beq.n	80047d2 <HAL_GPIO_Init+0xf6>
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	2b02      	cmp	r3, #2
 800477c:	d029      	beq.n	80047d2 <HAL_GPIO_Init+0xf6>
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	2b12      	cmp	r3, #18
 8004784:	d025      	beq.n	80047d2 <HAL_GPIO_Init+0xf6>
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 800478e:	d020      	beq.n	80047d2 <HAL_GPIO_Init+0xf6>
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8004798:	d01b      	beq.n	80047d2 <HAL_GPIO_Init+0xf6>
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	685b      	ldr	r3, [r3, #4]
 800479e:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 80047a2:	d016      	beq.n	80047d2 <HAL_GPIO_Init+0xf6>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 80047ac:	d011      	beq.n	80047d2 <HAL_GPIO_Init+0xf6>
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 80047b6:	d00c      	beq.n	80047d2 <HAL_GPIO_Init+0xf6>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	685b      	ldr	r3, [r3, #4]
 80047bc:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 80047c0:	d007      	beq.n	80047d2 <HAL_GPIO_Init+0xf6>
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2b03      	cmp	r3, #3
 80047c8:	d003      	beq.n	80047d2 <HAL_GPIO_Init+0xf6>
 80047ca:	21ae      	movs	r1, #174	@ 0xae
 80047cc:	480b      	ldr	r0, [pc, #44]	@ (80047fc <HAL_GPIO_Init+0x120>)
 80047ce:	f7fd ff9f 	bl	8002710 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047d2:	2300      	movs	r3, #0
 80047d4:	61fb      	str	r3, [r7, #28]
 80047d6:	e241      	b.n	8004c5c <HAL_GPIO_Init+0x580>
 80047d8:	40020000 	.word	0x40020000
 80047dc:	40020400 	.word	0x40020400
 80047e0:	40020800 	.word	0x40020800
 80047e4:	40020c00 	.word	0x40020c00
 80047e8:	40021000 	.word	0x40021000
 80047ec:	40021400 	.word	0x40021400
 80047f0:	40021800 	.word	0x40021800
 80047f4:	40021c00 	.word	0x40021c00
 80047f8:	40022000 	.word	0x40022000
 80047fc:	0800fd98 	.word	0x0800fd98
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004800:	2201      	movs	r2, #1
 8004802:	69fb      	ldr	r3, [r7, #28]
 8004804:	fa02 f303 	lsl.w	r3, r2, r3
 8004808:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	697a      	ldr	r2, [r7, #20]
 8004810:	4013      	ands	r3, r2
 8004812:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	697b      	ldr	r3, [r7, #20]
 8004818:	429a      	cmp	r2, r3
 800481a:	f040 821c 	bne.w	8004c56 <HAL_GPIO_Init+0x57a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	685b      	ldr	r3, [r3, #4]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	2b01      	cmp	r3, #1
 8004828:	d005      	beq.n	8004836 <HAL_GPIO_Init+0x15a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004832:	2b02      	cmp	r3, #2
 8004834:	d144      	bne.n	80048c0 <HAL_GPIO_Init+0x1e4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68db      	ldr	r3, [r3, #12]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00f      	beq.n	800485e <HAL_GPIO_Init+0x182>
 800483e:	683b      	ldr	r3, [r7, #0]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	2b01      	cmp	r3, #1
 8004844:	d00b      	beq.n	800485e <HAL_GPIO_Init+0x182>
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	2b02      	cmp	r3, #2
 800484c:	d007      	beq.n	800485e <HAL_GPIO_Init+0x182>
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	68db      	ldr	r3, [r3, #12]
 8004852:	2b03      	cmp	r3, #3
 8004854:	d003      	beq.n	800485e <HAL_GPIO_Init+0x182>
 8004856:	21c0      	movs	r1, #192	@ 0xc0
 8004858:	4881      	ldr	r0, [pc, #516]	@ (8004a60 <HAL_GPIO_Init+0x384>)
 800485a:	f7fd ff59 	bl	8002710 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	005b      	lsls	r3, r3, #1
 8004868:	2203      	movs	r2, #3
 800486a:	fa02 f303 	lsl.w	r3, r2, r3
 800486e:	43db      	mvns	r3, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4013      	ands	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	68da      	ldr	r2, [r3, #12]
 800487a:	69fb      	ldr	r3, [r7, #28]
 800487c:	005b      	lsls	r3, r3, #1
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	69ba      	ldr	r2, [r7, #24]
 8004884:	4313      	orrs	r3, r2
 8004886:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004894:	2201      	movs	r2, #1
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	43db      	mvns	r3, r3
 800489e:	69ba      	ldr	r2, [r7, #24]
 80048a0:	4013      	ands	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	091b      	lsrs	r3, r3, #4
 80048aa:	f003 0201 	and.w	r2, r3, #1
 80048ae:	69fb      	ldr	r3, [r7, #28]
 80048b0:	fa02 f303 	lsl.w	r3, r2, r3
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	4313      	orrs	r3, r2
 80048b8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	f003 0303 	and.w	r3, r3, #3
 80048c8:	2b03      	cmp	r3, #3
 80048ca:	d027      	beq.n	800491c <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d00b      	beq.n	80048ec <HAL_GPIO_Init+0x210>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	2b01      	cmp	r3, #1
 80048da:	d007      	beq.n	80048ec <HAL_GPIO_Init+0x210>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	689b      	ldr	r3, [r3, #8]
 80048e0:	2b02      	cmp	r3, #2
 80048e2:	d003      	beq.n	80048ec <HAL_GPIO_Init+0x210>
 80048e4:	21d1      	movs	r1, #209	@ 0xd1
 80048e6:	485e      	ldr	r0, [pc, #376]	@ (8004a60 <HAL_GPIO_Init+0x384>)
 80048e8:	f7fd ff12 	bl	8002710 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048f2:	69fb      	ldr	r3, [r7, #28]
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	2203      	movs	r2, #3
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	43db      	mvns	r3, r3
 80048fe:	69ba      	ldr	r2, [r7, #24]
 8004900:	4013      	ands	r3, r2
 8004902:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	69fb      	ldr	r3, [r7, #28]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	69ba      	ldr	r2, [r7, #24]
 8004912:	4313      	orrs	r3, r2
 8004914:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	69ba      	ldr	r2, [r7, #24]
 800491a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f003 0303 	and.w	r3, r3, #3
 8004924:	2b02      	cmp	r3, #2
 8004926:	f040 80c1 	bne.w	8004aac <HAL_GPIO_Init+0x3d0>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 8098 	beq.w	8004a64 <HAL_GPIO_Init+0x388>
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	2b09      	cmp	r3, #9
 800493a:	f000 8093 	beq.w	8004a64 <HAL_GPIO_Init+0x388>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	691b      	ldr	r3, [r3, #16]
 8004942:	2b00      	cmp	r3, #0
 8004944:	f000 808e 	beq.w	8004a64 <HAL_GPIO_Init+0x388>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	691b      	ldr	r3, [r3, #16]
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 8089 	beq.w	8004a64 <HAL_GPIO_Init+0x388>
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	691b      	ldr	r3, [r3, #16]
 8004956:	2b00      	cmp	r3, #0
 8004958:	f000 8084 	beq.w	8004a64 <HAL_GPIO_Init+0x388>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	691b      	ldr	r3, [r3, #16]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d07f      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	691b      	ldr	r3, [r3, #16]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d07b      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 800496c:	683b      	ldr	r3, [r7, #0]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	2b01      	cmp	r3, #1
 8004972:	d077      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	691b      	ldr	r3, [r3, #16]
 8004978:	2b02      	cmp	r3, #2
 800497a:	d073      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 800497c:	683b      	ldr	r3, [r7, #0]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	2b02      	cmp	r3, #2
 8004982:	d06f      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	691b      	ldr	r3, [r3, #16]
 8004988:	2b02      	cmp	r3, #2
 800498a:	d06b      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	2b03      	cmp	r3, #3
 8004992:	d067      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 8004994:	683b      	ldr	r3, [r7, #0]
 8004996:	691b      	ldr	r3, [r3, #16]
 8004998:	2b04      	cmp	r3, #4
 800499a:	d063      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	691b      	ldr	r3, [r3, #16]
 80049a0:	2b04      	cmp	r3, #4
 80049a2:	d05f      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 80049a4:	683b      	ldr	r3, [r7, #0]
 80049a6:	691b      	ldr	r3, [r3, #16]
 80049a8:	2b04      	cmp	r3, #4
 80049aa:	d05b      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	691b      	ldr	r3, [r3, #16]
 80049b0:	2b05      	cmp	r3, #5
 80049b2:	d057      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	691b      	ldr	r3, [r3, #16]
 80049b8:	2b05      	cmp	r3, #5
 80049ba:	d053      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	691b      	ldr	r3, [r3, #16]
 80049c0:	2b09      	cmp	r3, #9
 80049c2:	d04f      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	2b06      	cmp	r3, #6
 80049ca:	d04b      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	691b      	ldr	r3, [r3, #16]
 80049d0:	2b09      	cmp	r3, #9
 80049d2:	d047      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 80049d4:	683b      	ldr	r3, [r7, #0]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	2b07      	cmp	r3, #7
 80049da:	d043      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	691b      	ldr	r3, [r3, #16]
 80049e0:	2b07      	cmp	r3, #7
 80049e2:	d03f      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	691b      	ldr	r3, [r3, #16]
 80049e8:	2b07      	cmp	r3, #7
 80049ea:	d03b      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d037      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	2b08      	cmp	r3, #8
 80049fa:	d033      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	691b      	ldr	r3, [r3, #16]
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d02f      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	691b      	ldr	r3, [r3, #16]
 8004a08:	2b09      	cmp	r3, #9
 8004a0a:	d02b      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	2b09      	cmp	r3, #9
 8004a12:	d027      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	2b0a      	cmp	r3, #10
 8004a1a:	d023      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 8004a1c:	683b      	ldr	r3, [r7, #0]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	2b0a      	cmp	r3, #10
 8004a22:	d01f      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	2b0b      	cmp	r3, #11
 8004a2a:	d01b      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	691b      	ldr	r3, [r3, #16]
 8004a30:	2b0c      	cmp	r3, #12
 8004a32:	d017      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 8004a34:	683b      	ldr	r3, [r7, #0]
 8004a36:	691b      	ldr	r3, [r3, #16]
 8004a38:	2b0c      	cmp	r3, #12
 8004a3a:	d013      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	2b0d      	cmp	r3, #13
 8004a42:	d00f      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	691b      	ldr	r3, [r3, #16]
 8004a48:	2b0c      	cmp	r3, #12
 8004a4a:	d00b      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	691b      	ldr	r3, [r3, #16]
 8004a50:	2b0f      	cmp	r3, #15
 8004a52:	d007      	beq.n	8004a64 <HAL_GPIO_Init+0x388>
 8004a54:	21de      	movs	r1, #222	@ 0xde
 8004a56:	4802      	ldr	r0, [pc, #8]	@ (8004a60 <HAL_GPIO_Init+0x384>)
 8004a58:	f7fd fe5a 	bl	8002710 <assert_failed>
 8004a5c:	e002      	b.n	8004a64 <HAL_GPIO_Init+0x388>
 8004a5e:	bf00      	nop
 8004a60:	0800fd98 	.word	0x0800fd98
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	08da      	lsrs	r2, r3, #3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	3208      	adds	r2, #8
 8004a6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	f003 0307 	and.w	r3, r3, #7
 8004a78:	009b      	lsls	r3, r3, #2
 8004a7a:	220f      	movs	r2, #15
 8004a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a80:	43db      	mvns	r3, r3
 8004a82:	69ba      	ldr	r2, [r7, #24]
 8004a84:	4013      	ands	r3, r2
 8004a86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	691a      	ldr	r2, [r3, #16]
 8004a8c:	69fb      	ldr	r3, [r7, #28]
 8004a8e:	f003 0307 	and.w	r3, r3, #7
 8004a92:	009b      	lsls	r3, r3, #2
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004a9e:	69fb      	ldr	r3, [r7, #28]
 8004aa0:	08da      	lsrs	r2, r3, #3
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	3208      	adds	r2, #8
 8004aa6:	69b9      	ldr	r1, [r7, #24]
 8004aa8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004ab2:	69fb      	ldr	r3, [r7, #28]
 8004ab4:	005b      	lsls	r3, r3, #1
 8004ab6:	2203      	movs	r2, #3
 8004ab8:	fa02 f303 	lsl.w	r3, r2, r3
 8004abc:	43db      	mvns	r3, r3
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f003 0203 	and.w	r2, r3, #3
 8004acc:	69fb      	ldr	r3, [r7, #28]
 8004ace:	005b      	lsls	r3, r3, #1
 8004ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad4:	69ba      	ldr	r2, [r7, #24]
 8004ad6:	4313      	orrs	r3, r2
 8004ad8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	69ba      	ldr	r2, [r7, #24]
 8004ade:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	685b      	ldr	r3, [r3, #4]
 8004ae4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80b4 	beq.w	8004c56 <HAL_GPIO_Init+0x57a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004aee:	2300      	movs	r3, #0
 8004af0:	60fb      	str	r3, [r7, #12]
 8004af2:	4b5f      	ldr	r3, [pc, #380]	@ (8004c70 <HAL_GPIO_Init+0x594>)
 8004af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af6:	4a5e      	ldr	r2, [pc, #376]	@ (8004c70 <HAL_GPIO_Init+0x594>)
 8004af8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004afc:	6453      	str	r3, [r2, #68]	@ 0x44
 8004afe:	4b5c      	ldr	r3, [pc, #368]	@ (8004c70 <HAL_GPIO_Init+0x594>)
 8004b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b02:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004b06:	60fb      	str	r3, [r7, #12]
 8004b08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b0a:	4a5a      	ldr	r2, [pc, #360]	@ (8004c74 <HAL_GPIO_Init+0x598>)
 8004b0c:	69fb      	ldr	r3, [r7, #28]
 8004b0e:	089b      	lsrs	r3, r3, #2
 8004b10:	3302      	adds	r3, #2
 8004b12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	f003 0303 	and.w	r3, r3, #3
 8004b1e:	009b      	lsls	r3, r3, #2
 8004b20:	220f      	movs	r2, #15
 8004b22:	fa02 f303 	lsl.w	r3, r2, r3
 8004b26:	43db      	mvns	r3, r3
 8004b28:	69ba      	ldr	r2, [r7, #24]
 8004b2a:	4013      	ands	r3, r2
 8004b2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a51      	ldr	r2, [pc, #324]	@ (8004c78 <HAL_GPIO_Init+0x59c>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d02b      	beq.n	8004b8e <HAL_GPIO_Init+0x4b2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a50      	ldr	r2, [pc, #320]	@ (8004c7c <HAL_GPIO_Init+0x5a0>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d025      	beq.n	8004b8a <HAL_GPIO_Init+0x4ae>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	4a4f      	ldr	r2, [pc, #316]	@ (8004c80 <HAL_GPIO_Init+0x5a4>)
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d01f      	beq.n	8004b86 <HAL_GPIO_Init+0x4aa>
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	4a4e      	ldr	r2, [pc, #312]	@ (8004c84 <HAL_GPIO_Init+0x5a8>)
 8004b4a:	4293      	cmp	r3, r2
 8004b4c:	d019      	beq.n	8004b82 <HAL_GPIO_Init+0x4a6>
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	4a4d      	ldr	r2, [pc, #308]	@ (8004c88 <HAL_GPIO_Init+0x5ac>)
 8004b52:	4293      	cmp	r3, r2
 8004b54:	d013      	beq.n	8004b7e <HAL_GPIO_Init+0x4a2>
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4a4c      	ldr	r2, [pc, #304]	@ (8004c8c <HAL_GPIO_Init+0x5b0>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d00d      	beq.n	8004b7a <HAL_GPIO_Init+0x49e>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	4a4b      	ldr	r2, [pc, #300]	@ (8004c90 <HAL_GPIO_Init+0x5b4>)
 8004b62:	4293      	cmp	r3, r2
 8004b64:	d007      	beq.n	8004b76 <HAL_GPIO_Init+0x49a>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	4a4a      	ldr	r2, [pc, #296]	@ (8004c94 <HAL_GPIO_Init+0x5b8>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d101      	bne.n	8004b72 <HAL_GPIO_Init+0x496>
 8004b6e:	2307      	movs	r3, #7
 8004b70:	e00e      	b.n	8004b90 <HAL_GPIO_Init+0x4b4>
 8004b72:	2308      	movs	r3, #8
 8004b74:	e00c      	b.n	8004b90 <HAL_GPIO_Init+0x4b4>
 8004b76:	2306      	movs	r3, #6
 8004b78:	e00a      	b.n	8004b90 <HAL_GPIO_Init+0x4b4>
 8004b7a:	2305      	movs	r3, #5
 8004b7c:	e008      	b.n	8004b90 <HAL_GPIO_Init+0x4b4>
 8004b7e:	2304      	movs	r3, #4
 8004b80:	e006      	b.n	8004b90 <HAL_GPIO_Init+0x4b4>
 8004b82:	2303      	movs	r3, #3
 8004b84:	e004      	b.n	8004b90 <HAL_GPIO_Init+0x4b4>
 8004b86:	2302      	movs	r3, #2
 8004b88:	e002      	b.n	8004b90 <HAL_GPIO_Init+0x4b4>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <HAL_GPIO_Init+0x4b4>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	69fa      	ldr	r2, [r7, #28]
 8004b92:	f002 0203 	and.w	r2, r2, #3
 8004b96:	0092      	lsls	r2, r2, #2
 8004b98:	4093      	lsls	r3, r2
 8004b9a:	69ba      	ldr	r2, [r7, #24]
 8004b9c:	4313      	orrs	r3, r2
 8004b9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ba0:	4934      	ldr	r1, [pc, #208]	@ (8004c74 <HAL_GPIO_Init+0x598>)
 8004ba2:	69fb      	ldr	r3, [r7, #28]
 8004ba4:	089b      	lsrs	r3, r3, #2
 8004ba6:	3302      	adds	r3, #2
 8004ba8:	69ba      	ldr	r2, [r7, #24]
 8004baa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004bae:	4b3a      	ldr	r3, [pc, #232]	@ (8004c98 <HAL_GPIO_Init+0x5bc>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	43db      	mvns	r3, r3
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	4013      	ands	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d003      	beq.n	8004bd2 <HAL_GPIO_Init+0x4f6>
        {
          temp |= iocurrent;
 8004bca:	69ba      	ldr	r2, [r7, #24]
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004bd2:	4a31      	ldr	r2, [pc, #196]	@ (8004c98 <HAL_GPIO_Init+0x5bc>)
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004bd8:	4b2f      	ldr	r3, [pc, #188]	@ (8004c98 <HAL_GPIO_Init+0x5bc>)
 8004bda:	68db      	ldr	r3, [r3, #12]
 8004bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004bde:	693b      	ldr	r3, [r7, #16]
 8004be0:	43db      	mvns	r3, r3
 8004be2:	69ba      	ldr	r2, [r7, #24]
 8004be4:	4013      	ands	r3, r2
 8004be6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_GPIO_Init+0x520>
        {
          temp |= iocurrent;
 8004bf4:	69ba      	ldr	r2, [r7, #24]
 8004bf6:	693b      	ldr	r3, [r7, #16]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004bfc:	4a26      	ldr	r2, [pc, #152]	@ (8004c98 <HAL_GPIO_Init+0x5bc>)
 8004bfe:	69bb      	ldr	r3, [r7, #24]
 8004c00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004c02:	4b25      	ldr	r3, [pc, #148]	@ (8004c98 <HAL_GPIO_Init+0x5bc>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c08:	693b      	ldr	r3, [r7, #16]
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	69ba      	ldr	r2, [r7, #24]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_GPIO_Init+0x54a>
        {
          temp |= iocurrent;
 8004c1e:	69ba      	ldr	r2, [r7, #24]
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004c26:	4a1c      	ldr	r2, [pc, #112]	@ (8004c98 <HAL_GPIO_Init+0x5bc>)
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004c2c:	4b1a      	ldr	r3, [pc, #104]	@ (8004c98 <HAL_GPIO_Init+0x5bc>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004c32:	693b      	ldr	r3, [r7, #16]
 8004c34:	43db      	mvns	r3, r3
 8004c36:	69ba      	ldr	r2, [r7, #24]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_GPIO_Init+0x574>
        {
          temp |= iocurrent;
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004c50:	4a11      	ldr	r2, [pc, #68]	@ (8004c98 <HAL_GPIO_Init+0x5bc>)
 8004c52:	69bb      	ldr	r3, [r7, #24]
 8004c54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	61fb      	str	r3, [r7, #28]
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	2b0f      	cmp	r3, #15
 8004c60:	f67f adce 	bls.w	8004800 <HAL_GPIO_Init+0x124>
      }
    }
  }
}
 8004c64:	bf00      	nop
 8004c66:	bf00      	nop
 8004c68:	3720      	adds	r7, #32
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40023800 	.word	0x40023800
 8004c74:	40013800 	.word	0x40013800
 8004c78:	40020000 	.word	0x40020000
 8004c7c:	40020400 	.word	0x40020400
 8004c80:	40020800 	.word	0x40020800
 8004c84:	40020c00 	.word	0x40020c00
 8004c88:	40021000 	.word	0x40021000
 8004c8c:	40021400 	.word	0x40021400
 8004c90:	40021800 	.word	0x40021800
 8004c94:	40021c00 	.word	0x40021c00
 8004c98:	40013c00 	.word	0x40013c00

08004c9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b082      	sub	sp, #8
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
 8004ca4:	460b      	mov	r3, r1
 8004ca6:	807b      	strh	r3, [r7, #2]
 8004ca8:	4613      	mov	r3, r2
 8004caa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004cac:	887b      	ldrh	r3, [r7, #2]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d104      	bne.n	8004cbc <HAL_GPIO_WritePin+0x20>
 8004cb2:	f240 119d 	movw	r1, #413	@ 0x19d
 8004cb6:	480e      	ldr	r0, [pc, #56]	@ (8004cf0 <HAL_GPIO_WritePin+0x54>)
 8004cb8:	f7fd fd2a 	bl	8002710 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004cbc:	787b      	ldrb	r3, [r7, #1]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d007      	beq.n	8004cd2 <HAL_GPIO_WritePin+0x36>
 8004cc2:	787b      	ldrb	r3, [r7, #1]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d004      	beq.n	8004cd2 <HAL_GPIO_WritePin+0x36>
 8004cc8:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 8004ccc:	4808      	ldr	r0, [pc, #32]	@ (8004cf0 <HAL_GPIO_WritePin+0x54>)
 8004cce:	f7fd fd1f 	bl	8002710 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8004cd2:	787b      	ldrb	r3, [r7, #1]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d003      	beq.n	8004ce0 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004cd8:	887a      	ldrh	r2, [r7, #2]
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004cde:	e003      	b.n	8004ce8 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ce0:	887b      	ldrh	r3, [r7, #2]
 8004ce2:	041a      	lsls	r2, r3, #16
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	619a      	str	r2, [r3, #24]
}
 8004ce8:	bf00      	nop
 8004cea:	3708      	adds	r7, #8
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}
 8004cf0:	0800fd98 	.word	0x0800fd98

08004cf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004cfe:	4b08      	ldr	r3, [pc, #32]	@ (8004d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d00:	695a      	ldr	r2, [r3, #20]
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	4013      	ands	r3, r2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d006      	beq.n	8004d18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d0a:	4a05      	ldr	r2, [pc, #20]	@ (8004d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d0c:	88fb      	ldrh	r3, [r7, #6]
 8004d0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d10:	88fb      	ldrh	r3, [r7, #6]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f7fd fc38 	bl	8002588 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d18:	bf00      	nop
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	40013c00 	.word	0x40013c00

08004d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b084      	sub	sp, #16
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d101      	bne.n	8004d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e1ba      	b.n	80050ac <HAL_I2C_Init+0x388>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a9d      	ldr	r2, [pc, #628]	@ (8004fb0 <HAL_I2C_Init+0x28c>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d00e      	beq.n	8004d5e <HAL_I2C_Init+0x3a>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a9b      	ldr	r2, [pc, #620]	@ (8004fb4 <HAL_I2C_Init+0x290>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d009      	beq.n	8004d5e <HAL_I2C_Init+0x3a>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a9a      	ldr	r2, [pc, #616]	@ (8004fb8 <HAL_I2C_Init+0x294>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d004      	beq.n	8004d5e <HAL_I2C_Init+0x3a>
 8004d54:	f240 11c9 	movw	r1, #457	@ 0x1c9
 8004d58:	4898      	ldr	r0, [pc, #608]	@ (8004fbc <HAL_I2C_Init+0x298>)
 8004d5a:	f7fd fcd9 	bl	8002710 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d004      	beq.n	8004d70 <HAL_I2C_Init+0x4c>
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	4a95      	ldr	r2, [pc, #596]	@ (8004fc0 <HAL_I2C_Init+0x29c>)
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d904      	bls.n	8004d7a <HAL_I2C_Init+0x56>
 8004d70:	f44f 71e5 	mov.w	r1, #458	@ 0x1ca
 8004d74:	4891      	ldr	r0, [pc, #580]	@ (8004fbc <HAL_I2C_Init+0x298>)
 8004d76:	f7fd fccb 	bl	8002710 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	689b      	ldr	r3, [r3, #8]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d009      	beq.n	8004d96 <HAL_I2C_Init+0x72>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004d8a:	d004      	beq.n	8004d96 <HAL_I2C_Init+0x72>
 8004d8c:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8004d90:	488a      	ldr	r0, [pc, #552]	@ (8004fbc <HAL_I2C_Init+0x298>)
 8004d92:	f7fd fcbd 	bl	8002710 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004d9e:	d304      	bcc.n	8004daa <HAL_I2C_Init+0x86>
 8004da0:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 8004da4:	4885      	ldr	r0, [pc, #532]	@ (8004fbc <HAL_I2C_Init+0x298>)
 8004da6:	f7fd fcb3 	bl	8002710 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	691b      	ldr	r3, [r3, #16]
 8004dae:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004db2:	d009      	beq.n	8004dc8 <HAL_I2C_Init+0xa4>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	691b      	ldr	r3, [r3, #16]
 8004db8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004dbc:	d004      	beq.n	8004dc8 <HAL_I2C_Init+0xa4>
 8004dbe:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8004dc2:	487e      	ldr	r0, [pc, #504]	@ (8004fbc <HAL_I2C_Init+0x298>)
 8004dc4:	f7fd fca4 	bl	8002710 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d008      	beq.n	8004de2 <HAL_I2C_Init+0xbe>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	695b      	ldr	r3, [r3, #20]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d004      	beq.n	8004de2 <HAL_I2C_Init+0xbe>
 8004dd8:	f44f 71e7 	mov.w	r1, #462	@ 0x1ce
 8004ddc:	4877      	ldr	r0, [pc, #476]	@ (8004fbc <HAL_I2C_Init+0x298>)
 8004dde:	f7fd fc97 	bl	8002710 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d004      	beq.n	8004df8 <HAL_I2C_Init+0xd4>
 8004dee:	f240 11cf 	movw	r1, #463	@ 0x1cf
 8004df2:	4872      	ldr	r0, [pc, #456]	@ (8004fbc <HAL_I2C_Init+0x298>)
 8004df4:	f7fd fc8c 	bl	8002710 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d008      	beq.n	8004e12 <HAL_I2C_Init+0xee>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	69db      	ldr	r3, [r3, #28]
 8004e04:	2b40      	cmp	r3, #64	@ 0x40
 8004e06:	d004      	beq.n	8004e12 <HAL_I2C_Init+0xee>
 8004e08:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 8004e0c:	486b      	ldr	r0, [pc, #428]	@ (8004fbc <HAL_I2C_Init+0x298>)
 8004e0e:	f7fd fc7f 	bl	8002710 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a1b      	ldr	r3, [r3, #32]
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d008      	beq.n	8004e2c <HAL_I2C_Init+0x108>
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a1b      	ldr	r3, [r3, #32]
 8004e1e:	2b80      	cmp	r3, #128	@ 0x80
 8004e20:	d004      	beq.n	8004e2c <HAL_I2C_Init+0x108>
 8004e22:	f240 11d1 	movw	r1, #465	@ 0x1d1
 8004e26:	4865      	ldr	r0, [pc, #404]	@ (8004fbc <HAL_I2C_Init+0x298>)
 8004e28:	f7fd fc72 	bl	8002710 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d106      	bne.n	8004e46 <HAL_I2C_Init+0x122>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f7fd fdbf 	bl	80029c4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2224      	movs	r2, #36	@ 0x24
 8004e4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f022 0201 	bic.w	r2, r2, #1
 8004e5c:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004e6c:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	681a      	ldr	r2, [r3, #0]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e7c:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004e7e:	f001 fd9d 	bl	80069bc <HAL_RCC_GetPCLK1Freq>
 8004e82:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	4a4e      	ldr	r2, [pc, #312]	@ (8004fc4 <HAL_I2C_Init+0x2a0>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d807      	bhi.n	8004e9e <HAL_I2C_Init+0x17a>
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	4a4d      	ldr	r2, [pc, #308]	@ (8004fc8 <HAL_I2C_Init+0x2a4>)
 8004e92:	4293      	cmp	r3, r2
 8004e94:	bf94      	ite	ls
 8004e96:	2301      	movls	r3, #1
 8004e98:	2300      	movhi	r3, #0
 8004e9a:	b2db      	uxtb	r3, r3
 8004e9c:	e006      	b.n	8004eac <HAL_I2C_Init+0x188>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	4a4a      	ldr	r2, [pc, #296]	@ (8004fcc <HAL_I2C_Init+0x2a8>)
 8004ea2:	4293      	cmp	r3, r2
 8004ea4:	bf94      	ite	ls
 8004ea6:	2301      	movls	r3, #1
 8004ea8:	2300      	movhi	r3, #0
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d001      	beq.n	8004eb4 <HAL_I2C_Init+0x190>
  {
    return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e0fb      	b.n	80050ac <HAL_I2C_Init+0x388>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	4a46      	ldr	r2, [pc, #280]	@ (8004fd0 <HAL_I2C_Init+0x2ac>)
 8004eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ebc:	0c9b      	lsrs	r3, r3, #18
 8004ebe:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68ba      	ldr	r2, [r7, #8]
 8004ed0:	430a      	orrs	r2, r1
 8004ed2:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	6a1b      	ldr	r3, [r3, #32]
 8004eda:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	4a38      	ldr	r2, [pc, #224]	@ (8004fc4 <HAL_I2C_Init+0x2a0>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d802      	bhi.n	8004eee <HAL_I2C_Init+0x1ca>
 8004ee8:	68bb      	ldr	r3, [r7, #8]
 8004eea:	3301      	adds	r3, #1
 8004eec:	e009      	b.n	8004f02 <HAL_I2C_Init+0x1de>
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004ef4:	fb02 f303 	mul.w	r3, r2, r3
 8004ef8:	4a36      	ldr	r2, [pc, #216]	@ (8004fd4 <HAL_I2C_Init+0x2b0>)
 8004efa:	fba2 2303 	umull	r2, r3, r2, r3
 8004efe:	099b      	lsrs	r3, r3, #6
 8004f00:	3301      	adds	r3, #1
 8004f02:	687a      	ldr	r2, [r7, #4]
 8004f04:	6812      	ldr	r2, [r2, #0]
 8004f06:	430b      	orrs	r3, r1
 8004f08:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004f14:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	4929      	ldr	r1, [pc, #164]	@ (8004fc4 <HAL_I2C_Init+0x2a0>)
 8004f1e:	428b      	cmp	r3, r1
 8004f20:	d819      	bhi.n	8004f56 <HAL_I2C_Init+0x232>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	1e59      	subs	r1, r3, #1
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	005b      	lsls	r3, r3, #1
 8004f2c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f30:	1c59      	adds	r1, r3, #1
 8004f32:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004f36:	400b      	ands	r3, r1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00a      	beq.n	8004f52 <HAL_I2C_Init+0x22e>
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	1e59      	subs	r1, r3, #1
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	005b      	lsls	r3, r3, #1
 8004f46:	fbb1 f3f3 	udiv	r3, r1, r3
 8004f4a:	3301      	adds	r3, #1
 8004f4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f50:	e065      	b.n	800501e <HAL_I2C_Init+0x2fa>
 8004f52:	2304      	movs	r3, #4
 8004f54:	e063      	b.n	800501e <HAL_I2C_Init+0x2fa>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d111      	bne.n	8004f82 <HAL_I2C_Init+0x25e>
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	1e58      	subs	r0, r3, #1
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6859      	ldr	r1, [r3, #4]
 8004f66:	460b      	mov	r3, r1
 8004f68:	005b      	lsls	r3, r3, #1
 8004f6a:	440b      	add	r3, r1
 8004f6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f70:	3301      	adds	r3, #1
 8004f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	bf0c      	ite	eq
 8004f7a:	2301      	moveq	r3, #1
 8004f7c:	2300      	movne	r3, #0
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	e012      	b.n	8004fa8 <HAL_I2C_Init+0x284>
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	1e58      	subs	r0, r3, #1
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	6859      	ldr	r1, [r3, #4]
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	009b      	lsls	r3, r3, #2
 8004f8e:	440b      	add	r3, r1
 8004f90:	0099      	lsls	r1, r3, #2
 8004f92:	440b      	add	r3, r1
 8004f94:	fbb0 f3f3 	udiv	r3, r0, r3
 8004f98:	3301      	adds	r3, #1
 8004f9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	bf0c      	ite	eq
 8004fa2:	2301      	moveq	r3, #1
 8004fa4:	2300      	movne	r3, #0
 8004fa6:	b2db      	uxtb	r3, r3
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d015      	beq.n	8004fd8 <HAL_I2C_Init+0x2b4>
 8004fac:	2301      	movs	r3, #1
 8004fae:	e036      	b.n	800501e <HAL_I2C_Init+0x2fa>
 8004fb0:	40005400 	.word	0x40005400
 8004fb4:	40005800 	.word	0x40005800
 8004fb8:	40005c00 	.word	0x40005c00
 8004fbc:	0800fdd4 	.word	0x0800fdd4
 8004fc0:	00061a80 	.word	0x00061a80
 8004fc4:	000186a0 	.word	0x000186a0
 8004fc8:	001e847f 	.word	0x001e847f
 8004fcc:	003d08ff 	.word	0x003d08ff
 8004fd0:	431bde83 	.word	0x431bde83
 8004fd4:	10624dd3 	.word	0x10624dd3
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d10e      	bne.n	8004ffe <HAL_I2C_Init+0x2da>
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	1e58      	subs	r0, r3, #1
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6859      	ldr	r1, [r3, #4]
 8004fe8:	460b      	mov	r3, r1
 8004fea:	005b      	lsls	r3, r3, #1
 8004fec:	440b      	add	r3, r1
 8004fee:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ff8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004ffc:	e00f      	b.n	800501e <HAL_I2C_Init+0x2fa>
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	1e58      	subs	r0, r3, #1
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	6859      	ldr	r1, [r3, #4]
 8005006:	460b      	mov	r3, r1
 8005008:	009b      	lsls	r3, r3, #2
 800500a:	440b      	add	r3, r1
 800500c:	0099      	lsls	r1, r3, #2
 800500e:	440b      	add	r3, r1
 8005010:	fbb0 f3f3 	udiv	r3, r0, r3
 8005014:	3301      	adds	r3, #1
 8005016:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800501a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800501e:	6879      	ldr	r1, [r7, #4]
 8005020:	6809      	ldr	r1, [r1, #0]
 8005022:	4313      	orrs	r3, r2
 8005024:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	69da      	ldr	r2, [r3, #28]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	431a      	orrs	r2, r3
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	430a      	orrs	r2, r1
 8005040:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800504c:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	6911      	ldr	r1, [r2, #16]
 8005054:	687a      	ldr	r2, [r7, #4]
 8005056:	68d2      	ldr	r2, [r2, #12]
 8005058:	4311      	orrs	r1, r2
 800505a:	687a      	ldr	r2, [r7, #4]
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	430b      	orrs	r3, r1
 8005060:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68db      	ldr	r3, [r3, #12]
 8005068:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	695a      	ldr	r2, [r3, #20]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	699b      	ldr	r3, [r3, #24]
 8005074:	431a      	orrs	r2, r3
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	430a      	orrs	r2, r1
 800507c:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f042 0201 	orr.w	r2, r2, #1
 800508c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2200      	movs	r2, #0
 8005092:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2200      	movs	r2, #0
 80050a0:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80050aa:	2300      	movs	r3, #0
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3710      	adds	r7, #16
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}

080050b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b088      	sub	sp, #32
 80050b8:	af02      	add	r7, sp, #8
 80050ba:	60f8      	str	r0, [r7, #12]
 80050bc:	4608      	mov	r0, r1
 80050be:	4611      	mov	r1, r2
 80050c0:	461a      	mov	r2, r3
 80050c2:	4603      	mov	r3, r0
 80050c4:	817b      	strh	r3, [r7, #10]
 80050c6:	460b      	mov	r3, r1
 80050c8:	813b      	strh	r3, [r7, #8]
 80050ca:	4613      	mov	r3, r2
 80050cc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050ce:	f7fd ff27 	bl	8002f20 <HAL_GetTick>
 80050d2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80050d4:	88fb      	ldrh	r3, [r7, #6]
 80050d6:	2b01      	cmp	r3, #1
 80050d8:	d007      	beq.n	80050ea <HAL_I2C_Mem_Write+0x36>
 80050da:	88fb      	ldrh	r3, [r7, #6]
 80050dc:	2b10      	cmp	r3, #16
 80050de:	d004      	beq.n	80050ea <HAL_I2C_Mem_Write+0x36>
 80050e0:	f640 11cd 	movw	r1, #2509	@ 0x9cd
 80050e4:	4873      	ldr	r0, [pc, #460]	@ (80052b4 <HAL_I2C_Mem_Write+0x200>)
 80050e6:	f7fd fb13 	bl	8002710 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050f0:	b2db      	uxtb	r3, r3
 80050f2:	2b20      	cmp	r3, #32
 80050f4:	f040 80d9 	bne.w	80052aa <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	2319      	movs	r3, #25
 80050fe:	2201      	movs	r2, #1
 8005100:	496d      	ldr	r1, [pc, #436]	@ (80052b8 <HAL_I2C_Mem_Write+0x204>)
 8005102:	68f8      	ldr	r0, [r7, #12]
 8005104:	f000 fc98 	bl	8005a38 <I2C_WaitOnFlagUntilTimeout>
 8005108:	4603      	mov	r3, r0
 800510a:	2b00      	cmp	r3, #0
 800510c:	d001      	beq.n	8005112 <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 800510e:	2302      	movs	r3, #2
 8005110:	e0cc      	b.n	80052ac <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005118:	2b01      	cmp	r3, #1
 800511a:	d101      	bne.n	8005120 <HAL_I2C_Mem_Write+0x6c>
 800511c:	2302      	movs	r3, #2
 800511e:	e0c5      	b.n	80052ac <HAL_I2C_Mem_Write+0x1f8>
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005128:	68fb      	ldr	r3, [r7, #12]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b01      	cmp	r3, #1
 8005134:	d007      	beq.n	8005146 <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f042 0201 	orr.w	r2, r2, #1
 8005144:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005154:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	2221      	movs	r2, #33	@ 0x21
 800515a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2240      	movs	r2, #64	@ 0x40
 8005162:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6a3a      	ldr	r2, [r7, #32]
 8005170:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005176:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800517c:	b29a      	uxth	r2, r3
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	4a4d      	ldr	r2, [pc, #308]	@ (80052bc <HAL_I2C_Mem_Write+0x208>)
 8005186:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005188:	88f8      	ldrh	r0, [r7, #6]
 800518a:	893a      	ldrh	r2, [r7, #8]
 800518c:	8979      	ldrh	r1, [r7, #10]
 800518e:	697b      	ldr	r3, [r7, #20]
 8005190:	9301      	str	r3, [sp, #4]
 8005192:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005194:	9300      	str	r3, [sp, #0]
 8005196:	4603      	mov	r3, r0
 8005198:	68f8      	ldr	r0, [r7, #12]
 800519a:	f000 facf 	bl	800573c <I2C_RequestMemoryWrite>
 800519e:	4603      	mov	r3, r0
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d052      	beq.n	800524a <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 80051a4:	2301      	movs	r3, #1
 80051a6:	e081      	b.n	80052ac <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051a8:	697a      	ldr	r2, [r7, #20]
 80051aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051ac:	68f8      	ldr	r0, [r7, #12]
 80051ae:	f000 fd5d 	bl	8005c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d00d      	beq.n	80051d4 <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051bc:	2b04      	cmp	r3, #4
 80051be:	d107      	bne.n	80051d0 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051ce:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80051d0:	2301      	movs	r3, #1
 80051d2:	e06b      	b.n	80052ac <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d8:	781a      	ldrb	r2, [r3, #0]
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051e4:	1c5a      	adds	r2, r3, #1
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051ee:	3b01      	subs	r3, #1
 80051f0:	b29a      	uxth	r2, r3
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051fa:	b29b      	uxth	r3, r3
 80051fc:	3b01      	subs	r3, #1
 80051fe:	b29a      	uxth	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	f003 0304 	and.w	r3, r3, #4
 800520e:	2b04      	cmp	r3, #4
 8005210:	d11b      	bne.n	800524a <HAL_I2C_Mem_Write+0x196>
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005216:	2b00      	cmp	r3, #0
 8005218:	d017      	beq.n	800524a <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800521e:	781a      	ldrb	r2, [r3, #0]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005234:	3b01      	subs	r3, #1
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005240:	b29b      	uxth	r3, r3
 8005242:	3b01      	subs	r3, #1
 8005244:	b29a      	uxth	r2, r3
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800524e:	2b00      	cmp	r3, #0
 8005250:	d1aa      	bne.n	80051a8 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005256:	68f8      	ldr	r0, [r7, #12]
 8005258:	f000 fd50 	bl	8005cfc <I2C_WaitOnBTFFlagUntilTimeout>
 800525c:	4603      	mov	r3, r0
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00d      	beq.n	800527e <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005266:	2b04      	cmp	r3, #4
 8005268:	d107      	bne.n	800527a <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005278:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e016      	b.n	80052ac <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	681a      	ldr	r2, [r3, #0]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800528c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2220      	movs	r2, #32
 8005292:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	2200      	movs	r2, #0
 800529a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80052a6:	2300      	movs	r3, #0
 80052a8:	e000      	b.n	80052ac <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 80052aa:	2302      	movs	r3, #2
  }
}
 80052ac:	4618      	mov	r0, r3
 80052ae:	3718      	adds	r7, #24
 80052b0:	46bd      	mov	sp, r7
 80052b2:	bd80      	pop	{r7, pc}
 80052b4:	0800fdd4 	.word	0x0800fdd4
 80052b8:	00100002 	.word	0x00100002
 80052bc:	ffff0000 	.word	0xffff0000

080052c0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b08c      	sub	sp, #48	@ 0x30
 80052c4:	af02      	add	r7, sp, #8
 80052c6:	60f8      	str	r0, [r7, #12]
 80052c8:	4608      	mov	r0, r1
 80052ca:	4611      	mov	r1, r2
 80052cc:	461a      	mov	r2, r3
 80052ce:	4603      	mov	r3, r0
 80052d0:	817b      	strh	r3, [r7, #10]
 80052d2:	460b      	mov	r3, r1
 80052d4:	813b      	strh	r3, [r7, #8]
 80052d6:	4613      	mov	r3, r2
 80052d8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80052da:	f7fd fe21 	bl	8002f20 <HAL_GetTick>
 80052de:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80052e0:	88fb      	ldrh	r3, [r7, #6]
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d007      	beq.n	80052f6 <HAL_I2C_Mem_Read+0x36>
 80052e6:	88fb      	ldrh	r3, [r7, #6]
 80052e8:	2b10      	cmp	r3, #16
 80052ea:	d004      	beq.n	80052f6 <HAL_I2C_Mem_Read+0x36>
 80052ec:	f640 2148 	movw	r1, #2632	@ 0xa48
 80052f0:	4881      	ldr	r0, [pc, #516]	@ (80054f8 <HAL_I2C_Mem_Read+0x238>)
 80052f2:	f7fd fa0d 	bl	8002710 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b20      	cmp	r3, #32
 8005300:	f040 8215 	bne.w	800572e <HAL_I2C_Mem_Read+0x46e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005306:	9300      	str	r3, [sp, #0]
 8005308:	2319      	movs	r3, #25
 800530a:	2201      	movs	r2, #1
 800530c:	497b      	ldr	r1, [pc, #492]	@ (80054fc <HAL_I2C_Mem_Read+0x23c>)
 800530e:	68f8      	ldr	r0, [r7, #12]
 8005310:	f000 fb92 	bl	8005a38 <I2C_WaitOnFlagUntilTimeout>
 8005314:	4603      	mov	r3, r0
 8005316:	2b00      	cmp	r3, #0
 8005318:	d001      	beq.n	800531e <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 800531a:	2302      	movs	r3, #2
 800531c:	e208      	b.n	8005730 <HAL_I2C_Mem_Read+0x470>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005324:	2b01      	cmp	r3, #1
 8005326:	d101      	bne.n	800532c <HAL_I2C_Mem_Read+0x6c>
 8005328:	2302      	movs	r3, #2
 800532a:	e201      	b.n	8005730 <HAL_I2C_Mem_Read+0x470>
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	2201      	movs	r2, #1
 8005330:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0301 	and.w	r3, r3, #1
 800533e:	2b01      	cmp	r3, #1
 8005340:	d007      	beq.n	8005352 <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f042 0201 	orr.w	r2, r2, #1
 8005350:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	681a      	ldr	r2, [r3, #0]
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005360:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	2222      	movs	r2, #34	@ 0x22
 8005366:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2240      	movs	r2, #64	@ 0x40
 800536e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	2200      	movs	r2, #0
 8005376:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800537c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005382:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005388:	b29a      	uxth	r2, r3
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	4a5b      	ldr	r2, [pc, #364]	@ (8005500 <HAL_I2C_Mem_Read+0x240>)
 8005392:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005394:	88f8      	ldrh	r0, [r7, #6]
 8005396:	893a      	ldrh	r2, [r7, #8]
 8005398:	8979      	ldrh	r1, [r7, #10]
 800539a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800539c:	9301      	str	r3, [sp, #4]
 800539e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053a0:	9300      	str	r3, [sp, #0]
 80053a2:	4603      	mov	r3, r0
 80053a4:	68f8      	ldr	r0, [r7, #12]
 80053a6:	f000 fa5f 	bl	8005868 <I2C_RequestMemoryRead>
 80053aa:	4603      	mov	r3, r0
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d001      	beq.n	80053b4 <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 80053b0:	2301      	movs	r3, #1
 80053b2:	e1bd      	b.n	8005730 <HAL_I2C_Mem_Read+0x470>
    }

    if (hi2c->XferSize == 0U)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d113      	bne.n	80053e4 <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053bc:	2300      	movs	r3, #0
 80053be:	623b      	str	r3, [r7, #32]
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	623b      	str	r3, [r7, #32]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	623b      	str	r3, [r7, #32]
 80053d0:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053e0:	601a      	str	r2, [r3, #0]
 80053e2:	e191      	b.n	8005708 <HAL_I2C_Mem_Read+0x448>
    }
    else if (hi2c->XferSize == 1U)
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053e8:	2b01      	cmp	r3, #1
 80053ea:	d11b      	bne.n	8005424 <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053fa:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053fc:	2300      	movs	r3, #0
 80053fe:	61fb      	str	r3, [r7, #28]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	695b      	ldr	r3, [r3, #20]
 8005406:	61fb      	str	r3, [r7, #28]
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	61fb      	str	r3, [r7, #28]
 8005410:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	681a      	ldr	r2, [r3, #0]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005420:	601a      	str	r2, [r3, #0]
 8005422:	e171      	b.n	8005708 <HAL_I2C_Mem_Read+0x448>
    }
    else if (hi2c->XferSize == 2U)
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005428:	2b02      	cmp	r3, #2
 800542a:	d11b      	bne.n	8005464 <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	681a      	ldr	r2, [r3, #0]
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800543a:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681a      	ldr	r2, [r3, #0]
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800544a:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800544c:	2300      	movs	r3, #0
 800544e:	61bb      	str	r3, [r7, #24]
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	695b      	ldr	r3, [r3, #20]
 8005456:	61bb      	str	r3, [r7, #24]
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	61bb      	str	r3, [r7, #24]
 8005460:	69bb      	ldr	r3, [r7, #24]
 8005462:	e151      	b.n	8005708 <HAL_I2C_Mem_Read+0x448>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005464:	2300      	movs	r3, #0
 8005466:	617b      	str	r3, [r7, #20]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	695b      	ldr	r3, [r3, #20]
 800546e:	617b      	str	r3, [r7, #20]
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699b      	ldr	r3, [r3, #24]
 8005476:	617b      	str	r3, [r7, #20]
 8005478:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800547a:	e145      	b.n	8005708 <HAL_I2C_Mem_Read+0x448>
    {
      if (hi2c->XferSize <= 3U)
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005480:	2b03      	cmp	r3, #3
 8005482:	f200 80f2 	bhi.w	800566a <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800548a:	2b01      	cmp	r3, #1
 800548c:	d123      	bne.n	80054d6 <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800548e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005490:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f000 fc7a 	bl	8005d8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 800549e:	2301      	movs	r3, #1
 80054a0:	e146      	b.n	8005730 <HAL_I2C_Mem_Read+0x470>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	691a      	ldr	r2, [r3, #16]
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054ac:	b2d2      	uxtb	r2, r2
 80054ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b4:	1c5a      	adds	r2, r3, #1
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054be:	3b01      	subs	r3, #1
 80054c0:	b29a      	uxth	r2, r3
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054ca:	b29b      	uxth	r3, r3
 80054cc:	3b01      	subs	r3, #1
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80054d4:	e118      	b.n	8005708 <HAL_I2C_Mem_Read+0x448>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d14f      	bne.n	800557e <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80054de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e0:	9300      	str	r3, [sp, #0]
 80054e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054e4:	2200      	movs	r2, #0
 80054e6:	4907      	ldr	r1, [pc, #28]	@ (8005504 <HAL_I2C_Mem_Read+0x244>)
 80054e8:	68f8      	ldr	r0, [r7, #12]
 80054ea:	f000 faa5 	bl	8005a38 <I2C_WaitOnFlagUntilTimeout>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d009      	beq.n	8005508 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e11b      	b.n	8005730 <HAL_I2C_Mem_Read+0x470>
 80054f8:	0800fdd4 	.word	0x0800fdd4
 80054fc:	00100002 	.word	0x00100002
 8005500:	ffff0000 	.word	0xffff0000
 8005504:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	681a      	ldr	r2, [r3, #0]
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005516:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	691a      	ldr	r2, [r3, #16]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005522:	b2d2      	uxtb	r2, r2
 8005524:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800552a:	1c5a      	adds	r2, r3, #1
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005534:	3b01      	subs	r3, #1
 8005536:	b29a      	uxth	r2, r3
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005540:	b29b      	uxth	r3, r3
 8005542:	3b01      	subs	r3, #1
 8005544:	b29a      	uxth	r2, r3
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	691a      	ldr	r2, [r3, #16]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005554:	b2d2      	uxtb	r2, r2
 8005556:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555c:	1c5a      	adds	r2, r3, #1
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005572:	b29b      	uxth	r3, r3
 8005574:	3b01      	subs	r3, #1
 8005576:	b29a      	uxth	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800557c:	e0c4      	b.n	8005708 <HAL_I2C_Mem_Read+0x448>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800557e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005580:	9300      	str	r3, [sp, #0]
 8005582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005584:	2200      	movs	r2, #0
 8005586:	496c      	ldr	r1, [pc, #432]	@ (8005738 <HAL_I2C_Mem_Read+0x478>)
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 fa55 	bl	8005a38 <I2C_WaitOnFlagUntilTimeout>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e0cb      	b.n	8005730 <HAL_I2C_Mem_Read+0x470>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681a      	ldr	r2, [r3, #0]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80055a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	691a      	ldr	r2, [r3, #16]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055b2:	b2d2      	uxtb	r2, r2
 80055b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055ba:	1c5a      	adds	r2, r3, #1
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055c4:	3b01      	subs	r3, #1
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055d0:	b29b      	uxth	r3, r3
 80055d2:	3b01      	subs	r3, #1
 80055d4:	b29a      	uxth	r2, r3
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	9300      	str	r3, [sp, #0]
 80055de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e0:	2200      	movs	r2, #0
 80055e2:	4955      	ldr	r1, [pc, #340]	@ (8005738 <HAL_I2C_Mem_Read+0x478>)
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f000 fa27 	bl	8005a38 <I2C_WaitOnFlagUntilTimeout>
 80055ea:	4603      	mov	r3, r0
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d001      	beq.n	80055f4 <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 80055f0:	2301      	movs	r3, #1
 80055f2:	e09d      	b.n	8005730 <HAL_I2C_Mem_Read+0x470>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	681a      	ldr	r2, [r3, #0]
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005602:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	691a      	ldr	r2, [r3, #16]
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560e:	b2d2      	uxtb	r2, r2
 8005610:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005620:	3b01      	subs	r3, #1
 8005622:	b29a      	uxth	r2, r3
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800562c:	b29b      	uxth	r3, r3
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	691a      	ldr	r2, [r3, #16]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005640:	b2d2      	uxtb	r2, r2
 8005642:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005648:	1c5a      	adds	r2, r3, #1
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005652:	3b01      	subs	r3, #1
 8005654:	b29a      	uxth	r2, r3
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800565e:	b29b      	uxth	r3, r3
 8005660:	3b01      	subs	r3, #1
 8005662:	b29a      	uxth	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005668:	e04e      	b.n	8005708 <HAL_I2C_Mem_Read+0x448>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800566a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800566c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 fb8c 	bl	8005d8c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e058      	b.n	8005730 <HAL_I2C_Mem_Read+0x470>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	691a      	ldr	r2, [r3, #16]
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005688:	b2d2      	uxtb	r2, r2
 800568a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005690:	1c5a      	adds	r2, r3, #1
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800569a:	3b01      	subs	r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056a6:	b29b      	uxth	r3, r3
 80056a8:	3b01      	subs	r3, #1
 80056aa:	b29a      	uxth	r2, r3
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695b      	ldr	r3, [r3, #20]
 80056b6:	f003 0304 	and.w	r3, r3, #4
 80056ba:	2b04      	cmp	r3, #4
 80056bc:	d124      	bne.n	8005708 <HAL_I2C_Mem_Read+0x448>
        {
          if (hi2c->XferSize == 3U)
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056c2:	2b03      	cmp	r3, #3
 80056c4:	d107      	bne.n	80056d6 <HAL_I2C_Mem_Read+0x416>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80056d4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	691a      	ldr	r2, [r3, #16]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e0:	b2d2      	uxtb	r2, r2
 80056e2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80056e8:	1c5a      	adds	r2, r3, #1
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056f2:	3b01      	subs	r3, #1
 80056f4:	b29a      	uxth	r2, r3
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80056fe:	b29b      	uxth	r3, r3
 8005700:	3b01      	subs	r3, #1
 8005702:	b29a      	uxth	r2, r3
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800570c:	2b00      	cmp	r3, #0
 800570e:	f47f aeb5 	bne.w	800547c <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2220      	movs	r2, #32
 8005716:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2200      	movs	r2, #0
 800571e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	2200      	movs	r2, #0
 8005726:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800572a:	2300      	movs	r3, #0
 800572c:	e000      	b.n	8005730 <HAL_I2C_Mem_Read+0x470>
  }
  else
  {
    return HAL_BUSY;
 800572e:	2302      	movs	r3, #2
  }
}
 8005730:	4618      	mov	r0, r3
 8005732:	3728      	adds	r7, #40	@ 0x28
 8005734:	46bd      	mov	sp, r7
 8005736:	bd80      	pop	{r7, pc}
 8005738:	00010004 	.word	0x00010004

0800573c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b088      	sub	sp, #32
 8005740:	af02      	add	r7, sp, #8
 8005742:	60f8      	str	r0, [r7, #12]
 8005744:	4608      	mov	r0, r1
 8005746:	4611      	mov	r1, r2
 8005748:	461a      	mov	r2, r3
 800574a:	4603      	mov	r3, r0
 800574c:	817b      	strh	r3, [r7, #10]
 800574e:	460b      	mov	r3, r1
 8005750:	813b      	strh	r3, [r7, #8]
 8005752:	4613      	mov	r3, r2
 8005754:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681a      	ldr	r2, [r3, #0]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005764:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005768:	9300      	str	r3, [sp, #0]
 800576a:	6a3b      	ldr	r3, [r7, #32]
 800576c:	2200      	movs	r2, #0
 800576e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f000 f960 	bl	8005a38 <I2C_WaitOnFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00d      	beq.n	800579a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005788:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800578c:	d103      	bne.n	8005796 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005794:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e05f      	b.n	800585a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800579a:	897b      	ldrh	r3, [r7, #10]
 800579c:	b2db      	uxtb	r3, r3
 800579e:	461a      	mov	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80057a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ac:	6a3a      	ldr	r2, [r7, #32]
 80057ae:	492d      	ldr	r1, [pc, #180]	@ (8005864 <I2C_RequestMemoryWrite+0x128>)
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 f9bb 	bl	8005b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d001      	beq.n	80057c0 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e04c      	b.n	800585a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057c0:	2300      	movs	r3, #0
 80057c2:	617b      	str	r3, [r7, #20]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	617b      	str	r3, [r7, #20]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	699b      	ldr	r3, [r3, #24]
 80057d2:	617b      	str	r3, [r7, #20]
 80057d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057d8:	6a39      	ldr	r1, [r7, #32]
 80057da:	68f8      	ldr	r0, [r7, #12]
 80057dc:	f000 fa46 	bl	8005c6c <I2C_WaitOnTXEFlagUntilTimeout>
 80057e0:	4603      	mov	r3, r0
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d00d      	beq.n	8005802 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057ea:	2b04      	cmp	r3, #4
 80057ec:	d107      	bne.n	80057fe <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	681a      	ldr	r2, [r3, #0]
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e02b      	b.n	800585a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005802:	88fb      	ldrh	r3, [r7, #6]
 8005804:	2b01      	cmp	r3, #1
 8005806:	d105      	bne.n	8005814 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005808:	893b      	ldrh	r3, [r7, #8]
 800580a:	b2da      	uxtb	r2, r3
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	611a      	str	r2, [r3, #16]
 8005812:	e021      	b.n	8005858 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005814:	893b      	ldrh	r3, [r7, #8]
 8005816:	0a1b      	lsrs	r3, r3, #8
 8005818:	b29b      	uxth	r3, r3
 800581a:	b2da      	uxtb	r2, r3
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005822:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005824:	6a39      	ldr	r1, [r7, #32]
 8005826:	68f8      	ldr	r0, [r7, #12]
 8005828:	f000 fa20 	bl	8005c6c <I2C_WaitOnTXEFlagUntilTimeout>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d00d      	beq.n	800584e <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005836:	2b04      	cmp	r3, #4
 8005838:	d107      	bne.n	800584a <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005848:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800584a:	2301      	movs	r3, #1
 800584c:	e005      	b.n	800585a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800584e:	893b      	ldrh	r3, [r7, #8]
 8005850:	b2da      	uxtb	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005858:	2300      	movs	r3, #0
}
 800585a:	4618      	mov	r0, r3
 800585c:	3718      	adds	r7, #24
 800585e:	46bd      	mov	sp, r7
 8005860:	bd80      	pop	{r7, pc}
 8005862:	bf00      	nop
 8005864:	00010002 	.word	0x00010002

08005868 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005868:	b580      	push	{r7, lr}
 800586a:	b088      	sub	sp, #32
 800586c:	af02      	add	r7, sp, #8
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	4608      	mov	r0, r1
 8005872:	4611      	mov	r1, r2
 8005874:	461a      	mov	r2, r3
 8005876:	4603      	mov	r3, r0
 8005878:	817b      	strh	r3, [r7, #10]
 800587a:	460b      	mov	r3, r1
 800587c:	813b      	strh	r3, [r7, #8]
 800587e:	4613      	mov	r3, r2
 8005880:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005890:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	681a      	ldr	r2, [r3, #0]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80058a0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	9300      	str	r3, [sp, #0]
 80058a6:	6a3b      	ldr	r3, [r7, #32]
 80058a8:	2200      	movs	r2, #0
 80058aa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80058ae:	68f8      	ldr	r0, [r7, #12]
 80058b0:	f000 f8c2 	bl	8005a38 <I2C_WaitOnFlagUntilTimeout>
 80058b4:	4603      	mov	r3, r0
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00d      	beq.n	80058d6 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80058c8:	d103      	bne.n	80058d2 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80058d0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80058d2:	2303      	movs	r3, #3
 80058d4:	e0aa      	b.n	8005a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80058d6:	897b      	ldrh	r3, [r7, #10]
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	461a      	mov	r2, r3
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80058e4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058e8:	6a3a      	ldr	r2, [r7, #32]
 80058ea:	4952      	ldr	r1, [pc, #328]	@ (8005a34 <I2C_RequestMemoryRead+0x1cc>)
 80058ec:	68f8      	ldr	r0, [r7, #12]
 80058ee:	f000 f91d 	bl	8005b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058f2:	4603      	mov	r3, r0
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d001      	beq.n	80058fc <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80058f8:	2301      	movs	r3, #1
 80058fa:	e097      	b.n	8005a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80058fc:	2300      	movs	r3, #0
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	695b      	ldr	r3, [r3, #20]
 8005906:	617b      	str	r3, [r7, #20]
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	699b      	ldr	r3, [r3, #24]
 800590e:	617b      	str	r3, [r7, #20]
 8005910:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005912:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005914:	6a39      	ldr	r1, [r7, #32]
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	f000 f9a8 	bl	8005c6c <I2C_WaitOnTXEFlagUntilTimeout>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d00d      	beq.n	800593e <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005926:	2b04      	cmp	r3, #4
 8005928:	d107      	bne.n	800593a <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005938:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e076      	b.n	8005a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800593e:	88fb      	ldrh	r3, [r7, #6]
 8005940:	2b01      	cmp	r3, #1
 8005942:	d105      	bne.n	8005950 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005944:	893b      	ldrh	r3, [r7, #8]
 8005946:	b2da      	uxtb	r2, r3
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	611a      	str	r2, [r3, #16]
 800594e:	e021      	b.n	8005994 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005950:	893b      	ldrh	r3, [r7, #8]
 8005952:	0a1b      	lsrs	r3, r3, #8
 8005954:	b29b      	uxth	r3, r3
 8005956:	b2da      	uxtb	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800595e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005960:	6a39      	ldr	r1, [r7, #32]
 8005962:	68f8      	ldr	r0, [r7, #12]
 8005964:	f000 f982 	bl	8005c6c <I2C_WaitOnTXEFlagUntilTimeout>
 8005968:	4603      	mov	r3, r0
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00d      	beq.n	800598a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005972:	2b04      	cmp	r3, #4
 8005974:	d107      	bne.n	8005986 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005984:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e050      	b.n	8005a2c <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800598a:	893b      	ldrh	r3, [r7, #8]
 800598c:	b2da      	uxtb	r2, r3
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005994:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005996:	6a39      	ldr	r1, [r7, #32]
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f000 f967 	bl	8005c6c <I2C_WaitOnTXEFlagUntilTimeout>
 800599e:	4603      	mov	r3, r0
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d00d      	beq.n	80059c0 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059a8:	2b04      	cmp	r3, #4
 80059aa:	d107      	bne.n	80059bc <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	681a      	ldr	r2, [r3, #0]
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059ba:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80059bc:	2301      	movs	r3, #1
 80059be:	e035      	b.n	8005a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	681a      	ldr	r2, [r3, #0]
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80059ce:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80059d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d2:	9300      	str	r3, [sp, #0]
 80059d4:	6a3b      	ldr	r3, [r7, #32]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80059dc:	68f8      	ldr	r0, [r7, #12]
 80059de:	f000 f82b 	bl	8005a38 <I2C_WaitOnFlagUntilTimeout>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d00d      	beq.n	8005a04 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059f6:	d103      	bne.n	8005a00 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059fe:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005a00:	2303      	movs	r3, #3
 8005a02:	e013      	b.n	8005a2c <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005a04:	897b      	ldrh	r3, [r7, #10]
 8005a06:	b2db      	uxtb	r3, r3
 8005a08:	f043 0301 	orr.w	r3, r3, #1
 8005a0c:	b2da      	uxtb	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a16:	6a3a      	ldr	r2, [r7, #32]
 8005a18:	4906      	ldr	r1, [pc, #24]	@ (8005a34 <I2C_RequestMemoryRead+0x1cc>)
 8005a1a:	68f8      	ldr	r0, [r7, #12]
 8005a1c:	f000 f886 	bl	8005b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a20:	4603      	mov	r3, r0
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d001      	beq.n	8005a2a <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005a26:	2301      	movs	r3, #1
 8005a28:	e000      	b.n	8005a2c <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005a2a:	2300      	movs	r3, #0
}
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	3718      	adds	r7, #24
 8005a30:	46bd      	mov	sp, r7
 8005a32:	bd80      	pop	{r7, pc}
 8005a34:	00010002 	.word	0x00010002

08005a38 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b084      	sub	sp, #16
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	60f8      	str	r0, [r7, #12]
 8005a40:	60b9      	str	r1, [r7, #8]
 8005a42:	603b      	str	r3, [r7, #0]
 8005a44:	4613      	mov	r3, r2
 8005a46:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005a48:	e048      	b.n	8005adc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a50:	d044      	beq.n	8005adc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a52:	f7fd fa65 	bl	8002f20 <HAL_GetTick>
 8005a56:	4602      	mov	r2, r0
 8005a58:	69bb      	ldr	r3, [r7, #24]
 8005a5a:	1ad3      	subs	r3, r2, r3
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d302      	bcc.n	8005a68 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d139      	bne.n	8005adc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	0c1b      	lsrs	r3, r3, #16
 8005a6c:	b2db      	uxtb	r3, r3
 8005a6e:	2b01      	cmp	r3, #1
 8005a70:	d10d      	bne.n	8005a8e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	695b      	ldr	r3, [r3, #20]
 8005a78:	43da      	mvns	r2, r3
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	b29b      	uxth	r3, r3
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	bf0c      	ite	eq
 8005a84:	2301      	moveq	r3, #1
 8005a86:	2300      	movne	r3, #0
 8005a88:	b2db      	uxtb	r3, r3
 8005a8a:	461a      	mov	r2, r3
 8005a8c:	e00c      	b.n	8005aa8 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	699b      	ldr	r3, [r3, #24]
 8005a94:	43da      	mvns	r2, r3
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	4013      	ands	r3, r2
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	bf0c      	ite	eq
 8005aa0:	2301      	moveq	r3, #1
 8005aa2:	2300      	movne	r3, #0
 8005aa4:	b2db      	uxtb	r3, r3
 8005aa6:	461a      	mov	r2, r3
 8005aa8:	79fb      	ldrb	r3, [r7, #7]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d116      	bne.n	8005adc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac8:	f043 0220 	orr.w	r2, r3, #32
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	e023      	b.n	8005b24 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	0c1b      	lsrs	r3, r3, #16
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b01      	cmp	r3, #1
 8005ae4:	d10d      	bne.n	8005b02 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	695b      	ldr	r3, [r3, #20]
 8005aec:	43da      	mvns	r2, r3
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	4013      	ands	r3, r2
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	bf0c      	ite	eq
 8005af8:	2301      	moveq	r3, #1
 8005afa:	2300      	movne	r3, #0
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	461a      	mov	r2, r3
 8005b00:	e00c      	b.n	8005b1c <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	43da      	mvns	r2, r3
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	b29b      	uxth	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	bf0c      	ite	eq
 8005b14:	2301      	moveq	r3, #1
 8005b16:	2300      	movne	r3, #0
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	461a      	mov	r2, r3
 8005b1c:	79fb      	ldrb	r3, [r7, #7]
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d093      	beq.n	8005a4a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b084      	sub	sp, #16
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
 8005b38:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005b3a:	e071      	b.n	8005c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	695b      	ldr	r3, [r3, #20]
 8005b42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b46:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005b4a:	d123      	bne.n	8005b94 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	681a      	ldr	r2, [r3, #0]
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b5a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b64:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2220      	movs	r2, #32
 8005b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	2200      	movs	r2, #0
 8005b78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b80:	f043 0204 	orr.w	r2, r3, #4
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005b90:	2301      	movs	r3, #1
 8005b92:	e067      	b.n	8005c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b9a:	d041      	beq.n	8005c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b9c:	f7fd f9c0 	bl	8002f20 <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	683b      	ldr	r3, [r7, #0]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	429a      	cmp	r2, r3
 8005baa:	d302      	bcc.n	8005bb2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d136      	bne.n	8005c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8005bb2:	68bb      	ldr	r3, [r7, #8]
 8005bb4:	0c1b      	lsrs	r3, r3, #16
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	2b01      	cmp	r3, #1
 8005bba:	d10c      	bne.n	8005bd6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	695b      	ldr	r3, [r3, #20]
 8005bc2:	43da      	mvns	r2, r3
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	b29b      	uxth	r3, r3
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	bf14      	ite	ne
 8005bce:	2301      	movne	r3, #1
 8005bd0:	2300      	moveq	r3, #0
 8005bd2:	b2db      	uxtb	r3, r3
 8005bd4:	e00b      	b.n	8005bee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	699b      	ldr	r3, [r3, #24]
 8005bdc:	43da      	mvns	r2, r3
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	4013      	ands	r3, r2
 8005be2:	b29b      	uxth	r3, r3
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	bf14      	ite	ne
 8005be8:	2301      	movne	r3, #1
 8005bea:	2300      	moveq	r3, #0
 8005bec:	b2db      	uxtb	r3, r3
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d016      	beq.n	8005c20 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2220      	movs	r2, #32
 8005bfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c0c:	f043 0220 	orr.w	r2, r3, #32
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2200      	movs	r2, #0
 8005c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	e021      	b.n	8005c64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	0c1b      	lsrs	r3, r3, #16
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d10c      	bne.n	8005c44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	43da      	mvns	r2, r3
 8005c32:	68bb      	ldr	r3, [r7, #8]
 8005c34:	4013      	ands	r3, r2
 8005c36:	b29b      	uxth	r3, r3
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	bf14      	ite	ne
 8005c3c:	2301      	movne	r3, #1
 8005c3e:	2300      	moveq	r3, #0
 8005c40:	b2db      	uxtb	r3, r3
 8005c42:	e00b      	b.n	8005c5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005c44:	68fb      	ldr	r3, [r7, #12]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	699b      	ldr	r3, [r3, #24]
 8005c4a:	43da      	mvns	r2, r3
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	4013      	ands	r3, r2
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	bf14      	ite	ne
 8005c56:	2301      	movne	r3, #1
 8005c58:	2300      	moveq	r3, #0
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f47f af6d 	bne.w	8005b3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3710      	adds	r7, #16
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005c78:	e034      	b.n	8005ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 f8e3 	bl	8005e46 <I2C_IsAcknowledgeFailed>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e034      	b.n	8005cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c90:	d028      	beq.n	8005ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c92:	f7fd f945 	bl	8002f20 <HAL_GetTick>
 8005c96:	4602      	mov	r2, r0
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	1ad3      	subs	r3, r2, r3
 8005c9c:	68ba      	ldr	r2, [r7, #8]
 8005c9e:	429a      	cmp	r2, r3
 8005ca0:	d302      	bcc.n	8005ca8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d11d      	bne.n	8005ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	695b      	ldr	r3, [r3, #20]
 8005cae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cb2:	2b80      	cmp	r3, #128	@ 0x80
 8005cb4:	d016      	beq.n	8005ce4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	2200      	movs	r2, #0
 8005cba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	2220      	movs	r2, #32
 8005cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cd0:	f043 0220 	orr.w	r2, r3, #32
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	2200      	movs	r2, #0
 8005cdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e007      	b.n	8005cf4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	695b      	ldr	r3, [r3, #20]
 8005cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005cee:	2b80      	cmp	r3, #128	@ 0x80
 8005cf0:	d1c3      	bne.n	8005c7a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005cf2:	2300      	movs	r3, #0
}
 8005cf4:	4618      	mov	r0, r3
 8005cf6:	3710      	adds	r7, #16
 8005cf8:	46bd      	mov	sp, r7
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005cfc:	b580      	push	{r7, lr}
 8005cfe:	b084      	sub	sp, #16
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	60f8      	str	r0, [r7, #12]
 8005d04:	60b9      	str	r1, [r7, #8]
 8005d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d08:	e034      	b.n	8005d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005d0a:	68f8      	ldr	r0, [r7, #12]
 8005d0c:	f000 f89b 	bl	8005e46 <I2C_IsAcknowledgeFailed>
 8005d10:	4603      	mov	r3, r0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d001      	beq.n	8005d1a <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005d16:	2301      	movs	r3, #1
 8005d18:	e034      	b.n	8005d84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d20:	d028      	beq.n	8005d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005d22:	f7fd f8fd 	bl	8002f20 <HAL_GetTick>
 8005d26:	4602      	mov	r2, r0
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	1ad3      	subs	r3, r2, r3
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	429a      	cmp	r2, r3
 8005d30:	d302      	bcc.n	8005d38 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d11d      	bne.n	8005d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	f003 0304 	and.w	r3, r3, #4
 8005d42:	2b04      	cmp	r3, #4
 8005d44:	d016      	beq.n	8005d74 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d60:	f043 0220 	orr.w	r2, r3, #32
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005d70:	2301      	movs	r3, #1
 8005d72:	e007      	b.n	8005d84 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	695b      	ldr	r3, [r3, #20]
 8005d7a:	f003 0304 	and.w	r3, r3, #4
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d1c3      	bne.n	8005d0a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005d82:	2300      	movs	r3, #0
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	3710      	adds	r7, #16
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	bd80      	pop	{r7, pc}

08005d8c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b084      	sub	sp, #16
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005d98:	e049      	b.n	8005e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005d9a:	68fb      	ldr	r3, [r7, #12]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	695b      	ldr	r3, [r3, #20]
 8005da0:	f003 0310 	and.w	r3, r3, #16
 8005da4:	2b10      	cmp	r3, #16
 8005da6:	d119      	bne.n	8005ddc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f06f 0210 	mvn.w	r2, #16
 8005db0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	2200      	movs	r2, #0
 8005db6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2220      	movs	r2, #32
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005dcc:	68fb      	ldr	r3, [r7, #12]
 8005dce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005dd8:	2301      	movs	r3, #1
 8005dda:	e030      	b.n	8005e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ddc:	f7fd f8a0 	bl	8002f20 <HAL_GetTick>
 8005de0:	4602      	mov	r2, r0
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	1ad3      	subs	r3, r2, r3
 8005de6:	68ba      	ldr	r2, [r7, #8]
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d302      	bcc.n	8005df2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d11d      	bne.n	8005e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	695b      	ldr	r3, [r3, #20]
 8005df8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dfc:	2b40      	cmp	r3, #64	@ 0x40
 8005dfe:	d016      	beq.n	8005e2e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	2200      	movs	r2, #0
 8005e04:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e1a:	f043 0220 	orr.w	r2, r3, #32
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	e007      	b.n	8005e3e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	695b      	ldr	r3, [r3, #20]
 8005e34:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e38:	2b40      	cmp	r3, #64	@ 0x40
 8005e3a:	d1ae      	bne.n	8005d9a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	4618      	mov	r0, r3
 8005e40:	3710      	adds	r7, #16
 8005e42:	46bd      	mov	sp, r7
 8005e44:	bd80      	pop	{r7, pc}

08005e46 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005e46:	b480      	push	{r7}
 8005e48:	b083      	sub	sp, #12
 8005e4a:	af00      	add	r7, sp, #0
 8005e4c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e58:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e5c:	d11b      	bne.n	8005e96 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005e66:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2220      	movs	r2, #32
 8005e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e82:	f043 0204 	orr.w	r2, r3, #4
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005e92:	2301      	movs	r3, #1
 8005e94:	e000      	b.n	8005e98 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005e96:	2300      	movs	r3, #0
}
 8005e98:	4618      	mov	r0, r3
 8005e9a:	370c      	adds	r7, #12
 8005e9c:	46bd      	mov	sp, r7
 8005e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea2:	4770      	bx	lr

08005ea4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b086      	sub	sp, #24
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d101      	bne.n	8005eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e318      	b.n	80064e8 <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	2b0f      	cmp	r3, #15
 8005ebc:	d903      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x22>
 8005ebe:	21e6      	movs	r1, #230	@ 0xe6
 8005ec0:	4897      	ldr	r0, [pc, #604]	@ (8006120 <HAL_RCC_OscConfig+0x27c>)
 8005ec2:	f7fc fc25 	bl	8002710 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f003 0301 	and.w	r3, r3, #1
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	f000 8088 	beq.w	8005fe4 <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d00d      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x54>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005ee4:	d008      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x54>
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005eee:	d003      	beq.n	8005ef8 <HAL_RCC_OscConfig+0x54>
 8005ef0:	21eb      	movs	r1, #235	@ 0xeb
 8005ef2:	488b      	ldr	r0, [pc, #556]	@ (8006120 <HAL_RCC_OscConfig+0x27c>)
 8005ef4:	f7fc fc0c 	bl	8002710 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005ef8:	4b8a      	ldr	r3, [pc, #552]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	f003 030c 	and.w	r3, r3, #12
 8005f00:	2b04      	cmp	r3, #4
 8005f02:	d00c      	beq.n	8005f1e <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f04:	4b87      	ldr	r3, [pc, #540]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005f0c:	2b08      	cmp	r3, #8
 8005f0e:	d112      	bne.n	8005f36 <HAL_RCC_OscConfig+0x92>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005f10:	4b84      	ldr	r3, [pc, #528]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005f1c:	d10b      	bne.n	8005f36 <HAL_RCC_OscConfig+0x92>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005f1e:	4b81      	ldr	r3, [pc, #516]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d05b      	beq.n	8005fe2 <HAL_RCC_OscConfig+0x13e>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d157      	bne.n	8005fe2 <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e2d8      	b.n	80064e8 <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	685b      	ldr	r3, [r3, #4]
 8005f3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f3e:	d106      	bne.n	8005f4e <HAL_RCC_OscConfig+0xaa>
 8005f40:	4b78      	ldr	r3, [pc, #480]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4a77      	ldr	r2, [pc, #476]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 8005f46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f4a:	6013      	str	r3, [r2, #0]
 8005f4c:	e01d      	b.n	8005f8a <HAL_RCC_OscConfig+0xe6>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005f56:	d10c      	bne.n	8005f72 <HAL_RCC_OscConfig+0xce>
 8005f58:	4b72      	ldr	r3, [pc, #456]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a71      	ldr	r2, [pc, #452]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 8005f5e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005f62:	6013      	str	r3, [r2, #0]
 8005f64:	4b6f      	ldr	r3, [pc, #444]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4a6e      	ldr	r2, [pc, #440]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 8005f6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005f6e:	6013      	str	r3, [r2, #0]
 8005f70:	e00b      	b.n	8005f8a <HAL_RCC_OscConfig+0xe6>
 8005f72:	4b6c      	ldr	r3, [pc, #432]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	4a6b      	ldr	r2, [pc, #428]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 8005f78:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005f7c:	6013      	str	r3, [r2, #0]
 8005f7e:	4b69      	ldr	r3, [pc, #420]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	4a68      	ldr	r2, [pc, #416]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 8005f84:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005f88:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d013      	beq.n	8005fba <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f92:	f7fc ffc5 	bl	8002f20 <HAL_GetTick>
 8005f96:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005f98:	e008      	b.n	8005fac <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005f9a:	f7fc ffc1 	bl	8002f20 <HAL_GetTick>
 8005f9e:	4602      	mov	r2, r0
 8005fa0:	693b      	ldr	r3, [r7, #16]
 8005fa2:	1ad3      	subs	r3, r2, r3
 8005fa4:	2b64      	cmp	r3, #100	@ 0x64
 8005fa6:	d901      	bls.n	8005fac <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005fa8:	2303      	movs	r3, #3
 8005faa:	e29d      	b.n	80064e8 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fac:	4b5d      	ldr	r3, [pc, #372]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d0f0      	beq.n	8005f9a <HAL_RCC_OscConfig+0xf6>
 8005fb8:	e014      	b.n	8005fe4 <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005fba:	f7fc ffb1 	bl	8002f20 <HAL_GetTick>
 8005fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fc0:	e008      	b.n	8005fd4 <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005fc2:	f7fc ffad 	bl	8002f20 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	693b      	ldr	r3, [r7, #16]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	2b64      	cmp	r3, #100	@ 0x64
 8005fce:	d901      	bls.n	8005fd4 <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8005fd0:	2303      	movs	r3, #3
 8005fd2:	e289      	b.n	80064e8 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005fd4:	4b53      	ldr	r3, [pc, #332]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d1f0      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x11e>
 8005fe0:	e000      	b.n	8005fe4 <HAL_RCC_OscConfig+0x140>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005fe2:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d079      	beq.n	80060e4 <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	68db      	ldr	r3, [r3, #12]
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	d008      	beq.n	800600a <HAL_RCC_OscConfig+0x166>
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	68db      	ldr	r3, [r3, #12]
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d004      	beq.n	800600a <HAL_RCC_OscConfig+0x166>
 8006000:	f240 111d 	movw	r1, #285	@ 0x11d
 8006004:	4846      	ldr	r0, [pc, #280]	@ (8006120 <HAL_RCC_OscConfig+0x27c>)
 8006006:	f7fc fb83 	bl	8002710 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	2b1f      	cmp	r3, #31
 8006010:	d904      	bls.n	800601c <HAL_RCC_OscConfig+0x178>
 8006012:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8006016:	4842      	ldr	r0, [pc, #264]	@ (8006120 <HAL_RCC_OscConfig+0x27c>)
 8006018:	f7fc fb7a 	bl	8002710 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800601c:	4b41      	ldr	r3, [pc, #260]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	f003 030c 	and.w	r3, r3, #12
 8006024:	2b00      	cmp	r3, #0
 8006026:	d00b      	beq.n	8006040 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006028:	4b3e      	ldr	r3, [pc, #248]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 800602a:	689b      	ldr	r3, [r3, #8]
 800602c:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006030:	2b08      	cmp	r3, #8
 8006032:	d11c      	bne.n	800606e <HAL_RCC_OscConfig+0x1ca>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006034:	4b3b      	ldr	r3, [pc, #236]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 8006036:	685b      	ldr	r3, [r3, #4]
 8006038:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800603c:	2b00      	cmp	r3, #0
 800603e:	d116      	bne.n	800606e <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006040:	4b38      	ldr	r3, [pc, #224]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d005      	beq.n	8006058 <HAL_RCC_OscConfig+0x1b4>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d001      	beq.n	8006058 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8006054:	2301      	movs	r3, #1
 8006056:	e247      	b.n	80064e8 <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006058:	4b32      	ldr	r3, [pc, #200]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	691b      	ldr	r3, [r3, #16]
 8006064:	00db      	lsls	r3, r3, #3
 8006066:	492f      	ldr	r1, [pc, #188]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 8006068:	4313      	orrs	r3, r2
 800606a:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800606c:	e03a      	b.n	80060e4 <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d020      	beq.n	80060b8 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006076:	4b2c      	ldr	r3, [pc, #176]	@ (8006128 <HAL_RCC_OscConfig+0x284>)
 8006078:	2201      	movs	r2, #1
 800607a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800607c:	f7fc ff50 	bl	8002f20 <HAL_GetTick>
 8006080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006082:	e008      	b.n	8006096 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006084:	f7fc ff4c 	bl	8002f20 <HAL_GetTick>
 8006088:	4602      	mov	r2, r0
 800608a:	693b      	ldr	r3, [r7, #16]
 800608c:	1ad3      	subs	r3, r2, r3
 800608e:	2b02      	cmp	r3, #2
 8006090:	d901      	bls.n	8006096 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8006092:	2303      	movs	r3, #3
 8006094:	e228      	b.n	80064e8 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006096:	4b23      	ldr	r3, [pc, #140]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f003 0302 	and.w	r3, r3, #2
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d0f0      	beq.n	8006084 <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80060a2:	4b20      	ldr	r3, [pc, #128]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	691b      	ldr	r3, [r3, #16]
 80060ae:	00db      	lsls	r3, r3, #3
 80060b0:	491c      	ldr	r1, [pc, #112]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 80060b2:	4313      	orrs	r3, r2
 80060b4:	600b      	str	r3, [r1, #0]
 80060b6:	e015      	b.n	80060e4 <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80060b8:	4b1b      	ldr	r3, [pc, #108]	@ (8006128 <HAL_RCC_OscConfig+0x284>)
 80060ba:	2200      	movs	r2, #0
 80060bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060be:	f7fc ff2f 	bl	8002f20 <HAL_GetTick>
 80060c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060c4:	e008      	b.n	80060d8 <HAL_RCC_OscConfig+0x234>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80060c6:	f7fc ff2b 	bl	8002f20 <HAL_GetTick>
 80060ca:	4602      	mov	r2, r0
 80060cc:	693b      	ldr	r3, [r7, #16]
 80060ce:	1ad3      	subs	r3, r2, r3
 80060d0:	2b02      	cmp	r3, #2
 80060d2:	d901      	bls.n	80060d8 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80060d4:	2303      	movs	r3, #3
 80060d6:	e207      	b.n	80064e8 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80060d8:	4b12      	ldr	r3, [pc, #72]	@ (8006124 <HAL_RCC_OscConfig+0x280>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	f003 0302 	and.w	r3, r3, #2
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d1f0      	bne.n	80060c6 <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f003 0308 	and.w	r3, r3, #8
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d045      	beq.n	800617c <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	695b      	ldr	r3, [r3, #20]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d008      	beq.n	800610a <HAL_RCC_OscConfig+0x266>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	695b      	ldr	r3, [r3, #20]
 80060fc:	2b01      	cmp	r3, #1
 80060fe:	d004      	beq.n	800610a <HAL_RCC_OscConfig+0x266>
 8006100:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8006104:	4806      	ldr	r0, [pc, #24]	@ (8006120 <HAL_RCC_OscConfig+0x27c>)
 8006106:	f7fc fb03 	bl	8002710 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	695b      	ldr	r3, [r3, #20]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d01e      	beq.n	8006150 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006112:	4b06      	ldr	r3, [pc, #24]	@ (800612c <HAL_RCC_OscConfig+0x288>)
 8006114:	2201      	movs	r2, #1
 8006116:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006118:	f7fc ff02 	bl	8002f20 <HAL_GetTick>
 800611c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800611e:	e010      	b.n	8006142 <HAL_RCC_OscConfig+0x29e>
 8006120:	0800fe0c 	.word	0x0800fe0c
 8006124:	40023800 	.word	0x40023800
 8006128:	42470000 	.word	0x42470000
 800612c:	42470e80 	.word	0x42470e80
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006130:	f7fc fef6 	bl	8002f20 <HAL_GetTick>
 8006134:	4602      	mov	r2, r0
 8006136:	693b      	ldr	r3, [r7, #16]
 8006138:	1ad3      	subs	r3, r2, r3
 800613a:	2b02      	cmp	r3, #2
 800613c:	d901      	bls.n	8006142 <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 800613e:	2303      	movs	r3, #3
 8006140:	e1d2      	b.n	80064e8 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006142:	4b5e      	ldr	r3, [pc, #376]	@ (80062bc <HAL_RCC_OscConfig+0x418>)
 8006144:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006146:	f003 0302 	and.w	r3, r3, #2
 800614a:	2b00      	cmp	r3, #0
 800614c:	d0f0      	beq.n	8006130 <HAL_RCC_OscConfig+0x28c>
 800614e:	e015      	b.n	800617c <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006150:	4b5b      	ldr	r3, [pc, #364]	@ (80062c0 <HAL_RCC_OscConfig+0x41c>)
 8006152:	2200      	movs	r2, #0
 8006154:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006156:	f7fc fee3 	bl	8002f20 <HAL_GetTick>
 800615a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800615c:	e008      	b.n	8006170 <HAL_RCC_OscConfig+0x2cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800615e:	f7fc fedf 	bl	8002f20 <HAL_GetTick>
 8006162:	4602      	mov	r2, r0
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	2b02      	cmp	r3, #2
 800616a:	d901      	bls.n	8006170 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 800616c:	2303      	movs	r3, #3
 800616e:	e1bb      	b.n	80064e8 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006170:	4b52      	ldr	r3, [pc, #328]	@ (80062bc <HAL_RCC_OscConfig+0x418>)
 8006172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006174:	f003 0302 	and.w	r3, r3, #2
 8006178:	2b00      	cmp	r3, #0
 800617a:	d1f0      	bne.n	800615e <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	f003 0304 	and.w	r3, r3, #4
 8006184:	2b00      	cmp	r3, #0
 8006186:	f000 80b0 	beq.w	80062ea <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 800618a:	2300      	movs	r3, #0
 800618c:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	689b      	ldr	r3, [r3, #8]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d00c      	beq.n	80061b0 <HAL_RCC_OscConfig+0x30c>
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	2b01      	cmp	r3, #1
 800619c:	d008      	beq.n	80061b0 <HAL_RCC_OscConfig+0x30c>
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	689b      	ldr	r3, [r3, #8]
 80061a2:	2b05      	cmp	r3, #5
 80061a4:	d004      	beq.n	80061b0 <HAL_RCC_OscConfig+0x30c>
 80061a6:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 80061aa:	4846      	ldr	r0, [pc, #280]	@ (80062c4 <HAL_RCC_OscConfig+0x420>)
 80061ac:	f7fc fab0 	bl	8002710 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80061b0:	4b42      	ldr	r3, [pc, #264]	@ (80062bc <HAL_RCC_OscConfig+0x418>)
 80061b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d10f      	bne.n	80061dc <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80061bc:	2300      	movs	r3, #0
 80061be:	60bb      	str	r3, [r7, #8]
 80061c0:	4b3e      	ldr	r3, [pc, #248]	@ (80062bc <HAL_RCC_OscConfig+0x418>)
 80061c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c4:	4a3d      	ldr	r2, [pc, #244]	@ (80062bc <HAL_RCC_OscConfig+0x418>)
 80061c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80061ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80061cc:	4b3b      	ldr	r3, [pc, #236]	@ (80062bc <HAL_RCC_OscConfig+0x418>)
 80061ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061d0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80061d4:	60bb      	str	r3, [r7, #8]
 80061d6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80061d8:	2301      	movs	r3, #1
 80061da:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061dc:	4b3a      	ldr	r3, [pc, #232]	@ (80062c8 <HAL_RCC_OscConfig+0x424>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d118      	bne.n	800621a <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80061e8:	4b37      	ldr	r3, [pc, #220]	@ (80062c8 <HAL_RCC_OscConfig+0x424>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	4a36      	ldr	r2, [pc, #216]	@ (80062c8 <HAL_RCC_OscConfig+0x424>)
 80061ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80061f2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80061f4:	f7fc fe94 	bl	8002f20 <HAL_GetTick>
 80061f8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80061fa:	e008      	b.n	800620e <HAL_RCC_OscConfig+0x36a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80061fc:	f7fc fe90 	bl	8002f20 <HAL_GetTick>
 8006200:	4602      	mov	r2, r0
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	1ad3      	subs	r3, r2, r3
 8006206:	2b02      	cmp	r3, #2
 8006208:	d901      	bls.n	800620e <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 800620a:	2303      	movs	r3, #3
 800620c:	e16c      	b.n	80064e8 <HAL_RCC_OscConfig+0x644>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800620e:	4b2e      	ldr	r3, [pc, #184]	@ (80062c8 <HAL_RCC_OscConfig+0x424>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006216:	2b00      	cmp	r3, #0
 8006218:	d0f0      	beq.n	80061fc <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	689b      	ldr	r3, [r3, #8]
 800621e:	2b01      	cmp	r3, #1
 8006220:	d106      	bne.n	8006230 <HAL_RCC_OscConfig+0x38c>
 8006222:	4b26      	ldr	r3, [pc, #152]	@ (80062bc <HAL_RCC_OscConfig+0x418>)
 8006224:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006226:	4a25      	ldr	r2, [pc, #148]	@ (80062bc <HAL_RCC_OscConfig+0x418>)
 8006228:	f043 0301 	orr.w	r3, r3, #1
 800622c:	6713      	str	r3, [r2, #112]	@ 0x70
 800622e:	e01c      	b.n	800626a <HAL_RCC_OscConfig+0x3c6>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	689b      	ldr	r3, [r3, #8]
 8006234:	2b05      	cmp	r3, #5
 8006236:	d10c      	bne.n	8006252 <HAL_RCC_OscConfig+0x3ae>
 8006238:	4b20      	ldr	r3, [pc, #128]	@ (80062bc <HAL_RCC_OscConfig+0x418>)
 800623a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800623c:	4a1f      	ldr	r2, [pc, #124]	@ (80062bc <HAL_RCC_OscConfig+0x418>)
 800623e:	f043 0304 	orr.w	r3, r3, #4
 8006242:	6713      	str	r3, [r2, #112]	@ 0x70
 8006244:	4b1d      	ldr	r3, [pc, #116]	@ (80062bc <HAL_RCC_OscConfig+0x418>)
 8006246:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006248:	4a1c      	ldr	r2, [pc, #112]	@ (80062bc <HAL_RCC_OscConfig+0x418>)
 800624a:	f043 0301 	orr.w	r3, r3, #1
 800624e:	6713      	str	r3, [r2, #112]	@ 0x70
 8006250:	e00b      	b.n	800626a <HAL_RCC_OscConfig+0x3c6>
 8006252:	4b1a      	ldr	r3, [pc, #104]	@ (80062bc <HAL_RCC_OscConfig+0x418>)
 8006254:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006256:	4a19      	ldr	r2, [pc, #100]	@ (80062bc <HAL_RCC_OscConfig+0x418>)
 8006258:	f023 0301 	bic.w	r3, r3, #1
 800625c:	6713      	str	r3, [r2, #112]	@ 0x70
 800625e:	4b17      	ldr	r3, [pc, #92]	@ (80062bc <HAL_RCC_OscConfig+0x418>)
 8006260:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006262:	4a16      	ldr	r2, [pc, #88]	@ (80062bc <HAL_RCC_OscConfig+0x418>)
 8006264:	f023 0304 	bic.w	r3, r3, #4
 8006268:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	689b      	ldr	r3, [r3, #8]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d015      	beq.n	800629e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006272:	f7fc fe55 	bl	8002f20 <HAL_GetTick>
 8006276:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006278:	e00a      	b.n	8006290 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800627a:	f7fc fe51 	bl	8002f20 <HAL_GetTick>
 800627e:	4602      	mov	r2, r0
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	1ad3      	subs	r3, r2, r3
 8006284:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006288:	4293      	cmp	r3, r2
 800628a:	d901      	bls.n	8006290 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 800628c:	2303      	movs	r3, #3
 800628e:	e12b      	b.n	80064e8 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006290:	4b0a      	ldr	r3, [pc, #40]	@ (80062bc <HAL_RCC_OscConfig+0x418>)
 8006292:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006294:	f003 0302 	and.w	r3, r3, #2
 8006298:	2b00      	cmp	r3, #0
 800629a:	d0ee      	beq.n	800627a <HAL_RCC_OscConfig+0x3d6>
 800629c:	e01c      	b.n	80062d8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800629e:	f7fc fe3f 	bl	8002f20 <HAL_GetTick>
 80062a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062a4:	e012      	b.n	80062cc <HAL_RCC_OscConfig+0x428>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80062a6:	f7fc fe3b 	bl	8002f20 <HAL_GetTick>
 80062aa:	4602      	mov	r2, r0
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	1ad3      	subs	r3, r2, r3
 80062b0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d909      	bls.n	80062cc <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 80062b8:	2303      	movs	r3, #3
 80062ba:	e115      	b.n	80064e8 <HAL_RCC_OscConfig+0x644>
 80062bc:	40023800 	.word	0x40023800
 80062c0:	42470e80 	.word	0x42470e80
 80062c4:	0800fe0c 	.word	0x0800fe0c
 80062c8:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80062cc:	4b88      	ldr	r3, [pc, #544]	@ (80064f0 <HAL_RCC_OscConfig+0x64c>)
 80062ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80062d0:	f003 0302 	and.w	r3, r3, #2
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d1e6      	bne.n	80062a6 <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80062d8:	7dfb      	ldrb	r3, [r7, #23]
 80062da:	2b01      	cmp	r3, #1
 80062dc:	d105      	bne.n	80062ea <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80062de:	4b84      	ldr	r3, [pc, #528]	@ (80064f0 <HAL_RCC_OscConfig+0x64c>)
 80062e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062e2:	4a83      	ldr	r2, [pc, #524]	@ (80064f0 <HAL_RCC_OscConfig+0x64c>)
 80062e4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80062e8:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	699b      	ldr	r3, [r3, #24]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d00c      	beq.n	800630c <HAL_RCC_OscConfig+0x468>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d008      	beq.n	800630c <HAL_RCC_OscConfig+0x468>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	699b      	ldr	r3, [r3, #24]
 80062fe:	2b02      	cmp	r3, #2
 8006300:	d004      	beq.n	800630c <HAL_RCC_OscConfig+0x468>
 8006302:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8006306:	487b      	ldr	r0, [pc, #492]	@ (80064f4 <HAL_RCC_OscConfig+0x650>)
 8006308:	f7fc fa02 	bl	8002710 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	699b      	ldr	r3, [r3, #24]
 8006310:	2b00      	cmp	r3, #0
 8006312:	f000 80e8 	beq.w	80064e6 <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006316:	4b76      	ldr	r3, [pc, #472]	@ (80064f0 <HAL_RCC_OscConfig+0x64c>)
 8006318:	689b      	ldr	r3, [r3, #8]
 800631a:	f003 030c 	and.w	r3, r3, #12
 800631e:	2b08      	cmp	r3, #8
 8006320:	f000 80a9 	beq.w	8006476 <HAL_RCC_OscConfig+0x5d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	699b      	ldr	r3, [r3, #24]
 8006328:	2b02      	cmp	r3, #2
 800632a:	f040 808d 	bne.w	8006448 <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	69db      	ldr	r3, [r3, #28]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d009      	beq.n	800634a <HAL_RCC_OscConfig+0x4a6>
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	69db      	ldr	r3, [r3, #28]
 800633a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800633e:	d004      	beq.n	800634a <HAL_RCC_OscConfig+0x4a6>
 8006340:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 8006344:	486b      	ldr	r0, [pc, #428]	@ (80064f4 <HAL_RCC_OscConfig+0x650>)
 8006346:	f7fc f9e3 	bl	8002710 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a1b      	ldr	r3, [r3, #32]
 800634e:	2b01      	cmp	r3, #1
 8006350:	d903      	bls.n	800635a <HAL_RCC_OscConfig+0x4b6>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6a1b      	ldr	r3, [r3, #32]
 8006356:	2b3f      	cmp	r3, #63	@ 0x3f
 8006358:	d904      	bls.n	8006364 <HAL_RCC_OscConfig+0x4c0>
 800635a:	f240 11d7 	movw	r1, #471	@ 0x1d7
 800635e:	4865      	ldr	r0, [pc, #404]	@ (80064f4 <HAL_RCC_OscConfig+0x650>)
 8006360:	f7fc f9d6 	bl	8002710 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006368:	2b31      	cmp	r3, #49	@ 0x31
 800636a:	d904      	bls.n	8006376 <HAL_RCC_OscConfig+0x4d2>
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006370:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 8006374:	d904      	bls.n	8006380 <HAL_RCC_OscConfig+0x4dc>
 8006376:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 800637a:	485e      	ldr	r0, [pc, #376]	@ (80064f4 <HAL_RCC_OscConfig+0x650>)
 800637c:	f7fc f9c8 	bl	8002710 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006384:	2b02      	cmp	r3, #2
 8006386:	d010      	beq.n	80063aa <HAL_RCC_OscConfig+0x506>
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800638c:	2b04      	cmp	r3, #4
 800638e:	d00c      	beq.n	80063aa <HAL_RCC_OscConfig+0x506>
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006394:	2b06      	cmp	r3, #6
 8006396:	d008      	beq.n	80063aa <HAL_RCC_OscConfig+0x506>
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800639c:	2b08      	cmp	r3, #8
 800639e:	d004      	beq.n	80063aa <HAL_RCC_OscConfig+0x506>
 80063a0:	f240 11d9 	movw	r1, #473	@ 0x1d9
 80063a4:	4853      	ldr	r0, [pc, #332]	@ (80064f4 <HAL_RCC_OscConfig+0x650>)
 80063a6:	f7fc f9b3 	bl	8002710 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d903      	bls.n	80063ba <HAL_RCC_OscConfig+0x516>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063b6:	2b0f      	cmp	r3, #15
 80063b8:	d904      	bls.n	80063c4 <HAL_RCC_OscConfig+0x520>
 80063ba:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 80063be:	484d      	ldr	r0, [pc, #308]	@ (80064f4 <HAL_RCC_OscConfig+0x650>)
 80063c0:	f7fc f9a6 	bl	8002710 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80063c4:	4b4c      	ldr	r3, [pc, #304]	@ (80064f8 <HAL_RCC_OscConfig+0x654>)
 80063c6:	2200      	movs	r2, #0
 80063c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ca:	f7fc fda9 	bl	8002f20 <HAL_GetTick>
 80063ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063d0:	e008      	b.n	80063e4 <HAL_RCC_OscConfig+0x540>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80063d2:	f7fc fda5 	bl	8002f20 <HAL_GetTick>
 80063d6:	4602      	mov	r2, r0
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	1ad3      	subs	r3, r2, r3
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d901      	bls.n	80063e4 <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 80063e0:	2303      	movs	r3, #3
 80063e2:	e081      	b.n	80064e8 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80063e4:	4b42      	ldr	r3, [pc, #264]	@ (80064f0 <HAL_RCC_OscConfig+0x64c>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d1f0      	bne.n	80063d2 <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	69da      	ldr	r2, [r3, #28]
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6a1b      	ldr	r3, [r3, #32]
 80063f8:	431a      	orrs	r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80063fe:	019b      	lsls	r3, r3, #6
 8006400:	431a      	orrs	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006406:	085b      	lsrs	r3, r3, #1
 8006408:	3b01      	subs	r3, #1
 800640a:	041b      	lsls	r3, r3, #16
 800640c:	431a      	orrs	r2, r3
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006412:	061b      	lsls	r3, r3, #24
 8006414:	4936      	ldr	r1, [pc, #216]	@ (80064f0 <HAL_RCC_OscConfig+0x64c>)
 8006416:	4313      	orrs	r3, r2
 8006418:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800641a:	4b37      	ldr	r3, [pc, #220]	@ (80064f8 <HAL_RCC_OscConfig+0x654>)
 800641c:	2201      	movs	r2, #1
 800641e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006420:	f7fc fd7e 	bl	8002f20 <HAL_GetTick>
 8006424:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006426:	e008      	b.n	800643a <HAL_RCC_OscConfig+0x596>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006428:	f7fc fd7a 	bl	8002f20 <HAL_GetTick>
 800642c:	4602      	mov	r2, r0
 800642e:	693b      	ldr	r3, [r7, #16]
 8006430:	1ad3      	subs	r3, r2, r3
 8006432:	2b02      	cmp	r3, #2
 8006434:	d901      	bls.n	800643a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8006436:	2303      	movs	r3, #3
 8006438:	e056      	b.n	80064e8 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800643a:	4b2d      	ldr	r3, [pc, #180]	@ (80064f0 <HAL_RCC_OscConfig+0x64c>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006442:	2b00      	cmp	r3, #0
 8006444:	d0f0      	beq.n	8006428 <HAL_RCC_OscConfig+0x584>
 8006446:	e04e      	b.n	80064e6 <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006448:	4b2b      	ldr	r3, [pc, #172]	@ (80064f8 <HAL_RCC_OscConfig+0x654>)
 800644a:	2200      	movs	r2, #0
 800644c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800644e:	f7fc fd67 	bl	8002f20 <HAL_GetTick>
 8006452:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006454:	e008      	b.n	8006468 <HAL_RCC_OscConfig+0x5c4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006456:	f7fc fd63 	bl	8002f20 <HAL_GetTick>
 800645a:	4602      	mov	r2, r0
 800645c:	693b      	ldr	r3, [r7, #16]
 800645e:	1ad3      	subs	r3, r2, r3
 8006460:	2b02      	cmp	r3, #2
 8006462:	d901      	bls.n	8006468 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 8006464:	2303      	movs	r3, #3
 8006466:	e03f      	b.n	80064e8 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006468:	4b21      	ldr	r3, [pc, #132]	@ (80064f0 <HAL_RCC_OscConfig+0x64c>)
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006470:	2b00      	cmp	r3, #0
 8006472:	d1f0      	bne.n	8006456 <HAL_RCC_OscConfig+0x5b2>
 8006474:	e037      	b.n	80064e6 <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	699b      	ldr	r3, [r3, #24]
 800647a:	2b01      	cmp	r3, #1
 800647c:	d101      	bne.n	8006482 <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e032      	b.n	80064e8 <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006482:	4b1b      	ldr	r3, [pc, #108]	@ (80064f0 <HAL_RCC_OscConfig+0x64c>)
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	699b      	ldr	r3, [r3, #24]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d028      	beq.n	80064e2 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800649a:	429a      	cmp	r2, r3
 800649c:	d121      	bne.n	80064e2 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d11a      	bne.n	80064e2 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80064b2:	4013      	ands	r3, r2
 80064b4:	687a      	ldr	r2, [r7, #4]
 80064b6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80064b8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80064ba:	4293      	cmp	r3, r2
 80064bc:	d111      	bne.n	80064e2 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064c8:	085b      	lsrs	r3, r3, #1
 80064ca:	3b01      	subs	r3, #1
 80064cc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d107      	bne.n	80064e2 <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064dc:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80064de:	429a      	cmp	r2, r3
 80064e0:	d001      	beq.n	80064e6 <HAL_RCC_OscConfig+0x642>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80064e2:	2301      	movs	r3, #1
 80064e4:	e000      	b.n	80064e8 <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 80064e6:	2300      	movs	r3, #0
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3718      	adds	r7, #24
 80064ec:	46bd      	mov	sp, r7
 80064ee:	bd80      	pop	{r7, pc}
 80064f0:	40023800 	.word	0x40023800
 80064f4:	0800fe0c 	.word	0x0800fe0c
 80064f8:	42470060 	.word	0x42470060

080064fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	e174      	b.n	80067fa <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	2b00      	cmp	r3, #0
 8006516:	d003      	beq.n	8006520 <HAL_RCC_ClockConfig+0x24>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	2b0f      	cmp	r3, #15
 800651e:	d904      	bls.n	800652a <HAL_RCC_ClockConfig+0x2e>
 8006520:	f240 215a 	movw	r1, #602	@ 0x25a
 8006524:	487b      	ldr	r0, [pc, #492]	@ (8006714 <HAL_RCC_ClockConfig+0x218>)
 8006526:	f7fc f8f3 	bl	8002710 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	2b00      	cmp	r3, #0
 800652e:	d019      	beq.n	8006564 <HAL_RCC_ClockConfig+0x68>
 8006530:	683b      	ldr	r3, [r7, #0]
 8006532:	2b01      	cmp	r3, #1
 8006534:	d016      	beq.n	8006564 <HAL_RCC_ClockConfig+0x68>
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2b02      	cmp	r3, #2
 800653a:	d013      	beq.n	8006564 <HAL_RCC_ClockConfig+0x68>
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	2b03      	cmp	r3, #3
 8006540:	d010      	beq.n	8006564 <HAL_RCC_ClockConfig+0x68>
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	2b04      	cmp	r3, #4
 8006546:	d00d      	beq.n	8006564 <HAL_RCC_ClockConfig+0x68>
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	2b05      	cmp	r3, #5
 800654c:	d00a      	beq.n	8006564 <HAL_RCC_ClockConfig+0x68>
 800654e:	683b      	ldr	r3, [r7, #0]
 8006550:	2b06      	cmp	r3, #6
 8006552:	d007      	beq.n	8006564 <HAL_RCC_ClockConfig+0x68>
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	2b07      	cmp	r3, #7
 8006558:	d004      	beq.n	8006564 <HAL_RCC_ClockConfig+0x68>
 800655a:	f240 215b 	movw	r1, #603	@ 0x25b
 800655e:	486d      	ldr	r0, [pc, #436]	@ (8006714 <HAL_RCC_ClockConfig+0x218>)
 8006560:	f7fc f8d6 	bl	8002710 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006564:	4b6c      	ldr	r3, [pc, #432]	@ (8006718 <HAL_RCC_ClockConfig+0x21c>)
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	f003 0307 	and.w	r3, r3, #7
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	429a      	cmp	r2, r3
 8006570:	d90c      	bls.n	800658c <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006572:	4b69      	ldr	r3, [pc, #420]	@ (8006718 <HAL_RCC_ClockConfig+0x21c>)
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	b2d2      	uxtb	r2, r2
 8006578:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800657a:	4b67      	ldr	r3, [pc, #412]	@ (8006718 <HAL_RCC_ClockConfig+0x21c>)
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	f003 0307 	and.w	r3, r3, #7
 8006582:	683a      	ldr	r2, [r7, #0]
 8006584:	429a      	cmp	r2, r3
 8006586:	d001      	beq.n	800658c <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e136      	b.n	80067fa <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0302 	and.w	r3, r3, #2
 8006594:	2b00      	cmp	r3, #0
 8006596:	d049      	beq.n	800662c <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f003 0304 	and.w	r3, r3, #4
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d005      	beq.n	80065b0 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80065a4:	4b5d      	ldr	r3, [pc, #372]	@ (800671c <HAL_RCC_ClockConfig+0x220>)
 80065a6:	689b      	ldr	r3, [r3, #8]
 80065a8:	4a5c      	ldr	r2, [pc, #368]	@ (800671c <HAL_RCC_ClockConfig+0x220>)
 80065aa:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80065ae:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f003 0308 	and.w	r3, r3, #8
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d005      	beq.n	80065c8 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80065bc:	4b57      	ldr	r3, [pc, #348]	@ (800671c <HAL_RCC_ClockConfig+0x220>)
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	4a56      	ldr	r2, [pc, #344]	@ (800671c <HAL_RCC_ClockConfig+0x220>)
 80065c2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80065c6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	689b      	ldr	r3, [r3, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d024      	beq.n	800661a <HAL_RCC_ClockConfig+0x11e>
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	689b      	ldr	r3, [r3, #8]
 80065d4:	2b80      	cmp	r3, #128	@ 0x80
 80065d6:	d020      	beq.n	800661a <HAL_RCC_ClockConfig+0x11e>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	689b      	ldr	r3, [r3, #8]
 80065dc:	2b90      	cmp	r3, #144	@ 0x90
 80065de:	d01c      	beq.n	800661a <HAL_RCC_ClockConfig+0x11e>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	2ba0      	cmp	r3, #160	@ 0xa0
 80065e6:	d018      	beq.n	800661a <HAL_RCC_ClockConfig+0x11e>
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	689b      	ldr	r3, [r3, #8]
 80065ec:	2bb0      	cmp	r3, #176	@ 0xb0
 80065ee:	d014      	beq.n	800661a <HAL_RCC_ClockConfig+0x11e>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	689b      	ldr	r3, [r3, #8]
 80065f4:	2bc0      	cmp	r3, #192	@ 0xc0
 80065f6:	d010      	beq.n	800661a <HAL_RCC_ClockConfig+0x11e>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	2bd0      	cmp	r3, #208	@ 0xd0
 80065fe:	d00c      	beq.n	800661a <HAL_RCC_ClockConfig+0x11e>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	689b      	ldr	r3, [r3, #8]
 8006604:	2be0      	cmp	r3, #224	@ 0xe0
 8006606:	d008      	beq.n	800661a <HAL_RCC_ClockConfig+0x11e>
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	2bf0      	cmp	r3, #240	@ 0xf0
 800660e:	d004      	beq.n	800661a <HAL_RCC_ClockConfig+0x11e>
 8006610:	f240 217e 	movw	r1, #638	@ 0x27e
 8006614:	483f      	ldr	r0, [pc, #252]	@ (8006714 <HAL_RCC_ClockConfig+0x218>)
 8006616:	f7fc f87b 	bl	8002710 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800661a:	4b40      	ldr	r3, [pc, #256]	@ (800671c <HAL_RCC_ClockConfig+0x220>)
 800661c:	689b      	ldr	r3, [r3, #8]
 800661e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	689b      	ldr	r3, [r3, #8]
 8006626:	493d      	ldr	r1, [pc, #244]	@ (800671c <HAL_RCC_ClockConfig+0x220>)
 8006628:	4313      	orrs	r3, r2
 800662a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	f003 0301 	and.w	r3, r3, #1
 8006634:	2b00      	cmp	r3, #0
 8006636:	d059      	beq.n	80066ec <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	685b      	ldr	r3, [r3, #4]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d010      	beq.n	8006662 <HAL_RCC_ClockConfig+0x166>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	685b      	ldr	r3, [r3, #4]
 8006644:	2b01      	cmp	r3, #1
 8006646:	d00c      	beq.n	8006662 <HAL_RCC_ClockConfig+0x166>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685b      	ldr	r3, [r3, #4]
 800664c:	2b02      	cmp	r3, #2
 800664e:	d008      	beq.n	8006662 <HAL_RCC_ClockConfig+0x166>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	685b      	ldr	r3, [r3, #4]
 8006654:	2b03      	cmp	r3, #3
 8006656:	d004      	beq.n	8006662 <HAL_RCC_ClockConfig+0x166>
 8006658:	f240 2185 	movw	r1, #645	@ 0x285
 800665c:	482d      	ldr	r0, [pc, #180]	@ (8006714 <HAL_RCC_ClockConfig+0x218>)
 800665e:	f7fc f857 	bl	8002710 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d107      	bne.n	800667a <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800666a:	4b2c      	ldr	r3, [pc, #176]	@ (800671c <HAL_RCC_ClockConfig+0x220>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006672:	2b00      	cmp	r3, #0
 8006674:	d119      	bne.n	80066aa <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006676:	2301      	movs	r3, #1
 8006678:	e0bf      	b.n	80067fa <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	2b02      	cmp	r3, #2
 8006680:	d003      	beq.n	800668a <HAL_RCC_ClockConfig+0x18e>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006686:	2b03      	cmp	r3, #3
 8006688:	d107      	bne.n	800669a <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800668a:	4b24      	ldr	r3, [pc, #144]	@ (800671c <HAL_RCC_ClockConfig+0x220>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006692:	2b00      	cmp	r3, #0
 8006694:	d109      	bne.n	80066aa <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e0af      	b.n	80067fa <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800669a:	4b20      	ldr	r3, [pc, #128]	@ (800671c <HAL_RCC_ClockConfig+0x220>)
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	f003 0302 	and.w	r3, r3, #2
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d101      	bne.n	80066aa <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 80066a6:	2301      	movs	r3, #1
 80066a8:	e0a7      	b.n	80067fa <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80066aa:	4b1c      	ldr	r3, [pc, #112]	@ (800671c <HAL_RCC_ClockConfig+0x220>)
 80066ac:	689b      	ldr	r3, [r3, #8]
 80066ae:	f023 0203 	bic.w	r2, r3, #3
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	4919      	ldr	r1, [pc, #100]	@ (800671c <HAL_RCC_ClockConfig+0x220>)
 80066b8:	4313      	orrs	r3, r2
 80066ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80066bc:	f7fc fc30 	bl	8002f20 <HAL_GetTick>
 80066c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066c2:	e00a      	b.n	80066da <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80066c4:	f7fc fc2c 	bl	8002f20 <HAL_GetTick>
 80066c8:	4602      	mov	r2, r0
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	1ad3      	subs	r3, r2, r3
 80066ce:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066d2:	4293      	cmp	r3, r2
 80066d4:	d901      	bls.n	80066da <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80066d6:	2303      	movs	r3, #3
 80066d8:	e08f      	b.n	80067fa <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80066da:	4b10      	ldr	r3, [pc, #64]	@ (800671c <HAL_RCC_ClockConfig+0x220>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f003 020c 	and.w	r2, r3, #12
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	685b      	ldr	r3, [r3, #4]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	429a      	cmp	r2, r3
 80066ea:	d1eb      	bne.n	80066c4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80066ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006718 <HAL_RCC_ClockConfig+0x21c>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f003 0307 	and.w	r3, r3, #7
 80066f4:	683a      	ldr	r2, [r7, #0]
 80066f6:	429a      	cmp	r2, r3
 80066f8:	d212      	bcs.n	8006720 <HAL_RCC_ClockConfig+0x224>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066fa:	4b07      	ldr	r3, [pc, #28]	@ (8006718 <HAL_RCC_ClockConfig+0x21c>)
 80066fc:	683a      	ldr	r2, [r7, #0]
 80066fe:	b2d2      	uxtb	r2, r2
 8006700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006702:	4b05      	ldr	r3, [pc, #20]	@ (8006718 <HAL_RCC_ClockConfig+0x21c>)
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f003 0307 	and.w	r3, r3, #7
 800670a:	683a      	ldr	r2, [r7, #0]
 800670c:	429a      	cmp	r2, r3
 800670e:	d007      	beq.n	8006720 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8006710:	2301      	movs	r3, #1
 8006712:	e072      	b.n	80067fa <HAL_RCC_ClockConfig+0x2fe>
 8006714:	0800fe0c 	.word	0x0800fe0c
 8006718:	40023c00 	.word	0x40023c00
 800671c:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f003 0304 	and.w	r3, r3, #4
 8006728:	2b00      	cmp	r3, #0
 800672a:	d025      	beq.n	8006778 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d018      	beq.n	8006766 <HAL_RCC_ClockConfig+0x26a>
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800673c:	d013      	beq.n	8006766 <HAL_RCC_ClockConfig+0x26a>
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	68db      	ldr	r3, [r3, #12]
 8006742:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006746:	d00e      	beq.n	8006766 <HAL_RCC_ClockConfig+0x26a>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	68db      	ldr	r3, [r3, #12]
 800674c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8006750:	d009      	beq.n	8006766 <HAL_RCC_ClockConfig+0x26a>
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	68db      	ldr	r3, [r3, #12]
 8006756:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 800675a:	d004      	beq.n	8006766 <HAL_RCC_ClockConfig+0x26a>
 800675c:	f240 21c3 	movw	r1, #707	@ 0x2c3
 8006760:	4828      	ldr	r0, [pc, #160]	@ (8006804 <HAL_RCC_ClockConfig+0x308>)
 8006762:	f7fb ffd5 	bl	8002710 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006766:	4b28      	ldr	r3, [pc, #160]	@ (8006808 <HAL_RCC_ClockConfig+0x30c>)
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	68db      	ldr	r3, [r3, #12]
 8006772:	4925      	ldr	r1, [pc, #148]	@ (8006808 <HAL_RCC_ClockConfig+0x30c>)
 8006774:	4313      	orrs	r3, r2
 8006776:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f003 0308 	and.w	r3, r3, #8
 8006780:	2b00      	cmp	r3, #0
 8006782:	d026      	beq.n	80067d2 <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	691b      	ldr	r3, [r3, #16]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d018      	beq.n	80067be <HAL_RCC_ClockConfig+0x2c2>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	691b      	ldr	r3, [r3, #16]
 8006790:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006794:	d013      	beq.n	80067be <HAL_RCC_ClockConfig+0x2c2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	691b      	ldr	r3, [r3, #16]
 800679a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800679e:	d00e      	beq.n	80067be <HAL_RCC_ClockConfig+0x2c2>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 80067a8:	d009      	beq.n	80067be <HAL_RCC_ClockConfig+0x2c2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	691b      	ldr	r3, [r3, #16]
 80067ae:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 80067b2:	d004      	beq.n	80067be <HAL_RCC_ClockConfig+0x2c2>
 80067b4:	f240 21ca 	movw	r1, #714	@ 0x2ca
 80067b8:	4812      	ldr	r0, [pc, #72]	@ (8006804 <HAL_RCC_ClockConfig+0x308>)
 80067ba:	f7fb ffa9 	bl	8002710 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80067be:	4b12      	ldr	r3, [pc, #72]	@ (8006808 <HAL_RCC_ClockConfig+0x30c>)
 80067c0:	689b      	ldr	r3, [r3, #8]
 80067c2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	691b      	ldr	r3, [r3, #16]
 80067ca:	00db      	lsls	r3, r3, #3
 80067cc:	490e      	ldr	r1, [pc, #56]	@ (8006808 <HAL_RCC_ClockConfig+0x30c>)
 80067ce:	4313      	orrs	r3, r2
 80067d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80067d2:	f000 f821 	bl	8006818 <HAL_RCC_GetSysClockFreq>
 80067d6:	4602      	mov	r2, r0
 80067d8:	4b0b      	ldr	r3, [pc, #44]	@ (8006808 <HAL_RCC_ClockConfig+0x30c>)
 80067da:	689b      	ldr	r3, [r3, #8]
 80067dc:	091b      	lsrs	r3, r3, #4
 80067de:	f003 030f 	and.w	r3, r3, #15
 80067e2:	490a      	ldr	r1, [pc, #40]	@ (800680c <HAL_RCC_ClockConfig+0x310>)
 80067e4:	5ccb      	ldrb	r3, [r1, r3]
 80067e6:	fa22 f303 	lsr.w	r3, r2, r3
 80067ea:	4a09      	ldr	r2, [pc, #36]	@ (8006810 <HAL_RCC_ClockConfig+0x314>)
 80067ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80067ee:	4b09      	ldr	r3, [pc, #36]	@ (8006814 <HAL_RCC_ClockConfig+0x318>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4618      	mov	r0, r3
 80067f4:	f7fc f9fc 	bl	8002bf0 <HAL_InitTick>

  return HAL_OK;
 80067f8:	2300      	movs	r3, #0
}
 80067fa:	4618      	mov	r0, r3
 80067fc:	3710      	adds	r7, #16
 80067fe:	46bd      	mov	sp, r7
 8006800:	bd80      	pop	{r7, pc}
 8006802:	bf00      	nop
 8006804:	0800fe0c 	.word	0x0800fe0c
 8006808:	40023800 	.word	0x40023800
 800680c:	0800ff78 	.word	0x0800ff78
 8006810:	20000000 	.word	0x20000000
 8006814:	20000004 	.word	0x20000004

08006818 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006818:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800681c:	b090      	sub	sp, #64	@ 0x40
 800681e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006820:	2300      	movs	r3, #0
 8006822:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8006824:	2300      	movs	r3, #0
 8006826:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006828:	2300      	movs	r3, #0
 800682a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006830:	4b59      	ldr	r3, [pc, #356]	@ (8006998 <HAL_RCC_GetSysClockFreq+0x180>)
 8006832:	689b      	ldr	r3, [r3, #8]
 8006834:	f003 030c 	and.w	r3, r3, #12
 8006838:	2b08      	cmp	r3, #8
 800683a:	d00d      	beq.n	8006858 <HAL_RCC_GetSysClockFreq+0x40>
 800683c:	2b08      	cmp	r3, #8
 800683e:	f200 80a1 	bhi.w	8006984 <HAL_RCC_GetSysClockFreq+0x16c>
 8006842:	2b00      	cmp	r3, #0
 8006844:	d002      	beq.n	800684c <HAL_RCC_GetSysClockFreq+0x34>
 8006846:	2b04      	cmp	r3, #4
 8006848:	d003      	beq.n	8006852 <HAL_RCC_GetSysClockFreq+0x3a>
 800684a:	e09b      	b.n	8006984 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800684c:	4b53      	ldr	r3, [pc, #332]	@ (800699c <HAL_RCC_GetSysClockFreq+0x184>)
 800684e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006850:	e09b      	b.n	800698a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006852:	4b53      	ldr	r3, [pc, #332]	@ (80069a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006854:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006856:	e098      	b.n	800698a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006858:	4b4f      	ldr	r3, [pc, #316]	@ (8006998 <HAL_RCC_GetSysClockFreq+0x180>)
 800685a:	685b      	ldr	r3, [r3, #4]
 800685c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006860:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006862:	4b4d      	ldr	r3, [pc, #308]	@ (8006998 <HAL_RCC_GetSysClockFreq+0x180>)
 8006864:	685b      	ldr	r3, [r3, #4]
 8006866:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800686a:	2b00      	cmp	r3, #0
 800686c:	d028      	beq.n	80068c0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800686e:	4b4a      	ldr	r3, [pc, #296]	@ (8006998 <HAL_RCC_GetSysClockFreq+0x180>)
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	099b      	lsrs	r3, r3, #6
 8006874:	2200      	movs	r2, #0
 8006876:	623b      	str	r3, [r7, #32]
 8006878:	627a      	str	r2, [r7, #36]	@ 0x24
 800687a:	6a3b      	ldr	r3, [r7, #32]
 800687c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006880:	2100      	movs	r1, #0
 8006882:	4b47      	ldr	r3, [pc, #284]	@ (80069a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006884:	fb03 f201 	mul.w	r2, r3, r1
 8006888:	2300      	movs	r3, #0
 800688a:	fb00 f303 	mul.w	r3, r0, r3
 800688e:	4413      	add	r3, r2
 8006890:	4a43      	ldr	r2, [pc, #268]	@ (80069a0 <HAL_RCC_GetSysClockFreq+0x188>)
 8006892:	fba0 1202 	umull	r1, r2, r0, r2
 8006896:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006898:	460a      	mov	r2, r1
 800689a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800689c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800689e:	4413      	add	r3, r2
 80068a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80068a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80068a4:	2200      	movs	r2, #0
 80068a6:	61bb      	str	r3, [r7, #24]
 80068a8:	61fa      	str	r2, [r7, #28]
 80068aa:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068ae:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80068b2:	f7fa fa69 	bl	8000d88 <__aeabi_uldivmod>
 80068b6:	4602      	mov	r2, r0
 80068b8:	460b      	mov	r3, r1
 80068ba:	4613      	mov	r3, r2
 80068bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80068be:	e053      	b.n	8006968 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80068c0:	4b35      	ldr	r3, [pc, #212]	@ (8006998 <HAL_RCC_GetSysClockFreq+0x180>)
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	099b      	lsrs	r3, r3, #6
 80068c6:	2200      	movs	r2, #0
 80068c8:	613b      	str	r3, [r7, #16]
 80068ca:	617a      	str	r2, [r7, #20]
 80068cc:	693b      	ldr	r3, [r7, #16]
 80068ce:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80068d2:	f04f 0b00 	mov.w	fp, #0
 80068d6:	4652      	mov	r2, sl
 80068d8:	465b      	mov	r3, fp
 80068da:	f04f 0000 	mov.w	r0, #0
 80068de:	f04f 0100 	mov.w	r1, #0
 80068e2:	0159      	lsls	r1, r3, #5
 80068e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80068e8:	0150      	lsls	r0, r2, #5
 80068ea:	4602      	mov	r2, r0
 80068ec:	460b      	mov	r3, r1
 80068ee:	ebb2 080a 	subs.w	r8, r2, sl
 80068f2:	eb63 090b 	sbc.w	r9, r3, fp
 80068f6:	f04f 0200 	mov.w	r2, #0
 80068fa:	f04f 0300 	mov.w	r3, #0
 80068fe:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006902:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006906:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800690a:	ebb2 0408 	subs.w	r4, r2, r8
 800690e:	eb63 0509 	sbc.w	r5, r3, r9
 8006912:	f04f 0200 	mov.w	r2, #0
 8006916:	f04f 0300 	mov.w	r3, #0
 800691a:	00eb      	lsls	r3, r5, #3
 800691c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006920:	00e2      	lsls	r2, r4, #3
 8006922:	4614      	mov	r4, r2
 8006924:	461d      	mov	r5, r3
 8006926:	eb14 030a 	adds.w	r3, r4, sl
 800692a:	603b      	str	r3, [r7, #0]
 800692c:	eb45 030b 	adc.w	r3, r5, fp
 8006930:	607b      	str	r3, [r7, #4]
 8006932:	f04f 0200 	mov.w	r2, #0
 8006936:	f04f 0300 	mov.w	r3, #0
 800693a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800693e:	4629      	mov	r1, r5
 8006940:	028b      	lsls	r3, r1, #10
 8006942:	4621      	mov	r1, r4
 8006944:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006948:	4621      	mov	r1, r4
 800694a:	028a      	lsls	r2, r1, #10
 800694c:	4610      	mov	r0, r2
 800694e:	4619      	mov	r1, r3
 8006950:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006952:	2200      	movs	r2, #0
 8006954:	60bb      	str	r3, [r7, #8]
 8006956:	60fa      	str	r2, [r7, #12]
 8006958:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800695c:	f7fa fa14 	bl	8000d88 <__aeabi_uldivmod>
 8006960:	4602      	mov	r2, r0
 8006962:	460b      	mov	r3, r1
 8006964:	4613      	mov	r3, r2
 8006966:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006968:	4b0b      	ldr	r3, [pc, #44]	@ (8006998 <HAL_RCC_GetSysClockFreq+0x180>)
 800696a:	685b      	ldr	r3, [r3, #4]
 800696c:	0c1b      	lsrs	r3, r3, #16
 800696e:	f003 0303 	and.w	r3, r3, #3
 8006972:	3301      	adds	r3, #1
 8006974:	005b      	lsls	r3, r3, #1
 8006976:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006978:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800697a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800697c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006980:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006982:	e002      	b.n	800698a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006984:	4b05      	ldr	r3, [pc, #20]	@ (800699c <HAL_RCC_GetSysClockFreq+0x184>)
 8006986:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006988:	bf00      	nop
    }
  }
  return sysclockfreq;
 800698a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800698c:	4618      	mov	r0, r3
 800698e:	3740      	adds	r7, #64	@ 0x40
 8006990:	46bd      	mov	sp, r7
 8006992:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006996:	bf00      	nop
 8006998:	40023800 	.word	0x40023800
 800699c:	00f42400 	.word	0x00f42400
 80069a0:	017d7840 	.word	0x017d7840

080069a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80069a4:	b480      	push	{r7}
 80069a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80069a8:	4b03      	ldr	r3, [pc, #12]	@ (80069b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80069aa:	681b      	ldr	r3, [r3, #0]
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	46bd      	mov	sp, r7
 80069b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop
 80069b8:	20000000 	.word	0x20000000

080069bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80069c0:	f7ff fff0 	bl	80069a4 <HAL_RCC_GetHCLKFreq>
 80069c4:	4602      	mov	r2, r0
 80069c6:	4b05      	ldr	r3, [pc, #20]	@ (80069dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	0a9b      	lsrs	r3, r3, #10
 80069cc:	f003 0307 	and.w	r3, r3, #7
 80069d0:	4903      	ldr	r1, [pc, #12]	@ (80069e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80069d2:	5ccb      	ldrb	r3, [r1, r3]
 80069d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80069d8:	4618      	mov	r0, r3
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	40023800 	.word	0x40023800
 80069e0:	0800ff88 	.word	0x0800ff88

080069e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80069e8:	f7ff ffdc 	bl	80069a4 <HAL_RCC_GetHCLKFreq>
 80069ec:	4602      	mov	r2, r0
 80069ee:	4b05      	ldr	r3, [pc, #20]	@ (8006a04 <HAL_RCC_GetPCLK2Freq+0x20>)
 80069f0:	689b      	ldr	r3, [r3, #8]
 80069f2:	0b5b      	lsrs	r3, r3, #13
 80069f4:	f003 0307 	and.w	r3, r3, #7
 80069f8:	4903      	ldr	r1, [pc, #12]	@ (8006a08 <HAL_RCC_GetPCLK2Freq+0x24>)
 80069fa:	5ccb      	ldrb	r3, [r1, r3]
 80069fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	bd80      	pop	{r7, pc}
 8006a04:	40023800 	.word	0x40023800
 8006a08:	0800ff88 	.word	0x0800ff88

08006a0c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b083      	sub	sp, #12
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	220f      	movs	r2, #15
 8006a1a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006a1c:	4b12      	ldr	r3, [pc, #72]	@ (8006a68 <HAL_RCC_GetClockConfig+0x5c>)
 8006a1e:	689b      	ldr	r3, [r3, #8]
 8006a20:	f003 0203 	and.w	r2, r3, #3
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006a28:	4b0f      	ldr	r3, [pc, #60]	@ (8006a68 <HAL_RCC_GetClockConfig+0x5c>)
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006a34:	4b0c      	ldr	r3, [pc, #48]	@ (8006a68 <HAL_RCC_GetClockConfig+0x5c>)
 8006a36:	689b      	ldr	r3, [r3, #8]
 8006a38:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006a40:	4b09      	ldr	r3, [pc, #36]	@ (8006a68 <HAL_RCC_GetClockConfig+0x5c>)
 8006a42:	689b      	ldr	r3, [r3, #8]
 8006a44:	08db      	lsrs	r3, r3, #3
 8006a46:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006a4e:	4b07      	ldr	r3, [pc, #28]	@ (8006a6c <HAL_RCC_GetClockConfig+0x60>)
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	f003 0207 	and.w	r2, r3, #7
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	601a      	str	r2, [r3, #0]
}
 8006a5a:	bf00      	nop
 8006a5c:	370c      	adds	r7, #12
 8006a5e:	46bd      	mov	sp, r7
 8006a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a64:	4770      	bx	lr
 8006a66:	bf00      	nop
 8006a68:	40023800 	.word	0x40023800
 8006a6c:	40023c00 	.word	0x40023c00

08006a70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b082      	sub	sp, #8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006a7e:	2301      	movs	r3, #1
 8006a80:	e0ed      	b.n	8006c5e <HAL_TIM_Base_Init+0x1ee>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a78      	ldr	r2, [pc, #480]	@ (8006c68 <HAL_TIM_Base_Init+0x1f8>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d045      	beq.n	8006b18 <HAL_TIM_Base_Init+0xa8>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006a94:	d040      	beq.n	8006b18 <HAL_TIM_Base_Init+0xa8>
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a74      	ldr	r2, [pc, #464]	@ (8006c6c <HAL_TIM_Base_Init+0x1fc>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d03b      	beq.n	8006b18 <HAL_TIM_Base_Init+0xa8>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a72      	ldr	r2, [pc, #456]	@ (8006c70 <HAL_TIM_Base_Init+0x200>)
 8006aa6:	4293      	cmp	r3, r2
 8006aa8:	d036      	beq.n	8006b18 <HAL_TIM_Base_Init+0xa8>
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	4a71      	ldr	r2, [pc, #452]	@ (8006c74 <HAL_TIM_Base_Init+0x204>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d031      	beq.n	8006b18 <HAL_TIM_Base_Init+0xa8>
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	4a6f      	ldr	r2, [pc, #444]	@ (8006c78 <HAL_TIM_Base_Init+0x208>)
 8006aba:	4293      	cmp	r3, r2
 8006abc:	d02c      	beq.n	8006b18 <HAL_TIM_Base_Init+0xa8>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	4a6e      	ldr	r2, [pc, #440]	@ (8006c7c <HAL_TIM_Base_Init+0x20c>)
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	d027      	beq.n	8006b18 <HAL_TIM_Base_Init+0xa8>
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a6c      	ldr	r2, [pc, #432]	@ (8006c80 <HAL_TIM_Base_Init+0x210>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d022      	beq.n	8006b18 <HAL_TIM_Base_Init+0xa8>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	4a6b      	ldr	r2, [pc, #428]	@ (8006c84 <HAL_TIM_Base_Init+0x214>)
 8006ad8:	4293      	cmp	r3, r2
 8006ada:	d01d      	beq.n	8006b18 <HAL_TIM_Base_Init+0xa8>
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a69      	ldr	r2, [pc, #420]	@ (8006c88 <HAL_TIM_Base_Init+0x218>)
 8006ae2:	4293      	cmp	r3, r2
 8006ae4:	d018      	beq.n	8006b18 <HAL_TIM_Base_Init+0xa8>
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	4a68      	ldr	r2, [pc, #416]	@ (8006c8c <HAL_TIM_Base_Init+0x21c>)
 8006aec:	4293      	cmp	r3, r2
 8006aee:	d013      	beq.n	8006b18 <HAL_TIM_Base_Init+0xa8>
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	4a66      	ldr	r2, [pc, #408]	@ (8006c90 <HAL_TIM_Base_Init+0x220>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d00e      	beq.n	8006b18 <HAL_TIM_Base_Init+0xa8>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	4a65      	ldr	r2, [pc, #404]	@ (8006c94 <HAL_TIM_Base_Init+0x224>)
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d009      	beq.n	8006b18 <HAL_TIM_Base_Init+0xa8>
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	4a63      	ldr	r2, [pc, #396]	@ (8006c98 <HAL_TIM_Base_Init+0x228>)
 8006b0a:	4293      	cmp	r3, r2
 8006b0c:	d004      	beq.n	8006b18 <HAL_TIM_Base_Init+0xa8>
 8006b0e:	f240 1113 	movw	r1, #275	@ 0x113
 8006b12:	4862      	ldr	r0, [pc, #392]	@ (8006c9c <HAL_TIM_Base_Init+0x22c>)
 8006b14:	f7fb fdfc 	bl	8002710 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	689b      	ldr	r3, [r3, #8]
 8006b1c:	2b00      	cmp	r3, #0
 8006b1e:	d014      	beq.n	8006b4a <HAL_TIM_Base_Init+0xda>
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	689b      	ldr	r3, [r3, #8]
 8006b24:	2b10      	cmp	r3, #16
 8006b26:	d010      	beq.n	8006b4a <HAL_TIM_Base_Init+0xda>
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	2b20      	cmp	r3, #32
 8006b2e:	d00c      	beq.n	8006b4a <HAL_TIM_Base_Init+0xda>
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	2b40      	cmp	r3, #64	@ 0x40
 8006b36:	d008      	beq.n	8006b4a <HAL_TIM_Base_Init+0xda>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	2b60      	cmp	r3, #96	@ 0x60
 8006b3e:	d004      	beq.n	8006b4a <HAL_TIM_Base_Init+0xda>
 8006b40:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8006b44:	4855      	ldr	r0, [pc, #340]	@ (8006c9c <HAL_TIM_Base_Init+0x22c>)
 8006b46:	f7fb fde3 	bl	8002710 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	691b      	ldr	r3, [r3, #16]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d00e      	beq.n	8006b70 <HAL_TIM_Base_Init+0x100>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006b5a:	d009      	beq.n	8006b70 <HAL_TIM_Base_Init+0x100>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006b64:	d004      	beq.n	8006b70 <HAL_TIM_Base_Init+0x100>
 8006b66:	f240 1115 	movw	r1, #277	@ 0x115
 8006b6a:	484c      	ldr	r0, [pc, #304]	@ (8006c9c <HAL_TIM_Base_Init+0x22c>)
 8006b6c:	f7fb fdd0 	bl	8002710 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b78:	d004      	beq.n	8006b84 <HAL_TIM_Base_Init+0x114>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a3d      	ldr	r2, [pc, #244]	@ (8006c74 <HAL_TIM_Base_Init+0x204>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d107      	bne.n	8006b94 <HAL_TIM_Base_Init+0x124>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	68db      	ldr	r3, [r3, #12]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	bf14      	ite	ne
 8006b8c:	2301      	movne	r3, #1
 8006b8e:	2300      	moveq	r3, #0
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	e00e      	b.n	8006bb2 <HAL_TIM_Base_Init+0x142>
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d006      	beq.n	8006baa <HAL_TIM_Base_Init+0x13a>
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006ba4:	d201      	bcs.n	8006baa <HAL_TIM_Base_Init+0x13a>
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e000      	b.n	8006bac <HAL_TIM_Base_Init+0x13c>
 8006baa:	2300      	movs	r3, #0
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d104      	bne.n	8006bc0 <HAL_TIM_Base_Init+0x150>
 8006bb6:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8006bba:	4838      	ldr	r0, [pc, #224]	@ (8006c9c <HAL_TIM_Base_Init+0x22c>)
 8006bbc:	f7fb fda8 	bl	8002710 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	699b      	ldr	r3, [r3, #24]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d008      	beq.n	8006bda <HAL_TIM_Base_Init+0x16a>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	699b      	ldr	r3, [r3, #24]
 8006bcc:	2b80      	cmp	r3, #128	@ 0x80
 8006bce:	d004      	beq.n	8006bda <HAL_TIM_Base_Init+0x16a>
 8006bd0:	f240 1117 	movw	r1, #279	@ 0x117
 8006bd4:	4831      	ldr	r0, [pc, #196]	@ (8006c9c <HAL_TIM_Base_Init+0x22c>)
 8006bd6:	f7fb fd9b 	bl	8002710 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006be0:	b2db      	uxtb	r3, r3
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d106      	bne.n	8006bf4 <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	2200      	movs	r2, #0
 8006bea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 f856 	bl	8006ca0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2202      	movs	r2, #2
 8006bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681a      	ldr	r2, [r3, #0]
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	3304      	adds	r3, #4
 8006c04:	4619      	mov	r1, r3
 8006c06:	4610      	mov	r0, r2
 8006c08:	f000 fa32 	bl	8007070 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2201      	movs	r2, #1
 8006c10:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2201      	movs	r2, #1
 8006c18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2201      	movs	r2, #1
 8006c20:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2201      	movs	r2, #1
 8006c28:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	2201      	movs	r2, #1
 8006c30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2201      	movs	r2, #1
 8006c38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2201      	movs	r2, #1
 8006c40:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	2201      	movs	r2, #1
 8006c48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2201      	movs	r2, #1
 8006c58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
 8006c66:	bf00      	nop
 8006c68:	40010000 	.word	0x40010000
 8006c6c:	40000400 	.word	0x40000400
 8006c70:	40000800 	.word	0x40000800
 8006c74:	40000c00 	.word	0x40000c00
 8006c78:	40001000 	.word	0x40001000
 8006c7c:	40001400 	.word	0x40001400
 8006c80:	40010400 	.word	0x40010400
 8006c84:	40014000 	.word	0x40014000
 8006c88:	40014400 	.word	0x40014400
 8006c8c:	40014800 	.word	0x40014800
 8006c90:	40001800 	.word	0x40001800
 8006c94:	40001c00 	.word	0x40001c00
 8006c98:	40002000 	.word	0x40002000
 8006c9c:	0800fe44 	.word	0x0800fe44

08006ca0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006ca0:	b480      	push	{r7}
 8006ca2:	b083      	sub	sp, #12
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006ca8:	bf00      	nop
 8006caa:	370c      	adds	r7, #12
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr

08006cb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006cb4:	b580      	push	{r7, lr}
 8006cb6:	b084      	sub	sp, #16
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a51      	ldr	r2, [pc, #324]	@ (8006e08 <HAL_TIM_Base_Start_IT+0x154>)
 8006cc2:	4293      	cmp	r3, r2
 8006cc4:	d045      	beq.n	8006d52 <HAL_TIM_Base_Start_IT+0x9e>
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006cce:	d040      	beq.n	8006d52 <HAL_TIM_Base_Start_IT+0x9e>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	4a4d      	ldr	r2, [pc, #308]	@ (8006e0c <HAL_TIM_Base_Start_IT+0x158>)
 8006cd6:	4293      	cmp	r3, r2
 8006cd8:	d03b      	beq.n	8006d52 <HAL_TIM_Base_Start_IT+0x9e>
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	4a4c      	ldr	r2, [pc, #304]	@ (8006e10 <HAL_TIM_Base_Start_IT+0x15c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d036      	beq.n	8006d52 <HAL_TIM_Base_Start_IT+0x9e>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	4a4a      	ldr	r2, [pc, #296]	@ (8006e14 <HAL_TIM_Base_Start_IT+0x160>)
 8006cea:	4293      	cmp	r3, r2
 8006cec:	d031      	beq.n	8006d52 <HAL_TIM_Base_Start_IT+0x9e>
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	4a49      	ldr	r2, [pc, #292]	@ (8006e18 <HAL_TIM_Base_Start_IT+0x164>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d02c      	beq.n	8006d52 <HAL_TIM_Base_Start_IT+0x9e>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	4a47      	ldr	r2, [pc, #284]	@ (8006e1c <HAL_TIM_Base_Start_IT+0x168>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d027      	beq.n	8006d52 <HAL_TIM_Base_Start_IT+0x9e>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	4a46      	ldr	r2, [pc, #280]	@ (8006e20 <HAL_TIM_Base_Start_IT+0x16c>)
 8006d08:	4293      	cmp	r3, r2
 8006d0a:	d022      	beq.n	8006d52 <HAL_TIM_Base_Start_IT+0x9e>
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a44      	ldr	r2, [pc, #272]	@ (8006e24 <HAL_TIM_Base_Start_IT+0x170>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d01d      	beq.n	8006d52 <HAL_TIM_Base_Start_IT+0x9e>
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	4a43      	ldr	r2, [pc, #268]	@ (8006e28 <HAL_TIM_Base_Start_IT+0x174>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d018      	beq.n	8006d52 <HAL_TIM_Base_Start_IT+0x9e>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	4a41      	ldr	r2, [pc, #260]	@ (8006e2c <HAL_TIM_Base_Start_IT+0x178>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d013      	beq.n	8006d52 <HAL_TIM_Base_Start_IT+0x9e>
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4a40      	ldr	r2, [pc, #256]	@ (8006e30 <HAL_TIM_Base_Start_IT+0x17c>)
 8006d30:	4293      	cmp	r3, r2
 8006d32:	d00e      	beq.n	8006d52 <HAL_TIM_Base_Start_IT+0x9e>
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	4a3e      	ldr	r2, [pc, #248]	@ (8006e34 <HAL_TIM_Base_Start_IT+0x180>)
 8006d3a:	4293      	cmp	r3, r2
 8006d3c:	d009      	beq.n	8006d52 <HAL_TIM_Base_Start_IT+0x9e>
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	4a3d      	ldr	r2, [pc, #244]	@ (8006e38 <HAL_TIM_Base_Start_IT+0x184>)
 8006d44:	4293      	cmp	r3, r2
 8006d46:	d004      	beq.n	8006d52 <HAL_TIM_Base_Start_IT+0x9e>
 8006d48:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 8006d4c:	483b      	ldr	r0, [pc, #236]	@ (8006e3c <HAL_TIM_Base_Start_IT+0x188>)
 8006d4e:	f7fb fcdf 	bl	8002710 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d001      	beq.n	8006d62 <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8006d5e:	2301      	movs	r3, #1
 8006d60:	e04e      	b.n	8006e00 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2202      	movs	r2, #2
 8006d66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	68da      	ldr	r2, [r3, #12]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	f042 0201 	orr.w	r2, r2, #1
 8006d78:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	4a22      	ldr	r2, [pc, #136]	@ (8006e08 <HAL_TIM_Base_Start_IT+0x154>)
 8006d80:	4293      	cmp	r3, r2
 8006d82:	d022      	beq.n	8006dca <HAL_TIM_Base_Start_IT+0x116>
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d8c:	d01d      	beq.n	8006dca <HAL_TIM_Base_Start_IT+0x116>
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	4a1e      	ldr	r2, [pc, #120]	@ (8006e0c <HAL_TIM_Base_Start_IT+0x158>)
 8006d94:	4293      	cmp	r3, r2
 8006d96:	d018      	beq.n	8006dca <HAL_TIM_Base_Start_IT+0x116>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a1c      	ldr	r2, [pc, #112]	@ (8006e10 <HAL_TIM_Base_Start_IT+0x15c>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d013      	beq.n	8006dca <HAL_TIM_Base_Start_IT+0x116>
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	4a1b      	ldr	r2, [pc, #108]	@ (8006e14 <HAL_TIM_Base_Start_IT+0x160>)
 8006da8:	4293      	cmp	r3, r2
 8006daa:	d00e      	beq.n	8006dca <HAL_TIM_Base_Start_IT+0x116>
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4a1b      	ldr	r2, [pc, #108]	@ (8006e20 <HAL_TIM_Base_Start_IT+0x16c>)
 8006db2:	4293      	cmp	r3, r2
 8006db4:	d009      	beq.n	8006dca <HAL_TIM_Base_Start_IT+0x116>
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	681b      	ldr	r3, [r3, #0]
 8006dba:	4a1a      	ldr	r2, [pc, #104]	@ (8006e24 <HAL_TIM_Base_Start_IT+0x170>)
 8006dbc:	4293      	cmp	r3, r2
 8006dbe:	d004      	beq.n	8006dca <HAL_TIM_Base_Start_IT+0x116>
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	4a1a      	ldr	r2, [pc, #104]	@ (8006e30 <HAL_TIM_Base_Start_IT+0x17c>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d111      	bne.n	8006dee <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	689b      	ldr	r3, [r3, #8]
 8006dd0:	f003 0307 	and.w	r3, r3, #7
 8006dd4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	2b06      	cmp	r3, #6
 8006dda:	d010      	beq.n	8006dfe <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f042 0201 	orr.w	r2, r2, #1
 8006dea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006dec:	e007      	b.n	8006dfe <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f042 0201 	orr.w	r2, r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006dfe:	2300      	movs	r3, #0
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3710      	adds	r7, #16
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd80      	pop	{r7, pc}
 8006e08:	40010000 	.word	0x40010000
 8006e0c:	40000400 	.word	0x40000400
 8006e10:	40000800 	.word	0x40000800
 8006e14:	40000c00 	.word	0x40000c00
 8006e18:	40001000 	.word	0x40001000
 8006e1c:	40001400 	.word	0x40001400
 8006e20:	40010400 	.word	0x40010400
 8006e24:	40014000 	.word	0x40014000
 8006e28:	40014400 	.word	0x40014400
 8006e2c:	40014800 	.word	0x40014800
 8006e30:	40001800 	.word	0x40001800
 8006e34:	40001c00 	.word	0x40001c00
 8006e38:	40002000 	.word	0x40002000
 8006e3c:	0800fe44 	.word	0x0800fe44

08006e40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b084      	sub	sp, #16
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	68db      	ldr	r3, [r3, #12]
 8006e4e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006e58:	68bb      	ldr	r3, [r7, #8]
 8006e5a:	f003 0302 	and.w	r3, r3, #2
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d020      	beq.n	8006ea4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	f003 0302 	and.w	r3, r3, #2
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d01b      	beq.n	8006ea4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	f06f 0202 	mvn.w	r2, #2
 8006e74:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	2201      	movs	r2, #1
 8006e7a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	699b      	ldr	r3, [r3, #24]
 8006e82:	f003 0303 	and.w	r3, r3, #3
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d003      	beq.n	8006e92 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006e8a:	6878      	ldr	r0, [r7, #4]
 8006e8c:	f000 f8d2 	bl	8007034 <HAL_TIM_IC_CaptureCallback>
 8006e90:	e005      	b.n	8006e9e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006e92:	6878      	ldr	r0, [r7, #4]
 8006e94:	f000 f8c4 	bl	8007020 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006e98:	6878      	ldr	r0, [r7, #4]
 8006e9a:	f000 f8d5 	bl	8007048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	f003 0304 	and.w	r3, r3, #4
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d020      	beq.n	8006ef0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	f003 0304 	and.w	r3, r3, #4
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d01b      	beq.n	8006ef0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	f06f 0204 	mvn.w	r2, #4
 8006ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	2202      	movs	r2, #2
 8006ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d003      	beq.n	8006ede <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 f8ac 	bl	8007034 <HAL_TIM_IC_CaptureCallback>
 8006edc:	e005      	b.n	8006eea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ede:	6878      	ldr	r0, [r7, #4]
 8006ee0:	f000 f89e 	bl	8007020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 f8af 	bl	8007048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006ef0:	68bb      	ldr	r3, [r7, #8]
 8006ef2:	f003 0308 	and.w	r3, r3, #8
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d020      	beq.n	8006f3c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f003 0308 	and.w	r3, r3, #8
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d01b      	beq.n	8006f3c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	f06f 0208 	mvn.w	r2, #8
 8006f0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	2204      	movs	r2, #4
 8006f12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	69db      	ldr	r3, [r3, #28]
 8006f1a:	f003 0303 	and.w	r3, r3, #3
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d003      	beq.n	8006f2a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f22:	6878      	ldr	r0, [r7, #4]
 8006f24:	f000 f886 	bl	8007034 <HAL_TIM_IC_CaptureCallback>
 8006f28:	e005      	b.n	8006f36 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f2a:	6878      	ldr	r0, [r7, #4]
 8006f2c:	f000 f878 	bl	8007020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f30:	6878      	ldr	r0, [r7, #4]
 8006f32:	f000 f889 	bl	8007048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	2200      	movs	r2, #0
 8006f3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f003 0310 	and.w	r3, r3, #16
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d020      	beq.n	8006f88 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	f003 0310 	and.w	r3, r3, #16
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d01b      	beq.n	8006f88 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	f06f 0210 	mvn.w	r2, #16
 8006f58:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	2208      	movs	r2, #8
 8006f5e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	69db      	ldr	r3, [r3, #28]
 8006f66:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d003      	beq.n	8006f76 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f860 	bl	8007034 <HAL_TIM_IC_CaptureCallback>
 8006f74:	e005      	b.n	8006f82 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	f000 f852 	bl	8007020 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f7c:	6878      	ldr	r0, [r7, #4]
 8006f7e:	f000 f863 	bl	8007048 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006f88:	68bb      	ldr	r3, [r7, #8]
 8006f8a:	f003 0301 	and.w	r3, r3, #1
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00c      	beq.n	8006fac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	f003 0301 	and.w	r3, r3, #1
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d007      	beq.n	8006fac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f06f 0201 	mvn.w	r2, #1
 8006fa4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006fa6:	6878      	ldr	r0, [r7, #4]
 8006fa8:	f7fb fb9a 	bl	80026e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d00c      	beq.n	8006fd0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006fbc:	2b00      	cmp	r3, #0
 8006fbe:	d007      	beq.n	8006fd0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f000 f906 	bl	80071dc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d00c      	beq.n	8006ff4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d007      	beq.n	8006ff4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f834 	bl	800705c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f003 0320 	and.w	r3, r3, #32
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d00c      	beq.n	8007018 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f003 0320 	and.w	r3, r3, #32
 8007004:	2b00      	cmp	r3, #0
 8007006:	d007      	beq.n	8007018 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f06f 0220 	mvn.w	r2, #32
 8007010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 f8d8 	bl	80071c8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007018:	bf00      	nop
 800701a:	3710      	adds	r7, #16
 800701c:	46bd      	mov	sp, r7
 800701e:	bd80      	pop	{r7, pc}

08007020 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007020:	b480      	push	{r7}
 8007022:	b083      	sub	sp, #12
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007028:	bf00      	nop
 800702a:	370c      	adds	r7, #12
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007034:	b480      	push	{r7}
 8007036:	b083      	sub	sp, #12
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800703c:	bf00      	nop
 800703e:	370c      	adds	r7, #12
 8007040:	46bd      	mov	sp, r7
 8007042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007046:	4770      	bx	lr

08007048 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007048:	b480      	push	{r7}
 800704a:	b083      	sub	sp, #12
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr

0800705c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800705c:	b480      	push	{r7}
 800705e:	b083      	sub	sp, #12
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007064:	bf00      	nop
 8007066:	370c      	adds	r7, #12
 8007068:	46bd      	mov	sp, r7
 800706a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800706e:	4770      	bx	lr

08007070 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007070:	b480      	push	{r7}
 8007072:	b085      	sub	sp, #20
 8007074:	af00      	add	r7, sp, #0
 8007076:	6078      	str	r0, [r7, #4]
 8007078:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	4a46      	ldr	r2, [pc, #280]	@ (800719c <TIM_Base_SetConfig+0x12c>)
 8007084:	4293      	cmp	r3, r2
 8007086:	d013      	beq.n	80070b0 <TIM_Base_SetConfig+0x40>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800708e:	d00f      	beq.n	80070b0 <TIM_Base_SetConfig+0x40>
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	4a43      	ldr	r2, [pc, #268]	@ (80071a0 <TIM_Base_SetConfig+0x130>)
 8007094:	4293      	cmp	r3, r2
 8007096:	d00b      	beq.n	80070b0 <TIM_Base_SetConfig+0x40>
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	4a42      	ldr	r2, [pc, #264]	@ (80071a4 <TIM_Base_SetConfig+0x134>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d007      	beq.n	80070b0 <TIM_Base_SetConfig+0x40>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	4a41      	ldr	r2, [pc, #260]	@ (80071a8 <TIM_Base_SetConfig+0x138>)
 80070a4:	4293      	cmp	r3, r2
 80070a6:	d003      	beq.n	80070b0 <TIM_Base_SetConfig+0x40>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	4a40      	ldr	r2, [pc, #256]	@ (80071ac <TIM_Base_SetConfig+0x13c>)
 80070ac:	4293      	cmp	r3, r2
 80070ae:	d108      	bne.n	80070c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070b0:	68fb      	ldr	r3, [r7, #12]
 80070b2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80070b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	68fa      	ldr	r2, [r7, #12]
 80070be:	4313      	orrs	r3, r2
 80070c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	4a35      	ldr	r2, [pc, #212]	@ (800719c <TIM_Base_SetConfig+0x12c>)
 80070c6:	4293      	cmp	r3, r2
 80070c8:	d02b      	beq.n	8007122 <TIM_Base_SetConfig+0xb2>
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80070d0:	d027      	beq.n	8007122 <TIM_Base_SetConfig+0xb2>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	4a32      	ldr	r2, [pc, #200]	@ (80071a0 <TIM_Base_SetConfig+0x130>)
 80070d6:	4293      	cmp	r3, r2
 80070d8:	d023      	beq.n	8007122 <TIM_Base_SetConfig+0xb2>
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	4a31      	ldr	r2, [pc, #196]	@ (80071a4 <TIM_Base_SetConfig+0x134>)
 80070de:	4293      	cmp	r3, r2
 80070e0:	d01f      	beq.n	8007122 <TIM_Base_SetConfig+0xb2>
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	4a30      	ldr	r2, [pc, #192]	@ (80071a8 <TIM_Base_SetConfig+0x138>)
 80070e6:	4293      	cmp	r3, r2
 80070e8:	d01b      	beq.n	8007122 <TIM_Base_SetConfig+0xb2>
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	4a2f      	ldr	r2, [pc, #188]	@ (80071ac <TIM_Base_SetConfig+0x13c>)
 80070ee:	4293      	cmp	r3, r2
 80070f0:	d017      	beq.n	8007122 <TIM_Base_SetConfig+0xb2>
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	4a2e      	ldr	r2, [pc, #184]	@ (80071b0 <TIM_Base_SetConfig+0x140>)
 80070f6:	4293      	cmp	r3, r2
 80070f8:	d013      	beq.n	8007122 <TIM_Base_SetConfig+0xb2>
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	4a2d      	ldr	r2, [pc, #180]	@ (80071b4 <TIM_Base_SetConfig+0x144>)
 80070fe:	4293      	cmp	r3, r2
 8007100:	d00f      	beq.n	8007122 <TIM_Base_SetConfig+0xb2>
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	4a2c      	ldr	r2, [pc, #176]	@ (80071b8 <TIM_Base_SetConfig+0x148>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d00b      	beq.n	8007122 <TIM_Base_SetConfig+0xb2>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a2b      	ldr	r2, [pc, #172]	@ (80071bc <TIM_Base_SetConfig+0x14c>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d007      	beq.n	8007122 <TIM_Base_SetConfig+0xb2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	4a2a      	ldr	r2, [pc, #168]	@ (80071c0 <TIM_Base_SetConfig+0x150>)
 8007116:	4293      	cmp	r3, r2
 8007118:	d003      	beq.n	8007122 <TIM_Base_SetConfig+0xb2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a29      	ldr	r2, [pc, #164]	@ (80071c4 <TIM_Base_SetConfig+0x154>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d108      	bne.n	8007134 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007128:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800712a:	683b      	ldr	r3, [r7, #0]
 800712c:	68db      	ldr	r3, [r3, #12]
 800712e:	68fa      	ldr	r2, [r7, #12]
 8007130:	4313      	orrs	r3, r2
 8007132:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800713a:	683b      	ldr	r3, [r7, #0]
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	4313      	orrs	r3, r2
 8007140:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	68fa      	ldr	r2, [r7, #12]
 8007146:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007148:	683b      	ldr	r3, [r7, #0]
 800714a:	689a      	ldr	r2, [r3, #8]
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	681a      	ldr	r2, [r3, #0]
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	4a10      	ldr	r2, [pc, #64]	@ (800719c <TIM_Base_SetConfig+0x12c>)
 800715c:	4293      	cmp	r3, r2
 800715e:	d003      	beq.n	8007168 <TIM_Base_SetConfig+0xf8>
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	4a12      	ldr	r2, [pc, #72]	@ (80071ac <TIM_Base_SetConfig+0x13c>)
 8007164:	4293      	cmp	r3, r2
 8007166:	d103      	bne.n	8007170 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007168:	683b      	ldr	r3, [r7, #0]
 800716a:	691a      	ldr	r2, [r3, #16]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	691b      	ldr	r3, [r3, #16]
 800717a:	f003 0301 	and.w	r3, r3, #1
 800717e:	2b01      	cmp	r3, #1
 8007180:	d105      	bne.n	800718e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	691b      	ldr	r3, [r3, #16]
 8007186:	f023 0201 	bic.w	r2, r3, #1
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	611a      	str	r2, [r3, #16]
  }
}
 800718e:	bf00      	nop
 8007190:	3714      	adds	r7, #20
 8007192:	46bd      	mov	sp, r7
 8007194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007198:	4770      	bx	lr
 800719a:	bf00      	nop
 800719c:	40010000 	.word	0x40010000
 80071a0:	40000400 	.word	0x40000400
 80071a4:	40000800 	.word	0x40000800
 80071a8:	40000c00 	.word	0x40000c00
 80071ac:	40010400 	.word	0x40010400
 80071b0:	40014000 	.word	0x40014000
 80071b4:	40014400 	.word	0x40014400
 80071b8:	40014800 	.word	0x40014800
 80071bc:	40001800 	.word	0x40001800
 80071c0:	40001c00 	.word	0x40001c00
 80071c4:	40002000 	.word	0x40002000

080071c8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b083      	sub	sp, #12
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80071d0:	bf00      	nop
 80071d2:	370c      	adds	r7, #12
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80071dc:	b480      	push	{r7}
 80071de:	b083      	sub	sp, #12
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80071e4:	bf00      	nop
 80071e6:	370c      	adds	r7, #12
 80071e8:	46bd      	mov	sp, r7
 80071ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ee:	4770      	bx	lr

080071f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80071f0:	b580      	push	{r7, lr}
 80071f2:	b082      	sub	sp, #8
 80071f4:	af00      	add	r7, sp, #0
 80071f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d101      	bne.n	8007202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071fe:	2301      	movs	r3, #1
 8007200:	e0b7      	b.n	8007372 <HAL_UART_Init+0x182>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	699b      	ldr	r3, [r3, #24]
 8007206:	2b00      	cmp	r3, #0
 8007208:	d031      	beq.n	800726e <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	4a5b      	ldr	r2, [pc, #364]	@ (800737c <HAL_UART_Init+0x18c>)
 8007210:	4293      	cmp	r3, r2
 8007212:	d013      	beq.n	800723c <HAL_UART_Init+0x4c>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	4a59      	ldr	r2, [pc, #356]	@ (8007380 <HAL_UART_Init+0x190>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d00e      	beq.n	800723c <HAL_UART_Init+0x4c>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	4a58      	ldr	r2, [pc, #352]	@ (8007384 <HAL_UART_Init+0x194>)
 8007224:	4293      	cmp	r3, r2
 8007226:	d009      	beq.n	800723c <HAL_UART_Init+0x4c>
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4a56      	ldr	r2, [pc, #344]	@ (8007388 <HAL_UART_Init+0x198>)
 800722e:	4293      	cmp	r3, r2
 8007230:	d004      	beq.n	800723c <HAL_UART_Init+0x4c>
 8007232:	f240 1173 	movw	r1, #371	@ 0x173
 8007236:	4855      	ldr	r0, [pc, #340]	@ (800738c <HAL_UART_Init+0x19c>)
 8007238:	f7fb fa6a 	bl	8002710 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	699b      	ldr	r3, [r3, #24]
 8007240:	2b00      	cmp	r3, #0
 8007242:	d037      	beq.n	80072b4 <HAL_UART_Init+0xc4>
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	699b      	ldr	r3, [r3, #24]
 8007248:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800724c:	d032      	beq.n	80072b4 <HAL_UART_Init+0xc4>
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	699b      	ldr	r3, [r3, #24]
 8007252:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007256:	d02d      	beq.n	80072b4 <HAL_UART_Init+0xc4>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	699b      	ldr	r3, [r3, #24]
 800725c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007260:	d028      	beq.n	80072b4 <HAL_UART_Init+0xc4>
 8007262:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 8007266:	4849      	ldr	r0, [pc, #292]	@ (800738c <HAL_UART_Init+0x19c>)
 8007268:	f7fb fa52 	bl	8002710 <assert_failed>
 800726c:	e022      	b.n	80072b4 <HAL_UART_Init+0xc4>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	4a42      	ldr	r2, [pc, #264]	@ (800737c <HAL_UART_Init+0x18c>)
 8007274:	4293      	cmp	r3, r2
 8007276:	d01d      	beq.n	80072b4 <HAL_UART_Init+0xc4>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a40      	ldr	r2, [pc, #256]	@ (8007380 <HAL_UART_Init+0x190>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d018      	beq.n	80072b4 <HAL_UART_Init+0xc4>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a3f      	ldr	r2, [pc, #252]	@ (8007384 <HAL_UART_Init+0x194>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d013      	beq.n	80072b4 <HAL_UART_Init+0xc4>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a3f      	ldr	r2, [pc, #252]	@ (8007390 <HAL_UART_Init+0x1a0>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00e      	beq.n	80072b4 <HAL_UART_Init+0xc4>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a3e      	ldr	r2, [pc, #248]	@ (8007394 <HAL_UART_Init+0x1a4>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d009      	beq.n	80072b4 <HAL_UART_Init+0xc4>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a38      	ldr	r2, [pc, #224]	@ (8007388 <HAL_UART_Init+0x198>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d004      	beq.n	80072b4 <HAL_UART_Init+0xc4>
 80072aa:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 80072ae:	4837      	ldr	r0, [pc, #220]	@ (800738c <HAL_UART_Init+0x19c>)
 80072b0:	f7fb fa2e 	bl	8002710 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	689b      	ldr	r3, [r3, #8]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d009      	beq.n	80072d0 <HAL_UART_Init+0xe0>
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80072c4:	d004      	beq.n	80072d0 <HAL_UART_Init+0xe0>
 80072c6:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 80072ca:	4830      	ldr	r0, [pc, #192]	@ (800738c <HAL_UART_Init+0x19c>)
 80072cc:	f7fb fa20 	bl	8002710 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	69db      	ldr	r3, [r3, #28]
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d009      	beq.n	80072ec <HAL_UART_Init+0xfc>
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	69db      	ldr	r3, [r3, #28]
 80072dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80072e0:	d004      	beq.n	80072ec <HAL_UART_Init+0xfc>
 80072e2:	f240 117b 	movw	r1, #379	@ 0x17b
 80072e6:	4829      	ldr	r0, [pc, #164]	@ (800738c <HAL_UART_Init+0x19c>)
 80072e8:	f7fb fa12 	bl	8002710 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80072f2:	b2db      	uxtb	r3, r3
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d106      	bne.n	8007306 <HAL_UART_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2200      	movs	r2, #0
 80072fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f7fb fba7 	bl	8002a54 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2224      	movs	r2, #36	@ 0x24
 800730a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68da      	ldr	r2, [r3, #12]
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800731c:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800731e:	6878      	ldr	r0, [r7, #4]
 8007320:	f000 faea 	bl	80078f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	691a      	ldr	r2, [r3, #16]
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007332:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	695a      	ldr	r2, [r3, #20]
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007342:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	68da      	ldr	r2, [r3, #12]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007352:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2200      	movs	r2, #0
 8007358:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2220      	movs	r2, #32
 800735e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	2220      	movs	r2, #32
 8007366:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2200      	movs	r2, #0
 800736e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	3708      	adds	r7, #8
 8007376:	46bd      	mov	sp, r7
 8007378:	bd80      	pop	{r7, pc}
 800737a:	bf00      	nop
 800737c:	40011000 	.word	0x40011000
 8007380:	40004400 	.word	0x40004400
 8007384:	40004800 	.word	0x40004800
 8007388:	40011400 	.word	0x40011400
 800738c:	0800fe7c 	.word	0x0800fe7c
 8007390:	40004c00 	.word	0x40004c00
 8007394:	40005000 	.word	0x40005000

08007398 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b08a      	sub	sp, #40	@ 0x28
 800739c:	af02      	add	r7, sp, #8
 800739e:	60f8      	str	r0, [r7, #12]
 80073a0:	60b9      	str	r1, [r7, #8]
 80073a2:	603b      	str	r3, [r7, #0]
 80073a4:	4613      	mov	r3, r2
 80073a6:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80073a8:	2300      	movs	r3, #0
 80073aa:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80073b2:	b2db      	uxtb	r3, r3
 80073b4:	2b20      	cmp	r3, #32
 80073b6:	f040 8081 	bne.w	80074bc <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80073ba:	68bb      	ldr	r3, [r7, #8]
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d002      	beq.n	80073c6 <HAL_UART_Receive+0x2e>
 80073c0:	88fb      	ldrh	r3, [r7, #6]
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d101      	bne.n	80073ca <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	e079      	b.n	80074be <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	2200      	movs	r2, #0
 80073ce:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	2222      	movs	r2, #34	@ 0x22
 80073d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	2200      	movs	r2, #0
 80073dc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80073de:	f7fb fd9f 	bl	8002f20 <HAL_GetTick>
 80073e2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	88fa      	ldrh	r2, [r7, #6]
 80073e8:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	88fa      	ldrh	r2, [r7, #6]
 80073ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	689b      	ldr	r3, [r3, #8]
 80073f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80073f8:	d108      	bne.n	800740c <HAL_UART_Receive+0x74>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	691b      	ldr	r3, [r3, #16]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d104      	bne.n	800740c <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8007402:	2300      	movs	r3, #0
 8007404:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007406:	68bb      	ldr	r3, [r7, #8]
 8007408:	61bb      	str	r3, [r7, #24]
 800740a:	e003      	b.n	8007414 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 800740c:	68bb      	ldr	r3, [r7, #8]
 800740e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007410:	2300      	movs	r3, #0
 8007412:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8007414:	e047      	b.n	80074a6 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	9300      	str	r3, [sp, #0]
 800741a:	697b      	ldr	r3, [r7, #20]
 800741c:	2200      	movs	r2, #0
 800741e:	2120      	movs	r1, #32
 8007420:	68f8      	ldr	r0, [r7, #12]
 8007422:	f000 f984 	bl	800772e <UART_WaitOnFlagUntilTimeout>
 8007426:	4603      	mov	r3, r0
 8007428:	2b00      	cmp	r3, #0
 800742a:	d005      	beq.n	8007438 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2220      	movs	r2, #32
 8007430:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8007434:	2303      	movs	r3, #3
 8007436:	e042      	b.n	80074be <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8007438:	69fb      	ldr	r3, [r7, #28]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d10c      	bne.n	8007458 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	685b      	ldr	r3, [r3, #4]
 8007444:	b29b      	uxth	r3, r3
 8007446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800744a:	b29a      	uxth	r2, r3
 800744c:	69bb      	ldr	r3, [r7, #24]
 800744e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	3302      	adds	r3, #2
 8007454:	61bb      	str	r3, [r7, #24]
 8007456:	e01f      	b.n	8007498 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007460:	d007      	beq.n	8007472 <HAL_UART_Receive+0xda>
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	689b      	ldr	r3, [r3, #8]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10a      	bne.n	8007480 <HAL_UART_Receive+0xe8>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	691b      	ldr	r3, [r3, #16]
 800746e:	2b00      	cmp	r3, #0
 8007470:	d106      	bne.n	8007480 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	685b      	ldr	r3, [r3, #4]
 8007478:	b2da      	uxtb	r2, r3
 800747a:	69fb      	ldr	r3, [r7, #28]
 800747c:	701a      	strb	r2, [r3, #0]
 800747e:	e008      	b.n	8007492 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	b2db      	uxtb	r3, r3
 8007488:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800748c:	b2da      	uxtb	r2, r3
 800748e:	69fb      	ldr	r3, [r7, #28]
 8007490:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8007492:	69fb      	ldr	r3, [r7, #28]
 8007494:	3301      	adds	r3, #1
 8007496:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800749c:	b29b      	uxth	r3, r3
 800749e:	3b01      	subs	r3, #1
 80074a0:	b29a      	uxth	r2, r3
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80074aa:	b29b      	uxth	r3, r3
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1b2      	bne.n	8007416 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	2220      	movs	r2, #32
 80074b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80074b8:	2300      	movs	r3, #0
 80074ba:	e000      	b.n	80074be <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80074bc:	2302      	movs	r3, #2
  }
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3720      	adds	r7, #32
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
	...

080074c8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b08c      	sub	sp, #48	@ 0x30
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	60f8      	str	r0, [r7, #12]
 80074d0:	60b9      	str	r1, [r7, #8]
 80074d2:	4613      	mov	r3, r2
 80074d4:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b20      	cmp	r3, #32
 80074e0:	d156      	bne.n	8007590 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80074e2:	68bb      	ldr	r3, [r7, #8]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d002      	beq.n	80074ee <HAL_UART_Transmit_DMA+0x26>
 80074e8:	88fb      	ldrh	r3, [r7, #6]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d101      	bne.n	80074f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80074ee:	2301      	movs	r3, #1
 80074f0:	e04f      	b.n	8007592 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80074f2:	68ba      	ldr	r2, [r7, #8]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	88fa      	ldrh	r2, [r7, #6]
 80074fc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	88fa      	ldrh	r2, [r7, #6]
 8007502:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	2200      	movs	r2, #0
 8007508:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2221      	movs	r2, #33	@ 0x21
 800750e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007516:	4a21      	ldr	r2, [pc, #132]	@ (800759c <HAL_UART_Transmit_DMA+0xd4>)
 8007518:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800751e:	4a20      	ldr	r2, [pc, #128]	@ (80075a0 <HAL_UART_Transmit_DMA+0xd8>)
 8007520:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007526:	4a1f      	ldr	r2, [pc, #124]	@ (80075a4 <HAL_UART_Transmit_DMA+0xdc>)
 8007528:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800752e:	2200      	movs	r2, #0
 8007530:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8007532:	f107 0308 	add.w	r3, r7, #8
 8007536:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800753c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800753e:	6819      	ldr	r1, [r3, #0]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	3304      	adds	r3, #4
 8007546:	461a      	mov	r2, r3
 8007548:	88fb      	ldrh	r3, [r7, #6]
 800754a:	f7fc fdf7 	bl	800413c <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007556:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	3314      	adds	r3, #20
 800755e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007560:	69bb      	ldr	r3, [r7, #24]
 8007562:	e853 3f00 	ldrex	r3, [r3]
 8007566:	617b      	str	r3, [r7, #20]
   return(result);
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800756e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	3314      	adds	r3, #20
 8007576:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007578:	627a      	str	r2, [r7, #36]	@ 0x24
 800757a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757c:	6a39      	ldr	r1, [r7, #32]
 800757e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007580:	e841 2300 	strex	r3, r2, [r1]
 8007584:	61fb      	str	r3, [r7, #28]
   return(result);
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d1e5      	bne.n	8007558 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800758c:	2300      	movs	r3, #0
 800758e:	e000      	b.n	8007592 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007590:	2302      	movs	r3, #2
  }
}
 8007592:	4618      	mov	r0, r3
 8007594:	3730      	adds	r7, #48	@ 0x30
 8007596:	46bd      	mov	sp, r7
 8007598:	bd80      	pop	{r7, pc}
 800759a:	bf00      	nop
 800759c:	080075e5 	.word	0x080075e5
 80075a0:	0800767f 	.word	0x0800767f
 80075a4:	0800769b 	.word	0x0800769b

080075a8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b083      	sub	sp, #12
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80075b0:	bf00      	nop
 80075b2:	370c      	adds	r7, #12
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr

080075bc <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80075bc:	b480      	push	{r7}
 80075be:	b083      	sub	sp, #12
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80075c4:	bf00      	nop
 80075c6:	370c      	adds	r7, #12
 80075c8:	46bd      	mov	sp, r7
 80075ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ce:	4770      	bx	lr

080075d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80075d0:	b480      	push	{r7}
 80075d2:	b083      	sub	sp, #12
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80075d8:	bf00      	nop
 80075da:	370c      	adds	r7, #12
 80075dc:	46bd      	mov	sp, r7
 80075de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e2:	4770      	bx	lr

080075e4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b090      	sub	sp, #64	@ 0x40
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80075f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d137      	bne.n	8007670 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8007600:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007602:	2200      	movs	r2, #0
 8007604:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007606:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	3314      	adds	r3, #20
 800760c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007610:	e853 3f00 	ldrex	r3, [r3]
 8007614:	623b      	str	r3, [r7, #32]
   return(result);
 8007616:	6a3b      	ldr	r3, [r7, #32]
 8007618:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800761c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800761e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	3314      	adds	r3, #20
 8007624:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007626:	633a      	str	r2, [r7, #48]	@ 0x30
 8007628:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800762c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800762e:	e841 2300 	strex	r3, r2, [r1]
 8007632:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007636:	2b00      	cmp	r3, #0
 8007638:	d1e5      	bne.n	8007606 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800763a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	330c      	adds	r3, #12
 8007640:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	e853 3f00 	ldrex	r3, [r3]
 8007648:	60fb      	str	r3, [r7, #12]
   return(result);
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007650:	637b      	str	r3, [r7, #52]	@ 0x34
 8007652:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	330c      	adds	r3, #12
 8007658:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800765a:	61fa      	str	r2, [r7, #28]
 800765c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765e:	69b9      	ldr	r1, [r7, #24]
 8007660:	69fa      	ldr	r2, [r7, #28]
 8007662:	e841 2300 	strex	r3, r2, [r1]
 8007666:	617b      	str	r3, [r7, #20]
   return(result);
 8007668:	697b      	ldr	r3, [r7, #20]
 800766a:	2b00      	cmp	r3, #0
 800766c:	d1e5      	bne.n	800763a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800766e:	e002      	b.n	8007676 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007670:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007672:	f7ff ff99 	bl	80075a8 <HAL_UART_TxCpltCallback>
}
 8007676:	bf00      	nop
 8007678:	3740      	adds	r7, #64	@ 0x40
 800767a:	46bd      	mov	sp, r7
 800767c:	bd80      	pop	{r7, pc}

0800767e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800767e:	b580      	push	{r7, lr}
 8007680:	b084      	sub	sp, #16
 8007682:	af00      	add	r7, sp, #0
 8007684:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800768a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f7ff ff95 	bl	80075bc <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007692:	bf00      	nop
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80076a2:	2300      	movs	r3, #0
 80076a4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80076aa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	695b      	ldr	r3, [r3, #20]
 80076b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076b6:	2b80      	cmp	r3, #128	@ 0x80
 80076b8:	bf0c      	ite	eq
 80076ba:	2301      	moveq	r3, #1
 80076bc:	2300      	movne	r3, #0
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80076c2:	68bb      	ldr	r3, [r7, #8]
 80076c4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80076c8:	b2db      	uxtb	r3, r3
 80076ca:	2b21      	cmp	r3, #33	@ 0x21
 80076cc:	d108      	bne.n	80076e0 <UART_DMAError+0x46>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	2b00      	cmp	r3, #0
 80076d2:	d005      	beq.n	80076e0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80076d4:	68bb      	ldr	r3, [r7, #8]
 80076d6:	2200      	movs	r2, #0
 80076d8:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 80076da:	68b8      	ldr	r0, [r7, #8]
 80076dc:	f000 f880 	bl	80077e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	695b      	ldr	r3, [r3, #20]
 80076e6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076ea:	2b40      	cmp	r3, #64	@ 0x40
 80076ec:	bf0c      	ite	eq
 80076ee:	2301      	moveq	r3, #1
 80076f0:	2300      	movne	r3, #0
 80076f2:	b2db      	uxtb	r3, r3
 80076f4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80076fc:	b2db      	uxtb	r3, r3
 80076fe:	2b22      	cmp	r3, #34	@ 0x22
 8007700:	d108      	bne.n	8007714 <UART_DMAError+0x7a>
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d005      	beq.n	8007714 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2200      	movs	r2, #0
 800770c:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 800770e:	68b8      	ldr	r0, [r7, #8]
 8007710:	f000 f88e 	bl	8007830 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007718:	f043 0210 	orr.w	r2, r3, #16
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007720:	68b8      	ldr	r0, [r7, #8]
 8007722:	f7ff ff55 	bl	80075d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007726:	bf00      	nop
 8007728:	3710      	adds	r7, #16
 800772a:	46bd      	mov	sp, r7
 800772c:	bd80      	pop	{r7, pc}

0800772e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800772e:	b580      	push	{r7, lr}
 8007730:	b086      	sub	sp, #24
 8007732:	af00      	add	r7, sp, #0
 8007734:	60f8      	str	r0, [r7, #12]
 8007736:	60b9      	str	r1, [r7, #8]
 8007738:	603b      	str	r3, [r7, #0]
 800773a:	4613      	mov	r3, r2
 800773c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800773e:	e03b      	b.n	80077b8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007746:	d037      	beq.n	80077b8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007748:	f7fb fbea 	bl	8002f20 <HAL_GetTick>
 800774c:	4602      	mov	r2, r0
 800774e:	683b      	ldr	r3, [r7, #0]
 8007750:	1ad3      	subs	r3, r2, r3
 8007752:	6a3a      	ldr	r2, [r7, #32]
 8007754:	429a      	cmp	r2, r3
 8007756:	d302      	bcc.n	800775e <UART_WaitOnFlagUntilTimeout+0x30>
 8007758:	6a3b      	ldr	r3, [r7, #32]
 800775a:	2b00      	cmp	r3, #0
 800775c:	d101      	bne.n	8007762 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800775e:	2303      	movs	r3, #3
 8007760:	e03a      	b.n	80077d8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	68db      	ldr	r3, [r3, #12]
 8007768:	f003 0304 	and.w	r3, r3, #4
 800776c:	2b00      	cmp	r3, #0
 800776e:	d023      	beq.n	80077b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	2b80      	cmp	r3, #128	@ 0x80
 8007774:	d020      	beq.n	80077b8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007776:	68bb      	ldr	r3, [r7, #8]
 8007778:	2b40      	cmp	r3, #64	@ 0x40
 800777a:	d01d      	beq.n	80077b8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	f003 0308 	and.w	r3, r3, #8
 8007786:	2b08      	cmp	r3, #8
 8007788:	d116      	bne.n	80077b8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800778a:	2300      	movs	r3, #0
 800778c:	617b      	str	r3, [r7, #20]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	617b      	str	r3, [r7, #20]
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	617b      	str	r3, [r7, #20]
 800779e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 f845 	bl	8007830 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	2208      	movs	r2, #8
 80077aa:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e00f      	b.n	80077d8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	681a      	ldr	r2, [r3, #0]
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	4013      	ands	r3, r2
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	bf0c      	ite	eq
 80077c8:	2301      	moveq	r3, #1
 80077ca:	2300      	movne	r3, #0
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	461a      	mov	r2, r3
 80077d0:	79fb      	ldrb	r3, [r7, #7]
 80077d2:	429a      	cmp	r2, r3
 80077d4:	d0b4      	beq.n	8007740 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3718      	adds	r7, #24
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}

080077e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80077e0:	b480      	push	{r7}
 80077e2:	b089      	sub	sp, #36	@ 0x24
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	330c      	adds	r3, #12
 80077ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	e853 3f00 	ldrex	r3, [r3]
 80077f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80077fe:	61fb      	str	r3, [r7, #28]
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	681b      	ldr	r3, [r3, #0]
 8007804:	330c      	adds	r3, #12
 8007806:	69fa      	ldr	r2, [r7, #28]
 8007808:	61ba      	str	r2, [r7, #24]
 800780a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800780c:	6979      	ldr	r1, [r7, #20]
 800780e:	69ba      	ldr	r2, [r7, #24]
 8007810:	e841 2300 	strex	r3, r2, [r1]
 8007814:	613b      	str	r3, [r7, #16]
   return(result);
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	2b00      	cmp	r3, #0
 800781a:	d1e5      	bne.n	80077e8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2220      	movs	r2, #32
 8007820:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 8007824:	bf00      	nop
 8007826:	3724      	adds	r7, #36	@ 0x24
 8007828:	46bd      	mov	sp, r7
 800782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782e:	4770      	bx	lr

08007830 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007830:	b480      	push	{r7}
 8007832:	b095      	sub	sp, #84	@ 0x54
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	330c      	adds	r3, #12
 800783e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007840:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007842:	e853 3f00 	ldrex	r3, [r3]
 8007846:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800784a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800784e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	330c      	adds	r3, #12
 8007856:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007858:	643a      	str	r2, [r7, #64]	@ 0x40
 800785a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800785c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800785e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007860:	e841 2300 	strex	r3, r2, [r1]
 8007864:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007866:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007868:	2b00      	cmp	r3, #0
 800786a:	d1e5      	bne.n	8007838 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3314      	adds	r3, #20
 8007872:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007874:	6a3b      	ldr	r3, [r7, #32]
 8007876:	e853 3f00 	ldrex	r3, [r3]
 800787a:	61fb      	str	r3, [r7, #28]
   return(result);
 800787c:	69fb      	ldr	r3, [r7, #28]
 800787e:	f023 0301 	bic.w	r3, r3, #1
 8007882:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	3314      	adds	r3, #20
 800788a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800788c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800788e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007890:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007892:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007894:	e841 2300 	strex	r3, r2, [r1]
 8007898:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800789a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800789c:	2b00      	cmp	r3, #0
 800789e:	d1e5      	bne.n	800786c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80078a4:	2b01      	cmp	r3, #1
 80078a6:	d119      	bne.n	80078dc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	330c      	adds	r3, #12
 80078ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	e853 3f00 	ldrex	r3, [r3]
 80078b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	f023 0310 	bic.w	r3, r3, #16
 80078be:	647b      	str	r3, [r7, #68]	@ 0x44
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	330c      	adds	r3, #12
 80078c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80078c8:	61ba      	str	r2, [r7, #24]
 80078ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078cc:	6979      	ldr	r1, [r7, #20]
 80078ce:	69ba      	ldr	r2, [r7, #24]
 80078d0:	e841 2300 	strex	r3, r2, [r1]
 80078d4:	613b      	str	r3, [r7, #16]
   return(result);
 80078d6:	693b      	ldr	r3, [r7, #16]
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d1e5      	bne.n	80078a8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2220      	movs	r2, #32
 80078e0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80078ea:	bf00      	nop
 80078ec:	3754      	adds	r7, #84	@ 0x54
 80078ee:	46bd      	mov	sp, r7
 80078f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078f4:	4770      	bx	lr
	...

080078f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80078f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80078fc:	b0c0      	sub	sp, #256	@ 0x100
 80078fe:	af00      	add	r7, sp, #0
 8007900:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8007904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007908:	685a      	ldr	r2, [r3, #4]
 800790a:	4bcf      	ldr	r3, [pc, #828]	@ (8007c48 <UART_SetConfig+0x350>)
 800790c:	429a      	cmp	r2, r3
 800790e:	d904      	bls.n	800791a <UART_SetConfig+0x22>
 8007910:	f640 6175 	movw	r1, #3701	@ 0xe75
 8007914:	48cd      	ldr	r0, [pc, #820]	@ (8007c4c <UART_SetConfig+0x354>)
 8007916:	f7fa fefb 	bl	8002710 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 800791a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800791e:	68db      	ldr	r3, [r3, #12]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d00a      	beq.n	800793a <UART_SetConfig+0x42>
 8007924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800792e:	d004      	beq.n	800793a <UART_SetConfig+0x42>
 8007930:	f640 6176 	movw	r1, #3702	@ 0xe76
 8007934:	48c5      	ldr	r0, [pc, #788]	@ (8007c4c <UART_SetConfig+0x354>)
 8007936:	f7fa feeb 	bl	8002710 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 800793a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800793e:	691b      	ldr	r3, [r3, #16]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d010      	beq.n	8007966 <UART_SetConfig+0x6e>
 8007944:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007948:	691b      	ldr	r3, [r3, #16]
 800794a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800794e:	d00a      	beq.n	8007966 <UART_SetConfig+0x6e>
 8007950:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007954:	691b      	ldr	r3, [r3, #16]
 8007956:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800795a:	d004      	beq.n	8007966 <UART_SetConfig+0x6e>
 800795c:	f640 6177 	movw	r1, #3703	@ 0xe77
 8007960:	48ba      	ldr	r0, [pc, #744]	@ (8007c4c <UART_SetConfig+0x354>)
 8007962:	f7fa fed5 	bl	8002710 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800796a:	695a      	ldr	r2, [r3, #20]
 800796c:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 8007970:	4013      	ands	r3, r2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d104      	bne.n	8007980 <UART_SetConfig+0x88>
 8007976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800797a:	695b      	ldr	r3, [r3, #20]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d104      	bne.n	800798a <UART_SetConfig+0x92>
 8007980:	f640 6178 	movw	r1, #3704	@ 0xe78
 8007984:	48b1      	ldr	r0, [pc, #708]	@ (8007c4c <UART_SetConfig+0x354>)
 8007986:	f7fa fec3 	bl	8002710 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800798a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	691b      	ldr	r3, [r3, #16]
 8007992:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007996:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800799a:	68d9      	ldr	r1, [r3, #12]
 800799c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079a0:	681a      	ldr	r2, [r3, #0]
 80079a2:	ea40 0301 	orr.w	r3, r0, r1
 80079a6:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80079a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ac:	689a      	ldr	r2, [r3, #8]
 80079ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	431a      	orrs	r2, r3
 80079b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ba:	695b      	ldr	r3, [r3, #20]
 80079bc:	431a      	orrs	r2, r3
 80079be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079c2:	69db      	ldr	r3, [r3, #28]
 80079c4:	4313      	orrs	r3, r2
 80079c6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80079ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	68db      	ldr	r3, [r3, #12]
 80079d2:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80079d6:	f021 010c 	bic.w	r1, r1, #12
 80079da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079de:	681a      	ldr	r2, [r3, #0]
 80079e0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80079e4:	430b      	orrs	r3, r1
 80079e6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80079e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	695b      	ldr	r3, [r3, #20]
 80079f0:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80079f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079f8:	6999      	ldr	r1, [r3, #24]
 80079fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079fe:	681a      	ldr	r2, [r3, #0]
 8007a00:	ea40 0301 	orr.w	r3, r0, r1
 8007a04:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	4b90      	ldr	r3, [pc, #576]	@ (8007c50 <UART_SetConfig+0x358>)
 8007a0e:	429a      	cmp	r2, r3
 8007a10:	d005      	beq.n	8007a1e <UART_SetConfig+0x126>
 8007a12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a16:	681a      	ldr	r2, [r3, #0]
 8007a18:	4b8e      	ldr	r3, [pc, #568]	@ (8007c54 <UART_SetConfig+0x35c>)
 8007a1a:	429a      	cmp	r2, r3
 8007a1c:	d104      	bne.n	8007a28 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007a1e:	f7fe ffe1 	bl	80069e4 <HAL_RCC_GetPCLK2Freq>
 8007a22:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007a26:	e003      	b.n	8007a30 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007a28:	f7fe ffc8 	bl	80069bc <HAL_RCC_GetPCLK1Freq>
 8007a2c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007a30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a34:	69db      	ldr	r3, [r3, #28]
 8007a36:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007a3a:	f040 810f 	bne.w	8007c5c <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007a3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a42:	2200      	movs	r2, #0
 8007a44:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007a48:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007a4c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007a50:	4622      	mov	r2, r4
 8007a52:	462b      	mov	r3, r5
 8007a54:	1891      	adds	r1, r2, r2
 8007a56:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007a58:	415b      	adcs	r3, r3
 8007a5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007a5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007a60:	4621      	mov	r1, r4
 8007a62:	eb12 0801 	adds.w	r8, r2, r1
 8007a66:	4629      	mov	r1, r5
 8007a68:	eb43 0901 	adc.w	r9, r3, r1
 8007a6c:	f04f 0200 	mov.w	r2, #0
 8007a70:	f04f 0300 	mov.w	r3, #0
 8007a74:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007a78:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007a7c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007a80:	4690      	mov	r8, r2
 8007a82:	4699      	mov	r9, r3
 8007a84:	4623      	mov	r3, r4
 8007a86:	eb18 0303 	adds.w	r3, r8, r3
 8007a8a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007a8e:	462b      	mov	r3, r5
 8007a90:	eb49 0303 	adc.w	r3, r9, r3
 8007a94:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	2200      	movs	r2, #0
 8007aa0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007aa4:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007aa8:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007aac:	460b      	mov	r3, r1
 8007aae:	18db      	adds	r3, r3, r3
 8007ab0:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ab2:	4613      	mov	r3, r2
 8007ab4:	eb42 0303 	adc.w	r3, r2, r3
 8007ab8:	657b      	str	r3, [r7, #84]	@ 0x54
 8007aba:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007abe:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007ac2:	f7f9 f961 	bl	8000d88 <__aeabi_uldivmod>
 8007ac6:	4602      	mov	r2, r0
 8007ac8:	460b      	mov	r3, r1
 8007aca:	4b63      	ldr	r3, [pc, #396]	@ (8007c58 <UART_SetConfig+0x360>)
 8007acc:	fba3 2302 	umull	r2, r3, r3, r2
 8007ad0:	095b      	lsrs	r3, r3, #5
 8007ad2:	011c      	lsls	r4, r3, #4
 8007ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ade:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007ae2:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007ae6:	4642      	mov	r2, r8
 8007ae8:	464b      	mov	r3, r9
 8007aea:	1891      	adds	r1, r2, r2
 8007aec:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007aee:	415b      	adcs	r3, r3
 8007af0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007af2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007af6:	4641      	mov	r1, r8
 8007af8:	eb12 0a01 	adds.w	sl, r2, r1
 8007afc:	4649      	mov	r1, r9
 8007afe:	eb43 0b01 	adc.w	fp, r3, r1
 8007b02:	f04f 0200 	mov.w	r2, #0
 8007b06:	f04f 0300 	mov.w	r3, #0
 8007b0a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007b0e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007b12:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007b16:	4692      	mov	sl, r2
 8007b18:	469b      	mov	fp, r3
 8007b1a:	4643      	mov	r3, r8
 8007b1c:	eb1a 0303 	adds.w	r3, sl, r3
 8007b20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007b24:	464b      	mov	r3, r9
 8007b26:	eb4b 0303 	adc.w	r3, fp, r3
 8007b2a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b32:	685b      	ldr	r3, [r3, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b3a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007b3e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007b42:	460b      	mov	r3, r1
 8007b44:	18db      	adds	r3, r3, r3
 8007b46:	643b      	str	r3, [r7, #64]	@ 0x40
 8007b48:	4613      	mov	r3, r2
 8007b4a:	eb42 0303 	adc.w	r3, r2, r3
 8007b4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b50:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007b54:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007b58:	f7f9 f916 	bl	8000d88 <__aeabi_uldivmod>
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	460b      	mov	r3, r1
 8007b60:	4611      	mov	r1, r2
 8007b62:	4b3d      	ldr	r3, [pc, #244]	@ (8007c58 <UART_SetConfig+0x360>)
 8007b64:	fba3 2301 	umull	r2, r3, r3, r1
 8007b68:	095b      	lsrs	r3, r3, #5
 8007b6a:	2264      	movs	r2, #100	@ 0x64
 8007b6c:	fb02 f303 	mul.w	r3, r2, r3
 8007b70:	1acb      	subs	r3, r1, r3
 8007b72:	00db      	lsls	r3, r3, #3
 8007b74:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007b78:	4b37      	ldr	r3, [pc, #220]	@ (8007c58 <UART_SetConfig+0x360>)
 8007b7a:	fba3 2302 	umull	r2, r3, r3, r2
 8007b7e:	095b      	lsrs	r3, r3, #5
 8007b80:	005b      	lsls	r3, r3, #1
 8007b82:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007b86:	441c      	add	r4, r3
 8007b88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b8c:	2200      	movs	r2, #0
 8007b8e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b92:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007b96:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007b9a:	4642      	mov	r2, r8
 8007b9c:	464b      	mov	r3, r9
 8007b9e:	1891      	adds	r1, r2, r2
 8007ba0:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007ba2:	415b      	adcs	r3, r3
 8007ba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007ba6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007baa:	4641      	mov	r1, r8
 8007bac:	1851      	adds	r1, r2, r1
 8007bae:	6339      	str	r1, [r7, #48]	@ 0x30
 8007bb0:	4649      	mov	r1, r9
 8007bb2:	414b      	adcs	r3, r1
 8007bb4:	637b      	str	r3, [r7, #52]	@ 0x34
 8007bb6:	f04f 0200 	mov.w	r2, #0
 8007bba:	f04f 0300 	mov.w	r3, #0
 8007bbe:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007bc2:	4659      	mov	r1, fp
 8007bc4:	00cb      	lsls	r3, r1, #3
 8007bc6:	4651      	mov	r1, sl
 8007bc8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007bcc:	4651      	mov	r1, sl
 8007bce:	00ca      	lsls	r2, r1, #3
 8007bd0:	4610      	mov	r0, r2
 8007bd2:	4619      	mov	r1, r3
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	4642      	mov	r2, r8
 8007bd8:	189b      	adds	r3, r3, r2
 8007bda:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007bde:	464b      	mov	r3, r9
 8007be0:	460a      	mov	r2, r1
 8007be2:	eb42 0303 	adc.w	r3, r2, r3
 8007be6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	2200      	movs	r2, #0
 8007bf2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007bf6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007bfa:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007bfe:	460b      	mov	r3, r1
 8007c00:	18db      	adds	r3, r3, r3
 8007c02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007c04:	4613      	mov	r3, r2
 8007c06:	eb42 0303 	adc.w	r3, r2, r3
 8007c0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007c0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007c10:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007c14:	f7f9 f8b8 	bl	8000d88 <__aeabi_uldivmod>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	460b      	mov	r3, r1
 8007c1c:	4b0e      	ldr	r3, [pc, #56]	@ (8007c58 <UART_SetConfig+0x360>)
 8007c1e:	fba3 1302 	umull	r1, r3, r3, r2
 8007c22:	095b      	lsrs	r3, r3, #5
 8007c24:	2164      	movs	r1, #100	@ 0x64
 8007c26:	fb01 f303 	mul.w	r3, r1, r3
 8007c2a:	1ad3      	subs	r3, r2, r3
 8007c2c:	00db      	lsls	r3, r3, #3
 8007c2e:	3332      	adds	r3, #50	@ 0x32
 8007c30:	4a09      	ldr	r2, [pc, #36]	@ (8007c58 <UART_SetConfig+0x360>)
 8007c32:	fba2 2303 	umull	r2, r3, r2, r3
 8007c36:	095b      	lsrs	r3, r3, #5
 8007c38:	f003 0207 	and.w	r2, r3, #7
 8007c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	4422      	add	r2, r4
 8007c44:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007c46:	e109      	b.n	8007e5c <UART_SetConfig+0x564>
 8007c48:	00a037a0 	.word	0x00a037a0
 8007c4c:	0800fe7c 	.word	0x0800fe7c
 8007c50:	40011000 	.word	0x40011000
 8007c54:	40011400 	.word	0x40011400
 8007c58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007c5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007c60:	2200      	movs	r2, #0
 8007c62:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007c66:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007c6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007c6e:	4642      	mov	r2, r8
 8007c70:	464b      	mov	r3, r9
 8007c72:	1891      	adds	r1, r2, r2
 8007c74:	6239      	str	r1, [r7, #32]
 8007c76:	415b      	adcs	r3, r3
 8007c78:	627b      	str	r3, [r7, #36]	@ 0x24
 8007c7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007c7e:	4641      	mov	r1, r8
 8007c80:	1854      	adds	r4, r2, r1
 8007c82:	4649      	mov	r1, r9
 8007c84:	eb43 0501 	adc.w	r5, r3, r1
 8007c88:	f04f 0200 	mov.w	r2, #0
 8007c8c:	f04f 0300 	mov.w	r3, #0
 8007c90:	00eb      	lsls	r3, r5, #3
 8007c92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007c96:	00e2      	lsls	r2, r4, #3
 8007c98:	4614      	mov	r4, r2
 8007c9a:	461d      	mov	r5, r3
 8007c9c:	4643      	mov	r3, r8
 8007c9e:	18e3      	adds	r3, r4, r3
 8007ca0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007ca4:	464b      	mov	r3, r9
 8007ca6:	eb45 0303 	adc.w	r3, r5, r3
 8007caa:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007cae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	2200      	movs	r2, #0
 8007cb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007cba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007cbe:	f04f 0200 	mov.w	r2, #0
 8007cc2:	f04f 0300 	mov.w	r3, #0
 8007cc6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007cca:	4629      	mov	r1, r5
 8007ccc:	008b      	lsls	r3, r1, #2
 8007cce:	4621      	mov	r1, r4
 8007cd0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007cd4:	4621      	mov	r1, r4
 8007cd6:	008a      	lsls	r2, r1, #2
 8007cd8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007cdc:	f7f9 f854 	bl	8000d88 <__aeabi_uldivmod>
 8007ce0:	4602      	mov	r2, r0
 8007ce2:	460b      	mov	r3, r1
 8007ce4:	4b60      	ldr	r3, [pc, #384]	@ (8007e68 <UART_SetConfig+0x570>)
 8007ce6:	fba3 2302 	umull	r2, r3, r3, r2
 8007cea:	095b      	lsrs	r3, r3, #5
 8007cec:	011c      	lsls	r4, r3, #4
 8007cee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007cf8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007cfc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007d00:	4642      	mov	r2, r8
 8007d02:	464b      	mov	r3, r9
 8007d04:	1891      	adds	r1, r2, r2
 8007d06:	61b9      	str	r1, [r7, #24]
 8007d08:	415b      	adcs	r3, r3
 8007d0a:	61fb      	str	r3, [r7, #28]
 8007d0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007d10:	4641      	mov	r1, r8
 8007d12:	1851      	adds	r1, r2, r1
 8007d14:	6139      	str	r1, [r7, #16]
 8007d16:	4649      	mov	r1, r9
 8007d18:	414b      	adcs	r3, r1
 8007d1a:	617b      	str	r3, [r7, #20]
 8007d1c:	f04f 0200 	mov.w	r2, #0
 8007d20:	f04f 0300 	mov.w	r3, #0
 8007d24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007d28:	4659      	mov	r1, fp
 8007d2a:	00cb      	lsls	r3, r1, #3
 8007d2c:	4651      	mov	r1, sl
 8007d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d32:	4651      	mov	r1, sl
 8007d34:	00ca      	lsls	r2, r1, #3
 8007d36:	4610      	mov	r0, r2
 8007d38:	4619      	mov	r1, r3
 8007d3a:	4603      	mov	r3, r0
 8007d3c:	4642      	mov	r2, r8
 8007d3e:	189b      	adds	r3, r3, r2
 8007d40:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007d44:	464b      	mov	r3, r9
 8007d46:	460a      	mov	r2, r1
 8007d48:	eb42 0303 	adc.w	r3, r2, r3
 8007d4c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d54:	685b      	ldr	r3, [r3, #4]
 8007d56:	2200      	movs	r2, #0
 8007d58:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007d5a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007d5c:	f04f 0200 	mov.w	r2, #0
 8007d60:	f04f 0300 	mov.w	r3, #0
 8007d64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007d68:	4649      	mov	r1, r9
 8007d6a:	008b      	lsls	r3, r1, #2
 8007d6c:	4641      	mov	r1, r8
 8007d6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007d72:	4641      	mov	r1, r8
 8007d74:	008a      	lsls	r2, r1, #2
 8007d76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007d7a:	f7f9 f805 	bl	8000d88 <__aeabi_uldivmod>
 8007d7e:	4602      	mov	r2, r0
 8007d80:	460b      	mov	r3, r1
 8007d82:	4611      	mov	r1, r2
 8007d84:	4b38      	ldr	r3, [pc, #224]	@ (8007e68 <UART_SetConfig+0x570>)
 8007d86:	fba3 2301 	umull	r2, r3, r3, r1
 8007d8a:	095b      	lsrs	r3, r3, #5
 8007d8c:	2264      	movs	r2, #100	@ 0x64
 8007d8e:	fb02 f303 	mul.w	r3, r2, r3
 8007d92:	1acb      	subs	r3, r1, r3
 8007d94:	011b      	lsls	r3, r3, #4
 8007d96:	3332      	adds	r3, #50	@ 0x32
 8007d98:	4a33      	ldr	r2, [pc, #204]	@ (8007e68 <UART_SetConfig+0x570>)
 8007d9a:	fba2 2303 	umull	r2, r3, r2, r3
 8007d9e:	095b      	lsrs	r3, r3, #5
 8007da0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007da4:	441c      	add	r4, r3
 8007da6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007daa:	2200      	movs	r2, #0
 8007dac:	673b      	str	r3, [r7, #112]	@ 0x70
 8007dae:	677a      	str	r2, [r7, #116]	@ 0x74
 8007db0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007db4:	4642      	mov	r2, r8
 8007db6:	464b      	mov	r3, r9
 8007db8:	1891      	adds	r1, r2, r2
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	415b      	adcs	r3, r3
 8007dbe:	60fb      	str	r3, [r7, #12]
 8007dc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007dc4:	4641      	mov	r1, r8
 8007dc6:	1851      	adds	r1, r2, r1
 8007dc8:	6039      	str	r1, [r7, #0]
 8007dca:	4649      	mov	r1, r9
 8007dcc:	414b      	adcs	r3, r1
 8007dce:	607b      	str	r3, [r7, #4]
 8007dd0:	f04f 0200 	mov.w	r2, #0
 8007dd4:	f04f 0300 	mov.w	r3, #0
 8007dd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007ddc:	4659      	mov	r1, fp
 8007dde:	00cb      	lsls	r3, r1, #3
 8007de0:	4651      	mov	r1, sl
 8007de2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007de6:	4651      	mov	r1, sl
 8007de8:	00ca      	lsls	r2, r1, #3
 8007dea:	4610      	mov	r0, r2
 8007dec:	4619      	mov	r1, r3
 8007dee:	4603      	mov	r3, r0
 8007df0:	4642      	mov	r2, r8
 8007df2:	189b      	adds	r3, r3, r2
 8007df4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007df6:	464b      	mov	r3, r9
 8007df8:	460a      	mov	r2, r1
 8007dfa:	eb42 0303 	adc.w	r3, r2, r3
 8007dfe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	663b      	str	r3, [r7, #96]	@ 0x60
 8007e0a:	667a      	str	r2, [r7, #100]	@ 0x64
 8007e0c:	f04f 0200 	mov.w	r2, #0
 8007e10:	f04f 0300 	mov.w	r3, #0
 8007e14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007e18:	4649      	mov	r1, r9
 8007e1a:	008b      	lsls	r3, r1, #2
 8007e1c:	4641      	mov	r1, r8
 8007e1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e22:	4641      	mov	r1, r8
 8007e24:	008a      	lsls	r2, r1, #2
 8007e26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007e2a:	f7f8 ffad 	bl	8000d88 <__aeabi_uldivmod>
 8007e2e:	4602      	mov	r2, r0
 8007e30:	460b      	mov	r3, r1
 8007e32:	4b0d      	ldr	r3, [pc, #52]	@ (8007e68 <UART_SetConfig+0x570>)
 8007e34:	fba3 1302 	umull	r1, r3, r3, r2
 8007e38:	095b      	lsrs	r3, r3, #5
 8007e3a:	2164      	movs	r1, #100	@ 0x64
 8007e3c:	fb01 f303 	mul.w	r3, r1, r3
 8007e40:	1ad3      	subs	r3, r2, r3
 8007e42:	011b      	lsls	r3, r3, #4
 8007e44:	3332      	adds	r3, #50	@ 0x32
 8007e46:	4a08      	ldr	r2, [pc, #32]	@ (8007e68 <UART_SetConfig+0x570>)
 8007e48:	fba2 2303 	umull	r2, r3, r2, r3
 8007e4c:	095b      	lsrs	r3, r3, #5
 8007e4e:	f003 020f 	and.w	r2, r3, #15
 8007e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	4422      	add	r2, r4
 8007e5a:	609a      	str	r2, [r3, #8]
}
 8007e5c:	bf00      	nop
 8007e5e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007e62:	46bd      	mov	sp, r7
 8007e64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007e68:	51eb851f 	.word	0x51eb851f

08007e6c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e6c:	b480      	push	{r7}
 8007e6e:	b083      	sub	sp, #12
 8007e70:	af00      	add	r7, sp, #0
 8007e72:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	f103 0208 	add.w	r2, r3, #8
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f04f 32ff 	mov.w	r2, #4294967295
 8007e84:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	f103 0208 	add.w	r2, r3, #8
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	f103 0208 	add.w	r2, r3, #8
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007ea0:	bf00      	nop
 8007ea2:	370c      	adds	r7, #12
 8007ea4:	46bd      	mov	sp, r7
 8007ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eaa:	4770      	bx	lr

08007eac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007eac:	b480      	push	{r7}
 8007eae:	b083      	sub	sp, #12
 8007eb0:	af00      	add	r7, sp, #0
 8007eb2:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2200      	movs	r2, #0
 8007eb8:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007eba:	bf00      	nop
 8007ebc:	370c      	adds	r7, #12
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec4:	4770      	bx	lr

08007ec6 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8007ec6:	b480      	push	{r7}
 8007ec8:	b085      	sub	sp, #20
 8007eca:	af00      	add	r7, sp, #0
 8007ecc:	6078      	str	r0, [r7, #4]
 8007ece:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8007ed6:	68bb      	ldr	r3, [r7, #8]
 8007ed8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007edc:	d103      	bne.n	8007ee6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	691b      	ldr	r3, [r3, #16]
 8007ee2:	60fb      	str	r3, [r7, #12]
 8007ee4:	e00c      	b.n	8007f00 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	3308      	adds	r3, #8
 8007eea:	60fb      	str	r3, [r7, #12]
 8007eec:	e002      	b.n	8007ef4 <vListInsert+0x2e>
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	685b      	ldr	r3, [r3, #4]
 8007ef2:	60fb      	str	r3, [r7, #12]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	429a      	cmp	r2, r3
 8007efe:	d2f6      	bcs.n	8007eee <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8007f00:	68fb      	ldr	r3, [r7, #12]
 8007f02:	685a      	ldr	r2, [r3, #4]
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f08:	683b      	ldr	r3, [r7, #0]
 8007f0a:	685b      	ldr	r3, [r3, #4]
 8007f0c:	683a      	ldr	r2, [r7, #0]
 8007f0e:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8007f10:	683b      	ldr	r3, [r7, #0]
 8007f12:	68fa      	ldr	r2, [r7, #12]
 8007f14:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	683a      	ldr	r2, [r7, #0]
 8007f1a:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	687a      	ldr	r2, [r7, #4]
 8007f20:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	1c5a      	adds	r2, r3, #1
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	601a      	str	r2, [r3, #0]
}
 8007f2c:	bf00      	nop
 8007f2e:	3714      	adds	r7, #20
 8007f30:	46bd      	mov	sp, r7
 8007f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f36:	4770      	bx	lr

08007f38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b085      	sub	sp, #20
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	691b      	ldr	r3, [r3, #16]
 8007f44:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	687a      	ldr	r2, [r7, #4]
 8007f4c:	6892      	ldr	r2, [r2, #8]
 8007f4e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	687a      	ldr	r2, [r7, #4]
 8007f56:	6852      	ldr	r2, [r2, #4]
 8007f58:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d103      	bne.n	8007f6c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	689a      	ldr	r2, [r3, #8]
 8007f68:	68fb      	ldr	r3, [r7, #12]
 8007f6a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2200      	movs	r2, #0
 8007f70:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	1e5a      	subs	r2, r3, #1
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	681b      	ldr	r3, [r3, #0]
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3714      	adds	r7, #20
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr

08007f8c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b086      	sub	sp, #24
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
 8007f94:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8007f96:	2301      	movs	r3, #1
 8007f98:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8007f9e:	693b      	ldr	r3, [r7, #16]
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d10b      	bne.n	8007fbc <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8007fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fa8:	f383 8811 	msr	BASEPRI, r3
 8007fac:	f3bf 8f6f 	isb	sy
 8007fb0:	f3bf 8f4f 	dsb	sy
 8007fb4:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8007fb6:	bf00      	nop
 8007fb8:	bf00      	nop
 8007fba:	e7fd      	b.n	8007fb8 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8007fbc:	693b      	ldr	r3, [r7, #16]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d05d      	beq.n	800807e <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8007fc2:	693b      	ldr	r3, [r7, #16]
 8007fc4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d059      	beq.n	800807e <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8007fca:	693b      	ldr	r3, [r7, #16]
 8007fcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007fce:	693b      	ldr	r3, [r7, #16]
 8007fd0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007fd2:	2100      	movs	r1, #0
 8007fd4:	fba3 2302 	umull	r2, r3, r3, r2
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d000      	beq.n	8007fde <xQueueGenericReset+0x52>
 8007fdc:	2101      	movs	r1, #1
 8007fde:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	d14c      	bne.n	800807e <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8007fe4:	f001 feaa 	bl	8009d3c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007fe8:	693b      	ldr	r3, [r7, #16]
 8007fea:	681a      	ldr	r2, [r3, #0]
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007ff0:	6939      	ldr	r1, [r7, #16]
 8007ff2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007ff4:	fb01 f303 	mul.w	r3, r1, r3
 8007ff8:	441a      	add	r2, r3
 8007ffa:	693b      	ldr	r3, [r7, #16]
 8007ffc:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007ffe:	693b      	ldr	r3, [r7, #16]
 8008000:	2200      	movs	r2, #0
 8008002:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8008004:	693b      	ldr	r3, [r7, #16]
 8008006:	681a      	ldr	r2, [r3, #0]
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800800c:	693b      	ldr	r3, [r7, #16]
 800800e:	681a      	ldr	r2, [r3, #0]
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008014:	3b01      	subs	r3, #1
 8008016:	6939      	ldr	r1, [r7, #16]
 8008018:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800801a:	fb01 f303 	mul.w	r3, r1, r3
 800801e:	441a      	add	r2, r3
 8008020:	693b      	ldr	r3, [r7, #16]
 8008022:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8008024:	693b      	ldr	r3, [r7, #16]
 8008026:	22ff      	movs	r2, #255	@ 0xff
 8008028:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 800802c:	693b      	ldr	r3, [r7, #16]
 800802e:	22ff      	movs	r2, #255	@ 0xff
 8008030:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d114      	bne.n	8008064 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800803a:	693b      	ldr	r3, [r7, #16]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d01a      	beq.n	8008078 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008042:	693b      	ldr	r3, [r7, #16]
 8008044:	3310      	adds	r3, #16
 8008046:	4618      	mov	r0, r3
 8008048:	f001 f892 	bl	8009170 <xTaskRemoveFromEventList>
 800804c:	4603      	mov	r3, r0
 800804e:	2b00      	cmp	r3, #0
 8008050:	d012      	beq.n	8008078 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8008052:	4b16      	ldr	r3, [pc, #88]	@ (80080ac <xQueueGenericReset+0x120>)
 8008054:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008058:	601a      	str	r2, [r3, #0]
 800805a:	f3bf 8f4f 	dsb	sy
 800805e:	f3bf 8f6f 	isb	sy
 8008062:	e009      	b.n	8008078 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008064:	693b      	ldr	r3, [r7, #16]
 8008066:	3310      	adds	r3, #16
 8008068:	4618      	mov	r0, r3
 800806a:	f7ff feff 	bl	8007e6c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800806e:	693b      	ldr	r3, [r7, #16]
 8008070:	3324      	adds	r3, #36	@ 0x24
 8008072:	4618      	mov	r0, r3
 8008074:	f7ff fefa 	bl	8007e6c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8008078:	f001 fe92 	bl	8009da0 <vPortExitCritical>
 800807c:	e001      	b.n	8008082 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 800807e:	2300      	movs	r3, #0
 8008080:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8008082:	697b      	ldr	r3, [r7, #20]
 8008084:	2b00      	cmp	r3, #0
 8008086:	d10b      	bne.n	80080a0 <xQueueGenericReset+0x114>
        __asm volatile
 8008088:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800808c:	f383 8811 	msr	BASEPRI, r3
 8008090:	f3bf 8f6f 	isb	sy
 8008094:	f3bf 8f4f 	dsb	sy
 8008098:	60bb      	str	r3, [r7, #8]
    }
 800809a:	bf00      	nop
 800809c:	bf00      	nop
 800809e:	e7fd      	b.n	800809c <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80080a0:	697b      	ldr	r3, [r7, #20]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3718      	adds	r7, #24
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	e000ed04 	.word	0xe000ed04

080080b0 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b08a      	sub	sp, #40	@ 0x28
 80080b4:	af02      	add	r7, sp, #8
 80080b6:	60f8      	str	r0, [r7, #12]
 80080b8:	60b9      	str	r1, [r7, #8]
 80080ba:	4613      	mov	r3, r2
 80080bc:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80080be:	2300      	movs	r3, #0
 80080c0:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	d02e      	beq.n	8008126 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80080c8:	2100      	movs	r1, #0
 80080ca:	68ba      	ldr	r2, [r7, #8]
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	fba3 2302 	umull	r2, r3, r3, r2
 80080d2:	2b00      	cmp	r3, #0
 80080d4:	d000      	beq.n	80080d8 <xQueueGenericCreate+0x28>
 80080d6:	2101      	movs	r1, #1
 80080d8:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d123      	bne.n	8008126 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	68ba      	ldr	r2, [r7, #8]
 80080e2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80080e6:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 80080ea:	d81c      	bhi.n	8008126 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	fb02 f303 	mul.w	r3, r2, r3
 80080f4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80080f6:	69bb      	ldr	r3, [r7, #24]
 80080f8:	3350      	adds	r3, #80	@ 0x50
 80080fa:	4618      	mov	r0, r3
 80080fc:	f001 ff48 	bl	8009f90 <pvPortMalloc>
 8008100:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8008102:	69fb      	ldr	r3, [r7, #28]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d01d      	beq.n	8008144 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8008108:	69fb      	ldr	r3, [r7, #28]
 800810a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800810c:	697b      	ldr	r3, [r7, #20]
 800810e:	3350      	adds	r3, #80	@ 0x50
 8008110:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008112:	79fa      	ldrb	r2, [r7, #7]
 8008114:	69fb      	ldr	r3, [r7, #28]
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	4613      	mov	r3, r2
 800811a:	697a      	ldr	r2, [r7, #20]
 800811c:	68b9      	ldr	r1, [r7, #8]
 800811e:	68f8      	ldr	r0, [r7, #12]
 8008120:	f000 f815 	bl	800814e <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8008124:	e00e      	b.n	8008144 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8008126:	69fb      	ldr	r3, [r7, #28]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d10b      	bne.n	8008144 <xQueueGenericCreate+0x94>
        __asm volatile
 800812c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008130:	f383 8811 	msr	BASEPRI, r3
 8008134:	f3bf 8f6f 	isb	sy
 8008138:	f3bf 8f4f 	dsb	sy
 800813c:	613b      	str	r3, [r7, #16]
    }
 800813e:	bf00      	nop
 8008140:	bf00      	nop
 8008142:	e7fd      	b.n	8008140 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8008144:	69fb      	ldr	r3, [r7, #28]
    }
 8008146:	4618      	mov	r0, r3
 8008148:	3720      	adds	r7, #32
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}

0800814e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 800814e:	b580      	push	{r7, lr}
 8008150:	b084      	sub	sp, #16
 8008152:	af00      	add	r7, sp, #0
 8008154:	60f8      	str	r0, [r7, #12]
 8008156:	60b9      	str	r1, [r7, #8]
 8008158:	607a      	str	r2, [r7, #4]
 800815a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2b00      	cmp	r3, #0
 8008160:	d103      	bne.n	800816a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	69ba      	ldr	r2, [r7, #24]
 8008166:	601a      	str	r2, [r3, #0]
 8008168:	e002      	b.n	8008170 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800816a:	69bb      	ldr	r3, [r7, #24]
 800816c:	687a      	ldr	r2, [r7, #4]
 800816e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8008170:	69bb      	ldr	r3, [r7, #24]
 8008172:	68fa      	ldr	r2, [r7, #12]
 8008174:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8008176:	69bb      	ldr	r3, [r7, #24]
 8008178:	68ba      	ldr	r2, [r7, #8]
 800817a:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800817c:	2101      	movs	r1, #1
 800817e:	69b8      	ldr	r0, [r7, #24]
 8008180:	f7ff ff04 	bl	8007f8c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	78fa      	ldrb	r2, [r7, #3]
 8008188:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 800818c:	bf00      	nop
 800818e:	3710      	adds	r7, #16
 8008190:	46bd      	mov	sp, r7
 8008192:	bd80      	pop	{r7, pc}

08008194 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8008194:	b580      	push	{r7, lr}
 8008196:	b082      	sub	sp, #8
 8008198:	af00      	add	r7, sp, #0
 800819a:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d00e      	beq.n	80081c0 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	2200      	movs	r2, #0
 80081a6:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80081b4:	2300      	movs	r3, #0
 80081b6:	2200      	movs	r2, #0
 80081b8:	2100      	movs	r1, #0
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f81c 	bl	80081f8 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 80081c0:	bf00      	nop
 80081c2:	3708      	adds	r7, #8
 80081c4:	46bd      	mov	sp, r7
 80081c6:	bd80      	pop	{r7, pc}

080081c8 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	4603      	mov	r3, r0
 80081d0:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80081d2:	2301      	movs	r3, #1
 80081d4:	617b      	str	r3, [r7, #20]
 80081d6:	2300      	movs	r3, #0
 80081d8:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80081da:	79fb      	ldrb	r3, [r7, #7]
 80081dc:	461a      	mov	r2, r3
 80081de:	6939      	ldr	r1, [r7, #16]
 80081e0:	6978      	ldr	r0, [r7, #20]
 80081e2:	f7ff ff65 	bl	80080b0 <xQueueGenericCreate>
 80081e6:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80081e8:	68f8      	ldr	r0, [r7, #12]
 80081ea:	f7ff ffd3 	bl	8008194 <prvInitialiseMutex>

        return xNewQueue;
 80081ee:	68fb      	ldr	r3, [r7, #12]
    }
 80081f0:	4618      	mov	r0, r3
 80081f2:	3718      	adds	r7, #24
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bd80      	pop	{r7, pc}

080081f8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b08c      	sub	sp, #48	@ 0x30
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	60f8      	str	r0, [r7, #12]
 8008200:	60b9      	str	r1, [r7, #8]
 8008202:	607a      	str	r2, [r7, #4]
 8008204:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008206:	2300      	movs	r3, #0
 8008208:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	62bb      	str	r3, [r7, #40]	@ 0x28

    configASSERT( pxQueue );
 800820e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008210:	2b00      	cmp	r3, #0
 8008212:	d10b      	bne.n	800822c <xQueueGenericSend+0x34>
        __asm volatile
 8008214:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008218:	f383 8811 	msr	BASEPRI, r3
 800821c:	f3bf 8f6f 	isb	sy
 8008220:	f3bf 8f4f 	dsb	sy
 8008224:	623b      	str	r3, [r7, #32]
    }
 8008226:	bf00      	nop
 8008228:	bf00      	nop
 800822a:	e7fd      	b.n	8008228 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800822c:	68bb      	ldr	r3, [r7, #8]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d103      	bne.n	800823a <xQueueGenericSend+0x42>
 8008232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008234:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008236:	2b00      	cmp	r3, #0
 8008238:	d101      	bne.n	800823e <xQueueGenericSend+0x46>
 800823a:	2301      	movs	r3, #1
 800823c:	e000      	b.n	8008240 <xQueueGenericSend+0x48>
 800823e:	2300      	movs	r3, #0
 8008240:	2b00      	cmp	r3, #0
 8008242:	d10b      	bne.n	800825c <xQueueGenericSend+0x64>
        __asm volatile
 8008244:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008248:	f383 8811 	msr	BASEPRI, r3
 800824c:	f3bf 8f6f 	isb	sy
 8008250:	f3bf 8f4f 	dsb	sy
 8008254:	61fb      	str	r3, [r7, #28]
    }
 8008256:	bf00      	nop
 8008258:	bf00      	nop
 800825a:	e7fd      	b.n	8008258 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	2b02      	cmp	r3, #2
 8008260:	d103      	bne.n	800826a <xQueueGenericSend+0x72>
 8008262:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008264:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008266:	2b01      	cmp	r3, #1
 8008268:	d101      	bne.n	800826e <xQueueGenericSend+0x76>
 800826a:	2301      	movs	r3, #1
 800826c:	e000      	b.n	8008270 <xQueueGenericSend+0x78>
 800826e:	2300      	movs	r3, #0
 8008270:	2b00      	cmp	r3, #0
 8008272:	d10b      	bne.n	800828c <xQueueGenericSend+0x94>
        __asm volatile
 8008274:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	61bb      	str	r3, [r7, #24]
    }
 8008286:	bf00      	nop
 8008288:	bf00      	nop
 800828a:	e7fd      	b.n	8008288 <xQueueGenericSend+0x90>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800828c:	f001 fd56 	bl	8009d3c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008292:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008296:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008298:	429a      	cmp	r2, r3
 800829a:	d302      	bcc.n	80082a2 <xQueueGenericSend+0xaa>
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	2b02      	cmp	r3, #2
 80082a0:	d129      	bne.n	80082f6 <xQueueGenericSend+0xfe>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	68b9      	ldr	r1, [r7, #8]
 80082a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80082a8:	f000 f990 	bl	80085cc <prvCopyDataToQueue>
 80082ac:	6278      	str	r0, [r7, #36]	@ 0x24

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80082ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d010      	beq.n	80082d8 <xQueueGenericSend+0xe0>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80082b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082b8:	3324      	adds	r3, #36	@ 0x24
 80082ba:	4618      	mov	r0, r3
 80082bc:	f000 ff58 	bl	8009170 <xTaskRemoveFromEventList>
 80082c0:	4603      	mov	r3, r0
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d013      	beq.n	80082ee <xQueueGenericSend+0xf6>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80082c6:	4b40      	ldr	r3, [pc, #256]	@ (80083c8 <xQueueGenericSend+0x1d0>)
 80082c8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	f3bf 8f4f 	dsb	sy
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	e00a      	b.n	80082ee <xQueueGenericSend+0xf6>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 80082d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d007      	beq.n	80082ee <xQueueGenericSend+0xf6>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 80082de:	4b3a      	ldr	r3, [pc, #232]	@ (80083c8 <xQueueGenericSend+0x1d0>)
 80082e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082e4:	601a      	str	r2, [r3, #0]
 80082e6:	f3bf 8f4f 	dsb	sy
 80082ea:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80082ee:	f001 fd57 	bl	8009da0 <vPortExitCritical>
                return pdPASS;
 80082f2:	2301      	movs	r3, #1
 80082f4:	e063      	b.n	80083be <xQueueGenericSend+0x1c6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d103      	bne.n	8008304 <xQueueGenericSend+0x10c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80082fc:	f001 fd50 	bl	8009da0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8008300:	2300      	movs	r3, #0
 8008302:	e05c      	b.n	80083be <xQueueGenericSend+0x1c6>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008304:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008306:	2b00      	cmp	r3, #0
 8008308:	d106      	bne.n	8008318 <xQueueGenericSend+0x120>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800830a:	f107 0310 	add.w	r3, r7, #16
 800830e:	4618      	mov	r0, r3
 8008310:	f001 f808 	bl	8009324 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008314:	2301      	movs	r3, #1
 8008316:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8008318:	f001 fd42 	bl	8009da0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 800831c:	f000 fc5c 	bl	8008bd8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008320:	f001 fd0c 	bl	8009d3c <vPortEnterCritical>
 8008324:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008326:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800832a:	b25b      	sxtb	r3, r3
 800832c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008330:	d103      	bne.n	800833a <xQueueGenericSend+0x142>
 8008332:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008334:	2200      	movs	r2, #0
 8008336:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800833a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800833c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008340:	b25b      	sxtb	r3, r3
 8008342:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008346:	d103      	bne.n	8008350 <xQueueGenericSend+0x158>
 8008348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800834a:	2200      	movs	r2, #0
 800834c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008350:	f001 fd26 	bl	8009da0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008354:	1d3a      	adds	r2, r7, #4
 8008356:	f107 0310 	add.w	r3, r7, #16
 800835a:	4611      	mov	r1, r2
 800835c:	4618      	mov	r0, r3
 800835e:	f000 fff7 	bl	8009350 <xTaskCheckForTimeOut>
 8008362:	4603      	mov	r3, r0
 8008364:	2b00      	cmp	r3, #0
 8008366:	d124      	bne.n	80083b2 <xQueueGenericSend+0x1ba>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008368:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800836a:	f000 fa01 	bl	8008770 <prvIsQueueFull>
 800836e:	4603      	mov	r3, r0
 8008370:	2b00      	cmp	r3, #0
 8008372:	d018      	beq.n	80083a6 <xQueueGenericSend+0x1ae>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008374:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008376:	3310      	adds	r3, #16
 8008378:	687a      	ldr	r2, [r7, #4]
 800837a:	4611      	mov	r1, r2
 800837c:	4618      	mov	r0, r3
 800837e:	f000 fed1 	bl	8009124 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8008382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008384:	f000 f98c 	bl	80086a0 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8008388:	f000 fc34 	bl	8008bf4 <xTaskResumeAll>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	f47f af7c 	bne.w	800828c <xQueueGenericSend+0x94>
                {
                    portYIELD_WITHIN_API();
 8008394:	4b0c      	ldr	r3, [pc, #48]	@ (80083c8 <xQueueGenericSend+0x1d0>)
 8008396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800839a:	601a      	str	r2, [r3, #0]
 800839c:	f3bf 8f4f 	dsb	sy
 80083a0:	f3bf 8f6f 	isb	sy
 80083a4:	e772      	b.n	800828c <xQueueGenericSend+0x94>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80083a6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083a8:	f000 f97a 	bl	80086a0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80083ac:	f000 fc22 	bl	8008bf4 <xTaskResumeAll>
 80083b0:	e76c      	b.n	800828c <xQueueGenericSend+0x94>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80083b2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80083b4:	f000 f974 	bl	80086a0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80083b8:	f000 fc1c 	bl	8008bf4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80083bc:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80083be:	4618      	mov	r0, r3
 80083c0:	3730      	adds	r7, #48	@ 0x30
 80083c2:	46bd      	mov	sp, r7
 80083c4:	bd80      	pop	{r7, pc}
 80083c6:	bf00      	nop
 80083c8:	e000ed04 	.word	0xe000ed04

080083cc <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 80083cc:	b580      	push	{r7, lr}
 80083ce:	b08c      	sub	sp, #48	@ 0x30
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 80083d6:	2300      	movs	r3, #0
 80083d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 80083de:	2300      	movs	r3, #0
 80083e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80083e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083e4:	2b00      	cmp	r3, #0
 80083e6:	d10b      	bne.n	8008400 <xQueueSemaphoreTake+0x34>
        __asm volatile
 80083e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083ec:	f383 8811 	msr	BASEPRI, r3
 80083f0:	f3bf 8f6f 	isb	sy
 80083f4:	f3bf 8f4f 	dsb	sy
 80083f8:	61bb      	str	r3, [r7, #24]
    }
 80083fa:	bf00      	nop
 80083fc:	bf00      	nop
 80083fe:	e7fd      	b.n	80083fc <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8008400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008404:	2b00      	cmp	r3, #0
 8008406:	d00b      	beq.n	8008420 <xQueueSemaphoreTake+0x54>
        __asm volatile
 8008408:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800840c:	f383 8811 	msr	BASEPRI, r3
 8008410:	f3bf 8f6f 	isb	sy
 8008414:	f3bf 8f4f 	dsb	sy
 8008418:	617b      	str	r3, [r7, #20]
    }
 800841a:	bf00      	nop
 800841c:	bf00      	nop
 800841e:	e7fd      	b.n	800841c <xQueueSemaphoreTake+0x50>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8008420:	f001 fc8c 	bl	8009d3c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8008424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008426:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008428:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800842a:	6a3b      	ldr	r3, [r7, #32]
 800842c:	2b00      	cmp	r3, #0
 800842e:	d024      	beq.n	800847a <xQueueSemaphoreTake+0xae>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8008430:	6a3b      	ldr	r3, [r7, #32]
 8008432:	1e5a      	subs	r2, r3, #1
 8008434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008436:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008438:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	2b00      	cmp	r3, #0
 800843e:	d104      	bne.n	800844a <xQueueSemaphoreTake+0x7e>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008440:	f001 fab8 	bl	80099b4 <pvTaskIncrementMutexHeldCount>
 8008444:	4602      	mov	r2, r0
 8008446:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008448:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800844a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800844c:	691b      	ldr	r3, [r3, #16]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d00f      	beq.n	8008472 <xQueueSemaphoreTake+0xa6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008454:	3310      	adds	r3, #16
 8008456:	4618      	mov	r0, r3
 8008458:	f000 fe8a 	bl	8009170 <xTaskRemoveFromEventList>
 800845c:	4603      	mov	r3, r0
 800845e:	2b00      	cmp	r3, #0
 8008460:	d007      	beq.n	8008472 <xQueueSemaphoreTake+0xa6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8008462:	4b4d      	ldr	r3, [pc, #308]	@ (8008598 <xQueueSemaphoreTake+0x1cc>)
 8008464:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008468:	601a      	str	r2, [r3, #0]
 800846a:	f3bf 8f4f 	dsb	sy
 800846e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8008472:	f001 fc95 	bl	8009da0 <vPortExitCritical>
                return pdPASS;
 8008476:	2301      	movs	r3, #1
 8008478:	e089      	b.n	800858e <xQueueSemaphoreTake+0x1c2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d103      	bne.n	8008488 <xQueueSemaphoreTake+0xbc>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8008480:	f001 fc8e 	bl	8009da0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8008484:	2300      	movs	r3, #0
 8008486:	e082      	b.n	800858e <xQueueSemaphoreTake+0x1c2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008488:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800848a:	2b00      	cmp	r3, #0
 800848c:	d106      	bne.n	800849c <xQueueSemaphoreTake+0xd0>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800848e:	f107 030c 	add.w	r3, r7, #12
 8008492:	4618      	mov	r0, r3
 8008494:	f000 ff46 	bl	8009324 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008498:	2301      	movs	r3, #1
 800849a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800849c:	f001 fc80 	bl	8009da0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80084a0:	f000 fb9a 	bl	8008bd8 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80084a4:	f001 fc4a 	bl	8009d3c <vPortEnterCritical>
 80084a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084aa:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084ae:	b25b      	sxtb	r3, r3
 80084b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084b4:	d103      	bne.n	80084be <xQueueSemaphoreTake+0xf2>
 80084b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084b8:	2200      	movs	r2, #0
 80084ba:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80084be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084c0:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80084c4:	b25b      	sxtb	r3, r3
 80084c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084ca:	d103      	bne.n	80084d4 <xQueueSemaphoreTake+0x108>
 80084cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084ce:	2200      	movs	r2, #0
 80084d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80084d4:	f001 fc64 	bl	8009da0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80084d8:	463a      	mov	r2, r7
 80084da:	f107 030c 	add.w	r3, r7, #12
 80084de:	4611      	mov	r1, r2
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 ff35 	bl	8009350 <xTaskCheckForTimeOut>
 80084e6:	4603      	mov	r3, r0
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	d132      	bne.n	8008552 <xQueueSemaphoreTake+0x186>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80084ec:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80084ee:	f000 f929 	bl	8008744 <prvIsQueueEmpty>
 80084f2:	4603      	mov	r3, r0
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d026      	beq.n	8008546 <xQueueSemaphoreTake+0x17a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80084f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d109      	bne.n	8008514 <xQueueSemaphoreTake+0x148>
                    {
                        taskENTER_CRITICAL();
 8008500:	f001 fc1c 	bl	8009d3c <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008504:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008506:	689b      	ldr	r3, [r3, #8]
 8008508:	4618      	mov	r0, r3
 800850a:	f001 f847 	bl	800959c <xTaskPriorityInherit>
 800850e:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 8008510:	f001 fc46 	bl	8009da0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008516:	3324      	adds	r3, #36	@ 0x24
 8008518:	683a      	ldr	r2, [r7, #0]
 800851a:	4611      	mov	r1, r2
 800851c:	4618      	mov	r0, r3
 800851e:	f000 fe01 	bl	8009124 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8008522:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008524:	f000 f8bc 	bl	80086a0 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8008528:	f000 fb64 	bl	8008bf4 <xTaskResumeAll>
 800852c:	4603      	mov	r3, r0
 800852e:	2b00      	cmp	r3, #0
 8008530:	f47f af76 	bne.w	8008420 <xQueueSemaphoreTake+0x54>
                {
                    portYIELD_WITHIN_API();
 8008534:	4b18      	ldr	r3, [pc, #96]	@ (8008598 <xQueueSemaphoreTake+0x1cc>)
 8008536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800853a:	601a      	str	r2, [r3, #0]
 800853c:	f3bf 8f4f 	dsb	sy
 8008540:	f3bf 8f6f 	isb	sy
 8008544:	e76c      	b.n	8008420 <xQueueSemaphoreTake+0x54>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8008546:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008548:	f000 f8aa 	bl	80086a0 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800854c:	f000 fb52 	bl	8008bf4 <xTaskResumeAll>
 8008550:	e766      	b.n	8008420 <xQueueSemaphoreTake+0x54>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8008552:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008554:	f000 f8a4 	bl	80086a0 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008558:	f000 fb4c 	bl	8008bf4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800855c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800855e:	f000 f8f1 	bl	8008744 <prvIsQueueEmpty>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	f43f af5b 	beq.w	8008420 <xQueueSemaphoreTake+0x54>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800856a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800856c:	2b00      	cmp	r3, #0
 800856e:	d00d      	beq.n	800858c <xQueueSemaphoreTake+0x1c0>
                    {
                        taskENTER_CRITICAL();
 8008570:	f001 fbe4 	bl	8009d3c <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008574:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008576:	f000 f811 	bl	800859c <prvGetDisinheritPriorityAfterTimeout>
 800857a:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800857c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800857e:	689b      	ldr	r3, [r3, #8]
 8008580:	69f9      	ldr	r1, [r7, #28]
 8008582:	4618      	mov	r0, r3
 8008584:	f001 f956 	bl	8009834 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8008588:	f001 fc0a 	bl	8009da0 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800858c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800858e:	4618      	mov	r0, r3
 8008590:	3730      	adds	r7, #48	@ 0x30
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}
 8008596:	bf00      	nop
 8008598:	e000ed04 	.word	0xe000ed04

0800859c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800859c:	b480      	push	{r7}
 800859e:	b085      	sub	sp, #20
 80085a0:	af00      	add	r7, sp, #0
 80085a2:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d006      	beq.n	80085ba <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	f1c3 0305 	rsb	r3, r3, #5
 80085b6:	60fb      	str	r3, [r7, #12]
 80085b8:	e001      	b.n	80085be <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80085ba:	2300      	movs	r3, #0
 80085bc:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80085be:	68fb      	ldr	r3, [r7, #12]
    }
 80085c0:	4618      	mov	r0, r3
 80085c2:	3714      	adds	r7, #20
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr

080085cc <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b086      	sub	sp, #24
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	60f8      	str	r0, [r7, #12]
 80085d4:	60b9      	str	r1, [r7, #8]
 80085d6:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80085d8:	2300      	movs	r3, #0
 80085da:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085e0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d10d      	bne.n	8008606 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80085ea:	68fb      	ldr	r3, [r7, #12]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	2b00      	cmp	r3, #0
 80085f0:	d14d      	bne.n	800868e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	689b      	ldr	r3, [r3, #8]
 80085f6:	4618      	mov	r0, r3
 80085f8:	f001 f872 	bl	80096e0 <xTaskPriorityDisinherit>
 80085fc:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	2200      	movs	r2, #0
 8008602:	609a      	str	r2, [r3, #8]
 8008604:	e043      	b.n	800868e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	2b00      	cmp	r3, #0
 800860a:	d119      	bne.n	8008640 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	6858      	ldr	r0, [r3, #4]
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008614:	461a      	mov	r2, r3
 8008616:	68b9      	ldr	r1, [r7, #8]
 8008618:	f004 fa21 	bl	800ca5e <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	685a      	ldr	r2, [r3, #4]
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008624:	441a      	add	r2, r3
 8008626:	68fb      	ldr	r3, [r7, #12]
 8008628:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800862a:	68fb      	ldr	r3, [r7, #12]
 800862c:	685a      	ldr	r2, [r3, #4]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	429a      	cmp	r2, r3
 8008634:	d32b      	bcc.n	800868e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681a      	ldr	r2, [r3, #0]
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	605a      	str	r2, [r3, #4]
 800863e:	e026      	b.n	800868e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	68d8      	ldr	r0, [r3, #12]
 8008644:	68fb      	ldr	r3, [r7, #12]
 8008646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008648:	461a      	mov	r2, r3
 800864a:	68b9      	ldr	r1, [r7, #8]
 800864c:	f004 fa07 	bl	800ca5e <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	68da      	ldr	r2, [r3, #12]
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008658:	425b      	negs	r3, r3
 800865a:	441a      	add	r2, r3
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	68da      	ldr	r2, [r3, #12]
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	429a      	cmp	r2, r3
 800866a:	d207      	bcs.n	800867c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	689a      	ldr	r2, [r3, #8]
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008674:	425b      	negs	r3, r3
 8008676:	441a      	add	r2, r3
 8008678:	68fb      	ldr	r3, [r7, #12]
 800867a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2b02      	cmp	r3, #2
 8008680:	d105      	bne.n	800868e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008682:	693b      	ldr	r3, [r7, #16]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d002      	beq.n	800868e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8008688:	693b      	ldr	r3, [r7, #16]
 800868a:	3b01      	subs	r3, #1
 800868c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	1c5a      	adds	r2, r3, #1
 8008692:	68fb      	ldr	r3, [r7, #12]
 8008694:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8008696:	697b      	ldr	r3, [r7, #20]
}
 8008698:	4618      	mov	r0, r3
 800869a:	3718      	adds	r7, #24
 800869c:	46bd      	mov	sp, r7
 800869e:	bd80      	pop	{r7, pc}

080086a0 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af00      	add	r7, sp, #0
 80086a6:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80086a8:	f001 fb48 	bl	8009d3c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086b2:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80086b4:	e011      	b.n	80086da <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d012      	beq.n	80086e4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	3324      	adds	r3, #36	@ 0x24
 80086c2:	4618      	mov	r0, r3
 80086c4:	f000 fd54 	bl	8009170 <xTaskRemoveFromEventList>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d001      	beq.n	80086d2 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 80086ce:	f000 fea7 	bl	8009420 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 80086d2:	7bfb      	ldrb	r3, [r7, #15]
 80086d4:	3b01      	subs	r3, #1
 80086d6:	b2db      	uxtb	r3, r3
 80086d8:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80086da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80086de:	2b00      	cmp	r3, #0
 80086e0:	dce9      	bgt.n	80086b6 <prvUnlockQueue+0x16>
 80086e2:	e000      	b.n	80086e6 <prvUnlockQueue+0x46>
                    break;
 80086e4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	22ff      	movs	r2, #255	@ 0xff
 80086ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80086ee:	f001 fb57 	bl	8009da0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80086f2:	f001 fb23 	bl	8009d3c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086fc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80086fe:	e011      	b.n	8008724 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	691b      	ldr	r3, [r3, #16]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d012      	beq.n	800872e <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	3310      	adds	r3, #16
 800870c:	4618      	mov	r0, r3
 800870e:	f000 fd2f 	bl	8009170 <xTaskRemoveFromEventList>
 8008712:	4603      	mov	r3, r0
 8008714:	2b00      	cmp	r3, #0
 8008716:	d001      	beq.n	800871c <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8008718:	f000 fe82 	bl	8009420 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 800871c:	7bbb      	ldrb	r3, [r7, #14]
 800871e:	3b01      	subs	r3, #1
 8008720:	b2db      	uxtb	r3, r3
 8008722:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8008724:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008728:	2b00      	cmp	r3, #0
 800872a:	dce9      	bgt.n	8008700 <prvUnlockQueue+0x60>
 800872c:	e000      	b.n	8008730 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 800872e:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	22ff      	movs	r2, #255	@ 0xff
 8008734:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8008738:	f001 fb32 	bl	8009da0 <vPortExitCritical>
}
 800873c:	bf00      	nop
 800873e:	3710      	adds	r7, #16
 8008740:	46bd      	mov	sp, r7
 8008742:	bd80      	pop	{r7, pc}

08008744 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b084      	sub	sp, #16
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800874c:	f001 faf6 	bl	8009d3c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008754:	2b00      	cmp	r3, #0
 8008756:	d102      	bne.n	800875e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8008758:	2301      	movs	r3, #1
 800875a:	60fb      	str	r3, [r7, #12]
 800875c:	e001      	b.n	8008762 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800875e:	2300      	movs	r3, #0
 8008760:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8008762:	f001 fb1d 	bl	8009da0 <vPortExitCritical>

    return xReturn;
 8008766:	68fb      	ldr	r3, [r7, #12]
}
 8008768:	4618      	mov	r0, r3
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b084      	sub	sp, #16
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8008778:	f001 fae0 	bl	8009d3c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008784:	429a      	cmp	r2, r3
 8008786:	d102      	bne.n	800878e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8008788:	2301      	movs	r3, #1
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	e001      	b.n	8008792 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800878e:	2300      	movs	r3, #0
 8008790:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8008792:	f001 fb05 	bl	8009da0 <vPortExitCritical>

    return xReturn;
 8008796:	68fb      	ldr	r3, [r7, #12]
}
 8008798:	4618      	mov	r0, r3
 800879a:	3710      	adds	r7, #16
 800879c:	46bd      	mov	sp, r7
 800879e:	bd80      	pop	{r7, pc}

080087a0 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80087a0:	b580      	push	{r7, lr}
 80087a2:	b08c      	sub	sp, #48	@ 0x30
 80087a4:	af04      	add	r7, sp, #16
 80087a6:	60f8      	str	r0, [r7, #12]
 80087a8:	60b9      	str	r1, [r7, #8]
 80087aa:	603b      	str	r3, [r7, #0]
 80087ac:	4613      	mov	r3, r2
 80087ae:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80087b0:	88fb      	ldrh	r3, [r7, #6]
 80087b2:	009b      	lsls	r3, r3, #2
 80087b4:	4618      	mov	r0, r3
 80087b6:	f001 fbeb 	bl	8009f90 <pvPortMalloc>
 80087ba:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80087bc:	697b      	ldr	r3, [r7, #20]
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d013      	beq.n	80087ea <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80087c2:	2058      	movs	r0, #88	@ 0x58
 80087c4:	f001 fbe4 	bl	8009f90 <pvPortMalloc>
 80087c8:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80087ca:	69fb      	ldr	r3, [r7, #28]
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d008      	beq.n	80087e2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 80087d0:	2258      	movs	r2, #88	@ 0x58
 80087d2:	2100      	movs	r1, #0
 80087d4:	69f8      	ldr	r0, [r7, #28]
 80087d6:	f004 f8d4 	bl	800c982 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 80087da:	69fb      	ldr	r3, [r7, #28]
 80087dc:	697a      	ldr	r2, [r7, #20]
 80087de:	631a      	str	r2, [r3, #48]	@ 0x30
 80087e0:	e005      	b.n	80087ee <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80087e2:	6978      	ldr	r0, [r7, #20]
 80087e4:	f001 fc90 	bl	800a108 <vPortFree>
 80087e8:	e001      	b.n	80087ee <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80087ea:	2300      	movs	r3, #0
 80087ec:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80087ee:	69fb      	ldr	r3, [r7, #28]
 80087f0:	2b00      	cmp	r3, #0
 80087f2:	d013      	beq.n	800881c <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80087f4:	88fa      	ldrh	r2, [r7, #6]
 80087f6:	2300      	movs	r3, #0
 80087f8:	9303      	str	r3, [sp, #12]
 80087fa:	69fb      	ldr	r3, [r7, #28]
 80087fc:	9302      	str	r3, [sp, #8]
 80087fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008800:	9301      	str	r3, [sp, #4]
 8008802:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008804:	9300      	str	r3, [sp, #0]
 8008806:	683b      	ldr	r3, [r7, #0]
 8008808:	68b9      	ldr	r1, [r7, #8]
 800880a:	68f8      	ldr	r0, [r7, #12]
 800880c:	f000 f80e 	bl	800882c <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8008810:	69f8      	ldr	r0, [r7, #28]
 8008812:	f000 f89b 	bl	800894c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8008816:	2301      	movs	r3, #1
 8008818:	61bb      	str	r3, [r7, #24]
 800881a:	e002      	b.n	8008822 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800881c:	f04f 33ff 	mov.w	r3, #4294967295
 8008820:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8008822:	69bb      	ldr	r3, [r7, #24]
    }
 8008824:	4618      	mov	r0, r3
 8008826:	3720      	adds	r7, #32
 8008828:	46bd      	mov	sp, r7
 800882a:	bd80      	pop	{r7, pc}

0800882c <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 800882c:	b580      	push	{r7, lr}
 800882e:	b088      	sub	sp, #32
 8008830:	af00      	add	r7, sp, #0
 8008832:	60f8      	str	r0, [r7, #12]
 8008834:	60b9      	str	r1, [r7, #8]
 8008836:	607a      	str	r2, [r7, #4]
 8008838:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800883a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	009b      	lsls	r3, r3, #2
 8008842:	461a      	mov	r2, r3
 8008844:	21a5      	movs	r1, #165	@ 0xa5
 8008846:	f004 f89c 	bl	800c982 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800884a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800884c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008854:	3b01      	subs	r3, #1
 8008856:	009b      	lsls	r3, r3, #2
 8008858:	4413      	add	r3, r2
 800885a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800885c:	69bb      	ldr	r3, [r7, #24]
 800885e:	f023 0307 	bic.w	r3, r3, #7
 8008862:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008864:	69bb      	ldr	r3, [r7, #24]
 8008866:	f003 0307 	and.w	r3, r3, #7
 800886a:	2b00      	cmp	r3, #0
 800886c:	d00b      	beq.n	8008886 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800886e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008872:	f383 8811 	msr	BASEPRI, r3
 8008876:	f3bf 8f6f 	isb	sy
 800887a:	f3bf 8f4f 	dsb	sy
 800887e:	617b      	str	r3, [r7, #20]
    }
 8008880:	bf00      	nop
 8008882:	bf00      	nop
 8008884:	e7fd      	b.n	8008882 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8008886:	68bb      	ldr	r3, [r7, #8]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d01e      	beq.n	80088ca <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800888c:	2300      	movs	r3, #0
 800888e:	61fb      	str	r3, [r7, #28]
 8008890:	e012      	b.n	80088b8 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008892:	68ba      	ldr	r2, [r7, #8]
 8008894:	69fb      	ldr	r3, [r7, #28]
 8008896:	4413      	add	r3, r2
 8008898:	7819      	ldrb	r1, [r3, #0]
 800889a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800889c:	69fb      	ldr	r3, [r7, #28]
 800889e:	4413      	add	r3, r2
 80088a0:	3334      	adds	r3, #52	@ 0x34
 80088a2:	460a      	mov	r2, r1
 80088a4:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 80088a6:	68ba      	ldr	r2, [r7, #8]
 80088a8:	69fb      	ldr	r3, [r7, #28]
 80088aa:	4413      	add	r3, r2
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d006      	beq.n	80088c0 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80088b2:	69fb      	ldr	r3, [r7, #28]
 80088b4:	3301      	adds	r3, #1
 80088b6:	61fb      	str	r3, [r7, #28]
 80088b8:	69fb      	ldr	r3, [r7, #28]
 80088ba:	2b09      	cmp	r3, #9
 80088bc:	d9e9      	bls.n	8008892 <prvInitialiseNewTask+0x66>
 80088be:	e000      	b.n	80088c2 <prvInitialiseNewTask+0x96>
            {
                break;
 80088c0:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80088c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088c4:	2200      	movs	r2, #0
 80088c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 80088ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088cc:	2b04      	cmp	r3, #4
 80088ce:	d90b      	bls.n	80088e8 <prvInitialiseNewTask+0xbc>
        __asm volatile
 80088d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80088d4:	f383 8811 	msr	BASEPRI, r3
 80088d8:	f3bf 8f6f 	isb	sy
 80088dc:	f3bf 8f4f 	dsb	sy
 80088e0:	613b      	str	r3, [r7, #16]
    }
 80088e2:	bf00      	nop
 80088e4:	bf00      	nop
 80088e6:	e7fd      	b.n	80088e4 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80088e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80088ea:	2b04      	cmp	r3, #4
 80088ec:	d901      	bls.n	80088f2 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80088ee:	2304      	movs	r3, #4
 80088f0:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80088f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088f6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80088f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088fa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80088fc:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80088fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008900:	3304      	adds	r3, #4
 8008902:	4618      	mov	r0, r3
 8008904:	f7ff fad2 	bl	8007eac <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800890a:	3318      	adds	r3, #24
 800890c:	4618      	mov	r0, r3
 800890e:	f7ff facd 	bl	8007eac <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008914:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008916:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800891a:	f1c3 0205 	rsb	r2, r3, #5
 800891e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008920:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008926:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008928:	683a      	ldr	r2, [r7, #0]
 800892a:	68f9      	ldr	r1, [r7, #12]
 800892c:	69b8      	ldr	r0, [r7, #24]
 800892e:	f001 f8d5 	bl	8009adc <pxPortInitialiseStack>
 8008932:	4602      	mov	r2, r0
 8008934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008936:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8008938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800893a:	2b00      	cmp	r3, #0
 800893c:	d002      	beq.n	8008944 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800893e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008940:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008942:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008944:	bf00      	nop
 8008946:	3720      	adds	r7, #32
 8008948:	46bd      	mov	sp, r7
 800894a:	bd80      	pop	{r7, pc}

0800894c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800894c:	b5b0      	push	{r4, r5, r7, lr}
 800894e:	b086      	sub	sp, #24
 8008950:	af02      	add	r7, sp, #8
 8008952:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8008954:	f001 f9f2 	bl	8009d3c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8008958:	4b4f      	ldr	r3, [pc, #316]	@ (8008a98 <prvAddNewTaskToReadyList+0x14c>)
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	3301      	adds	r3, #1
 800895e:	4a4e      	ldr	r2, [pc, #312]	@ (8008a98 <prvAddNewTaskToReadyList+0x14c>)
 8008960:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8008962:	4b4e      	ldr	r3, [pc, #312]	@ (8008a9c <prvAddNewTaskToReadyList+0x150>)
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d109      	bne.n	800897e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800896a:	4a4c      	ldr	r2, [pc, #304]	@ (8008a9c <prvAddNewTaskToReadyList+0x150>)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008970:	4b49      	ldr	r3, [pc, #292]	@ (8008a98 <prvAddNewTaskToReadyList+0x14c>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	2b01      	cmp	r3, #1
 8008976:	d110      	bne.n	800899a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8008978:	f000 fd76 	bl	8009468 <prvInitialiseTaskLists>
 800897c:	e00d      	b.n	800899a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800897e:	4b48      	ldr	r3, [pc, #288]	@ (8008aa0 <prvAddNewTaskToReadyList+0x154>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d109      	bne.n	800899a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008986:	4b45      	ldr	r3, [pc, #276]	@ (8008a9c <prvAddNewTaskToReadyList+0x150>)
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008990:	429a      	cmp	r2, r3
 8008992:	d802      	bhi.n	800899a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8008994:	4a41      	ldr	r2, [pc, #260]	@ (8008a9c <prvAddNewTaskToReadyList+0x150>)
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800899a:	4b42      	ldr	r3, [pc, #264]	@ (8008aa4 <prvAddNewTaskToReadyList+0x158>)
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	3301      	adds	r3, #1
 80089a0:	4a40      	ldr	r2, [pc, #256]	@ (8008aa4 <prvAddNewTaskToReadyList+0x158>)
 80089a2:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 80089a4:	4b3f      	ldr	r3, [pc, #252]	@ (8008aa4 <prvAddNewTaskToReadyList+0x158>)
 80089a6:	681a      	ldr	r2, [r3, #0]
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d016      	beq.n	80089e0 <prvAddNewTaskToReadyList+0x94>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	4618      	mov	r0, r3
 80089b6:	f003 f817 	bl	800b9e8 <SEGGER_SYSVIEW_OnTaskCreate>
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089ca:	461d      	mov	r5, r3
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	461c      	mov	r4, r3
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089d6:	1ae3      	subs	r3, r4, r3
 80089d8:	9300      	str	r3, [sp, #0]
 80089da:	462b      	mov	r3, r5
 80089dc:	f001 fd58 	bl	800a490 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f003 f884 	bl	800baf0 <SEGGER_SYSVIEW_OnTaskStartReady>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089ec:	2201      	movs	r2, #1
 80089ee:	409a      	lsls	r2, r3
 80089f0:	4b2d      	ldr	r3, [pc, #180]	@ (8008aa8 <prvAddNewTaskToReadyList+0x15c>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	4a2c      	ldr	r2, [pc, #176]	@ (8008aa8 <prvAddNewTaskToReadyList+0x15c>)
 80089f8:	6013      	str	r3, [r2, #0]
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089fe:	492b      	ldr	r1, [pc, #172]	@ (8008aac <prvAddNewTaskToReadyList+0x160>)
 8008a00:	4613      	mov	r3, r2
 8008a02:	009b      	lsls	r3, r3, #2
 8008a04:	4413      	add	r3, r2
 8008a06:	009b      	lsls	r3, r3, #2
 8008a08:	440b      	add	r3, r1
 8008a0a:	3304      	adds	r3, #4
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	60fb      	str	r3, [r7, #12]
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	68fa      	ldr	r2, [r7, #12]
 8008a14:	609a      	str	r2, [r3, #8]
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	689a      	ldr	r2, [r3, #8]
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	60da      	str	r2, [r3, #12]
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	689b      	ldr	r3, [r3, #8]
 8008a22:	687a      	ldr	r2, [r7, #4]
 8008a24:	3204      	adds	r2, #4
 8008a26:	605a      	str	r2, [r3, #4]
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	1d1a      	adds	r2, r3, #4
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	609a      	str	r2, [r3, #8]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a34:	4613      	mov	r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	4413      	add	r3, r2
 8008a3a:	009b      	lsls	r3, r3, #2
 8008a3c:	4a1b      	ldr	r2, [pc, #108]	@ (8008aac <prvAddNewTaskToReadyList+0x160>)
 8008a3e:	441a      	add	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	615a      	str	r2, [r3, #20]
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a48:	4918      	ldr	r1, [pc, #96]	@ (8008aac <prvAddNewTaskToReadyList+0x160>)
 8008a4a:	4613      	mov	r3, r2
 8008a4c:	009b      	lsls	r3, r3, #2
 8008a4e:	4413      	add	r3, r2
 8008a50:	009b      	lsls	r3, r3, #2
 8008a52:	440b      	add	r3, r1
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	1c59      	adds	r1, r3, #1
 8008a58:	4814      	ldr	r0, [pc, #80]	@ (8008aac <prvAddNewTaskToReadyList+0x160>)
 8008a5a:	4613      	mov	r3, r2
 8008a5c:	009b      	lsls	r3, r3, #2
 8008a5e:	4413      	add	r3, r2
 8008a60:	009b      	lsls	r3, r3, #2
 8008a62:	4403      	add	r3, r0
 8008a64:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8008a66:	f001 f99b 	bl	8009da0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8008a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8008aa0 <prvAddNewTaskToReadyList+0x154>)
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00e      	beq.n	8008a90 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008a72:	4b0a      	ldr	r3, [pc, #40]	@ (8008a9c <prvAddNewTaskToReadyList+0x150>)
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a7c:	429a      	cmp	r2, r3
 8008a7e:	d207      	bcs.n	8008a90 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8008a80:	4b0b      	ldr	r3, [pc, #44]	@ (8008ab0 <prvAddNewTaskToReadyList+0x164>)
 8008a82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a86:	601a      	str	r2, [r3, #0]
 8008a88:	f3bf 8f4f 	dsb	sy
 8008a8c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008a90:	bf00      	nop
 8008a92:	3710      	adds	r7, #16
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bdb0      	pop	{r4, r5, r7, pc}
 8008a98:	200005d8 	.word	0x200005d8
 8008a9c:	20000500 	.word	0x20000500
 8008aa0:	200005e4 	.word	0x200005e4
 8008aa4:	200005f4 	.word	0x200005f4
 8008aa8:	200005e0 	.word	0x200005e0
 8008aac:	20000504 	.word	0x20000504
 8008ab0:	e000ed04 	.word	0xe000ed04

08008ab4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8008ab4:	b580      	push	{r7, lr}
 8008ab6:	b084      	sub	sp, #16
 8008ab8:	af00      	add	r7, sp, #0
 8008aba:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8008abc:	2300      	movs	r3, #0
 8008abe:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d018      	beq.n	8008af8 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8008ac6:	4b14      	ldr	r3, [pc, #80]	@ (8008b18 <vTaskDelay+0x64>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d00b      	beq.n	8008ae6 <vTaskDelay+0x32>
        __asm volatile
 8008ace:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ad2:	f383 8811 	msr	BASEPRI, r3
 8008ad6:	f3bf 8f6f 	isb	sy
 8008ada:	f3bf 8f4f 	dsb	sy
 8008ade:	60bb      	str	r3, [r7, #8]
    }
 8008ae0:	bf00      	nop
 8008ae2:	bf00      	nop
 8008ae4:	e7fd      	b.n	8008ae2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8008ae6:	f000 f877 	bl	8008bd8 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008aea:	2100      	movs	r1, #0
 8008aec:	6878      	ldr	r0, [r7, #4]
 8008aee:	f000 ff75 	bl	80099dc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8008af2:	f000 f87f 	bl	8008bf4 <xTaskResumeAll>
 8008af6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	d107      	bne.n	8008b0e <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8008afe:	4b07      	ldr	r3, [pc, #28]	@ (8008b1c <vTaskDelay+0x68>)
 8008b00:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b04:	601a      	str	r2, [r3, #0]
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8008b0e:	bf00      	nop
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	20000600 	.word	0x20000600
 8008b1c:	e000ed04 	.word	0xe000ed04

08008b20 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	b086      	sub	sp, #24
 8008b24:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8008b26:	4b24      	ldr	r3, [pc, #144]	@ (8008bb8 <vTaskStartScheduler+0x98>)
 8008b28:	9301      	str	r3, [sp, #4]
 8008b2a:	2300      	movs	r3, #0
 8008b2c:	9300      	str	r3, [sp, #0]
 8008b2e:	2300      	movs	r3, #0
 8008b30:	2282      	movs	r2, #130	@ 0x82
 8008b32:	4922      	ldr	r1, [pc, #136]	@ (8008bbc <vTaskStartScheduler+0x9c>)
 8008b34:	4822      	ldr	r0, [pc, #136]	@ (8008bc0 <vTaskStartScheduler+0xa0>)
 8008b36:	f7ff fe33 	bl	80087a0 <xTaskCreate>
 8008b3a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8008b3c:	68fb      	ldr	r3, [r7, #12]
 8008b3e:	2b01      	cmp	r3, #1
 8008b40:	d124      	bne.n	8008b8c <vTaskStartScheduler+0x6c>
        __asm volatile
 8008b42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b46:	f383 8811 	msr	BASEPRI, r3
 8008b4a:	f3bf 8f6f 	isb	sy
 8008b4e:	f3bf 8f4f 	dsb	sy
 8008b52:	60bb      	str	r3, [r7, #8]
    }
 8008b54:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8008b56:	4b1b      	ldr	r3, [pc, #108]	@ (8008bc4 <vTaskStartScheduler+0xa4>)
 8008b58:	f04f 32ff 	mov.w	r2, #4294967295
 8008b5c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8008b5e:	4b1a      	ldr	r3, [pc, #104]	@ (8008bc8 <vTaskStartScheduler+0xa8>)
 8008b60:	2201      	movs	r2, #1
 8008b62:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008b64:	4b19      	ldr	r3, [pc, #100]	@ (8008bcc <vTaskStartScheduler+0xac>)
 8008b66:	2200      	movs	r2, #0
 8008b68:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8008b6a:	4b19      	ldr	r3, [pc, #100]	@ (8008bd0 <vTaskStartScheduler+0xb0>)
 8008b6c:	681a      	ldr	r2, [r3, #0]
 8008b6e:	4b12      	ldr	r3, [pc, #72]	@ (8008bb8 <vTaskStartScheduler+0x98>)
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	429a      	cmp	r2, r3
 8008b74:	d102      	bne.n	8008b7c <vTaskStartScheduler+0x5c>
 8008b76:	f002 ff1b 	bl	800b9b0 <SEGGER_SYSVIEW_OnIdle>
 8008b7a:	e004      	b.n	8008b86 <vTaskStartScheduler+0x66>
 8008b7c:	4b14      	ldr	r3, [pc, #80]	@ (8008bd0 <vTaskStartScheduler+0xb0>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4618      	mov	r0, r3
 8008b82:	f002 ff73 	bl	800ba6c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8008b86:	f001 f835 	bl	8009bf4 <xPortStartScheduler>
 8008b8a:	e00f      	b.n	8008bac <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008b8c:	68fb      	ldr	r3, [r7, #12]
 8008b8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008b92:	d10b      	bne.n	8008bac <vTaskStartScheduler+0x8c>
        __asm volatile
 8008b94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b98:	f383 8811 	msr	BASEPRI, r3
 8008b9c:	f3bf 8f6f 	isb	sy
 8008ba0:	f3bf 8f4f 	dsb	sy
 8008ba4:	607b      	str	r3, [r7, #4]
    }
 8008ba6:	bf00      	nop
 8008ba8:	bf00      	nop
 8008baa:	e7fd      	b.n	8008ba8 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8008bac:	4b09      	ldr	r3, [pc, #36]	@ (8008bd4 <vTaskStartScheduler+0xb4>)
 8008bae:	681b      	ldr	r3, [r3, #0]
}
 8008bb0:	bf00      	nop
 8008bb2:	3710      	adds	r7, #16
 8008bb4:	46bd      	mov	sp, r7
 8008bb6:	bd80      	pop	{r7, pc}
 8008bb8:	200005fc 	.word	0x200005fc
 8008bbc:	0800feb8 	.word	0x0800feb8
 8008bc0:	08009439 	.word	0x08009439
 8008bc4:	200005f8 	.word	0x200005f8
 8008bc8:	200005e4 	.word	0x200005e4
 8008bcc:	200005dc 	.word	0x200005dc
 8008bd0:	20000500 	.word	0x20000500
 8008bd4:	2000000c 	.word	0x2000000c

08008bd8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008bd8:	b480      	push	{r7}
 8008bda:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8008bdc:	4b04      	ldr	r3, [pc, #16]	@ (8008bf0 <vTaskSuspendAll+0x18>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	3301      	adds	r3, #1
 8008be2:	4a03      	ldr	r2, [pc, #12]	@ (8008bf0 <vTaskSuspendAll+0x18>)
 8008be4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8008be6:	bf00      	nop
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr
 8008bf0:	20000600 	.word	0x20000600

08008bf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8008bf4:	b580      	push	{r7, lr}
 8008bf6:	b088      	sub	sp, #32
 8008bf8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8008bfe:	2300      	movs	r3, #0
 8008c00:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8008c02:	4b73      	ldr	r3, [pc, #460]	@ (8008dd0 <xTaskResumeAll+0x1dc>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d10b      	bne.n	8008c22 <xTaskResumeAll+0x2e>
        __asm volatile
 8008c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c0e:	f383 8811 	msr	BASEPRI, r3
 8008c12:	f3bf 8f6f 	isb	sy
 8008c16:	f3bf 8f4f 	dsb	sy
 8008c1a:	607b      	str	r3, [r7, #4]
    }
 8008c1c:	bf00      	nop
 8008c1e:	bf00      	nop
 8008c20:	e7fd      	b.n	8008c1e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8008c22:	f001 f88b 	bl	8009d3c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8008c26:	4b6a      	ldr	r3, [pc, #424]	@ (8008dd0 <xTaskResumeAll+0x1dc>)
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	3b01      	subs	r3, #1
 8008c2c:	4a68      	ldr	r2, [pc, #416]	@ (8008dd0 <xTaskResumeAll+0x1dc>)
 8008c2e:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c30:	4b67      	ldr	r3, [pc, #412]	@ (8008dd0 <xTaskResumeAll+0x1dc>)
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	2b00      	cmp	r3, #0
 8008c36:	f040 80c4 	bne.w	8008dc2 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008c3a:	4b66      	ldr	r3, [pc, #408]	@ (8008dd4 <xTaskResumeAll+0x1e0>)
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	f000 80bf 	beq.w	8008dc2 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008c44:	e08e      	b.n	8008d64 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c46:	4b64      	ldr	r3, [pc, #400]	@ (8008dd8 <xTaskResumeAll+0x1e4>)
 8008c48:	68db      	ldr	r3, [r3, #12]
 8008c4a:	68db      	ldr	r3, [r3, #12]
 8008c4c:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8008c4e:	69fb      	ldr	r3, [r7, #28]
 8008c50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c52:	613b      	str	r3, [r7, #16]
 8008c54:	69fb      	ldr	r3, [r7, #28]
 8008c56:	69db      	ldr	r3, [r3, #28]
 8008c58:	69fa      	ldr	r2, [r7, #28]
 8008c5a:	6a12      	ldr	r2, [r2, #32]
 8008c5c:	609a      	str	r2, [r3, #8]
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	6a1b      	ldr	r3, [r3, #32]
 8008c62:	69fa      	ldr	r2, [r7, #28]
 8008c64:	69d2      	ldr	r2, [r2, #28]
 8008c66:	605a      	str	r2, [r3, #4]
 8008c68:	693b      	ldr	r3, [r7, #16]
 8008c6a:	685a      	ldr	r2, [r3, #4]
 8008c6c:	69fb      	ldr	r3, [r7, #28]
 8008c6e:	3318      	adds	r3, #24
 8008c70:	429a      	cmp	r2, r3
 8008c72:	d103      	bne.n	8008c7c <xTaskResumeAll+0x88>
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	6a1a      	ldr	r2, [r3, #32]
 8008c78:	693b      	ldr	r3, [r7, #16]
 8008c7a:	605a      	str	r2, [r3, #4]
 8008c7c:	69fb      	ldr	r3, [r7, #28]
 8008c7e:	2200      	movs	r2, #0
 8008c80:	629a      	str	r2, [r3, #40]	@ 0x28
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	1e5a      	subs	r2, r3, #1
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008c8c:	69fb      	ldr	r3, [r7, #28]
 8008c8e:	695b      	ldr	r3, [r3, #20]
 8008c90:	60fb      	str	r3, [r7, #12]
 8008c92:	69fb      	ldr	r3, [r7, #28]
 8008c94:	689b      	ldr	r3, [r3, #8]
 8008c96:	69fa      	ldr	r2, [r7, #28]
 8008c98:	68d2      	ldr	r2, [r2, #12]
 8008c9a:	609a      	str	r2, [r3, #8]
 8008c9c:	69fb      	ldr	r3, [r7, #28]
 8008c9e:	68db      	ldr	r3, [r3, #12]
 8008ca0:	69fa      	ldr	r2, [r7, #28]
 8008ca2:	6892      	ldr	r2, [r2, #8]
 8008ca4:	605a      	str	r2, [r3, #4]
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	685a      	ldr	r2, [r3, #4]
 8008caa:	69fb      	ldr	r3, [r7, #28]
 8008cac:	3304      	adds	r3, #4
 8008cae:	429a      	cmp	r2, r3
 8008cb0:	d103      	bne.n	8008cba <xTaskResumeAll+0xc6>
 8008cb2:	69fb      	ldr	r3, [r7, #28]
 8008cb4:	68da      	ldr	r2, [r3, #12]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	605a      	str	r2, [r3, #4]
 8008cba:	69fb      	ldr	r3, [r7, #28]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	615a      	str	r2, [r3, #20]
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	1e5a      	subs	r2, r3, #1
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8008cca:	69fb      	ldr	r3, [r7, #28]
 8008ccc:	4618      	mov	r0, r3
 8008cce:	f002 ff0f 	bl	800baf0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008cd2:	69fb      	ldr	r3, [r7, #28]
 8008cd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	409a      	lsls	r2, r3
 8008cda:	4b40      	ldr	r3, [pc, #256]	@ (8008ddc <xTaskResumeAll+0x1e8>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	4313      	orrs	r3, r2
 8008ce0:	4a3e      	ldr	r2, [pc, #248]	@ (8008ddc <xTaskResumeAll+0x1e8>)
 8008ce2:	6013      	str	r3, [r2, #0]
 8008ce4:	69fb      	ldr	r3, [r7, #28]
 8008ce6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ce8:	493d      	ldr	r1, [pc, #244]	@ (8008de0 <xTaskResumeAll+0x1ec>)
 8008cea:	4613      	mov	r3, r2
 8008cec:	009b      	lsls	r3, r3, #2
 8008cee:	4413      	add	r3, r2
 8008cf0:	009b      	lsls	r3, r3, #2
 8008cf2:	440b      	add	r3, r1
 8008cf4:	3304      	adds	r3, #4
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	60bb      	str	r3, [r7, #8]
 8008cfa:	69fb      	ldr	r3, [r7, #28]
 8008cfc:	68ba      	ldr	r2, [r7, #8]
 8008cfe:	609a      	str	r2, [r3, #8]
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	689a      	ldr	r2, [r3, #8]
 8008d04:	69fb      	ldr	r3, [r7, #28]
 8008d06:	60da      	str	r2, [r3, #12]
 8008d08:	68bb      	ldr	r3, [r7, #8]
 8008d0a:	689b      	ldr	r3, [r3, #8]
 8008d0c:	69fa      	ldr	r2, [r7, #28]
 8008d0e:	3204      	adds	r2, #4
 8008d10:	605a      	str	r2, [r3, #4]
 8008d12:	69fb      	ldr	r3, [r7, #28]
 8008d14:	1d1a      	adds	r2, r3, #4
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	609a      	str	r2, [r3, #8]
 8008d1a:	69fb      	ldr	r3, [r7, #28]
 8008d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d1e:	4613      	mov	r3, r2
 8008d20:	009b      	lsls	r3, r3, #2
 8008d22:	4413      	add	r3, r2
 8008d24:	009b      	lsls	r3, r3, #2
 8008d26:	4a2e      	ldr	r2, [pc, #184]	@ (8008de0 <xTaskResumeAll+0x1ec>)
 8008d28:	441a      	add	r2, r3
 8008d2a:	69fb      	ldr	r3, [r7, #28]
 8008d2c:	615a      	str	r2, [r3, #20]
 8008d2e:	69fb      	ldr	r3, [r7, #28]
 8008d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d32:	492b      	ldr	r1, [pc, #172]	@ (8008de0 <xTaskResumeAll+0x1ec>)
 8008d34:	4613      	mov	r3, r2
 8008d36:	009b      	lsls	r3, r3, #2
 8008d38:	4413      	add	r3, r2
 8008d3a:	009b      	lsls	r3, r3, #2
 8008d3c:	440b      	add	r3, r1
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	1c59      	adds	r1, r3, #1
 8008d42:	4827      	ldr	r0, [pc, #156]	@ (8008de0 <xTaskResumeAll+0x1ec>)
 8008d44:	4613      	mov	r3, r2
 8008d46:	009b      	lsls	r3, r3, #2
 8008d48:	4413      	add	r3, r2
 8008d4a:	009b      	lsls	r3, r3, #2
 8008d4c:	4403      	add	r3, r0
 8008d4e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008d50:	69fb      	ldr	r3, [r7, #28]
 8008d52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d54:	4b23      	ldr	r3, [pc, #140]	@ (8008de4 <xTaskResumeAll+0x1f0>)
 8008d56:	681b      	ldr	r3, [r3, #0]
 8008d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d5a:	429a      	cmp	r2, r3
 8008d5c:	d302      	bcc.n	8008d64 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8008d5e:	4b22      	ldr	r3, [pc, #136]	@ (8008de8 <xTaskResumeAll+0x1f4>)
 8008d60:	2201      	movs	r2, #1
 8008d62:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008d64:	4b1c      	ldr	r3, [pc, #112]	@ (8008dd8 <xTaskResumeAll+0x1e4>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	f47f af6c 	bne.w	8008c46 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8008d6e:	69fb      	ldr	r3, [r7, #28]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d001      	beq.n	8008d78 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8008d74:	f000 fbf6 	bl	8009564 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008d78:	4b1c      	ldr	r3, [pc, #112]	@ (8008dec <xTaskResumeAll+0x1f8>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d010      	beq.n	8008da6 <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8008d84:	f000 f848 	bl	8008e18 <xTaskIncrementTick>
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d002      	beq.n	8008d94 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8008d8e:	4b16      	ldr	r3, [pc, #88]	@ (8008de8 <xTaskResumeAll+0x1f4>)
 8008d90:	2201      	movs	r2, #1
 8008d92:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8008d94:	697b      	ldr	r3, [r7, #20]
 8008d96:	3b01      	subs	r3, #1
 8008d98:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8008d9a:	697b      	ldr	r3, [r7, #20]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d1f1      	bne.n	8008d84 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8008da0:	4b12      	ldr	r3, [pc, #72]	@ (8008dec <xTaskResumeAll+0x1f8>)
 8008da2:	2200      	movs	r2, #0
 8008da4:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8008da6:	4b10      	ldr	r3, [pc, #64]	@ (8008de8 <xTaskResumeAll+0x1f4>)
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	2b00      	cmp	r3, #0
 8008dac:	d009      	beq.n	8008dc2 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8008dae:	2301      	movs	r3, #1
 8008db0:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8008db2:	4b0f      	ldr	r3, [pc, #60]	@ (8008df0 <xTaskResumeAll+0x1fc>)
 8008db4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008db8:	601a      	str	r2, [r3, #0]
 8008dba:	f3bf 8f4f 	dsb	sy
 8008dbe:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8008dc2:	f000 ffed 	bl	8009da0 <vPortExitCritical>

    return xAlreadyYielded;
 8008dc6:	69bb      	ldr	r3, [r7, #24]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3720      	adds	r7, #32
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	bd80      	pop	{r7, pc}
 8008dd0:	20000600 	.word	0x20000600
 8008dd4:	200005d8 	.word	0x200005d8
 8008dd8:	20000598 	.word	0x20000598
 8008ddc:	200005e0 	.word	0x200005e0
 8008de0:	20000504 	.word	0x20000504
 8008de4:	20000500 	.word	0x20000500
 8008de8:	200005ec 	.word	0x200005ec
 8008dec:	200005e8 	.word	0x200005e8
 8008df0:	e000ed04 	.word	0xe000ed04

08008df4 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008df4:	b580      	push	{r7, lr}
 8008df6:	b082      	sub	sp, #8
 8008df8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008dfa:	f001 f887 	bl	8009f0c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008dfe:	2300      	movs	r3, #0
 8008e00:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8008e02:	4b04      	ldr	r3, [pc, #16]	@ (8008e14 <xTaskGetTickCountFromISR+0x20>)
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8008e08:	683b      	ldr	r3, [r7, #0]
}
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	3708      	adds	r7, #8
 8008e0e:	46bd      	mov	sp, r7
 8008e10:	bd80      	pop	{r7, pc}
 8008e12:	bf00      	nop
 8008e14:	200005dc 	.word	0x200005dc

08008e18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b08a      	sub	sp, #40	@ 0x28
 8008e1c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008e22:	4b80      	ldr	r3, [pc, #512]	@ (8009024 <xTaskIncrementTick+0x20c>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	f040 80f1 	bne.w	800900e <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008e2c:	4b7e      	ldr	r3, [pc, #504]	@ (8009028 <xTaskIncrementTick+0x210>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	3301      	adds	r3, #1
 8008e32:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8008e34:	4a7c      	ldr	r2, [pc, #496]	@ (8009028 <xTaskIncrementTick+0x210>)
 8008e36:	6a3b      	ldr	r3, [r7, #32]
 8008e38:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008e3a:	6a3b      	ldr	r3, [r7, #32]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d121      	bne.n	8008e84 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8008e40:	4b7a      	ldr	r3, [pc, #488]	@ (800902c <xTaskIncrementTick+0x214>)
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d00b      	beq.n	8008e62 <xTaskIncrementTick+0x4a>
        __asm volatile
 8008e4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e4e:	f383 8811 	msr	BASEPRI, r3
 8008e52:	f3bf 8f6f 	isb	sy
 8008e56:	f3bf 8f4f 	dsb	sy
 8008e5a:	607b      	str	r3, [r7, #4]
    }
 8008e5c:	bf00      	nop
 8008e5e:	bf00      	nop
 8008e60:	e7fd      	b.n	8008e5e <xTaskIncrementTick+0x46>
 8008e62:	4b72      	ldr	r3, [pc, #456]	@ (800902c <xTaskIncrementTick+0x214>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	61fb      	str	r3, [r7, #28]
 8008e68:	4b71      	ldr	r3, [pc, #452]	@ (8009030 <xTaskIncrementTick+0x218>)
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	4a6f      	ldr	r2, [pc, #444]	@ (800902c <xTaskIncrementTick+0x214>)
 8008e6e:	6013      	str	r3, [r2, #0]
 8008e70:	4a6f      	ldr	r2, [pc, #444]	@ (8009030 <xTaskIncrementTick+0x218>)
 8008e72:	69fb      	ldr	r3, [r7, #28]
 8008e74:	6013      	str	r3, [r2, #0]
 8008e76:	4b6f      	ldr	r3, [pc, #444]	@ (8009034 <xTaskIncrementTick+0x21c>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	3301      	adds	r3, #1
 8008e7c:	4a6d      	ldr	r2, [pc, #436]	@ (8009034 <xTaskIncrementTick+0x21c>)
 8008e7e:	6013      	str	r3, [r2, #0]
 8008e80:	f000 fb70 	bl	8009564 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8008e84:	4b6c      	ldr	r3, [pc, #432]	@ (8009038 <xTaskIncrementTick+0x220>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	6a3a      	ldr	r2, [r7, #32]
 8008e8a:	429a      	cmp	r2, r3
 8008e8c:	f0c0 80aa 	bcc.w	8008fe4 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008e90:	4b66      	ldr	r3, [pc, #408]	@ (800902c <xTaskIncrementTick+0x214>)
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d104      	bne.n	8008ea4 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008e9a:	4b67      	ldr	r3, [pc, #412]	@ (8009038 <xTaskIncrementTick+0x220>)
 8008e9c:	f04f 32ff 	mov.w	r2, #4294967295
 8008ea0:	601a      	str	r2, [r3, #0]
                    break;
 8008ea2:	e09f      	b.n	8008fe4 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008ea4:	4b61      	ldr	r3, [pc, #388]	@ (800902c <xTaskIncrementTick+0x214>)
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	68db      	ldr	r3, [r3, #12]
 8008eaa:	68db      	ldr	r3, [r3, #12]
 8008eac:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008eae:	69bb      	ldr	r3, [r7, #24]
 8008eb0:	685b      	ldr	r3, [r3, #4]
 8008eb2:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8008eb4:	6a3a      	ldr	r2, [r7, #32]
 8008eb6:	697b      	ldr	r3, [r7, #20]
 8008eb8:	429a      	cmp	r2, r3
 8008eba:	d203      	bcs.n	8008ec4 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8008ebc:	4a5e      	ldr	r2, [pc, #376]	@ (8009038 <xTaskIncrementTick+0x220>)
 8008ebe:	697b      	ldr	r3, [r7, #20]
 8008ec0:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8008ec2:	e08f      	b.n	8008fe4 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008ec4:	69bb      	ldr	r3, [r7, #24]
 8008ec6:	695b      	ldr	r3, [r3, #20]
 8008ec8:	613b      	str	r3, [r7, #16]
 8008eca:	69bb      	ldr	r3, [r7, #24]
 8008ecc:	689b      	ldr	r3, [r3, #8]
 8008ece:	69ba      	ldr	r2, [r7, #24]
 8008ed0:	68d2      	ldr	r2, [r2, #12]
 8008ed2:	609a      	str	r2, [r3, #8]
 8008ed4:	69bb      	ldr	r3, [r7, #24]
 8008ed6:	68db      	ldr	r3, [r3, #12]
 8008ed8:	69ba      	ldr	r2, [r7, #24]
 8008eda:	6892      	ldr	r2, [r2, #8]
 8008edc:	605a      	str	r2, [r3, #4]
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	685a      	ldr	r2, [r3, #4]
 8008ee2:	69bb      	ldr	r3, [r7, #24]
 8008ee4:	3304      	adds	r3, #4
 8008ee6:	429a      	cmp	r2, r3
 8008ee8:	d103      	bne.n	8008ef2 <xTaskIncrementTick+0xda>
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	68da      	ldr	r2, [r3, #12]
 8008eee:	693b      	ldr	r3, [r7, #16]
 8008ef0:	605a      	str	r2, [r3, #4]
 8008ef2:	69bb      	ldr	r3, [r7, #24]
 8008ef4:	2200      	movs	r2, #0
 8008ef6:	615a      	str	r2, [r3, #20]
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	1e5a      	subs	r2, r3, #1
 8008efe:	693b      	ldr	r3, [r7, #16]
 8008f00:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008f02:	69bb      	ldr	r3, [r7, #24]
 8008f04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d01e      	beq.n	8008f48 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8008f0a:	69bb      	ldr	r3, [r7, #24]
 8008f0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f0e:	60fb      	str	r3, [r7, #12]
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	69db      	ldr	r3, [r3, #28]
 8008f14:	69ba      	ldr	r2, [r7, #24]
 8008f16:	6a12      	ldr	r2, [r2, #32]
 8008f18:	609a      	str	r2, [r3, #8]
 8008f1a:	69bb      	ldr	r3, [r7, #24]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
 8008f1e:	69ba      	ldr	r2, [r7, #24]
 8008f20:	69d2      	ldr	r2, [r2, #28]
 8008f22:	605a      	str	r2, [r3, #4]
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	685a      	ldr	r2, [r3, #4]
 8008f28:	69bb      	ldr	r3, [r7, #24]
 8008f2a:	3318      	adds	r3, #24
 8008f2c:	429a      	cmp	r2, r3
 8008f2e:	d103      	bne.n	8008f38 <xTaskIncrementTick+0x120>
 8008f30:	69bb      	ldr	r3, [r7, #24]
 8008f32:	6a1a      	ldr	r2, [r3, #32]
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	605a      	str	r2, [r3, #4]
 8008f38:	69bb      	ldr	r3, [r7, #24]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	629a      	str	r2, [r3, #40]	@ 0x28
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	1e5a      	subs	r2, r3, #1
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8008f48:	69bb      	ldr	r3, [r7, #24]
 8008f4a:	4618      	mov	r0, r3
 8008f4c:	f002 fdd0 	bl	800baf0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008f50:	69bb      	ldr	r3, [r7, #24]
 8008f52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008f54:	2201      	movs	r2, #1
 8008f56:	409a      	lsls	r2, r3
 8008f58:	4b38      	ldr	r3, [pc, #224]	@ (800903c <xTaskIncrementTick+0x224>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	4a37      	ldr	r2, [pc, #220]	@ (800903c <xTaskIncrementTick+0x224>)
 8008f60:	6013      	str	r3, [r2, #0]
 8008f62:	69bb      	ldr	r3, [r7, #24]
 8008f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f66:	4936      	ldr	r1, [pc, #216]	@ (8009040 <xTaskIncrementTick+0x228>)
 8008f68:	4613      	mov	r3, r2
 8008f6a:	009b      	lsls	r3, r3, #2
 8008f6c:	4413      	add	r3, r2
 8008f6e:	009b      	lsls	r3, r3, #2
 8008f70:	440b      	add	r3, r1
 8008f72:	3304      	adds	r3, #4
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	60bb      	str	r3, [r7, #8]
 8008f78:	69bb      	ldr	r3, [r7, #24]
 8008f7a:	68ba      	ldr	r2, [r7, #8]
 8008f7c:	609a      	str	r2, [r3, #8]
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	689a      	ldr	r2, [r3, #8]
 8008f82:	69bb      	ldr	r3, [r7, #24]
 8008f84:	60da      	str	r2, [r3, #12]
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	689b      	ldr	r3, [r3, #8]
 8008f8a:	69ba      	ldr	r2, [r7, #24]
 8008f8c:	3204      	adds	r2, #4
 8008f8e:	605a      	str	r2, [r3, #4]
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	1d1a      	adds	r2, r3, #4
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	609a      	str	r2, [r3, #8]
 8008f98:	69bb      	ldr	r3, [r7, #24]
 8008f9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008f9c:	4613      	mov	r3, r2
 8008f9e:	009b      	lsls	r3, r3, #2
 8008fa0:	4413      	add	r3, r2
 8008fa2:	009b      	lsls	r3, r3, #2
 8008fa4:	4a26      	ldr	r2, [pc, #152]	@ (8009040 <xTaskIncrementTick+0x228>)
 8008fa6:	441a      	add	r2, r3
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	615a      	str	r2, [r3, #20]
 8008fac:	69bb      	ldr	r3, [r7, #24]
 8008fae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fb0:	4923      	ldr	r1, [pc, #140]	@ (8009040 <xTaskIncrementTick+0x228>)
 8008fb2:	4613      	mov	r3, r2
 8008fb4:	009b      	lsls	r3, r3, #2
 8008fb6:	4413      	add	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	440b      	add	r3, r1
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	1c59      	adds	r1, r3, #1
 8008fc0:	481f      	ldr	r0, [pc, #124]	@ (8009040 <xTaskIncrementTick+0x228>)
 8008fc2:	4613      	mov	r3, r2
 8008fc4:	009b      	lsls	r3, r3, #2
 8008fc6:	4413      	add	r3, r2
 8008fc8:	009b      	lsls	r3, r3, #2
 8008fca:	4403      	add	r3, r0
 8008fcc:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008fce:	69bb      	ldr	r3, [r7, #24]
 8008fd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fd2:	4b1c      	ldr	r3, [pc, #112]	@ (8009044 <xTaskIncrementTick+0x22c>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008fd8:	429a      	cmp	r2, r3
 8008fda:	f67f af59 	bls.w	8008e90 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8008fde:	2301      	movs	r3, #1
 8008fe0:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008fe2:	e755      	b.n	8008e90 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008fe4:	4b17      	ldr	r3, [pc, #92]	@ (8009044 <xTaskIncrementTick+0x22c>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008fea:	4915      	ldr	r1, [pc, #84]	@ (8009040 <xTaskIncrementTick+0x228>)
 8008fec:	4613      	mov	r3, r2
 8008fee:	009b      	lsls	r3, r3, #2
 8008ff0:	4413      	add	r3, r2
 8008ff2:	009b      	lsls	r3, r3, #2
 8008ff4:	440b      	add	r3, r1
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	d901      	bls.n	8009000 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8008ffc:	2301      	movs	r3, #1
 8008ffe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8009000:	4b11      	ldr	r3, [pc, #68]	@ (8009048 <xTaskIncrementTick+0x230>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d007      	beq.n	8009018 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8009008:	2301      	movs	r3, #1
 800900a:	627b      	str	r3, [r7, #36]	@ 0x24
 800900c:	e004      	b.n	8009018 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 800900e:	4b0f      	ldr	r3, [pc, #60]	@ (800904c <xTaskIncrementTick+0x234>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3301      	adds	r3, #1
 8009014:	4a0d      	ldr	r2, [pc, #52]	@ (800904c <xTaskIncrementTick+0x234>)
 8009016:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8009018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800901a:	4618      	mov	r0, r3
 800901c:	3728      	adds	r7, #40	@ 0x28
 800901e:	46bd      	mov	sp, r7
 8009020:	bd80      	pop	{r7, pc}
 8009022:	bf00      	nop
 8009024:	20000600 	.word	0x20000600
 8009028:	200005dc 	.word	0x200005dc
 800902c:	20000590 	.word	0x20000590
 8009030:	20000594 	.word	0x20000594
 8009034:	200005f0 	.word	0x200005f0
 8009038:	200005f8 	.word	0x200005f8
 800903c:	200005e0 	.word	0x200005e0
 8009040:	20000504 	.word	0x20000504
 8009044:	20000500 	.word	0x20000500
 8009048:	200005ec 	.word	0x200005ec
 800904c:	200005e8 	.word	0x200005e8

08009050 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b086      	sub	sp, #24
 8009054:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009056:	4b2d      	ldr	r3, [pc, #180]	@ (800910c <vTaskSwitchContext+0xbc>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	2b00      	cmp	r3, #0
 800905c:	d003      	beq.n	8009066 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 800905e:	4b2c      	ldr	r3, [pc, #176]	@ (8009110 <vTaskSwitchContext+0xc0>)
 8009060:	2201      	movs	r2, #1
 8009062:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8009064:	e04e      	b.n	8009104 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8009066:	4b2a      	ldr	r3, [pc, #168]	@ (8009110 <vTaskSwitchContext+0xc0>)
 8009068:	2200      	movs	r2, #0
 800906a:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800906c:	4b29      	ldr	r3, [pc, #164]	@ (8009114 <vTaskSwitchContext+0xc4>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8009072:	68fb      	ldr	r3, [r7, #12]
 8009074:	fab3 f383 	clz	r3, r3
 8009078:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800907a:	7afb      	ldrb	r3, [r7, #11]
 800907c:	f1c3 031f 	rsb	r3, r3, #31
 8009080:	617b      	str	r3, [r7, #20]
 8009082:	4925      	ldr	r1, [pc, #148]	@ (8009118 <vTaskSwitchContext+0xc8>)
 8009084:	697a      	ldr	r2, [r7, #20]
 8009086:	4613      	mov	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4413      	add	r3, r2
 800908c:	009b      	lsls	r3, r3, #2
 800908e:	440b      	add	r3, r1
 8009090:	681b      	ldr	r3, [r3, #0]
 8009092:	2b00      	cmp	r3, #0
 8009094:	d10b      	bne.n	80090ae <vTaskSwitchContext+0x5e>
        __asm volatile
 8009096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800909a:	f383 8811 	msr	BASEPRI, r3
 800909e:	f3bf 8f6f 	isb	sy
 80090a2:	f3bf 8f4f 	dsb	sy
 80090a6:	607b      	str	r3, [r7, #4]
    }
 80090a8:	bf00      	nop
 80090aa:	bf00      	nop
 80090ac:	e7fd      	b.n	80090aa <vTaskSwitchContext+0x5a>
 80090ae:	697a      	ldr	r2, [r7, #20]
 80090b0:	4613      	mov	r3, r2
 80090b2:	009b      	lsls	r3, r3, #2
 80090b4:	4413      	add	r3, r2
 80090b6:	009b      	lsls	r3, r3, #2
 80090b8:	4a17      	ldr	r2, [pc, #92]	@ (8009118 <vTaskSwitchContext+0xc8>)
 80090ba:	4413      	add	r3, r2
 80090bc:	613b      	str	r3, [r7, #16]
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	685b      	ldr	r3, [r3, #4]
 80090c2:	685a      	ldr	r2, [r3, #4]
 80090c4:	693b      	ldr	r3, [r7, #16]
 80090c6:	605a      	str	r2, [r3, #4]
 80090c8:	693b      	ldr	r3, [r7, #16]
 80090ca:	685a      	ldr	r2, [r3, #4]
 80090cc:	693b      	ldr	r3, [r7, #16]
 80090ce:	3308      	adds	r3, #8
 80090d0:	429a      	cmp	r2, r3
 80090d2:	d104      	bne.n	80090de <vTaskSwitchContext+0x8e>
 80090d4:	693b      	ldr	r3, [r7, #16]
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	685a      	ldr	r2, [r3, #4]
 80090da:	693b      	ldr	r3, [r7, #16]
 80090dc:	605a      	str	r2, [r3, #4]
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	685b      	ldr	r3, [r3, #4]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	4a0d      	ldr	r2, [pc, #52]	@ (800911c <vTaskSwitchContext+0xcc>)
 80090e6:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 80090e8:	4b0c      	ldr	r3, [pc, #48]	@ (800911c <vTaskSwitchContext+0xcc>)
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	4b0c      	ldr	r3, [pc, #48]	@ (8009120 <vTaskSwitchContext+0xd0>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d102      	bne.n	80090fa <vTaskSwitchContext+0xaa>
 80090f4:	f002 fc5c 	bl	800b9b0 <SEGGER_SYSVIEW_OnIdle>
}
 80090f8:	e004      	b.n	8009104 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 80090fa:	4b08      	ldr	r3, [pc, #32]	@ (800911c <vTaskSwitchContext+0xcc>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4618      	mov	r0, r3
 8009100:	f002 fcb4 	bl	800ba6c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8009104:	bf00      	nop
 8009106:	3718      	adds	r7, #24
 8009108:	46bd      	mov	sp, r7
 800910a:	bd80      	pop	{r7, pc}
 800910c:	20000600 	.word	0x20000600
 8009110:	200005ec 	.word	0x200005ec
 8009114:	200005e0 	.word	0x200005e0
 8009118:	20000504 	.word	0x20000504
 800911c:	20000500 	.word	0x20000500
 8009120:	200005fc 	.word	0x200005fc

08009124 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2b00      	cmp	r3, #0
 8009132:	d10b      	bne.n	800914c <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8009134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009138:	f383 8811 	msr	BASEPRI, r3
 800913c:	f3bf 8f6f 	isb	sy
 8009140:	f3bf 8f4f 	dsb	sy
 8009144:	60fb      	str	r3, [r7, #12]
    }
 8009146:	bf00      	nop
 8009148:	bf00      	nop
 800914a:	e7fd      	b.n	8009148 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800914c:	4b07      	ldr	r3, [pc, #28]	@ (800916c <vTaskPlaceOnEventList+0x48>)
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	3318      	adds	r3, #24
 8009152:	4619      	mov	r1, r3
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7fe feb6 	bl	8007ec6 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800915a:	2101      	movs	r1, #1
 800915c:	6838      	ldr	r0, [r7, #0]
 800915e:	f000 fc3d 	bl	80099dc <prvAddCurrentTaskToDelayedList>
}
 8009162:	bf00      	nop
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	20000500 	.word	0x20000500

08009170 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009170:	b580      	push	{r7, lr}
 8009172:	b08a      	sub	sp, #40	@ 0x28
 8009174:	af00      	add	r7, sp, #0
 8009176:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	68db      	ldr	r3, [r3, #12]
 800917c:	68db      	ldr	r3, [r3, #12]
 800917e:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8009180:	6a3b      	ldr	r3, [r7, #32]
 8009182:	2b00      	cmp	r3, #0
 8009184:	d10b      	bne.n	800919e <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8009186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800918a:	f383 8811 	msr	BASEPRI, r3
 800918e:	f3bf 8f6f 	isb	sy
 8009192:	f3bf 8f4f 	dsb	sy
 8009196:	60fb      	str	r3, [r7, #12]
    }
 8009198:	bf00      	nop
 800919a:	bf00      	nop
 800919c:	e7fd      	b.n	800919a <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800919e:	6a3b      	ldr	r3, [r7, #32]
 80091a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091a2:	61fb      	str	r3, [r7, #28]
 80091a4:	6a3b      	ldr	r3, [r7, #32]
 80091a6:	69db      	ldr	r3, [r3, #28]
 80091a8:	6a3a      	ldr	r2, [r7, #32]
 80091aa:	6a12      	ldr	r2, [r2, #32]
 80091ac:	609a      	str	r2, [r3, #8]
 80091ae:	6a3b      	ldr	r3, [r7, #32]
 80091b0:	6a1b      	ldr	r3, [r3, #32]
 80091b2:	6a3a      	ldr	r2, [r7, #32]
 80091b4:	69d2      	ldr	r2, [r2, #28]
 80091b6:	605a      	str	r2, [r3, #4]
 80091b8:	69fb      	ldr	r3, [r7, #28]
 80091ba:	685a      	ldr	r2, [r3, #4]
 80091bc:	6a3b      	ldr	r3, [r7, #32]
 80091be:	3318      	adds	r3, #24
 80091c0:	429a      	cmp	r2, r3
 80091c2:	d103      	bne.n	80091cc <xTaskRemoveFromEventList+0x5c>
 80091c4:	6a3b      	ldr	r3, [r7, #32]
 80091c6:	6a1a      	ldr	r2, [r3, #32]
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	605a      	str	r2, [r3, #4]
 80091cc:	6a3b      	ldr	r3, [r7, #32]
 80091ce:	2200      	movs	r2, #0
 80091d0:	629a      	str	r2, [r3, #40]	@ 0x28
 80091d2:	69fb      	ldr	r3, [r7, #28]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	1e5a      	subs	r2, r3, #1
 80091d8:	69fb      	ldr	r3, [r7, #28]
 80091da:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091dc:	4b4b      	ldr	r3, [pc, #300]	@ (800930c <xTaskRemoveFromEventList+0x19c>)
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d162      	bne.n	80092aa <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80091e4:	6a3b      	ldr	r3, [r7, #32]
 80091e6:	695b      	ldr	r3, [r3, #20]
 80091e8:	617b      	str	r3, [r7, #20]
 80091ea:	6a3b      	ldr	r3, [r7, #32]
 80091ec:	689b      	ldr	r3, [r3, #8]
 80091ee:	6a3a      	ldr	r2, [r7, #32]
 80091f0:	68d2      	ldr	r2, [r2, #12]
 80091f2:	609a      	str	r2, [r3, #8]
 80091f4:	6a3b      	ldr	r3, [r7, #32]
 80091f6:	68db      	ldr	r3, [r3, #12]
 80091f8:	6a3a      	ldr	r2, [r7, #32]
 80091fa:	6892      	ldr	r2, [r2, #8]
 80091fc:	605a      	str	r2, [r3, #4]
 80091fe:	697b      	ldr	r3, [r7, #20]
 8009200:	685a      	ldr	r2, [r3, #4]
 8009202:	6a3b      	ldr	r3, [r7, #32]
 8009204:	3304      	adds	r3, #4
 8009206:	429a      	cmp	r2, r3
 8009208:	d103      	bne.n	8009212 <xTaskRemoveFromEventList+0xa2>
 800920a:	6a3b      	ldr	r3, [r7, #32]
 800920c:	68da      	ldr	r2, [r3, #12]
 800920e:	697b      	ldr	r3, [r7, #20]
 8009210:	605a      	str	r2, [r3, #4]
 8009212:	6a3b      	ldr	r3, [r7, #32]
 8009214:	2200      	movs	r2, #0
 8009216:	615a      	str	r2, [r3, #20]
 8009218:	697b      	ldr	r3, [r7, #20]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	1e5a      	subs	r2, r3, #1
 800921e:	697b      	ldr	r3, [r7, #20]
 8009220:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8009222:	6a3b      	ldr	r3, [r7, #32]
 8009224:	4618      	mov	r0, r3
 8009226:	f002 fc63 	bl	800baf0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800922a:	6a3b      	ldr	r3, [r7, #32]
 800922c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800922e:	2201      	movs	r2, #1
 8009230:	409a      	lsls	r2, r3
 8009232:	4b37      	ldr	r3, [pc, #220]	@ (8009310 <xTaskRemoveFromEventList+0x1a0>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	4313      	orrs	r3, r2
 8009238:	4a35      	ldr	r2, [pc, #212]	@ (8009310 <xTaskRemoveFromEventList+0x1a0>)
 800923a:	6013      	str	r3, [r2, #0]
 800923c:	6a3b      	ldr	r3, [r7, #32]
 800923e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009240:	4934      	ldr	r1, [pc, #208]	@ (8009314 <xTaskRemoveFromEventList+0x1a4>)
 8009242:	4613      	mov	r3, r2
 8009244:	009b      	lsls	r3, r3, #2
 8009246:	4413      	add	r3, r2
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	440b      	add	r3, r1
 800924c:	3304      	adds	r3, #4
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	613b      	str	r3, [r7, #16]
 8009252:	6a3b      	ldr	r3, [r7, #32]
 8009254:	693a      	ldr	r2, [r7, #16]
 8009256:	609a      	str	r2, [r3, #8]
 8009258:	693b      	ldr	r3, [r7, #16]
 800925a:	689a      	ldr	r2, [r3, #8]
 800925c:	6a3b      	ldr	r3, [r7, #32]
 800925e:	60da      	str	r2, [r3, #12]
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	689b      	ldr	r3, [r3, #8]
 8009264:	6a3a      	ldr	r2, [r7, #32]
 8009266:	3204      	adds	r2, #4
 8009268:	605a      	str	r2, [r3, #4]
 800926a:	6a3b      	ldr	r3, [r7, #32]
 800926c:	1d1a      	adds	r2, r3, #4
 800926e:	693b      	ldr	r3, [r7, #16]
 8009270:	609a      	str	r2, [r3, #8]
 8009272:	6a3b      	ldr	r3, [r7, #32]
 8009274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009276:	4613      	mov	r3, r2
 8009278:	009b      	lsls	r3, r3, #2
 800927a:	4413      	add	r3, r2
 800927c:	009b      	lsls	r3, r3, #2
 800927e:	4a25      	ldr	r2, [pc, #148]	@ (8009314 <xTaskRemoveFromEventList+0x1a4>)
 8009280:	441a      	add	r2, r3
 8009282:	6a3b      	ldr	r3, [r7, #32]
 8009284:	615a      	str	r2, [r3, #20]
 8009286:	6a3b      	ldr	r3, [r7, #32]
 8009288:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800928a:	4922      	ldr	r1, [pc, #136]	@ (8009314 <xTaskRemoveFromEventList+0x1a4>)
 800928c:	4613      	mov	r3, r2
 800928e:	009b      	lsls	r3, r3, #2
 8009290:	4413      	add	r3, r2
 8009292:	009b      	lsls	r3, r3, #2
 8009294:	440b      	add	r3, r1
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	1c59      	adds	r1, r3, #1
 800929a:	481e      	ldr	r0, [pc, #120]	@ (8009314 <xTaskRemoveFromEventList+0x1a4>)
 800929c:	4613      	mov	r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	4413      	add	r3, r2
 80092a2:	009b      	lsls	r3, r3, #2
 80092a4:	4403      	add	r3, r0
 80092a6:	6019      	str	r1, [r3, #0]
 80092a8:	e01b      	b.n	80092e2 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80092aa:	4b1b      	ldr	r3, [pc, #108]	@ (8009318 <xTaskRemoveFromEventList+0x1a8>)
 80092ac:	685b      	ldr	r3, [r3, #4]
 80092ae:	61bb      	str	r3, [r7, #24]
 80092b0:	6a3b      	ldr	r3, [r7, #32]
 80092b2:	69ba      	ldr	r2, [r7, #24]
 80092b4:	61da      	str	r2, [r3, #28]
 80092b6:	69bb      	ldr	r3, [r7, #24]
 80092b8:	689a      	ldr	r2, [r3, #8]
 80092ba:	6a3b      	ldr	r3, [r7, #32]
 80092bc:	621a      	str	r2, [r3, #32]
 80092be:	69bb      	ldr	r3, [r7, #24]
 80092c0:	689b      	ldr	r3, [r3, #8]
 80092c2:	6a3a      	ldr	r2, [r7, #32]
 80092c4:	3218      	adds	r2, #24
 80092c6:	605a      	str	r2, [r3, #4]
 80092c8:	6a3b      	ldr	r3, [r7, #32]
 80092ca:	f103 0218 	add.w	r2, r3, #24
 80092ce:	69bb      	ldr	r3, [r7, #24]
 80092d0:	609a      	str	r2, [r3, #8]
 80092d2:	6a3b      	ldr	r3, [r7, #32]
 80092d4:	4a10      	ldr	r2, [pc, #64]	@ (8009318 <xTaskRemoveFromEventList+0x1a8>)
 80092d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80092d8:	4b0f      	ldr	r3, [pc, #60]	@ (8009318 <xTaskRemoveFromEventList+0x1a8>)
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	3301      	adds	r3, #1
 80092de:	4a0e      	ldr	r2, [pc, #56]	@ (8009318 <xTaskRemoveFromEventList+0x1a8>)
 80092e0:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80092e2:	6a3b      	ldr	r3, [r7, #32]
 80092e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80092e6:	4b0d      	ldr	r3, [pc, #52]	@ (800931c <xTaskRemoveFromEventList+0x1ac>)
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d905      	bls.n	80092fc <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80092f0:	2301      	movs	r3, #1
 80092f2:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 80092f4:	4b0a      	ldr	r3, [pc, #40]	@ (8009320 <xTaskRemoveFromEventList+0x1b0>)
 80092f6:	2201      	movs	r2, #1
 80092f8:	601a      	str	r2, [r3, #0]
 80092fa:	e001      	b.n	8009300 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 80092fc:	2300      	movs	r3, #0
 80092fe:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8009300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009302:	4618      	mov	r0, r3
 8009304:	3728      	adds	r7, #40	@ 0x28
 8009306:	46bd      	mov	sp, r7
 8009308:	bd80      	pop	{r7, pc}
 800930a:	bf00      	nop
 800930c:	20000600 	.word	0x20000600
 8009310:	200005e0 	.word	0x200005e0
 8009314:	20000504 	.word	0x20000504
 8009318:	20000598 	.word	0x20000598
 800931c:	20000500 	.word	0x20000500
 8009320:	200005ec 	.word	0x200005ec

08009324 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009324:	b480      	push	{r7}
 8009326:	b083      	sub	sp, #12
 8009328:	af00      	add	r7, sp, #0
 800932a:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 800932c:	4b06      	ldr	r3, [pc, #24]	@ (8009348 <vTaskInternalSetTimeOutState+0x24>)
 800932e:	681a      	ldr	r2, [r3, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8009334:	4b05      	ldr	r3, [pc, #20]	@ (800934c <vTaskInternalSetTimeOutState+0x28>)
 8009336:	681a      	ldr	r2, [r3, #0]
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	605a      	str	r2, [r3, #4]
}
 800933c:	bf00      	nop
 800933e:	370c      	adds	r7, #12
 8009340:	46bd      	mov	sp, r7
 8009342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009346:	4770      	bx	lr
 8009348:	200005f0 	.word	0x200005f0
 800934c:	200005dc 	.word	0x200005dc

08009350 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8009350:	b580      	push	{r7, lr}
 8009352:	b088      	sub	sp, #32
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
 8009358:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d10b      	bne.n	8009378 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8009360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009364:	f383 8811 	msr	BASEPRI, r3
 8009368:	f3bf 8f6f 	isb	sy
 800936c:	f3bf 8f4f 	dsb	sy
 8009370:	613b      	str	r3, [r7, #16]
    }
 8009372:	bf00      	nop
 8009374:	bf00      	nop
 8009376:	e7fd      	b.n	8009374 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8009378:	683b      	ldr	r3, [r7, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d10b      	bne.n	8009396 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800937e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009382:	f383 8811 	msr	BASEPRI, r3
 8009386:	f3bf 8f6f 	isb	sy
 800938a:	f3bf 8f4f 	dsb	sy
 800938e:	60fb      	str	r3, [r7, #12]
    }
 8009390:	bf00      	nop
 8009392:	bf00      	nop
 8009394:	e7fd      	b.n	8009392 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 8009396:	f000 fcd1 	bl	8009d3c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800939a:	4b1f      	ldr	r3, [pc, #124]	@ (8009418 <xTaskCheckForTimeOut+0xc8>)
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	685b      	ldr	r3, [r3, #4]
 80093a4:	69ba      	ldr	r2, [r7, #24]
 80093a6:	1ad3      	subs	r3, r2, r3
 80093a8:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80093b2:	d102      	bne.n	80093ba <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80093b4:	2300      	movs	r3, #0
 80093b6:	61fb      	str	r3, [r7, #28]
 80093b8:	e026      	b.n	8009408 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	4b17      	ldr	r3, [pc, #92]	@ (800941c <xTaskCheckForTimeOut+0xcc>)
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	429a      	cmp	r2, r3
 80093c4:	d00a      	beq.n	80093dc <xTaskCheckForTimeOut+0x8c>
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	69ba      	ldr	r2, [r7, #24]
 80093cc:	429a      	cmp	r2, r3
 80093ce:	d305      	bcc.n	80093dc <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80093d0:	2301      	movs	r3, #1
 80093d2:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80093d4:	683b      	ldr	r3, [r7, #0]
 80093d6:	2200      	movs	r2, #0
 80093d8:	601a      	str	r2, [r3, #0]
 80093da:	e015      	b.n	8009408 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80093dc:	683b      	ldr	r3, [r7, #0]
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	697a      	ldr	r2, [r7, #20]
 80093e2:	429a      	cmp	r2, r3
 80093e4:	d20b      	bcs.n	80093fe <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80093e6:	683b      	ldr	r3, [r7, #0]
 80093e8:	681a      	ldr	r2, [r3, #0]
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	1ad2      	subs	r2, r2, r3
 80093ee:	683b      	ldr	r3, [r7, #0]
 80093f0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80093f2:	6878      	ldr	r0, [r7, #4]
 80093f4:	f7ff ff96 	bl	8009324 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80093f8:	2300      	movs	r3, #0
 80093fa:	61fb      	str	r3, [r7, #28]
 80093fc:	e004      	b.n	8009408 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80093fe:	683b      	ldr	r3, [r7, #0]
 8009400:	2200      	movs	r2, #0
 8009402:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8009404:	2301      	movs	r3, #1
 8009406:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8009408:	f000 fcca 	bl	8009da0 <vPortExitCritical>

    return xReturn;
 800940c:	69fb      	ldr	r3, [r7, #28]
}
 800940e:	4618      	mov	r0, r3
 8009410:	3720      	adds	r7, #32
 8009412:	46bd      	mov	sp, r7
 8009414:	bd80      	pop	{r7, pc}
 8009416:	bf00      	nop
 8009418:	200005dc 	.word	0x200005dc
 800941c:	200005f0 	.word	0x200005f0

08009420 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8009420:	b480      	push	{r7}
 8009422:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8009424:	4b03      	ldr	r3, [pc, #12]	@ (8009434 <vTaskMissedYield+0x14>)
 8009426:	2201      	movs	r2, #1
 8009428:	601a      	str	r2, [r3, #0]
}
 800942a:	bf00      	nop
 800942c:	46bd      	mov	sp, r7
 800942e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009432:	4770      	bx	lr
 8009434:	200005ec 	.word	0x200005ec

08009438 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b082      	sub	sp, #8
 800943c:	af00      	add	r7, sp, #0
 800943e:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8009440:	f000 f852 	bl	80094e8 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009444:	4b06      	ldr	r3, [pc, #24]	@ (8009460 <prvIdleTask+0x28>)
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	2b01      	cmp	r3, #1
 800944a:	d9f9      	bls.n	8009440 <prvIdleTask+0x8>
            {
                taskYIELD();
 800944c:	4b05      	ldr	r3, [pc, #20]	@ (8009464 <prvIdleTask+0x2c>)
 800944e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009452:	601a      	str	r2, [r3, #0]
 8009454:	f3bf 8f4f 	dsb	sy
 8009458:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800945c:	e7f0      	b.n	8009440 <prvIdleTask+0x8>
 800945e:	bf00      	nop
 8009460:	20000504 	.word	0x20000504
 8009464:	e000ed04 	.word	0xe000ed04

08009468 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b082      	sub	sp, #8
 800946c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800946e:	2300      	movs	r3, #0
 8009470:	607b      	str	r3, [r7, #4]
 8009472:	e00c      	b.n	800948e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	4613      	mov	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4a12      	ldr	r2, [pc, #72]	@ (80094c8 <prvInitialiseTaskLists+0x60>)
 8009480:	4413      	add	r3, r2
 8009482:	4618      	mov	r0, r3
 8009484:	f7fe fcf2 	bl	8007e6c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	3301      	adds	r3, #1
 800948c:	607b      	str	r3, [r7, #4]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2b04      	cmp	r3, #4
 8009492:	d9ef      	bls.n	8009474 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8009494:	480d      	ldr	r0, [pc, #52]	@ (80094cc <prvInitialiseTaskLists+0x64>)
 8009496:	f7fe fce9 	bl	8007e6c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800949a:	480d      	ldr	r0, [pc, #52]	@ (80094d0 <prvInitialiseTaskLists+0x68>)
 800949c:	f7fe fce6 	bl	8007e6c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80094a0:	480c      	ldr	r0, [pc, #48]	@ (80094d4 <prvInitialiseTaskLists+0x6c>)
 80094a2:	f7fe fce3 	bl	8007e6c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80094a6:	480c      	ldr	r0, [pc, #48]	@ (80094d8 <prvInitialiseTaskLists+0x70>)
 80094a8:	f7fe fce0 	bl	8007e6c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80094ac:	480b      	ldr	r0, [pc, #44]	@ (80094dc <prvInitialiseTaskLists+0x74>)
 80094ae:	f7fe fcdd 	bl	8007e6c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80094b2:	4b0b      	ldr	r3, [pc, #44]	@ (80094e0 <prvInitialiseTaskLists+0x78>)
 80094b4:	4a05      	ldr	r2, [pc, #20]	@ (80094cc <prvInitialiseTaskLists+0x64>)
 80094b6:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80094b8:	4b0a      	ldr	r3, [pc, #40]	@ (80094e4 <prvInitialiseTaskLists+0x7c>)
 80094ba:	4a05      	ldr	r2, [pc, #20]	@ (80094d0 <prvInitialiseTaskLists+0x68>)
 80094bc:	601a      	str	r2, [r3, #0]
}
 80094be:	bf00      	nop
 80094c0:	3708      	adds	r7, #8
 80094c2:	46bd      	mov	sp, r7
 80094c4:	bd80      	pop	{r7, pc}
 80094c6:	bf00      	nop
 80094c8:	20000504 	.word	0x20000504
 80094cc:	20000568 	.word	0x20000568
 80094d0:	2000057c 	.word	0x2000057c
 80094d4:	20000598 	.word	0x20000598
 80094d8:	200005ac 	.word	0x200005ac
 80094dc:	200005c4 	.word	0x200005c4
 80094e0:	20000590 	.word	0x20000590
 80094e4:	20000594 	.word	0x20000594

080094e8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80094e8:	b580      	push	{r7, lr}
 80094ea:	b082      	sub	sp, #8
 80094ec:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094ee:	e019      	b.n	8009524 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80094f0:	f000 fc24 	bl	8009d3c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094f4:	4b10      	ldr	r3, [pc, #64]	@ (8009538 <prvCheckTasksWaitingTermination+0x50>)
 80094f6:	68db      	ldr	r3, [r3, #12]
 80094f8:	68db      	ldr	r3, [r3, #12]
 80094fa:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	3304      	adds	r3, #4
 8009500:	4618      	mov	r0, r3
 8009502:	f7fe fd19 	bl	8007f38 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8009506:	4b0d      	ldr	r3, [pc, #52]	@ (800953c <prvCheckTasksWaitingTermination+0x54>)
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	3b01      	subs	r3, #1
 800950c:	4a0b      	ldr	r2, [pc, #44]	@ (800953c <prvCheckTasksWaitingTermination+0x54>)
 800950e:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8009510:	4b0b      	ldr	r3, [pc, #44]	@ (8009540 <prvCheckTasksWaitingTermination+0x58>)
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	3b01      	subs	r3, #1
 8009516:	4a0a      	ldr	r2, [pc, #40]	@ (8009540 <prvCheckTasksWaitingTermination+0x58>)
 8009518:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800951a:	f000 fc41 	bl	8009da0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f000 f810 	bl	8009544 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009524:	4b06      	ldr	r3, [pc, #24]	@ (8009540 <prvCheckTasksWaitingTermination+0x58>)
 8009526:	681b      	ldr	r3, [r3, #0]
 8009528:	2b00      	cmp	r3, #0
 800952a:	d1e1      	bne.n	80094f0 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 800952c:	bf00      	nop
 800952e:	bf00      	nop
 8009530:	3708      	adds	r7, #8
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	200005ac 	.word	0x200005ac
 800953c:	200005d8 	.word	0x200005d8
 8009540:	200005c0 	.word	0x200005c0

08009544 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8009544:	b580      	push	{r7, lr}
 8009546:	b082      	sub	sp, #8
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009550:	4618      	mov	r0, r3
 8009552:	f000 fdd9 	bl	800a108 <vPortFree>
            vPortFree( pxTCB );
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 fdd6 	bl	800a108 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800955c:	bf00      	nop
 800955e:	3708      	adds	r7, #8
 8009560:	46bd      	mov	sp, r7
 8009562:	bd80      	pop	{r7, pc}

08009564 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009564:	b480      	push	{r7}
 8009566:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009568:	4b0a      	ldr	r3, [pc, #40]	@ (8009594 <prvResetNextTaskUnblockTime+0x30>)
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d104      	bne.n	800957c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8009572:	4b09      	ldr	r3, [pc, #36]	@ (8009598 <prvResetNextTaskUnblockTime+0x34>)
 8009574:	f04f 32ff 	mov.w	r2, #4294967295
 8009578:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800957a:	e005      	b.n	8009588 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800957c:	4b05      	ldr	r3, [pc, #20]	@ (8009594 <prvResetNextTaskUnblockTime+0x30>)
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	68db      	ldr	r3, [r3, #12]
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4a04      	ldr	r2, [pc, #16]	@ (8009598 <prvResetNextTaskUnblockTime+0x34>)
 8009586:	6013      	str	r3, [r2, #0]
}
 8009588:	bf00      	nop
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr
 8009592:	bf00      	nop
 8009594:	20000590 	.word	0x20000590
 8009598:	200005f8 	.word	0x200005f8

0800959c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 800959c:	b580      	push	{r7, lr}
 800959e:	b086      	sub	sp, #24
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80095a8:	2300      	movs	r3, #0
 80095aa:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	f000 808b 	beq.w	80096ca <xTaskPriorityInherit+0x12e>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80095b4:	693b      	ldr	r3, [r7, #16]
 80095b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095b8:	4b46      	ldr	r3, [pc, #280]	@ (80096d4 <xTaskPriorityInherit+0x138>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095be:	429a      	cmp	r2, r3
 80095c0:	d27a      	bcs.n	80096b8 <xTaskPriorityInherit+0x11c>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80095c2:	693b      	ldr	r3, [r7, #16]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	2b00      	cmp	r3, #0
 80095c8:	db06      	blt.n	80095d8 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095ca:	4b42      	ldr	r3, [pc, #264]	@ (80096d4 <xTaskPriorityInherit+0x138>)
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095d0:	f1c3 0205 	rsb	r2, r3, #5
 80095d4:	693b      	ldr	r3, [r7, #16]
 80095d6:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80095d8:	693b      	ldr	r3, [r7, #16]
 80095da:	6959      	ldr	r1, [r3, #20]
 80095dc:	693b      	ldr	r3, [r7, #16]
 80095de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095e0:	4613      	mov	r3, r2
 80095e2:	009b      	lsls	r3, r3, #2
 80095e4:	4413      	add	r3, r2
 80095e6:	009b      	lsls	r3, r3, #2
 80095e8:	4a3b      	ldr	r2, [pc, #236]	@ (80096d8 <xTaskPriorityInherit+0x13c>)
 80095ea:	4413      	add	r3, r2
 80095ec:	4299      	cmp	r1, r3
 80095ee:	d15b      	bne.n	80096a8 <xTaskPriorityInherit+0x10c>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80095f0:	693b      	ldr	r3, [r7, #16]
 80095f2:	3304      	adds	r3, #4
 80095f4:	4618      	mov	r0, r3
 80095f6:	f7fe fc9f 	bl	8007f38 <uxListRemove>
 80095fa:	4603      	mov	r3, r0
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d10a      	bne.n	8009616 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009604:	2201      	movs	r2, #1
 8009606:	fa02 f303 	lsl.w	r3, r2, r3
 800960a:	43da      	mvns	r2, r3
 800960c:	4b33      	ldr	r3, [pc, #204]	@ (80096dc <xTaskPriorityInherit+0x140>)
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	4013      	ands	r3, r2
 8009612:	4a32      	ldr	r2, [pc, #200]	@ (80096dc <xTaskPriorityInherit+0x140>)
 8009614:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009616:	4b2f      	ldr	r3, [pc, #188]	@ (80096d4 <xTaskPriorityInherit+0x138>)
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800961c:	693b      	ldr	r3, [r7, #16]
 800961e:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8009620:	693b      	ldr	r3, [r7, #16]
 8009622:	4618      	mov	r0, r3
 8009624:	f002 fa64 	bl	800baf0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009628:	693b      	ldr	r3, [r7, #16]
 800962a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800962c:	2201      	movs	r2, #1
 800962e:	409a      	lsls	r2, r3
 8009630:	4b2a      	ldr	r3, [pc, #168]	@ (80096dc <xTaskPriorityInherit+0x140>)
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	4313      	orrs	r3, r2
 8009636:	4a29      	ldr	r2, [pc, #164]	@ (80096dc <xTaskPriorityInherit+0x140>)
 8009638:	6013      	str	r3, [r2, #0]
 800963a:	693b      	ldr	r3, [r7, #16]
 800963c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800963e:	4926      	ldr	r1, [pc, #152]	@ (80096d8 <xTaskPriorityInherit+0x13c>)
 8009640:	4613      	mov	r3, r2
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	4413      	add	r3, r2
 8009646:	009b      	lsls	r3, r3, #2
 8009648:	440b      	add	r3, r1
 800964a:	3304      	adds	r3, #4
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	60fb      	str	r3, [r7, #12]
 8009650:	693b      	ldr	r3, [r7, #16]
 8009652:	68fa      	ldr	r2, [r7, #12]
 8009654:	609a      	str	r2, [r3, #8]
 8009656:	68fb      	ldr	r3, [r7, #12]
 8009658:	689a      	ldr	r2, [r3, #8]
 800965a:	693b      	ldr	r3, [r7, #16]
 800965c:	60da      	str	r2, [r3, #12]
 800965e:	68fb      	ldr	r3, [r7, #12]
 8009660:	689b      	ldr	r3, [r3, #8]
 8009662:	693a      	ldr	r2, [r7, #16]
 8009664:	3204      	adds	r2, #4
 8009666:	605a      	str	r2, [r3, #4]
 8009668:	693b      	ldr	r3, [r7, #16]
 800966a:	1d1a      	adds	r2, r3, #4
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	609a      	str	r2, [r3, #8]
 8009670:	693b      	ldr	r3, [r7, #16]
 8009672:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009674:	4613      	mov	r3, r2
 8009676:	009b      	lsls	r3, r3, #2
 8009678:	4413      	add	r3, r2
 800967a:	009b      	lsls	r3, r3, #2
 800967c:	4a16      	ldr	r2, [pc, #88]	@ (80096d8 <xTaskPriorityInherit+0x13c>)
 800967e:	441a      	add	r2, r3
 8009680:	693b      	ldr	r3, [r7, #16]
 8009682:	615a      	str	r2, [r3, #20]
 8009684:	693b      	ldr	r3, [r7, #16]
 8009686:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009688:	4913      	ldr	r1, [pc, #76]	@ (80096d8 <xTaskPriorityInherit+0x13c>)
 800968a:	4613      	mov	r3, r2
 800968c:	009b      	lsls	r3, r3, #2
 800968e:	4413      	add	r3, r2
 8009690:	009b      	lsls	r3, r3, #2
 8009692:	440b      	add	r3, r1
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	1c59      	adds	r1, r3, #1
 8009698:	480f      	ldr	r0, [pc, #60]	@ (80096d8 <xTaskPriorityInherit+0x13c>)
 800969a:	4613      	mov	r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	4413      	add	r3, r2
 80096a0:	009b      	lsls	r3, r3, #2
 80096a2:	4403      	add	r3, r0
 80096a4:	6019      	str	r1, [r3, #0]
 80096a6:	e004      	b.n	80096b2 <xTaskPriorityInherit+0x116>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80096a8:	4b0a      	ldr	r3, [pc, #40]	@ (80096d4 <xTaskPriorityInherit+0x138>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80096ae:	693b      	ldr	r3, [r7, #16]
 80096b0:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80096b2:	2301      	movs	r3, #1
 80096b4:	617b      	str	r3, [r7, #20]
 80096b6:	e008      	b.n	80096ca <xTaskPriorityInherit+0x12e>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80096b8:	693b      	ldr	r3, [r7, #16]
 80096ba:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80096bc:	4b05      	ldr	r3, [pc, #20]	@ (80096d4 <xTaskPriorityInherit+0x138>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096c2:	429a      	cmp	r2, r3
 80096c4:	d201      	bcs.n	80096ca <xTaskPriorityInherit+0x12e>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80096c6:	2301      	movs	r3, #1
 80096c8:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80096ca:	697b      	ldr	r3, [r7, #20]
    }
 80096cc:	4618      	mov	r0, r3
 80096ce:	3718      	adds	r7, #24
 80096d0:	46bd      	mov	sp, r7
 80096d2:	bd80      	pop	{r7, pc}
 80096d4:	20000500 	.word	0x20000500
 80096d8:	20000504 	.word	0x20000504
 80096dc:	200005e0 	.word	0x200005e0

080096e0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b088      	sub	sp, #32
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80096ec:	2300      	movs	r3, #0
 80096ee:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f000 8092 	beq.w	800981c <xTaskPriorityDisinherit+0x13c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 80096f8:	4b4b      	ldr	r3, [pc, #300]	@ (8009828 <xTaskPriorityDisinherit+0x148>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	69ba      	ldr	r2, [r7, #24]
 80096fe:	429a      	cmp	r2, r3
 8009700:	d00b      	beq.n	800971a <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 8009702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009706:	f383 8811 	msr	BASEPRI, r3
 800970a:	f3bf 8f6f 	isb	sy
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	613b      	str	r3, [r7, #16]
    }
 8009714:	bf00      	nop
 8009716:	bf00      	nop
 8009718:	e7fd      	b.n	8009716 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800971a:	69bb      	ldr	r3, [r7, #24]
 800971c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800971e:	2b00      	cmp	r3, #0
 8009720:	d10b      	bne.n	800973a <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 8009722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009726:	f383 8811 	msr	BASEPRI, r3
 800972a:	f3bf 8f6f 	isb	sy
 800972e:	f3bf 8f4f 	dsb	sy
 8009732:	60fb      	str	r3, [r7, #12]
    }
 8009734:	bf00      	nop
 8009736:	bf00      	nop
 8009738:	e7fd      	b.n	8009736 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 800973a:	69bb      	ldr	r3, [r7, #24]
 800973c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800973e:	1e5a      	subs	r2, r3, #1
 8009740:	69bb      	ldr	r3, [r7, #24]
 8009742:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009744:	69bb      	ldr	r3, [r7, #24]
 8009746:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009748:	69bb      	ldr	r3, [r7, #24]
 800974a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800974c:	429a      	cmp	r2, r3
 800974e:	d065      	beq.n	800981c <xTaskPriorityDisinherit+0x13c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009750:	69bb      	ldr	r3, [r7, #24]
 8009752:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009754:	2b00      	cmp	r3, #0
 8009756:	d161      	bne.n	800981c <xTaskPriorityDisinherit+0x13c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009758:	69bb      	ldr	r3, [r7, #24]
 800975a:	3304      	adds	r3, #4
 800975c:	4618      	mov	r0, r3
 800975e:	f7fe fbeb 	bl	8007f38 <uxListRemove>
 8009762:	4603      	mov	r3, r0
 8009764:	2b00      	cmp	r3, #0
 8009766:	d10a      	bne.n	800977e <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009768:	69bb      	ldr	r3, [r7, #24]
 800976a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800976c:	2201      	movs	r2, #1
 800976e:	fa02 f303 	lsl.w	r3, r2, r3
 8009772:	43da      	mvns	r2, r3
 8009774:	4b2d      	ldr	r3, [pc, #180]	@ (800982c <xTaskPriorityDisinherit+0x14c>)
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	4013      	ands	r3, r2
 800977a:	4a2c      	ldr	r2, [pc, #176]	@ (800982c <xTaskPriorityDisinherit+0x14c>)
 800977c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800977e:	69bb      	ldr	r3, [r7, #24]
 8009780:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8009782:	69bb      	ldr	r3, [r7, #24]
 8009784:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800978a:	f1c3 0205 	rsb	r2, r3, #5
 800978e:	69bb      	ldr	r3, [r7, #24]
 8009790:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 8009792:	69bb      	ldr	r3, [r7, #24]
 8009794:	4618      	mov	r0, r3
 8009796:	f002 f9ab 	bl	800baf0 <SEGGER_SYSVIEW_OnTaskStartReady>
 800979a:	69bb      	ldr	r3, [r7, #24]
 800979c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800979e:	2201      	movs	r2, #1
 80097a0:	409a      	lsls	r2, r3
 80097a2:	4b22      	ldr	r3, [pc, #136]	@ (800982c <xTaskPriorityDisinherit+0x14c>)
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	4313      	orrs	r3, r2
 80097a8:	4a20      	ldr	r2, [pc, #128]	@ (800982c <xTaskPriorityDisinherit+0x14c>)
 80097aa:	6013      	str	r3, [r2, #0]
 80097ac:	69bb      	ldr	r3, [r7, #24]
 80097ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097b0:	491f      	ldr	r1, [pc, #124]	@ (8009830 <xTaskPriorityDisinherit+0x150>)
 80097b2:	4613      	mov	r3, r2
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	4413      	add	r3, r2
 80097b8:	009b      	lsls	r3, r3, #2
 80097ba:	440b      	add	r3, r1
 80097bc:	3304      	adds	r3, #4
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	617b      	str	r3, [r7, #20]
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	697a      	ldr	r2, [r7, #20]
 80097c6:	609a      	str	r2, [r3, #8]
 80097c8:	697b      	ldr	r3, [r7, #20]
 80097ca:	689a      	ldr	r2, [r3, #8]
 80097cc:	69bb      	ldr	r3, [r7, #24]
 80097ce:	60da      	str	r2, [r3, #12]
 80097d0:	697b      	ldr	r3, [r7, #20]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	69ba      	ldr	r2, [r7, #24]
 80097d6:	3204      	adds	r2, #4
 80097d8:	605a      	str	r2, [r3, #4]
 80097da:	69bb      	ldr	r3, [r7, #24]
 80097dc:	1d1a      	adds	r2, r3, #4
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	609a      	str	r2, [r3, #8]
 80097e2:	69bb      	ldr	r3, [r7, #24]
 80097e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097e6:	4613      	mov	r3, r2
 80097e8:	009b      	lsls	r3, r3, #2
 80097ea:	4413      	add	r3, r2
 80097ec:	009b      	lsls	r3, r3, #2
 80097ee:	4a10      	ldr	r2, [pc, #64]	@ (8009830 <xTaskPriorityDisinherit+0x150>)
 80097f0:	441a      	add	r2, r3
 80097f2:	69bb      	ldr	r3, [r7, #24]
 80097f4:	615a      	str	r2, [r3, #20]
 80097f6:	69bb      	ldr	r3, [r7, #24]
 80097f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80097fa:	490d      	ldr	r1, [pc, #52]	@ (8009830 <xTaskPriorityDisinherit+0x150>)
 80097fc:	4613      	mov	r3, r2
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4413      	add	r3, r2
 8009802:	009b      	lsls	r3, r3, #2
 8009804:	440b      	add	r3, r1
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	1c59      	adds	r1, r3, #1
 800980a:	4809      	ldr	r0, [pc, #36]	@ (8009830 <xTaskPriorityDisinherit+0x150>)
 800980c:	4613      	mov	r3, r2
 800980e:	009b      	lsls	r3, r3, #2
 8009810:	4413      	add	r3, r2
 8009812:	009b      	lsls	r3, r3, #2
 8009814:	4403      	add	r3, r0
 8009816:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8009818:	2301      	movs	r3, #1
 800981a:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 800981c:	69fb      	ldr	r3, [r7, #28]
    }
 800981e:	4618      	mov	r0, r3
 8009820:	3720      	adds	r7, #32
 8009822:	46bd      	mov	sp, r7
 8009824:	bd80      	pop	{r7, pc}
 8009826:	bf00      	nop
 8009828:	20000500 	.word	0x20000500
 800982c:	200005e0 	.word	0x200005e0
 8009830:	20000504 	.word	0x20000504

08009834 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8009834:	b580      	push	{r7, lr}
 8009836:	b08a      	sub	sp, #40	@ 0x28
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
 800983c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8009842:	2301      	movs	r3, #1
 8009844:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	2b00      	cmp	r3, #0
 800984a:	f000 80a8 	beq.w	800999e <vTaskPriorityDisinheritAfterTimeout+0x16a>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800984e:	6a3b      	ldr	r3, [r7, #32]
 8009850:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009852:	2b00      	cmp	r3, #0
 8009854:	d10b      	bne.n	800986e <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 8009856:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800985a:	f383 8811 	msr	BASEPRI, r3
 800985e:	f3bf 8f6f 	isb	sy
 8009862:	f3bf 8f4f 	dsb	sy
 8009866:	613b      	str	r3, [r7, #16]
    }
 8009868:	bf00      	nop
 800986a:	bf00      	nop
 800986c:	e7fd      	b.n	800986a <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800986e:	6a3b      	ldr	r3, [r7, #32]
 8009870:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009872:	683a      	ldr	r2, [r7, #0]
 8009874:	429a      	cmp	r2, r3
 8009876:	d902      	bls.n	800987e <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009878:	683b      	ldr	r3, [r7, #0]
 800987a:	627b      	str	r3, [r7, #36]	@ 0x24
 800987c:	e002      	b.n	8009884 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800987e:	6a3b      	ldr	r3, [r7, #32]
 8009880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009882:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8009884:	6a3b      	ldr	r3, [r7, #32]
 8009886:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800988a:	429a      	cmp	r2, r3
 800988c:	f000 8087 	beq.w	800999e <vTaskPriorityDisinheritAfterTimeout+0x16a>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8009890:	6a3b      	ldr	r3, [r7, #32]
 8009892:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009894:	69fa      	ldr	r2, [r7, #28]
 8009896:	429a      	cmp	r2, r3
 8009898:	f040 8081 	bne.w	800999e <vTaskPriorityDisinheritAfterTimeout+0x16a>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800989c:	4b42      	ldr	r3, [pc, #264]	@ (80099a8 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	6a3a      	ldr	r2, [r7, #32]
 80098a2:	429a      	cmp	r2, r3
 80098a4:	d10b      	bne.n	80098be <vTaskPriorityDisinheritAfterTimeout+0x8a>
        __asm volatile
 80098a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80098aa:	f383 8811 	msr	BASEPRI, r3
 80098ae:	f3bf 8f6f 	isb	sy
 80098b2:	f3bf 8f4f 	dsb	sy
 80098b6:	60fb      	str	r3, [r7, #12]
    }
 80098b8:	bf00      	nop
 80098ba:	bf00      	nop
 80098bc:	e7fd      	b.n	80098ba <vTaskPriorityDisinheritAfterTimeout+0x86>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80098be:	6a3b      	ldr	r3, [r7, #32]
 80098c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098c2:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 80098c4:	6a3b      	ldr	r3, [r7, #32]
 80098c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098c8:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80098ca:	6a3b      	ldr	r3, [r7, #32]
 80098cc:	699b      	ldr	r3, [r3, #24]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	db04      	blt.n	80098dc <vTaskPriorityDisinheritAfterTimeout+0xa8>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80098d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098d4:	f1c3 0205 	rsb	r2, r3, #5
 80098d8:	6a3b      	ldr	r3, [r7, #32]
 80098da:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80098dc:	6a3b      	ldr	r3, [r7, #32]
 80098de:	6959      	ldr	r1, [r3, #20]
 80098e0:	69ba      	ldr	r2, [r7, #24]
 80098e2:	4613      	mov	r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	4413      	add	r3, r2
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	4a30      	ldr	r2, [pc, #192]	@ (80099ac <vTaskPriorityDisinheritAfterTimeout+0x178>)
 80098ec:	4413      	add	r3, r2
 80098ee:	4299      	cmp	r1, r3
 80098f0:	d155      	bne.n	800999e <vTaskPriorityDisinheritAfterTimeout+0x16a>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80098f2:	6a3b      	ldr	r3, [r7, #32]
 80098f4:	3304      	adds	r3, #4
 80098f6:	4618      	mov	r0, r3
 80098f8:	f7fe fb1e 	bl	8007f38 <uxListRemove>
 80098fc:	4603      	mov	r3, r0
 80098fe:	2b00      	cmp	r3, #0
 8009900:	d10a      	bne.n	8009918 <vTaskPriorityDisinheritAfterTimeout+0xe4>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009902:	6a3b      	ldr	r3, [r7, #32]
 8009904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009906:	2201      	movs	r2, #1
 8009908:	fa02 f303 	lsl.w	r3, r2, r3
 800990c:	43da      	mvns	r2, r3
 800990e:	4b28      	ldr	r3, [pc, #160]	@ (80099b0 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	4013      	ands	r3, r2
 8009914:	4a26      	ldr	r2, [pc, #152]	@ (80099b0 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8009916:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8009918:	6a3b      	ldr	r3, [r7, #32]
 800991a:	4618      	mov	r0, r3
 800991c:	f002 f8e8 	bl	800baf0 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009920:	6a3b      	ldr	r3, [r7, #32]
 8009922:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009924:	2201      	movs	r2, #1
 8009926:	409a      	lsls	r2, r3
 8009928:	4b21      	ldr	r3, [pc, #132]	@ (80099b0 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	4313      	orrs	r3, r2
 800992e:	4a20      	ldr	r2, [pc, #128]	@ (80099b0 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8009930:	6013      	str	r3, [r2, #0]
 8009932:	6a3b      	ldr	r3, [r7, #32]
 8009934:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009936:	491d      	ldr	r1, [pc, #116]	@ (80099ac <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8009938:	4613      	mov	r3, r2
 800993a:	009b      	lsls	r3, r3, #2
 800993c:	4413      	add	r3, r2
 800993e:	009b      	lsls	r3, r3, #2
 8009940:	440b      	add	r3, r1
 8009942:	3304      	adds	r3, #4
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	617b      	str	r3, [r7, #20]
 8009948:	6a3b      	ldr	r3, [r7, #32]
 800994a:	697a      	ldr	r2, [r7, #20]
 800994c:	609a      	str	r2, [r3, #8]
 800994e:	697b      	ldr	r3, [r7, #20]
 8009950:	689a      	ldr	r2, [r3, #8]
 8009952:	6a3b      	ldr	r3, [r7, #32]
 8009954:	60da      	str	r2, [r3, #12]
 8009956:	697b      	ldr	r3, [r7, #20]
 8009958:	689b      	ldr	r3, [r3, #8]
 800995a:	6a3a      	ldr	r2, [r7, #32]
 800995c:	3204      	adds	r2, #4
 800995e:	605a      	str	r2, [r3, #4]
 8009960:	6a3b      	ldr	r3, [r7, #32]
 8009962:	1d1a      	adds	r2, r3, #4
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	609a      	str	r2, [r3, #8]
 8009968:	6a3b      	ldr	r3, [r7, #32]
 800996a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800996c:	4613      	mov	r3, r2
 800996e:	009b      	lsls	r3, r3, #2
 8009970:	4413      	add	r3, r2
 8009972:	009b      	lsls	r3, r3, #2
 8009974:	4a0d      	ldr	r2, [pc, #52]	@ (80099ac <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8009976:	441a      	add	r2, r3
 8009978:	6a3b      	ldr	r3, [r7, #32]
 800997a:	615a      	str	r2, [r3, #20]
 800997c:	6a3b      	ldr	r3, [r7, #32]
 800997e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009980:	490a      	ldr	r1, [pc, #40]	@ (80099ac <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8009982:	4613      	mov	r3, r2
 8009984:	009b      	lsls	r3, r3, #2
 8009986:	4413      	add	r3, r2
 8009988:	009b      	lsls	r3, r3, #2
 800998a:	440b      	add	r3, r1
 800998c:	681b      	ldr	r3, [r3, #0]
 800998e:	1c59      	adds	r1, r3, #1
 8009990:	4806      	ldr	r0, [pc, #24]	@ (80099ac <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8009992:	4613      	mov	r3, r2
 8009994:	009b      	lsls	r3, r3, #2
 8009996:	4413      	add	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4403      	add	r3, r0
 800999c:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 800999e:	bf00      	nop
 80099a0:	3728      	adds	r7, #40	@ 0x28
 80099a2:	46bd      	mov	sp, r7
 80099a4:	bd80      	pop	{r7, pc}
 80099a6:	bf00      	nop
 80099a8:	20000500 	.word	0x20000500
 80099ac:	20000504 	.word	0x20000504
 80099b0:	200005e0 	.word	0x200005e0

080099b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80099b4:	b480      	push	{r7}
 80099b6:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80099b8:	4b07      	ldr	r3, [pc, #28]	@ (80099d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d004      	beq.n	80099ca <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80099c0:	4b05      	ldr	r3, [pc, #20]	@ (80099d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80099c6:	3201      	adds	r2, #1
 80099c8:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 80099ca:	4b03      	ldr	r3, [pc, #12]	@ (80099d8 <pvTaskIncrementMutexHeldCount+0x24>)
 80099cc:	681b      	ldr	r3, [r3, #0]
    }
 80099ce:	4618      	mov	r0, r3
 80099d0:	46bd      	mov	sp, r7
 80099d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d6:	4770      	bx	lr
 80099d8:	20000500 	.word	0x20000500

080099dc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80099dc:	b580      	push	{r7, lr}
 80099de:	b086      	sub	sp, #24
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
 80099e4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80099e6:	4b36      	ldr	r3, [pc, #216]	@ (8009ac0 <prvAddCurrentTaskToDelayedList+0xe4>)
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099ec:	4b35      	ldr	r3, [pc, #212]	@ (8009ac4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80099ee:	681b      	ldr	r3, [r3, #0]
 80099f0:	3304      	adds	r3, #4
 80099f2:	4618      	mov	r0, r3
 80099f4:	f7fe faa0 	bl	8007f38 <uxListRemove>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d10b      	bne.n	8009a16 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80099fe:	4b31      	ldr	r3, [pc, #196]	@ (8009ac4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009a04:	2201      	movs	r2, #1
 8009a06:	fa02 f303 	lsl.w	r3, r2, r3
 8009a0a:	43da      	mvns	r2, r3
 8009a0c:	4b2e      	ldr	r3, [pc, #184]	@ (8009ac8 <prvAddCurrentTaskToDelayedList+0xec>)
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4013      	ands	r3, r2
 8009a12:	4a2d      	ldr	r2, [pc, #180]	@ (8009ac8 <prvAddCurrentTaskToDelayedList+0xec>)
 8009a14:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a1c:	d124      	bne.n	8009a68 <prvAddCurrentTaskToDelayedList+0x8c>
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d021      	beq.n	8009a68 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a24:	4b29      	ldr	r3, [pc, #164]	@ (8009acc <prvAddCurrentTaskToDelayedList+0xf0>)
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	613b      	str	r3, [r7, #16]
 8009a2a:	4b26      	ldr	r3, [pc, #152]	@ (8009ac4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	693a      	ldr	r2, [r7, #16]
 8009a30:	609a      	str	r2, [r3, #8]
 8009a32:	4b24      	ldr	r3, [pc, #144]	@ (8009ac4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	693a      	ldr	r2, [r7, #16]
 8009a38:	6892      	ldr	r2, [r2, #8]
 8009a3a:	60da      	str	r2, [r3, #12]
 8009a3c:	4b21      	ldr	r3, [pc, #132]	@ (8009ac4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009a3e:	681a      	ldr	r2, [r3, #0]
 8009a40:	693b      	ldr	r3, [r7, #16]
 8009a42:	689b      	ldr	r3, [r3, #8]
 8009a44:	3204      	adds	r2, #4
 8009a46:	605a      	str	r2, [r3, #4]
 8009a48:	4b1e      	ldr	r3, [pc, #120]	@ (8009ac4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	1d1a      	adds	r2, r3, #4
 8009a4e:	693b      	ldr	r3, [r7, #16]
 8009a50:	609a      	str	r2, [r3, #8]
 8009a52:	4b1c      	ldr	r3, [pc, #112]	@ (8009ac4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a1d      	ldr	r2, [pc, #116]	@ (8009acc <prvAddCurrentTaskToDelayedList+0xf0>)
 8009a58:	615a      	str	r2, [r3, #20]
 8009a5a:	4b1c      	ldr	r3, [pc, #112]	@ (8009acc <prvAddCurrentTaskToDelayedList+0xf0>)
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	4a1a      	ldr	r2, [pc, #104]	@ (8009acc <prvAddCurrentTaskToDelayedList+0xf0>)
 8009a62:	6013      	str	r3, [r2, #0]
 8009a64:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8009a66:	e026      	b.n	8009ab6 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8009a68:	697a      	ldr	r2, [r7, #20]
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	4413      	add	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a70:	4b14      	ldr	r3, [pc, #80]	@ (8009ac4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68fa      	ldr	r2, [r7, #12]
 8009a76:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8009a78:	68fa      	ldr	r2, [r7, #12]
 8009a7a:	697b      	ldr	r3, [r7, #20]
 8009a7c:	429a      	cmp	r2, r3
 8009a7e:	d209      	bcs.n	8009a94 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a80:	4b13      	ldr	r3, [pc, #76]	@ (8009ad0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	4b0f      	ldr	r3, [pc, #60]	@ (8009ac4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	3304      	adds	r3, #4
 8009a8a:	4619      	mov	r1, r3
 8009a8c:	4610      	mov	r0, r2
 8009a8e:	f7fe fa1a 	bl	8007ec6 <vListInsert>
}
 8009a92:	e010      	b.n	8009ab6 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a94:	4b0f      	ldr	r3, [pc, #60]	@ (8009ad4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	4b0a      	ldr	r3, [pc, #40]	@ (8009ac4 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	3304      	adds	r3, #4
 8009a9e:	4619      	mov	r1, r3
 8009aa0:	4610      	mov	r0, r2
 8009aa2:	f7fe fa10 	bl	8007ec6 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8009aa6:	4b0c      	ldr	r3, [pc, #48]	@ (8009ad8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8009aa8:	681b      	ldr	r3, [r3, #0]
 8009aaa:	68fa      	ldr	r2, [r7, #12]
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d202      	bcs.n	8009ab6 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8009ab0:	4a09      	ldr	r2, [pc, #36]	@ (8009ad8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	6013      	str	r3, [r2, #0]
}
 8009ab6:	bf00      	nop
 8009ab8:	3718      	adds	r7, #24
 8009aba:	46bd      	mov	sp, r7
 8009abc:	bd80      	pop	{r7, pc}
 8009abe:	bf00      	nop
 8009ac0:	200005dc 	.word	0x200005dc
 8009ac4:	20000500 	.word	0x20000500
 8009ac8:	200005e0 	.word	0x200005e0
 8009acc:	200005c4 	.word	0x200005c4
 8009ad0:	20000594 	.word	0x20000594
 8009ad4:	20000590 	.word	0x20000590
 8009ad8:	200005f8 	.word	0x200005f8

08009adc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8009adc:	b480      	push	{r7}
 8009ade:	b085      	sub	sp, #20
 8009ae0:	af00      	add	r7, sp, #0
 8009ae2:	60f8      	str	r0, [r7, #12]
 8009ae4:	60b9      	str	r1, [r7, #8]
 8009ae6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	3b04      	subs	r3, #4
 8009aec:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009af4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	3b04      	subs	r3, #4
 8009afa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	f023 0201 	bic.w	r2, r3, #1
 8009b02:	68fb      	ldr	r3, [r7, #12]
 8009b04:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	3b04      	subs	r3, #4
 8009b0a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8009b0c:	4a0c      	ldr	r2, [pc, #48]	@ (8009b40 <pxPortInitialiseStack+0x64>)
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	3b14      	subs	r3, #20
 8009b16:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8009b18:	687a      	ldr	r2, [r7, #4]
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	3b04      	subs	r3, #4
 8009b22:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	f06f 0202 	mvn.w	r2, #2
 8009b2a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	3b20      	subs	r3, #32
 8009b30:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8009b32:	68fb      	ldr	r3, [r7, #12]
}
 8009b34:	4618      	mov	r0, r3
 8009b36:	3714      	adds	r7, #20
 8009b38:	46bd      	mov	sp, r7
 8009b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b3e:	4770      	bx	lr
 8009b40:	08009b45 	.word	0x08009b45

08009b44 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009b44:	b480      	push	{r7}
 8009b46:	b085      	sub	sp, #20
 8009b48:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8009b4e:	4b13      	ldr	r3, [pc, #76]	@ (8009b9c <prvTaskExitError+0x58>)
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009b56:	d00b      	beq.n	8009b70 <prvTaskExitError+0x2c>
        __asm volatile
 8009b58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b5c:	f383 8811 	msr	BASEPRI, r3
 8009b60:	f3bf 8f6f 	isb	sy
 8009b64:	f3bf 8f4f 	dsb	sy
 8009b68:	60fb      	str	r3, [r7, #12]
    }
 8009b6a:	bf00      	nop
 8009b6c:	bf00      	nop
 8009b6e:	e7fd      	b.n	8009b6c <prvTaskExitError+0x28>
        __asm volatile
 8009b70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b74:	f383 8811 	msr	BASEPRI, r3
 8009b78:	f3bf 8f6f 	isb	sy
 8009b7c:	f3bf 8f4f 	dsb	sy
 8009b80:	60bb      	str	r3, [r7, #8]
    }
 8009b82:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8009b84:	bf00      	nop
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d0fc      	beq.n	8009b86 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8009b8c:	bf00      	nop
 8009b8e:	bf00      	nop
 8009b90:	3714      	adds	r7, #20
 8009b92:	46bd      	mov	sp, r7
 8009b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b98:	4770      	bx	lr
 8009b9a:	bf00      	nop
 8009b9c:	20000010 	.word	0x20000010

08009ba0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8009ba0:	4b07      	ldr	r3, [pc, #28]	@ (8009bc0 <pxCurrentTCBConst2>)
 8009ba2:	6819      	ldr	r1, [r3, #0]
 8009ba4:	6808      	ldr	r0, [r1, #0]
 8009ba6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009baa:	f380 8809 	msr	PSP, r0
 8009bae:	f3bf 8f6f 	isb	sy
 8009bb2:	f04f 0000 	mov.w	r0, #0
 8009bb6:	f380 8811 	msr	BASEPRI, r0
 8009bba:	4770      	bx	lr
 8009bbc:	f3af 8000 	nop.w

08009bc0 <pxCurrentTCBConst2>:
 8009bc0:	20000500 	.word	0x20000500
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8009bc4:	bf00      	nop
 8009bc6:	bf00      	nop

08009bc8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8009bc8:	4808      	ldr	r0, [pc, #32]	@ (8009bec <prvPortStartFirstTask+0x24>)
 8009bca:	6800      	ldr	r0, [r0, #0]
 8009bcc:	6800      	ldr	r0, [r0, #0]
 8009bce:	f380 8808 	msr	MSP, r0
 8009bd2:	f04f 0000 	mov.w	r0, #0
 8009bd6:	f380 8814 	msr	CONTROL, r0
 8009bda:	b662      	cpsie	i
 8009bdc:	b661      	cpsie	f
 8009bde:	f3bf 8f4f 	dsb	sy
 8009be2:	f3bf 8f6f 	isb	sy
 8009be6:	df00      	svc	0
 8009be8:	bf00      	nop
 8009bea:	0000      	.short	0x0000
 8009bec:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8009bf0:	bf00      	nop
 8009bf2:	bf00      	nop

08009bf4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009bf4:	b580      	push	{r7, lr}
 8009bf6:	b086      	sub	sp, #24
 8009bf8:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009bfa:	4b47      	ldr	r3, [pc, #284]	@ (8009d18 <xPortStartScheduler+0x124>)
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a47      	ldr	r2, [pc, #284]	@ (8009d1c <xPortStartScheduler+0x128>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d10b      	bne.n	8009c1c <xPortStartScheduler+0x28>
        __asm volatile
 8009c04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c08:	f383 8811 	msr	BASEPRI, r3
 8009c0c:	f3bf 8f6f 	isb	sy
 8009c10:	f3bf 8f4f 	dsb	sy
 8009c14:	613b      	str	r3, [r7, #16]
    }
 8009c16:	bf00      	nop
 8009c18:	bf00      	nop
 8009c1a:	e7fd      	b.n	8009c18 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009c1c:	4b3e      	ldr	r3, [pc, #248]	@ (8009d18 <xPortStartScheduler+0x124>)
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	4a3f      	ldr	r2, [pc, #252]	@ (8009d20 <xPortStartScheduler+0x12c>)
 8009c22:	4293      	cmp	r3, r2
 8009c24:	d10b      	bne.n	8009c3e <xPortStartScheduler+0x4a>
        __asm volatile
 8009c26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c2a:	f383 8811 	msr	BASEPRI, r3
 8009c2e:	f3bf 8f6f 	isb	sy
 8009c32:	f3bf 8f4f 	dsb	sy
 8009c36:	60fb      	str	r3, [r7, #12]
    }
 8009c38:	bf00      	nop
 8009c3a:	bf00      	nop
 8009c3c:	e7fd      	b.n	8009c3a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009c3e:	4b39      	ldr	r3, [pc, #228]	@ (8009d24 <xPortStartScheduler+0x130>)
 8009c40:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009c42:	697b      	ldr	r3, [r7, #20]
 8009c44:	781b      	ldrb	r3, [r3, #0]
 8009c46:	b2db      	uxtb	r3, r3
 8009c48:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009c4a:	697b      	ldr	r3, [r7, #20]
 8009c4c:	22ff      	movs	r2, #255	@ 0xff
 8009c4e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009c50:	697b      	ldr	r3, [r7, #20]
 8009c52:	781b      	ldrb	r3, [r3, #0]
 8009c54:	b2db      	uxtb	r3, r3
 8009c56:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009c58:	78fb      	ldrb	r3, [r7, #3]
 8009c5a:	b2db      	uxtb	r3, r3
 8009c5c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009c60:	b2da      	uxtb	r2, r3
 8009c62:	4b31      	ldr	r3, [pc, #196]	@ (8009d28 <xPortStartScheduler+0x134>)
 8009c64:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009c66:	4b31      	ldr	r3, [pc, #196]	@ (8009d2c <xPortStartScheduler+0x138>)
 8009c68:	2207      	movs	r2, #7
 8009c6a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c6c:	e009      	b.n	8009c82 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8009c6e:	4b2f      	ldr	r3, [pc, #188]	@ (8009d2c <xPortStartScheduler+0x138>)
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	3b01      	subs	r3, #1
 8009c74:	4a2d      	ldr	r2, [pc, #180]	@ (8009d2c <xPortStartScheduler+0x138>)
 8009c76:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009c78:	78fb      	ldrb	r3, [r7, #3]
 8009c7a:	b2db      	uxtb	r3, r3
 8009c7c:	005b      	lsls	r3, r3, #1
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009c82:	78fb      	ldrb	r3, [r7, #3]
 8009c84:	b2db      	uxtb	r3, r3
 8009c86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c8a:	2b80      	cmp	r3, #128	@ 0x80
 8009c8c:	d0ef      	beq.n	8009c6e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009c8e:	4b27      	ldr	r3, [pc, #156]	@ (8009d2c <xPortStartScheduler+0x138>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	f1c3 0307 	rsb	r3, r3, #7
 8009c96:	2b04      	cmp	r3, #4
 8009c98:	d00b      	beq.n	8009cb2 <xPortStartScheduler+0xbe>
        __asm volatile
 8009c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c9e:	f383 8811 	msr	BASEPRI, r3
 8009ca2:	f3bf 8f6f 	isb	sy
 8009ca6:	f3bf 8f4f 	dsb	sy
 8009caa:	60bb      	str	r3, [r7, #8]
    }
 8009cac:	bf00      	nop
 8009cae:	bf00      	nop
 8009cb0:	e7fd      	b.n	8009cae <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009cb2:	4b1e      	ldr	r3, [pc, #120]	@ (8009d2c <xPortStartScheduler+0x138>)
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	021b      	lsls	r3, r3, #8
 8009cb8:	4a1c      	ldr	r2, [pc, #112]	@ (8009d2c <xPortStartScheduler+0x138>)
 8009cba:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009cbc:	4b1b      	ldr	r3, [pc, #108]	@ (8009d2c <xPortStartScheduler+0x138>)
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009cc4:	4a19      	ldr	r2, [pc, #100]	@ (8009d2c <xPortStartScheduler+0x138>)
 8009cc6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	b2da      	uxtb	r2, r3
 8009ccc:	697b      	ldr	r3, [r7, #20]
 8009cce:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8009cd0:	4b17      	ldr	r3, [pc, #92]	@ (8009d30 <xPortStartScheduler+0x13c>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	4a16      	ldr	r2, [pc, #88]	@ (8009d30 <xPortStartScheduler+0x13c>)
 8009cd6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009cda:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8009cdc:	4b14      	ldr	r3, [pc, #80]	@ (8009d30 <xPortStartScheduler+0x13c>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a13      	ldr	r2, [pc, #76]	@ (8009d30 <xPortStartScheduler+0x13c>)
 8009ce2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009ce6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8009ce8:	f000 f8e0 	bl	8009eac <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8009cec:	4b11      	ldr	r3, [pc, #68]	@ (8009d34 <xPortStartScheduler+0x140>)
 8009cee:	2200      	movs	r2, #0
 8009cf0:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8009cf2:	f000 f8ff 	bl	8009ef4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009cf6:	4b10      	ldr	r3, [pc, #64]	@ (8009d38 <xPortStartScheduler+0x144>)
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	4a0f      	ldr	r2, [pc, #60]	@ (8009d38 <xPortStartScheduler+0x144>)
 8009cfc:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009d00:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8009d02:	f7ff ff61 	bl	8009bc8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8009d06:	f7ff f9a3 	bl	8009050 <vTaskSwitchContext>
    prvTaskExitError();
 8009d0a:	f7ff ff1b 	bl	8009b44 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3718      	adds	r7, #24
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}
 8009d18:	e000ed00 	.word	0xe000ed00
 8009d1c:	410fc271 	.word	0x410fc271
 8009d20:	410fc270 	.word	0x410fc270
 8009d24:	e000e400 	.word	0xe000e400
 8009d28:	20000604 	.word	0x20000604
 8009d2c:	20000608 	.word	0x20000608
 8009d30:	e000ed20 	.word	0xe000ed20
 8009d34:	20000010 	.word	0x20000010
 8009d38:	e000ef34 	.word	0xe000ef34

08009d3c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009d3c:	b480      	push	{r7}
 8009d3e:	b083      	sub	sp, #12
 8009d40:	af00      	add	r7, sp, #0
        __asm volatile
 8009d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d46:	f383 8811 	msr	BASEPRI, r3
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	607b      	str	r3, [r7, #4]
    }
 8009d54:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8009d56:	4b10      	ldr	r3, [pc, #64]	@ (8009d98 <vPortEnterCritical+0x5c>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	4a0e      	ldr	r2, [pc, #56]	@ (8009d98 <vPortEnterCritical+0x5c>)
 8009d5e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8009d60:	4b0d      	ldr	r3, [pc, #52]	@ (8009d98 <vPortEnterCritical+0x5c>)
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	2b01      	cmp	r3, #1
 8009d66:	d110      	bne.n	8009d8a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009d68:	4b0c      	ldr	r3, [pc, #48]	@ (8009d9c <vPortEnterCritical+0x60>)
 8009d6a:	681b      	ldr	r3, [r3, #0]
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00b      	beq.n	8009d8a <vPortEnterCritical+0x4e>
        __asm volatile
 8009d72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d76:	f383 8811 	msr	BASEPRI, r3
 8009d7a:	f3bf 8f6f 	isb	sy
 8009d7e:	f3bf 8f4f 	dsb	sy
 8009d82:	603b      	str	r3, [r7, #0]
    }
 8009d84:	bf00      	nop
 8009d86:	bf00      	nop
 8009d88:	e7fd      	b.n	8009d86 <vPortEnterCritical+0x4a>
    }
}
 8009d8a:	bf00      	nop
 8009d8c:	370c      	adds	r7, #12
 8009d8e:	46bd      	mov	sp, r7
 8009d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d94:	4770      	bx	lr
 8009d96:	bf00      	nop
 8009d98:	20000010 	.word	0x20000010
 8009d9c:	e000ed04 	.word	0xe000ed04

08009da0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009da0:	b480      	push	{r7}
 8009da2:	b083      	sub	sp, #12
 8009da4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8009da6:	4b12      	ldr	r3, [pc, #72]	@ (8009df0 <vPortExitCritical+0x50>)
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d10b      	bne.n	8009dc6 <vPortExitCritical+0x26>
        __asm volatile
 8009dae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009db2:	f383 8811 	msr	BASEPRI, r3
 8009db6:	f3bf 8f6f 	isb	sy
 8009dba:	f3bf 8f4f 	dsb	sy
 8009dbe:	607b      	str	r3, [r7, #4]
    }
 8009dc0:	bf00      	nop
 8009dc2:	bf00      	nop
 8009dc4:	e7fd      	b.n	8009dc2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8009dc6:	4b0a      	ldr	r3, [pc, #40]	@ (8009df0 <vPortExitCritical+0x50>)
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	3b01      	subs	r3, #1
 8009dcc:	4a08      	ldr	r2, [pc, #32]	@ (8009df0 <vPortExitCritical+0x50>)
 8009dce:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8009dd0:	4b07      	ldr	r3, [pc, #28]	@ (8009df0 <vPortExitCritical+0x50>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d105      	bne.n	8009de4 <vPortExitCritical+0x44>
 8009dd8:	2300      	movs	r3, #0
 8009dda:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8009ddc:	683b      	ldr	r3, [r7, #0]
 8009dde:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8009de2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8009de4:	bf00      	nop
 8009de6:	370c      	adds	r7, #12
 8009de8:	46bd      	mov	sp, r7
 8009dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dee:	4770      	bx	lr
 8009df0:	20000010 	.word	0x20000010
	...

08009e00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8009e00:	f3ef 8009 	mrs	r0, PSP
 8009e04:	f3bf 8f6f 	isb	sy
 8009e08:	4b15      	ldr	r3, [pc, #84]	@ (8009e60 <pxCurrentTCBConst>)
 8009e0a:	681a      	ldr	r2, [r3, #0]
 8009e0c:	f01e 0f10 	tst.w	lr, #16
 8009e10:	bf08      	it	eq
 8009e12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009e16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e1a:	6010      	str	r0, [r2, #0]
 8009e1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009e20:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009e24:	f380 8811 	msr	BASEPRI, r0
 8009e28:	f3bf 8f4f 	dsb	sy
 8009e2c:	f3bf 8f6f 	isb	sy
 8009e30:	f7ff f90e 	bl	8009050 <vTaskSwitchContext>
 8009e34:	f04f 0000 	mov.w	r0, #0
 8009e38:	f380 8811 	msr	BASEPRI, r0
 8009e3c:	bc09      	pop	{r0, r3}
 8009e3e:	6819      	ldr	r1, [r3, #0]
 8009e40:	6808      	ldr	r0, [r1, #0]
 8009e42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e46:	f01e 0f10 	tst.w	lr, #16
 8009e4a:	bf08      	it	eq
 8009e4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009e50:	f380 8809 	msr	PSP, r0
 8009e54:	f3bf 8f6f 	isb	sy
 8009e58:	4770      	bx	lr
 8009e5a:	bf00      	nop
 8009e5c:	f3af 8000 	nop.w

08009e60 <pxCurrentTCBConst>:
 8009e60:	20000500 	.word	0x20000500
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8009e64:	bf00      	nop
 8009e66:	bf00      	nop

08009e68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009e68:	b580      	push	{r7, lr}
 8009e6a:	b082      	sub	sp, #8
 8009e6c:	af00      	add	r7, sp, #0
        __asm volatile
 8009e6e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e72:	f383 8811 	msr	BASEPRI, r3
 8009e76:	f3bf 8f6f 	isb	sy
 8009e7a:	f3bf 8f4f 	dsb	sy
 8009e7e:	607b      	str	r3, [r7, #4]
    }
 8009e80:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8009e82:	f7fe ffc9 	bl	8008e18 <xTaskIncrementTick>
 8009e86:	4603      	mov	r3, r0
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d003      	beq.n	8009e94 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009e8c:	4b06      	ldr	r3, [pc, #24]	@ (8009ea8 <SysTick_Handler+0x40>)
 8009e8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e92:	601a      	str	r2, [r3, #0]
 8009e94:	2300      	movs	r3, #0
 8009e96:	603b      	str	r3, [r7, #0]
        __asm volatile
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	f383 8811 	msr	BASEPRI, r3
    }
 8009e9e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8009ea0:	bf00      	nop
 8009ea2:	3708      	adds	r7, #8
 8009ea4:	46bd      	mov	sp, r7
 8009ea6:	bd80      	pop	{r7, pc}
 8009ea8:	e000ed04 	.word	0xe000ed04

08009eac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8009eac:	b480      	push	{r7}
 8009eae:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009eb0:	4b0b      	ldr	r3, [pc, #44]	@ (8009ee0 <vPortSetupTimerInterrupt+0x34>)
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009eb6:	4b0b      	ldr	r3, [pc, #44]	@ (8009ee4 <vPortSetupTimerInterrupt+0x38>)
 8009eb8:	2200      	movs	r2, #0
 8009eba:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009ebc:	4b0a      	ldr	r3, [pc, #40]	@ (8009ee8 <vPortSetupTimerInterrupt+0x3c>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a0a      	ldr	r2, [pc, #40]	@ (8009eec <vPortSetupTimerInterrupt+0x40>)
 8009ec2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ec6:	099b      	lsrs	r3, r3, #6
 8009ec8:	4a09      	ldr	r2, [pc, #36]	@ (8009ef0 <vPortSetupTimerInterrupt+0x44>)
 8009eca:	3b01      	subs	r3, #1
 8009ecc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009ece:	4b04      	ldr	r3, [pc, #16]	@ (8009ee0 <vPortSetupTimerInterrupt+0x34>)
 8009ed0:	2207      	movs	r2, #7
 8009ed2:	601a      	str	r2, [r3, #0]
}
 8009ed4:	bf00      	nop
 8009ed6:	46bd      	mov	sp, r7
 8009ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009edc:	4770      	bx	lr
 8009ede:	bf00      	nop
 8009ee0:	e000e010 	.word	0xe000e010
 8009ee4:	e000e018 	.word	0xe000e018
 8009ee8:	20000000 	.word	0x20000000
 8009eec:	10624dd3 	.word	0x10624dd3
 8009ef0:	e000e014 	.word	0xe000e014

08009ef4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8009ef4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009f04 <vPortEnableVFP+0x10>
 8009ef8:	6801      	ldr	r1, [r0, #0]
 8009efa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009efe:	6001      	str	r1, [r0, #0]
 8009f00:	4770      	bx	lr
 8009f02:	0000      	.short	0x0000
 8009f04:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8009f08:	bf00      	nop
 8009f0a:	bf00      	nop

08009f0c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8009f0c:	b480      	push	{r7}
 8009f0e:	b085      	sub	sp, #20
 8009f10:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8009f12:	f3ef 8305 	mrs	r3, IPSR
 8009f16:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009f18:	68fb      	ldr	r3, [r7, #12]
 8009f1a:	2b0f      	cmp	r3, #15
 8009f1c:	d915      	bls.n	8009f4a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009f1e:	4a18      	ldr	r2, [pc, #96]	@ (8009f80 <vPortValidateInterruptPriority+0x74>)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	4413      	add	r3, r2
 8009f24:	781b      	ldrb	r3, [r3, #0]
 8009f26:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009f28:	4b16      	ldr	r3, [pc, #88]	@ (8009f84 <vPortValidateInterruptPriority+0x78>)
 8009f2a:	781b      	ldrb	r3, [r3, #0]
 8009f2c:	7afa      	ldrb	r2, [r7, #11]
 8009f2e:	429a      	cmp	r2, r3
 8009f30:	d20b      	bcs.n	8009f4a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8009f32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f36:	f383 8811 	msr	BASEPRI, r3
 8009f3a:	f3bf 8f6f 	isb	sy
 8009f3e:	f3bf 8f4f 	dsb	sy
 8009f42:	607b      	str	r3, [r7, #4]
    }
 8009f44:	bf00      	nop
 8009f46:	bf00      	nop
 8009f48:	e7fd      	b.n	8009f46 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8009f88 <vPortValidateInterruptPriority+0x7c>)
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009f52:	4b0e      	ldr	r3, [pc, #56]	@ (8009f8c <vPortValidateInterruptPriority+0x80>)
 8009f54:	681b      	ldr	r3, [r3, #0]
 8009f56:	429a      	cmp	r2, r3
 8009f58:	d90b      	bls.n	8009f72 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8009f5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f5e:	f383 8811 	msr	BASEPRI, r3
 8009f62:	f3bf 8f6f 	isb	sy
 8009f66:	f3bf 8f4f 	dsb	sy
 8009f6a:	603b      	str	r3, [r7, #0]
    }
 8009f6c:	bf00      	nop
 8009f6e:	bf00      	nop
 8009f70:	e7fd      	b.n	8009f6e <vPortValidateInterruptPriority+0x62>
    }
 8009f72:	bf00      	nop
 8009f74:	3714      	adds	r7, #20
 8009f76:	46bd      	mov	sp, r7
 8009f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7c:	4770      	bx	lr
 8009f7e:	bf00      	nop
 8009f80:	e000e3f0 	.word	0xe000e3f0
 8009f84:	20000604 	.word	0x20000604
 8009f88:	e000ed0c 	.word	0xe000ed0c
 8009f8c:	20000608 	.word	0x20000608

08009f90 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8009f90:	b580      	push	{r7, lr}
 8009f92:	b08a      	sub	sp, #40	@ 0x28
 8009f94:	af00      	add	r7, sp, #0
 8009f96:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8009f98:	2300      	movs	r3, #0
 8009f9a:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8009f9c:	f7fe fe1c 	bl	8008bd8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8009fa0:	4b54      	ldr	r3, [pc, #336]	@ (800a0f4 <pvPortMalloc+0x164>)
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d101      	bne.n	8009fac <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8009fa8:	f000 f90c 	bl	800a1c4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d012      	beq.n	8009fd8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8009fb2:	2208      	movs	r2, #8
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	f003 0307 	and.w	r3, r3, #7
 8009fba:	1ad3      	subs	r3, r2, r3
 8009fbc:	3308      	adds	r3, #8
 8009fbe:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8009fc0:	69bb      	ldr	r3, [r7, #24]
 8009fc2:	43db      	mvns	r3, r3
 8009fc4:	687a      	ldr	r2, [r7, #4]
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d804      	bhi.n	8009fd4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8009fca:	687a      	ldr	r2, [r7, #4]
 8009fcc:	69bb      	ldr	r3, [r7, #24]
 8009fce:	4413      	add	r3, r2
 8009fd0:	607b      	str	r3, [r7, #4]
 8009fd2:	e001      	b.n	8009fd8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	db71      	blt.n	800a0c2 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d06e      	beq.n	800a0c2 <pvPortMalloc+0x132>
 8009fe4:	4b44      	ldr	r3, [pc, #272]	@ (800a0f8 <pvPortMalloc+0x168>)
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	687a      	ldr	r2, [r7, #4]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d869      	bhi.n	800a0c2 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8009fee:	4b43      	ldr	r3, [pc, #268]	@ (800a0fc <pvPortMalloc+0x16c>)
 8009ff0:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8009ff2:	4b42      	ldr	r3, [pc, #264]	@ (800a0fc <pvPortMalloc+0x16c>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009ff8:	e004      	b.n	800a004 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8009ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ffc:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8009ffe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a004:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	687a      	ldr	r2, [r7, #4]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	d903      	bls.n	800a016 <pvPortMalloc+0x86>
 800a00e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2b00      	cmp	r3, #0
 800a014:	d1f1      	bne.n	8009ffa <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 800a016:	4b37      	ldr	r3, [pc, #220]	@ (800a0f4 <pvPortMalloc+0x164>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d050      	beq.n	800a0c2 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a020:	6a3b      	ldr	r3, [r7, #32]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	2208      	movs	r2, #8
 800a026:	4413      	add	r3, r2
 800a028:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02c:	681a      	ldr	r2, [r3, #0]
 800a02e:	6a3b      	ldr	r3, [r7, #32]
 800a030:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a034:	685a      	ldr	r2, [r3, #4]
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	1ad2      	subs	r2, r2, r3
 800a03a:	2308      	movs	r3, #8
 800a03c:	005b      	lsls	r3, r3, #1
 800a03e:	429a      	cmp	r2, r3
 800a040:	d920      	bls.n	800a084 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a042:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	4413      	add	r3, r2
 800a048:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a04a:	697b      	ldr	r3, [r7, #20]
 800a04c:	f003 0307 	and.w	r3, r3, #7
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00b      	beq.n	800a06c <pvPortMalloc+0xdc>
        __asm volatile
 800a054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a058:	f383 8811 	msr	BASEPRI, r3
 800a05c:	f3bf 8f6f 	isb	sy
 800a060:	f3bf 8f4f 	dsb	sy
 800a064:	613b      	str	r3, [r7, #16]
    }
 800a066:	bf00      	nop
 800a068:	bf00      	nop
 800a06a:	e7fd      	b.n	800a068 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a06c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a06e:	685a      	ldr	r2, [r3, #4]
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	1ad2      	subs	r2, r2, r3
 800a074:	697b      	ldr	r3, [r7, #20]
 800a076:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 800a078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a07a:	687a      	ldr	r2, [r7, #4]
 800a07c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a07e:	6978      	ldr	r0, [r7, #20]
 800a080:	f000 f8fc 	bl	800a27c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a084:	4b1c      	ldr	r3, [pc, #112]	@ (800a0f8 <pvPortMalloc+0x168>)
 800a086:	681a      	ldr	r2, [r3, #0]
 800a088:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	1ad3      	subs	r3, r2, r3
 800a08e:	4a1a      	ldr	r2, [pc, #104]	@ (800a0f8 <pvPortMalloc+0x168>)
 800a090:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a092:	4b19      	ldr	r3, [pc, #100]	@ (800a0f8 <pvPortMalloc+0x168>)
 800a094:	681a      	ldr	r2, [r3, #0]
 800a096:	4b1a      	ldr	r3, [pc, #104]	@ (800a100 <pvPortMalloc+0x170>)
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	429a      	cmp	r2, r3
 800a09c:	d203      	bcs.n	800a0a6 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a09e:	4b16      	ldr	r3, [pc, #88]	@ (800a0f8 <pvPortMalloc+0x168>)
 800a0a0:	681b      	ldr	r3, [r3, #0]
 800a0a2:	4a17      	ldr	r2, [pc, #92]	@ (800a100 <pvPortMalloc+0x170>)
 800a0a4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800a0a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0a8:	685b      	ldr	r3, [r3, #4]
 800a0aa:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 800a0ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 800a0b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800a0b8:	4b12      	ldr	r3, [pc, #72]	@ (800a104 <pvPortMalloc+0x174>)
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	3301      	adds	r3, #1
 800a0be:	4a11      	ldr	r2, [pc, #68]	@ (800a104 <pvPortMalloc+0x174>)
 800a0c0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 800a0c2:	f7fe fd97 	bl	8008bf4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800a0c6:	69fb      	ldr	r3, [r7, #28]
 800a0c8:	f003 0307 	and.w	r3, r3, #7
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d00b      	beq.n	800a0e8 <pvPortMalloc+0x158>
        __asm volatile
 800a0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0d4:	f383 8811 	msr	BASEPRI, r3
 800a0d8:	f3bf 8f6f 	isb	sy
 800a0dc:	f3bf 8f4f 	dsb	sy
 800a0e0:	60fb      	str	r3, [r7, #12]
    }
 800a0e2:	bf00      	nop
 800a0e4:	bf00      	nop
 800a0e6:	e7fd      	b.n	800a0e4 <pvPortMalloc+0x154>
    return pvReturn;
 800a0e8:	69fb      	ldr	r3, [r7, #28]
}
 800a0ea:	4618      	mov	r0, r3
 800a0ec:	3728      	adds	r7, #40	@ 0x28
 800a0ee:	46bd      	mov	sp, r7
 800a0f0:	bd80      	pop	{r7, pc}
 800a0f2:	bf00      	nop
 800a0f4:	20013214 	.word	0x20013214
 800a0f8:	20013218 	.word	0x20013218
 800a0fc:	2001320c 	.word	0x2001320c
 800a100:	2001321c 	.word	0x2001321c
 800a104:	20013220 	.word	0x20013220

0800a108 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800a108:	b580      	push	{r7, lr}
 800a10a:	b086      	sub	sp, #24
 800a10c:	af00      	add	r7, sp, #0
 800a10e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	2b00      	cmp	r3, #0
 800a118:	d04b      	beq.n	800a1b2 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800a11a:	2308      	movs	r3, #8
 800a11c:	425b      	negs	r3, r3
 800a11e:	697a      	ldr	r2, [r7, #20]
 800a120:	4413      	add	r3, r2
 800a122:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800a128:	693b      	ldr	r3, [r7, #16]
 800a12a:	685b      	ldr	r3, [r3, #4]
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	db0b      	blt.n	800a148 <vPortFree+0x40>
        __asm volatile
 800a130:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a134:	f383 8811 	msr	BASEPRI, r3
 800a138:	f3bf 8f6f 	isb	sy
 800a13c:	f3bf 8f4f 	dsb	sy
 800a140:	60fb      	str	r3, [r7, #12]
    }
 800a142:	bf00      	nop
 800a144:	bf00      	nop
 800a146:	e7fd      	b.n	800a144 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800a148:	693b      	ldr	r3, [r7, #16]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d00b      	beq.n	800a168 <vPortFree+0x60>
        __asm volatile
 800a150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a154:	f383 8811 	msr	BASEPRI, r3
 800a158:	f3bf 8f6f 	isb	sy
 800a15c:	f3bf 8f4f 	dsb	sy
 800a160:	60bb      	str	r3, [r7, #8]
    }
 800a162:	bf00      	nop
 800a164:	bf00      	nop
 800a166:	e7fd      	b.n	800a164 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 800a168:	693b      	ldr	r3, [r7, #16]
 800a16a:	685b      	ldr	r3, [r3, #4]
 800a16c:	0fdb      	lsrs	r3, r3, #31
 800a16e:	f003 0301 	and.w	r3, r3, #1
 800a172:	b2db      	uxtb	r3, r3
 800a174:	2b00      	cmp	r3, #0
 800a176:	d01c      	beq.n	800a1b2 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 800a178:	693b      	ldr	r3, [r7, #16]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d118      	bne.n	800a1b2 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 800a180:	693b      	ldr	r3, [r7, #16]
 800a182:	685b      	ldr	r3, [r3, #4]
 800a184:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800a188:	693b      	ldr	r3, [r7, #16]
 800a18a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 800a18c:	f7fe fd24 	bl	8008bd8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 800a190:	693b      	ldr	r3, [r7, #16]
 800a192:	685a      	ldr	r2, [r3, #4]
 800a194:	4b09      	ldr	r3, [pc, #36]	@ (800a1bc <vPortFree+0xb4>)
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	4413      	add	r3, r2
 800a19a:	4a08      	ldr	r2, [pc, #32]	@ (800a1bc <vPortFree+0xb4>)
 800a19c:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800a19e:	6938      	ldr	r0, [r7, #16]
 800a1a0:	f000 f86c 	bl	800a27c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800a1a4:	4b06      	ldr	r3, [pc, #24]	@ (800a1c0 <vPortFree+0xb8>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	3301      	adds	r3, #1
 800a1aa:	4a05      	ldr	r2, [pc, #20]	@ (800a1c0 <vPortFree+0xb8>)
 800a1ac:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 800a1ae:	f7fe fd21 	bl	8008bf4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800a1b2:	bf00      	nop
 800a1b4:	3718      	adds	r7, #24
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	20013218 	.word	0x20013218
 800a1c0:	20013224 	.word	0x20013224

0800a1c4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 800a1c4:	b480      	push	{r7}
 800a1c6:	b085      	sub	sp, #20
 800a1c8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800a1ca:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800a1ce:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 800a1d0:	4b25      	ldr	r3, [pc, #148]	@ (800a268 <prvHeapInit+0xa4>)
 800a1d2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	f003 0307 	and.w	r3, r3, #7
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d00c      	beq.n	800a1f8 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	3307      	adds	r3, #7
 800a1e2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	f023 0307 	bic.w	r3, r3, #7
 800a1ea:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800a1ec:	68ba      	ldr	r2, [r7, #8]
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	1ad3      	subs	r3, r2, r3
 800a1f2:	4a1d      	ldr	r2, [pc, #116]	@ (800a268 <prvHeapInit+0xa4>)
 800a1f4:	4413      	add	r3, r2
 800a1f6:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a1fc:	4a1b      	ldr	r2, [pc, #108]	@ (800a26c <prvHeapInit+0xa8>)
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800a202:	4b1a      	ldr	r3, [pc, #104]	@ (800a26c <prvHeapInit+0xa8>)
 800a204:	2200      	movs	r2, #0
 800a206:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	68ba      	ldr	r2, [r7, #8]
 800a20c:	4413      	add	r3, r2
 800a20e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800a210:	2208      	movs	r2, #8
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	1a9b      	subs	r3, r3, r2
 800a216:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800a218:	68fb      	ldr	r3, [r7, #12]
 800a21a:	f023 0307 	bic.w	r3, r3, #7
 800a21e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800a220:	68fb      	ldr	r3, [r7, #12]
 800a222:	4a13      	ldr	r2, [pc, #76]	@ (800a270 <prvHeapInit+0xac>)
 800a224:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800a226:	4b12      	ldr	r3, [pc, #72]	@ (800a270 <prvHeapInit+0xac>)
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	2200      	movs	r2, #0
 800a22c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800a22e:	4b10      	ldr	r3, [pc, #64]	@ (800a270 <prvHeapInit+0xac>)
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	2200      	movs	r2, #0
 800a234:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800a23a:	683b      	ldr	r3, [r7, #0]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	1ad2      	subs	r2, r2, r3
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a244:	4b0a      	ldr	r3, [pc, #40]	@ (800a270 <prvHeapInit+0xac>)
 800a246:	681a      	ldr	r2, [r3, #0]
 800a248:	683b      	ldr	r3, [r7, #0]
 800a24a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a24c:	683b      	ldr	r3, [r7, #0]
 800a24e:	685b      	ldr	r3, [r3, #4]
 800a250:	4a08      	ldr	r2, [pc, #32]	@ (800a274 <prvHeapInit+0xb0>)
 800a252:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	4a07      	ldr	r2, [pc, #28]	@ (800a278 <prvHeapInit+0xb4>)
 800a25a:	6013      	str	r3, [r2, #0]
}
 800a25c:	bf00      	nop
 800a25e:	3714      	adds	r7, #20
 800a260:	46bd      	mov	sp, r7
 800a262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a266:	4770      	bx	lr
 800a268:	2000060c 	.word	0x2000060c
 800a26c:	2001320c 	.word	0x2001320c
 800a270:	20013214 	.word	0x20013214
 800a274:	2001321c 	.word	0x2001321c
 800a278:	20013218 	.word	0x20013218

0800a27c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800a27c:	b480      	push	{r7}
 800a27e:	b085      	sub	sp, #20
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a284:	4b28      	ldr	r3, [pc, #160]	@ (800a328 <prvInsertBlockIntoFreeList+0xac>)
 800a286:	60fb      	str	r3, [r7, #12]
 800a288:	e002      	b.n	800a290 <prvInsertBlockIntoFreeList+0x14>
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	681b      	ldr	r3, [r3, #0]
 800a28e:	60fb      	str	r3, [r7, #12]
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	687a      	ldr	r2, [r7, #4]
 800a296:	429a      	cmp	r2, r3
 800a298:	d8f7      	bhi.n	800a28a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	685b      	ldr	r3, [r3, #4]
 800a2a2:	68ba      	ldr	r2, [r7, #8]
 800a2a4:	4413      	add	r3, r2
 800a2a6:	687a      	ldr	r2, [r7, #4]
 800a2a8:	429a      	cmp	r2, r3
 800a2aa:	d108      	bne.n	800a2be <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	685a      	ldr	r2, [r3, #4]
 800a2b0:	687b      	ldr	r3, [r7, #4]
 800a2b2:	685b      	ldr	r3, [r3, #4]
 800a2b4:	441a      	add	r2, r3
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	685b      	ldr	r3, [r3, #4]
 800a2c6:	68ba      	ldr	r2, [r7, #8]
 800a2c8:	441a      	add	r2, r3
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	429a      	cmp	r2, r3
 800a2d0:	d118      	bne.n	800a304 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800a2d2:	68fb      	ldr	r3, [r7, #12]
 800a2d4:	681a      	ldr	r2, [r3, #0]
 800a2d6:	4b15      	ldr	r3, [pc, #84]	@ (800a32c <prvInsertBlockIntoFreeList+0xb0>)
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	429a      	cmp	r2, r3
 800a2dc:	d00d      	beq.n	800a2fa <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	685a      	ldr	r2, [r3, #4]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	685b      	ldr	r3, [r3, #4]
 800a2e8:	441a      	add	r2, r3
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	601a      	str	r2, [r3, #0]
 800a2f8:	e008      	b.n	800a30c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a2fa:	4b0c      	ldr	r3, [pc, #48]	@ (800a32c <prvInsertBlockIntoFreeList+0xb0>)
 800a2fc:	681a      	ldr	r2, [r3, #0]
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	601a      	str	r2, [r3, #0]
 800a302:	e003      	b.n	800a30c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a304:	68fb      	ldr	r3, [r7, #12]
 800a306:	681a      	ldr	r2, [r3, #0]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800a30c:	68fa      	ldr	r2, [r7, #12]
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	429a      	cmp	r2, r3
 800a312:	d002      	beq.n	800a31a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	687a      	ldr	r2, [r7, #4]
 800a318:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a31a:	bf00      	nop
 800a31c:	3714      	adds	r7, #20
 800a31e:	46bd      	mov	sp, r7
 800a320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a324:	4770      	bx	lr
 800a326:	bf00      	nop
 800a328:	2001320c 	.word	0x2001320c
 800a32c:	20013214 	.word	0x20013214

0800a330 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800a330:	b580      	push	{r7, lr}
 800a332:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800a334:	4803      	ldr	r0, [pc, #12]	@ (800a344 <_cbSendSystemDesc+0x14>)
 800a336:	f001 fae5 	bl	800b904 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800a33a:	4803      	ldr	r0, [pc, #12]	@ (800a348 <_cbSendSystemDesc+0x18>)
 800a33c:	f001 fae2 	bl	800b904 <SEGGER_SYSVIEW_SendSysDesc>
}
 800a340:	bf00      	nop
 800a342:	bd80      	pop	{r7, pc}
 800a344:	0800fec0 	.word	0x0800fec0
 800a348:	0800fef4 	.word	0x0800fef4

0800a34c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800a34c:	b580      	push	{r7, lr}
 800a34e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800a350:	4b06      	ldr	r3, [pc, #24]	@ (800a36c <SEGGER_SYSVIEW_Conf+0x20>)
 800a352:	6818      	ldr	r0, [r3, #0]
 800a354:	4b05      	ldr	r3, [pc, #20]	@ (800a36c <SEGGER_SYSVIEW_Conf+0x20>)
 800a356:	6819      	ldr	r1, [r3, #0]
 800a358:	4b05      	ldr	r3, [pc, #20]	@ (800a370 <SEGGER_SYSVIEW_Conf+0x24>)
 800a35a:	4a06      	ldr	r2, [pc, #24]	@ (800a374 <SEGGER_SYSVIEW_Conf+0x28>)
 800a35c:	f000 ff58 	bl	800b210 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800a360:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800a364:	f000 ff98 	bl	800b298 <SEGGER_SYSVIEW_SetRAMBase>
}
 800a368:	bf00      	nop
 800a36a:	bd80      	pop	{r7, pc}
 800a36c:	20000000 	.word	0x20000000
 800a370:	0800a331 	.word	0x0800a331
 800a374:	0800ff98 	.word	0x0800ff98

0800a378 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800a378:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a37a:	b085      	sub	sp, #20
 800a37c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800a37e:	2300      	movs	r3, #0
 800a380:	607b      	str	r3, [r7, #4]
 800a382:	e033      	b.n	800a3ec <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800a384:	491e      	ldr	r1, [pc, #120]	@ (800a400 <_cbSendTaskList+0x88>)
 800a386:	687a      	ldr	r2, [r7, #4]
 800a388:	4613      	mov	r3, r2
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	4413      	add	r3, r2
 800a38e:	009b      	lsls	r3, r3, #2
 800a390:	440b      	add	r3, r1
 800a392:	6818      	ldr	r0, [r3, #0]
 800a394:	491a      	ldr	r1, [pc, #104]	@ (800a400 <_cbSendTaskList+0x88>)
 800a396:	687a      	ldr	r2, [r7, #4]
 800a398:	4613      	mov	r3, r2
 800a39a:	009b      	lsls	r3, r3, #2
 800a39c:	4413      	add	r3, r2
 800a39e:	009b      	lsls	r3, r3, #2
 800a3a0:	440b      	add	r3, r1
 800a3a2:	3304      	adds	r3, #4
 800a3a4:	6819      	ldr	r1, [r3, #0]
 800a3a6:	4c16      	ldr	r4, [pc, #88]	@ (800a400 <_cbSendTaskList+0x88>)
 800a3a8:	687a      	ldr	r2, [r7, #4]
 800a3aa:	4613      	mov	r3, r2
 800a3ac:	009b      	lsls	r3, r3, #2
 800a3ae:	4413      	add	r3, r2
 800a3b0:	009b      	lsls	r3, r3, #2
 800a3b2:	4423      	add	r3, r4
 800a3b4:	3308      	adds	r3, #8
 800a3b6:	681c      	ldr	r4, [r3, #0]
 800a3b8:	4d11      	ldr	r5, [pc, #68]	@ (800a400 <_cbSendTaskList+0x88>)
 800a3ba:	687a      	ldr	r2, [r7, #4]
 800a3bc:	4613      	mov	r3, r2
 800a3be:	009b      	lsls	r3, r3, #2
 800a3c0:	4413      	add	r3, r2
 800a3c2:	009b      	lsls	r3, r3, #2
 800a3c4:	442b      	add	r3, r5
 800a3c6:	330c      	adds	r3, #12
 800a3c8:	681d      	ldr	r5, [r3, #0]
 800a3ca:	4e0d      	ldr	r6, [pc, #52]	@ (800a400 <_cbSendTaskList+0x88>)
 800a3cc:	687a      	ldr	r2, [r7, #4]
 800a3ce:	4613      	mov	r3, r2
 800a3d0:	009b      	lsls	r3, r3, #2
 800a3d2:	4413      	add	r3, r2
 800a3d4:	009b      	lsls	r3, r3, #2
 800a3d6:	4433      	add	r3, r6
 800a3d8:	3310      	adds	r3, #16
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	9300      	str	r3, [sp, #0]
 800a3de:	462b      	mov	r3, r5
 800a3e0:	4622      	mov	r2, r4
 800a3e2:	f000 f8bd 	bl	800a560 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	3301      	adds	r3, #1
 800a3ea:	607b      	str	r3, [r7, #4]
 800a3ec:	4b05      	ldr	r3, [pc, #20]	@ (800a404 <_cbSendTaskList+0x8c>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	687a      	ldr	r2, [r7, #4]
 800a3f2:	429a      	cmp	r2, r3
 800a3f4:	d3c6      	bcc.n	800a384 <_cbSendTaskList+0xc>
  }
}
 800a3f6:	bf00      	nop
 800a3f8:	bf00      	nop
 800a3fa:	370c      	adds	r7, #12
 800a3fc:	46bd      	mov	sp, r7
 800a3fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a400:	20013228 	.word	0x20013228
 800a404:	200132c8 	.word	0x200132c8

0800a408 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800a408:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a40c:	b082      	sub	sp, #8
 800a40e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800a410:	f7fe fcf0 	bl	8008df4 <xTaskGetTickCountFromISR>
 800a414:	4603      	mov	r3, r0
 800a416:	2200      	movs	r2, #0
 800a418:	469a      	mov	sl, r3
 800a41a:	4693      	mov	fp, r2
 800a41c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800a420:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a424:	4602      	mov	r2, r0
 800a426:	460b      	mov	r3, r1
 800a428:	f04f 0a00 	mov.w	sl, #0
 800a42c:	f04f 0b00 	mov.w	fp, #0
 800a430:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800a434:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800a438:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800a43c:	4652      	mov	r2, sl
 800a43e:	465b      	mov	r3, fp
 800a440:	1a14      	subs	r4, r2, r0
 800a442:	eb63 0501 	sbc.w	r5, r3, r1
 800a446:	f04f 0200 	mov.w	r2, #0
 800a44a:	f04f 0300 	mov.w	r3, #0
 800a44e:	00ab      	lsls	r3, r5, #2
 800a450:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800a454:	00a2      	lsls	r2, r4, #2
 800a456:	4614      	mov	r4, r2
 800a458:	461d      	mov	r5, r3
 800a45a:	eb14 0800 	adds.w	r8, r4, r0
 800a45e:	eb45 0901 	adc.w	r9, r5, r1
 800a462:	f04f 0200 	mov.w	r2, #0
 800a466:	f04f 0300 	mov.w	r3, #0
 800a46a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a46e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a472:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a476:	4690      	mov	r8, r2
 800a478:	4699      	mov	r9, r3
 800a47a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800a47e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800a482:	4610      	mov	r0, r2
 800a484:	4619      	mov	r1, r3
 800a486:	3708      	adds	r7, #8
 800a488:	46bd      	mov	sp, r7
 800a48a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800a490 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800a490:	b580      	push	{r7, lr}
 800a492:	b086      	sub	sp, #24
 800a494:	af02      	add	r7, sp, #8
 800a496:	60f8      	str	r0, [r7, #12]
 800a498:	60b9      	str	r1, [r7, #8]
 800a49a:	607a      	str	r2, [r7, #4]
 800a49c:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800a49e:	2205      	movs	r2, #5
 800a4a0:	492b      	ldr	r1, [pc, #172]	@ (800a550 <SYSVIEW_AddTask+0xc0>)
 800a4a2:	68b8      	ldr	r0, [r7, #8]
 800a4a4:	f002 fa5d 	bl	800c962 <memcmp>
 800a4a8:	4603      	mov	r3, r0
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d04b      	beq.n	800a546 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800a4ae:	4b29      	ldr	r3, [pc, #164]	@ (800a554 <SYSVIEW_AddTask+0xc4>)
 800a4b0:	681b      	ldr	r3, [r3, #0]
 800a4b2:	2b07      	cmp	r3, #7
 800a4b4:	d903      	bls.n	800a4be <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800a4b6:	4828      	ldr	r0, [pc, #160]	@ (800a558 <SYSVIEW_AddTask+0xc8>)
 800a4b8:	f001 fc56 	bl	800bd68 <SEGGER_SYSVIEW_Warn>
    return;
 800a4bc:	e044      	b.n	800a548 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800a4be:	4b25      	ldr	r3, [pc, #148]	@ (800a554 <SYSVIEW_AddTask+0xc4>)
 800a4c0:	681a      	ldr	r2, [r3, #0]
 800a4c2:	4926      	ldr	r1, [pc, #152]	@ (800a55c <SYSVIEW_AddTask+0xcc>)
 800a4c4:	4613      	mov	r3, r2
 800a4c6:	009b      	lsls	r3, r3, #2
 800a4c8:	4413      	add	r3, r2
 800a4ca:	009b      	lsls	r3, r3, #2
 800a4cc:	440b      	add	r3, r1
 800a4ce:	68fa      	ldr	r2, [r7, #12]
 800a4d0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800a4d2:	4b20      	ldr	r3, [pc, #128]	@ (800a554 <SYSVIEW_AddTask+0xc4>)
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	4921      	ldr	r1, [pc, #132]	@ (800a55c <SYSVIEW_AddTask+0xcc>)
 800a4d8:	4613      	mov	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	4413      	add	r3, r2
 800a4de:	009b      	lsls	r3, r3, #2
 800a4e0:	440b      	add	r3, r1
 800a4e2:	3304      	adds	r3, #4
 800a4e4:	68ba      	ldr	r2, [r7, #8]
 800a4e6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800a4e8:	4b1a      	ldr	r3, [pc, #104]	@ (800a554 <SYSVIEW_AddTask+0xc4>)
 800a4ea:	681a      	ldr	r2, [r3, #0]
 800a4ec:	491b      	ldr	r1, [pc, #108]	@ (800a55c <SYSVIEW_AddTask+0xcc>)
 800a4ee:	4613      	mov	r3, r2
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	4413      	add	r3, r2
 800a4f4:	009b      	lsls	r3, r3, #2
 800a4f6:	440b      	add	r3, r1
 800a4f8:	3308      	adds	r3, #8
 800a4fa:	687a      	ldr	r2, [r7, #4]
 800a4fc:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800a4fe:	4b15      	ldr	r3, [pc, #84]	@ (800a554 <SYSVIEW_AddTask+0xc4>)
 800a500:	681a      	ldr	r2, [r3, #0]
 800a502:	4916      	ldr	r1, [pc, #88]	@ (800a55c <SYSVIEW_AddTask+0xcc>)
 800a504:	4613      	mov	r3, r2
 800a506:	009b      	lsls	r3, r3, #2
 800a508:	4413      	add	r3, r2
 800a50a:	009b      	lsls	r3, r3, #2
 800a50c:	440b      	add	r3, r1
 800a50e:	330c      	adds	r3, #12
 800a510:	683a      	ldr	r2, [r7, #0]
 800a512:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800a514:	4b0f      	ldr	r3, [pc, #60]	@ (800a554 <SYSVIEW_AddTask+0xc4>)
 800a516:	681a      	ldr	r2, [r3, #0]
 800a518:	4910      	ldr	r1, [pc, #64]	@ (800a55c <SYSVIEW_AddTask+0xcc>)
 800a51a:	4613      	mov	r3, r2
 800a51c:	009b      	lsls	r3, r3, #2
 800a51e:	4413      	add	r3, r2
 800a520:	009b      	lsls	r3, r3, #2
 800a522:	440b      	add	r3, r1
 800a524:	3310      	adds	r3, #16
 800a526:	69ba      	ldr	r2, [r7, #24]
 800a528:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800a52a:	4b0a      	ldr	r3, [pc, #40]	@ (800a554 <SYSVIEW_AddTask+0xc4>)
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	3301      	adds	r3, #1
 800a530:	4a08      	ldr	r2, [pc, #32]	@ (800a554 <SYSVIEW_AddTask+0xc4>)
 800a532:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800a534:	69bb      	ldr	r3, [r7, #24]
 800a536:	9300      	str	r3, [sp, #0]
 800a538:	683b      	ldr	r3, [r7, #0]
 800a53a:	687a      	ldr	r2, [r7, #4]
 800a53c:	68b9      	ldr	r1, [r7, #8]
 800a53e:	68f8      	ldr	r0, [r7, #12]
 800a540:	f000 f80e 	bl	800a560 <SYSVIEW_SendTaskInfo>
 800a544:	e000      	b.n	800a548 <SYSVIEW_AddTask+0xb8>
    return;
 800a546:	bf00      	nop

}
 800a548:	3710      	adds	r7, #16
 800a54a:	46bd      	mov	sp, r7
 800a54c:	bd80      	pop	{r7, pc}
 800a54e:	bf00      	nop
 800a550:	0800ff04 	.word	0x0800ff04
 800a554:	200132c8 	.word	0x200132c8
 800a558:	0800ff0c 	.word	0x0800ff0c
 800a55c:	20013228 	.word	0x20013228

0800a560 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800a560:	b580      	push	{r7, lr}
 800a562:	b08a      	sub	sp, #40	@ 0x28
 800a564:	af00      	add	r7, sp, #0
 800a566:	60f8      	str	r0, [r7, #12]
 800a568:	60b9      	str	r1, [r7, #8]
 800a56a:	607a      	str	r2, [r7, #4]
 800a56c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800a56e:	f107 0314 	add.w	r3, r7, #20
 800a572:	2214      	movs	r2, #20
 800a574:	2100      	movs	r1, #0
 800a576:	4618      	mov	r0, r3
 800a578:	f002 fa03 	bl	800c982 <memset>
  TaskInfo.TaskID     = TaskID;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800a588:	683b      	ldr	r3, [r7, #0]
 800a58a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800a58c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a58e:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800a590:	f107 0314 	add.w	r3, r7, #20
 800a594:	4618      	mov	r0, r3
 800a596:	f001 f8bd 	bl	800b714 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800a59a:	bf00      	nop
 800a59c:	3728      	adds	r7, #40	@ 0x28
 800a59e:	46bd      	mov	sp, r7
 800a5a0:	bd80      	pop	{r7, pc}
	...

0800a5a4 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b082      	sub	sp, #8
 800a5a8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800a5aa:	4b26      	ldr	r3, [pc, #152]	@ (800a644 <_DoInit+0xa0>)
 800a5ac:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800a5ae:	22a8      	movs	r2, #168	@ 0xa8
 800a5b0:	2100      	movs	r1, #0
 800a5b2:	6838      	ldr	r0, [r7, #0]
 800a5b4:	f002 f9e5 	bl	800c982 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	2203      	movs	r2, #3
 800a5bc:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800a5be:	683b      	ldr	r3, [r7, #0]
 800a5c0:	2203      	movs	r2, #3
 800a5c2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	4a20      	ldr	r2, [pc, #128]	@ (800a648 <_DoInit+0xa4>)
 800a5c8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800a5ca:	683b      	ldr	r3, [r7, #0]
 800a5cc:	4a1f      	ldr	r2, [pc, #124]	@ (800a64c <_DoInit+0xa8>)
 800a5ce:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a5d6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800a5de:	683b      	ldr	r3, [r7, #0]
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800a5e4:	683b      	ldr	r3, [r7, #0]
 800a5e6:	2200      	movs	r2, #0
 800a5e8:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	4a16      	ldr	r2, [pc, #88]	@ (800a648 <_DoInit+0xa4>)
 800a5ee:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800a5f0:	683b      	ldr	r3, [r7, #0]
 800a5f2:	4a17      	ldr	r2, [pc, #92]	@ (800a650 <_DoInit+0xac>)
 800a5f4:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800a5f6:	683b      	ldr	r3, [r7, #0]
 800a5f8:	2210      	movs	r2, #16
 800a5fa:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800a5fc:	683b      	ldr	r3, [r7, #0]
 800a5fe:	2200      	movs	r2, #0
 800a600:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800a602:	683b      	ldr	r3, [r7, #0]
 800a604:	2200      	movs	r2, #0
 800a606:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	2200      	movs	r2, #0
 800a60c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800a60e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800a612:	2300      	movs	r3, #0
 800a614:	607b      	str	r3, [r7, #4]
 800a616:	e00c      	b.n	800a632 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	f1c3 030f 	rsb	r3, r3, #15
 800a61e:	4a0d      	ldr	r2, [pc, #52]	@ (800a654 <_DoInit+0xb0>)
 800a620:	5cd1      	ldrb	r1, [r2, r3]
 800a622:	683a      	ldr	r2, [r7, #0]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	4413      	add	r3, r2
 800a628:	460a      	mov	r2, r1
 800a62a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	3301      	adds	r3, #1
 800a630:	607b      	str	r3, [r7, #4]
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	2b0f      	cmp	r3, #15
 800a636:	d9ef      	bls.n	800a618 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800a638:	f3bf 8f5f 	dmb	sy
}
 800a63c:	bf00      	nop
 800a63e:	3708      	adds	r7, #8
 800a640:	46bd      	mov	sp, r7
 800a642:	bd80      	pop	{r7, pc}
 800a644:	200132cc 	.word	0x200132cc
 800a648:	0800ff5c 	.word	0x0800ff5c
 800a64c:	20013374 	.word	0x20013374
 800a650:	20013774 	.word	0x20013774
 800a654:	0800ffa0 	.word	0x0800ffa0

0800a658 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800a658:	b580      	push	{r7, lr}
 800a65a:	b08a      	sub	sp, #40	@ 0x28
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	60f8      	str	r0, [r7, #12]
 800a660:	60b9      	str	r1, [r7, #8]
 800a662:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800a664:	2300      	movs	r3, #0
 800a666:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800a668:	68fb      	ldr	r3, [r7, #12]
 800a66a:	68db      	ldr	r3, [r3, #12]
 800a66c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800a66e:	68fb      	ldr	r3, [r7, #12]
 800a670:	691b      	ldr	r3, [r3, #16]
 800a672:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800a674:	69ba      	ldr	r2, [r7, #24]
 800a676:	69fb      	ldr	r3, [r7, #28]
 800a678:	429a      	cmp	r2, r3
 800a67a:	d905      	bls.n	800a688 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800a67c:	69ba      	ldr	r2, [r7, #24]
 800a67e:	69fb      	ldr	r3, [r7, #28]
 800a680:	1ad3      	subs	r3, r2, r3
 800a682:	3b01      	subs	r3, #1
 800a684:	627b      	str	r3, [r7, #36]	@ 0x24
 800a686:	e007      	b.n	800a698 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	689a      	ldr	r2, [r3, #8]
 800a68c:	69b9      	ldr	r1, [r7, #24]
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	1acb      	subs	r3, r1, r3
 800a692:	4413      	add	r3, r2
 800a694:	3b01      	subs	r3, #1
 800a696:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	689a      	ldr	r2, [r3, #8]
 800a69c:	69fb      	ldr	r3, [r7, #28]
 800a69e:	1ad3      	subs	r3, r2, r3
 800a6a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6a2:	4293      	cmp	r3, r2
 800a6a4:	bf28      	it	cs
 800a6a6:	4613      	movcs	r3, r2
 800a6a8:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800a6aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4293      	cmp	r3, r2
 800a6b0:	bf28      	it	cs
 800a6b2:	4613      	movcs	r3, r2
 800a6b4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800a6b6:	68fb      	ldr	r3, [r7, #12]
 800a6b8:	685a      	ldr	r2, [r3, #4]
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	4413      	add	r3, r2
 800a6be:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800a6c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6c2:	68b9      	ldr	r1, [r7, #8]
 800a6c4:	6978      	ldr	r0, [r7, #20]
 800a6c6:	f002 f9ca 	bl	800ca5e <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800a6ca:	6a3a      	ldr	r2, [r7, #32]
 800a6cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6ce:	4413      	add	r3, r2
 800a6d0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800a6d2:	68ba      	ldr	r2, [r7, #8]
 800a6d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6d6:	4413      	add	r3, r2
 800a6d8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6de:	1ad3      	subs	r3, r2, r3
 800a6e0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800a6e2:	69fa      	ldr	r2, [r7, #28]
 800a6e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6e6:	4413      	add	r3, r2
 800a6e8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	689b      	ldr	r3, [r3, #8]
 800a6ee:	69fa      	ldr	r2, [r7, #28]
 800a6f0:	429a      	cmp	r2, r3
 800a6f2:	d101      	bne.n	800a6f8 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800a6f4:	2300      	movs	r3, #0
 800a6f6:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800a6f8:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	69fa      	ldr	r2, [r7, #28]
 800a700:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800a702:	687b      	ldr	r3, [r7, #4]
 800a704:	2b00      	cmp	r3, #0
 800a706:	d1b2      	bne.n	800a66e <_WriteBlocking+0x16>
  return NumBytesWritten;
 800a708:	6a3b      	ldr	r3, [r7, #32]
}
 800a70a:	4618      	mov	r0, r3
 800a70c:	3728      	adds	r7, #40	@ 0x28
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800a712:	b580      	push	{r7, lr}
 800a714:	b088      	sub	sp, #32
 800a716:	af00      	add	r7, sp, #0
 800a718:	60f8      	str	r0, [r7, #12]
 800a71a:	60b9      	str	r1, [r7, #8]
 800a71c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	68db      	ldr	r3, [r3, #12]
 800a722:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	689a      	ldr	r2, [r3, #8]
 800a728:	69fb      	ldr	r3, [r7, #28]
 800a72a:	1ad3      	subs	r3, r2, r3
 800a72c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800a72e:	69ba      	ldr	r2, [r7, #24]
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	429a      	cmp	r2, r3
 800a734:	d911      	bls.n	800a75a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	685a      	ldr	r2, [r3, #4]
 800a73a:	69fb      	ldr	r3, [r7, #28]
 800a73c:	4413      	add	r3, r2
 800a73e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800a740:	687a      	ldr	r2, [r7, #4]
 800a742:	68b9      	ldr	r1, [r7, #8]
 800a744:	6938      	ldr	r0, [r7, #16]
 800a746:	f002 f98a 	bl	800ca5e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800a74a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800a74e:	69fa      	ldr	r2, [r7, #28]
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	441a      	add	r2, r3
 800a754:	68fb      	ldr	r3, [r7, #12]
 800a756:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800a758:	e01f      	b.n	800a79a <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800a75a:	69bb      	ldr	r3, [r7, #24]
 800a75c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	69fb      	ldr	r3, [r7, #28]
 800a764:	4413      	add	r3, r2
 800a766:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800a768:	697a      	ldr	r2, [r7, #20]
 800a76a:	68b9      	ldr	r1, [r7, #8]
 800a76c:	6938      	ldr	r0, [r7, #16]
 800a76e:	f002 f976 	bl	800ca5e <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	69bb      	ldr	r3, [r7, #24]
 800a776:	1ad3      	subs	r3, r2, r3
 800a778:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800a77a:	68fb      	ldr	r3, [r7, #12]
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800a780:	68ba      	ldr	r2, [r7, #8]
 800a782:	69bb      	ldr	r3, [r7, #24]
 800a784:	4413      	add	r3, r2
 800a786:	697a      	ldr	r2, [r7, #20]
 800a788:	4619      	mov	r1, r3
 800a78a:	6938      	ldr	r0, [r7, #16]
 800a78c:	f002 f967 	bl	800ca5e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800a790:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	697a      	ldr	r2, [r7, #20]
 800a798:	60da      	str	r2, [r3, #12]
}
 800a79a:	bf00      	nop
 800a79c:	3720      	adds	r7, #32
 800a79e:	46bd      	mov	sp, r7
 800a7a0:	bd80      	pop	{r7, pc}

0800a7a2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800a7a2:	b480      	push	{r7}
 800a7a4:	b087      	sub	sp, #28
 800a7a6:	af00      	add	r7, sp, #0
 800a7a8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	68db      	ldr	r3, [r3, #12]
 800a7b4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800a7b6:	693a      	ldr	r2, [r7, #16]
 800a7b8:	68fb      	ldr	r3, [r7, #12]
 800a7ba:	429a      	cmp	r2, r3
 800a7bc:	d808      	bhi.n	800a7d0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	689a      	ldr	r2, [r3, #8]
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	1ad2      	subs	r2, r2, r3
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	4413      	add	r3, r2
 800a7ca:	3b01      	subs	r3, #1
 800a7cc:	617b      	str	r3, [r7, #20]
 800a7ce:	e004      	b.n	800a7da <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800a7d0:	693a      	ldr	r2, [r7, #16]
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	1ad3      	subs	r3, r2, r3
 800a7d6:	3b01      	subs	r3, #1
 800a7d8:	617b      	str	r3, [r7, #20]
  }
  return r;
 800a7da:	697b      	ldr	r3, [r7, #20]
}
 800a7dc:	4618      	mov	r0, r3
 800a7de:	371c      	adds	r7, #28
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr

0800a7e8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800a7e8:	b580      	push	{r7, lr}
 800a7ea:	b08c      	sub	sp, #48	@ 0x30
 800a7ec:	af00      	add	r7, sp, #0
 800a7ee:	60f8      	str	r0, [r7, #12]
 800a7f0:	60b9      	str	r1, [r7, #8]
 800a7f2:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800a7f4:	4b3e      	ldr	r3, [pc, #248]	@ (800a8f0 <SEGGER_RTT_ReadNoLock+0x108>)
 800a7f6:	623b      	str	r3, [r7, #32]
 800a7f8:	6a3b      	ldr	r3, [r7, #32]
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	b2db      	uxtb	r3, r3
 800a7fe:	2b53      	cmp	r3, #83	@ 0x53
 800a800:	d001      	beq.n	800a806 <SEGGER_RTT_ReadNoLock+0x1e>
 800a802:	f7ff fecf 	bl	800a5a4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	4613      	mov	r3, r2
 800a80a:	005b      	lsls	r3, r3, #1
 800a80c:	4413      	add	r3, r2
 800a80e:	00db      	lsls	r3, r3, #3
 800a810:	3360      	adds	r3, #96	@ 0x60
 800a812:	4a37      	ldr	r2, [pc, #220]	@ (800a8f0 <SEGGER_RTT_ReadNoLock+0x108>)
 800a814:	4413      	add	r3, r2
 800a816:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800a818:	68bb      	ldr	r3, [r7, #8]
 800a81a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800a81c:	69fb      	ldr	r3, [r7, #28]
 800a81e:	691b      	ldr	r3, [r3, #16]
 800a820:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800a822:	69fb      	ldr	r3, [r7, #28]
 800a824:	68db      	ldr	r3, [r3, #12]
 800a826:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800a828:	2300      	movs	r3, #0
 800a82a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800a82c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a82e:	69bb      	ldr	r3, [r7, #24]
 800a830:	429a      	cmp	r2, r3
 800a832:	d92b      	bls.n	800a88c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800a834:	69fb      	ldr	r3, [r7, #28]
 800a836:	689a      	ldr	r2, [r3, #8]
 800a838:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a83a:	1ad3      	subs	r3, r2, r3
 800a83c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800a83e:	697a      	ldr	r2, [r7, #20]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	4293      	cmp	r3, r2
 800a844:	bf28      	it	cs
 800a846:	4613      	movcs	r3, r2
 800a848:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800a84a:	69fb      	ldr	r3, [r7, #28]
 800a84c:	685a      	ldr	r2, [r3, #4]
 800a84e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a850:	4413      	add	r3, r2
 800a852:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800a854:	697a      	ldr	r2, [r7, #20]
 800a856:	6939      	ldr	r1, [r7, #16]
 800a858:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a85a:	f002 f900 	bl	800ca5e <memcpy>
    NumBytesRead += NumBytesRem;
 800a85e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a860:	697b      	ldr	r3, [r7, #20]
 800a862:	4413      	add	r3, r2
 800a864:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800a866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a868:	697b      	ldr	r3, [r7, #20]
 800a86a:	4413      	add	r3, r2
 800a86c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800a86e:	687a      	ldr	r2, [r7, #4]
 800a870:	697b      	ldr	r3, [r7, #20]
 800a872:	1ad3      	subs	r3, r2, r3
 800a874:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800a876:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	4413      	add	r3, r2
 800a87c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800a87e:	69fb      	ldr	r3, [r7, #28]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a884:	429a      	cmp	r2, r3
 800a886:	d101      	bne.n	800a88c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800a888:	2300      	movs	r3, #0
 800a88a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800a88c:	69ba      	ldr	r2, [r7, #24]
 800a88e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a890:	1ad3      	subs	r3, r2, r3
 800a892:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800a894:	697a      	ldr	r2, [r7, #20]
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	4293      	cmp	r3, r2
 800a89a:	bf28      	it	cs
 800a89c:	4613      	movcs	r3, r2
 800a89e:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d019      	beq.n	800a8da <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	685a      	ldr	r2, [r3, #4]
 800a8aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a8ac:	4413      	add	r3, r2
 800a8ae:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800a8b0:	697a      	ldr	r2, [r7, #20]
 800a8b2:	6939      	ldr	r1, [r7, #16]
 800a8b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a8b6:	f002 f8d2 	bl	800ca5e <memcpy>
    NumBytesRead += NumBytesRem;
 800a8ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	4413      	add	r3, r2
 800a8c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800a8c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a8c4:	697b      	ldr	r3, [r7, #20]
 800a8c6:	4413      	add	r3, r2
 800a8c8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800a8ca:	687a      	ldr	r2, [r7, #4]
 800a8cc:	697b      	ldr	r3, [r7, #20]
 800a8ce:	1ad3      	subs	r3, r2, r3
 800a8d0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800a8d2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8d4:	697b      	ldr	r3, [r7, #20]
 800a8d6:	4413      	add	r3, r2
 800a8d8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800a8da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d002      	beq.n	800a8e6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800a8e0:	69fb      	ldr	r3, [r7, #28]
 800a8e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a8e4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800a8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a8e8:	4618      	mov	r0, r3
 800a8ea:	3730      	adds	r7, #48	@ 0x30
 800a8ec:	46bd      	mov	sp, r7
 800a8ee:	bd80      	pop	{r7, pc}
 800a8f0:	200132cc 	.word	0x200132cc

0800a8f4 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b088      	sub	sp, #32
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	60f8      	str	r0, [r7, #12]
 800a8fc:	60b9      	str	r1, [r7, #8]
 800a8fe:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800a904:	68fb      	ldr	r3, [r7, #12]
 800a906:	1c5a      	adds	r2, r3, #1
 800a908:	4613      	mov	r3, r2
 800a90a:	005b      	lsls	r3, r3, #1
 800a90c:	4413      	add	r3, r2
 800a90e:	00db      	lsls	r3, r3, #3
 800a910:	4a1f      	ldr	r2, [pc, #124]	@ (800a990 <SEGGER_RTT_WriteNoLock+0x9c>)
 800a912:	4413      	add	r3, r2
 800a914:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	695b      	ldr	r3, [r3, #20]
 800a91a:	2b02      	cmp	r3, #2
 800a91c:	d029      	beq.n	800a972 <SEGGER_RTT_WriteNoLock+0x7e>
 800a91e:	2b02      	cmp	r3, #2
 800a920:	d82e      	bhi.n	800a980 <SEGGER_RTT_WriteNoLock+0x8c>
 800a922:	2b00      	cmp	r3, #0
 800a924:	d002      	beq.n	800a92c <SEGGER_RTT_WriteNoLock+0x38>
 800a926:	2b01      	cmp	r3, #1
 800a928:	d013      	beq.n	800a952 <SEGGER_RTT_WriteNoLock+0x5e>
 800a92a:	e029      	b.n	800a980 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800a92c:	6978      	ldr	r0, [r7, #20]
 800a92e:	f7ff ff38 	bl	800a7a2 <_GetAvailWriteSpace>
 800a932:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d202      	bcs.n	800a942 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800a93c:	2300      	movs	r3, #0
 800a93e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800a940:	e021      	b.n	800a986 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800a946:	687a      	ldr	r2, [r7, #4]
 800a948:	69b9      	ldr	r1, [r7, #24]
 800a94a:	6978      	ldr	r0, [r7, #20]
 800a94c:	f7ff fee1 	bl	800a712 <_WriteNoCheck>
    break;
 800a950:	e019      	b.n	800a986 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800a952:	6978      	ldr	r0, [r7, #20]
 800a954:	f7ff ff25 	bl	800a7a2 <_GetAvailWriteSpace>
 800a958:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800a95a:	687a      	ldr	r2, [r7, #4]
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	4293      	cmp	r3, r2
 800a960:	bf28      	it	cs
 800a962:	4613      	movcs	r3, r2
 800a964:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800a966:	69fa      	ldr	r2, [r7, #28]
 800a968:	69b9      	ldr	r1, [r7, #24]
 800a96a:	6978      	ldr	r0, [r7, #20]
 800a96c:	f7ff fed1 	bl	800a712 <_WriteNoCheck>
    break;
 800a970:	e009      	b.n	800a986 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800a972:	687a      	ldr	r2, [r7, #4]
 800a974:	69b9      	ldr	r1, [r7, #24]
 800a976:	6978      	ldr	r0, [r7, #20]
 800a978:	f7ff fe6e 	bl	800a658 <_WriteBlocking>
 800a97c:	61f8      	str	r0, [r7, #28]
    break;
 800a97e:	e002      	b.n	800a986 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800a980:	2300      	movs	r3, #0
 800a982:	61fb      	str	r3, [r7, #28]
    break;
 800a984:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800a986:	69fb      	ldr	r3, [r7, #28]
}
 800a988:	4618      	mov	r0, r3
 800a98a:	3720      	adds	r7, #32
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}
 800a990:	200132cc 	.word	0x200132cc

0800a994 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800a994:	b580      	push	{r7, lr}
 800a996:	b088      	sub	sp, #32
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800a9a0:	4b0e      	ldr	r3, [pc, #56]	@ (800a9dc <SEGGER_RTT_Write+0x48>)
 800a9a2:	61fb      	str	r3, [r7, #28]
 800a9a4:	69fb      	ldr	r3, [r7, #28]
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	b2db      	uxtb	r3, r3
 800a9aa:	2b53      	cmp	r3, #83	@ 0x53
 800a9ac:	d001      	beq.n	800a9b2 <SEGGER_RTT_Write+0x1e>
 800a9ae:	f7ff fdf9 	bl	800a5a4 <_DoInit>
  SEGGER_RTT_LOCK();
 800a9b2:	f3ef 8311 	mrs	r3, BASEPRI
 800a9b6:	f04f 0120 	mov.w	r1, #32
 800a9ba:	f381 8811 	msr	BASEPRI, r1
 800a9be:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800a9c0:	687a      	ldr	r2, [r7, #4]
 800a9c2:	68b9      	ldr	r1, [r7, #8]
 800a9c4:	68f8      	ldr	r0, [r7, #12]
 800a9c6:	f7ff ff95 	bl	800a8f4 <SEGGER_RTT_WriteNoLock>
 800a9ca:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800a9cc:	69bb      	ldr	r3, [r7, #24]
 800a9ce:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800a9d2:	697b      	ldr	r3, [r7, #20]
}
 800a9d4:	4618      	mov	r0, r3
 800a9d6:	3720      	adds	r7, #32
 800a9d8:	46bd      	mov	sp, r7
 800a9da:	bd80      	pop	{r7, pc}
 800a9dc:	200132cc 	.word	0x200132cc

0800a9e0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b088      	sub	sp, #32
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	60f8      	str	r0, [r7, #12]
 800a9e8:	60b9      	str	r1, [r7, #8]
 800a9ea:	607a      	str	r2, [r7, #4]
 800a9ec:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800a9ee:	4b3d      	ldr	r3, [pc, #244]	@ (800aae4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800a9f0:	61bb      	str	r3, [r7, #24]
 800a9f2:	69bb      	ldr	r3, [r7, #24]
 800a9f4:	781b      	ldrb	r3, [r3, #0]
 800a9f6:	b2db      	uxtb	r3, r3
 800a9f8:	2b53      	cmp	r3, #83	@ 0x53
 800a9fa:	d001      	beq.n	800aa00 <SEGGER_RTT_AllocUpBuffer+0x20>
 800a9fc:	f7ff fdd2 	bl	800a5a4 <_DoInit>
  SEGGER_RTT_LOCK();
 800aa00:	f3ef 8311 	mrs	r3, BASEPRI
 800aa04:	f04f 0120 	mov.w	r1, #32
 800aa08:	f381 8811 	msr	BASEPRI, r1
 800aa0c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800aa0e:	4b35      	ldr	r3, [pc, #212]	@ (800aae4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800aa10:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800aa12:	2300      	movs	r3, #0
 800aa14:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800aa16:	6939      	ldr	r1, [r7, #16]
 800aa18:	69fb      	ldr	r3, [r7, #28]
 800aa1a:	1c5a      	adds	r2, r3, #1
 800aa1c:	4613      	mov	r3, r2
 800aa1e:	005b      	lsls	r3, r3, #1
 800aa20:	4413      	add	r3, r2
 800aa22:	00db      	lsls	r3, r3, #3
 800aa24:	440b      	add	r3, r1
 800aa26:	3304      	adds	r3, #4
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	d008      	beq.n	800aa40 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800aa2e:	69fb      	ldr	r3, [r7, #28]
 800aa30:	3301      	adds	r3, #1
 800aa32:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800aa34:	693b      	ldr	r3, [r7, #16]
 800aa36:	691b      	ldr	r3, [r3, #16]
 800aa38:	69fa      	ldr	r2, [r7, #28]
 800aa3a:	429a      	cmp	r2, r3
 800aa3c:	dbeb      	blt.n	800aa16 <SEGGER_RTT_AllocUpBuffer+0x36>
 800aa3e:	e000      	b.n	800aa42 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800aa40:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800aa42:	693b      	ldr	r3, [r7, #16]
 800aa44:	691b      	ldr	r3, [r3, #16]
 800aa46:	69fa      	ldr	r2, [r7, #28]
 800aa48:	429a      	cmp	r2, r3
 800aa4a:	da3f      	bge.n	800aacc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800aa4c:	6939      	ldr	r1, [r7, #16]
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	1c5a      	adds	r2, r3, #1
 800aa52:	4613      	mov	r3, r2
 800aa54:	005b      	lsls	r3, r3, #1
 800aa56:	4413      	add	r3, r2
 800aa58:	00db      	lsls	r3, r3, #3
 800aa5a:	440b      	add	r3, r1
 800aa5c:	68fa      	ldr	r2, [r7, #12]
 800aa5e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800aa60:	6939      	ldr	r1, [r7, #16]
 800aa62:	69fb      	ldr	r3, [r7, #28]
 800aa64:	1c5a      	adds	r2, r3, #1
 800aa66:	4613      	mov	r3, r2
 800aa68:	005b      	lsls	r3, r3, #1
 800aa6a:	4413      	add	r3, r2
 800aa6c:	00db      	lsls	r3, r3, #3
 800aa6e:	440b      	add	r3, r1
 800aa70:	3304      	adds	r3, #4
 800aa72:	68ba      	ldr	r2, [r7, #8]
 800aa74:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800aa76:	6939      	ldr	r1, [r7, #16]
 800aa78:	69fa      	ldr	r2, [r7, #28]
 800aa7a:	4613      	mov	r3, r2
 800aa7c:	005b      	lsls	r3, r3, #1
 800aa7e:	4413      	add	r3, r2
 800aa80:	00db      	lsls	r3, r3, #3
 800aa82:	440b      	add	r3, r1
 800aa84:	3320      	adds	r3, #32
 800aa86:	687a      	ldr	r2, [r7, #4]
 800aa88:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800aa8a:	6939      	ldr	r1, [r7, #16]
 800aa8c:	69fa      	ldr	r2, [r7, #28]
 800aa8e:	4613      	mov	r3, r2
 800aa90:	005b      	lsls	r3, r3, #1
 800aa92:	4413      	add	r3, r2
 800aa94:	00db      	lsls	r3, r3, #3
 800aa96:	440b      	add	r3, r1
 800aa98:	3328      	adds	r3, #40	@ 0x28
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800aa9e:	6939      	ldr	r1, [r7, #16]
 800aaa0:	69fa      	ldr	r2, [r7, #28]
 800aaa2:	4613      	mov	r3, r2
 800aaa4:	005b      	lsls	r3, r3, #1
 800aaa6:	4413      	add	r3, r2
 800aaa8:	00db      	lsls	r3, r3, #3
 800aaaa:	440b      	add	r3, r1
 800aaac:	3324      	adds	r3, #36	@ 0x24
 800aaae:	2200      	movs	r2, #0
 800aab0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800aab2:	6939      	ldr	r1, [r7, #16]
 800aab4:	69fa      	ldr	r2, [r7, #28]
 800aab6:	4613      	mov	r3, r2
 800aab8:	005b      	lsls	r3, r3, #1
 800aaba:	4413      	add	r3, r2
 800aabc:	00db      	lsls	r3, r3, #3
 800aabe:	440b      	add	r3, r1
 800aac0:	332c      	adds	r3, #44	@ 0x2c
 800aac2:	683a      	ldr	r2, [r7, #0]
 800aac4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800aac6:	f3bf 8f5f 	dmb	sy
 800aaca:	e002      	b.n	800aad2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800aacc:	f04f 33ff 	mov.w	r3, #4294967295
 800aad0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800aad2:	697b      	ldr	r3, [r7, #20]
 800aad4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800aad8:	69fb      	ldr	r3, [r7, #28]
}
 800aada:	4618      	mov	r0, r3
 800aadc:	3720      	adds	r7, #32
 800aade:	46bd      	mov	sp, r7
 800aae0:	bd80      	pop	{r7, pc}
 800aae2:	bf00      	nop
 800aae4:	200132cc 	.word	0x200132cc

0800aae8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800aae8:	b580      	push	{r7, lr}
 800aaea:	b08a      	sub	sp, #40	@ 0x28
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	60f8      	str	r0, [r7, #12]
 800aaf0:	60b9      	str	r1, [r7, #8]
 800aaf2:	607a      	str	r2, [r7, #4]
 800aaf4:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800aaf6:	4b21      	ldr	r3, [pc, #132]	@ (800ab7c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800aaf8:	623b      	str	r3, [r7, #32]
 800aafa:	6a3b      	ldr	r3, [r7, #32]
 800aafc:	781b      	ldrb	r3, [r3, #0]
 800aafe:	b2db      	uxtb	r3, r3
 800ab00:	2b53      	cmp	r3, #83	@ 0x53
 800ab02:	d001      	beq.n	800ab08 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800ab04:	f7ff fd4e 	bl	800a5a4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800ab08:	4b1c      	ldr	r3, [pc, #112]	@ (800ab7c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800ab0a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800ab0c:	68fb      	ldr	r3, [r7, #12]
 800ab0e:	2b02      	cmp	r3, #2
 800ab10:	d82c      	bhi.n	800ab6c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800ab12:	f3ef 8311 	mrs	r3, BASEPRI
 800ab16:	f04f 0120 	mov.w	r1, #32
 800ab1a:	f381 8811 	msr	BASEPRI, r1
 800ab1e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800ab20:	68fa      	ldr	r2, [r7, #12]
 800ab22:	4613      	mov	r3, r2
 800ab24:	005b      	lsls	r3, r3, #1
 800ab26:	4413      	add	r3, r2
 800ab28:	00db      	lsls	r3, r3, #3
 800ab2a:	3360      	adds	r3, #96	@ 0x60
 800ab2c:	69fa      	ldr	r2, [r7, #28]
 800ab2e:	4413      	add	r3, r2
 800ab30:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d00e      	beq.n	800ab56 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800ab3e:	697b      	ldr	r3, [r7, #20]
 800ab40:	687a      	ldr	r2, [r7, #4]
 800ab42:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800ab44:	697b      	ldr	r3, [r7, #20]
 800ab46:	683a      	ldr	r2, [r7, #0]
 800ab48:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800ab4a:	697b      	ldr	r3, [r7, #20]
 800ab4c:	2200      	movs	r2, #0
 800ab4e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800ab50:	697b      	ldr	r3, [r7, #20]
 800ab52:	2200      	movs	r2, #0
 800ab54:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800ab56:	697b      	ldr	r3, [r7, #20]
 800ab58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ab5a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800ab5c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800ab66:	2300      	movs	r3, #0
 800ab68:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab6a:	e002      	b.n	800ab72 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800ab6c:	f04f 33ff 	mov.w	r3, #4294967295
 800ab70:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800ab72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ab74:	4618      	mov	r0, r3
 800ab76:	3728      	adds	r7, #40	@ 0x28
 800ab78:	46bd      	mov	sp, r7
 800ab7a:	bd80      	pop	{r7, pc}
 800ab7c:	200132cc 	.word	0x200132cc

0800ab80 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800ab80:	b480      	push	{r7}
 800ab82:	b087      	sub	sp, #28
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	1c5a      	adds	r2, r3, #1
 800ab94:	60fa      	str	r2, [r7, #12]
 800ab96:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2b80      	cmp	r3, #128	@ 0x80
 800ab9c:	d90a      	bls.n	800abb4 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800ab9e:	2380      	movs	r3, #128	@ 0x80
 800aba0:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800aba2:	e007      	b.n	800abb4 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800aba4:	68ba      	ldr	r2, [r7, #8]
 800aba6:	1c53      	adds	r3, r2, #1
 800aba8:	60bb      	str	r3, [r7, #8]
 800abaa:	68fb      	ldr	r3, [r7, #12]
 800abac:	1c59      	adds	r1, r3, #1
 800abae:	60f9      	str	r1, [r7, #12]
 800abb0:	7812      	ldrb	r2, [r2, #0]
 800abb2:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	1e5a      	subs	r2, r3, #1
 800abb8:	607a      	str	r2, [r7, #4]
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d003      	beq.n	800abc6 <_EncodeStr+0x46>
 800abbe:	68bb      	ldr	r3, [r7, #8]
 800abc0:	781b      	ldrb	r3, [r3, #0]
 800abc2:	2b00      	cmp	r3, #0
 800abc4:	d1ee      	bne.n	800aba4 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800abc6:	68ba      	ldr	r2, [r7, #8]
 800abc8:	697b      	ldr	r3, [r7, #20]
 800abca:	1ad3      	subs	r3, r2, r3
 800abcc:	b2da      	uxtb	r2, r3
 800abce:	693b      	ldr	r3, [r7, #16]
 800abd0:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800abd2:	68fb      	ldr	r3, [r7, #12]
}
 800abd4:	4618      	mov	r0, r3
 800abd6:	371c      	adds	r7, #28
 800abd8:	46bd      	mov	sp, r7
 800abda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abde:	4770      	bx	lr

0800abe0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800abe0:	b480      	push	{r7}
 800abe2:	b083      	sub	sp, #12
 800abe4:	af00      	add	r7, sp, #0
 800abe6:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	3307      	adds	r3, #7
}
 800abec:	4618      	mov	r0, r3
 800abee:	370c      	adds	r7, #12
 800abf0:	46bd      	mov	sp, r7
 800abf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf6:	4770      	bx	lr

0800abf8 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b082      	sub	sp, #8
 800abfc:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800abfe:	4b34      	ldr	r3, [pc, #208]	@ (800acd0 <_HandleIncomingPacket+0xd8>)
 800ac00:	7e1b      	ldrb	r3, [r3, #24]
 800ac02:	4618      	mov	r0, r3
 800ac04:	1cfb      	adds	r3, r7, #3
 800ac06:	2201      	movs	r2, #1
 800ac08:	4619      	mov	r1, r3
 800ac0a:	f7ff fded 	bl	800a7e8 <SEGGER_RTT_ReadNoLock>
 800ac0e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d057      	beq.n	800acc6 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800ac16:	78fb      	ldrb	r3, [r7, #3]
 800ac18:	2b80      	cmp	r3, #128	@ 0x80
 800ac1a:	d031      	beq.n	800ac80 <_HandleIncomingPacket+0x88>
 800ac1c:	2b80      	cmp	r3, #128	@ 0x80
 800ac1e:	dc40      	bgt.n	800aca2 <_HandleIncomingPacket+0xaa>
 800ac20:	2b07      	cmp	r3, #7
 800ac22:	dc15      	bgt.n	800ac50 <_HandleIncomingPacket+0x58>
 800ac24:	2b00      	cmp	r3, #0
 800ac26:	dd3c      	ble.n	800aca2 <_HandleIncomingPacket+0xaa>
 800ac28:	3b01      	subs	r3, #1
 800ac2a:	2b06      	cmp	r3, #6
 800ac2c:	d839      	bhi.n	800aca2 <_HandleIncomingPacket+0xaa>
 800ac2e:	a201      	add	r2, pc, #4	@ (adr r2, 800ac34 <_HandleIncomingPacket+0x3c>)
 800ac30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac34:	0800ac57 	.word	0x0800ac57
 800ac38:	0800ac5d 	.word	0x0800ac5d
 800ac3c:	0800ac63 	.word	0x0800ac63
 800ac40:	0800ac69 	.word	0x0800ac69
 800ac44:	0800ac6f 	.word	0x0800ac6f
 800ac48:	0800ac75 	.word	0x0800ac75
 800ac4c:	0800ac7b 	.word	0x0800ac7b
 800ac50:	2b7f      	cmp	r3, #127	@ 0x7f
 800ac52:	d033      	beq.n	800acbc <_HandleIncomingPacket+0xc4>
 800ac54:	e025      	b.n	800aca2 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800ac56:	f000 fbe3 	bl	800b420 <SEGGER_SYSVIEW_Start>
      break;
 800ac5a:	e034      	b.n	800acc6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800ac5c:	f000 fc9a 	bl	800b594 <SEGGER_SYSVIEW_Stop>
      break;
 800ac60:	e031      	b.n	800acc6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800ac62:	f000 fe73 	bl	800b94c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800ac66:	e02e      	b.n	800acc6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800ac68:	f000 fe38 	bl	800b8dc <SEGGER_SYSVIEW_SendTaskList>
      break;
 800ac6c:	e02b      	b.n	800acc6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800ac6e:	f000 fcb7 	bl	800b5e0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800ac72:	e028      	b.n	800acc6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800ac74:	f001 f826 	bl	800bcc4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800ac78:	e025      	b.n	800acc6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800ac7a:	f001 f805 	bl	800bc88 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800ac7e:	e022      	b.n	800acc6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800ac80:	4b13      	ldr	r3, [pc, #76]	@ (800acd0 <_HandleIncomingPacket+0xd8>)
 800ac82:	7e1b      	ldrb	r3, [r3, #24]
 800ac84:	4618      	mov	r0, r3
 800ac86:	1cfb      	adds	r3, r7, #3
 800ac88:	2201      	movs	r2, #1
 800ac8a:	4619      	mov	r1, r3
 800ac8c:	f7ff fdac 	bl	800a7e8 <SEGGER_RTT_ReadNoLock>
 800ac90:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d013      	beq.n	800acc0 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800ac98:	78fb      	ldrb	r3, [r7, #3]
 800ac9a:	4618      	mov	r0, r3
 800ac9c:	f000 ff6a 	bl	800bb74 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800aca0:	e00e      	b.n	800acc0 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800aca2:	78fb      	ldrb	r3, [r7, #3]
 800aca4:	b25b      	sxtb	r3, r3
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	da0c      	bge.n	800acc4 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800acaa:	4b09      	ldr	r3, [pc, #36]	@ (800acd0 <_HandleIncomingPacket+0xd8>)
 800acac:	7e1b      	ldrb	r3, [r3, #24]
 800acae:	4618      	mov	r0, r3
 800acb0:	1cfb      	adds	r3, r7, #3
 800acb2:	2201      	movs	r2, #1
 800acb4:	4619      	mov	r1, r3
 800acb6:	f7ff fd97 	bl	800a7e8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800acba:	e003      	b.n	800acc4 <_HandleIncomingPacket+0xcc>
      break;
 800acbc:	bf00      	nop
 800acbe:	e002      	b.n	800acc6 <_HandleIncomingPacket+0xce>
      break;
 800acc0:	bf00      	nop
 800acc2:	e000      	b.n	800acc6 <_HandleIncomingPacket+0xce>
      break;
 800acc4:	bf00      	nop
    }
  }
}
 800acc6:	bf00      	nop
 800acc8:	3708      	adds	r7, #8
 800acca:	46bd      	mov	sp, r7
 800accc:	bd80      	pop	{r7, pc}
 800acce:	bf00      	nop
 800acd0:	20013b8c 	.word	0x20013b8c

0800acd4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800acd4:	b580      	push	{r7, lr}
 800acd6:	b08c      	sub	sp, #48	@ 0x30
 800acd8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800acda:	2301      	movs	r3, #1
 800acdc:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800acde:	1d3b      	adds	r3, r7, #4
 800ace0:	3301      	adds	r3, #1
 800ace2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800ace4:	69fb      	ldr	r3, [r7, #28]
 800ace6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800ace8:	4b31      	ldr	r3, [pc, #196]	@ (800adb0 <_TrySendOverflowPacket+0xdc>)
 800acea:	695b      	ldr	r3, [r3, #20]
 800acec:	62bb      	str	r3, [r7, #40]	@ 0x28
 800acee:	e00b      	b.n	800ad08 <_TrySendOverflowPacket+0x34>
 800acf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800acf2:	b2da      	uxtb	r2, r3
 800acf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800acf6:	1c59      	adds	r1, r3, #1
 800acf8:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800acfa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800acfe:	b2d2      	uxtb	r2, r2
 800ad00:	701a      	strb	r2, [r3, #0]
 800ad02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad04:	09db      	lsrs	r3, r3, #7
 800ad06:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ad08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad0a:	2b7f      	cmp	r3, #127	@ 0x7f
 800ad0c:	d8f0      	bhi.n	800acf0 <_TrySendOverflowPacket+0x1c>
 800ad0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad10:	1c5a      	adds	r2, r3, #1
 800ad12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ad14:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ad16:	b2d2      	uxtb	r2, r2
 800ad18:	701a      	strb	r2, [r3, #0]
 800ad1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad1c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800ad1e:	4b25      	ldr	r3, [pc, #148]	@ (800adb4 <_TrySendOverflowPacket+0xe0>)
 800ad20:	681b      	ldr	r3, [r3, #0]
 800ad22:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800ad24:	4b22      	ldr	r3, [pc, #136]	@ (800adb0 <_TrySendOverflowPacket+0xdc>)
 800ad26:	68db      	ldr	r3, [r3, #12]
 800ad28:	69ba      	ldr	r2, [r7, #24]
 800ad2a:	1ad3      	subs	r3, r2, r3
 800ad2c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800ad2e:	69fb      	ldr	r3, [r7, #28]
 800ad30:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad32:	697b      	ldr	r3, [r7, #20]
 800ad34:	623b      	str	r3, [r7, #32]
 800ad36:	e00b      	b.n	800ad50 <_TrySendOverflowPacket+0x7c>
 800ad38:	6a3b      	ldr	r3, [r7, #32]
 800ad3a:	b2da      	uxtb	r2, r3
 800ad3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad3e:	1c59      	adds	r1, r3, #1
 800ad40:	6279      	str	r1, [r7, #36]	@ 0x24
 800ad42:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ad46:	b2d2      	uxtb	r2, r2
 800ad48:	701a      	strb	r2, [r3, #0]
 800ad4a:	6a3b      	ldr	r3, [r7, #32]
 800ad4c:	09db      	lsrs	r3, r3, #7
 800ad4e:	623b      	str	r3, [r7, #32]
 800ad50:	6a3b      	ldr	r3, [r7, #32]
 800ad52:	2b7f      	cmp	r3, #127	@ 0x7f
 800ad54:	d8f0      	bhi.n	800ad38 <_TrySendOverflowPacket+0x64>
 800ad56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad58:	1c5a      	adds	r2, r3, #1
 800ad5a:	627a      	str	r2, [r7, #36]	@ 0x24
 800ad5c:	6a3a      	ldr	r2, [r7, #32]
 800ad5e:	b2d2      	uxtb	r2, r2
 800ad60:	701a      	strb	r2, [r3, #0]
 800ad62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad64:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800ad66:	4b12      	ldr	r3, [pc, #72]	@ (800adb0 <_TrySendOverflowPacket+0xdc>)
 800ad68:	785b      	ldrb	r3, [r3, #1]
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	1d3b      	adds	r3, r7, #4
 800ad6e:	69fa      	ldr	r2, [r7, #28]
 800ad70:	1ad3      	subs	r3, r2, r3
 800ad72:	461a      	mov	r2, r3
 800ad74:	1d3b      	adds	r3, r7, #4
 800ad76:	4619      	mov	r1, r3
 800ad78:	f7f5 fa2a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800ad80:	693b      	ldr	r3, [r7, #16]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d009      	beq.n	800ad9a <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800ad86:	4a0a      	ldr	r2, [pc, #40]	@ (800adb0 <_TrySendOverflowPacket+0xdc>)
 800ad88:	69bb      	ldr	r3, [r7, #24]
 800ad8a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800ad8c:	4b08      	ldr	r3, [pc, #32]	@ (800adb0 <_TrySendOverflowPacket+0xdc>)
 800ad8e:	781b      	ldrb	r3, [r3, #0]
 800ad90:	3b01      	subs	r3, #1
 800ad92:	b2da      	uxtb	r2, r3
 800ad94:	4b06      	ldr	r3, [pc, #24]	@ (800adb0 <_TrySendOverflowPacket+0xdc>)
 800ad96:	701a      	strb	r2, [r3, #0]
 800ad98:	e004      	b.n	800ada4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800ad9a:	4b05      	ldr	r3, [pc, #20]	@ (800adb0 <_TrySendOverflowPacket+0xdc>)
 800ad9c:	695b      	ldr	r3, [r3, #20]
 800ad9e:	3301      	adds	r3, #1
 800ada0:	4a03      	ldr	r2, [pc, #12]	@ (800adb0 <_TrySendOverflowPacket+0xdc>)
 800ada2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800ada4:	693b      	ldr	r3, [r7, #16]
}
 800ada6:	4618      	mov	r0, r3
 800ada8:	3730      	adds	r7, #48	@ 0x30
 800adaa:	46bd      	mov	sp, r7
 800adac:	bd80      	pop	{r7, pc}
 800adae:	bf00      	nop
 800adb0:	20013b8c 	.word	0x20013b8c
 800adb4:	e0001004 	.word	0xe0001004

0800adb8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800adb8:	b580      	push	{r7, lr}
 800adba:	b08a      	sub	sp, #40	@ 0x28
 800adbc:	af00      	add	r7, sp, #0
 800adbe:	60f8      	str	r0, [r7, #12]
 800adc0:	60b9      	str	r1, [r7, #8]
 800adc2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800adc4:	4b98      	ldr	r3, [pc, #608]	@ (800b028 <_SendPacket+0x270>)
 800adc6:	781b      	ldrb	r3, [r3, #0]
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d010      	beq.n	800adee <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800adcc:	4b96      	ldr	r3, [pc, #600]	@ (800b028 <_SendPacket+0x270>)
 800adce:	781b      	ldrb	r3, [r3, #0]
 800add0:	2b00      	cmp	r3, #0
 800add2:	f000 812d 	beq.w	800b030 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800add6:	4b94      	ldr	r3, [pc, #592]	@ (800b028 <_SendPacket+0x270>)
 800add8:	781b      	ldrb	r3, [r3, #0]
 800adda:	2b02      	cmp	r3, #2
 800addc:	d109      	bne.n	800adf2 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800adde:	f7ff ff79 	bl	800acd4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800ade2:	4b91      	ldr	r3, [pc, #580]	@ (800b028 <_SendPacket+0x270>)
 800ade4:	781b      	ldrb	r3, [r3, #0]
 800ade6:	2b01      	cmp	r3, #1
 800ade8:	f040 8124 	bne.w	800b034 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 800adec:	e001      	b.n	800adf2 <_SendPacket+0x3a>
    goto Send;
 800adee:	bf00      	nop
 800adf0:	e000      	b.n	800adf4 <_SendPacket+0x3c>
Send:
 800adf2:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2b1f      	cmp	r3, #31
 800adf8:	d809      	bhi.n	800ae0e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800adfa:	4b8b      	ldr	r3, [pc, #556]	@ (800b028 <_SendPacket+0x270>)
 800adfc:	69da      	ldr	r2, [r3, #28]
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	fa22 f303 	lsr.w	r3, r2, r3
 800ae04:	f003 0301 	and.w	r3, r3, #1
 800ae08:	2b00      	cmp	r3, #0
 800ae0a:	f040 8115 	bne.w	800b038 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	2b17      	cmp	r3, #23
 800ae12:	d807      	bhi.n	800ae24 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800ae14:	68fb      	ldr	r3, [r7, #12]
 800ae16:	3b01      	subs	r3, #1
 800ae18:	60fb      	str	r3, [r7, #12]
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	b2da      	uxtb	r2, r3
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	701a      	strb	r2, [r3, #0]
 800ae22:	e0c4      	b.n	800afae <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800ae24:	68ba      	ldr	r2, [r7, #8]
 800ae26:	68fb      	ldr	r3, [r7, #12]
 800ae28:	1ad3      	subs	r3, r2, r3
 800ae2a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ae30:	d912      	bls.n	800ae58 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800ae32:	69fb      	ldr	r3, [r7, #28]
 800ae34:	09da      	lsrs	r2, r3, #7
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	3b01      	subs	r3, #1
 800ae3a:	60fb      	str	r3, [r7, #12]
 800ae3c:	b2d2      	uxtb	r2, r2
 800ae3e:	68fb      	ldr	r3, [r7, #12]
 800ae40:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	b2db      	uxtb	r3, r3
 800ae46:	68fa      	ldr	r2, [r7, #12]
 800ae48:	3a01      	subs	r2, #1
 800ae4a:	60fa      	str	r2, [r7, #12]
 800ae4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ae50:	b2da      	uxtb	r2, r3
 800ae52:	68fb      	ldr	r3, [r7, #12]
 800ae54:	701a      	strb	r2, [r3, #0]
 800ae56:	e006      	b.n	800ae66 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800ae58:	68fb      	ldr	r3, [r7, #12]
 800ae5a:	3b01      	subs	r3, #1
 800ae5c:	60fb      	str	r3, [r7, #12]
 800ae5e:	69fb      	ldr	r3, [r7, #28]
 800ae60:	b2da      	uxtb	r2, r3
 800ae62:	68fb      	ldr	r3, [r7, #12]
 800ae64:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	2b7e      	cmp	r3, #126	@ 0x7e
 800ae6a:	d807      	bhi.n	800ae7c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	3b01      	subs	r3, #1
 800ae70:	60fb      	str	r3, [r7, #12]
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	b2da      	uxtb	r2, r3
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	701a      	strb	r2, [r3, #0]
 800ae7a:	e098      	b.n	800afae <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ae82:	d212      	bcs.n	800aeaa <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	09da      	lsrs	r2, r3, #7
 800ae88:	68fb      	ldr	r3, [r7, #12]
 800ae8a:	3b01      	subs	r3, #1
 800ae8c:	60fb      	str	r3, [r7, #12]
 800ae8e:	b2d2      	uxtb	r2, r2
 800ae90:	68fb      	ldr	r3, [r7, #12]
 800ae92:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	b2db      	uxtb	r3, r3
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	3a01      	subs	r2, #1
 800ae9c:	60fa      	str	r2, [r7, #12]
 800ae9e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aea2:	b2da      	uxtb	r2, r3
 800aea4:	68fb      	ldr	r3, [r7, #12]
 800aea6:	701a      	strb	r2, [r3, #0]
 800aea8:	e081      	b.n	800afae <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aeb0:	d21d      	bcs.n	800aeee <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	0b9a      	lsrs	r2, r3, #14
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	3b01      	subs	r3, #1
 800aeba:	60fb      	str	r3, [r7, #12]
 800aebc:	b2d2      	uxtb	r2, r2
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	09db      	lsrs	r3, r3, #7
 800aec6:	b2db      	uxtb	r3, r3
 800aec8:	68fa      	ldr	r2, [r7, #12]
 800aeca:	3a01      	subs	r2, #1
 800aecc:	60fa      	str	r2, [r7, #12]
 800aece:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aed2:	b2da      	uxtb	r2, r3
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	b2db      	uxtb	r3, r3
 800aedc:	68fa      	ldr	r2, [r7, #12]
 800aede:	3a01      	subs	r2, #1
 800aee0:	60fa      	str	r2, [r7, #12]
 800aee2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aee6:	b2da      	uxtb	r2, r3
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	701a      	strb	r2, [r3, #0]
 800aeec:	e05f      	b.n	800afae <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800aef4:	d228      	bcs.n	800af48 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	0d5a      	lsrs	r2, r3, #21
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	3b01      	subs	r3, #1
 800aefe:	60fb      	str	r3, [r7, #12]
 800af00:	b2d2      	uxtb	r2, r2
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	0b9b      	lsrs	r3, r3, #14
 800af0a:	b2db      	uxtb	r3, r3
 800af0c:	68fa      	ldr	r2, [r7, #12]
 800af0e:	3a01      	subs	r2, #1
 800af10:	60fa      	str	r2, [r7, #12]
 800af12:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800af16:	b2da      	uxtb	r2, r3
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	09db      	lsrs	r3, r3, #7
 800af20:	b2db      	uxtb	r3, r3
 800af22:	68fa      	ldr	r2, [r7, #12]
 800af24:	3a01      	subs	r2, #1
 800af26:	60fa      	str	r2, [r7, #12]
 800af28:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800af2c:	b2da      	uxtb	r2, r3
 800af2e:	68fb      	ldr	r3, [r7, #12]
 800af30:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	b2db      	uxtb	r3, r3
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	3a01      	subs	r2, #1
 800af3a:	60fa      	str	r2, [r7, #12]
 800af3c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800af40:	b2da      	uxtb	r2, r3
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	701a      	strb	r2, [r3, #0]
 800af46:	e032      	b.n	800afae <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	0f1a      	lsrs	r2, r3, #28
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	3b01      	subs	r3, #1
 800af50:	60fb      	str	r3, [r7, #12]
 800af52:	b2d2      	uxtb	r2, r2
 800af54:	68fb      	ldr	r3, [r7, #12]
 800af56:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	0d5b      	lsrs	r3, r3, #21
 800af5c:	b2db      	uxtb	r3, r3
 800af5e:	68fa      	ldr	r2, [r7, #12]
 800af60:	3a01      	subs	r2, #1
 800af62:	60fa      	str	r2, [r7, #12]
 800af64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800af68:	b2da      	uxtb	r2, r3
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	0b9b      	lsrs	r3, r3, #14
 800af72:	b2db      	uxtb	r3, r3
 800af74:	68fa      	ldr	r2, [r7, #12]
 800af76:	3a01      	subs	r2, #1
 800af78:	60fa      	str	r2, [r7, #12]
 800af7a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800af7e:	b2da      	uxtb	r2, r3
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	09db      	lsrs	r3, r3, #7
 800af88:	b2db      	uxtb	r3, r3
 800af8a:	68fa      	ldr	r2, [r7, #12]
 800af8c:	3a01      	subs	r2, #1
 800af8e:	60fa      	str	r2, [r7, #12]
 800af90:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800af94:	b2da      	uxtb	r2, r3
 800af96:	68fb      	ldr	r3, [r7, #12]
 800af98:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	b2db      	uxtb	r3, r3
 800af9e:	68fa      	ldr	r2, [r7, #12]
 800afa0:	3a01      	subs	r2, #1
 800afa2:	60fa      	str	r2, [r7, #12]
 800afa4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800afa8:	b2da      	uxtb	r2, r3
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800afae:	4b1f      	ldr	r3, [pc, #124]	@ (800b02c <_SendPacket+0x274>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800afb4:	4b1c      	ldr	r3, [pc, #112]	@ (800b028 <_SendPacket+0x270>)
 800afb6:	68db      	ldr	r3, [r3, #12]
 800afb8:	69ba      	ldr	r2, [r7, #24]
 800afba:	1ad3      	subs	r3, r2, r3
 800afbc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800afbe:	68bb      	ldr	r3, [r7, #8]
 800afc0:	627b      	str	r3, [r7, #36]	@ 0x24
 800afc2:	697b      	ldr	r3, [r7, #20]
 800afc4:	623b      	str	r3, [r7, #32]
 800afc6:	e00b      	b.n	800afe0 <_SendPacket+0x228>
 800afc8:	6a3b      	ldr	r3, [r7, #32]
 800afca:	b2da      	uxtb	r2, r3
 800afcc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afce:	1c59      	adds	r1, r3, #1
 800afd0:	6279      	str	r1, [r7, #36]	@ 0x24
 800afd2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800afd6:	b2d2      	uxtb	r2, r2
 800afd8:	701a      	strb	r2, [r3, #0]
 800afda:	6a3b      	ldr	r3, [r7, #32]
 800afdc:	09db      	lsrs	r3, r3, #7
 800afde:	623b      	str	r3, [r7, #32]
 800afe0:	6a3b      	ldr	r3, [r7, #32]
 800afe2:	2b7f      	cmp	r3, #127	@ 0x7f
 800afe4:	d8f0      	bhi.n	800afc8 <_SendPacket+0x210>
 800afe6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe8:	1c5a      	adds	r2, r3, #1
 800afea:	627a      	str	r2, [r7, #36]	@ 0x24
 800afec:	6a3a      	ldr	r2, [r7, #32]
 800afee:	b2d2      	uxtb	r2, r2
 800aff0:	701a      	strb	r2, [r3, #0]
 800aff2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aff4:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800aff6:	4b0c      	ldr	r3, [pc, #48]	@ (800b028 <_SendPacket+0x270>)
 800aff8:	785b      	ldrb	r3, [r3, #1]
 800affa:	4618      	mov	r0, r3
 800affc:	68ba      	ldr	r2, [r7, #8]
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	1ad3      	subs	r3, r2, r3
 800b002:	461a      	mov	r2, r3
 800b004:	68f9      	ldr	r1, [r7, #12]
 800b006:	f7f5 f8e3 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800b00a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800b00c:	693b      	ldr	r3, [r7, #16]
 800b00e:	2b00      	cmp	r3, #0
 800b010:	d003      	beq.n	800b01a <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800b012:	4a05      	ldr	r2, [pc, #20]	@ (800b028 <_SendPacket+0x270>)
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	60d3      	str	r3, [r2, #12]
 800b018:	e00f      	b.n	800b03a <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800b01a:	4b03      	ldr	r3, [pc, #12]	@ (800b028 <_SendPacket+0x270>)
 800b01c:	781b      	ldrb	r3, [r3, #0]
 800b01e:	3301      	adds	r3, #1
 800b020:	b2da      	uxtb	r2, r3
 800b022:	4b01      	ldr	r3, [pc, #4]	@ (800b028 <_SendPacket+0x270>)
 800b024:	701a      	strb	r2, [r3, #0]
 800b026:	e008      	b.n	800b03a <_SendPacket+0x282>
 800b028:	20013b8c 	.word	0x20013b8c
 800b02c:	e0001004 	.word	0xe0001004
    goto SendDone;
 800b030:	bf00      	nop
 800b032:	e002      	b.n	800b03a <_SendPacket+0x282>
      goto SendDone;
 800b034:	bf00      	nop
 800b036:	e000      	b.n	800b03a <_SendPacket+0x282>
      goto SendDone;
 800b038:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800b03a:	4b14      	ldr	r3, [pc, #80]	@ (800b08c <_SendPacket+0x2d4>)
 800b03c:	7e1b      	ldrb	r3, [r3, #24]
 800b03e:	4619      	mov	r1, r3
 800b040:	4a13      	ldr	r2, [pc, #76]	@ (800b090 <_SendPacket+0x2d8>)
 800b042:	460b      	mov	r3, r1
 800b044:	005b      	lsls	r3, r3, #1
 800b046:	440b      	add	r3, r1
 800b048:	00db      	lsls	r3, r3, #3
 800b04a:	4413      	add	r3, r2
 800b04c:	336c      	adds	r3, #108	@ 0x6c
 800b04e:	681a      	ldr	r2, [r3, #0]
 800b050:	4b0e      	ldr	r3, [pc, #56]	@ (800b08c <_SendPacket+0x2d4>)
 800b052:	7e1b      	ldrb	r3, [r3, #24]
 800b054:	4618      	mov	r0, r3
 800b056:	490e      	ldr	r1, [pc, #56]	@ (800b090 <_SendPacket+0x2d8>)
 800b058:	4603      	mov	r3, r0
 800b05a:	005b      	lsls	r3, r3, #1
 800b05c:	4403      	add	r3, r0
 800b05e:	00db      	lsls	r3, r3, #3
 800b060:	440b      	add	r3, r1
 800b062:	3370      	adds	r3, #112	@ 0x70
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	429a      	cmp	r2, r3
 800b068:	d00b      	beq.n	800b082 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800b06a:	4b08      	ldr	r3, [pc, #32]	@ (800b08c <_SendPacket+0x2d4>)
 800b06c:	789b      	ldrb	r3, [r3, #2]
 800b06e:	2b00      	cmp	r3, #0
 800b070:	d107      	bne.n	800b082 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800b072:	4b06      	ldr	r3, [pc, #24]	@ (800b08c <_SendPacket+0x2d4>)
 800b074:	2201      	movs	r2, #1
 800b076:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800b078:	f7ff fdbe 	bl	800abf8 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800b07c:	4b03      	ldr	r3, [pc, #12]	@ (800b08c <_SendPacket+0x2d4>)
 800b07e:	2200      	movs	r2, #0
 800b080:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800b082:	bf00      	nop
 800b084:	3728      	adds	r7, #40	@ 0x28
 800b086:	46bd      	mov	sp, r7
 800b088:	bd80      	pop	{r7, pc}
 800b08a:	bf00      	nop
 800b08c:	20013b8c 	.word	0x20013b8c
 800b090:	200132cc 	.word	0x200132cc

0800b094 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 800b094:	b580      	push	{r7, lr}
 800b096:	b0a2      	sub	sp, #136	@ 0x88
 800b098:	af00      	add	r7, sp, #0
 800b09a:	60f8      	str	r0, [r7, #12]
 800b09c:	60b9      	str	r1, [r7, #8]
 800b09e:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  NumArguments = 0;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  for (;;) {
    c = *p++;
 800b0aa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b0ac:	1c5a      	adds	r2, r3, #1
 800b0ae:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800b0b0:	781b      	ldrb	r3, [r3, #0]
 800b0b2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (c == 0) {
 800b0b6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d01d      	beq.n	800b0fa <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 800b0be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800b0c2:	2b25      	cmp	r3, #37	@ 0x25
 800b0c4:	d1f1      	bne.n	800b0aa <_VPrintHost+0x16>
      c = *p;
 800b0c6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800b0c8:	781b      	ldrb	r3, [r3, #0]
 800b0ca:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 800b0ce:	687b      	ldr	r3, [r7, #4]
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	1d19      	adds	r1, r3, #4
 800b0d4:	687a      	ldr	r2, [r7, #4]
 800b0d6:	6011      	str	r1, [r2, #0]
 800b0d8:	6819      	ldr	r1, [r3, #0]
 800b0da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b0de:	1c5a      	adds	r2, r3, #1
 800b0e0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b0e4:	460a      	mov	r2, r1
 800b0e6:	009b      	lsls	r3, r3, #2
 800b0e8:	3388      	adds	r3, #136	@ 0x88
 800b0ea:	443b      	add	r3, r7
 800b0ec:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 800b0f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b0f4:	2b10      	cmp	r3, #16
 800b0f6:	d002      	beq.n	800b0fe <_VPrintHost+0x6a>
    c = *p++;
 800b0f8:	e7d7      	b.n	800b0aa <_VPrintHost+0x16>
      break;
 800b0fa:	bf00      	nop
 800b0fc:	e000      	b.n	800b100 <_VPrintHost+0x6c>
        break;
 800b0fe:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 800b100:	f3ef 8311 	mrs	r3, BASEPRI
 800b104:	f04f 0120 	mov.w	r1, #32
 800b108:	f381 8811 	msr	BASEPRI, r1
 800b10c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800b10e:	483f      	ldr	r0, [pc, #252]	@ (800b20c <_VPrintHost+0x178>)
 800b110:	f7ff fd66 	bl	800abe0 <_PreparePacket>
 800b114:	6578      	str	r0, [r7, #84]	@ 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b116:	2280      	movs	r2, #128	@ 0x80
 800b118:	68f9      	ldr	r1, [r7, #12]
 800b11a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800b11c:	f7ff fd30 	bl	800ab80 <_EncodeStr>
 800b120:	67b8      	str	r0, [r7, #120]	@ 0x78
    ENCODE_U32(pPayload, Options);
 800b122:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b124:	677b      	str	r3, [r7, #116]	@ 0x74
 800b126:	68bb      	ldr	r3, [r7, #8]
 800b128:	673b      	str	r3, [r7, #112]	@ 0x70
 800b12a:	e00b      	b.n	800b144 <_VPrintHost+0xb0>
 800b12c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b12e:	b2da      	uxtb	r2, r3
 800b130:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b132:	1c59      	adds	r1, r3, #1
 800b134:	6779      	str	r1, [r7, #116]	@ 0x74
 800b136:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b13a:	b2d2      	uxtb	r2, r2
 800b13c:	701a      	strb	r2, [r3, #0]
 800b13e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b140:	09db      	lsrs	r3, r3, #7
 800b142:	673b      	str	r3, [r7, #112]	@ 0x70
 800b144:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800b146:	2b7f      	cmp	r3, #127	@ 0x7f
 800b148:	d8f0      	bhi.n	800b12c <_VPrintHost+0x98>
 800b14a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b14c:	1c5a      	adds	r2, r3, #1
 800b14e:	677a      	str	r2, [r7, #116]	@ 0x74
 800b150:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800b152:	b2d2      	uxtb	r2, r2
 800b154:	701a      	strb	r2, [r3, #0]
 800b156:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800b158:	67bb      	str	r3, [r7, #120]	@ 0x78
    ENCODE_U32(pPayload, NumArguments);
 800b15a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b15c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800b15e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b162:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b164:	e00b      	b.n	800b17e <_VPrintHost+0xea>
 800b166:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b168:	b2da      	uxtb	r2, r3
 800b16a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b16c:	1c59      	adds	r1, r3, #1
 800b16e:	66f9      	str	r1, [r7, #108]	@ 0x6c
 800b170:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b174:	b2d2      	uxtb	r2, r2
 800b176:	701a      	strb	r2, [r3, #0]
 800b178:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b17a:	09db      	lsrs	r3, r3, #7
 800b17c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b17e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b180:	2b7f      	cmp	r3, #127	@ 0x7f
 800b182:	d8f0      	bhi.n	800b166 <_VPrintHost+0xd2>
 800b184:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b186:	1c5a      	adds	r2, r3, #1
 800b188:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800b18a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b18c:	b2d2      	uxtb	r2, r2
 800b18e:	701a      	strb	r2, [r3, #0]
 800b190:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800b192:	67bb      	str	r3, [r7, #120]	@ 0x78
    pParas = aParas;
 800b194:	f107 0314 	add.w	r3, r7, #20
 800b198:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (NumArguments--) {
 800b19c:	e022      	b.n	800b1e4 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 800b19e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800b1a0:	667b      	str	r3, [r7, #100]	@ 0x64
 800b1a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	663b      	str	r3, [r7, #96]	@ 0x60
 800b1aa:	e00b      	b.n	800b1c4 <_VPrintHost+0x130>
 800b1ac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b1ae:	b2da      	uxtb	r2, r3
 800b1b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1b2:	1c59      	adds	r1, r3, #1
 800b1b4:	6679      	str	r1, [r7, #100]	@ 0x64
 800b1b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b1ba:	b2d2      	uxtb	r2, r2
 800b1bc:	701a      	strb	r2, [r3, #0]
 800b1be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b1c0:	09db      	lsrs	r3, r3, #7
 800b1c2:	663b      	str	r3, [r7, #96]	@ 0x60
 800b1c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b1c6:	2b7f      	cmp	r3, #127	@ 0x7f
 800b1c8:	d8f0      	bhi.n	800b1ac <_VPrintHost+0x118>
 800b1ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1cc:	1c5a      	adds	r2, r3, #1
 800b1ce:	667a      	str	r2, [r7, #100]	@ 0x64
 800b1d0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800b1d2:	b2d2      	uxtb	r2, r2
 800b1d4:	701a      	strb	r2, [r3, #0]
 800b1d6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b1d8:	67bb      	str	r3, [r7, #120]	@ 0x78
      pParas++;
 800b1da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800b1de:	3304      	adds	r3, #4
 800b1e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (NumArguments--) {
 800b1e4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800b1e8:	1e5a      	subs	r2, r3, #1
 800b1ea:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d1d5      	bne.n	800b19e <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800b1f2:	221a      	movs	r2, #26
 800b1f4:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b1f6:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800b1f8:	f7ff fdde 	bl	800adb8 <_SendPacket>
    RECORD_END();
 800b1fc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b1fe:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 800b202:	2300      	movs	r3, #0
}
 800b204:	4618      	mov	r0, r3
 800b206:	3788      	adds	r7, #136	@ 0x88
 800b208:	46bd      	mov	sp, r7
 800b20a:	bd80      	pop	{r7, pc}
 800b20c:	20013bbc 	.word	0x20013bbc

0800b210 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800b210:	b580      	push	{r7, lr}
 800b212:	b086      	sub	sp, #24
 800b214:	af02      	add	r7, sp, #8
 800b216:	60f8      	str	r0, [r7, #12]
 800b218:	60b9      	str	r1, [r7, #8]
 800b21a:	607a      	str	r2, [r7, #4]
 800b21c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800b21e:	2300      	movs	r3, #0
 800b220:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b224:	4917      	ldr	r1, [pc, #92]	@ (800b284 <SEGGER_SYSVIEW_Init+0x74>)
 800b226:	4818      	ldr	r0, [pc, #96]	@ (800b288 <SEGGER_SYSVIEW_Init+0x78>)
 800b228:	f7ff fbda 	bl	800a9e0 <SEGGER_RTT_AllocUpBuffer>
 800b22c:	4603      	mov	r3, r0
 800b22e:	b2da      	uxtb	r2, r3
 800b230:	4b16      	ldr	r3, [pc, #88]	@ (800b28c <SEGGER_SYSVIEW_Init+0x7c>)
 800b232:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800b234:	4b15      	ldr	r3, [pc, #84]	@ (800b28c <SEGGER_SYSVIEW_Init+0x7c>)
 800b236:	785a      	ldrb	r2, [r3, #1]
 800b238:	4b14      	ldr	r3, [pc, #80]	@ (800b28c <SEGGER_SYSVIEW_Init+0x7c>)
 800b23a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800b23c:	4b13      	ldr	r3, [pc, #76]	@ (800b28c <SEGGER_SYSVIEW_Init+0x7c>)
 800b23e:	7e1b      	ldrb	r3, [r3, #24]
 800b240:	4618      	mov	r0, r3
 800b242:	2300      	movs	r3, #0
 800b244:	9300      	str	r3, [sp, #0]
 800b246:	2308      	movs	r3, #8
 800b248:	4a11      	ldr	r2, [pc, #68]	@ (800b290 <SEGGER_SYSVIEW_Init+0x80>)
 800b24a:	490f      	ldr	r1, [pc, #60]	@ (800b288 <SEGGER_SYSVIEW_Init+0x78>)
 800b24c:	f7ff fc4c 	bl	800aae8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800b250:	4b0e      	ldr	r3, [pc, #56]	@ (800b28c <SEGGER_SYSVIEW_Init+0x7c>)
 800b252:	2200      	movs	r2, #0
 800b254:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b256:	4b0f      	ldr	r3, [pc, #60]	@ (800b294 <SEGGER_SYSVIEW_Init+0x84>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	4a0c      	ldr	r2, [pc, #48]	@ (800b28c <SEGGER_SYSVIEW_Init+0x7c>)
 800b25c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800b25e:	4a0b      	ldr	r2, [pc, #44]	@ (800b28c <SEGGER_SYSVIEW_Init+0x7c>)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800b264:	4a09      	ldr	r2, [pc, #36]	@ (800b28c <SEGGER_SYSVIEW_Init+0x7c>)
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800b26a:	4a08      	ldr	r2, [pc, #32]	@ (800b28c <SEGGER_SYSVIEW_Init+0x7c>)
 800b26c:	68bb      	ldr	r3, [r7, #8]
 800b26e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800b270:	4a06      	ldr	r2, [pc, #24]	@ (800b28c <SEGGER_SYSVIEW_Init+0x7c>)
 800b272:	683b      	ldr	r3, [r7, #0]
 800b274:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800b276:	4b05      	ldr	r3, [pc, #20]	@ (800b28c <SEGGER_SYSVIEW_Init+0x7c>)
 800b278:	2200      	movs	r2, #0
 800b27a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800b27c:	bf00      	nop
 800b27e:	3710      	adds	r7, #16
 800b280:	46bd      	mov	sp, r7
 800b282:	bd80      	pop	{r7, pc}
 800b284:	20013784 	.word	0x20013784
 800b288:	0800ff70 	.word	0x0800ff70
 800b28c:	20013b8c 	.word	0x20013b8c
 800b290:	20013b84 	.word	0x20013b84
 800b294:	e0001004 	.word	0xe0001004

0800b298 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800b298:	b480      	push	{r7}
 800b29a:	b083      	sub	sp, #12
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800b2a0:	4a04      	ldr	r2, [pc, #16]	@ (800b2b4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	6113      	str	r3, [r2, #16]
}
 800b2a6:	bf00      	nop
 800b2a8:	370c      	adds	r7, #12
 800b2aa:	46bd      	mov	sp, r7
 800b2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b0:	4770      	bx	lr
 800b2b2:	bf00      	nop
 800b2b4:	20013b8c 	.word	0x20013b8c

0800b2b8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800b2b8:	b580      	push	{r7, lr}
 800b2ba:	b084      	sub	sp, #16
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b2c0:	f3ef 8311 	mrs	r3, BASEPRI
 800b2c4:	f04f 0120 	mov.w	r1, #32
 800b2c8:	f381 8811 	msr	BASEPRI, r1
 800b2cc:	60fb      	str	r3, [r7, #12]
 800b2ce:	4808      	ldr	r0, [pc, #32]	@ (800b2f0 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800b2d0:	f7ff fc86 	bl	800abe0 <_PreparePacket>
 800b2d4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800b2d6:	687a      	ldr	r2, [r7, #4]
 800b2d8:	68b9      	ldr	r1, [r7, #8]
 800b2da:	68b8      	ldr	r0, [r7, #8]
 800b2dc:	f7ff fd6c 	bl	800adb8 <_SendPacket>
  RECORD_END();
 800b2e0:	68fb      	ldr	r3, [r7, #12]
 800b2e2:	f383 8811 	msr	BASEPRI, r3
}
 800b2e6:	bf00      	nop
 800b2e8:	3710      	adds	r7, #16
 800b2ea:	46bd      	mov	sp, r7
 800b2ec:	bd80      	pop	{r7, pc}
 800b2ee:	bf00      	nop
 800b2f0:	20013bbc 	.word	0x20013bbc

0800b2f4 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800b2f4:	b580      	push	{r7, lr}
 800b2f6:	b088      	sub	sp, #32
 800b2f8:	af00      	add	r7, sp, #0
 800b2fa:	6078      	str	r0, [r7, #4]
 800b2fc:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b2fe:	f3ef 8311 	mrs	r3, BASEPRI
 800b302:	f04f 0120 	mov.w	r1, #32
 800b306:	f381 8811 	msr	BASEPRI, r1
 800b30a:	617b      	str	r3, [r7, #20]
 800b30c:	4816      	ldr	r0, [pc, #88]	@ (800b368 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800b30e:	f7ff fc67 	bl	800abe0 <_PreparePacket>
 800b312:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	61fb      	str	r3, [r7, #28]
 800b31c:	683b      	ldr	r3, [r7, #0]
 800b31e:	61bb      	str	r3, [r7, #24]
 800b320:	e00b      	b.n	800b33a <SEGGER_SYSVIEW_RecordU32+0x46>
 800b322:	69bb      	ldr	r3, [r7, #24]
 800b324:	b2da      	uxtb	r2, r3
 800b326:	69fb      	ldr	r3, [r7, #28]
 800b328:	1c59      	adds	r1, r3, #1
 800b32a:	61f9      	str	r1, [r7, #28]
 800b32c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b330:	b2d2      	uxtb	r2, r2
 800b332:	701a      	strb	r2, [r3, #0]
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	09db      	lsrs	r3, r3, #7
 800b338:	61bb      	str	r3, [r7, #24]
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	2b7f      	cmp	r3, #127	@ 0x7f
 800b33e:	d8f0      	bhi.n	800b322 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800b340:	69fb      	ldr	r3, [r7, #28]
 800b342:	1c5a      	adds	r2, r3, #1
 800b344:	61fa      	str	r2, [r7, #28]
 800b346:	69ba      	ldr	r2, [r7, #24]
 800b348:	b2d2      	uxtb	r2, r2
 800b34a:	701a      	strb	r2, [r3, #0]
 800b34c:	69fb      	ldr	r3, [r7, #28]
 800b34e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b350:	687a      	ldr	r2, [r7, #4]
 800b352:	68f9      	ldr	r1, [r7, #12]
 800b354:	6938      	ldr	r0, [r7, #16]
 800b356:	f7ff fd2f 	bl	800adb8 <_SendPacket>
  RECORD_END();
 800b35a:	697b      	ldr	r3, [r7, #20]
 800b35c:	f383 8811 	msr	BASEPRI, r3
}
 800b360:	bf00      	nop
 800b362:	3720      	adds	r7, #32
 800b364:	46bd      	mov	sp, r7
 800b366:	bd80      	pop	{r7, pc}
 800b368:	20013bbc 	.word	0x20013bbc

0800b36c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800b36c:	b580      	push	{r7, lr}
 800b36e:	b08c      	sub	sp, #48	@ 0x30
 800b370:	af00      	add	r7, sp, #0
 800b372:	60f8      	str	r0, [r7, #12]
 800b374:	60b9      	str	r1, [r7, #8]
 800b376:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800b378:	f3ef 8311 	mrs	r3, BASEPRI
 800b37c:	f04f 0120 	mov.w	r1, #32
 800b380:	f381 8811 	msr	BASEPRI, r1
 800b384:	61fb      	str	r3, [r7, #28]
 800b386:	4825      	ldr	r0, [pc, #148]	@ (800b41c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800b388:	f7ff fc2a 	bl	800abe0 <_PreparePacket>
 800b38c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800b392:	697b      	ldr	r3, [r7, #20]
 800b394:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b396:	68bb      	ldr	r3, [r7, #8]
 800b398:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b39a:	e00b      	b.n	800b3b4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800b39c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b39e:	b2da      	uxtb	r2, r3
 800b3a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3a2:	1c59      	adds	r1, r3, #1
 800b3a4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b3a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b3aa:	b2d2      	uxtb	r2, r2
 800b3ac:	701a      	strb	r2, [r3, #0]
 800b3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3b0:	09db      	lsrs	r3, r3, #7
 800b3b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b3b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3b6:	2b7f      	cmp	r3, #127	@ 0x7f
 800b3b8:	d8f0      	bhi.n	800b39c <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800b3ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3bc:	1c5a      	adds	r2, r3, #1
 800b3be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b3c0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b3c2:	b2d2      	uxtb	r2, r2
 800b3c4:	701a      	strb	r2, [r3, #0]
 800b3c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b3c8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800b3ca:	697b      	ldr	r3, [r7, #20]
 800b3cc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	623b      	str	r3, [r7, #32]
 800b3d2:	e00b      	b.n	800b3ec <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800b3d4:	6a3b      	ldr	r3, [r7, #32]
 800b3d6:	b2da      	uxtb	r2, r3
 800b3d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3da:	1c59      	adds	r1, r3, #1
 800b3dc:	6279      	str	r1, [r7, #36]	@ 0x24
 800b3de:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b3e2:	b2d2      	uxtb	r2, r2
 800b3e4:	701a      	strb	r2, [r3, #0]
 800b3e6:	6a3b      	ldr	r3, [r7, #32]
 800b3e8:	09db      	lsrs	r3, r3, #7
 800b3ea:	623b      	str	r3, [r7, #32]
 800b3ec:	6a3b      	ldr	r3, [r7, #32]
 800b3ee:	2b7f      	cmp	r3, #127	@ 0x7f
 800b3f0:	d8f0      	bhi.n	800b3d4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800b3f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b3f4:	1c5a      	adds	r2, r3, #1
 800b3f6:	627a      	str	r2, [r7, #36]	@ 0x24
 800b3f8:	6a3a      	ldr	r2, [r7, #32]
 800b3fa:	b2d2      	uxtb	r2, r2
 800b3fc:	701a      	strb	r2, [r3, #0]
 800b3fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b400:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b402:	68fa      	ldr	r2, [r7, #12]
 800b404:	6979      	ldr	r1, [r7, #20]
 800b406:	69b8      	ldr	r0, [r7, #24]
 800b408:	f7ff fcd6 	bl	800adb8 <_SendPacket>
  RECORD_END();
 800b40c:	69fb      	ldr	r3, [r7, #28]
 800b40e:	f383 8811 	msr	BASEPRI, r3
}
 800b412:	bf00      	nop
 800b414:	3730      	adds	r7, #48	@ 0x30
 800b416:	46bd      	mov	sp, r7
 800b418:	bd80      	pop	{r7, pc}
 800b41a:	bf00      	nop
 800b41c:	20013bbc 	.word	0x20013bbc

0800b420 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800b420:	b580      	push	{r7, lr}
 800b422:	b08c      	sub	sp, #48	@ 0x30
 800b424:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800b426:	4b58      	ldr	r3, [pc, #352]	@ (800b588 <SEGGER_SYSVIEW_Start+0x168>)
 800b428:	2201      	movs	r2, #1
 800b42a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800b42c:	f3ef 8311 	mrs	r3, BASEPRI
 800b430:	f04f 0120 	mov.w	r1, #32
 800b434:	f381 8811 	msr	BASEPRI, r1
 800b438:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800b43a:	4b53      	ldr	r3, [pc, #332]	@ (800b588 <SEGGER_SYSVIEW_Start+0x168>)
 800b43c:	785b      	ldrb	r3, [r3, #1]
 800b43e:	220a      	movs	r2, #10
 800b440:	4952      	ldr	r1, [pc, #328]	@ (800b58c <SEGGER_SYSVIEW_Start+0x16c>)
 800b442:	4618      	mov	r0, r3
 800b444:	f7f4 fec4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800b44e:	200a      	movs	r0, #10
 800b450:	f7ff ff32 	bl	800b2b8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800b454:	f3ef 8311 	mrs	r3, BASEPRI
 800b458:	f04f 0120 	mov.w	r1, #32
 800b45c:	f381 8811 	msr	BASEPRI, r1
 800b460:	60bb      	str	r3, [r7, #8]
 800b462:	484b      	ldr	r0, [pc, #300]	@ (800b590 <SEGGER_SYSVIEW_Start+0x170>)
 800b464:	f7ff fbbc 	bl	800abe0 <_PreparePacket>
 800b468:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800b46a:	687b      	ldr	r3, [r7, #4]
 800b46c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800b46e:	683b      	ldr	r3, [r7, #0]
 800b470:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b472:	4b45      	ldr	r3, [pc, #276]	@ (800b588 <SEGGER_SYSVIEW_Start+0x168>)
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b478:	e00b      	b.n	800b492 <SEGGER_SYSVIEW_Start+0x72>
 800b47a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b47c:	b2da      	uxtb	r2, r3
 800b47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b480:	1c59      	adds	r1, r3, #1
 800b482:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b484:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b488:	b2d2      	uxtb	r2, r2
 800b48a:	701a      	strb	r2, [r3, #0]
 800b48c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b48e:	09db      	lsrs	r3, r3, #7
 800b490:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b492:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b494:	2b7f      	cmp	r3, #127	@ 0x7f
 800b496:	d8f0      	bhi.n	800b47a <SEGGER_SYSVIEW_Start+0x5a>
 800b498:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b49a:	1c5a      	adds	r2, r3, #1
 800b49c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b49e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b4a0:	b2d2      	uxtb	r2, r2
 800b4a2:	701a      	strb	r2, [r3, #0]
 800b4a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b4a6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800b4a8:	683b      	ldr	r3, [r7, #0]
 800b4aa:	627b      	str	r3, [r7, #36]	@ 0x24
 800b4ac:	4b36      	ldr	r3, [pc, #216]	@ (800b588 <SEGGER_SYSVIEW_Start+0x168>)
 800b4ae:	689b      	ldr	r3, [r3, #8]
 800b4b0:	623b      	str	r3, [r7, #32]
 800b4b2:	e00b      	b.n	800b4cc <SEGGER_SYSVIEW_Start+0xac>
 800b4b4:	6a3b      	ldr	r3, [r7, #32]
 800b4b6:	b2da      	uxtb	r2, r3
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4ba:	1c59      	adds	r1, r3, #1
 800b4bc:	6279      	str	r1, [r7, #36]	@ 0x24
 800b4be:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b4c2:	b2d2      	uxtb	r2, r2
 800b4c4:	701a      	strb	r2, [r3, #0]
 800b4c6:	6a3b      	ldr	r3, [r7, #32]
 800b4c8:	09db      	lsrs	r3, r3, #7
 800b4ca:	623b      	str	r3, [r7, #32]
 800b4cc:	6a3b      	ldr	r3, [r7, #32]
 800b4ce:	2b7f      	cmp	r3, #127	@ 0x7f
 800b4d0:	d8f0      	bhi.n	800b4b4 <SEGGER_SYSVIEW_Start+0x94>
 800b4d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4d4:	1c5a      	adds	r2, r3, #1
 800b4d6:	627a      	str	r2, [r7, #36]	@ 0x24
 800b4d8:	6a3a      	ldr	r2, [r7, #32]
 800b4da:	b2d2      	uxtb	r2, r2
 800b4dc:	701a      	strb	r2, [r3, #0]
 800b4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b4e0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800b4e2:	683b      	ldr	r3, [r7, #0]
 800b4e4:	61fb      	str	r3, [r7, #28]
 800b4e6:	4b28      	ldr	r3, [pc, #160]	@ (800b588 <SEGGER_SYSVIEW_Start+0x168>)
 800b4e8:	691b      	ldr	r3, [r3, #16]
 800b4ea:	61bb      	str	r3, [r7, #24]
 800b4ec:	e00b      	b.n	800b506 <SEGGER_SYSVIEW_Start+0xe6>
 800b4ee:	69bb      	ldr	r3, [r7, #24]
 800b4f0:	b2da      	uxtb	r2, r3
 800b4f2:	69fb      	ldr	r3, [r7, #28]
 800b4f4:	1c59      	adds	r1, r3, #1
 800b4f6:	61f9      	str	r1, [r7, #28]
 800b4f8:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b4fc:	b2d2      	uxtb	r2, r2
 800b4fe:	701a      	strb	r2, [r3, #0]
 800b500:	69bb      	ldr	r3, [r7, #24]
 800b502:	09db      	lsrs	r3, r3, #7
 800b504:	61bb      	str	r3, [r7, #24]
 800b506:	69bb      	ldr	r3, [r7, #24]
 800b508:	2b7f      	cmp	r3, #127	@ 0x7f
 800b50a:	d8f0      	bhi.n	800b4ee <SEGGER_SYSVIEW_Start+0xce>
 800b50c:	69fb      	ldr	r3, [r7, #28]
 800b50e:	1c5a      	adds	r2, r3, #1
 800b510:	61fa      	str	r2, [r7, #28]
 800b512:	69ba      	ldr	r2, [r7, #24]
 800b514:	b2d2      	uxtb	r2, r2
 800b516:	701a      	strb	r2, [r3, #0]
 800b518:	69fb      	ldr	r3, [r7, #28]
 800b51a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800b51c:	683b      	ldr	r3, [r7, #0]
 800b51e:	617b      	str	r3, [r7, #20]
 800b520:	2300      	movs	r3, #0
 800b522:	613b      	str	r3, [r7, #16]
 800b524:	e00b      	b.n	800b53e <SEGGER_SYSVIEW_Start+0x11e>
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	b2da      	uxtb	r2, r3
 800b52a:	697b      	ldr	r3, [r7, #20]
 800b52c:	1c59      	adds	r1, r3, #1
 800b52e:	6179      	str	r1, [r7, #20]
 800b530:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b534:	b2d2      	uxtb	r2, r2
 800b536:	701a      	strb	r2, [r3, #0]
 800b538:	693b      	ldr	r3, [r7, #16]
 800b53a:	09db      	lsrs	r3, r3, #7
 800b53c:	613b      	str	r3, [r7, #16]
 800b53e:	693b      	ldr	r3, [r7, #16]
 800b540:	2b7f      	cmp	r3, #127	@ 0x7f
 800b542:	d8f0      	bhi.n	800b526 <SEGGER_SYSVIEW_Start+0x106>
 800b544:	697b      	ldr	r3, [r7, #20]
 800b546:	1c5a      	adds	r2, r3, #1
 800b548:	617a      	str	r2, [r7, #20]
 800b54a:	693a      	ldr	r2, [r7, #16]
 800b54c:	b2d2      	uxtb	r2, r2
 800b54e:	701a      	strb	r2, [r3, #0]
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800b554:	2218      	movs	r2, #24
 800b556:	6839      	ldr	r1, [r7, #0]
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f7ff fc2d 	bl	800adb8 <_SendPacket>
      RECORD_END();
 800b55e:	68bb      	ldr	r3, [r7, #8]
 800b560:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800b564:	4b08      	ldr	r3, [pc, #32]	@ (800b588 <SEGGER_SYSVIEW_Start+0x168>)
 800b566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d002      	beq.n	800b572 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800b56c:	4b06      	ldr	r3, [pc, #24]	@ (800b588 <SEGGER_SYSVIEW_Start+0x168>)
 800b56e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b570:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800b572:	f000 f9eb 	bl	800b94c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800b576:	f000 f9b1 	bl	800b8dc <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800b57a:	f000 fba3 	bl	800bcc4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800b57e:	bf00      	nop
 800b580:	3730      	adds	r7, #48	@ 0x30
 800b582:	46bd      	mov	sp, r7
 800b584:	bd80      	pop	{r7, pc}
 800b586:	bf00      	nop
 800b588:	20013b8c 	.word	0x20013b8c
 800b58c:	0800ffb4 	.word	0x0800ffb4
 800b590:	20013bbc 	.word	0x20013bbc

0800b594 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b59a:	f3ef 8311 	mrs	r3, BASEPRI
 800b59e:	f04f 0120 	mov.w	r1, #32
 800b5a2:	f381 8811 	msr	BASEPRI, r1
 800b5a6:	607b      	str	r3, [r7, #4]
 800b5a8:	480b      	ldr	r0, [pc, #44]	@ (800b5d8 <SEGGER_SYSVIEW_Stop+0x44>)
 800b5aa:	f7ff fb19 	bl	800abe0 <_PreparePacket>
 800b5ae:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800b5b0:	4b0a      	ldr	r3, [pc, #40]	@ (800b5dc <SEGGER_SYSVIEW_Stop+0x48>)
 800b5b2:	781b      	ldrb	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d007      	beq.n	800b5c8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800b5b8:	220b      	movs	r2, #11
 800b5ba:	6839      	ldr	r1, [r7, #0]
 800b5bc:	6838      	ldr	r0, [r7, #0]
 800b5be:	f7ff fbfb 	bl	800adb8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800b5c2:	4b06      	ldr	r3, [pc, #24]	@ (800b5dc <SEGGER_SYSVIEW_Stop+0x48>)
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	f383 8811 	msr	BASEPRI, r3
}
 800b5ce:	bf00      	nop
 800b5d0:	3708      	adds	r7, #8
 800b5d2:	46bd      	mov	sp, r7
 800b5d4:	bd80      	pop	{r7, pc}
 800b5d6:	bf00      	nop
 800b5d8:	20013bbc 	.word	0x20013bbc
 800b5dc:	20013b8c 	.word	0x20013b8c

0800b5e0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b08c      	sub	sp, #48	@ 0x30
 800b5e4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800b5e6:	f3ef 8311 	mrs	r3, BASEPRI
 800b5ea:	f04f 0120 	mov.w	r1, #32
 800b5ee:	f381 8811 	msr	BASEPRI, r1
 800b5f2:	60fb      	str	r3, [r7, #12]
 800b5f4:	4845      	ldr	r0, [pc, #276]	@ (800b70c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800b5f6:	f7ff faf3 	bl	800abe0 <_PreparePacket>
 800b5fa:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800b5fc:	68bb      	ldr	r3, [r7, #8]
 800b5fe:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b604:	4b42      	ldr	r3, [pc, #264]	@ (800b710 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b606:	685b      	ldr	r3, [r3, #4]
 800b608:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b60a:	e00b      	b.n	800b624 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800b60c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b60e:	b2da      	uxtb	r2, r3
 800b610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b612:	1c59      	adds	r1, r3, #1
 800b614:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b616:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b61a:	b2d2      	uxtb	r2, r2
 800b61c:	701a      	strb	r2, [r3, #0]
 800b61e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b620:	09db      	lsrs	r3, r3, #7
 800b622:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b624:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b626:	2b7f      	cmp	r3, #127	@ 0x7f
 800b628:	d8f0      	bhi.n	800b60c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800b62a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b62c:	1c5a      	adds	r2, r3, #1
 800b62e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b630:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b632:	b2d2      	uxtb	r2, r2
 800b634:	701a      	strb	r2, [r3, #0]
 800b636:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b638:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b63e:	4b34      	ldr	r3, [pc, #208]	@ (800b710 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b640:	689b      	ldr	r3, [r3, #8]
 800b642:	623b      	str	r3, [r7, #32]
 800b644:	e00b      	b.n	800b65e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800b646:	6a3b      	ldr	r3, [r7, #32]
 800b648:	b2da      	uxtb	r2, r3
 800b64a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b64c:	1c59      	adds	r1, r3, #1
 800b64e:	6279      	str	r1, [r7, #36]	@ 0x24
 800b650:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b654:	b2d2      	uxtb	r2, r2
 800b656:	701a      	strb	r2, [r3, #0]
 800b658:	6a3b      	ldr	r3, [r7, #32]
 800b65a:	09db      	lsrs	r3, r3, #7
 800b65c:	623b      	str	r3, [r7, #32]
 800b65e:	6a3b      	ldr	r3, [r7, #32]
 800b660:	2b7f      	cmp	r3, #127	@ 0x7f
 800b662:	d8f0      	bhi.n	800b646 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800b664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b666:	1c5a      	adds	r2, r3, #1
 800b668:	627a      	str	r2, [r7, #36]	@ 0x24
 800b66a:	6a3a      	ldr	r2, [r7, #32]
 800b66c:	b2d2      	uxtb	r2, r2
 800b66e:	701a      	strb	r2, [r3, #0]
 800b670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b672:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	61fb      	str	r3, [r7, #28]
 800b678:	4b25      	ldr	r3, [pc, #148]	@ (800b710 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b67a:	691b      	ldr	r3, [r3, #16]
 800b67c:	61bb      	str	r3, [r7, #24]
 800b67e:	e00b      	b.n	800b698 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800b680:	69bb      	ldr	r3, [r7, #24]
 800b682:	b2da      	uxtb	r2, r3
 800b684:	69fb      	ldr	r3, [r7, #28]
 800b686:	1c59      	adds	r1, r3, #1
 800b688:	61f9      	str	r1, [r7, #28]
 800b68a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b68e:	b2d2      	uxtb	r2, r2
 800b690:	701a      	strb	r2, [r3, #0]
 800b692:	69bb      	ldr	r3, [r7, #24]
 800b694:	09db      	lsrs	r3, r3, #7
 800b696:	61bb      	str	r3, [r7, #24]
 800b698:	69bb      	ldr	r3, [r7, #24]
 800b69a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b69c:	d8f0      	bhi.n	800b680 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800b69e:	69fb      	ldr	r3, [r7, #28]
 800b6a0:	1c5a      	adds	r2, r3, #1
 800b6a2:	61fa      	str	r2, [r7, #28]
 800b6a4:	69ba      	ldr	r2, [r7, #24]
 800b6a6:	b2d2      	uxtb	r2, r2
 800b6a8:	701a      	strb	r2, [r3, #0]
 800b6aa:	69fb      	ldr	r3, [r7, #28]
 800b6ac:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	617b      	str	r3, [r7, #20]
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	613b      	str	r3, [r7, #16]
 800b6b6:	e00b      	b.n	800b6d0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800b6b8:	693b      	ldr	r3, [r7, #16]
 800b6ba:	b2da      	uxtb	r2, r3
 800b6bc:	697b      	ldr	r3, [r7, #20]
 800b6be:	1c59      	adds	r1, r3, #1
 800b6c0:	6179      	str	r1, [r7, #20]
 800b6c2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b6c6:	b2d2      	uxtb	r2, r2
 800b6c8:	701a      	strb	r2, [r3, #0]
 800b6ca:	693b      	ldr	r3, [r7, #16]
 800b6cc:	09db      	lsrs	r3, r3, #7
 800b6ce:	613b      	str	r3, [r7, #16]
 800b6d0:	693b      	ldr	r3, [r7, #16]
 800b6d2:	2b7f      	cmp	r3, #127	@ 0x7f
 800b6d4:	d8f0      	bhi.n	800b6b8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800b6d6:	697b      	ldr	r3, [r7, #20]
 800b6d8:	1c5a      	adds	r2, r3, #1
 800b6da:	617a      	str	r2, [r7, #20]
 800b6dc:	693a      	ldr	r2, [r7, #16]
 800b6de:	b2d2      	uxtb	r2, r2
 800b6e0:	701a      	strb	r2, [r3, #0]
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800b6e6:	2218      	movs	r2, #24
 800b6e8:	6879      	ldr	r1, [r7, #4]
 800b6ea:	68b8      	ldr	r0, [r7, #8]
 800b6ec:	f7ff fb64 	bl	800adb8 <_SendPacket>
  RECORD_END();
 800b6f0:	68fb      	ldr	r3, [r7, #12]
 800b6f2:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800b6f6:	4b06      	ldr	r3, [pc, #24]	@ (800b710 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b6f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	d002      	beq.n	800b704 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800b6fe:	4b04      	ldr	r3, [pc, #16]	@ (800b710 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b702:	4798      	blx	r3
  }
}
 800b704:	bf00      	nop
 800b706:	3730      	adds	r7, #48	@ 0x30
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	20013bbc 	.word	0x20013bbc
 800b710:	20013b8c 	.word	0x20013b8c

0800b714 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800b714:	b580      	push	{r7, lr}
 800b716:	b092      	sub	sp, #72	@ 0x48
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800b71c:	f3ef 8311 	mrs	r3, BASEPRI
 800b720:	f04f 0120 	mov.w	r1, #32
 800b724:	f381 8811 	msr	BASEPRI, r1
 800b728:	617b      	str	r3, [r7, #20]
 800b72a:	486a      	ldr	r0, [pc, #424]	@ (800b8d4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800b72c:	f7ff fa58 	bl	800abe0 <_PreparePacket>
 800b730:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b732:	693b      	ldr	r3, [r7, #16]
 800b734:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800b736:	68fb      	ldr	r3, [r7, #12]
 800b738:	647b      	str	r3, [r7, #68]	@ 0x44
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681a      	ldr	r2, [r3, #0]
 800b73e:	4b66      	ldr	r3, [pc, #408]	@ (800b8d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800b740:	691b      	ldr	r3, [r3, #16]
 800b742:	1ad3      	subs	r3, r2, r3
 800b744:	643b      	str	r3, [r7, #64]	@ 0x40
 800b746:	e00b      	b.n	800b760 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800b748:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b74a:	b2da      	uxtb	r2, r3
 800b74c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b74e:	1c59      	adds	r1, r3, #1
 800b750:	6479      	str	r1, [r7, #68]	@ 0x44
 800b752:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b756:	b2d2      	uxtb	r2, r2
 800b758:	701a      	strb	r2, [r3, #0]
 800b75a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b75c:	09db      	lsrs	r3, r3, #7
 800b75e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b760:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b762:	2b7f      	cmp	r3, #127	@ 0x7f
 800b764:	d8f0      	bhi.n	800b748 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800b766:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b768:	1c5a      	adds	r2, r3, #1
 800b76a:	647a      	str	r2, [r7, #68]	@ 0x44
 800b76c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b76e:	b2d2      	uxtb	r2, r2
 800b770:	701a      	strb	r2, [r3, #0]
 800b772:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b774:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	689b      	ldr	r3, [r3, #8]
 800b77e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b780:	e00b      	b.n	800b79a <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800b782:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b784:	b2da      	uxtb	r2, r3
 800b786:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b788:	1c59      	adds	r1, r3, #1
 800b78a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800b78c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b790:	b2d2      	uxtb	r2, r2
 800b792:	701a      	strb	r2, [r3, #0]
 800b794:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b796:	09db      	lsrs	r3, r3, #7
 800b798:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b79a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b79c:	2b7f      	cmp	r3, #127	@ 0x7f
 800b79e:	d8f0      	bhi.n	800b782 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800b7a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7a2:	1c5a      	adds	r2, r3, #1
 800b7a4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b7a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b7a8:	b2d2      	uxtb	r2, r2
 800b7aa:	701a      	strb	r2, [r3, #0]
 800b7ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b7ae:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	685b      	ldr	r3, [r3, #4]
 800b7b4:	2220      	movs	r2, #32
 800b7b6:	4619      	mov	r1, r3
 800b7b8:	68f8      	ldr	r0, [r7, #12]
 800b7ba:	f7ff f9e1 	bl	800ab80 <_EncodeStr>
 800b7be:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800b7c0:	2209      	movs	r2, #9
 800b7c2:	68f9      	ldr	r1, [r7, #12]
 800b7c4:	6938      	ldr	r0, [r7, #16]
 800b7c6:	f7ff faf7 	bl	800adb8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800b7ca:	693b      	ldr	r3, [r7, #16]
 800b7cc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b7d2:	687b      	ldr	r3, [r7, #4]
 800b7d4:	681a      	ldr	r2, [r3, #0]
 800b7d6:	4b40      	ldr	r3, [pc, #256]	@ (800b8d8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800b7d8:	691b      	ldr	r3, [r3, #16]
 800b7da:	1ad3      	subs	r3, r2, r3
 800b7dc:	633b      	str	r3, [r7, #48]	@ 0x30
 800b7de:	e00b      	b.n	800b7f8 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800b7e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7e2:	b2da      	uxtb	r2, r3
 800b7e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b7e6:	1c59      	adds	r1, r3, #1
 800b7e8:	6379      	str	r1, [r7, #52]	@ 0x34
 800b7ea:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b7ee:	b2d2      	uxtb	r2, r2
 800b7f0:	701a      	strb	r2, [r3, #0]
 800b7f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7f4:	09db      	lsrs	r3, r3, #7
 800b7f6:	633b      	str	r3, [r7, #48]	@ 0x30
 800b7f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b7fa:	2b7f      	cmp	r3, #127	@ 0x7f
 800b7fc:	d8f0      	bhi.n	800b7e0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800b7fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b800:	1c5a      	adds	r2, r3, #1
 800b802:	637a      	str	r2, [r7, #52]	@ 0x34
 800b804:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b806:	b2d2      	uxtb	r2, r2
 800b808:	701a      	strb	r2, [r3, #0]
 800b80a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b80c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800b80e:	68fb      	ldr	r3, [r7, #12]
 800b810:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b812:	687b      	ldr	r3, [r7, #4]
 800b814:	68db      	ldr	r3, [r3, #12]
 800b816:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b818:	e00b      	b.n	800b832 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800b81a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b81c:	b2da      	uxtb	r2, r3
 800b81e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b820:	1c59      	adds	r1, r3, #1
 800b822:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b824:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b828:	b2d2      	uxtb	r2, r2
 800b82a:	701a      	strb	r2, [r3, #0]
 800b82c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b82e:	09db      	lsrs	r3, r3, #7
 800b830:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b832:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b834:	2b7f      	cmp	r3, #127	@ 0x7f
 800b836:	d8f0      	bhi.n	800b81a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800b838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b83a:	1c5a      	adds	r2, r3, #1
 800b83c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b83e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b840:	b2d2      	uxtb	r2, r2
 800b842:	701a      	strb	r2, [r3, #0]
 800b844:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b846:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b84c:	687b      	ldr	r3, [r7, #4]
 800b84e:	691b      	ldr	r3, [r3, #16]
 800b850:	623b      	str	r3, [r7, #32]
 800b852:	e00b      	b.n	800b86c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800b854:	6a3b      	ldr	r3, [r7, #32]
 800b856:	b2da      	uxtb	r2, r3
 800b858:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b85a:	1c59      	adds	r1, r3, #1
 800b85c:	6279      	str	r1, [r7, #36]	@ 0x24
 800b85e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b862:	b2d2      	uxtb	r2, r2
 800b864:	701a      	strb	r2, [r3, #0]
 800b866:	6a3b      	ldr	r3, [r7, #32]
 800b868:	09db      	lsrs	r3, r3, #7
 800b86a:	623b      	str	r3, [r7, #32]
 800b86c:	6a3b      	ldr	r3, [r7, #32]
 800b86e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b870:	d8f0      	bhi.n	800b854 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800b872:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b874:	1c5a      	adds	r2, r3, #1
 800b876:	627a      	str	r2, [r7, #36]	@ 0x24
 800b878:	6a3a      	ldr	r2, [r7, #32]
 800b87a:	b2d2      	uxtb	r2, r2
 800b87c:	701a      	strb	r2, [r3, #0]
 800b87e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b880:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	61fb      	str	r3, [r7, #28]
 800b886:	2300      	movs	r3, #0
 800b888:	61bb      	str	r3, [r7, #24]
 800b88a:	e00b      	b.n	800b8a4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800b88c:	69bb      	ldr	r3, [r7, #24]
 800b88e:	b2da      	uxtb	r2, r3
 800b890:	69fb      	ldr	r3, [r7, #28]
 800b892:	1c59      	adds	r1, r3, #1
 800b894:	61f9      	str	r1, [r7, #28]
 800b896:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b89a:	b2d2      	uxtb	r2, r2
 800b89c:	701a      	strb	r2, [r3, #0]
 800b89e:	69bb      	ldr	r3, [r7, #24]
 800b8a0:	09db      	lsrs	r3, r3, #7
 800b8a2:	61bb      	str	r3, [r7, #24]
 800b8a4:	69bb      	ldr	r3, [r7, #24]
 800b8a6:	2b7f      	cmp	r3, #127	@ 0x7f
 800b8a8:	d8f0      	bhi.n	800b88c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800b8aa:	69fb      	ldr	r3, [r7, #28]
 800b8ac:	1c5a      	adds	r2, r3, #1
 800b8ae:	61fa      	str	r2, [r7, #28]
 800b8b0:	69ba      	ldr	r2, [r7, #24]
 800b8b2:	b2d2      	uxtb	r2, r2
 800b8b4:	701a      	strb	r2, [r3, #0]
 800b8b6:	69fb      	ldr	r3, [r7, #28]
 800b8b8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800b8ba:	2215      	movs	r2, #21
 800b8bc:	68f9      	ldr	r1, [r7, #12]
 800b8be:	6938      	ldr	r0, [r7, #16]
 800b8c0:	f7ff fa7a 	bl	800adb8 <_SendPacket>
  RECORD_END();
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	f383 8811 	msr	BASEPRI, r3
}
 800b8ca:	bf00      	nop
 800b8cc:	3748      	adds	r7, #72	@ 0x48
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	20013bbc 	.word	0x20013bbc
 800b8d8:	20013b8c 	.word	0x20013b8c

0800b8dc <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800b8e0:	4b07      	ldr	r3, [pc, #28]	@ (800b900 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b8e2:	6a1b      	ldr	r3, [r3, #32]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d008      	beq.n	800b8fa <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800b8e8:	4b05      	ldr	r3, [pc, #20]	@ (800b900 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b8ea:	6a1b      	ldr	r3, [r3, #32]
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d003      	beq.n	800b8fa <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800b8f2:	4b03      	ldr	r3, [pc, #12]	@ (800b900 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b8f4:	6a1b      	ldr	r3, [r3, #32]
 800b8f6:	685b      	ldr	r3, [r3, #4]
 800b8f8:	4798      	blx	r3
  }
}
 800b8fa:	bf00      	nop
 800b8fc:	bd80      	pop	{r7, pc}
 800b8fe:	bf00      	nop
 800b900:	20013b8c 	.word	0x20013b8c

0800b904 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800b904:	b580      	push	{r7, lr}
 800b906:	b086      	sub	sp, #24
 800b908:	af00      	add	r7, sp, #0
 800b90a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b90c:	f3ef 8311 	mrs	r3, BASEPRI
 800b910:	f04f 0120 	mov.w	r1, #32
 800b914:	f381 8811 	msr	BASEPRI, r1
 800b918:	617b      	str	r3, [r7, #20]
 800b91a:	480b      	ldr	r0, [pc, #44]	@ (800b948 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800b91c:	f7ff f960 	bl	800abe0 <_PreparePacket>
 800b920:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b922:	2280      	movs	r2, #128	@ 0x80
 800b924:	6879      	ldr	r1, [r7, #4]
 800b926:	6938      	ldr	r0, [r7, #16]
 800b928:	f7ff f92a 	bl	800ab80 <_EncodeStr>
 800b92c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800b92e:	220e      	movs	r2, #14
 800b930:	68f9      	ldr	r1, [r7, #12]
 800b932:	6938      	ldr	r0, [r7, #16]
 800b934:	f7ff fa40 	bl	800adb8 <_SendPacket>
  RECORD_END();
 800b938:	697b      	ldr	r3, [r7, #20]
 800b93a:	f383 8811 	msr	BASEPRI, r3
}
 800b93e:	bf00      	nop
 800b940:	3718      	adds	r7, #24
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	20013bbc 	.word	0x20013bbc

0800b94c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800b94c:	b590      	push	{r4, r7, lr}
 800b94e:	b083      	sub	sp, #12
 800b950:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800b952:	4b15      	ldr	r3, [pc, #84]	@ (800b9a8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800b954:	6a1b      	ldr	r3, [r3, #32]
 800b956:	2b00      	cmp	r3, #0
 800b958:	d01a      	beq.n	800b990 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800b95a:	4b13      	ldr	r3, [pc, #76]	@ (800b9a8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800b95c:	6a1b      	ldr	r3, [r3, #32]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d015      	beq.n	800b990 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800b964:	4b10      	ldr	r3, [pc, #64]	@ (800b9a8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800b966:	6a1b      	ldr	r3, [r3, #32]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	4798      	blx	r3
 800b96c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800b970:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800b972:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b976:	f04f 0200 	mov.w	r2, #0
 800b97a:	f04f 0300 	mov.w	r3, #0
 800b97e:	000a      	movs	r2, r1
 800b980:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800b982:	4613      	mov	r3, r2
 800b984:	461a      	mov	r2, r3
 800b986:	4621      	mov	r1, r4
 800b988:	200d      	movs	r0, #13
 800b98a:	f7ff fcef 	bl	800b36c <SEGGER_SYSVIEW_RecordU32x2>
 800b98e:	e006      	b.n	800b99e <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800b990:	4b06      	ldr	r3, [pc, #24]	@ (800b9ac <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800b992:	681b      	ldr	r3, [r3, #0]
 800b994:	4619      	mov	r1, r3
 800b996:	200c      	movs	r0, #12
 800b998:	f7ff fcac 	bl	800b2f4 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800b99c:	bf00      	nop
 800b99e:	bf00      	nop
 800b9a0:	370c      	adds	r7, #12
 800b9a2:	46bd      	mov	sp, r7
 800b9a4:	bd90      	pop	{r4, r7, pc}
 800b9a6:	bf00      	nop
 800b9a8:	20013b8c 	.word	0x20013b8c
 800b9ac:	e0001004 	.word	0xe0001004

0800b9b0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800b9b0:	b580      	push	{r7, lr}
 800b9b2:	b082      	sub	sp, #8
 800b9b4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b9b6:	f3ef 8311 	mrs	r3, BASEPRI
 800b9ba:	f04f 0120 	mov.w	r1, #32
 800b9be:	f381 8811 	msr	BASEPRI, r1
 800b9c2:	607b      	str	r3, [r7, #4]
 800b9c4:	4807      	ldr	r0, [pc, #28]	@ (800b9e4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800b9c6:	f7ff f90b 	bl	800abe0 <_PreparePacket>
 800b9ca:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800b9cc:	2211      	movs	r2, #17
 800b9ce:	6839      	ldr	r1, [r7, #0]
 800b9d0:	6838      	ldr	r0, [r7, #0]
 800b9d2:	f7ff f9f1 	bl	800adb8 <_SendPacket>
  RECORD_END();
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f383 8811 	msr	BASEPRI, r3
}
 800b9dc:	bf00      	nop
 800b9de:	3708      	adds	r7, #8
 800b9e0:	46bd      	mov	sp, r7
 800b9e2:	bd80      	pop	{r7, pc}
 800b9e4:	20013bbc 	.word	0x20013bbc

0800b9e8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800b9e8:	b580      	push	{r7, lr}
 800b9ea:	b088      	sub	sp, #32
 800b9ec:	af00      	add	r7, sp, #0
 800b9ee:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b9f0:	f3ef 8311 	mrs	r3, BASEPRI
 800b9f4:	f04f 0120 	mov.w	r1, #32
 800b9f8:	f381 8811 	msr	BASEPRI, r1
 800b9fc:	617b      	str	r3, [r7, #20]
 800b9fe:	4819      	ldr	r0, [pc, #100]	@ (800ba64 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800ba00:	f7ff f8ee 	bl	800abe0 <_PreparePacket>
 800ba04:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ba06:	693b      	ldr	r3, [r7, #16]
 800ba08:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800ba0a:	4b17      	ldr	r3, [pc, #92]	@ (800ba68 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800ba0c:	691b      	ldr	r3, [r3, #16]
 800ba0e:	687a      	ldr	r2, [r7, #4]
 800ba10:	1ad3      	subs	r3, r2, r3
 800ba12:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800ba14:	68fb      	ldr	r3, [r7, #12]
 800ba16:	61fb      	str	r3, [r7, #28]
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	61bb      	str	r3, [r7, #24]
 800ba1c:	e00b      	b.n	800ba36 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800ba1e:	69bb      	ldr	r3, [r7, #24]
 800ba20:	b2da      	uxtb	r2, r3
 800ba22:	69fb      	ldr	r3, [r7, #28]
 800ba24:	1c59      	adds	r1, r3, #1
 800ba26:	61f9      	str	r1, [r7, #28]
 800ba28:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ba2c:	b2d2      	uxtb	r2, r2
 800ba2e:	701a      	strb	r2, [r3, #0]
 800ba30:	69bb      	ldr	r3, [r7, #24]
 800ba32:	09db      	lsrs	r3, r3, #7
 800ba34:	61bb      	str	r3, [r7, #24]
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba3a:	d8f0      	bhi.n	800ba1e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800ba3c:	69fb      	ldr	r3, [r7, #28]
 800ba3e:	1c5a      	adds	r2, r3, #1
 800ba40:	61fa      	str	r2, [r7, #28]
 800ba42:	69ba      	ldr	r2, [r7, #24]
 800ba44:	b2d2      	uxtb	r2, r2
 800ba46:	701a      	strb	r2, [r3, #0]
 800ba48:	69fb      	ldr	r3, [r7, #28]
 800ba4a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800ba4c:	2208      	movs	r2, #8
 800ba4e:	68f9      	ldr	r1, [r7, #12]
 800ba50:	6938      	ldr	r0, [r7, #16]
 800ba52:	f7ff f9b1 	bl	800adb8 <_SendPacket>
  RECORD_END();
 800ba56:	697b      	ldr	r3, [r7, #20]
 800ba58:	f383 8811 	msr	BASEPRI, r3
}
 800ba5c:	bf00      	nop
 800ba5e:	3720      	adds	r7, #32
 800ba60:	46bd      	mov	sp, r7
 800ba62:	bd80      	pop	{r7, pc}
 800ba64:	20013bbc 	.word	0x20013bbc
 800ba68:	20013b8c 	.word	0x20013b8c

0800ba6c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800ba6c:	b580      	push	{r7, lr}
 800ba6e:	b088      	sub	sp, #32
 800ba70:	af00      	add	r7, sp, #0
 800ba72:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ba74:	f3ef 8311 	mrs	r3, BASEPRI
 800ba78:	f04f 0120 	mov.w	r1, #32
 800ba7c:	f381 8811 	msr	BASEPRI, r1
 800ba80:	617b      	str	r3, [r7, #20]
 800ba82:	4819      	ldr	r0, [pc, #100]	@ (800bae8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800ba84:	f7ff f8ac 	bl	800abe0 <_PreparePacket>
 800ba88:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800ba8e:	4b17      	ldr	r3, [pc, #92]	@ (800baec <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800ba90:	691b      	ldr	r3, [r3, #16]
 800ba92:	687a      	ldr	r2, [r7, #4]
 800ba94:	1ad3      	subs	r3, r2, r3
 800ba96:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	61fb      	str	r3, [r7, #28]
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	61bb      	str	r3, [r7, #24]
 800baa0:	e00b      	b.n	800baba <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800baa2:	69bb      	ldr	r3, [r7, #24]
 800baa4:	b2da      	uxtb	r2, r3
 800baa6:	69fb      	ldr	r3, [r7, #28]
 800baa8:	1c59      	adds	r1, r3, #1
 800baaa:	61f9      	str	r1, [r7, #28]
 800baac:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bab0:	b2d2      	uxtb	r2, r2
 800bab2:	701a      	strb	r2, [r3, #0]
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	09db      	lsrs	r3, r3, #7
 800bab8:	61bb      	str	r3, [r7, #24]
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	2b7f      	cmp	r3, #127	@ 0x7f
 800babe:	d8f0      	bhi.n	800baa2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800bac0:	69fb      	ldr	r3, [r7, #28]
 800bac2:	1c5a      	adds	r2, r3, #1
 800bac4:	61fa      	str	r2, [r7, #28]
 800bac6:	69ba      	ldr	r2, [r7, #24]
 800bac8:	b2d2      	uxtb	r2, r2
 800baca:	701a      	strb	r2, [r3, #0]
 800bacc:	69fb      	ldr	r3, [r7, #28]
 800bace:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800bad0:	2204      	movs	r2, #4
 800bad2:	68f9      	ldr	r1, [r7, #12]
 800bad4:	6938      	ldr	r0, [r7, #16]
 800bad6:	f7ff f96f 	bl	800adb8 <_SendPacket>
  RECORD_END();
 800bada:	697b      	ldr	r3, [r7, #20]
 800badc:	f383 8811 	msr	BASEPRI, r3
}
 800bae0:	bf00      	nop
 800bae2:	3720      	adds	r7, #32
 800bae4:	46bd      	mov	sp, r7
 800bae6:	bd80      	pop	{r7, pc}
 800bae8:	20013bbc 	.word	0x20013bbc
 800baec:	20013b8c 	.word	0x20013b8c

0800baf0 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800baf0:	b580      	push	{r7, lr}
 800baf2:	b088      	sub	sp, #32
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800baf8:	f3ef 8311 	mrs	r3, BASEPRI
 800bafc:	f04f 0120 	mov.w	r1, #32
 800bb00:	f381 8811 	msr	BASEPRI, r1
 800bb04:	617b      	str	r3, [r7, #20]
 800bb06:	4819      	ldr	r0, [pc, #100]	@ (800bb6c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800bb08:	f7ff f86a 	bl	800abe0 <_PreparePacket>
 800bb0c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800bb0e:	693b      	ldr	r3, [r7, #16]
 800bb10:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800bb12:	4b17      	ldr	r3, [pc, #92]	@ (800bb70 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800bb14:	691b      	ldr	r3, [r3, #16]
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	1ad3      	subs	r3, r2, r3
 800bb1a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	61fb      	str	r3, [r7, #28]
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	61bb      	str	r3, [r7, #24]
 800bb24:	e00b      	b.n	800bb3e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800bb26:	69bb      	ldr	r3, [r7, #24]
 800bb28:	b2da      	uxtb	r2, r3
 800bb2a:	69fb      	ldr	r3, [r7, #28]
 800bb2c:	1c59      	adds	r1, r3, #1
 800bb2e:	61f9      	str	r1, [r7, #28]
 800bb30:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bb34:	b2d2      	uxtb	r2, r2
 800bb36:	701a      	strb	r2, [r3, #0]
 800bb38:	69bb      	ldr	r3, [r7, #24]
 800bb3a:	09db      	lsrs	r3, r3, #7
 800bb3c:	61bb      	str	r3, [r7, #24]
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	2b7f      	cmp	r3, #127	@ 0x7f
 800bb42:	d8f0      	bhi.n	800bb26 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800bb44:	69fb      	ldr	r3, [r7, #28]
 800bb46:	1c5a      	adds	r2, r3, #1
 800bb48:	61fa      	str	r2, [r7, #28]
 800bb4a:	69ba      	ldr	r2, [r7, #24]
 800bb4c:	b2d2      	uxtb	r2, r2
 800bb4e:	701a      	strb	r2, [r3, #0]
 800bb50:	69fb      	ldr	r3, [r7, #28]
 800bb52:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800bb54:	2206      	movs	r2, #6
 800bb56:	68f9      	ldr	r1, [r7, #12]
 800bb58:	6938      	ldr	r0, [r7, #16]
 800bb5a:	f7ff f92d 	bl	800adb8 <_SendPacket>
  RECORD_END();
 800bb5e:	697b      	ldr	r3, [r7, #20]
 800bb60:	f383 8811 	msr	BASEPRI, r3
}
 800bb64:	bf00      	nop
 800bb66:	3720      	adds	r7, #32
 800bb68:	46bd      	mov	sp, r7
 800bb6a:	bd80      	pop	{r7, pc}
 800bb6c:	20013bbc 	.word	0x20013bbc
 800bb70:	20013b8c 	.word	0x20013b8c

0800bb74 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800bb74:	b580      	push	{r7, lr}
 800bb76:	b08c      	sub	sp, #48	@ 0x30
 800bb78:	af00      	add	r7, sp, #0
 800bb7a:	4603      	mov	r3, r0
 800bb7c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800bb7e:	4b40      	ldr	r3, [pc, #256]	@ (800bc80 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d077      	beq.n	800bc76 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800bb86:	4b3e      	ldr	r3, [pc, #248]	@ (800bc80 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800bb8c:	2300      	movs	r3, #0
 800bb8e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bb90:	e008      	b.n	800bba4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800bb92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb94:	691b      	ldr	r3, [r3, #16]
 800bb96:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800bb98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bb9a:	2b00      	cmp	r3, #0
 800bb9c:	d007      	beq.n	800bbae <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800bb9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba0:	3301      	adds	r3, #1
 800bba2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800bba4:	79fb      	ldrb	r3, [r7, #7]
 800bba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800bba8:	429a      	cmp	r2, r3
 800bbaa:	d3f2      	bcc.n	800bb92 <SEGGER_SYSVIEW_SendModule+0x1e>
 800bbac:	e000      	b.n	800bbb0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800bbae:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800bbb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d055      	beq.n	800bc62 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800bbb6:	f3ef 8311 	mrs	r3, BASEPRI
 800bbba:	f04f 0120 	mov.w	r1, #32
 800bbbe:	f381 8811 	msr	BASEPRI, r1
 800bbc2:	617b      	str	r3, [r7, #20]
 800bbc4:	482f      	ldr	r0, [pc, #188]	@ (800bc84 <SEGGER_SYSVIEW_SendModule+0x110>)
 800bbc6:	f7ff f80b 	bl	800abe0 <_PreparePacket>
 800bbca:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800bbcc:	693b      	ldr	r3, [r7, #16]
 800bbce:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	627b      	str	r3, [r7, #36]	@ 0x24
 800bbd4:	79fb      	ldrb	r3, [r7, #7]
 800bbd6:	623b      	str	r3, [r7, #32]
 800bbd8:	e00b      	b.n	800bbf2 <SEGGER_SYSVIEW_SendModule+0x7e>
 800bbda:	6a3b      	ldr	r3, [r7, #32]
 800bbdc:	b2da      	uxtb	r2, r3
 800bbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbe0:	1c59      	adds	r1, r3, #1
 800bbe2:	6279      	str	r1, [r7, #36]	@ 0x24
 800bbe4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bbe8:	b2d2      	uxtb	r2, r2
 800bbea:	701a      	strb	r2, [r3, #0]
 800bbec:	6a3b      	ldr	r3, [r7, #32]
 800bbee:	09db      	lsrs	r3, r3, #7
 800bbf0:	623b      	str	r3, [r7, #32]
 800bbf2:	6a3b      	ldr	r3, [r7, #32]
 800bbf4:	2b7f      	cmp	r3, #127	@ 0x7f
 800bbf6:	d8f0      	bhi.n	800bbda <SEGGER_SYSVIEW_SendModule+0x66>
 800bbf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbfa:	1c5a      	adds	r2, r3, #1
 800bbfc:	627a      	str	r2, [r7, #36]	@ 0x24
 800bbfe:	6a3a      	ldr	r2, [r7, #32]
 800bc00:	b2d2      	uxtb	r2, r2
 800bc02:	701a      	strb	r2, [r3, #0]
 800bc04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc06:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800bc08:	68fb      	ldr	r3, [r7, #12]
 800bc0a:	61fb      	str	r3, [r7, #28]
 800bc0c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc0e:	689b      	ldr	r3, [r3, #8]
 800bc10:	61bb      	str	r3, [r7, #24]
 800bc12:	e00b      	b.n	800bc2c <SEGGER_SYSVIEW_SendModule+0xb8>
 800bc14:	69bb      	ldr	r3, [r7, #24]
 800bc16:	b2da      	uxtb	r2, r3
 800bc18:	69fb      	ldr	r3, [r7, #28]
 800bc1a:	1c59      	adds	r1, r3, #1
 800bc1c:	61f9      	str	r1, [r7, #28]
 800bc1e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bc22:	b2d2      	uxtb	r2, r2
 800bc24:	701a      	strb	r2, [r3, #0]
 800bc26:	69bb      	ldr	r3, [r7, #24]
 800bc28:	09db      	lsrs	r3, r3, #7
 800bc2a:	61bb      	str	r3, [r7, #24]
 800bc2c:	69bb      	ldr	r3, [r7, #24]
 800bc2e:	2b7f      	cmp	r3, #127	@ 0x7f
 800bc30:	d8f0      	bhi.n	800bc14 <SEGGER_SYSVIEW_SendModule+0xa0>
 800bc32:	69fb      	ldr	r3, [r7, #28]
 800bc34:	1c5a      	adds	r2, r3, #1
 800bc36:	61fa      	str	r2, [r7, #28]
 800bc38:	69ba      	ldr	r2, [r7, #24]
 800bc3a:	b2d2      	uxtb	r2, r2
 800bc3c:	701a      	strb	r2, [r3, #0]
 800bc3e:	69fb      	ldr	r3, [r7, #28]
 800bc40:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800bc42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	2280      	movs	r2, #128	@ 0x80
 800bc48:	4619      	mov	r1, r3
 800bc4a:	68f8      	ldr	r0, [r7, #12]
 800bc4c:	f7fe ff98 	bl	800ab80 <_EncodeStr>
 800bc50:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800bc52:	2216      	movs	r2, #22
 800bc54:	68f9      	ldr	r1, [r7, #12]
 800bc56:	6938      	ldr	r0, [r7, #16]
 800bc58:	f7ff f8ae 	bl	800adb8 <_SendPacket>
      RECORD_END();
 800bc5c:	697b      	ldr	r3, [r7, #20]
 800bc5e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800bc62:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d006      	beq.n	800bc76 <SEGGER_SYSVIEW_SendModule+0x102>
 800bc68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc6a:	68db      	ldr	r3, [r3, #12]
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d002      	beq.n	800bc76 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800bc70:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc72:	68db      	ldr	r3, [r3, #12]
 800bc74:	4798      	blx	r3
    }
  }
}
 800bc76:	bf00      	nop
 800bc78:	3730      	adds	r7, #48	@ 0x30
 800bc7a:	46bd      	mov	sp, r7
 800bc7c:	bd80      	pop	{r7, pc}
 800bc7e:	bf00      	nop
 800bc80:	20013bb4 	.word	0x20013bb4
 800bc84:	20013bbc 	.word	0x20013bbc

0800bc88 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b082      	sub	sp, #8
 800bc8c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800bc8e:	4b0c      	ldr	r3, [pc, #48]	@ (800bcc0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	2b00      	cmp	r3, #0
 800bc94:	d00f      	beq.n	800bcb6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800bc96:	4b0a      	ldr	r3, [pc, #40]	@ (800bcc0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	68db      	ldr	r3, [r3, #12]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d002      	beq.n	800bcaa <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	68db      	ldr	r3, [r3, #12]
 800bca8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800bcaa:	687b      	ldr	r3, [r7, #4]
 800bcac:	691b      	ldr	r3, [r3, #16]
 800bcae:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d1f2      	bne.n	800bc9c <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800bcb6:	bf00      	nop
 800bcb8:	3708      	adds	r7, #8
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	20013bb4 	.word	0x20013bb4

0800bcc4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b086      	sub	sp, #24
 800bcc8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800bcca:	f3ef 8311 	mrs	r3, BASEPRI
 800bcce:	f04f 0120 	mov.w	r1, #32
 800bcd2:	f381 8811 	msr	BASEPRI, r1
 800bcd6:	60fb      	str	r3, [r7, #12]
 800bcd8:	4817      	ldr	r0, [pc, #92]	@ (800bd38 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800bcda:	f7fe ff81 	bl	800abe0 <_PreparePacket>
 800bcde:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800bce0:	68bb      	ldr	r3, [r7, #8]
 800bce2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800bce4:	687b      	ldr	r3, [r7, #4]
 800bce6:	617b      	str	r3, [r7, #20]
 800bce8:	4b14      	ldr	r3, [pc, #80]	@ (800bd3c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800bcea:	781b      	ldrb	r3, [r3, #0]
 800bcec:	613b      	str	r3, [r7, #16]
 800bcee:	e00b      	b.n	800bd08 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800bcf0:	693b      	ldr	r3, [r7, #16]
 800bcf2:	b2da      	uxtb	r2, r3
 800bcf4:	697b      	ldr	r3, [r7, #20]
 800bcf6:	1c59      	adds	r1, r3, #1
 800bcf8:	6179      	str	r1, [r7, #20]
 800bcfa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bcfe:	b2d2      	uxtb	r2, r2
 800bd00:	701a      	strb	r2, [r3, #0]
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	09db      	lsrs	r3, r3, #7
 800bd06:	613b      	str	r3, [r7, #16]
 800bd08:	693b      	ldr	r3, [r7, #16]
 800bd0a:	2b7f      	cmp	r3, #127	@ 0x7f
 800bd0c:	d8f0      	bhi.n	800bcf0 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800bd0e:	697b      	ldr	r3, [r7, #20]
 800bd10:	1c5a      	adds	r2, r3, #1
 800bd12:	617a      	str	r2, [r7, #20]
 800bd14:	693a      	ldr	r2, [r7, #16]
 800bd16:	b2d2      	uxtb	r2, r2
 800bd18:	701a      	strb	r2, [r3, #0]
 800bd1a:	697b      	ldr	r3, [r7, #20]
 800bd1c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800bd1e:	221b      	movs	r2, #27
 800bd20:	6879      	ldr	r1, [r7, #4]
 800bd22:	68b8      	ldr	r0, [r7, #8]
 800bd24:	f7ff f848 	bl	800adb8 <_SendPacket>
  RECORD_END();
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	f383 8811 	msr	BASEPRI, r3
}
 800bd2e:	bf00      	nop
 800bd30:	3718      	adds	r7, #24
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	20013bbc 	.word	0x20013bbc
 800bd3c:	20013bb8 	.word	0x20013bb8

0800bd40 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 800bd40:	b40f      	push	{r0, r1, r2, r3}
 800bd42:	b580      	push	{r7, lr}
 800bd44:	b082      	sub	sp, #8
 800bd46:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 800bd48:	f107 0314 	add.w	r3, r7, #20
 800bd4c:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800bd4e:	1d3b      	adds	r3, r7, #4
 800bd50:	461a      	mov	r2, r3
 800bd52:	2100      	movs	r1, #0
 800bd54:	6938      	ldr	r0, [r7, #16]
 800bd56:	f7ff f99d 	bl	800b094 <_VPrintHost>
  va_end(ParamList);
#endif
}
 800bd5a:	bf00      	nop
 800bd5c:	3708      	adds	r7, #8
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bd64:	b004      	add	sp, #16
 800bd66:	4770      	bx	lr

0800bd68 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800bd68:	b580      	push	{r7, lr}
 800bd6a:	b08a      	sub	sp, #40	@ 0x28
 800bd6c:	af00      	add	r7, sp, #0
 800bd6e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800bd70:	f3ef 8311 	mrs	r3, BASEPRI
 800bd74:	f04f 0120 	mov.w	r1, #32
 800bd78:	f381 8811 	msr	BASEPRI, r1
 800bd7c:	617b      	str	r3, [r7, #20]
 800bd7e:	4827      	ldr	r0, [pc, #156]	@ (800be1c <SEGGER_SYSVIEW_Warn+0xb4>)
 800bd80:	f7fe ff2e 	bl	800abe0 <_PreparePacket>
 800bd84:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800bd86:	2280      	movs	r2, #128	@ 0x80
 800bd88:	6879      	ldr	r1, [r7, #4]
 800bd8a:	6938      	ldr	r0, [r7, #16]
 800bd8c:	f7fe fef8 	bl	800ab80 <_EncodeStr>
 800bd90:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800bd92:	68fb      	ldr	r3, [r7, #12]
 800bd94:	627b      	str	r3, [r7, #36]	@ 0x24
 800bd96:	2301      	movs	r3, #1
 800bd98:	623b      	str	r3, [r7, #32]
 800bd9a:	e00b      	b.n	800bdb4 <SEGGER_SYSVIEW_Warn+0x4c>
 800bd9c:	6a3b      	ldr	r3, [r7, #32]
 800bd9e:	b2da      	uxtb	r2, r3
 800bda0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bda2:	1c59      	adds	r1, r3, #1
 800bda4:	6279      	str	r1, [r7, #36]	@ 0x24
 800bda6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bdaa:	b2d2      	uxtb	r2, r2
 800bdac:	701a      	strb	r2, [r3, #0]
 800bdae:	6a3b      	ldr	r3, [r7, #32]
 800bdb0:	09db      	lsrs	r3, r3, #7
 800bdb2:	623b      	str	r3, [r7, #32]
 800bdb4:	6a3b      	ldr	r3, [r7, #32]
 800bdb6:	2b7f      	cmp	r3, #127	@ 0x7f
 800bdb8:	d8f0      	bhi.n	800bd9c <SEGGER_SYSVIEW_Warn+0x34>
 800bdba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdbc:	1c5a      	adds	r2, r3, #1
 800bdbe:	627a      	str	r2, [r7, #36]	@ 0x24
 800bdc0:	6a3a      	ldr	r2, [r7, #32]
 800bdc2:	b2d2      	uxtb	r2, r2
 800bdc4:	701a      	strb	r2, [r3, #0]
 800bdc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdc8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800bdca:	68fb      	ldr	r3, [r7, #12]
 800bdcc:	61fb      	str	r3, [r7, #28]
 800bdce:	2300      	movs	r3, #0
 800bdd0:	61bb      	str	r3, [r7, #24]
 800bdd2:	e00b      	b.n	800bdec <SEGGER_SYSVIEW_Warn+0x84>
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	b2da      	uxtb	r2, r3
 800bdd8:	69fb      	ldr	r3, [r7, #28]
 800bdda:	1c59      	adds	r1, r3, #1
 800bddc:	61f9      	str	r1, [r7, #28]
 800bdde:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bde2:	b2d2      	uxtb	r2, r2
 800bde4:	701a      	strb	r2, [r3, #0]
 800bde6:	69bb      	ldr	r3, [r7, #24]
 800bde8:	09db      	lsrs	r3, r3, #7
 800bdea:	61bb      	str	r3, [r7, #24]
 800bdec:	69bb      	ldr	r3, [r7, #24]
 800bdee:	2b7f      	cmp	r3, #127	@ 0x7f
 800bdf0:	d8f0      	bhi.n	800bdd4 <SEGGER_SYSVIEW_Warn+0x6c>
 800bdf2:	69fb      	ldr	r3, [r7, #28]
 800bdf4:	1c5a      	adds	r2, r3, #1
 800bdf6:	61fa      	str	r2, [r7, #28]
 800bdf8:	69ba      	ldr	r2, [r7, #24]
 800bdfa:	b2d2      	uxtb	r2, r2
 800bdfc:	701a      	strb	r2, [r3, #0]
 800bdfe:	69fb      	ldr	r3, [r7, #28]
 800be00:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800be02:	221a      	movs	r2, #26
 800be04:	68f9      	ldr	r1, [r7, #12]
 800be06:	6938      	ldr	r0, [r7, #16]
 800be08:	f7fe ffd6 	bl	800adb8 <_SendPacket>
  RECORD_END();
 800be0c:	697b      	ldr	r3, [r7, #20]
 800be0e:	f383 8811 	msr	BASEPRI, r3
}
 800be12:	bf00      	nop
 800be14:	3728      	adds	r7, #40	@ 0x28
 800be16:	46bd      	mov	sp, r7
 800be18:	bd80      	pop	{r7, pc}
 800be1a:	bf00      	nop
 800be1c:	20013bbc 	.word	0x20013bbc

0800be20 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800be20:	b580      	push	{r7, lr}
 800be22:	b084      	sub	sp, #16
 800be24:	af00      	add	r7, sp, #0
 800be26:	60f8      	str	r0, [r7, #12]
 800be28:	60b9      	str	r1, [r7, #8]
 800be2a:	607a      	str	r2, [r7, #4]
 800be2c:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800be2e:	683a      	ldr	r2, [r7, #0]
 800be30:	6879      	ldr	r1, [r7, #4]
 800be32:	2000      	movs	r0, #0
 800be34:	f7fe fdae 	bl	800a994 <SEGGER_RTT_Write>
  return len;
 800be38:	683b      	ldr	r3, [r7, #0]
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3710      	adds	r7, #16
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <__cvt>:
 800be42:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be46:	ec57 6b10 	vmov	r6, r7, d0
 800be4a:	2f00      	cmp	r7, #0
 800be4c:	460c      	mov	r4, r1
 800be4e:	4619      	mov	r1, r3
 800be50:	463b      	mov	r3, r7
 800be52:	bfbb      	ittet	lt
 800be54:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800be58:	461f      	movlt	r7, r3
 800be5a:	2300      	movge	r3, #0
 800be5c:	232d      	movlt	r3, #45	@ 0x2d
 800be5e:	700b      	strb	r3, [r1, #0]
 800be60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800be62:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800be66:	4691      	mov	r9, r2
 800be68:	f023 0820 	bic.w	r8, r3, #32
 800be6c:	bfbc      	itt	lt
 800be6e:	4632      	movlt	r2, r6
 800be70:	4616      	movlt	r6, r2
 800be72:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800be76:	d005      	beq.n	800be84 <__cvt+0x42>
 800be78:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800be7c:	d100      	bne.n	800be80 <__cvt+0x3e>
 800be7e:	3401      	adds	r4, #1
 800be80:	2102      	movs	r1, #2
 800be82:	e000      	b.n	800be86 <__cvt+0x44>
 800be84:	2103      	movs	r1, #3
 800be86:	ab03      	add	r3, sp, #12
 800be88:	9301      	str	r3, [sp, #4]
 800be8a:	ab02      	add	r3, sp, #8
 800be8c:	9300      	str	r3, [sp, #0]
 800be8e:	ec47 6b10 	vmov	d0, r6, r7
 800be92:	4653      	mov	r3, sl
 800be94:	4622      	mov	r2, r4
 800be96:	f000 fe7b 	bl	800cb90 <_dtoa_r>
 800be9a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800be9e:	4605      	mov	r5, r0
 800bea0:	d119      	bne.n	800bed6 <__cvt+0x94>
 800bea2:	f019 0f01 	tst.w	r9, #1
 800bea6:	d00e      	beq.n	800bec6 <__cvt+0x84>
 800bea8:	eb00 0904 	add.w	r9, r0, r4
 800beac:	2200      	movs	r2, #0
 800beae:	2300      	movs	r3, #0
 800beb0:	4630      	mov	r0, r6
 800beb2:	4639      	mov	r1, r7
 800beb4:	f7f4 fe58 	bl	8000b68 <__aeabi_dcmpeq>
 800beb8:	b108      	cbz	r0, 800bebe <__cvt+0x7c>
 800beba:	f8cd 900c 	str.w	r9, [sp, #12]
 800bebe:	2230      	movs	r2, #48	@ 0x30
 800bec0:	9b03      	ldr	r3, [sp, #12]
 800bec2:	454b      	cmp	r3, r9
 800bec4:	d31e      	bcc.n	800bf04 <__cvt+0xc2>
 800bec6:	9b03      	ldr	r3, [sp, #12]
 800bec8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800beca:	1b5b      	subs	r3, r3, r5
 800becc:	4628      	mov	r0, r5
 800bece:	6013      	str	r3, [r2, #0]
 800bed0:	b004      	add	sp, #16
 800bed2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bed6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800beda:	eb00 0904 	add.w	r9, r0, r4
 800bede:	d1e5      	bne.n	800beac <__cvt+0x6a>
 800bee0:	7803      	ldrb	r3, [r0, #0]
 800bee2:	2b30      	cmp	r3, #48	@ 0x30
 800bee4:	d10a      	bne.n	800befc <__cvt+0xba>
 800bee6:	2200      	movs	r2, #0
 800bee8:	2300      	movs	r3, #0
 800beea:	4630      	mov	r0, r6
 800beec:	4639      	mov	r1, r7
 800beee:	f7f4 fe3b 	bl	8000b68 <__aeabi_dcmpeq>
 800bef2:	b918      	cbnz	r0, 800befc <__cvt+0xba>
 800bef4:	f1c4 0401 	rsb	r4, r4, #1
 800bef8:	f8ca 4000 	str.w	r4, [sl]
 800befc:	f8da 3000 	ldr.w	r3, [sl]
 800bf00:	4499      	add	r9, r3
 800bf02:	e7d3      	b.n	800beac <__cvt+0x6a>
 800bf04:	1c59      	adds	r1, r3, #1
 800bf06:	9103      	str	r1, [sp, #12]
 800bf08:	701a      	strb	r2, [r3, #0]
 800bf0a:	e7d9      	b.n	800bec0 <__cvt+0x7e>

0800bf0c <__exponent>:
 800bf0c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf0e:	2900      	cmp	r1, #0
 800bf10:	bfba      	itte	lt
 800bf12:	4249      	neglt	r1, r1
 800bf14:	232d      	movlt	r3, #45	@ 0x2d
 800bf16:	232b      	movge	r3, #43	@ 0x2b
 800bf18:	2909      	cmp	r1, #9
 800bf1a:	7002      	strb	r2, [r0, #0]
 800bf1c:	7043      	strb	r3, [r0, #1]
 800bf1e:	dd29      	ble.n	800bf74 <__exponent+0x68>
 800bf20:	f10d 0307 	add.w	r3, sp, #7
 800bf24:	461d      	mov	r5, r3
 800bf26:	270a      	movs	r7, #10
 800bf28:	461a      	mov	r2, r3
 800bf2a:	fbb1 f6f7 	udiv	r6, r1, r7
 800bf2e:	fb07 1416 	mls	r4, r7, r6, r1
 800bf32:	3430      	adds	r4, #48	@ 0x30
 800bf34:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bf38:	460c      	mov	r4, r1
 800bf3a:	2c63      	cmp	r4, #99	@ 0x63
 800bf3c:	f103 33ff 	add.w	r3, r3, #4294967295
 800bf40:	4631      	mov	r1, r6
 800bf42:	dcf1      	bgt.n	800bf28 <__exponent+0x1c>
 800bf44:	3130      	adds	r1, #48	@ 0x30
 800bf46:	1e94      	subs	r4, r2, #2
 800bf48:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bf4c:	1c41      	adds	r1, r0, #1
 800bf4e:	4623      	mov	r3, r4
 800bf50:	42ab      	cmp	r3, r5
 800bf52:	d30a      	bcc.n	800bf6a <__exponent+0x5e>
 800bf54:	f10d 0309 	add.w	r3, sp, #9
 800bf58:	1a9b      	subs	r3, r3, r2
 800bf5a:	42ac      	cmp	r4, r5
 800bf5c:	bf88      	it	hi
 800bf5e:	2300      	movhi	r3, #0
 800bf60:	3302      	adds	r3, #2
 800bf62:	4403      	add	r3, r0
 800bf64:	1a18      	subs	r0, r3, r0
 800bf66:	b003      	add	sp, #12
 800bf68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf6a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bf6e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bf72:	e7ed      	b.n	800bf50 <__exponent+0x44>
 800bf74:	2330      	movs	r3, #48	@ 0x30
 800bf76:	3130      	adds	r1, #48	@ 0x30
 800bf78:	7083      	strb	r3, [r0, #2]
 800bf7a:	70c1      	strb	r1, [r0, #3]
 800bf7c:	1d03      	adds	r3, r0, #4
 800bf7e:	e7f1      	b.n	800bf64 <__exponent+0x58>

0800bf80 <_printf_float>:
 800bf80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf84:	b08d      	sub	sp, #52	@ 0x34
 800bf86:	460c      	mov	r4, r1
 800bf88:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bf8c:	4616      	mov	r6, r2
 800bf8e:	461f      	mov	r7, r3
 800bf90:	4605      	mov	r5, r0
 800bf92:	f000 fcff 	bl	800c994 <_localeconv_r>
 800bf96:	6803      	ldr	r3, [r0, #0]
 800bf98:	9304      	str	r3, [sp, #16]
 800bf9a:	4618      	mov	r0, r3
 800bf9c:	f7f4 f9b8 	bl	8000310 <strlen>
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfa4:	f8d8 3000 	ldr.w	r3, [r8]
 800bfa8:	9005      	str	r0, [sp, #20]
 800bfaa:	3307      	adds	r3, #7
 800bfac:	f023 0307 	bic.w	r3, r3, #7
 800bfb0:	f103 0208 	add.w	r2, r3, #8
 800bfb4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bfb8:	f8d4 b000 	ldr.w	fp, [r4]
 800bfbc:	f8c8 2000 	str.w	r2, [r8]
 800bfc0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bfc4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bfc8:	9307      	str	r3, [sp, #28]
 800bfca:	f8cd 8018 	str.w	r8, [sp, #24]
 800bfce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bfd2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfd6:	4b9c      	ldr	r3, [pc, #624]	@ (800c248 <_printf_float+0x2c8>)
 800bfd8:	f04f 32ff 	mov.w	r2, #4294967295
 800bfdc:	f7f4 fdf6 	bl	8000bcc <__aeabi_dcmpun>
 800bfe0:	bb70      	cbnz	r0, 800c040 <_printf_float+0xc0>
 800bfe2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bfe6:	4b98      	ldr	r3, [pc, #608]	@ (800c248 <_printf_float+0x2c8>)
 800bfe8:	f04f 32ff 	mov.w	r2, #4294967295
 800bfec:	f7f4 fdd0 	bl	8000b90 <__aeabi_dcmple>
 800bff0:	bb30      	cbnz	r0, 800c040 <_printf_float+0xc0>
 800bff2:	2200      	movs	r2, #0
 800bff4:	2300      	movs	r3, #0
 800bff6:	4640      	mov	r0, r8
 800bff8:	4649      	mov	r1, r9
 800bffa:	f7f4 fdbf 	bl	8000b7c <__aeabi_dcmplt>
 800bffe:	b110      	cbz	r0, 800c006 <_printf_float+0x86>
 800c000:	232d      	movs	r3, #45	@ 0x2d
 800c002:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c006:	4a91      	ldr	r2, [pc, #580]	@ (800c24c <_printf_float+0x2cc>)
 800c008:	4b91      	ldr	r3, [pc, #580]	@ (800c250 <_printf_float+0x2d0>)
 800c00a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c00e:	bf94      	ite	ls
 800c010:	4690      	movls	r8, r2
 800c012:	4698      	movhi	r8, r3
 800c014:	2303      	movs	r3, #3
 800c016:	6123      	str	r3, [r4, #16]
 800c018:	f02b 0304 	bic.w	r3, fp, #4
 800c01c:	6023      	str	r3, [r4, #0]
 800c01e:	f04f 0900 	mov.w	r9, #0
 800c022:	9700      	str	r7, [sp, #0]
 800c024:	4633      	mov	r3, r6
 800c026:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c028:	4621      	mov	r1, r4
 800c02a:	4628      	mov	r0, r5
 800c02c:	f000 f9d2 	bl	800c3d4 <_printf_common>
 800c030:	3001      	adds	r0, #1
 800c032:	f040 808d 	bne.w	800c150 <_printf_float+0x1d0>
 800c036:	f04f 30ff 	mov.w	r0, #4294967295
 800c03a:	b00d      	add	sp, #52	@ 0x34
 800c03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c040:	4642      	mov	r2, r8
 800c042:	464b      	mov	r3, r9
 800c044:	4640      	mov	r0, r8
 800c046:	4649      	mov	r1, r9
 800c048:	f7f4 fdc0 	bl	8000bcc <__aeabi_dcmpun>
 800c04c:	b140      	cbz	r0, 800c060 <_printf_float+0xe0>
 800c04e:	464b      	mov	r3, r9
 800c050:	2b00      	cmp	r3, #0
 800c052:	bfbc      	itt	lt
 800c054:	232d      	movlt	r3, #45	@ 0x2d
 800c056:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c05a:	4a7e      	ldr	r2, [pc, #504]	@ (800c254 <_printf_float+0x2d4>)
 800c05c:	4b7e      	ldr	r3, [pc, #504]	@ (800c258 <_printf_float+0x2d8>)
 800c05e:	e7d4      	b.n	800c00a <_printf_float+0x8a>
 800c060:	6863      	ldr	r3, [r4, #4]
 800c062:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c066:	9206      	str	r2, [sp, #24]
 800c068:	1c5a      	adds	r2, r3, #1
 800c06a:	d13b      	bne.n	800c0e4 <_printf_float+0x164>
 800c06c:	2306      	movs	r3, #6
 800c06e:	6063      	str	r3, [r4, #4]
 800c070:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c074:	2300      	movs	r3, #0
 800c076:	6022      	str	r2, [r4, #0]
 800c078:	9303      	str	r3, [sp, #12]
 800c07a:	ab0a      	add	r3, sp, #40	@ 0x28
 800c07c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c080:	ab09      	add	r3, sp, #36	@ 0x24
 800c082:	9300      	str	r3, [sp, #0]
 800c084:	6861      	ldr	r1, [r4, #4]
 800c086:	ec49 8b10 	vmov	d0, r8, r9
 800c08a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c08e:	4628      	mov	r0, r5
 800c090:	f7ff fed7 	bl	800be42 <__cvt>
 800c094:	9b06      	ldr	r3, [sp, #24]
 800c096:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c098:	2b47      	cmp	r3, #71	@ 0x47
 800c09a:	4680      	mov	r8, r0
 800c09c:	d129      	bne.n	800c0f2 <_printf_float+0x172>
 800c09e:	1cc8      	adds	r0, r1, #3
 800c0a0:	db02      	blt.n	800c0a8 <_printf_float+0x128>
 800c0a2:	6863      	ldr	r3, [r4, #4]
 800c0a4:	4299      	cmp	r1, r3
 800c0a6:	dd41      	ble.n	800c12c <_printf_float+0x1ac>
 800c0a8:	f1aa 0a02 	sub.w	sl, sl, #2
 800c0ac:	fa5f fa8a 	uxtb.w	sl, sl
 800c0b0:	3901      	subs	r1, #1
 800c0b2:	4652      	mov	r2, sl
 800c0b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c0b8:	9109      	str	r1, [sp, #36]	@ 0x24
 800c0ba:	f7ff ff27 	bl	800bf0c <__exponent>
 800c0be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c0c0:	1813      	adds	r3, r2, r0
 800c0c2:	2a01      	cmp	r2, #1
 800c0c4:	4681      	mov	r9, r0
 800c0c6:	6123      	str	r3, [r4, #16]
 800c0c8:	dc02      	bgt.n	800c0d0 <_printf_float+0x150>
 800c0ca:	6822      	ldr	r2, [r4, #0]
 800c0cc:	07d2      	lsls	r2, r2, #31
 800c0ce:	d501      	bpl.n	800c0d4 <_printf_float+0x154>
 800c0d0:	3301      	adds	r3, #1
 800c0d2:	6123      	str	r3, [r4, #16]
 800c0d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d0a2      	beq.n	800c022 <_printf_float+0xa2>
 800c0dc:	232d      	movs	r3, #45	@ 0x2d
 800c0de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c0e2:	e79e      	b.n	800c022 <_printf_float+0xa2>
 800c0e4:	9a06      	ldr	r2, [sp, #24]
 800c0e6:	2a47      	cmp	r2, #71	@ 0x47
 800c0e8:	d1c2      	bne.n	800c070 <_printf_float+0xf0>
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d1c0      	bne.n	800c070 <_printf_float+0xf0>
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	e7bd      	b.n	800c06e <_printf_float+0xee>
 800c0f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c0f6:	d9db      	bls.n	800c0b0 <_printf_float+0x130>
 800c0f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c0fc:	d118      	bne.n	800c130 <_printf_float+0x1b0>
 800c0fe:	2900      	cmp	r1, #0
 800c100:	6863      	ldr	r3, [r4, #4]
 800c102:	dd0b      	ble.n	800c11c <_printf_float+0x19c>
 800c104:	6121      	str	r1, [r4, #16]
 800c106:	b913      	cbnz	r3, 800c10e <_printf_float+0x18e>
 800c108:	6822      	ldr	r2, [r4, #0]
 800c10a:	07d0      	lsls	r0, r2, #31
 800c10c:	d502      	bpl.n	800c114 <_printf_float+0x194>
 800c10e:	3301      	adds	r3, #1
 800c110:	440b      	add	r3, r1
 800c112:	6123      	str	r3, [r4, #16]
 800c114:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c116:	f04f 0900 	mov.w	r9, #0
 800c11a:	e7db      	b.n	800c0d4 <_printf_float+0x154>
 800c11c:	b913      	cbnz	r3, 800c124 <_printf_float+0x1a4>
 800c11e:	6822      	ldr	r2, [r4, #0]
 800c120:	07d2      	lsls	r2, r2, #31
 800c122:	d501      	bpl.n	800c128 <_printf_float+0x1a8>
 800c124:	3302      	adds	r3, #2
 800c126:	e7f4      	b.n	800c112 <_printf_float+0x192>
 800c128:	2301      	movs	r3, #1
 800c12a:	e7f2      	b.n	800c112 <_printf_float+0x192>
 800c12c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c130:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c132:	4299      	cmp	r1, r3
 800c134:	db05      	blt.n	800c142 <_printf_float+0x1c2>
 800c136:	6823      	ldr	r3, [r4, #0]
 800c138:	6121      	str	r1, [r4, #16]
 800c13a:	07d8      	lsls	r0, r3, #31
 800c13c:	d5ea      	bpl.n	800c114 <_printf_float+0x194>
 800c13e:	1c4b      	adds	r3, r1, #1
 800c140:	e7e7      	b.n	800c112 <_printf_float+0x192>
 800c142:	2900      	cmp	r1, #0
 800c144:	bfd4      	ite	le
 800c146:	f1c1 0202 	rsble	r2, r1, #2
 800c14a:	2201      	movgt	r2, #1
 800c14c:	4413      	add	r3, r2
 800c14e:	e7e0      	b.n	800c112 <_printf_float+0x192>
 800c150:	6823      	ldr	r3, [r4, #0]
 800c152:	055a      	lsls	r2, r3, #21
 800c154:	d407      	bmi.n	800c166 <_printf_float+0x1e6>
 800c156:	6923      	ldr	r3, [r4, #16]
 800c158:	4642      	mov	r2, r8
 800c15a:	4631      	mov	r1, r6
 800c15c:	4628      	mov	r0, r5
 800c15e:	47b8      	blx	r7
 800c160:	3001      	adds	r0, #1
 800c162:	d12b      	bne.n	800c1bc <_printf_float+0x23c>
 800c164:	e767      	b.n	800c036 <_printf_float+0xb6>
 800c166:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c16a:	f240 80dd 	bls.w	800c328 <_printf_float+0x3a8>
 800c16e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c172:	2200      	movs	r2, #0
 800c174:	2300      	movs	r3, #0
 800c176:	f7f4 fcf7 	bl	8000b68 <__aeabi_dcmpeq>
 800c17a:	2800      	cmp	r0, #0
 800c17c:	d033      	beq.n	800c1e6 <_printf_float+0x266>
 800c17e:	4a37      	ldr	r2, [pc, #220]	@ (800c25c <_printf_float+0x2dc>)
 800c180:	2301      	movs	r3, #1
 800c182:	4631      	mov	r1, r6
 800c184:	4628      	mov	r0, r5
 800c186:	47b8      	blx	r7
 800c188:	3001      	adds	r0, #1
 800c18a:	f43f af54 	beq.w	800c036 <_printf_float+0xb6>
 800c18e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c192:	4543      	cmp	r3, r8
 800c194:	db02      	blt.n	800c19c <_printf_float+0x21c>
 800c196:	6823      	ldr	r3, [r4, #0]
 800c198:	07d8      	lsls	r0, r3, #31
 800c19a:	d50f      	bpl.n	800c1bc <_printf_float+0x23c>
 800c19c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c1a0:	4631      	mov	r1, r6
 800c1a2:	4628      	mov	r0, r5
 800c1a4:	47b8      	blx	r7
 800c1a6:	3001      	adds	r0, #1
 800c1a8:	f43f af45 	beq.w	800c036 <_printf_float+0xb6>
 800c1ac:	f04f 0900 	mov.w	r9, #0
 800c1b0:	f108 38ff 	add.w	r8, r8, #4294967295
 800c1b4:	f104 0a1a 	add.w	sl, r4, #26
 800c1b8:	45c8      	cmp	r8, r9
 800c1ba:	dc09      	bgt.n	800c1d0 <_printf_float+0x250>
 800c1bc:	6823      	ldr	r3, [r4, #0]
 800c1be:	079b      	lsls	r3, r3, #30
 800c1c0:	f100 8103 	bmi.w	800c3ca <_printf_float+0x44a>
 800c1c4:	68e0      	ldr	r0, [r4, #12]
 800c1c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c1c8:	4298      	cmp	r0, r3
 800c1ca:	bfb8      	it	lt
 800c1cc:	4618      	movlt	r0, r3
 800c1ce:	e734      	b.n	800c03a <_printf_float+0xba>
 800c1d0:	2301      	movs	r3, #1
 800c1d2:	4652      	mov	r2, sl
 800c1d4:	4631      	mov	r1, r6
 800c1d6:	4628      	mov	r0, r5
 800c1d8:	47b8      	blx	r7
 800c1da:	3001      	adds	r0, #1
 800c1dc:	f43f af2b 	beq.w	800c036 <_printf_float+0xb6>
 800c1e0:	f109 0901 	add.w	r9, r9, #1
 800c1e4:	e7e8      	b.n	800c1b8 <_printf_float+0x238>
 800c1e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c1e8:	2b00      	cmp	r3, #0
 800c1ea:	dc39      	bgt.n	800c260 <_printf_float+0x2e0>
 800c1ec:	4a1b      	ldr	r2, [pc, #108]	@ (800c25c <_printf_float+0x2dc>)
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	4631      	mov	r1, r6
 800c1f2:	4628      	mov	r0, r5
 800c1f4:	47b8      	blx	r7
 800c1f6:	3001      	adds	r0, #1
 800c1f8:	f43f af1d 	beq.w	800c036 <_printf_float+0xb6>
 800c1fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c200:	ea59 0303 	orrs.w	r3, r9, r3
 800c204:	d102      	bne.n	800c20c <_printf_float+0x28c>
 800c206:	6823      	ldr	r3, [r4, #0]
 800c208:	07d9      	lsls	r1, r3, #31
 800c20a:	d5d7      	bpl.n	800c1bc <_printf_float+0x23c>
 800c20c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c210:	4631      	mov	r1, r6
 800c212:	4628      	mov	r0, r5
 800c214:	47b8      	blx	r7
 800c216:	3001      	adds	r0, #1
 800c218:	f43f af0d 	beq.w	800c036 <_printf_float+0xb6>
 800c21c:	f04f 0a00 	mov.w	sl, #0
 800c220:	f104 0b1a 	add.w	fp, r4, #26
 800c224:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c226:	425b      	negs	r3, r3
 800c228:	4553      	cmp	r3, sl
 800c22a:	dc01      	bgt.n	800c230 <_printf_float+0x2b0>
 800c22c:	464b      	mov	r3, r9
 800c22e:	e793      	b.n	800c158 <_printf_float+0x1d8>
 800c230:	2301      	movs	r3, #1
 800c232:	465a      	mov	r2, fp
 800c234:	4631      	mov	r1, r6
 800c236:	4628      	mov	r0, r5
 800c238:	47b8      	blx	r7
 800c23a:	3001      	adds	r0, #1
 800c23c:	f43f aefb 	beq.w	800c036 <_printf_float+0xb6>
 800c240:	f10a 0a01 	add.w	sl, sl, #1
 800c244:	e7ee      	b.n	800c224 <_printf_float+0x2a4>
 800c246:	bf00      	nop
 800c248:	7fefffff 	.word	0x7fefffff
 800c24c:	0800ffbe 	.word	0x0800ffbe
 800c250:	0800ffc2 	.word	0x0800ffc2
 800c254:	0800ffc6 	.word	0x0800ffc6
 800c258:	0800ffca 	.word	0x0800ffca
 800c25c:	0800ffce 	.word	0x0800ffce
 800c260:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c262:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c266:	4553      	cmp	r3, sl
 800c268:	bfa8      	it	ge
 800c26a:	4653      	movge	r3, sl
 800c26c:	2b00      	cmp	r3, #0
 800c26e:	4699      	mov	r9, r3
 800c270:	dc36      	bgt.n	800c2e0 <_printf_float+0x360>
 800c272:	f04f 0b00 	mov.w	fp, #0
 800c276:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c27a:	f104 021a 	add.w	r2, r4, #26
 800c27e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c280:	9306      	str	r3, [sp, #24]
 800c282:	eba3 0309 	sub.w	r3, r3, r9
 800c286:	455b      	cmp	r3, fp
 800c288:	dc31      	bgt.n	800c2ee <_printf_float+0x36e>
 800c28a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c28c:	459a      	cmp	sl, r3
 800c28e:	dc3a      	bgt.n	800c306 <_printf_float+0x386>
 800c290:	6823      	ldr	r3, [r4, #0]
 800c292:	07da      	lsls	r2, r3, #31
 800c294:	d437      	bmi.n	800c306 <_printf_float+0x386>
 800c296:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c298:	ebaa 0903 	sub.w	r9, sl, r3
 800c29c:	9b06      	ldr	r3, [sp, #24]
 800c29e:	ebaa 0303 	sub.w	r3, sl, r3
 800c2a2:	4599      	cmp	r9, r3
 800c2a4:	bfa8      	it	ge
 800c2a6:	4699      	movge	r9, r3
 800c2a8:	f1b9 0f00 	cmp.w	r9, #0
 800c2ac:	dc33      	bgt.n	800c316 <_printf_float+0x396>
 800c2ae:	f04f 0800 	mov.w	r8, #0
 800c2b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c2b6:	f104 0b1a 	add.w	fp, r4, #26
 800c2ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2bc:	ebaa 0303 	sub.w	r3, sl, r3
 800c2c0:	eba3 0309 	sub.w	r3, r3, r9
 800c2c4:	4543      	cmp	r3, r8
 800c2c6:	f77f af79 	ble.w	800c1bc <_printf_float+0x23c>
 800c2ca:	2301      	movs	r3, #1
 800c2cc:	465a      	mov	r2, fp
 800c2ce:	4631      	mov	r1, r6
 800c2d0:	4628      	mov	r0, r5
 800c2d2:	47b8      	blx	r7
 800c2d4:	3001      	adds	r0, #1
 800c2d6:	f43f aeae 	beq.w	800c036 <_printf_float+0xb6>
 800c2da:	f108 0801 	add.w	r8, r8, #1
 800c2de:	e7ec      	b.n	800c2ba <_printf_float+0x33a>
 800c2e0:	4642      	mov	r2, r8
 800c2e2:	4631      	mov	r1, r6
 800c2e4:	4628      	mov	r0, r5
 800c2e6:	47b8      	blx	r7
 800c2e8:	3001      	adds	r0, #1
 800c2ea:	d1c2      	bne.n	800c272 <_printf_float+0x2f2>
 800c2ec:	e6a3      	b.n	800c036 <_printf_float+0xb6>
 800c2ee:	2301      	movs	r3, #1
 800c2f0:	4631      	mov	r1, r6
 800c2f2:	4628      	mov	r0, r5
 800c2f4:	9206      	str	r2, [sp, #24]
 800c2f6:	47b8      	blx	r7
 800c2f8:	3001      	adds	r0, #1
 800c2fa:	f43f ae9c 	beq.w	800c036 <_printf_float+0xb6>
 800c2fe:	9a06      	ldr	r2, [sp, #24]
 800c300:	f10b 0b01 	add.w	fp, fp, #1
 800c304:	e7bb      	b.n	800c27e <_printf_float+0x2fe>
 800c306:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c30a:	4631      	mov	r1, r6
 800c30c:	4628      	mov	r0, r5
 800c30e:	47b8      	blx	r7
 800c310:	3001      	adds	r0, #1
 800c312:	d1c0      	bne.n	800c296 <_printf_float+0x316>
 800c314:	e68f      	b.n	800c036 <_printf_float+0xb6>
 800c316:	9a06      	ldr	r2, [sp, #24]
 800c318:	464b      	mov	r3, r9
 800c31a:	4442      	add	r2, r8
 800c31c:	4631      	mov	r1, r6
 800c31e:	4628      	mov	r0, r5
 800c320:	47b8      	blx	r7
 800c322:	3001      	adds	r0, #1
 800c324:	d1c3      	bne.n	800c2ae <_printf_float+0x32e>
 800c326:	e686      	b.n	800c036 <_printf_float+0xb6>
 800c328:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c32c:	f1ba 0f01 	cmp.w	sl, #1
 800c330:	dc01      	bgt.n	800c336 <_printf_float+0x3b6>
 800c332:	07db      	lsls	r3, r3, #31
 800c334:	d536      	bpl.n	800c3a4 <_printf_float+0x424>
 800c336:	2301      	movs	r3, #1
 800c338:	4642      	mov	r2, r8
 800c33a:	4631      	mov	r1, r6
 800c33c:	4628      	mov	r0, r5
 800c33e:	47b8      	blx	r7
 800c340:	3001      	adds	r0, #1
 800c342:	f43f ae78 	beq.w	800c036 <_printf_float+0xb6>
 800c346:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c34a:	4631      	mov	r1, r6
 800c34c:	4628      	mov	r0, r5
 800c34e:	47b8      	blx	r7
 800c350:	3001      	adds	r0, #1
 800c352:	f43f ae70 	beq.w	800c036 <_printf_float+0xb6>
 800c356:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c35a:	2200      	movs	r2, #0
 800c35c:	2300      	movs	r3, #0
 800c35e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c362:	f7f4 fc01 	bl	8000b68 <__aeabi_dcmpeq>
 800c366:	b9c0      	cbnz	r0, 800c39a <_printf_float+0x41a>
 800c368:	4653      	mov	r3, sl
 800c36a:	f108 0201 	add.w	r2, r8, #1
 800c36e:	4631      	mov	r1, r6
 800c370:	4628      	mov	r0, r5
 800c372:	47b8      	blx	r7
 800c374:	3001      	adds	r0, #1
 800c376:	d10c      	bne.n	800c392 <_printf_float+0x412>
 800c378:	e65d      	b.n	800c036 <_printf_float+0xb6>
 800c37a:	2301      	movs	r3, #1
 800c37c:	465a      	mov	r2, fp
 800c37e:	4631      	mov	r1, r6
 800c380:	4628      	mov	r0, r5
 800c382:	47b8      	blx	r7
 800c384:	3001      	adds	r0, #1
 800c386:	f43f ae56 	beq.w	800c036 <_printf_float+0xb6>
 800c38a:	f108 0801 	add.w	r8, r8, #1
 800c38e:	45d0      	cmp	r8, sl
 800c390:	dbf3      	blt.n	800c37a <_printf_float+0x3fa>
 800c392:	464b      	mov	r3, r9
 800c394:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c398:	e6df      	b.n	800c15a <_printf_float+0x1da>
 800c39a:	f04f 0800 	mov.w	r8, #0
 800c39e:	f104 0b1a 	add.w	fp, r4, #26
 800c3a2:	e7f4      	b.n	800c38e <_printf_float+0x40e>
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	4642      	mov	r2, r8
 800c3a8:	e7e1      	b.n	800c36e <_printf_float+0x3ee>
 800c3aa:	2301      	movs	r3, #1
 800c3ac:	464a      	mov	r2, r9
 800c3ae:	4631      	mov	r1, r6
 800c3b0:	4628      	mov	r0, r5
 800c3b2:	47b8      	blx	r7
 800c3b4:	3001      	adds	r0, #1
 800c3b6:	f43f ae3e 	beq.w	800c036 <_printf_float+0xb6>
 800c3ba:	f108 0801 	add.w	r8, r8, #1
 800c3be:	68e3      	ldr	r3, [r4, #12]
 800c3c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c3c2:	1a5b      	subs	r3, r3, r1
 800c3c4:	4543      	cmp	r3, r8
 800c3c6:	dcf0      	bgt.n	800c3aa <_printf_float+0x42a>
 800c3c8:	e6fc      	b.n	800c1c4 <_printf_float+0x244>
 800c3ca:	f04f 0800 	mov.w	r8, #0
 800c3ce:	f104 0919 	add.w	r9, r4, #25
 800c3d2:	e7f4      	b.n	800c3be <_printf_float+0x43e>

0800c3d4 <_printf_common>:
 800c3d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3d8:	4616      	mov	r6, r2
 800c3da:	4698      	mov	r8, r3
 800c3dc:	688a      	ldr	r2, [r1, #8]
 800c3de:	690b      	ldr	r3, [r1, #16]
 800c3e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c3e4:	4293      	cmp	r3, r2
 800c3e6:	bfb8      	it	lt
 800c3e8:	4613      	movlt	r3, r2
 800c3ea:	6033      	str	r3, [r6, #0]
 800c3ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c3f0:	4607      	mov	r7, r0
 800c3f2:	460c      	mov	r4, r1
 800c3f4:	b10a      	cbz	r2, 800c3fa <_printf_common+0x26>
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	6033      	str	r3, [r6, #0]
 800c3fa:	6823      	ldr	r3, [r4, #0]
 800c3fc:	0699      	lsls	r1, r3, #26
 800c3fe:	bf42      	ittt	mi
 800c400:	6833      	ldrmi	r3, [r6, #0]
 800c402:	3302      	addmi	r3, #2
 800c404:	6033      	strmi	r3, [r6, #0]
 800c406:	6825      	ldr	r5, [r4, #0]
 800c408:	f015 0506 	ands.w	r5, r5, #6
 800c40c:	d106      	bne.n	800c41c <_printf_common+0x48>
 800c40e:	f104 0a19 	add.w	sl, r4, #25
 800c412:	68e3      	ldr	r3, [r4, #12]
 800c414:	6832      	ldr	r2, [r6, #0]
 800c416:	1a9b      	subs	r3, r3, r2
 800c418:	42ab      	cmp	r3, r5
 800c41a:	dc26      	bgt.n	800c46a <_printf_common+0x96>
 800c41c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c420:	6822      	ldr	r2, [r4, #0]
 800c422:	3b00      	subs	r3, #0
 800c424:	bf18      	it	ne
 800c426:	2301      	movne	r3, #1
 800c428:	0692      	lsls	r2, r2, #26
 800c42a:	d42b      	bmi.n	800c484 <_printf_common+0xb0>
 800c42c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c430:	4641      	mov	r1, r8
 800c432:	4638      	mov	r0, r7
 800c434:	47c8      	blx	r9
 800c436:	3001      	adds	r0, #1
 800c438:	d01e      	beq.n	800c478 <_printf_common+0xa4>
 800c43a:	6823      	ldr	r3, [r4, #0]
 800c43c:	6922      	ldr	r2, [r4, #16]
 800c43e:	f003 0306 	and.w	r3, r3, #6
 800c442:	2b04      	cmp	r3, #4
 800c444:	bf02      	ittt	eq
 800c446:	68e5      	ldreq	r5, [r4, #12]
 800c448:	6833      	ldreq	r3, [r6, #0]
 800c44a:	1aed      	subeq	r5, r5, r3
 800c44c:	68a3      	ldr	r3, [r4, #8]
 800c44e:	bf0c      	ite	eq
 800c450:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c454:	2500      	movne	r5, #0
 800c456:	4293      	cmp	r3, r2
 800c458:	bfc4      	itt	gt
 800c45a:	1a9b      	subgt	r3, r3, r2
 800c45c:	18ed      	addgt	r5, r5, r3
 800c45e:	2600      	movs	r6, #0
 800c460:	341a      	adds	r4, #26
 800c462:	42b5      	cmp	r5, r6
 800c464:	d11a      	bne.n	800c49c <_printf_common+0xc8>
 800c466:	2000      	movs	r0, #0
 800c468:	e008      	b.n	800c47c <_printf_common+0xa8>
 800c46a:	2301      	movs	r3, #1
 800c46c:	4652      	mov	r2, sl
 800c46e:	4641      	mov	r1, r8
 800c470:	4638      	mov	r0, r7
 800c472:	47c8      	blx	r9
 800c474:	3001      	adds	r0, #1
 800c476:	d103      	bne.n	800c480 <_printf_common+0xac>
 800c478:	f04f 30ff 	mov.w	r0, #4294967295
 800c47c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c480:	3501      	adds	r5, #1
 800c482:	e7c6      	b.n	800c412 <_printf_common+0x3e>
 800c484:	18e1      	adds	r1, r4, r3
 800c486:	1c5a      	adds	r2, r3, #1
 800c488:	2030      	movs	r0, #48	@ 0x30
 800c48a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c48e:	4422      	add	r2, r4
 800c490:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c494:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c498:	3302      	adds	r3, #2
 800c49a:	e7c7      	b.n	800c42c <_printf_common+0x58>
 800c49c:	2301      	movs	r3, #1
 800c49e:	4622      	mov	r2, r4
 800c4a0:	4641      	mov	r1, r8
 800c4a2:	4638      	mov	r0, r7
 800c4a4:	47c8      	blx	r9
 800c4a6:	3001      	adds	r0, #1
 800c4a8:	d0e6      	beq.n	800c478 <_printf_common+0xa4>
 800c4aa:	3601      	adds	r6, #1
 800c4ac:	e7d9      	b.n	800c462 <_printf_common+0x8e>
	...

0800c4b0 <_printf_i>:
 800c4b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c4b4:	7e0f      	ldrb	r7, [r1, #24]
 800c4b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c4b8:	2f78      	cmp	r7, #120	@ 0x78
 800c4ba:	4691      	mov	r9, r2
 800c4bc:	4680      	mov	r8, r0
 800c4be:	460c      	mov	r4, r1
 800c4c0:	469a      	mov	sl, r3
 800c4c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c4c6:	d807      	bhi.n	800c4d8 <_printf_i+0x28>
 800c4c8:	2f62      	cmp	r7, #98	@ 0x62
 800c4ca:	d80a      	bhi.n	800c4e2 <_printf_i+0x32>
 800c4cc:	2f00      	cmp	r7, #0
 800c4ce:	f000 80d2 	beq.w	800c676 <_printf_i+0x1c6>
 800c4d2:	2f58      	cmp	r7, #88	@ 0x58
 800c4d4:	f000 80b9 	beq.w	800c64a <_printf_i+0x19a>
 800c4d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c4dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c4e0:	e03a      	b.n	800c558 <_printf_i+0xa8>
 800c4e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c4e6:	2b15      	cmp	r3, #21
 800c4e8:	d8f6      	bhi.n	800c4d8 <_printf_i+0x28>
 800c4ea:	a101      	add	r1, pc, #4	@ (adr r1, 800c4f0 <_printf_i+0x40>)
 800c4ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c4f0:	0800c549 	.word	0x0800c549
 800c4f4:	0800c55d 	.word	0x0800c55d
 800c4f8:	0800c4d9 	.word	0x0800c4d9
 800c4fc:	0800c4d9 	.word	0x0800c4d9
 800c500:	0800c4d9 	.word	0x0800c4d9
 800c504:	0800c4d9 	.word	0x0800c4d9
 800c508:	0800c55d 	.word	0x0800c55d
 800c50c:	0800c4d9 	.word	0x0800c4d9
 800c510:	0800c4d9 	.word	0x0800c4d9
 800c514:	0800c4d9 	.word	0x0800c4d9
 800c518:	0800c4d9 	.word	0x0800c4d9
 800c51c:	0800c65d 	.word	0x0800c65d
 800c520:	0800c587 	.word	0x0800c587
 800c524:	0800c617 	.word	0x0800c617
 800c528:	0800c4d9 	.word	0x0800c4d9
 800c52c:	0800c4d9 	.word	0x0800c4d9
 800c530:	0800c67f 	.word	0x0800c67f
 800c534:	0800c4d9 	.word	0x0800c4d9
 800c538:	0800c587 	.word	0x0800c587
 800c53c:	0800c4d9 	.word	0x0800c4d9
 800c540:	0800c4d9 	.word	0x0800c4d9
 800c544:	0800c61f 	.word	0x0800c61f
 800c548:	6833      	ldr	r3, [r6, #0]
 800c54a:	1d1a      	adds	r2, r3, #4
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	6032      	str	r2, [r6, #0]
 800c550:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c554:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c558:	2301      	movs	r3, #1
 800c55a:	e09d      	b.n	800c698 <_printf_i+0x1e8>
 800c55c:	6833      	ldr	r3, [r6, #0]
 800c55e:	6820      	ldr	r0, [r4, #0]
 800c560:	1d19      	adds	r1, r3, #4
 800c562:	6031      	str	r1, [r6, #0]
 800c564:	0606      	lsls	r6, r0, #24
 800c566:	d501      	bpl.n	800c56c <_printf_i+0xbc>
 800c568:	681d      	ldr	r5, [r3, #0]
 800c56a:	e003      	b.n	800c574 <_printf_i+0xc4>
 800c56c:	0645      	lsls	r5, r0, #25
 800c56e:	d5fb      	bpl.n	800c568 <_printf_i+0xb8>
 800c570:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c574:	2d00      	cmp	r5, #0
 800c576:	da03      	bge.n	800c580 <_printf_i+0xd0>
 800c578:	232d      	movs	r3, #45	@ 0x2d
 800c57a:	426d      	negs	r5, r5
 800c57c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c580:	4859      	ldr	r0, [pc, #356]	@ (800c6e8 <_printf_i+0x238>)
 800c582:	230a      	movs	r3, #10
 800c584:	e011      	b.n	800c5aa <_printf_i+0xfa>
 800c586:	6821      	ldr	r1, [r4, #0]
 800c588:	6833      	ldr	r3, [r6, #0]
 800c58a:	0608      	lsls	r0, r1, #24
 800c58c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c590:	d402      	bmi.n	800c598 <_printf_i+0xe8>
 800c592:	0649      	lsls	r1, r1, #25
 800c594:	bf48      	it	mi
 800c596:	b2ad      	uxthmi	r5, r5
 800c598:	2f6f      	cmp	r7, #111	@ 0x6f
 800c59a:	4853      	ldr	r0, [pc, #332]	@ (800c6e8 <_printf_i+0x238>)
 800c59c:	6033      	str	r3, [r6, #0]
 800c59e:	bf14      	ite	ne
 800c5a0:	230a      	movne	r3, #10
 800c5a2:	2308      	moveq	r3, #8
 800c5a4:	2100      	movs	r1, #0
 800c5a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c5aa:	6866      	ldr	r6, [r4, #4]
 800c5ac:	60a6      	str	r6, [r4, #8]
 800c5ae:	2e00      	cmp	r6, #0
 800c5b0:	bfa2      	ittt	ge
 800c5b2:	6821      	ldrge	r1, [r4, #0]
 800c5b4:	f021 0104 	bicge.w	r1, r1, #4
 800c5b8:	6021      	strge	r1, [r4, #0]
 800c5ba:	b90d      	cbnz	r5, 800c5c0 <_printf_i+0x110>
 800c5bc:	2e00      	cmp	r6, #0
 800c5be:	d04b      	beq.n	800c658 <_printf_i+0x1a8>
 800c5c0:	4616      	mov	r6, r2
 800c5c2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c5c6:	fb03 5711 	mls	r7, r3, r1, r5
 800c5ca:	5dc7      	ldrb	r7, [r0, r7]
 800c5cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c5d0:	462f      	mov	r7, r5
 800c5d2:	42bb      	cmp	r3, r7
 800c5d4:	460d      	mov	r5, r1
 800c5d6:	d9f4      	bls.n	800c5c2 <_printf_i+0x112>
 800c5d8:	2b08      	cmp	r3, #8
 800c5da:	d10b      	bne.n	800c5f4 <_printf_i+0x144>
 800c5dc:	6823      	ldr	r3, [r4, #0]
 800c5de:	07df      	lsls	r7, r3, #31
 800c5e0:	d508      	bpl.n	800c5f4 <_printf_i+0x144>
 800c5e2:	6923      	ldr	r3, [r4, #16]
 800c5e4:	6861      	ldr	r1, [r4, #4]
 800c5e6:	4299      	cmp	r1, r3
 800c5e8:	bfde      	ittt	le
 800c5ea:	2330      	movle	r3, #48	@ 0x30
 800c5ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c5f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c5f4:	1b92      	subs	r2, r2, r6
 800c5f6:	6122      	str	r2, [r4, #16]
 800c5f8:	f8cd a000 	str.w	sl, [sp]
 800c5fc:	464b      	mov	r3, r9
 800c5fe:	aa03      	add	r2, sp, #12
 800c600:	4621      	mov	r1, r4
 800c602:	4640      	mov	r0, r8
 800c604:	f7ff fee6 	bl	800c3d4 <_printf_common>
 800c608:	3001      	adds	r0, #1
 800c60a:	d14a      	bne.n	800c6a2 <_printf_i+0x1f2>
 800c60c:	f04f 30ff 	mov.w	r0, #4294967295
 800c610:	b004      	add	sp, #16
 800c612:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c616:	6823      	ldr	r3, [r4, #0]
 800c618:	f043 0320 	orr.w	r3, r3, #32
 800c61c:	6023      	str	r3, [r4, #0]
 800c61e:	4833      	ldr	r0, [pc, #204]	@ (800c6ec <_printf_i+0x23c>)
 800c620:	2778      	movs	r7, #120	@ 0x78
 800c622:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c626:	6823      	ldr	r3, [r4, #0]
 800c628:	6831      	ldr	r1, [r6, #0]
 800c62a:	061f      	lsls	r7, r3, #24
 800c62c:	f851 5b04 	ldr.w	r5, [r1], #4
 800c630:	d402      	bmi.n	800c638 <_printf_i+0x188>
 800c632:	065f      	lsls	r7, r3, #25
 800c634:	bf48      	it	mi
 800c636:	b2ad      	uxthmi	r5, r5
 800c638:	6031      	str	r1, [r6, #0]
 800c63a:	07d9      	lsls	r1, r3, #31
 800c63c:	bf44      	itt	mi
 800c63e:	f043 0320 	orrmi.w	r3, r3, #32
 800c642:	6023      	strmi	r3, [r4, #0]
 800c644:	b11d      	cbz	r5, 800c64e <_printf_i+0x19e>
 800c646:	2310      	movs	r3, #16
 800c648:	e7ac      	b.n	800c5a4 <_printf_i+0xf4>
 800c64a:	4827      	ldr	r0, [pc, #156]	@ (800c6e8 <_printf_i+0x238>)
 800c64c:	e7e9      	b.n	800c622 <_printf_i+0x172>
 800c64e:	6823      	ldr	r3, [r4, #0]
 800c650:	f023 0320 	bic.w	r3, r3, #32
 800c654:	6023      	str	r3, [r4, #0]
 800c656:	e7f6      	b.n	800c646 <_printf_i+0x196>
 800c658:	4616      	mov	r6, r2
 800c65a:	e7bd      	b.n	800c5d8 <_printf_i+0x128>
 800c65c:	6833      	ldr	r3, [r6, #0]
 800c65e:	6825      	ldr	r5, [r4, #0]
 800c660:	6961      	ldr	r1, [r4, #20]
 800c662:	1d18      	adds	r0, r3, #4
 800c664:	6030      	str	r0, [r6, #0]
 800c666:	062e      	lsls	r6, r5, #24
 800c668:	681b      	ldr	r3, [r3, #0]
 800c66a:	d501      	bpl.n	800c670 <_printf_i+0x1c0>
 800c66c:	6019      	str	r1, [r3, #0]
 800c66e:	e002      	b.n	800c676 <_printf_i+0x1c6>
 800c670:	0668      	lsls	r0, r5, #25
 800c672:	d5fb      	bpl.n	800c66c <_printf_i+0x1bc>
 800c674:	8019      	strh	r1, [r3, #0]
 800c676:	2300      	movs	r3, #0
 800c678:	6123      	str	r3, [r4, #16]
 800c67a:	4616      	mov	r6, r2
 800c67c:	e7bc      	b.n	800c5f8 <_printf_i+0x148>
 800c67e:	6833      	ldr	r3, [r6, #0]
 800c680:	1d1a      	adds	r2, r3, #4
 800c682:	6032      	str	r2, [r6, #0]
 800c684:	681e      	ldr	r6, [r3, #0]
 800c686:	6862      	ldr	r2, [r4, #4]
 800c688:	2100      	movs	r1, #0
 800c68a:	4630      	mov	r0, r6
 800c68c:	f7f3 fdf0 	bl	8000270 <memchr>
 800c690:	b108      	cbz	r0, 800c696 <_printf_i+0x1e6>
 800c692:	1b80      	subs	r0, r0, r6
 800c694:	6060      	str	r0, [r4, #4]
 800c696:	6863      	ldr	r3, [r4, #4]
 800c698:	6123      	str	r3, [r4, #16]
 800c69a:	2300      	movs	r3, #0
 800c69c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c6a0:	e7aa      	b.n	800c5f8 <_printf_i+0x148>
 800c6a2:	6923      	ldr	r3, [r4, #16]
 800c6a4:	4632      	mov	r2, r6
 800c6a6:	4649      	mov	r1, r9
 800c6a8:	4640      	mov	r0, r8
 800c6aa:	47d0      	blx	sl
 800c6ac:	3001      	adds	r0, #1
 800c6ae:	d0ad      	beq.n	800c60c <_printf_i+0x15c>
 800c6b0:	6823      	ldr	r3, [r4, #0]
 800c6b2:	079b      	lsls	r3, r3, #30
 800c6b4:	d413      	bmi.n	800c6de <_printf_i+0x22e>
 800c6b6:	68e0      	ldr	r0, [r4, #12]
 800c6b8:	9b03      	ldr	r3, [sp, #12]
 800c6ba:	4298      	cmp	r0, r3
 800c6bc:	bfb8      	it	lt
 800c6be:	4618      	movlt	r0, r3
 800c6c0:	e7a6      	b.n	800c610 <_printf_i+0x160>
 800c6c2:	2301      	movs	r3, #1
 800c6c4:	4632      	mov	r2, r6
 800c6c6:	4649      	mov	r1, r9
 800c6c8:	4640      	mov	r0, r8
 800c6ca:	47d0      	blx	sl
 800c6cc:	3001      	adds	r0, #1
 800c6ce:	d09d      	beq.n	800c60c <_printf_i+0x15c>
 800c6d0:	3501      	adds	r5, #1
 800c6d2:	68e3      	ldr	r3, [r4, #12]
 800c6d4:	9903      	ldr	r1, [sp, #12]
 800c6d6:	1a5b      	subs	r3, r3, r1
 800c6d8:	42ab      	cmp	r3, r5
 800c6da:	dcf2      	bgt.n	800c6c2 <_printf_i+0x212>
 800c6dc:	e7eb      	b.n	800c6b6 <_printf_i+0x206>
 800c6de:	2500      	movs	r5, #0
 800c6e0:	f104 0619 	add.w	r6, r4, #25
 800c6e4:	e7f5      	b.n	800c6d2 <_printf_i+0x222>
 800c6e6:	bf00      	nop
 800c6e8:	0800ffd0 	.word	0x0800ffd0
 800c6ec:	0800ffe1 	.word	0x0800ffe1

0800c6f0 <std>:
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	b510      	push	{r4, lr}
 800c6f4:	4604      	mov	r4, r0
 800c6f6:	e9c0 3300 	strd	r3, r3, [r0]
 800c6fa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c6fe:	6083      	str	r3, [r0, #8]
 800c700:	8181      	strh	r1, [r0, #12]
 800c702:	6643      	str	r3, [r0, #100]	@ 0x64
 800c704:	81c2      	strh	r2, [r0, #14]
 800c706:	6183      	str	r3, [r0, #24]
 800c708:	4619      	mov	r1, r3
 800c70a:	2208      	movs	r2, #8
 800c70c:	305c      	adds	r0, #92	@ 0x5c
 800c70e:	f000 f938 	bl	800c982 <memset>
 800c712:	4b0d      	ldr	r3, [pc, #52]	@ (800c748 <std+0x58>)
 800c714:	6263      	str	r3, [r4, #36]	@ 0x24
 800c716:	4b0d      	ldr	r3, [pc, #52]	@ (800c74c <std+0x5c>)
 800c718:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c71a:	4b0d      	ldr	r3, [pc, #52]	@ (800c750 <std+0x60>)
 800c71c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c71e:	4b0d      	ldr	r3, [pc, #52]	@ (800c754 <std+0x64>)
 800c720:	6323      	str	r3, [r4, #48]	@ 0x30
 800c722:	4b0d      	ldr	r3, [pc, #52]	@ (800c758 <std+0x68>)
 800c724:	6224      	str	r4, [r4, #32]
 800c726:	429c      	cmp	r4, r3
 800c728:	d006      	beq.n	800c738 <std+0x48>
 800c72a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c72e:	4294      	cmp	r4, r2
 800c730:	d002      	beq.n	800c738 <std+0x48>
 800c732:	33d0      	adds	r3, #208	@ 0xd0
 800c734:	429c      	cmp	r4, r3
 800c736:	d105      	bne.n	800c744 <std+0x54>
 800c738:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c73c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c740:	f000 b98a 	b.w	800ca58 <__retarget_lock_init_recursive>
 800c744:	bd10      	pop	{r4, pc}
 800c746:	bf00      	nop
 800c748:	0800c8dd 	.word	0x0800c8dd
 800c74c:	0800c8ff 	.word	0x0800c8ff
 800c750:	0800c937 	.word	0x0800c937
 800c754:	0800c95b 	.word	0x0800c95b
 800c758:	20013ca0 	.word	0x20013ca0

0800c75c <stdio_exit_handler>:
 800c75c:	4a02      	ldr	r2, [pc, #8]	@ (800c768 <stdio_exit_handler+0xc>)
 800c75e:	4903      	ldr	r1, [pc, #12]	@ (800c76c <stdio_exit_handler+0x10>)
 800c760:	4803      	ldr	r0, [pc, #12]	@ (800c770 <stdio_exit_handler+0x14>)
 800c762:	f000 b869 	b.w	800c838 <_fwalk_sglue>
 800c766:	bf00      	nop
 800c768:	20000014 	.word	0x20000014
 800c76c:	0800e3d5 	.word	0x0800e3d5
 800c770:	20000024 	.word	0x20000024

0800c774 <cleanup_stdio>:
 800c774:	6841      	ldr	r1, [r0, #4]
 800c776:	4b0c      	ldr	r3, [pc, #48]	@ (800c7a8 <cleanup_stdio+0x34>)
 800c778:	4299      	cmp	r1, r3
 800c77a:	b510      	push	{r4, lr}
 800c77c:	4604      	mov	r4, r0
 800c77e:	d001      	beq.n	800c784 <cleanup_stdio+0x10>
 800c780:	f001 fe28 	bl	800e3d4 <_fflush_r>
 800c784:	68a1      	ldr	r1, [r4, #8]
 800c786:	4b09      	ldr	r3, [pc, #36]	@ (800c7ac <cleanup_stdio+0x38>)
 800c788:	4299      	cmp	r1, r3
 800c78a:	d002      	beq.n	800c792 <cleanup_stdio+0x1e>
 800c78c:	4620      	mov	r0, r4
 800c78e:	f001 fe21 	bl	800e3d4 <_fflush_r>
 800c792:	68e1      	ldr	r1, [r4, #12]
 800c794:	4b06      	ldr	r3, [pc, #24]	@ (800c7b0 <cleanup_stdio+0x3c>)
 800c796:	4299      	cmp	r1, r3
 800c798:	d004      	beq.n	800c7a4 <cleanup_stdio+0x30>
 800c79a:	4620      	mov	r0, r4
 800c79c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7a0:	f001 be18 	b.w	800e3d4 <_fflush_r>
 800c7a4:	bd10      	pop	{r4, pc}
 800c7a6:	bf00      	nop
 800c7a8:	20013ca0 	.word	0x20013ca0
 800c7ac:	20013d08 	.word	0x20013d08
 800c7b0:	20013d70 	.word	0x20013d70

0800c7b4 <global_stdio_init.part.0>:
 800c7b4:	b510      	push	{r4, lr}
 800c7b6:	4b0b      	ldr	r3, [pc, #44]	@ (800c7e4 <global_stdio_init.part.0+0x30>)
 800c7b8:	4c0b      	ldr	r4, [pc, #44]	@ (800c7e8 <global_stdio_init.part.0+0x34>)
 800c7ba:	4a0c      	ldr	r2, [pc, #48]	@ (800c7ec <global_stdio_init.part.0+0x38>)
 800c7bc:	601a      	str	r2, [r3, #0]
 800c7be:	4620      	mov	r0, r4
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	2104      	movs	r1, #4
 800c7c4:	f7ff ff94 	bl	800c6f0 <std>
 800c7c8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	2109      	movs	r1, #9
 800c7d0:	f7ff ff8e 	bl	800c6f0 <std>
 800c7d4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c7d8:	2202      	movs	r2, #2
 800c7da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c7de:	2112      	movs	r1, #18
 800c7e0:	f7ff bf86 	b.w	800c6f0 <std>
 800c7e4:	20013dd8 	.word	0x20013dd8
 800c7e8:	20013ca0 	.word	0x20013ca0
 800c7ec:	0800c75d 	.word	0x0800c75d

0800c7f0 <__sfp_lock_acquire>:
 800c7f0:	4801      	ldr	r0, [pc, #4]	@ (800c7f8 <__sfp_lock_acquire+0x8>)
 800c7f2:	f000 b932 	b.w	800ca5a <__retarget_lock_acquire_recursive>
 800c7f6:	bf00      	nop
 800c7f8:	20013de1 	.word	0x20013de1

0800c7fc <__sfp_lock_release>:
 800c7fc:	4801      	ldr	r0, [pc, #4]	@ (800c804 <__sfp_lock_release+0x8>)
 800c7fe:	f000 b92d 	b.w	800ca5c <__retarget_lock_release_recursive>
 800c802:	bf00      	nop
 800c804:	20013de1 	.word	0x20013de1

0800c808 <__sinit>:
 800c808:	b510      	push	{r4, lr}
 800c80a:	4604      	mov	r4, r0
 800c80c:	f7ff fff0 	bl	800c7f0 <__sfp_lock_acquire>
 800c810:	6a23      	ldr	r3, [r4, #32]
 800c812:	b11b      	cbz	r3, 800c81c <__sinit+0x14>
 800c814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c818:	f7ff bff0 	b.w	800c7fc <__sfp_lock_release>
 800c81c:	4b04      	ldr	r3, [pc, #16]	@ (800c830 <__sinit+0x28>)
 800c81e:	6223      	str	r3, [r4, #32]
 800c820:	4b04      	ldr	r3, [pc, #16]	@ (800c834 <__sinit+0x2c>)
 800c822:	681b      	ldr	r3, [r3, #0]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d1f5      	bne.n	800c814 <__sinit+0xc>
 800c828:	f7ff ffc4 	bl	800c7b4 <global_stdio_init.part.0>
 800c82c:	e7f2      	b.n	800c814 <__sinit+0xc>
 800c82e:	bf00      	nop
 800c830:	0800c775 	.word	0x0800c775
 800c834:	20013dd8 	.word	0x20013dd8

0800c838 <_fwalk_sglue>:
 800c838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c83c:	4607      	mov	r7, r0
 800c83e:	4688      	mov	r8, r1
 800c840:	4614      	mov	r4, r2
 800c842:	2600      	movs	r6, #0
 800c844:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c848:	f1b9 0901 	subs.w	r9, r9, #1
 800c84c:	d505      	bpl.n	800c85a <_fwalk_sglue+0x22>
 800c84e:	6824      	ldr	r4, [r4, #0]
 800c850:	2c00      	cmp	r4, #0
 800c852:	d1f7      	bne.n	800c844 <_fwalk_sglue+0xc>
 800c854:	4630      	mov	r0, r6
 800c856:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c85a:	89ab      	ldrh	r3, [r5, #12]
 800c85c:	2b01      	cmp	r3, #1
 800c85e:	d907      	bls.n	800c870 <_fwalk_sglue+0x38>
 800c860:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c864:	3301      	adds	r3, #1
 800c866:	d003      	beq.n	800c870 <_fwalk_sglue+0x38>
 800c868:	4629      	mov	r1, r5
 800c86a:	4638      	mov	r0, r7
 800c86c:	47c0      	blx	r8
 800c86e:	4306      	orrs	r6, r0
 800c870:	3568      	adds	r5, #104	@ 0x68
 800c872:	e7e9      	b.n	800c848 <_fwalk_sglue+0x10>

0800c874 <sniprintf>:
 800c874:	b40c      	push	{r2, r3}
 800c876:	b530      	push	{r4, r5, lr}
 800c878:	4b17      	ldr	r3, [pc, #92]	@ (800c8d8 <sniprintf+0x64>)
 800c87a:	1e0c      	subs	r4, r1, #0
 800c87c:	681d      	ldr	r5, [r3, #0]
 800c87e:	b09d      	sub	sp, #116	@ 0x74
 800c880:	da08      	bge.n	800c894 <sniprintf+0x20>
 800c882:	238b      	movs	r3, #139	@ 0x8b
 800c884:	602b      	str	r3, [r5, #0]
 800c886:	f04f 30ff 	mov.w	r0, #4294967295
 800c88a:	b01d      	add	sp, #116	@ 0x74
 800c88c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c890:	b002      	add	sp, #8
 800c892:	4770      	bx	lr
 800c894:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800c898:	f8ad 3014 	strh.w	r3, [sp, #20]
 800c89c:	bf14      	ite	ne
 800c89e:	f104 33ff 	addne.w	r3, r4, #4294967295
 800c8a2:	4623      	moveq	r3, r4
 800c8a4:	9304      	str	r3, [sp, #16]
 800c8a6:	9307      	str	r3, [sp, #28]
 800c8a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800c8ac:	9002      	str	r0, [sp, #8]
 800c8ae:	9006      	str	r0, [sp, #24]
 800c8b0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800c8b4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800c8b6:	ab21      	add	r3, sp, #132	@ 0x84
 800c8b8:	a902      	add	r1, sp, #8
 800c8ba:	4628      	mov	r0, r5
 800c8bc:	9301      	str	r3, [sp, #4]
 800c8be:	f001 fc09 	bl	800e0d4 <_svfiprintf_r>
 800c8c2:	1c43      	adds	r3, r0, #1
 800c8c4:	bfbc      	itt	lt
 800c8c6:	238b      	movlt	r3, #139	@ 0x8b
 800c8c8:	602b      	strlt	r3, [r5, #0]
 800c8ca:	2c00      	cmp	r4, #0
 800c8cc:	d0dd      	beq.n	800c88a <sniprintf+0x16>
 800c8ce:	9b02      	ldr	r3, [sp, #8]
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	701a      	strb	r2, [r3, #0]
 800c8d4:	e7d9      	b.n	800c88a <sniprintf+0x16>
 800c8d6:	bf00      	nop
 800c8d8:	20000020 	.word	0x20000020

0800c8dc <__sread>:
 800c8dc:	b510      	push	{r4, lr}
 800c8de:	460c      	mov	r4, r1
 800c8e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8e4:	f000 f87c 	bl	800c9e0 <_read_r>
 800c8e8:	2800      	cmp	r0, #0
 800c8ea:	bfab      	itete	ge
 800c8ec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c8ee:	89a3      	ldrhlt	r3, [r4, #12]
 800c8f0:	181b      	addge	r3, r3, r0
 800c8f2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c8f6:	bfac      	ite	ge
 800c8f8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c8fa:	81a3      	strhlt	r3, [r4, #12]
 800c8fc:	bd10      	pop	{r4, pc}

0800c8fe <__swrite>:
 800c8fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c902:	461f      	mov	r7, r3
 800c904:	898b      	ldrh	r3, [r1, #12]
 800c906:	05db      	lsls	r3, r3, #23
 800c908:	4605      	mov	r5, r0
 800c90a:	460c      	mov	r4, r1
 800c90c:	4616      	mov	r6, r2
 800c90e:	d505      	bpl.n	800c91c <__swrite+0x1e>
 800c910:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c914:	2302      	movs	r3, #2
 800c916:	2200      	movs	r2, #0
 800c918:	f000 f850 	bl	800c9bc <_lseek_r>
 800c91c:	89a3      	ldrh	r3, [r4, #12]
 800c91e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c922:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c926:	81a3      	strh	r3, [r4, #12]
 800c928:	4632      	mov	r2, r6
 800c92a:	463b      	mov	r3, r7
 800c92c:	4628      	mov	r0, r5
 800c92e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c932:	f7ff ba75 	b.w	800be20 <_write_r>

0800c936 <__sseek>:
 800c936:	b510      	push	{r4, lr}
 800c938:	460c      	mov	r4, r1
 800c93a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c93e:	f000 f83d 	bl	800c9bc <_lseek_r>
 800c942:	1c43      	adds	r3, r0, #1
 800c944:	89a3      	ldrh	r3, [r4, #12]
 800c946:	bf15      	itete	ne
 800c948:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c94a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c94e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c952:	81a3      	strheq	r3, [r4, #12]
 800c954:	bf18      	it	ne
 800c956:	81a3      	strhne	r3, [r4, #12]
 800c958:	bd10      	pop	{r4, pc}

0800c95a <__sclose>:
 800c95a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c95e:	f000 b81d 	b.w	800c99c <_close_r>

0800c962 <memcmp>:
 800c962:	b510      	push	{r4, lr}
 800c964:	3901      	subs	r1, #1
 800c966:	4402      	add	r2, r0
 800c968:	4290      	cmp	r0, r2
 800c96a:	d101      	bne.n	800c970 <memcmp+0xe>
 800c96c:	2000      	movs	r0, #0
 800c96e:	e005      	b.n	800c97c <memcmp+0x1a>
 800c970:	7803      	ldrb	r3, [r0, #0]
 800c972:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c976:	42a3      	cmp	r3, r4
 800c978:	d001      	beq.n	800c97e <memcmp+0x1c>
 800c97a:	1b18      	subs	r0, r3, r4
 800c97c:	bd10      	pop	{r4, pc}
 800c97e:	3001      	adds	r0, #1
 800c980:	e7f2      	b.n	800c968 <memcmp+0x6>

0800c982 <memset>:
 800c982:	4402      	add	r2, r0
 800c984:	4603      	mov	r3, r0
 800c986:	4293      	cmp	r3, r2
 800c988:	d100      	bne.n	800c98c <memset+0xa>
 800c98a:	4770      	bx	lr
 800c98c:	f803 1b01 	strb.w	r1, [r3], #1
 800c990:	e7f9      	b.n	800c986 <memset+0x4>
	...

0800c994 <_localeconv_r>:
 800c994:	4800      	ldr	r0, [pc, #0]	@ (800c998 <_localeconv_r+0x4>)
 800c996:	4770      	bx	lr
 800c998:	20000160 	.word	0x20000160

0800c99c <_close_r>:
 800c99c:	b538      	push	{r3, r4, r5, lr}
 800c99e:	4d06      	ldr	r5, [pc, #24]	@ (800c9b8 <_close_r+0x1c>)
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	4604      	mov	r4, r0
 800c9a4:	4608      	mov	r0, r1
 800c9a6:	602b      	str	r3, [r5, #0]
 800c9a8:	f7f6 fa14 	bl	8002dd4 <_close>
 800c9ac:	1c43      	adds	r3, r0, #1
 800c9ae:	d102      	bne.n	800c9b6 <_close_r+0x1a>
 800c9b0:	682b      	ldr	r3, [r5, #0]
 800c9b2:	b103      	cbz	r3, 800c9b6 <_close_r+0x1a>
 800c9b4:	6023      	str	r3, [r4, #0]
 800c9b6:	bd38      	pop	{r3, r4, r5, pc}
 800c9b8:	20013ddc 	.word	0x20013ddc

0800c9bc <_lseek_r>:
 800c9bc:	b538      	push	{r3, r4, r5, lr}
 800c9be:	4d07      	ldr	r5, [pc, #28]	@ (800c9dc <_lseek_r+0x20>)
 800c9c0:	4604      	mov	r4, r0
 800c9c2:	4608      	mov	r0, r1
 800c9c4:	4611      	mov	r1, r2
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	602a      	str	r2, [r5, #0]
 800c9ca:	461a      	mov	r2, r3
 800c9cc:	f7f6 fa29 	bl	8002e22 <_lseek>
 800c9d0:	1c43      	adds	r3, r0, #1
 800c9d2:	d102      	bne.n	800c9da <_lseek_r+0x1e>
 800c9d4:	682b      	ldr	r3, [r5, #0]
 800c9d6:	b103      	cbz	r3, 800c9da <_lseek_r+0x1e>
 800c9d8:	6023      	str	r3, [r4, #0]
 800c9da:	bd38      	pop	{r3, r4, r5, pc}
 800c9dc:	20013ddc 	.word	0x20013ddc

0800c9e0 <_read_r>:
 800c9e0:	b538      	push	{r3, r4, r5, lr}
 800c9e2:	4d07      	ldr	r5, [pc, #28]	@ (800ca00 <_read_r+0x20>)
 800c9e4:	4604      	mov	r4, r0
 800c9e6:	4608      	mov	r0, r1
 800c9e8:	4611      	mov	r1, r2
 800c9ea:	2200      	movs	r2, #0
 800c9ec:	602a      	str	r2, [r5, #0]
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	f7f6 f9d3 	bl	8002d9a <_read>
 800c9f4:	1c43      	adds	r3, r0, #1
 800c9f6:	d102      	bne.n	800c9fe <_read_r+0x1e>
 800c9f8:	682b      	ldr	r3, [r5, #0]
 800c9fa:	b103      	cbz	r3, 800c9fe <_read_r+0x1e>
 800c9fc:	6023      	str	r3, [r4, #0]
 800c9fe:	bd38      	pop	{r3, r4, r5, pc}
 800ca00:	20013ddc 	.word	0x20013ddc

0800ca04 <__errno>:
 800ca04:	4b01      	ldr	r3, [pc, #4]	@ (800ca0c <__errno+0x8>)
 800ca06:	6818      	ldr	r0, [r3, #0]
 800ca08:	4770      	bx	lr
 800ca0a:	bf00      	nop
 800ca0c:	20000020 	.word	0x20000020

0800ca10 <__libc_init_array>:
 800ca10:	b570      	push	{r4, r5, r6, lr}
 800ca12:	4d0d      	ldr	r5, [pc, #52]	@ (800ca48 <__libc_init_array+0x38>)
 800ca14:	4c0d      	ldr	r4, [pc, #52]	@ (800ca4c <__libc_init_array+0x3c>)
 800ca16:	1b64      	subs	r4, r4, r5
 800ca18:	10a4      	asrs	r4, r4, #2
 800ca1a:	2600      	movs	r6, #0
 800ca1c:	42a6      	cmp	r6, r4
 800ca1e:	d109      	bne.n	800ca34 <__libc_init_array+0x24>
 800ca20:	4d0b      	ldr	r5, [pc, #44]	@ (800ca50 <__libc_init_array+0x40>)
 800ca22:	4c0c      	ldr	r4, [pc, #48]	@ (800ca54 <__libc_init_array+0x44>)
 800ca24:	f002 ffd4 	bl	800f9d0 <_init>
 800ca28:	1b64      	subs	r4, r4, r5
 800ca2a:	10a4      	asrs	r4, r4, #2
 800ca2c:	2600      	movs	r6, #0
 800ca2e:	42a6      	cmp	r6, r4
 800ca30:	d105      	bne.n	800ca3e <__libc_init_array+0x2e>
 800ca32:	bd70      	pop	{r4, r5, r6, pc}
 800ca34:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca38:	4798      	blx	r3
 800ca3a:	3601      	adds	r6, #1
 800ca3c:	e7ee      	b.n	800ca1c <__libc_init_array+0xc>
 800ca3e:	f855 3b04 	ldr.w	r3, [r5], #4
 800ca42:	4798      	blx	r3
 800ca44:	3601      	adds	r6, #1
 800ca46:	e7f2      	b.n	800ca2e <__libc_init_array+0x1e>
 800ca48:	08010368 	.word	0x08010368
 800ca4c:	08010368 	.word	0x08010368
 800ca50:	08010368 	.word	0x08010368
 800ca54:	0801036c 	.word	0x0801036c

0800ca58 <__retarget_lock_init_recursive>:
 800ca58:	4770      	bx	lr

0800ca5a <__retarget_lock_acquire_recursive>:
 800ca5a:	4770      	bx	lr

0800ca5c <__retarget_lock_release_recursive>:
 800ca5c:	4770      	bx	lr

0800ca5e <memcpy>:
 800ca5e:	440a      	add	r2, r1
 800ca60:	4291      	cmp	r1, r2
 800ca62:	f100 33ff 	add.w	r3, r0, #4294967295
 800ca66:	d100      	bne.n	800ca6a <memcpy+0xc>
 800ca68:	4770      	bx	lr
 800ca6a:	b510      	push	{r4, lr}
 800ca6c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ca70:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ca74:	4291      	cmp	r1, r2
 800ca76:	d1f9      	bne.n	800ca6c <memcpy+0xe>
 800ca78:	bd10      	pop	{r4, pc}

0800ca7a <quorem>:
 800ca7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca7e:	6903      	ldr	r3, [r0, #16]
 800ca80:	690c      	ldr	r4, [r1, #16]
 800ca82:	42a3      	cmp	r3, r4
 800ca84:	4607      	mov	r7, r0
 800ca86:	db7e      	blt.n	800cb86 <quorem+0x10c>
 800ca88:	3c01      	subs	r4, #1
 800ca8a:	f101 0814 	add.w	r8, r1, #20
 800ca8e:	00a3      	lsls	r3, r4, #2
 800ca90:	f100 0514 	add.w	r5, r0, #20
 800ca94:	9300      	str	r3, [sp, #0]
 800ca96:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca9a:	9301      	str	r3, [sp, #4]
 800ca9c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800caa0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800caa4:	3301      	adds	r3, #1
 800caa6:	429a      	cmp	r2, r3
 800caa8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800caac:	fbb2 f6f3 	udiv	r6, r2, r3
 800cab0:	d32e      	bcc.n	800cb10 <quorem+0x96>
 800cab2:	f04f 0a00 	mov.w	sl, #0
 800cab6:	46c4      	mov	ip, r8
 800cab8:	46ae      	mov	lr, r5
 800caba:	46d3      	mov	fp, sl
 800cabc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800cac0:	b298      	uxth	r0, r3
 800cac2:	fb06 a000 	mla	r0, r6, r0, sl
 800cac6:	0c02      	lsrs	r2, r0, #16
 800cac8:	0c1b      	lsrs	r3, r3, #16
 800caca:	fb06 2303 	mla	r3, r6, r3, r2
 800cace:	f8de 2000 	ldr.w	r2, [lr]
 800cad2:	b280      	uxth	r0, r0
 800cad4:	b292      	uxth	r2, r2
 800cad6:	1a12      	subs	r2, r2, r0
 800cad8:	445a      	add	r2, fp
 800cada:	f8de 0000 	ldr.w	r0, [lr]
 800cade:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800cae2:	b29b      	uxth	r3, r3
 800cae4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800cae8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800caec:	b292      	uxth	r2, r2
 800caee:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800caf2:	45e1      	cmp	r9, ip
 800caf4:	f84e 2b04 	str.w	r2, [lr], #4
 800caf8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800cafc:	d2de      	bcs.n	800cabc <quorem+0x42>
 800cafe:	9b00      	ldr	r3, [sp, #0]
 800cb00:	58eb      	ldr	r3, [r5, r3]
 800cb02:	b92b      	cbnz	r3, 800cb10 <quorem+0x96>
 800cb04:	9b01      	ldr	r3, [sp, #4]
 800cb06:	3b04      	subs	r3, #4
 800cb08:	429d      	cmp	r5, r3
 800cb0a:	461a      	mov	r2, r3
 800cb0c:	d32f      	bcc.n	800cb6e <quorem+0xf4>
 800cb0e:	613c      	str	r4, [r7, #16]
 800cb10:	4638      	mov	r0, r7
 800cb12:	f001 f97b 	bl	800de0c <__mcmp>
 800cb16:	2800      	cmp	r0, #0
 800cb18:	db25      	blt.n	800cb66 <quorem+0xec>
 800cb1a:	4629      	mov	r1, r5
 800cb1c:	2000      	movs	r0, #0
 800cb1e:	f858 2b04 	ldr.w	r2, [r8], #4
 800cb22:	f8d1 c000 	ldr.w	ip, [r1]
 800cb26:	fa1f fe82 	uxth.w	lr, r2
 800cb2a:	fa1f f38c 	uxth.w	r3, ip
 800cb2e:	eba3 030e 	sub.w	r3, r3, lr
 800cb32:	4403      	add	r3, r0
 800cb34:	0c12      	lsrs	r2, r2, #16
 800cb36:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800cb3a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800cb3e:	b29b      	uxth	r3, r3
 800cb40:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cb44:	45c1      	cmp	r9, r8
 800cb46:	f841 3b04 	str.w	r3, [r1], #4
 800cb4a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800cb4e:	d2e6      	bcs.n	800cb1e <quorem+0xa4>
 800cb50:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cb54:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb58:	b922      	cbnz	r2, 800cb64 <quorem+0xea>
 800cb5a:	3b04      	subs	r3, #4
 800cb5c:	429d      	cmp	r5, r3
 800cb5e:	461a      	mov	r2, r3
 800cb60:	d30b      	bcc.n	800cb7a <quorem+0x100>
 800cb62:	613c      	str	r4, [r7, #16]
 800cb64:	3601      	adds	r6, #1
 800cb66:	4630      	mov	r0, r6
 800cb68:	b003      	add	sp, #12
 800cb6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb6e:	6812      	ldr	r2, [r2, #0]
 800cb70:	3b04      	subs	r3, #4
 800cb72:	2a00      	cmp	r2, #0
 800cb74:	d1cb      	bne.n	800cb0e <quorem+0x94>
 800cb76:	3c01      	subs	r4, #1
 800cb78:	e7c6      	b.n	800cb08 <quorem+0x8e>
 800cb7a:	6812      	ldr	r2, [r2, #0]
 800cb7c:	3b04      	subs	r3, #4
 800cb7e:	2a00      	cmp	r2, #0
 800cb80:	d1ef      	bne.n	800cb62 <quorem+0xe8>
 800cb82:	3c01      	subs	r4, #1
 800cb84:	e7ea      	b.n	800cb5c <quorem+0xe2>
 800cb86:	2000      	movs	r0, #0
 800cb88:	e7ee      	b.n	800cb68 <quorem+0xee>
 800cb8a:	0000      	movs	r0, r0
 800cb8c:	0000      	movs	r0, r0
	...

0800cb90 <_dtoa_r>:
 800cb90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb94:	69c7      	ldr	r7, [r0, #28]
 800cb96:	b099      	sub	sp, #100	@ 0x64
 800cb98:	ed8d 0b02 	vstr	d0, [sp, #8]
 800cb9c:	ec55 4b10 	vmov	r4, r5, d0
 800cba0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800cba2:	9109      	str	r1, [sp, #36]	@ 0x24
 800cba4:	4683      	mov	fp, r0
 800cba6:	920e      	str	r2, [sp, #56]	@ 0x38
 800cba8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800cbaa:	b97f      	cbnz	r7, 800cbcc <_dtoa_r+0x3c>
 800cbac:	2010      	movs	r0, #16
 800cbae:	f000 fdfd 	bl	800d7ac <malloc>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	f8cb 001c 	str.w	r0, [fp, #28]
 800cbb8:	b920      	cbnz	r0, 800cbc4 <_dtoa_r+0x34>
 800cbba:	4ba7      	ldr	r3, [pc, #668]	@ (800ce58 <_dtoa_r+0x2c8>)
 800cbbc:	21ef      	movs	r1, #239	@ 0xef
 800cbbe:	48a7      	ldr	r0, [pc, #668]	@ (800ce5c <_dtoa_r+0x2cc>)
 800cbc0:	f001 fc5a 	bl	800e478 <__assert_func>
 800cbc4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800cbc8:	6007      	str	r7, [r0, #0]
 800cbca:	60c7      	str	r7, [r0, #12]
 800cbcc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cbd0:	6819      	ldr	r1, [r3, #0]
 800cbd2:	b159      	cbz	r1, 800cbec <_dtoa_r+0x5c>
 800cbd4:	685a      	ldr	r2, [r3, #4]
 800cbd6:	604a      	str	r2, [r1, #4]
 800cbd8:	2301      	movs	r3, #1
 800cbda:	4093      	lsls	r3, r2
 800cbdc:	608b      	str	r3, [r1, #8]
 800cbde:	4658      	mov	r0, fp
 800cbe0:	f000 feda 	bl	800d998 <_Bfree>
 800cbe4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cbe8:	2200      	movs	r2, #0
 800cbea:	601a      	str	r2, [r3, #0]
 800cbec:	1e2b      	subs	r3, r5, #0
 800cbee:	bfb9      	ittee	lt
 800cbf0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800cbf4:	9303      	strlt	r3, [sp, #12]
 800cbf6:	2300      	movge	r3, #0
 800cbf8:	6033      	strge	r3, [r6, #0]
 800cbfa:	9f03      	ldr	r7, [sp, #12]
 800cbfc:	4b98      	ldr	r3, [pc, #608]	@ (800ce60 <_dtoa_r+0x2d0>)
 800cbfe:	bfbc      	itt	lt
 800cc00:	2201      	movlt	r2, #1
 800cc02:	6032      	strlt	r2, [r6, #0]
 800cc04:	43bb      	bics	r3, r7
 800cc06:	d112      	bne.n	800cc2e <_dtoa_r+0x9e>
 800cc08:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cc0a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800cc0e:	6013      	str	r3, [r2, #0]
 800cc10:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cc14:	4323      	orrs	r3, r4
 800cc16:	f000 854d 	beq.w	800d6b4 <_dtoa_r+0xb24>
 800cc1a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cc1c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800ce74 <_dtoa_r+0x2e4>
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	f000 854f 	beq.w	800d6c4 <_dtoa_r+0xb34>
 800cc26:	f10a 0303 	add.w	r3, sl, #3
 800cc2a:	f000 bd49 	b.w	800d6c0 <_dtoa_r+0xb30>
 800cc2e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cc32:	2200      	movs	r2, #0
 800cc34:	ec51 0b17 	vmov	r0, r1, d7
 800cc38:	2300      	movs	r3, #0
 800cc3a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800cc3e:	f7f3 ff93 	bl	8000b68 <__aeabi_dcmpeq>
 800cc42:	4680      	mov	r8, r0
 800cc44:	b158      	cbz	r0, 800cc5e <_dtoa_r+0xce>
 800cc46:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800cc48:	2301      	movs	r3, #1
 800cc4a:	6013      	str	r3, [r2, #0]
 800cc4c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800cc4e:	b113      	cbz	r3, 800cc56 <_dtoa_r+0xc6>
 800cc50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800cc52:	4b84      	ldr	r3, [pc, #528]	@ (800ce64 <_dtoa_r+0x2d4>)
 800cc54:	6013      	str	r3, [r2, #0]
 800cc56:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800ce78 <_dtoa_r+0x2e8>
 800cc5a:	f000 bd33 	b.w	800d6c4 <_dtoa_r+0xb34>
 800cc5e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800cc62:	aa16      	add	r2, sp, #88	@ 0x58
 800cc64:	a917      	add	r1, sp, #92	@ 0x5c
 800cc66:	4658      	mov	r0, fp
 800cc68:	f001 f980 	bl	800df6c <__d2b>
 800cc6c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800cc70:	4681      	mov	r9, r0
 800cc72:	2e00      	cmp	r6, #0
 800cc74:	d077      	beq.n	800cd66 <_dtoa_r+0x1d6>
 800cc76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc78:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800cc7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cc80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc84:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800cc88:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800cc8c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800cc90:	4619      	mov	r1, r3
 800cc92:	2200      	movs	r2, #0
 800cc94:	4b74      	ldr	r3, [pc, #464]	@ (800ce68 <_dtoa_r+0x2d8>)
 800cc96:	f7f3 fb47 	bl	8000328 <__aeabi_dsub>
 800cc9a:	a369      	add	r3, pc, #420	@ (adr r3, 800ce40 <_dtoa_r+0x2b0>)
 800cc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca0:	f7f3 fcfa 	bl	8000698 <__aeabi_dmul>
 800cca4:	a368      	add	r3, pc, #416	@ (adr r3, 800ce48 <_dtoa_r+0x2b8>)
 800cca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccaa:	f7f3 fb3f 	bl	800032c <__adddf3>
 800ccae:	4604      	mov	r4, r0
 800ccb0:	4630      	mov	r0, r6
 800ccb2:	460d      	mov	r5, r1
 800ccb4:	f7f3 fc86 	bl	80005c4 <__aeabi_i2d>
 800ccb8:	a365      	add	r3, pc, #404	@ (adr r3, 800ce50 <_dtoa_r+0x2c0>)
 800ccba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccbe:	f7f3 fceb 	bl	8000698 <__aeabi_dmul>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	4620      	mov	r0, r4
 800ccc8:	4629      	mov	r1, r5
 800ccca:	f7f3 fb2f 	bl	800032c <__adddf3>
 800ccce:	4604      	mov	r4, r0
 800ccd0:	460d      	mov	r5, r1
 800ccd2:	f7f3 ff91 	bl	8000bf8 <__aeabi_d2iz>
 800ccd6:	2200      	movs	r2, #0
 800ccd8:	4607      	mov	r7, r0
 800ccda:	2300      	movs	r3, #0
 800ccdc:	4620      	mov	r0, r4
 800ccde:	4629      	mov	r1, r5
 800cce0:	f7f3 ff4c 	bl	8000b7c <__aeabi_dcmplt>
 800cce4:	b140      	cbz	r0, 800ccf8 <_dtoa_r+0x168>
 800cce6:	4638      	mov	r0, r7
 800cce8:	f7f3 fc6c 	bl	80005c4 <__aeabi_i2d>
 800ccec:	4622      	mov	r2, r4
 800ccee:	462b      	mov	r3, r5
 800ccf0:	f7f3 ff3a 	bl	8000b68 <__aeabi_dcmpeq>
 800ccf4:	b900      	cbnz	r0, 800ccf8 <_dtoa_r+0x168>
 800ccf6:	3f01      	subs	r7, #1
 800ccf8:	2f16      	cmp	r7, #22
 800ccfa:	d851      	bhi.n	800cda0 <_dtoa_r+0x210>
 800ccfc:	4b5b      	ldr	r3, [pc, #364]	@ (800ce6c <_dtoa_r+0x2dc>)
 800ccfe:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cd02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cd0a:	f7f3 ff37 	bl	8000b7c <__aeabi_dcmplt>
 800cd0e:	2800      	cmp	r0, #0
 800cd10:	d048      	beq.n	800cda4 <_dtoa_r+0x214>
 800cd12:	3f01      	subs	r7, #1
 800cd14:	2300      	movs	r3, #0
 800cd16:	9312      	str	r3, [sp, #72]	@ 0x48
 800cd18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cd1a:	1b9b      	subs	r3, r3, r6
 800cd1c:	1e5a      	subs	r2, r3, #1
 800cd1e:	bf44      	itt	mi
 800cd20:	f1c3 0801 	rsbmi	r8, r3, #1
 800cd24:	2300      	movmi	r3, #0
 800cd26:	9208      	str	r2, [sp, #32]
 800cd28:	bf54      	ite	pl
 800cd2a:	f04f 0800 	movpl.w	r8, #0
 800cd2e:	9308      	strmi	r3, [sp, #32]
 800cd30:	2f00      	cmp	r7, #0
 800cd32:	db39      	blt.n	800cda8 <_dtoa_r+0x218>
 800cd34:	9b08      	ldr	r3, [sp, #32]
 800cd36:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cd38:	443b      	add	r3, r7
 800cd3a:	9308      	str	r3, [sp, #32]
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd42:	2b09      	cmp	r3, #9
 800cd44:	d864      	bhi.n	800ce10 <_dtoa_r+0x280>
 800cd46:	2b05      	cmp	r3, #5
 800cd48:	bfc4      	itt	gt
 800cd4a:	3b04      	subgt	r3, #4
 800cd4c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cd4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cd50:	f1a3 0302 	sub.w	r3, r3, #2
 800cd54:	bfcc      	ite	gt
 800cd56:	2400      	movgt	r4, #0
 800cd58:	2401      	movle	r4, #1
 800cd5a:	2b03      	cmp	r3, #3
 800cd5c:	d863      	bhi.n	800ce26 <_dtoa_r+0x296>
 800cd5e:	e8df f003 	tbb	[pc, r3]
 800cd62:	372a      	.short	0x372a
 800cd64:	5535      	.short	0x5535
 800cd66:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800cd6a:	441e      	add	r6, r3
 800cd6c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cd70:	2b20      	cmp	r3, #32
 800cd72:	bfc1      	itttt	gt
 800cd74:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cd78:	409f      	lslgt	r7, r3
 800cd7a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cd7e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cd82:	bfd6      	itet	le
 800cd84:	f1c3 0320 	rsble	r3, r3, #32
 800cd88:	ea47 0003 	orrgt.w	r0, r7, r3
 800cd8c:	fa04 f003 	lslle.w	r0, r4, r3
 800cd90:	f7f3 fc08 	bl	80005a4 <__aeabi_ui2d>
 800cd94:	2201      	movs	r2, #1
 800cd96:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cd9a:	3e01      	subs	r6, #1
 800cd9c:	9214      	str	r2, [sp, #80]	@ 0x50
 800cd9e:	e777      	b.n	800cc90 <_dtoa_r+0x100>
 800cda0:	2301      	movs	r3, #1
 800cda2:	e7b8      	b.n	800cd16 <_dtoa_r+0x186>
 800cda4:	9012      	str	r0, [sp, #72]	@ 0x48
 800cda6:	e7b7      	b.n	800cd18 <_dtoa_r+0x188>
 800cda8:	427b      	negs	r3, r7
 800cdaa:	930a      	str	r3, [sp, #40]	@ 0x28
 800cdac:	2300      	movs	r3, #0
 800cdae:	eba8 0807 	sub.w	r8, r8, r7
 800cdb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cdb4:	e7c4      	b.n	800cd40 <_dtoa_r+0x1b0>
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cdba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	dc35      	bgt.n	800ce2c <_dtoa_r+0x29c>
 800cdc0:	2301      	movs	r3, #1
 800cdc2:	9300      	str	r3, [sp, #0]
 800cdc4:	9307      	str	r3, [sp, #28]
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	920e      	str	r2, [sp, #56]	@ 0x38
 800cdca:	e00b      	b.n	800cde4 <_dtoa_r+0x254>
 800cdcc:	2301      	movs	r3, #1
 800cdce:	e7f3      	b.n	800cdb8 <_dtoa_r+0x228>
 800cdd0:	2300      	movs	r3, #0
 800cdd2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cdd4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdd6:	18fb      	adds	r3, r7, r3
 800cdd8:	9300      	str	r3, [sp, #0]
 800cdda:	3301      	adds	r3, #1
 800cddc:	2b01      	cmp	r3, #1
 800cdde:	9307      	str	r3, [sp, #28]
 800cde0:	bfb8      	it	lt
 800cde2:	2301      	movlt	r3, #1
 800cde4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cde8:	2100      	movs	r1, #0
 800cdea:	2204      	movs	r2, #4
 800cdec:	f102 0514 	add.w	r5, r2, #20
 800cdf0:	429d      	cmp	r5, r3
 800cdf2:	d91f      	bls.n	800ce34 <_dtoa_r+0x2a4>
 800cdf4:	6041      	str	r1, [r0, #4]
 800cdf6:	4658      	mov	r0, fp
 800cdf8:	f000 fd8e 	bl	800d918 <_Balloc>
 800cdfc:	4682      	mov	sl, r0
 800cdfe:	2800      	cmp	r0, #0
 800ce00:	d13c      	bne.n	800ce7c <_dtoa_r+0x2ec>
 800ce02:	4b1b      	ldr	r3, [pc, #108]	@ (800ce70 <_dtoa_r+0x2e0>)
 800ce04:	4602      	mov	r2, r0
 800ce06:	f240 11af 	movw	r1, #431	@ 0x1af
 800ce0a:	e6d8      	b.n	800cbbe <_dtoa_r+0x2e>
 800ce0c:	2301      	movs	r3, #1
 800ce0e:	e7e0      	b.n	800cdd2 <_dtoa_r+0x242>
 800ce10:	2401      	movs	r4, #1
 800ce12:	2300      	movs	r3, #0
 800ce14:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce16:	940b      	str	r4, [sp, #44]	@ 0x2c
 800ce18:	f04f 33ff 	mov.w	r3, #4294967295
 800ce1c:	9300      	str	r3, [sp, #0]
 800ce1e:	9307      	str	r3, [sp, #28]
 800ce20:	2200      	movs	r2, #0
 800ce22:	2312      	movs	r3, #18
 800ce24:	e7d0      	b.n	800cdc8 <_dtoa_r+0x238>
 800ce26:	2301      	movs	r3, #1
 800ce28:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ce2a:	e7f5      	b.n	800ce18 <_dtoa_r+0x288>
 800ce2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800ce2e:	9300      	str	r3, [sp, #0]
 800ce30:	9307      	str	r3, [sp, #28]
 800ce32:	e7d7      	b.n	800cde4 <_dtoa_r+0x254>
 800ce34:	3101      	adds	r1, #1
 800ce36:	0052      	lsls	r2, r2, #1
 800ce38:	e7d8      	b.n	800cdec <_dtoa_r+0x25c>
 800ce3a:	bf00      	nop
 800ce3c:	f3af 8000 	nop.w
 800ce40:	636f4361 	.word	0x636f4361
 800ce44:	3fd287a7 	.word	0x3fd287a7
 800ce48:	8b60c8b3 	.word	0x8b60c8b3
 800ce4c:	3fc68a28 	.word	0x3fc68a28
 800ce50:	509f79fb 	.word	0x509f79fb
 800ce54:	3fd34413 	.word	0x3fd34413
 800ce58:	0800ffff 	.word	0x0800ffff
 800ce5c:	08010016 	.word	0x08010016
 800ce60:	7ff00000 	.word	0x7ff00000
 800ce64:	0800ffcf 	.word	0x0800ffcf
 800ce68:	3ff80000 	.word	0x3ff80000
 800ce6c:	08010110 	.word	0x08010110
 800ce70:	0801006e 	.word	0x0801006e
 800ce74:	0800fffb 	.word	0x0800fffb
 800ce78:	0800ffce 	.word	0x0800ffce
 800ce7c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ce80:	6018      	str	r0, [r3, #0]
 800ce82:	9b07      	ldr	r3, [sp, #28]
 800ce84:	2b0e      	cmp	r3, #14
 800ce86:	f200 80a4 	bhi.w	800cfd2 <_dtoa_r+0x442>
 800ce8a:	2c00      	cmp	r4, #0
 800ce8c:	f000 80a1 	beq.w	800cfd2 <_dtoa_r+0x442>
 800ce90:	2f00      	cmp	r7, #0
 800ce92:	dd33      	ble.n	800cefc <_dtoa_r+0x36c>
 800ce94:	4bad      	ldr	r3, [pc, #692]	@ (800d14c <_dtoa_r+0x5bc>)
 800ce96:	f007 020f 	and.w	r2, r7, #15
 800ce9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce9e:	ed93 7b00 	vldr	d7, [r3]
 800cea2:	05f8      	lsls	r0, r7, #23
 800cea4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cea8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ceac:	d516      	bpl.n	800cedc <_dtoa_r+0x34c>
 800ceae:	4ba8      	ldr	r3, [pc, #672]	@ (800d150 <_dtoa_r+0x5c0>)
 800ceb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ceb4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ceb8:	f7f3 fd18 	bl	80008ec <__aeabi_ddiv>
 800cebc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cec0:	f004 040f 	and.w	r4, r4, #15
 800cec4:	2603      	movs	r6, #3
 800cec6:	4da2      	ldr	r5, [pc, #648]	@ (800d150 <_dtoa_r+0x5c0>)
 800cec8:	b954      	cbnz	r4, 800cee0 <_dtoa_r+0x350>
 800ceca:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cece:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ced2:	f7f3 fd0b 	bl	80008ec <__aeabi_ddiv>
 800ced6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ceda:	e028      	b.n	800cf2e <_dtoa_r+0x39e>
 800cedc:	2602      	movs	r6, #2
 800cede:	e7f2      	b.n	800cec6 <_dtoa_r+0x336>
 800cee0:	07e1      	lsls	r1, r4, #31
 800cee2:	d508      	bpl.n	800cef6 <_dtoa_r+0x366>
 800cee4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800cee8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ceec:	f7f3 fbd4 	bl	8000698 <__aeabi_dmul>
 800cef0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800cef4:	3601      	adds	r6, #1
 800cef6:	1064      	asrs	r4, r4, #1
 800cef8:	3508      	adds	r5, #8
 800cefa:	e7e5      	b.n	800cec8 <_dtoa_r+0x338>
 800cefc:	f000 80d2 	beq.w	800d0a4 <_dtoa_r+0x514>
 800cf00:	427c      	negs	r4, r7
 800cf02:	4b92      	ldr	r3, [pc, #584]	@ (800d14c <_dtoa_r+0x5bc>)
 800cf04:	4d92      	ldr	r5, [pc, #584]	@ (800d150 <_dtoa_r+0x5c0>)
 800cf06:	f004 020f 	and.w	r2, r4, #15
 800cf0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf12:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cf16:	f7f3 fbbf 	bl	8000698 <__aeabi_dmul>
 800cf1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf1e:	1124      	asrs	r4, r4, #4
 800cf20:	2300      	movs	r3, #0
 800cf22:	2602      	movs	r6, #2
 800cf24:	2c00      	cmp	r4, #0
 800cf26:	f040 80b2 	bne.w	800d08e <_dtoa_r+0x4fe>
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d1d3      	bne.n	800ced6 <_dtoa_r+0x346>
 800cf2e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cf30:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	f000 80b7 	beq.w	800d0a8 <_dtoa_r+0x518>
 800cf3a:	4b86      	ldr	r3, [pc, #536]	@ (800d154 <_dtoa_r+0x5c4>)
 800cf3c:	2200      	movs	r2, #0
 800cf3e:	4620      	mov	r0, r4
 800cf40:	4629      	mov	r1, r5
 800cf42:	f7f3 fe1b 	bl	8000b7c <__aeabi_dcmplt>
 800cf46:	2800      	cmp	r0, #0
 800cf48:	f000 80ae 	beq.w	800d0a8 <_dtoa_r+0x518>
 800cf4c:	9b07      	ldr	r3, [sp, #28]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	f000 80aa 	beq.w	800d0a8 <_dtoa_r+0x518>
 800cf54:	9b00      	ldr	r3, [sp, #0]
 800cf56:	2b00      	cmp	r3, #0
 800cf58:	dd37      	ble.n	800cfca <_dtoa_r+0x43a>
 800cf5a:	1e7b      	subs	r3, r7, #1
 800cf5c:	9304      	str	r3, [sp, #16]
 800cf5e:	4620      	mov	r0, r4
 800cf60:	4b7d      	ldr	r3, [pc, #500]	@ (800d158 <_dtoa_r+0x5c8>)
 800cf62:	2200      	movs	r2, #0
 800cf64:	4629      	mov	r1, r5
 800cf66:	f7f3 fb97 	bl	8000698 <__aeabi_dmul>
 800cf6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf6e:	9c00      	ldr	r4, [sp, #0]
 800cf70:	3601      	adds	r6, #1
 800cf72:	4630      	mov	r0, r6
 800cf74:	f7f3 fb26 	bl	80005c4 <__aeabi_i2d>
 800cf78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cf7c:	f7f3 fb8c 	bl	8000698 <__aeabi_dmul>
 800cf80:	4b76      	ldr	r3, [pc, #472]	@ (800d15c <_dtoa_r+0x5cc>)
 800cf82:	2200      	movs	r2, #0
 800cf84:	f7f3 f9d2 	bl	800032c <__adddf3>
 800cf88:	4605      	mov	r5, r0
 800cf8a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cf8e:	2c00      	cmp	r4, #0
 800cf90:	f040 808d 	bne.w	800d0ae <_dtoa_r+0x51e>
 800cf94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf98:	4b71      	ldr	r3, [pc, #452]	@ (800d160 <_dtoa_r+0x5d0>)
 800cf9a:	2200      	movs	r2, #0
 800cf9c:	f7f3 f9c4 	bl	8000328 <__aeabi_dsub>
 800cfa0:	4602      	mov	r2, r0
 800cfa2:	460b      	mov	r3, r1
 800cfa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cfa8:	462a      	mov	r2, r5
 800cfaa:	4633      	mov	r3, r6
 800cfac:	f7f3 fe04 	bl	8000bb8 <__aeabi_dcmpgt>
 800cfb0:	2800      	cmp	r0, #0
 800cfb2:	f040 828b 	bne.w	800d4cc <_dtoa_r+0x93c>
 800cfb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfba:	462a      	mov	r2, r5
 800cfbc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cfc0:	f7f3 fddc 	bl	8000b7c <__aeabi_dcmplt>
 800cfc4:	2800      	cmp	r0, #0
 800cfc6:	f040 8128 	bne.w	800d21a <_dtoa_r+0x68a>
 800cfca:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cfce:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cfd2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	f2c0 815a 	blt.w	800d28e <_dtoa_r+0x6fe>
 800cfda:	2f0e      	cmp	r7, #14
 800cfdc:	f300 8157 	bgt.w	800d28e <_dtoa_r+0x6fe>
 800cfe0:	4b5a      	ldr	r3, [pc, #360]	@ (800d14c <_dtoa_r+0x5bc>)
 800cfe2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cfe6:	ed93 7b00 	vldr	d7, [r3]
 800cfea:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cfec:	2b00      	cmp	r3, #0
 800cfee:	ed8d 7b00 	vstr	d7, [sp]
 800cff2:	da03      	bge.n	800cffc <_dtoa_r+0x46c>
 800cff4:	9b07      	ldr	r3, [sp, #28]
 800cff6:	2b00      	cmp	r3, #0
 800cff8:	f340 8101 	ble.w	800d1fe <_dtoa_r+0x66e>
 800cffc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800d000:	4656      	mov	r6, sl
 800d002:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d006:	4620      	mov	r0, r4
 800d008:	4629      	mov	r1, r5
 800d00a:	f7f3 fc6f 	bl	80008ec <__aeabi_ddiv>
 800d00e:	f7f3 fdf3 	bl	8000bf8 <__aeabi_d2iz>
 800d012:	4680      	mov	r8, r0
 800d014:	f7f3 fad6 	bl	80005c4 <__aeabi_i2d>
 800d018:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d01c:	f7f3 fb3c 	bl	8000698 <__aeabi_dmul>
 800d020:	4602      	mov	r2, r0
 800d022:	460b      	mov	r3, r1
 800d024:	4620      	mov	r0, r4
 800d026:	4629      	mov	r1, r5
 800d028:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800d02c:	f7f3 f97c 	bl	8000328 <__aeabi_dsub>
 800d030:	f806 4b01 	strb.w	r4, [r6], #1
 800d034:	9d07      	ldr	r5, [sp, #28]
 800d036:	eba6 040a 	sub.w	r4, r6, sl
 800d03a:	42a5      	cmp	r5, r4
 800d03c:	4602      	mov	r2, r0
 800d03e:	460b      	mov	r3, r1
 800d040:	f040 8117 	bne.w	800d272 <_dtoa_r+0x6e2>
 800d044:	f7f3 f972 	bl	800032c <__adddf3>
 800d048:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d04c:	4604      	mov	r4, r0
 800d04e:	460d      	mov	r5, r1
 800d050:	f7f3 fdb2 	bl	8000bb8 <__aeabi_dcmpgt>
 800d054:	2800      	cmp	r0, #0
 800d056:	f040 80f9 	bne.w	800d24c <_dtoa_r+0x6bc>
 800d05a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d05e:	4620      	mov	r0, r4
 800d060:	4629      	mov	r1, r5
 800d062:	f7f3 fd81 	bl	8000b68 <__aeabi_dcmpeq>
 800d066:	b118      	cbz	r0, 800d070 <_dtoa_r+0x4e0>
 800d068:	f018 0f01 	tst.w	r8, #1
 800d06c:	f040 80ee 	bne.w	800d24c <_dtoa_r+0x6bc>
 800d070:	4649      	mov	r1, r9
 800d072:	4658      	mov	r0, fp
 800d074:	f000 fc90 	bl	800d998 <_Bfree>
 800d078:	2300      	movs	r3, #0
 800d07a:	7033      	strb	r3, [r6, #0]
 800d07c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d07e:	3701      	adds	r7, #1
 800d080:	601f      	str	r7, [r3, #0]
 800d082:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d084:	2b00      	cmp	r3, #0
 800d086:	f000 831d 	beq.w	800d6c4 <_dtoa_r+0xb34>
 800d08a:	601e      	str	r6, [r3, #0]
 800d08c:	e31a      	b.n	800d6c4 <_dtoa_r+0xb34>
 800d08e:	07e2      	lsls	r2, r4, #31
 800d090:	d505      	bpl.n	800d09e <_dtoa_r+0x50e>
 800d092:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d096:	f7f3 faff 	bl	8000698 <__aeabi_dmul>
 800d09a:	3601      	adds	r6, #1
 800d09c:	2301      	movs	r3, #1
 800d09e:	1064      	asrs	r4, r4, #1
 800d0a0:	3508      	adds	r5, #8
 800d0a2:	e73f      	b.n	800cf24 <_dtoa_r+0x394>
 800d0a4:	2602      	movs	r6, #2
 800d0a6:	e742      	b.n	800cf2e <_dtoa_r+0x39e>
 800d0a8:	9c07      	ldr	r4, [sp, #28]
 800d0aa:	9704      	str	r7, [sp, #16]
 800d0ac:	e761      	b.n	800cf72 <_dtoa_r+0x3e2>
 800d0ae:	4b27      	ldr	r3, [pc, #156]	@ (800d14c <_dtoa_r+0x5bc>)
 800d0b0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d0b2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d0b6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d0ba:	4454      	add	r4, sl
 800d0bc:	2900      	cmp	r1, #0
 800d0be:	d053      	beq.n	800d168 <_dtoa_r+0x5d8>
 800d0c0:	4928      	ldr	r1, [pc, #160]	@ (800d164 <_dtoa_r+0x5d4>)
 800d0c2:	2000      	movs	r0, #0
 800d0c4:	f7f3 fc12 	bl	80008ec <__aeabi_ddiv>
 800d0c8:	4633      	mov	r3, r6
 800d0ca:	462a      	mov	r2, r5
 800d0cc:	f7f3 f92c 	bl	8000328 <__aeabi_dsub>
 800d0d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d0d4:	4656      	mov	r6, sl
 800d0d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0da:	f7f3 fd8d 	bl	8000bf8 <__aeabi_d2iz>
 800d0de:	4605      	mov	r5, r0
 800d0e0:	f7f3 fa70 	bl	80005c4 <__aeabi_i2d>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	460b      	mov	r3, r1
 800d0e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d0ec:	f7f3 f91c 	bl	8000328 <__aeabi_dsub>
 800d0f0:	3530      	adds	r5, #48	@ 0x30
 800d0f2:	4602      	mov	r2, r0
 800d0f4:	460b      	mov	r3, r1
 800d0f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d0fa:	f806 5b01 	strb.w	r5, [r6], #1
 800d0fe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d102:	f7f3 fd3b 	bl	8000b7c <__aeabi_dcmplt>
 800d106:	2800      	cmp	r0, #0
 800d108:	d171      	bne.n	800d1ee <_dtoa_r+0x65e>
 800d10a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d10e:	4911      	ldr	r1, [pc, #68]	@ (800d154 <_dtoa_r+0x5c4>)
 800d110:	2000      	movs	r0, #0
 800d112:	f7f3 f909 	bl	8000328 <__aeabi_dsub>
 800d116:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d11a:	f7f3 fd2f 	bl	8000b7c <__aeabi_dcmplt>
 800d11e:	2800      	cmp	r0, #0
 800d120:	f040 8095 	bne.w	800d24e <_dtoa_r+0x6be>
 800d124:	42a6      	cmp	r6, r4
 800d126:	f43f af50 	beq.w	800cfca <_dtoa_r+0x43a>
 800d12a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d12e:	4b0a      	ldr	r3, [pc, #40]	@ (800d158 <_dtoa_r+0x5c8>)
 800d130:	2200      	movs	r2, #0
 800d132:	f7f3 fab1 	bl	8000698 <__aeabi_dmul>
 800d136:	4b08      	ldr	r3, [pc, #32]	@ (800d158 <_dtoa_r+0x5c8>)
 800d138:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d13c:	2200      	movs	r2, #0
 800d13e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d142:	f7f3 faa9 	bl	8000698 <__aeabi_dmul>
 800d146:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d14a:	e7c4      	b.n	800d0d6 <_dtoa_r+0x546>
 800d14c:	08010110 	.word	0x08010110
 800d150:	080100e8 	.word	0x080100e8
 800d154:	3ff00000 	.word	0x3ff00000
 800d158:	40240000 	.word	0x40240000
 800d15c:	401c0000 	.word	0x401c0000
 800d160:	40140000 	.word	0x40140000
 800d164:	3fe00000 	.word	0x3fe00000
 800d168:	4631      	mov	r1, r6
 800d16a:	4628      	mov	r0, r5
 800d16c:	f7f3 fa94 	bl	8000698 <__aeabi_dmul>
 800d170:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800d174:	9415      	str	r4, [sp, #84]	@ 0x54
 800d176:	4656      	mov	r6, sl
 800d178:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d17c:	f7f3 fd3c 	bl	8000bf8 <__aeabi_d2iz>
 800d180:	4605      	mov	r5, r0
 800d182:	f7f3 fa1f 	bl	80005c4 <__aeabi_i2d>
 800d186:	4602      	mov	r2, r0
 800d188:	460b      	mov	r3, r1
 800d18a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d18e:	f7f3 f8cb 	bl	8000328 <__aeabi_dsub>
 800d192:	3530      	adds	r5, #48	@ 0x30
 800d194:	f806 5b01 	strb.w	r5, [r6], #1
 800d198:	4602      	mov	r2, r0
 800d19a:	460b      	mov	r3, r1
 800d19c:	42a6      	cmp	r6, r4
 800d19e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d1a2:	f04f 0200 	mov.w	r2, #0
 800d1a6:	d124      	bne.n	800d1f2 <_dtoa_r+0x662>
 800d1a8:	4bac      	ldr	r3, [pc, #688]	@ (800d45c <_dtoa_r+0x8cc>)
 800d1aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800d1ae:	f7f3 f8bd 	bl	800032c <__adddf3>
 800d1b2:	4602      	mov	r2, r0
 800d1b4:	460b      	mov	r3, r1
 800d1b6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1ba:	f7f3 fcfd 	bl	8000bb8 <__aeabi_dcmpgt>
 800d1be:	2800      	cmp	r0, #0
 800d1c0:	d145      	bne.n	800d24e <_dtoa_r+0x6be>
 800d1c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800d1c6:	49a5      	ldr	r1, [pc, #660]	@ (800d45c <_dtoa_r+0x8cc>)
 800d1c8:	2000      	movs	r0, #0
 800d1ca:	f7f3 f8ad 	bl	8000328 <__aeabi_dsub>
 800d1ce:	4602      	mov	r2, r0
 800d1d0:	460b      	mov	r3, r1
 800d1d2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800d1d6:	f7f3 fcd1 	bl	8000b7c <__aeabi_dcmplt>
 800d1da:	2800      	cmp	r0, #0
 800d1dc:	f43f aef5 	beq.w	800cfca <_dtoa_r+0x43a>
 800d1e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800d1e2:	1e73      	subs	r3, r6, #1
 800d1e4:	9315      	str	r3, [sp, #84]	@ 0x54
 800d1e6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d1ea:	2b30      	cmp	r3, #48	@ 0x30
 800d1ec:	d0f8      	beq.n	800d1e0 <_dtoa_r+0x650>
 800d1ee:	9f04      	ldr	r7, [sp, #16]
 800d1f0:	e73e      	b.n	800d070 <_dtoa_r+0x4e0>
 800d1f2:	4b9b      	ldr	r3, [pc, #620]	@ (800d460 <_dtoa_r+0x8d0>)
 800d1f4:	f7f3 fa50 	bl	8000698 <__aeabi_dmul>
 800d1f8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d1fc:	e7bc      	b.n	800d178 <_dtoa_r+0x5e8>
 800d1fe:	d10c      	bne.n	800d21a <_dtoa_r+0x68a>
 800d200:	4b98      	ldr	r3, [pc, #608]	@ (800d464 <_dtoa_r+0x8d4>)
 800d202:	2200      	movs	r2, #0
 800d204:	e9dd 0100 	ldrd	r0, r1, [sp]
 800d208:	f7f3 fa46 	bl	8000698 <__aeabi_dmul>
 800d20c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d210:	f7f3 fcc8 	bl	8000ba4 <__aeabi_dcmpge>
 800d214:	2800      	cmp	r0, #0
 800d216:	f000 8157 	beq.w	800d4c8 <_dtoa_r+0x938>
 800d21a:	2400      	movs	r4, #0
 800d21c:	4625      	mov	r5, r4
 800d21e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d220:	43db      	mvns	r3, r3
 800d222:	9304      	str	r3, [sp, #16]
 800d224:	4656      	mov	r6, sl
 800d226:	2700      	movs	r7, #0
 800d228:	4621      	mov	r1, r4
 800d22a:	4658      	mov	r0, fp
 800d22c:	f000 fbb4 	bl	800d998 <_Bfree>
 800d230:	2d00      	cmp	r5, #0
 800d232:	d0dc      	beq.n	800d1ee <_dtoa_r+0x65e>
 800d234:	b12f      	cbz	r7, 800d242 <_dtoa_r+0x6b2>
 800d236:	42af      	cmp	r7, r5
 800d238:	d003      	beq.n	800d242 <_dtoa_r+0x6b2>
 800d23a:	4639      	mov	r1, r7
 800d23c:	4658      	mov	r0, fp
 800d23e:	f000 fbab 	bl	800d998 <_Bfree>
 800d242:	4629      	mov	r1, r5
 800d244:	4658      	mov	r0, fp
 800d246:	f000 fba7 	bl	800d998 <_Bfree>
 800d24a:	e7d0      	b.n	800d1ee <_dtoa_r+0x65e>
 800d24c:	9704      	str	r7, [sp, #16]
 800d24e:	4633      	mov	r3, r6
 800d250:	461e      	mov	r6, r3
 800d252:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d256:	2a39      	cmp	r2, #57	@ 0x39
 800d258:	d107      	bne.n	800d26a <_dtoa_r+0x6da>
 800d25a:	459a      	cmp	sl, r3
 800d25c:	d1f8      	bne.n	800d250 <_dtoa_r+0x6c0>
 800d25e:	9a04      	ldr	r2, [sp, #16]
 800d260:	3201      	adds	r2, #1
 800d262:	9204      	str	r2, [sp, #16]
 800d264:	2230      	movs	r2, #48	@ 0x30
 800d266:	f88a 2000 	strb.w	r2, [sl]
 800d26a:	781a      	ldrb	r2, [r3, #0]
 800d26c:	3201      	adds	r2, #1
 800d26e:	701a      	strb	r2, [r3, #0]
 800d270:	e7bd      	b.n	800d1ee <_dtoa_r+0x65e>
 800d272:	4b7b      	ldr	r3, [pc, #492]	@ (800d460 <_dtoa_r+0x8d0>)
 800d274:	2200      	movs	r2, #0
 800d276:	f7f3 fa0f 	bl	8000698 <__aeabi_dmul>
 800d27a:	2200      	movs	r2, #0
 800d27c:	2300      	movs	r3, #0
 800d27e:	4604      	mov	r4, r0
 800d280:	460d      	mov	r5, r1
 800d282:	f7f3 fc71 	bl	8000b68 <__aeabi_dcmpeq>
 800d286:	2800      	cmp	r0, #0
 800d288:	f43f aebb 	beq.w	800d002 <_dtoa_r+0x472>
 800d28c:	e6f0      	b.n	800d070 <_dtoa_r+0x4e0>
 800d28e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d290:	2a00      	cmp	r2, #0
 800d292:	f000 80db 	beq.w	800d44c <_dtoa_r+0x8bc>
 800d296:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d298:	2a01      	cmp	r2, #1
 800d29a:	f300 80bf 	bgt.w	800d41c <_dtoa_r+0x88c>
 800d29e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d2a0:	2a00      	cmp	r2, #0
 800d2a2:	f000 80b7 	beq.w	800d414 <_dtoa_r+0x884>
 800d2a6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d2aa:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d2ac:	4646      	mov	r6, r8
 800d2ae:	9a08      	ldr	r2, [sp, #32]
 800d2b0:	2101      	movs	r1, #1
 800d2b2:	441a      	add	r2, r3
 800d2b4:	4658      	mov	r0, fp
 800d2b6:	4498      	add	r8, r3
 800d2b8:	9208      	str	r2, [sp, #32]
 800d2ba:	f000 fc21 	bl	800db00 <__i2b>
 800d2be:	4605      	mov	r5, r0
 800d2c0:	b15e      	cbz	r6, 800d2da <_dtoa_r+0x74a>
 800d2c2:	9b08      	ldr	r3, [sp, #32]
 800d2c4:	2b00      	cmp	r3, #0
 800d2c6:	dd08      	ble.n	800d2da <_dtoa_r+0x74a>
 800d2c8:	42b3      	cmp	r3, r6
 800d2ca:	9a08      	ldr	r2, [sp, #32]
 800d2cc:	bfa8      	it	ge
 800d2ce:	4633      	movge	r3, r6
 800d2d0:	eba8 0803 	sub.w	r8, r8, r3
 800d2d4:	1af6      	subs	r6, r6, r3
 800d2d6:	1ad3      	subs	r3, r2, r3
 800d2d8:	9308      	str	r3, [sp, #32]
 800d2da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2dc:	b1f3      	cbz	r3, 800d31c <_dtoa_r+0x78c>
 800d2de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2e0:	2b00      	cmp	r3, #0
 800d2e2:	f000 80b7 	beq.w	800d454 <_dtoa_r+0x8c4>
 800d2e6:	b18c      	cbz	r4, 800d30c <_dtoa_r+0x77c>
 800d2e8:	4629      	mov	r1, r5
 800d2ea:	4622      	mov	r2, r4
 800d2ec:	4658      	mov	r0, fp
 800d2ee:	f000 fcc7 	bl	800dc80 <__pow5mult>
 800d2f2:	464a      	mov	r2, r9
 800d2f4:	4601      	mov	r1, r0
 800d2f6:	4605      	mov	r5, r0
 800d2f8:	4658      	mov	r0, fp
 800d2fa:	f000 fc17 	bl	800db2c <__multiply>
 800d2fe:	4649      	mov	r1, r9
 800d300:	9004      	str	r0, [sp, #16]
 800d302:	4658      	mov	r0, fp
 800d304:	f000 fb48 	bl	800d998 <_Bfree>
 800d308:	9b04      	ldr	r3, [sp, #16]
 800d30a:	4699      	mov	r9, r3
 800d30c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d30e:	1b1a      	subs	r2, r3, r4
 800d310:	d004      	beq.n	800d31c <_dtoa_r+0x78c>
 800d312:	4649      	mov	r1, r9
 800d314:	4658      	mov	r0, fp
 800d316:	f000 fcb3 	bl	800dc80 <__pow5mult>
 800d31a:	4681      	mov	r9, r0
 800d31c:	2101      	movs	r1, #1
 800d31e:	4658      	mov	r0, fp
 800d320:	f000 fbee 	bl	800db00 <__i2b>
 800d324:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d326:	4604      	mov	r4, r0
 800d328:	2b00      	cmp	r3, #0
 800d32a:	f000 81cf 	beq.w	800d6cc <_dtoa_r+0xb3c>
 800d32e:	461a      	mov	r2, r3
 800d330:	4601      	mov	r1, r0
 800d332:	4658      	mov	r0, fp
 800d334:	f000 fca4 	bl	800dc80 <__pow5mult>
 800d338:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d33a:	2b01      	cmp	r3, #1
 800d33c:	4604      	mov	r4, r0
 800d33e:	f300 8095 	bgt.w	800d46c <_dtoa_r+0x8dc>
 800d342:	9b02      	ldr	r3, [sp, #8]
 800d344:	2b00      	cmp	r3, #0
 800d346:	f040 8087 	bne.w	800d458 <_dtoa_r+0x8c8>
 800d34a:	9b03      	ldr	r3, [sp, #12]
 800d34c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d350:	2b00      	cmp	r3, #0
 800d352:	f040 8089 	bne.w	800d468 <_dtoa_r+0x8d8>
 800d356:	9b03      	ldr	r3, [sp, #12]
 800d358:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d35c:	0d1b      	lsrs	r3, r3, #20
 800d35e:	051b      	lsls	r3, r3, #20
 800d360:	b12b      	cbz	r3, 800d36e <_dtoa_r+0x7de>
 800d362:	9b08      	ldr	r3, [sp, #32]
 800d364:	3301      	adds	r3, #1
 800d366:	9308      	str	r3, [sp, #32]
 800d368:	f108 0801 	add.w	r8, r8, #1
 800d36c:	2301      	movs	r3, #1
 800d36e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d370:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d372:	2b00      	cmp	r3, #0
 800d374:	f000 81b0 	beq.w	800d6d8 <_dtoa_r+0xb48>
 800d378:	6923      	ldr	r3, [r4, #16]
 800d37a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d37e:	6918      	ldr	r0, [r3, #16]
 800d380:	f000 fb72 	bl	800da68 <__hi0bits>
 800d384:	f1c0 0020 	rsb	r0, r0, #32
 800d388:	9b08      	ldr	r3, [sp, #32]
 800d38a:	4418      	add	r0, r3
 800d38c:	f010 001f 	ands.w	r0, r0, #31
 800d390:	d077      	beq.n	800d482 <_dtoa_r+0x8f2>
 800d392:	f1c0 0320 	rsb	r3, r0, #32
 800d396:	2b04      	cmp	r3, #4
 800d398:	dd6b      	ble.n	800d472 <_dtoa_r+0x8e2>
 800d39a:	9b08      	ldr	r3, [sp, #32]
 800d39c:	f1c0 001c 	rsb	r0, r0, #28
 800d3a0:	4403      	add	r3, r0
 800d3a2:	4480      	add	r8, r0
 800d3a4:	4406      	add	r6, r0
 800d3a6:	9308      	str	r3, [sp, #32]
 800d3a8:	f1b8 0f00 	cmp.w	r8, #0
 800d3ac:	dd05      	ble.n	800d3ba <_dtoa_r+0x82a>
 800d3ae:	4649      	mov	r1, r9
 800d3b0:	4642      	mov	r2, r8
 800d3b2:	4658      	mov	r0, fp
 800d3b4:	f000 fcbe 	bl	800dd34 <__lshift>
 800d3b8:	4681      	mov	r9, r0
 800d3ba:	9b08      	ldr	r3, [sp, #32]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	dd05      	ble.n	800d3cc <_dtoa_r+0x83c>
 800d3c0:	4621      	mov	r1, r4
 800d3c2:	461a      	mov	r2, r3
 800d3c4:	4658      	mov	r0, fp
 800d3c6:	f000 fcb5 	bl	800dd34 <__lshift>
 800d3ca:	4604      	mov	r4, r0
 800d3cc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d059      	beq.n	800d486 <_dtoa_r+0x8f6>
 800d3d2:	4621      	mov	r1, r4
 800d3d4:	4648      	mov	r0, r9
 800d3d6:	f000 fd19 	bl	800de0c <__mcmp>
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	da53      	bge.n	800d486 <_dtoa_r+0x8f6>
 800d3de:	1e7b      	subs	r3, r7, #1
 800d3e0:	9304      	str	r3, [sp, #16]
 800d3e2:	4649      	mov	r1, r9
 800d3e4:	2300      	movs	r3, #0
 800d3e6:	220a      	movs	r2, #10
 800d3e8:	4658      	mov	r0, fp
 800d3ea:	f000 faf7 	bl	800d9dc <__multadd>
 800d3ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d3f0:	4681      	mov	r9, r0
 800d3f2:	2b00      	cmp	r3, #0
 800d3f4:	f000 8172 	beq.w	800d6dc <_dtoa_r+0xb4c>
 800d3f8:	2300      	movs	r3, #0
 800d3fa:	4629      	mov	r1, r5
 800d3fc:	220a      	movs	r2, #10
 800d3fe:	4658      	mov	r0, fp
 800d400:	f000 faec 	bl	800d9dc <__multadd>
 800d404:	9b00      	ldr	r3, [sp, #0]
 800d406:	2b00      	cmp	r3, #0
 800d408:	4605      	mov	r5, r0
 800d40a:	dc67      	bgt.n	800d4dc <_dtoa_r+0x94c>
 800d40c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d40e:	2b02      	cmp	r3, #2
 800d410:	dc41      	bgt.n	800d496 <_dtoa_r+0x906>
 800d412:	e063      	b.n	800d4dc <_dtoa_r+0x94c>
 800d414:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d416:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d41a:	e746      	b.n	800d2aa <_dtoa_r+0x71a>
 800d41c:	9b07      	ldr	r3, [sp, #28]
 800d41e:	1e5c      	subs	r4, r3, #1
 800d420:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d422:	42a3      	cmp	r3, r4
 800d424:	bfbf      	itttt	lt
 800d426:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d428:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d42a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d42c:	1ae3      	sublt	r3, r4, r3
 800d42e:	bfb4      	ite	lt
 800d430:	18d2      	addlt	r2, r2, r3
 800d432:	1b1c      	subge	r4, r3, r4
 800d434:	9b07      	ldr	r3, [sp, #28]
 800d436:	bfbc      	itt	lt
 800d438:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d43a:	2400      	movlt	r4, #0
 800d43c:	2b00      	cmp	r3, #0
 800d43e:	bfb5      	itete	lt
 800d440:	eba8 0603 	sublt.w	r6, r8, r3
 800d444:	9b07      	ldrge	r3, [sp, #28]
 800d446:	2300      	movlt	r3, #0
 800d448:	4646      	movge	r6, r8
 800d44a:	e730      	b.n	800d2ae <_dtoa_r+0x71e>
 800d44c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d44e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d450:	4646      	mov	r6, r8
 800d452:	e735      	b.n	800d2c0 <_dtoa_r+0x730>
 800d454:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d456:	e75c      	b.n	800d312 <_dtoa_r+0x782>
 800d458:	2300      	movs	r3, #0
 800d45a:	e788      	b.n	800d36e <_dtoa_r+0x7de>
 800d45c:	3fe00000 	.word	0x3fe00000
 800d460:	40240000 	.word	0x40240000
 800d464:	40140000 	.word	0x40140000
 800d468:	9b02      	ldr	r3, [sp, #8]
 800d46a:	e780      	b.n	800d36e <_dtoa_r+0x7de>
 800d46c:	2300      	movs	r3, #0
 800d46e:	930a      	str	r3, [sp, #40]	@ 0x28
 800d470:	e782      	b.n	800d378 <_dtoa_r+0x7e8>
 800d472:	d099      	beq.n	800d3a8 <_dtoa_r+0x818>
 800d474:	9a08      	ldr	r2, [sp, #32]
 800d476:	331c      	adds	r3, #28
 800d478:	441a      	add	r2, r3
 800d47a:	4498      	add	r8, r3
 800d47c:	441e      	add	r6, r3
 800d47e:	9208      	str	r2, [sp, #32]
 800d480:	e792      	b.n	800d3a8 <_dtoa_r+0x818>
 800d482:	4603      	mov	r3, r0
 800d484:	e7f6      	b.n	800d474 <_dtoa_r+0x8e4>
 800d486:	9b07      	ldr	r3, [sp, #28]
 800d488:	9704      	str	r7, [sp, #16]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	dc20      	bgt.n	800d4d0 <_dtoa_r+0x940>
 800d48e:	9300      	str	r3, [sp, #0]
 800d490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d492:	2b02      	cmp	r3, #2
 800d494:	dd1e      	ble.n	800d4d4 <_dtoa_r+0x944>
 800d496:	9b00      	ldr	r3, [sp, #0]
 800d498:	2b00      	cmp	r3, #0
 800d49a:	f47f aec0 	bne.w	800d21e <_dtoa_r+0x68e>
 800d49e:	4621      	mov	r1, r4
 800d4a0:	2205      	movs	r2, #5
 800d4a2:	4658      	mov	r0, fp
 800d4a4:	f000 fa9a 	bl	800d9dc <__multadd>
 800d4a8:	4601      	mov	r1, r0
 800d4aa:	4604      	mov	r4, r0
 800d4ac:	4648      	mov	r0, r9
 800d4ae:	f000 fcad 	bl	800de0c <__mcmp>
 800d4b2:	2800      	cmp	r0, #0
 800d4b4:	f77f aeb3 	ble.w	800d21e <_dtoa_r+0x68e>
 800d4b8:	4656      	mov	r6, sl
 800d4ba:	2331      	movs	r3, #49	@ 0x31
 800d4bc:	f806 3b01 	strb.w	r3, [r6], #1
 800d4c0:	9b04      	ldr	r3, [sp, #16]
 800d4c2:	3301      	adds	r3, #1
 800d4c4:	9304      	str	r3, [sp, #16]
 800d4c6:	e6ae      	b.n	800d226 <_dtoa_r+0x696>
 800d4c8:	9c07      	ldr	r4, [sp, #28]
 800d4ca:	9704      	str	r7, [sp, #16]
 800d4cc:	4625      	mov	r5, r4
 800d4ce:	e7f3      	b.n	800d4b8 <_dtoa_r+0x928>
 800d4d0:	9b07      	ldr	r3, [sp, #28]
 800d4d2:	9300      	str	r3, [sp, #0]
 800d4d4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d4d6:	2b00      	cmp	r3, #0
 800d4d8:	f000 8104 	beq.w	800d6e4 <_dtoa_r+0xb54>
 800d4dc:	2e00      	cmp	r6, #0
 800d4de:	dd05      	ble.n	800d4ec <_dtoa_r+0x95c>
 800d4e0:	4629      	mov	r1, r5
 800d4e2:	4632      	mov	r2, r6
 800d4e4:	4658      	mov	r0, fp
 800d4e6:	f000 fc25 	bl	800dd34 <__lshift>
 800d4ea:	4605      	mov	r5, r0
 800d4ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4ee:	2b00      	cmp	r3, #0
 800d4f0:	d05a      	beq.n	800d5a8 <_dtoa_r+0xa18>
 800d4f2:	6869      	ldr	r1, [r5, #4]
 800d4f4:	4658      	mov	r0, fp
 800d4f6:	f000 fa0f 	bl	800d918 <_Balloc>
 800d4fa:	4606      	mov	r6, r0
 800d4fc:	b928      	cbnz	r0, 800d50a <_dtoa_r+0x97a>
 800d4fe:	4b84      	ldr	r3, [pc, #528]	@ (800d710 <_dtoa_r+0xb80>)
 800d500:	4602      	mov	r2, r0
 800d502:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d506:	f7ff bb5a 	b.w	800cbbe <_dtoa_r+0x2e>
 800d50a:	692a      	ldr	r2, [r5, #16]
 800d50c:	3202      	adds	r2, #2
 800d50e:	0092      	lsls	r2, r2, #2
 800d510:	f105 010c 	add.w	r1, r5, #12
 800d514:	300c      	adds	r0, #12
 800d516:	f7ff faa2 	bl	800ca5e <memcpy>
 800d51a:	2201      	movs	r2, #1
 800d51c:	4631      	mov	r1, r6
 800d51e:	4658      	mov	r0, fp
 800d520:	f000 fc08 	bl	800dd34 <__lshift>
 800d524:	f10a 0301 	add.w	r3, sl, #1
 800d528:	9307      	str	r3, [sp, #28]
 800d52a:	9b00      	ldr	r3, [sp, #0]
 800d52c:	4453      	add	r3, sl
 800d52e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d530:	9b02      	ldr	r3, [sp, #8]
 800d532:	f003 0301 	and.w	r3, r3, #1
 800d536:	462f      	mov	r7, r5
 800d538:	930a      	str	r3, [sp, #40]	@ 0x28
 800d53a:	4605      	mov	r5, r0
 800d53c:	9b07      	ldr	r3, [sp, #28]
 800d53e:	4621      	mov	r1, r4
 800d540:	3b01      	subs	r3, #1
 800d542:	4648      	mov	r0, r9
 800d544:	9300      	str	r3, [sp, #0]
 800d546:	f7ff fa98 	bl	800ca7a <quorem>
 800d54a:	4639      	mov	r1, r7
 800d54c:	9002      	str	r0, [sp, #8]
 800d54e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d552:	4648      	mov	r0, r9
 800d554:	f000 fc5a 	bl	800de0c <__mcmp>
 800d558:	462a      	mov	r2, r5
 800d55a:	9008      	str	r0, [sp, #32]
 800d55c:	4621      	mov	r1, r4
 800d55e:	4658      	mov	r0, fp
 800d560:	f000 fc70 	bl	800de44 <__mdiff>
 800d564:	68c2      	ldr	r2, [r0, #12]
 800d566:	4606      	mov	r6, r0
 800d568:	bb02      	cbnz	r2, 800d5ac <_dtoa_r+0xa1c>
 800d56a:	4601      	mov	r1, r0
 800d56c:	4648      	mov	r0, r9
 800d56e:	f000 fc4d 	bl	800de0c <__mcmp>
 800d572:	4602      	mov	r2, r0
 800d574:	4631      	mov	r1, r6
 800d576:	4658      	mov	r0, fp
 800d578:	920e      	str	r2, [sp, #56]	@ 0x38
 800d57a:	f000 fa0d 	bl	800d998 <_Bfree>
 800d57e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d580:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d582:	9e07      	ldr	r6, [sp, #28]
 800d584:	ea43 0102 	orr.w	r1, r3, r2
 800d588:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d58a:	4319      	orrs	r1, r3
 800d58c:	d110      	bne.n	800d5b0 <_dtoa_r+0xa20>
 800d58e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d592:	d029      	beq.n	800d5e8 <_dtoa_r+0xa58>
 800d594:	9b08      	ldr	r3, [sp, #32]
 800d596:	2b00      	cmp	r3, #0
 800d598:	dd02      	ble.n	800d5a0 <_dtoa_r+0xa10>
 800d59a:	9b02      	ldr	r3, [sp, #8]
 800d59c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d5a0:	9b00      	ldr	r3, [sp, #0]
 800d5a2:	f883 8000 	strb.w	r8, [r3]
 800d5a6:	e63f      	b.n	800d228 <_dtoa_r+0x698>
 800d5a8:	4628      	mov	r0, r5
 800d5aa:	e7bb      	b.n	800d524 <_dtoa_r+0x994>
 800d5ac:	2201      	movs	r2, #1
 800d5ae:	e7e1      	b.n	800d574 <_dtoa_r+0x9e4>
 800d5b0:	9b08      	ldr	r3, [sp, #32]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	db04      	blt.n	800d5c0 <_dtoa_r+0xa30>
 800d5b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d5b8:	430b      	orrs	r3, r1
 800d5ba:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d5bc:	430b      	orrs	r3, r1
 800d5be:	d120      	bne.n	800d602 <_dtoa_r+0xa72>
 800d5c0:	2a00      	cmp	r2, #0
 800d5c2:	dded      	ble.n	800d5a0 <_dtoa_r+0xa10>
 800d5c4:	4649      	mov	r1, r9
 800d5c6:	2201      	movs	r2, #1
 800d5c8:	4658      	mov	r0, fp
 800d5ca:	f000 fbb3 	bl	800dd34 <__lshift>
 800d5ce:	4621      	mov	r1, r4
 800d5d0:	4681      	mov	r9, r0
 800d5d2:	f000 fc1b 	bl	800de0c <__mcmp>
 800d5d6:	2800      	cmp	r0, #0
 800d5d8:	dc03      	bgt.n	800d5e2 <_dtoa_r+0xa52>
 800d5da:	d1e1      	bne.n	800d5a0 <_dtoa_r+0xa10>
 800d5dc:	f018 0f01 	tst.w	r8, #1
 800d5e0:	d0de      	beq.n	800d5a0 <_dtoa_r+0xa10>
 800d5e2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d5e6:	d1d8      	bne.n	800d59a <_dtoa_r+0xa0a>
 800d5e8:	9a00      	ldr	r2, [sp, #0]
 800d5ea:	2339      	movs	r3, #57	@ 0x39
 800d5ec:	7013      	strb	r3, [r2, #0]
 800d5ee:	4633      	mov	r3, r6
 800d5f0:	461e      	mov	r6, r3
 800d5f2:	3b01      	subs	r3, #1
 800d5f4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d5f8:	2a39      	cmp	r2, #57	@ 0x39
 800d5fa:	d052      	beq.n	800d6a2 <_dtoa_r+0xb12>
 800d5fc:	3201      	adds	r2, #1
 800d5fe:	701a      	strb	r2, [r3, #0]
 800d600:	e612      	b.n	800d228 <_dtoa_r+0x698>
 800d602:	2a00      	cmp	r2, #0
 800d604:	dd07      	ble.n	800d616 <_dtoa_r+0xa86>
 800d606:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d60a:	d0ed      	beq.n	800d5e8 <_dtoa_r+0xa58>
 800d60c:	9a00      	ldr	r2, [sp, #0]
 800d60e:	f108 0301 	add.w	r3, r8, #1
 800d612:	7013      	strb	r3, [r2, #0]
 800d614:	e608      	b.n	800d228 <_dtoa_r+0x698>
 800d616:	9b07      	ldr	r3, [sp, #28]
 800d618:	9a07      	ldr	r2, [sp, #28]
 800d61a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d61e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d620:	4293      	cmp	r3, r2
 800d622:	d028      	beq.n	800d676 <_dtoa_r+0xae6>
 800d624:	4649      	mov	r1, r9
 800d626:	2300      	movs	r3, #0
 800d628:	220a      	movs	r2, #10
 800d62a:	4658      	mov	r0, fp
 800d62c:	f000 f9d6 	bl	800d9dc <__multadd>
 800d630:	42af      	cmp	r7, r5
 800d632:	4681      	mov	r9, r0
 800d634:	f04f 0300 	mov.w	r3, #0
 800d638:	f04f 020a 	mov.w	r2, #10
 800d63c:	4639      	mov	r1, r7
 800d63e:	4658      	mov	r0, fp
 800d640:	d107      	bne.n	800d652 <_dtoa_r+0xac2>
 800d642:	f000 f9cb 	bl	800d9dc <__multadd>
 800d646:	4607      	mov	r7, r0
 800d648:	4605      	mov	r5, r0
 800d64a:	9b07      	ldr	r3, [sp, #28]
 800d64c:	3301      	adds	r3, #1
 800d64e:	9307      	str	r3, [sp, #28]
 800d650:	e774      	b.n	800d53c <_dtoa_r+0x9ac>
 800d652:	f000 f9c3 	bl	800d9dc <__multadd>
 800d656:	4629      	mov	r1, r5
 800d658:	4607      	mov	r7, r0
 800d65a:	2300      	movs	r3, #0
 800d65c:	220a      	movs	r2, #10
 800d65e:	4658      	mov	r0, fp
 800d660:	f000 f9bc 	bl	800d9dc <__multadd>
 800d664:	4605      	mov	r5, r0
 800d666:	e7f0      	b.n	800d64a <_dtoa_r+0xaba>
 800d668:	9b00      	ldr	r3, [sp, #0]
 800d66a:	2b00      	cmp	r3, #0
 800d66c:	bfcc      	ite	gt
 800d66e:	461e      	movgt	r6, r3
 800d670:	2601      	movle	r6, #1
 800d672:	4456      	add	r6, sl
 800d674:	2700      	movs	r7, #0
 800d676:	4649      	mov	r1, r9
 800d678:	2201      	movs	r2, #1
 800d67a:	4658      	mov	r0, fp
 800d67c:	f000 fb5a 	bl	800dd34 <__lshift>
 800d680:	4621      	mov	r1, r4
 800d682:	4681      	mov	r9, r0
 800d684:	f000 fbc2 	bl	800de0c <__mcmp>
 800d688:	2800      	cmp	r0, #0
 800d68a:	dcb0      	bgt.n	800d5ee <_dtoa_r+0xa5e>
 800d68c:	d102      	bne.n	800d694 <_dtoa_r+0xb04>
 800d68e:	f018 0f01 	tst.w	r8, #1
 800d692:	d1ac      	bne.n	800d5ee <_dtoa_r+0xa5e>
 800d694:	4633      	mov	r3, r6
 800d696:	461e      	mov	r6, r3
 800d698:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d69c:	2a30      	cmp	r2, #48	@ 0x30
 800d69e:	d0fa      	beq.n	800d696 <_dtoa_r+0xb06>
 800d6a0:	e5c2      	b.n	800d228 <_dtoa_r+0x698>
 800d6a2:	459a      	cmp	sl, r3
 800d6a4:	d1a4      	bne.n	800d5f0 <_dtoa_r+0xa60>
 800d6a6:	9b04      	ldr	r3, [sp, #16]
 800d6a8:	3301      	adds	r3, #1
 800d6aa:	9304      	str	r3, [sp, #16]
 800d6ac:	2331      	movs	r3, #49	@ 0x31
 800d6ae:	f88a 3000 	strb.w	r3, [sl]
 800d6b2:	e5b9      	b.n	800d228 <_dtoa_r+0x698>
 800d6b4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d6b6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d714 <_dtoa_r+0xb84>
 800d6ba:	b11b      	cbz	r3, 800d6c4 <_dtoa_r+0xb34>
 800d6bc:	f10a 0308 	add.w	r3, sl, #8
 800d6c0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d6c2:	6013      	str	r3, [r2, #0]
 800d6c4:	4650      	mov	r0, sl
 800d6c6:	b019      	add	sp, #100	@ 0x64
 800d6c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d6cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	f77f ae37 	ble.w	800d342 <_dtoa_r+0x7b2>
 800d6d4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d6d6:	930a      	str	r3, [sp, #40]	@ 0x28
 800d6d8:	2001      	movs	r0, #1
 800d6da:	e655      	b.n	800d388 <_dtoa_r+0x7f8>
 800d6dc:	9b00      	ldr	r3, [sp, #0]
 800d6de:	2b00      	cmp	r3, #0
 800d6e0:	f77f aed6 	ble.w	800d490 <_dtoa_r+0x900>
 800d6e4:	4656      	mov	r6, sl
 800d6e6:	4621      	mov	r1, r4
 800d6e8:	4648      	mov	r0, r9
 800d6ea:	f7ff f9c6 	bl	800ca7a <quorem>
 800d6ee:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d6f2:	f806 8b01 	strb.w	r8, [r6], #1
 800d6f6:	9b00      	ldr	r3, [sp, #0]
 800d6f8:	eba6 020a 	sub.w	r2, r6, sl
 800d6fc:	4293      	cmp	r3, r2
 800d6fe:	ddb3      	ble.n	800d668 <_dtoa_r+0xad8>
 800d700:	4649      	mov	r1, r9
 800d702:	2300      	movs	r3, #0
 800d704:	220a      	movs	r2, #10
 800d706:	4658      	mov	r0, fp
 800d708:	f000 f968 	bl	800d9dc <__multadd>
 800d70c:	4681      	mov	r9, r0
 800d70e:	e7ea      	b.n	800d6e6 <_dtoa_r+0xb56>
 800d710:	0801006e 	.word	0x0801006e
 800d714:	0800fff2 	.word	0x0800fff2

0800d718 <_free_r>:
 800d718:	b538      	push	{r3, r4, r5, lr}
 800d71a:	4605      	mov	r5, r0
 800d71c:	2900      	cmp	r1, #0
 800d71e:	d041      	beq.n	800d7a4 <_free_r+0x8c>
 800d720:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d724:	1f0c      	subs	r4, r1, #4
 800d726:	2b00      	cmp	r3, #0
 800d728:	bfb8      	it	lt
 800d72a:	18e4      	addlt	r4, r4, r3
 800d72c:	f000 f8e8 	bl	800d900 <__malloc_lock>
 800d730:	4a1d      	ldr	r2, [pc, #116]	@ (800d7a8 <_free_r+0x90>)
 800d732:	6813      	ldr	r3, [r2, #0]
 800d734:	b933      	cbnz	r3, 800d744 <_free_r+0x2c>
 800d736:	6063      	str	r3, [r4, #4]
 800d738:	6014      	str	r4, [r2, #0]
 800d73a:	4628      	mov	r0, r5
 800d73c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d740:	f000 b8e4 	b.w	800d90c <__malloc_unlock>
 800d744:	42a3      	cmp	r3, r4
 800d746:	d908      	bls.n	800d75a <_free_r+0x42>
 800d748:	6820      	ldr	r0, [r4, #0]
 800d74a:	1821      	adds	r1, r4, r0
 800d74c:	428b      	cmp	r3, r1
 800d74e:	bf01      	itttt	eq
 800d750:	6819      	ldreq	r1, [r3, #0]
 800d752:	685b      	ldreq	r3, [r3, #4]
 800d754:	1809      	addeq	r1, r1, r0
 800d756:	6021      	streq	r1, [r4, #0]
 800d758:	e7ed      	b.n	800d736 <_free_r+0x1e>
 800d75a:	461a      	mov	r2, r3
 800d75c:	685b      	ldr	r3, [r3, #4]
 800d75e:	b10b      	cbz	r3, 800d764 <_free_r+0x4c>
 800d760:	42a3      	cmp	r3, r4
 800d762:	d9fa      	bls.n	800d75a <_free_r+0x42>
 800d764:	6811      	ldr	r1, [r2, #0]
 800d766:	1850      	adds	r0, r2, r1
 800d768:	42a0      	cmp	r0, r4
 800d76a:	d10b      	bne.n	800d784 <_free_r+0x6c>
 800d76c:	6820      	ldr	r0, [r4, #0]
 800d76e:	4401      	add	r1, r0
 800d770:	1850      	adds	r0, r2, r1
 800d772:	4283      	cmp	r3, r0
 800d774:	6011      	str	r1, [r2, #0]
 800d776:	d1e0      	bne.n	800d73a <_free_r+0x22>
 800d778:	6818      	ldr	r0, [r3, #0]
 800d77a:	685b      	ldr	r3, [r3, #4]
 800d77c:	6053      	str	r3, [r2, #4]
 800d77e:	4408      	add	r0, r1
 800d780:	6010      	str	r0, [r2, #0]
 800d782:	e7da      	b.n	800d73a <_free_r+0x22>
 800d784:	d902      	bls.n	800d78c <_free_r+0x74>
 800d786:	230c      	movs	r3, #12
 800d788:	602b      	str	r3, [r5, #0]
 800d78a:	e7d6      	b.n	800d73a <_free_r+0x22>
 800d78c:	6820      	ldr	r0, [r4, #0]
 800d78e:	1821      	adds	r1, r4, r0
 800d790:	428b      	cmp	r3, r1
 800d792:	bf04      	itt	eq
 800d794:	6819      	ldreq	r1, [r3, #0]
 800d796:	685b      	ldreq	r3, [r3, #4]
 800d798:	6063      	str	r3, [r4, #4]
 800d79a:	bf04      	itt	eq
 800d79c:	1809      	addeq	r1, r1, r0
 800d79e:	6021      	streq	r1, [r4, #0]
 800d7a0:	6054      	str	r4, [r2, #4]
 800d7a2:	e7ca      	b.n	800d73a <_free_r+0x22>
 800d7a4:	bd38      	pop	{r3, r4, r5, pc}
 800d7a6:	bf00      	nop
 800d7a8:	20013de8 	.word	0x20013de8

0800d7ac <malloc>:
 800d7ac:	4b02      	ldr	r3, [pc, #8]	@ (800d7b8 <malloc+0xc>)
 800d7ae:	4601      	mov	r1, r0
 800d7b0:	6818      	ldr	r0, [r3, #0]
 800d7b2:	f000 b825 	b.w	800d800 <_malloc_r>
 800d7b6:	bf00      	nop
 800d7b8:	20000020 	.word	0x20000020

0800d7bc <sbrk_aligned>:
 800d7bc:	b570      	push	{r4, r5, r6, lr}
 800d7be:	4e0f      	ldr	r6, [pc, #60]	@ (800d7fc <sbrk_aligned+0x40>)
 800d7c0:	460c      	mov	r4, r1
 800d7c2:	6831      	ldr	r1, [r6, #0]
 800d7c4:	4605      	mov	r5, r0
 800d7c6:	b911      	cbnz	r1, 800d7ce <sbrk_aligned+0x12>
 800d7c8:	f000 fe46 	bl	800e458 <_sbrk_r>
 800d7cc:	6030      	str	r0, [r6, #0]
 800d7ce:	4621      	mov	r1, r4
 800d7d0:	4628      	mov	r0, r5
 800d7d2:	f000 fe41 	bl	800e458 <_sbrk_r>
 800d7d6:	1c43      	adds	r3, r0, #1
 800d7d8:	d103      	bne.n	800d7e2 <sbrk_aligned+0x26>
 800d7da:	f04f 34ff 	mov.w	r4, #4294967295
 800d7de:	4620      	mov	r0, r4
 800d7e0:	bd70      	pop	{r4, r5, r6, pc}
 800d7e2:	1cc4      	adds	r4, r0, #3
 800d7e4:	f024 0403 	bic.w	r4, r4, #3
 800d7e8:	42a0      	cmp	r0, r4
 800d7ea:	d0f8      	beq.n	800d7de <sbrk_aligned+0x22>
 800d7ec:	1a21      	subs	r1, r4, r0
 800d7ee:	4628      	mov	r0, r5
 800d7f0:	f000 fe32 	bl	800e458 <_sbrk_r>
 800d7f4:	3001      	adds	r0, #1
 800d7f6:	d1f2      	bne.n	800d7de <sbrk_aligned+0x22>
 800d7f8:	e7ef      	b.n	800d7da <sbrk_aligned+0x1e>
 800d7fa:	bf00      	nop
 800d7fc:	20013de4 	.word	0x20013de4

0800d800 <_malloc_r>:
 800d800:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d804:	1ccd      	adds	r5, r1, #3
 800d806:	f025 0503 	bic.w	r5, r5, #3
 800d80a:	3508      	adds	r5, #8
 800d80c:	2d0c      	cmp	r5, #12
 800d80e:	bf38      	it	cc
 800d810:	250c      	movcc	r5, #12
 800d812:	2d00      	cmp	r5, #0
 800d814:	4606      	mov	r6, r0
 800d816:	db01      	blt.n	800d81c <_malloc_r+0x1c>
 800d818:	42a9      	cmp	r1, r5
 800d81a:	d904      	bls.n	800d826 <_malloc_r+0x26>
 800d81c:	230c      	movs	r3, #12
 800d81e:	6033      	str	r3, [r6, #0]
 800d820:	2000      	movs	r0, #0
 800d822:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d826:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d8fc <_malloc_r+0xfc>
 800d82a:	f000 f869 	bl	800d900 <__malloc_lock>
 800d82e:	f8d8 3000 	ldr.w	r3, [r8]
 800d832:	461c      	mov	r4, r3
 800d834:	bb44      	cbnz	r4, 800d888 <_malloc_r+0x88>
 800d836:	4629      	mov	r1, r5
 800d838:	4630      	mov	r0, r6
 800d83a:	f7ff ffbf 	bl	800d7bc <sbrk_aligned>
 800d83e:	1c43      	adds	r3, r0, #1
 800d840:	4604      	mov	r4, r0
 800d842:	d158      	bne.n	800d8f6 <_malloc_r+0xf6>
 800d844:	f8d8 4000 	ldr.w	r4, [r8]
 800d848:	4627      	mov	r7, r4
 800d84a:	2f00      	cmp	r7, #0
 800d84c:	d143      	bne.n	800d8d6 <_malloc_r+0xd6>
 800d84e:	2c00      	cmp	r4, #0
 800d850:	d04b      	beq.n	800d8ea <_malloc_r+0xea>
 800d852:	6823      	ldr	r3, [r4, #0]
 800d854:	4639      	mov	r1, r7
 800d856:	4630      	mov	r0, r6
 800d858:	eb04 0903 	add.w	r9, r4, r3
 800d85c:	f000 fdfc 	bl	800e458 <_sbrk_r>
 800d860:	4581      	cmp	r9, r0
 800d862:	d142      	bne.n	800d8ea <_malloc_r+0xea>
 800d864:	6821      	ldr	r1, [r4, #0]
 800d866:	1a6d      	subs	r5, r5, r1
 800d868:	4629      	mov	r1, r5
 800d86a:	4630      	mov	r0, r6
 800d86c:	f7ff ffa6 	bl	800d7bc <sbrk_aligned>
 800d870:	3001      	adds	r0, #1
 800d872:	d03a      	beq.n	800d8ea <_malloc_r+0xea>
 800d874:	6823      	ldr	r3, [r4, #0]
 800d876:	442b      	add	r3, r5
 800d878:	6023      	str	r3, [r4, #0]
 800d87a:	f8d8 3000 	ldr.w	r3, [r8]
 800d87e:	685a      	ldr	r2, [r3, #4]
 800d880:	bb62      	cbnz	r2, 800d8dc <_malloc_r+0xdc>
 800d882:	f8c8 7000 	str.w	r7, [r8]
 800d886:	e00f      	b.n	800d8a8 <_malloc_r+0xa8>
 800d888:	6822      	ldr	r2, [r4, #0]
 800d88a:	1b52      	subs	r2, r2, r5
 800d88c:	d420      	bmi.n	800d8d0 <_malloc_r+0xd0>
 800d88e:	2a0b      	cmp	r2, #11
 800d890:	d917      	bls.n	800d8c2 <_malloc_r+0xc2>
 800d892:	1961      	adds	r1, r4, r5
 800d894:	42a3      	cmp	r3, r4
 800d896:	6025      	str	r5, [r4, #0]
 800d898:	bf18      	it	ne
 800d89a:	6059      	strne	r1, [r3, #4]
 800d89c:	6863      	ldr	r3, [r4, #4]
 800d89e:	bf08      	it	eq
 800d8a0:	f8c8 1000 	streq.w	r1, [r8]
 800d8a4:	5162      	str	r2, [r4, r5]
 800d8a6:	604b      	str	r3, [r1, #4]
 800d8a8:	4630      	mov	r0, r6
 800d8aa:	f000 f82f 	bl	800d90c <__malloc_unlock>
 800d8ae:	f104 000b 	add.w	r0, r4, #11
 800d8b2:	1d23      	adds	r3, r4, #4
 800d8b4:	f020 0007 	bic.w	r0, r0, #7
 800d8b8:	1ac2      	subs	r2, r0, r3
 800d8ba:	bf1c      	itt	ne
 800d8bc:	1a1b      	subne	r3, r3, r0
 800d8be:	50a3      	strne	r3, [r4, r2]
 800d8c0:	e7af      	b.n	800d822 <_malloc_r+0x22>
 800d8c2:	6862      	ldr	r2, [r4, #4]
 800d8c4:	42a3      	cmp	r3, r4
 800d8c6:	bf0c      	ite	eq
 800d8c8:	f8c8 2000 	streq.w	r2, [r8]
 800d8cc:	605a      	strne	r2, [r3, #4]
 800d8ce:	e7eb      	b.n	800d8a8 <_malloc_r+0xa8>
 800d8d0:	4623      	mov	r3, r4
 800d8d2:	6864      	ldr	r4, [r4, #4]
 800d8d4:	e7ae      	b.n	800d834 <_malloc_r+0x34>
 800d8d6:	463c      	mov	r4, r7
 800d8d8:	687f      	ldr	r7, [r7, #4]
 800d8da:	e7b6      	b.n	800d84a <_malloc_r+0x4a>
 800d8dc:	461a      	mov	r2, r3
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	42a3      	cmp	r3, r4
 800d8e2:	d1fb      	bne.n	800d8dc <_malloc_r+0xdc>
 800d8e4:	2300      	movs	r3, #0
 800d8e6:	6053      	str	r3, [r2, #4]
 800d8e8:	e7de      	b.n	800d8a8 <_malloc_r+0xa8>
 800d8ea:	230c      	movs	r3, #12
 800d8ec:	6033      	str	r3, [r6, #0]
 800d8ee:	4630      	mov	r0, r6
 800d8f0:	f000 f80c 	bl	800d90c <__malloc_unlock>
 800d8f4:	e794      	b.n	800d820 <_malloc_r+0x20>
 800d8f6:	6005      	str	r5, [r0, #0]
 800d8f8:	e7d6      	b.n	800d8a8 <_malloc_r+0xa8>
 800d8fa:	bf00      	nop
 800d8fc:	20013de8 	.word	0x20013de8

0800d900 <__malloc_lock>:
 800d900:	4801      	ldr	r0, [pc, #4]	@ (800d908 <__malloc_lock+0x8>)
 800d902:	f7ff b8aa 	b.w	800ca5a <__retarget_lock_acquire_recursive>
 800d906:	bf00      	nop
 800d908:	20013de0 	.word	0x20013de0

0800d90c <__malloc_unlock>:
 800d90c:	4801      	ldr	r0, [pc, #4]	@ (800d914 <__malloc_unlock+0x8>)
 800d90e:	f7ff b8a5 	b.w	800ca5c <__retarget_lock_release_recursive>
 800d912:	bf00      	nop
 800d914:	20013de0 	.word	0x20013de0

0800d918 <_Balloc>:
 800d918:	b570      	push	{r4, r5, r6, lr}
 800d91a:	69c6      	ldr	r6, [r0, #28]
 800d91c:	4604      	mov	r4, r0
 800d91e:	460d      	mov	r5, r1
 800d920:	b976      	cbnz	r6, 800d940 <_Balloc+0x28>
 800d922:	2010      	movs	r0, #16
 800d924:	f7ff ff42 	bl	800d7ac <malloc>
 800d928:	4602      	mov	r2, r0
 800d92a:	61e0      	str	r0, [r4, #28]
 800d92c:	b920      	cbnz	r0, 800d938 <_Balloc+0x20>
 800d92e:	4b18      	ldr	r3, [pc, #96]	@ (800d990 <_Balloc+0x78>)
 800d930:	4818      	ldr	r0, [pc, #96]	@ (800d994 <_Balloc+0x7c>)
 800d932:	216b      	movs	r1, #107	@ 0x6b
 800d934:	f000 fda0 	bl	800e478 <__assert_func>
 800d938:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d93c:	6006      	str	r6, [r0, #0]
 800d93e:	60c6      	str	r6, [r0, #12]
 800d940:	69e6      	ldr	r6, [r4, #28]
 800d942:	68f3      	ldr	r3, [r6, #12]
 800d944:	b183      	cbz	r3, 800d968 <_Balloc+0x50>
 800d946:	69e3      	ldr	r3, [r4, #28]
 800d948:	68db      	ldr	r3, [r3, #12]
 800d94a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d94e:	b9b8      	cbnz	r0, 800d980 <_Balloc+0x68>
 800d950:	2101      	movs	r1, #1
 800d952:	fa01 f605 	lsl.w	r6, r1, r5
 800d956:	1d72      	adds	r2, r6, #5
 800d958:	0092      	lsls	r2, r2, #2
 800d95a:	4620      	mov	r0, r4
 800d95c:	f000 fdaa 	bl	800e4b4 <_calloc_r>
 800d960:	b160      	cbz	r0, 800d97c <_Balloc+0x64>
 800d962:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d966:	e00e      	b.n	800d986 <_Balloc+0x6e>
 800d968:	2221      	movs	r2, #33	@ 0x21
 800d96a:	2104      	movs	r1, #4
 800d96c:	4620      	mov	r0, r4
 800d96e:	f000 fda1 	bl	800e4b4 <_calloc_r>
 800d972:	69e3      	ldr	r3, [r4, #28]
 800d974:	60f0      	str	r0, [r6, #12]
 800d976:	68db      	ldr	r3, [r3, #12]
 800d978:	2b00      	cmp	r3, #0
 800d97a:	d1e4      	bne.n	800d946 <_Balloc+0x2e>
 800d97c:	2000      	movs	r0, #0
 800d97e:	bd70      	pop	{r4, r5, r6, pc}
 800d980:	6802      	ldr	r2, [r0, #0]
 800d982:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d986:	2300      	movs	r3, #0
 800d988:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d98c:	e7f7      	b.n	800d97e <_Balloc+0x66>
 800d98e:	bf00      	nop
 800d990:	0800ffff 	.word	0x0800ffff
 800d994:	0801007f 	.word	0x0801007f

0800d998 <_Bfree>:
 800d998:	b570      	push	{r4, r5, r6, lr}
 800d99a:	69c6      	ldr	r6, [r0, #28]
 800d99c:	4605      	mov	r5, r0
 800d99e:	460c      	mov	r4, r1
 800d9a0:	b976      	cbnz	r6, 800d9c0 <_Bfree+0x28>
 800d9a2:	2010      	movs	r0, #16
 800d9a4:	f7ff ff02 	bl	800d7ac <malloc>
 800d9a8:	4602      	mov	r2, r0
 800d9aa:	61e8      	str	r0, [r5, #28]
 800d9ac:	b920      	cbnz	r0, 800d9b8 <_Bfree+0x20>
 800d9ae:	4b09      	ldr	r3, [pc, #36]	@ (800d9d4 <_Bfree+0x3c>)
 800d9b0:	4809      	ldr	r0, [pc, #36]	@ (800d9d8 <_Bfree+0x40>)
 800d9b2:	218f      	movs	r1, #143	@ 0x8f
 800d9b4:	f000 fd60 	bl	800e478 <__assert_func>
 800d9b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d9bc:	6006      	str	r6, [r0, #0]
 800d9be:	60c6      	str	r6, [r0, #12]
 800d9c0:	b13c      	cbz	r4, 800d9d2 <_Bfree+0x3a>
 800d9c2:	69eb      	ldr	r3, [r5, #28]
 800d9c4:	6862      	ldr	r2, [r4, #4]
 800d9c6:	68db      	ldr	r3, [r3, #12]
 800d9c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d9cc:	6021      	str	r1, [r4, #0]
 800d9ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d9d2:	bd70      	pop	{r4, r5, r6, pc}
 800d9d4:	0800ffff 	.word	0x0800ffff
 800d9d8:	0801007f 	.word	0x0801007f

0800d9dc <__multadd>:
 800d9dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9e0:	690d      	ldr	r5, [r1, #16]
 800d9e2:	4607      	mov	r7, r0
 800d9e4:	460c      	mov	r4, r1
 800d9e6:	461e      	mov	r6, r3
 800d9e8:	f101 0c14 	add.w	ip, r1, #20
 800d9ec:	2000      	movs	r0, #0
 800d9ee:	f8dc 3000 	ldr.w	r3, [ip]
 800d9f2:	b299      	uxth	r1, r3
 800d9f4:	fb02 6101 	mla	r1, r2, r1, r6
 800d9f8:	0c1e      	lsrs	r6, r3, #16
 800d9fa:	0c0b      	lsrs	r3, r1, #16
 800d9fc:	fb02 3306 	mla	r3, r2, r6, r3
 800da00:	b289      	uxth	r1, r1
 800da02:	3001      	adds	r0, #1
 800da04:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800da08:	4285      	cmp	r5, r0
 800da0a:	f84c 1b04 	str.w	r1, [ip], #4
 800da0e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800da12:	dcec      	bgt.n	800d9ee <__multadd+0x12>
 800da14:	b30e      	cbz	r6, 800da5a <__multadd+0x7e>
 800da16:	68a3      	ldr	r3, [r4, #8]
 800da18:	42ab      	cmp	r3, r5
 800da1a:	dc19      	bgt.n	800da50 <__multadd+0x74>
 800da1c:	6861      	ldr	r1, [r4, #4]
 800da1e:	4638      	mov	r0, r7
 800da20:	3101      	adds	r1, #1
 800da22:	f7ff ff79 	bl	800d918 <_Balloc>
 800da26:	4680      	mov	r8, r0
 800da28:	b928      	cbnz	r0, 800da36 <__multadd+0x5a>
 800da2a:	4602      	mov	r2, r0
 800da2c:	4b0c      	ldr	r3, [pc, #48]	@ (800da60 <__multadd+0x84>)
 800da2e:	480d      	ldr	r0, [pc, #52]	@ (800da64 <__multadd+0x88>)
 800da30:	21ba      	movs	r1, #186	@ 0xba
 800da32:	f000 fd21 	bl	800e478 <__assert_func>
 800da36:	6922      	ldr	r2, [r4, #16]
 800da38:	3202      	adds	r2, #2
 800da3a:	f104 010c 	add.w	r1, r4, #12
 800da3e:	0092      	lsls	r2, r2, #2
 800da40:	300c      	adds	r0, #12
 800da42:	f7ff f80c 	bl	800ca5e <memcpy>
 800da46:	4621      	mov	r1, r4
 800da48:	4638      	mov	r0, r7
 800da4a:	f7ff ffa5 	bl	800d998 <_Bfree>
 800da4e:	4644      	mov	r4, r8
 800da50:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800da54:	3501      	adds	r5, #1
 800da56:	615e      	str	r6, [r3, #20]
 800da58:	6125      	str	r5, [r4, #16]
 800da5a:	4620      	mov	r0, r4
 800da5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da60:	0801006e 	.word	0x0801006e
 800da64:	0801007f 	.word	0x0801007f

0800da68 <__hi0bits>:
 800da68:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800da6c:	4603      	mov	r3, r0
 800da6e:	bf36      	itet	cc
 800da70:	0403      	lslcc	r3, r0, #16
 800da72:	2000      	movcs	r0, #0
 800da74:	2010      	movcc	r0, #16
 800da76:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800da7a:	bf3c      	itt	cc
 800da7c:	021b      	lslcc	r3, r3, #8
 800da7e:	3008      	addcc	r0, #8
 800da80:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800da84:	bf3c      	itt	cc
 800da86:	011b      	lslcc	r3, r3, #4
 800da88:	3004      	addcc	r0, #4
 800da8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800da8e:	bf3c      	itt	cc
 800da90:	009b      	lslcc	r3, r3, #2
 800da92:	3002      	addcc	r0, #2
 800da94:	2b00      	cmp	r3, #0
 800da96:	db05      	blt.n	800daa4 <__hi0bits+0x3c>
 800da98:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800da9c:	f100 0001 	add.w	r0, r0, #1
 800daa0:	bf08      	it	eq
 800daa2:	2020      	moveq	r0, #32
 800daa4:	4770      	bx	lr

0800daa6 <__lo0bits>:
 800daa6:	6803      	ldr	r3, [r0, #0]
 800daa8:	4602      	mov	r2, r0
 800daaa:	f013 0007 	ands.w	r0, r3, #7
 800daae:	d00b      	beq.n	800dac8 <__lo0bits+0x22>
 800dab0:	07d9      	lsls	r1, r3, #31
 800dab2:	d421      	bmi.n	800daf8 <__lo0bits+0x52>
 800dab4:	0798      	lsls	r0, r3, #30
 800dab6:	bf49      	itett	mi
 800dab8:	085b      	lsrmi	r3, r3, #1
 800daba:	089b      	lsrpl	r3, r3, #2
 800dabc:	2001      	movmi	r0, #1
 800dabe:	6013      	strmi	r3, [r2, #0]
 800dac0:	bf5c      	itt	pl
 800dac2:	6013      	strpl	r3, [r2, #0]
 800dac4:	2002      	movpl	r0, #2
 800dac6:	4770      	bx	lr
 800dac8:	b299      	uxth	r1, r3
 800daca:	b909      	cbnz	r1, 800dad0 <__lo0bits+0x2a>
 800dacc:	0c1b      	lsrs	r3, r3, #16
 800dace:	2010      	movs	r0, #16
 800dad0:	b2d9      	uxtb	r1, r3
 800dad2:	b909      	cbnz	r1, 800dad8 <__lo0bits+0x32>
 800dad4:	3008      	adds	r0, #8
 800dad6:	0a1b      	lsrs	r3, r3, #8
 800dad8:	0719      	lsls	r1, r3, #28
 800dada:	bf04      	itt	eq
 800dadc:	091b      	lsreq	r3, r3, #4
 800dade:	3004      	addeq	r0, #4
 800dae0:	0799      	lsls	r1, r3, #30
 800dae2:	bf04      	itt	eq
 800dae4:	089b      	lsreq	r3, r3, #2
 800dae6:	3002      	addeq	r0, #2
 800dae8:	07d9      	lsls	r1, r3, #31
 800daea:	d403      	bmi.n	800daf4 <__lo0bits+0x4e>
 800daec:	085b      	lsrs	r3, r3, #1
 800daee:	f100 0001 	add.w	r0, r0, #1
 800daf2:	d003      	beq.n	800dafc <__lo0bits+0x56>
 800daf4:	6013      	str	r3, [r2, #0]
 800daf6:	4770      	bx	lr
 800daf8:	2000      	movs	r0, #0
 800dafa:	4770      	bx	lr
 800dafc:	2020      	movs	r0, #32
 800dafe:	4770      	bx	lr

0800db00 <__i2b>:
 800db00:	b510      	push	{r4, lr}
 800db02:	460c      	mov	r4, r1
 800db04:	2101      	movs	r1, #1
 800db06:	f7ff ff07 	bl	800d918 <_Balloc>
 800db0a:	4602      	mov	r2, r0
 800db0c:	b928      	cbnz	r0, 800db1a <__i2b+0x1a>
 800db0e:	4b05      	ldr	r3, [pc, #20]	@ (800db24 <__i2b+0x24>)
 800db10:	4805      	ldr	r0, [pc, #20]	@ (800db28 <__i2b+0x28>)
 800db12:	f240 1145 	movw	r1, #325	@ 0x145
 800db16:	f000 fcaf 	bl	800e478 <__assert_func>
 800db1a:	2301      	movs	r3, #1
 800db1c:	6144      	str	r4, [r0, #20]
 800db1e:	6103      	str	r3, [r0, #16]
 800db20:	bd10      	pop	{r4, pc}
 800db22:	bf00      	nop
 800db24:	0801006e 	.word	0x0801006e
 800db28:	0801007f 	.word	0x0801007f

0800db2c <__multiply>:
 800db2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db30:	4614      	mov	r4, r2
 800db32:	690a      	ldr	r2, [r1, #16]
 800db34:	6923      	ldr	r3, [r4, #16]
 800db36:	429a      	cmp	r2, r3
 800db38:	bfa8      	it	ge
 800db3a:	4623      	movge	r3, r4
 800db3c:	460f      	mov	r7, r1
 800db3e:	bfa4      	itt	ge
 800db40:	460c      	movge	r4, r1
 800db42:	461f      	movge	r7, r3
 800db44:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800db48:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800db4c:	68a3      	ldr	r3, [r4, #8]
 800db4e:	6861      	ldr	r1, [r4, #4]
 800db50:	eb0a 0609 	add.w	r6, sl, r9
 800db54:	42b3      	cmp	r3, r6
 800db56:	b085      	sub	sp, #20
 800db58:	bfb8      	it	lt
 800db5a:	3101      	addlt	r1, #1
 800db5c:	f7ff fedc 	bl	800d918 <_Balloc>
 800db60:	b930      	cbnz	r0, 800db70 <__multiply+0x44>
 800db62:	4602      	mov	r2, r0
 800db64:	4b44      	ldr	r3, [pc, #272]	@ (800dc78 <__multiply+0x14c>)
 800db66:	4845      	ldr	r0, [pc, #276]	@ (800dc7c <__multiply+0x150>)
 800db68:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800db6c:	f000 fc84 	bl	800e478 <__assert_func>
 800db70:	f100 0514 	add.w	r5, r0, #20
 800db74:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800db78:	462b      	mov	r3, r5
 800db7a:	2200      	movs	r2, #0
 800db7c:	4543      	cmp	r3, r8
 800db7e:	d321      	bcc.n	800dbc4 <__multiply+0x98>
 800db80:	f107 0114 	add.w	r1, r7, #20
 800db84:	f104 0214 	add.w	r2, r4, #20
 800db88:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800db8c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800db90:	9302      	str	r3, [sp, #8]
 800db92:	1b13      	subs	r3, r2, r4
 800db94:	3b15      	subs	r3, #21
 800db96:	f023 0303 	bic.w	r3, r3, #3
 800db9a:	3304      	adds	r3, #4
 800db9c:	f104 0715 	add.w	r7, r4, #21
 800dba0:	42ba      	cmp	r2, r7
 800dba2:	bf38      	it	cc
 800dba4:	2304      	movcc	r3, #4
 800dba6:	9301      	str	r3, [sp, #4]
 800dba8:	9b02      	ldr	r3, [sp, #8]
 800dbaa:	9103      	str	r1, [sp, #12]
 800dbac:	428b      	cmp	r3, r1
 800dbae:	d80c      	bhi.n	800dbca <__multiply+0x9e>
 800dbb0:	2e00      	cmp	r6, #0
 800dbb2:	dd03      	ble.n	800dbbc <__multiply+0x90>
 800dbb4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d05b      	beq.n	800dc74 <__multiply+0x148>
 800dbbc:	6106      	str	r6, [r0, #16]
 800dbbe:	b005      	add	sp, #20
 800dbc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbc4:	f843 2b04 	str.w	r2, [r3], #4
 800dbc8:	e7d8      	b.n	800db7c <__multiply+0x50>
 800dbca:	f8b1 a000 	ldrh.w	sl, [r1]
 800dbce:	f1ba 0f00 	cmp.w	sl, #0
 800dbd2:	d024      	beq.n	800dc1e <__multiply+0xf2>
 800dbd4:	f104 0e14 	add.w	lr, r4, #20
 800dbd8:	46a9      	mov	r9, r5
 800dbda:	f04f 0c00 	mov.w	ip, #0
 800dbde:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dbe2:	f8d9 3000 	ldr.w	r3, [r9]
 800dbe6:	fa1f fb87 	uxth.w	fp, r7
 800dbea:	b29b      	uxth	r3, r3
 800dbec:	fb0a 330b 	mla	r3, sl, fp, r3
 800dbf0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800dbf4:	f8d9 7000 	ldr.w	r7, [r9]
 800dbf8:	4463      	add	r3, ip
 800dbfa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dbfe:	fb0a c70b 	mla	r7, sl, fp, ip
 800dc02:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800dc06:	b29b      	uxth	r3, r3
 800dc08:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dc0c:	4572      	cmp	r2, lr
 800dc0e:	f849 3b04 	str.w	r3, [r9], #4
 800dc12:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800dc16:	d8e2      	bhi.n	800dbde <__multiply+0xb2>
 800dc18:	9b01      	ldr	r3, [sp, #4]
 800dc1a:	f845 c003 	str.w	ip, [r5, r3]
 800dc1e:	9b03      	ldr	r3, [sp, #12]
 800dc20:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800dc24:	3104      	adds	r1, #4
 800dc26:	f1b9 0f00 	cmp.w	r9, #0
 800dc2a:	d021      	beq.n	800dc70 <__multiply+0x144>
 800dc2c:	682b      	ldr	r3, [r5, #0]
 800dc2e:	f104 0c14 	add.w	ip, r4, #20
 800dc32:	46ae      	mov	lr, r5
 800dc34:	f04f 0a00 	mov.w	sl, #0
 800dc38:	f8bc b000 	ldrh.w	fp, [ip]
 800dc3c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800dc40:	fb09 770b 	mla	r7, r9, fp, r7
 800dc44:	4457      	add	r7, sl
 800dc46:	b29b      	uxth	r3, r3
 800dc48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800dc4c:	f84e 3b04 	str.w	r3, [lr], #4
 800dc50:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dc54:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dc58:	f8be 3000 	ldrh.w	r3, [lr]
 800dc5c:	fb09 330a 	mla	r3, r9, sl, r3
 800dc60:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800dc64:	4562      	cmp	r2, ip
 800dc66:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dc6a:	d8e5      	bhi.n	800dc38 <__multiply+0x10c>
 800dc6c:	9f01      	ldr	r7, [sp, #4]
 800dc6e:	51eb      	str	r3, [r5, r7]
 800dc70:	3504      	adds	r5, #4
 800dc72:	e799      	b.n	800dba8 <__multiply+0x7c>
 800dc74:	3e01      	subs	r6, #1
 800dc76:	e79b      	b.n	800dbb0 <__multiply+0x84>
 800dc78:	0801006e 	.word	0x0801006e
 800dc7c:	0801007f 	.word	0x0801007f

0800dc80 <__pow5mult>:
 800dc80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dc84:	4615      	mov	r5, r2
 800dc86:	f012 0203 	ands.w	r2, r2, #3
 800dc8a:	4607      	mov	r7, r0
 800dc8c:	460e      	mov	r6, r1
 800dc8e:	d007      	beq.n	800dca0 <__pow5mult+0x20>
 800dc90:	4c25      	ldr	r4, [pc, #148]	@ (800dd28 <__pow5mult+0xa8>)
 800dc92:	3a01      	subs	r2, #1
 800dc94:	2300      	movs	r3, #0
 800dc96:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dc9a:	f7ff fe9f 	bl	800d9dc <__multadd>
 800dc9e:	4606      	mov	r6, r0
 800dca0:	10ad      	asrs	r5, r5, #2
 800dca2:	d03d      	beq.n	800dd20 <__pow5mult+0xa0>
 800dca4:	69fc      	ldr	r4, [r7, #28]
 800dca6:	b97c      	cbnz	r4, 800dcc8 <__pow5mult+0x48>
 800dca8:	2010      	movs	r0, #16
 800dcaa:	f7ff fd7f 	bl	800d7ac <malloc>
 800dcae:	4602      	mov	r2, r0
 800dcb0:	61f8      	str	r0, [r7, #28]
 800dcb2:	b928      	cbnz	r0, 800dcc0 <__pow5mult+0x40>
 800dcb4:	4b1d      	ldr	r3, [pc, #116]	@ (800dd2c <__pow5mult+0xac>)
 800dcb6:	481e      	ldr	r0, [pc, #120]	@ (800dd30 <__pow5mult+0xb0>)
 800dcb8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800dcbc:	f000 fbdc 	bl	800e478 <__assert_func>
 800dcc0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dcc4:	6004      	str	r4, [r0, #0]
 800dcc6:	60c4      	str	r4, [r0, #12]
 800dcc8:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dccc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dcd0:	b94c      	cbnz	r4, 800dce6 <__pow5mult+0x66>
 800dcd2:	f240 2171 	movw	r1, #625	@ 0x271
 800dcd6:	4638      	mov	r0, r7
 800dcd8:	f7ff ff12 	bl	800db00 <__i2b>
 800dcdc:	2300      	movs	r3, #0
 800dcde:	f8c8 0008 	str.w	r0, [r8, #8]
 800dce2:	4604      	mov	r4, r0
 800dce4:	6003      	str	r3, [r0, #0]
 800dce6:	f04f 0900 	mov.w	r9, #0
 800dcea:	07eb      	lsls	r3, r5, #31
 800dcec:	d50a      	bpl.n	800dd04 <__pow5mult+0x84>
 800dcee:	4631      	mov	r1, r6
 800dcf0:	4622      	mov	r2, r4
 800dcf2:	4638      	mov	r0, r7
 800dcf4:	f7ff ff1a 	bl	800db2c <__multiply>
 800dcf8:	4631      	mov	r1, r6
 800dcfa:	4680      	mov	r8, r0
 800dcfc:	4638      	mov	r0, r7
 800dcfe:	f7ff fe4b 	bl	800d998 <_Bfree>
 800dd02:	4646      	mov	r6, r8
 800dd04:	106d      	asrs	r5, r5, #1
 800dd06:	d00b      	beq.n	800dd20 <__pow5mult+0xa0>
 800dd08:	6820      	ldr	r0, [r4, #0]
 800dd0a:	b938      	cbnz	r0, 800dd1c <__pow5mult+0x9c>
 800dd0c:	4622      	mov	r2, r4
 800dd0e:	4621      	mov	r1, r4
 800dd10:	4638      	mov	r0, r7
 800dd12:	f7ff ff0b 	bl	800db2c <__multiply>
 800dd16:	6020      	str	r0, [r4, #0]
 800dd18:	f8c0 9000 	str.w	r9, [r0]
 800dd1c:	4604      	mov	r4, r0
 800dd1e:	e7e4      	b.n	800dcea <__pow5mult+0x6a>
 800dd20:	4630      	mov	r0, r6
 800dd22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd26:	bf00      	nop
 800dd28:	080100d8 	.word	0x080100d8
 800dd2c:	0800ffff 	.word	0x0800ffff
 800dd30:	0801007f 	.word	0x0801007f

0800dd34 <__lshift>:
 800dd34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd38:	460c      	mov	r4, r1
 800dd3a:	6849      	ldr	r1, [r1, #4]
 800dd3c:	6923      	ldr	r3, [r4, #16]
 800dd3e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dd42:	68a3      	ldr	r3, [r4, #8]
 800dd44:	4607      	mov	r7, r0
 800dd46:	4691      	mov	r9, r2
 800dd48:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dd4c:	f108 0601 	add.w	r6, r8, #1
 800dd50:	42b3      	cmp	r3, r6
 800dd52:	db0b      	blt.n	800dd6c <__lshift+0x38>
 800dd54:	4638      	mov	r0, r7
 800dd56:	f7ff fddf 	bl	800d918 <_Balloc>
 800dd5a:	4605      	mov	r5, r0
 800dd5c:	b948      	cbnz	r0, 800dd72 <__lshift+0x3e>
 800dd5e:	4602      	mov	r2, r0
 800dd60:	4b28      	ldr	r3, [pc, #160]	@ (800de04 <__lshift+0xd0>)
 800dd62:	4829      	ldr	r0, [pc, #164]	@ (800de08 <__lshift+0xd4>)
 800dd64:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800dd68:	f000 fb86 	bl	800e478 <__assert_func>
 800dd6c:	3101      	adds	r1, #1
 800dd6e:	005b      	lsls	r3, r3, #1
 800dd70:	e7ee      	b.n	800dd50 <__lshift+0x1c>
 800dd72:	2300      	movs	r3, #0
 800dd74:	f100 0114 	add.w	r1, r0, #20
 800dd78:	f100 0210 	add.w	r2, r0, #16
 800dd7c:	4618      	mov	r0, r3
 800dd7e:	4553      	cmp	r3, sl
 800dd80:	db33      	blt.n	800ddea <__lshift+0xb6>
 800dd82:	6920      	ldr	r0, [r4, #16]
 800dd84:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dd88:	f104 0314 	add.w	r3, r4, #20
 800dd8c:	f019 091f 	ands.w	r9, r9, #31
 800dd90:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dd94:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800dd98:	d02b      	beq.n	800ddf2 <__lshift+0xbe>
 800dd9a:	f1c9 0e20 	rsb	lr, r9, #32
 800dd9e:	468a      	mov	sl, r1
 800dda0:	2200      	movs	r2, #0
 800dda2:	6818      	ldr	r0, [r3, #0]
 800dda4:	fa00 f009 	lsl.w	r0, r0, r9
 800dda8:	4310      	orrs	r0, r2
 800ddaa:	f84a 0b04 	str.w	r0, [sl], #4
 800ddae:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddb2:	459c      	cmp	ip, r3
 800ddb4:	fa22 f20e 	lsr.w	r2, r2, lr
 800ddb8:	d8f3      	bhi.n	800dda2 <__lshift+0x6e>
 800ddba:	ebac 0304 	sub.w	r3, ip, r4
 800ddbe:	3b15      	subs	r3, #21
 800ddc0:	f023 0303 	bic.w	r3, r3, #3
 800ddc4:	3304      	adds	r3, #4
 800ddc6:	f104 0015 	add.w	r0, r4, #21
 800ddca:	4584      	cmp	ip, r0
 800ddcc:	bf38      	it	cc
 800ddce:	2304      	movcc	r3, #4
 800ddd0:	50ca      	str	r2, [r1, r3]
 800ddd2:	b10a      	cbz	r2, 800ddd8 <__lshift+0xa4>
 800ddd4:	f108 0602 	add.w	r6, r8, #2
 800ddd8:	3e01      	subs	r6, #1
 800ddda:	4638      	mov	r0, r7
 800dddc:	612e      	str	r6, [r5, #16]
 800ddde:	4621      	mov	r1, r4
 800dde0:	f7ff fdda 	bl	800d998 <_Bfree>
 800dde4:	4628      	mov	r0, r5
 800dde6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ddea:	f842 0f04 	str.w	r0, [r2, #4]!
 800ddee:	3301      	adds	r3, #1
 800ddf0:	e7c5      	b.n	800dd7e <__lshift+0x4a>
 800ddf2:	3904      	subs	r1, #4
 800ddf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddf8:	f841 2f04 	str.w	r2, [r1, #4]!
 800ddfc:	459c      	cmp	ip, r3
 800ddfe:	d8f9      	bhi.n	800ddf4 <__lshift+0xc0>
 800de00:	e7ea      	b.n	800ddd8 <__lshift+0xa4>
 800de02:	bf00      	nop
 800de04:	0801006e 	.word	0x0801006e
 800de08:	0801007f 	.word	0x0801007f

0800de0c <__mcmp>:
 800de0c:	690a      	ldr	r2, [r1, #16]
 800de0e:	4603      	mov	r3, r0
 800de10:	6900      	ldr	r0, [r0, #16]
 800de12:	1a80      	subs	r0, r0, r2
 800de14:	b530      	push	{r4, r5, lr}
 800de16:	d10e      	bne.n	800de36 <__mcmp+0x2a>
 800de18:	3314      	adds	r3, #20
 800de1a:	3114      	adds	r1, #20
 800de1c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800de20:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800de24:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800de28:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800de2c:	4295      	cmp	r5, r2
 800de2e:	d003      	beq.n	800de38 <__mcmp+0x2c>
 800de30:	d205      	bcs.n	800de3e <__mcmp+0x32>
 800de32:	f04f 30ff 	mov.w	r0, #4294967295
 800de36:	bd30      	pop	{r4, r5, pc}
 800de38:	42a3      	cmp	r3, r4
 800de3a:	d3f3      	bcc.n	800de24 <__mcmp+0x18>
 800de3c:	e7fb      	b.n	800de36 <__mcmp+0x2a>
 800de3e:	2001      	movs	r0, #1
 800de40:	e7f9      	b.n	800de36 <__mcmp+0x2a>
	...

0800de44 <__mdiff>:
 800de44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de48:	4689      	mov	r9, r1
 800de4a:	4606      	mov	r6, r0
 800de4c:	4611      	mov	r1, r2
 800de4e:	4648      	mov	r0, r9
 800de50:	4614      	mov	r4, r2
 800de52:	f7ff ffdb 	bl	800de0c <__mcmp>
 800de56:	1e05      	subs	r5, r0, #0
 800de58:	d112      	bne.n	800de80 <__mdiff+0x3c>
 800de5a:	4629      	mov	r1, r5
 800de5c:	4630      	mov	r0, r6
 800de5e:	f7ff fd5b 	bl	800d918 <_Balloc>
 800de62:	4602      	mov	r2, r0
 800de64:	b928      	cbnz	r0, 800de72 <__mdiff+0x2e>
 800de66:	4b3f      	ldr	r3, [pc, #252]	@ (800df64 <__mdiff+0x120>)
 800de68:	f240 2137 	movw	r1, #567	@ 0x237
 800de6c:	483e      	ldr	r0, [pc, #248]	@ (800df68 <__mdiff+0x124>)
 800de6e:	f000 fb03 	bl	800e478 <__assert_func>
 800de72:	2301      	movs	r3, #1
 800de74:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800de78:	4610      	mov	r0, r2
 800de7a:	b003      	add	sp, #12
 800de7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de80:	bfbc      	itt	lt
 800de82:	464b      	movlt	r3, r9
 800de84:	46a1      	movlt	r9, r4
 800de86:	4630      	mov	r0, r6
 800de88:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800de8c:	bfba      	itte	lt
 800de8e:	461c      	movlt	r4, r3
 800de90:	2501      	movlt	r5, #1
 800de92:	2500      	movge	r5, #0
 800de94:	f7ff fd40 	bl	800d918 <_Balloc>
 800de98:	4602      	mov	r2, r0
 800de9a:	b918      	cbnz	r0, 800dea4 <__mdiff+0x60>
 800de9c:	4b31      	ldr	r3, [pc, #196]	@ (800df64 <__mdiff+0x120>)
 800de9e:	f240 2145 	movw	r1, #581	@ 0x245
 800dea2:	e7e3      	b.n	800de6c <__mdiff+0x28>
 800dea4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dea8:	6926      	ldr	r6, [r4, #16]
 800deaa:	60c5      	str	r5, [r0, #12]
 800deac:	f109 0310 	add.w	r3, r9, #16
 800deb0:	f109 0514 	add.w	r5, r9, #20
 800deb4:	f104 0e14 	add.w	lr, r4, #20
 800deb8:	f100 0b14 	add.w	fp, r0, #20
 800debc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dec0:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dec4:	9301      	str	r3, [sp, #4]
 800dec6:	46d9      	mov	r9, fp
 800dec8:	f04f 0c00 	mov.w	ip, #0
 800decc:	9b01      	ldr	r3, [sp, #4]
 800dece:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ded2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ded6:	9301      	str	r3, [sp, #4]
 800ded8:	fa1f f38a 	uxth.w	r3, sl
 800dedc:	4619      	mov	r1, r3
 800dede:	b283      	uxth	r3, r0
 800dee0:	1acb      	subs	r3, r1, r3
 800dee2:	0c00      	lsrs	r0, r0, #16
 800dee4:	4463      	add	r3, ip
 800dee6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800deea:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800deee:	b29b      	uxth	r3, r3
 800def0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800def4:	4576      	cmp	r6, lr
 800def6:	f849 3b04 	str.w	r3, [r9], #4
 800defa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800defe:	d8e5      	bhi.n	800decc <__mdiff+0x88>
 800df00:	1b33      	subs	r3, r6, r4
 800df02:	3b15      	subs	r3, #21
 800df04:	f023 0303 	bic.w	r3, r3, #3
 800df08:	3415      	adds	r4, #21
 800df0a:	3304      	adds	r3, #4
 800df0c:	42a6      	cmp	r6, r4
 800df0e:	bf38      	it	cc
 800df10:	2304      	movcc	r3, #4
 800df12:	441d      	add	r5, r3
 800df14:	445b      	add	r3, fp
 800df16:	461e      	mov	r6, r3
 800df18:	462c      	mov	r4, r5
 800df1a:	4544      	cmp	r4, r8
 800df1c:	d30e      	bcc.n	800df3c <__mdiff+0xf8>
 800df1e:	f108 0103 	add.w	r1, r8, #3
 800df22:	1b49      	subs	r1, r1, r5
 800df24:	f021 0103 	bic.w	r1, r1, #3
 800df28:	3d03      	subs	r5, #3
 800df2a:	45a8      	cmp	r8, r5
 800df2c:	bf38      	it	cc
 800df2e:	2100      	movcc	r1, #0
 800df30:	440b      	add	r3, r1
 800df32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800df36:	b191      	cbz	r1, 800df5e <__mdiff+0x11a>
 800df38:	6117      	str	r7, [r2, #16]
 800df3a:	e79d      	b.n	800de78 <__mdiff+0x34>
 800df3c:	f854 1b04 	ldr.w	r1, [r4], #4
 800df40:	46e6      	mov	lr, ip
 800df42:	0c08      	lsrs	r0, r1, #16
 800df44:	fa1c fc81 	uxtah	ip, ip, r1
 800df48:	4471      	add	r1, lr
 800df4a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800df4e:	b289      	uxth	r1, r1
 800df50:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800df54:	f846 1b04 	str.w	r1, [r6], #4
 800df58:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800df5c:	e7dd      	b.n	800df1a <__mdiff+0xd6>
 800df5e:	3f01      	subs	r7, #1
 800df60:	e7e7      	b.n	800df32 <__mdiff+0xee>
 800df62:	bf00      	nop
 800df64:	0801006e 	.word	0x0801006e
 800df68:	0801007f 	.word	0x0801007f

0800df6c <__d2b>:
 800df6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800df70:	460f      	mov	r7, r1
 800df72:	2101      	movs	r1, #1
 800df74:	ec59 8b10 	vmov	r8, r9, d0
 800df78:	4616      	mov	r6, r2
 800df7a:	f7ff fccd 	bl	800d918 <_Balloc>
 800df7e:	4604      	mov	r4, r0
 800df80:	b930      	cbnz	r0, 800df90 <__d2b+0x24>
 800df82:	4602      	mov	r2, r0
 800df84:	4b23      	ldr	r3, [pc, #140]	@ (800e014 <__d2b+0xa8>)
 800df86:	4824      	ldr	r0, [pc, #144]	@ (800e018 <__d2b+0xac>)
 800df88:	f240 310f 	movw	r1, #783	@ 0x30f
 800df8c:	f000 fa74 	bl	800e478 <__assert_func>
 800df90:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800df94:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800df98:	b10d      	cbz	r5, 800df9e <__d2b+0x32>
 800df9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800df9e:	9301      	str	r3, [sp, #4]
 800dfa0:	f1b8 0300 	subs.w	r3, r8, #0
 800dfa4:	d023      	beq.n	800dfee <__d2b+0x82>
 800dfa6:	4668      	mov	r0, sp
 800dfa8:	9300      	str	r3, [sp, #0]
 800dfaa:	f7ff fd7c 	bl	800daa6 <__lo0bits>
 800dfae:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dfb2:	b1d0      	cbz	r0, 800dfea <__d2b+0x7e>
 800dfb4:	f1c0 0320 	rsb	r3, r0, #32
 800dfb8:	fa02 f303 	lsl.w	r3, r2, r3
 800dfbc:	430b      	orrs	r3, r1
 800dfbe:	40c2      	lsrs	r2, r0
 800dfc0:	6163      	str	r3, [r4, #20]
 800dfc2:	9201      	str	r2, [sp, #4]
 800dfc4:	9b01      	ldr	r3, [sp, #4]
 800dfc6:	61a3      	str	r3, [r4, #24]
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	bf0c      	ite	eq
 800dfcc:	2201      	moveq	r2, #1
 800dfce:	2202      	movne	r2, #2
 800dfd0:	6122      	str	r2, [r4, #16]
 800dfd2:	b1a5      	cbz	r5, 800dffe <__d2b+0x92>
 800dfd4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800dfd8:	4405      	add	r5, r0
 800dfda:	603d      	str	r5, [r7, #0]
 800dfdc:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800dfe0:	6030      	str	r0, [r6, #0]
 800dfe2:	4620      	mov	r0, r4
 800dfe4:	b003      	add	sp, #12
 800dfe6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dfea:	6161      	str	r1, [r4, #20]
 800dfec:	e7ea      	b.n	800dfc4 <__d2b+0x58>
 800dfee:	a801      	add	r0, sp, #4
 800dff0:	f7ff fd59 	bl	800daa6 <__lo0bits>
 800dff4:	9b01      	ldr	r3, [sp, #4]
 800dff6:	6163      	str	r3, [r4, #20]
 800dff8:	3020      	adds	r0, #32
 800dffa:	2201      	movs	r2, #1
 800dffc:	e7e8      	b.n	800dfd0 <__d2b+0x64>
 800dffe:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e002:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e006:	6038      	str	r0, [r7, #0]
 800e008:	6918      	ldr	r0, [r3, #16]
 800e00a:	f7ff fd2d 	bl	800da68 <__hi0bits>
 800e00e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e012:	e7e5      	b.n	800dfe0 <__d2b+0x74>
 800e014:	0801006e 	.word	0x0801006e
 800e018:	0801007f 	.word	0x0801007f

0800e01c <__ssputs_r>:
 800e01c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e020:	688e      	ldr	r6, [r1, #8]
 800e022:	461f      	mov	r7, r3
 800e024:	42be      	cmp	r6, r7
 800e026:	680b      	ldr	r3, [r1, #0]
 800e028:	4682      	mov	sl, r0
 800e02a:	460c      	mov	r4, r1
 800e02c:	4690      	mov	r8, r2
 800e02e:	d82d      	bhi.n	800e08c <__ssputs_r+0x70>
 800e030:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e034:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e038:	d026      	beq.n	800e088 <__ssputs_r+0x6c>
 800e03a:	6965      	ldr	r5, [r4, #20]
 800e03c:	6909      	ldr	r1, [r1, #16]
 800e03e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e042:	eba3 0901 	sub.w	r9, r3, r1
 800e046:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e04a:	1c7b      	adds	r3, r7, #1
 800e04c:	444b      	add	r3, r9
 800e04e:	106d      	asrs	r5, r5, #1
 800e050:	429d      	cmp	r5, r3
 800e052:	bf38      	it	cc
 800e054:	461d      	movcc	r5, r3
 800e056:	0553      	lsls	r3, r2, #21
 800e058:	d527      	bpl.n	800e0aa <__ssputs_r+0x8e>
 800e05a:	4629      	mov	r1, r5
 800e05c:	f7ff fbd0 	bl	800d800 <_malloc_r>
 800e060:	4606      	mov	r6, r0
 800e062:	b360      	cbz	r0, 800e0be <__ssputs_r+0xa2>
 800e064:	6921      	ldr	r1, [r4, #16]
 800e066:	464a      	mov	r2, r9
 800e068:	f7fe fcf9 	bl	800ca5e <memcpy>
 800e06c:	89a3      	ldrh	r3, [r4, #12]
 800e06e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800e072:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e076:	81a3      	strh	r3, [r4, #12]
 800e078:	6126      	str	r6, [r4, #16]
 800e07a:	6165      	str	r5, [r4, #20]
 800e07c:	444e      	add	r6, r9
 800e07e:	eba5 0509 	sub.w	r5, r5, r9
 800e082:	6026      	str	r6, [r4, #0]
 800e084:	60a5      	str	r5, [r4, #8]
 800e086:	463e      	mov	r6, r7
 800e088:	42be      	cmp	r6, r7
 800e08a:	d900      	bls.n	800e08e <__ssputs_r+0x72>
 800e08c:	463e      	mov	r6, r7
 800e08e:	6820      	ldr	r0, [r4, #0]
 800e090:	4632      	mov	r2, r6
 800e092:	4641      	mov	r1, r8
 800e094:	f000 f9c6 	bl	800e424 <memmove>
 800e098:	68a3      	ldr	r3, [r4, #8]
 800e09a:	1b9b      	subs	r3, r3, r6
 800e09c:	60a3      	str	r3, [r4, #8]
 800e09e:	6823      	ldr	r3, [r4, #0]
 800e0a0:	4433      	add	r3, r6
 800e0a2:	6023      	str	r3, [r4, #0]
 800e0a4:	2000      	movs	r0, #0
 800e0a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e0aa:	462a      	mov	r2, r5
 800e0ac:	f000 fa28 	bl	800e500 <_realloc_r>
 800e0b0:	4606      	mov	r6, r0
 800e0b2:	2800      	cmp	r0, #0
 800e0b4:	d1e0      	bne.n	800e078 <__ssputs_r+0x5c>
 800e0b6:	6921      	ldr	r1, [r4, #16]
 800e0b8:	4650      	mov	r0, sl
 800e0ba:	f7ff fb2d 	bl	800d718 <_free_r>
 800e0be:	230c      	movs	r3, #12
 800e0c0:	f8ca 3000 	str.w	r3, [sl]
 800e0c4:	89a3      	ldrh	r3, [r4, #12]
 800e0c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e0ca:	81a3      	strh	r3, [r4, #12]
 800e0cc:	f04f 30ff 	mov.w	r0, #4294967295
 800e0d0:	e7e9      	b.n	800e0a6 <__ssputs_r+0x8a>
	...

0800e0d4 <_svfiprintf_r>:
 800e0d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0d8:	4698      	mov	r8, r3
 800e0da:	898b      	ldrh	r3, [r1, #12]
 800e0dc:	061b      	lsls	r3, r3, #24
 800e0de:	b09d      	sub	sp, #116	@ 0x74
 800e0e0:	4607      	mov	r7, r0
 800e0e2:	460d      	mov	r5, r1
 800e0e4:	4614      	mov	r4, r2
 800e0e6:	d510      	bpl.n	800e10a <_svfiprintf_r+0x36>
 800e0e8:	690b      	ldr	r3, [r1, #16]
 800e0ea:	b973      	cbnz	r3, 800e10a <_svfiprintf_r+0x36>
 800e0ec:	2140      	movs	r1, #64	@ 0x40
 800e0ee:	f7ff fb87 	bl	800d800 <_malloc_r>
 800e0f2:	6028      	str	r0, [r5, #0]
 800e0f4:	6128      	str	r0, [r5, #16]
 800e0f6:	b930      	cbnz	r0, 800e106 <_svfiprintf_r+0x32>
 800e0f8:	230c      	movs	r3, #12
 800e0fa:	603b      	str	r3, [r7, #0]
 800e0fc:	f04f 30ff 	mov.w	r0, #4294967295
 800e100:	b01d      	add	sp, #116	@ 0x74
 800e102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e106:	2340      	movs	r3, #64	@ 0x40
 800e108:	616b      	str	r3, [r5, #20]
 800e10a:	2300      	movs	r3, #0
 800e10c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e10e:	2320      	movs	r3, #32
 800e110:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e114:	f8cd 800c 	str.w	r8, [sp, #12]
 800e118:	2330      	movs	r3, #48	@ 0x30
 800e11a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e2b8 <_svfiprintf_r+0x1e4>
 800e11e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e122:	f04f 0901 	mov.w	r9, #1
 800e126:	4623      	mov	r3, r4
 800e128:	469a      	mov	sl, r3
 800e12a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e12e:	b10a      	cbz	r2, 800e134 <_svfiprintf_r+0x60>
 800e130:	2a25      	cmp	r2, #37	@ 0x25
 800e132:	d1f9      	bne.n	800e128 <_svfiprintf_r+0x54>
 800e134:	ebba 0b04 	subs.w	fp, sl, r4
 800e138:	d00b      	beq.n	800e152 <_svfiprintf_r+0x7e>
 800e13a:	465b      	mov	r3, fp
 800e13c:	4622      	mov	r2, r4
 800e13e:	4629      	mov	r1, r5
 800e140:	4638      	mov	r0, r7
 800e142:	f7ff ff6b 	bl	800e01c <__ssputs_r>
 800e146:	3001      	adds	r0, #1
 800e148:	f000 80a7 	beq.w	800e29a <_svfiprintf_r+0x1c6>
 800e14c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e14e:	445a      	add	r2, fp
 800e150:	9209      	str	r2, [sp, #36]	@ 0x24
 800e152:	f89a 3000 	ldrb.w	r3, [sl]
 800e156:	2b00      	cmp	r3, #0
 800e158:	f000 809f 	beq.w	800e29a <_svfiprintf_r+0x1c6>
 800e15c:	2300      	movs	r3, #0
 800e15e:	f04f 32ff 	mov.w	r2, #4294967295
 800e162:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e166:	f10a 0a01 	add.w	sl, sl, #1
 800e16a:	9304      	str	r3, [sp, #16]
 800e16c:	9307      	str	r3, [sp, #28]
 800e16e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e172:	931a      	str	r3, [sp, #104]	@ 0x68
 800e174:	4654      	mov	r4, sl
 800e176:	2205      	movs	r2, #5
 800e178:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e17c:	484e      	ldr	r0, [pc, #312]	@ (800e2b8 <_svfiprintf_r+0x1e4>)
 800e17e:	f7f2 f877 	bl	8000270 <memchr>
 800e182:	9a04      	ldr	r2, [sp, #16]
 800e184:	b9d8      	cbnz	r0, 800e1be <_svfiprintf_r+0xea>
 800e186:	06d0      	lsls	r0, r2, #27
 800e188:	bf44      	itt	mi
 800e18a:	2320      	movmi	r3, #32
 800e18c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e190:	0711      	lsls	r1, r2, #28
 800e192:	bf44      	itt	mi
 800e194:	232b      	movmi	r3, #43	@ 0x2b
 800e196:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e19a:	f89a 3000 	ldrb.w	r3, [sl]
 800e19e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1a0:	d015      	beq.n	800e1ce <_svfiprintf_r+0xfa>
 800e1a2:	9a07      	ldr	r2, [sp, #28]
 800e1a4:	4654      	mov	r4, sl
 800e1a6:	2000      	movs	r0, #0
 800e1a8:	f04f 0c0a 	mov.w	ip, #10
 800e1ac:	4621      	mov	r1, r4
 800e1ae:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e1b2:	3b30      	subs	r3, #48	@ 0x30
 800e1b4:	2b09      	cmp	r3, #9
 800e1b6:	d94b      	bls.n	800e250 <_svfiprintf_r+0x17c>
 800e1b8:	b1b0      	cbz	r0, 800e1e8 <_svfiprintf_r+0x114>
 800e1ba:	9207      	str	r2, [sp, #28]
 800e1bc:	e014      	b.n	800e1e8 <_svfiprintf_r+0x114>
 800e1be:	eba0 0308 	sub.w	r3, r0, r8
 800e1c2:	fa09 f303 	lsl.w	r3, r9, r3
 800e1c6:	4313      	orrs	r3, r2
 800e1c8:	9304      	str	r3, [sp, #16]
 800e1ca:	46a2      	mov	sl, r4
 800e1cc:	e7d2      	b.n	800e174 <_svfiprintf_r+0xa0>
 800e1ce:	9b03      	ldr	r3, [sp, #12]
 800e1d0:	1d19      	adds	r1, r3, #4
 800e1d2:	681b      	ldr	r3, [r3, #0]
 800e1d4:	9103      	str	r1, [sp, #12]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	bfbb      	ittet	lt
 800e1da:	425b      	neglt	r3, r3
 800e1dc:	f042 0202 	orrlt.w	r2, r2, #2
 800e1e0:	9307      	strge	r3, [sp, #28]
 800e1e2:	9307      	strlt	r3, [sp, #28]
 800e1e4:	bfb8      	it	lt
 800e1e6:	9204      	strlt	r2, [sp, #16]
 800e1e8:	7823      	ldrb	r3, [r4, #0]
 800e1ea:	2b2e      	cmp	r3, #46	@ 0x2e
 800e1ec:	d10a      	bne.n	800e204 <_svfiprintf_r+0x130>
 800e1ee:	7863      	ldrb	r3, [r4, #1]
 800e1f0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e1f2:	d132      	bne.n	800e25a <_svfiprintf_r+0x186>
 800e1f4:	9b03      	ldr	r3, [sp, #12]
 800e1f6:	1d1a      	adds	r2, r3, #4
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	9203      	str	r2, [sp, #12]
 800e1fc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e200:	3402      	adds	r4, #2
 800e202:	9305      	str	r3, [sp, #20]
 800e204:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e2c8 <_svfiprintf_r+0x1f4>
 800e208:	7821      	ldrb	r1, [r4, #0]
 800e20a:	2203      	movs	r2, #3
 800e20c:	4650      	mov	r0, sl
 800e20e:	f7f2 f82f 	bl	8000270 <memchr>
 800e212:	b138      	cbz	r0, 800e224 <_svfiprintf_r+0x150>
 800e214:	9b04      	ldr	r3, [sp, #16]
 800e216:	eba0 000a 	sub.w	r0, r0, sl
 800e21a:	2240      	movs	r2, #64	@ 0x40
 800e21c:	4082      	lsls	r2, r0
 800e21e:	4313      	orrs	r3, r2
 800e220:	3401      	adds	r4, #1
 800e222:	9304      	str	r3, [sp, #16]
 800e224:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e228:	4824      	ldr	r0, [pc, #144]	@ (800e2bc <_svfiprintf_r+0x1e8>)
 800e22a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e22e:	2206      	movs	r2, #6
 800e230:	f7f2 f81e 	bl	8000270 <memchr>
 800e234:	2800      	cmp	r0, #0
 800e236:	d036      	beq.n	800e2a6 <_svfiprintf_r+0x1d2>
 800e238:	4b21      	ldr	r3, [pc, #132]	@ (800e2c0 <_svfiprintf_r+0x1ec>)
 800e23a:	bb1b      	cbnz	r3, 800e284 <_svfiprintf_r+0x1b0>
 800e23c:	9b03      	ldr	r3, [sp, #12]
 800e23e:	3307      	adds	r3, #7
 800e240:	f023 0307 	bic.w	r3, r3, #7
 800e244:	3308      	adds	r3, #8
 800e246:	9303      	str	r3, [sp, #12]
 800e248:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e24a:	4433      	add	r3, r6
 800e24c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e24e:	e76a      	b.n	800e126 <_svfiprintf_r+0x52>
 800e250:	fb0c 3202 	mla	r2, ip, r2, r3
 800e254:	460c      	mov	r4, r1
 800e256:	2001      	movs	r0, #1
 800e258:	e7a8      	b.n	800e1ac <_svfiprintf_r+0xd8>
 800e25a:	2300      	movs	r3, #0
 800e25c:	3401      	adds	r4, #1
 800e25e:	9305      	str	r3, [sp, #20]
 800e260:	4619      	mov	r1, r3
 800e262:	f04f 0c0a 	mov.w	ip, #10
 800e266:	4620      	mov	r0, r4
 800e268:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e26c:	3a30      	subs	r2, #48	@ 0x30
 800e26e:	2a09      	cmp	r2, #9
 800e270:	d903      	bls.n	800e27a <_svfiprintf_r+0x1a6>
 800e272:	2b00      	cmp	r3, #0
 800e274:	d0c6      	beq.n	800e204 <_svfiprintf_r+0x130>
 800e276:	9105      	str	r1, [sp, #20]
 800e278:	e7c4      	b.n	800e204 <_svfiprintf_r+0x130>
 800e27a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e27e:	4604      	mov	r4, r0
 800e280:	2301      	movs	r3, #1
 800e282:	e7f0      	b.n	800e266 <_svfiprintf_r+0x192>
 800e284:	ab03      	add	r3, sp, #12
 800e286:	9300      	str	r3, [sp, #0]
 800e288:	462a      	mov	r2, r5
 800e28a:	4b0e      	ldr	r3, [pc, #56]	@ (800e2c4 <_svfiprintf_r+0x1f0>)
 800e28c:	a904      	add	r1, sp, #16
 800e28e:	4638      	mov	r0, r7
 800e290:	f7fd fe76 	bl	800bf80 <_printf_float>
 800e294:	1c42      	adds	r2, r0, #1
 800e296:	4606      	mov	r6, r0
 800e298:	d1d6      	bne.n	800e248 <_svfiprintf_r+0x174>
 800e29a:	89ab      	ldrh	r3, [r5, #12]
 800e29c:	065b      	lsls	r3, r3, #25
 800e29e:	f53f af2d 	bmi.w	800e0fc <_svfiprintf_r+0x28>
 800e2a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e2a4:	e72c      	b.n	800e100 <_svfiprintf_r+0x2c>
 800e2a6:	ab03      	add	r3, sp, #12
 800e2a8:	9300      	str	r3, [sp, #0]
 800e2aa:	462a      	mov	r2, r5
 800e2ac:	4b05      	ldr	r3, [pc, #20]	@ (800e2c4 <_svfiprintf_r+0x1f0>)
 800e2ae:	a904      	add	r1, sp, #16
 800e2b0:	4638      	mov	r0, r7
 800e2b2:	f7fe f8fd 	bl	800c4b0 <_printf_i>
 800e2b6:	e7ed      	b.n	800e294 <_svfiprintf_r+0x1c0>
 800e2b8:	080101d8 	.word	0x080101d8
 800e2bc:	080101e2 	.word	0x080101e2
 800e2c0:	0800bf81 	.word	0x0800bf81
 800e2c4:	0800e01d 	.word	0x0800e01d
 800e2c8:	080101de 	.word	0x080101de

0800e2cc <__sflush_r>:
 800e2cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2d4:	0716      	lsls	r6, r2, #28
 800e2d6:	4605      	mov	r5, r0
 800e2d8:	460c      	mov	r4, r1
 800e2da:	d454      	bmi.n	800e386 <__sflush_r+0xba>
 800e2dc:	684b      	ldr	r3, [r1, #4]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	dc02      	bgt.n	800e2e8 <__sflush_r+0x1c>
 800e2e2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e2e4:	2b00      	cmp	r3, #0
 800e2e6:	dd48      	ble.n	800e37a <__sflush_r+0xae>
 800e2e8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e2ea:	2e00      	cmp	r6, #0
 800e2ec:	d045      	beq.n	800e37a <__sflush_r+0xae>
 800e2ee:	2300      	movs	r3, #0
 800e2f0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e2f4:	682f      	ldr	r7, [r5, #0]
 800e2f6:	6a21      	ldr	r1, [r4, #32]
 800e2f8:	602b      	str	r3, [r5, #0]
 800e2fa:	d030      	beq.n	800e35e <__sflush_r+0x92>
 800e2fc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e2fe:	89a3      	ldrh	r3, [r4, #12]
 800e300:	0759      	lsls	r1, r3, #29
 800e302:	d505      	bpl.n	800e310 <__sflush_r+0x44>
 800e304:	6863      	ldr	r3, [r4, #4]
 800e306:	1ad2      	subs	r2, r2, r3
 800e308:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e30a:	b10b      	cbz	r3, 800e310 <__sflush_r+0x44>
 800e30c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e30e:	1ad2      	subs	r2, r2, r3
 800e310:	2300      	movs	r3, #0
 800e312:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e314:	6a21      	ldr	r1, [r4, #32]
 800e316:	4628      	mov	r0, r5
 800e318:	47b0      	blx	r6
 800e31a:	1c43      	adds	r3, r0, #1
 800e31c:	89a3      	ldrh	r3, [r4, #12]
 800e31e:	d106      	bne.n	800e32e <__sflush_r+0x62>
 800e320:	6829      	ldr	r1, [r5, #0]
 800e322:	291d      	cmp	r1, #29
 800e324:	d82b      	bhi.n	800e37e <__sflush_r+0xb2>
 800e326:	4a2a      	ldr	r2, [pc, #168]	@ (800e3d0 <__sflush_r+0x104>)
 800e328:	410a      	asrs	r2, r1
 800e32a:	07d6      	lsls	r6, r2, #31
 800e32c:	d427      	bmi.n	800e37e <__sflush_r+0xb2>
 800e32e:	2200      	movs	r2, #0
 800e330:	6062      	str	r2, [r4, #4]
 800e332:	04d9      	lsls	r1, r3, #19
 800e334:	6922      	ldr	r2, [r4, #16]
 800e336:	6022      	str	r2, [r4, #0]
 800e338:	d504      	bpl.n	800e344 <__sflush_r+0x78>
 800e33a:	1c42      	adds	r2, r0, #1
 800e33c:	d101      	bne.n	800e342 <__sflush_r+0x76>
 800e33e:	682b      	ldr	r3, [r5, #0]
 800e340:	b903      	cbnz	r3, 800e344 <__sflush_r+0x78>
 800e342:	6560      	str	r0, [r4, #84]	@ 0x54
 800e344:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e346:	602f      	str	r7, [r5, #0]
 800e348:	b1b9      	cbz	r1, 800e37a <__sflush_r+0xae>
 800e34a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e34e:	4299      	cmp	r1, r3
 800e350:	d002      	beq.n	800e358 <__sflush_r+0x8c>
 800e352:	4628      	mov	r0, r5
 800e354:	f7ff f9e0 	bl	800d718 <_free_r>
 800e358:	2300      	movs	r3, #0
 800e35a:	6363      	str	r3, [r4, #52]	@ 0x34
 800e35c:	e00d      	b.n	800e37a <__sflush_r+0xae>
 800e35e:	2301      	movs	r3, #1
 800e360:	4628      	mov	r0, r5
 800e362:	47b0      	blx	r6
 800e364:	4602      	mov	r2, r0
 800e366:	1c50      	adds	r0, r2, #1
 800e368:	d1c9      	bne.n	800e2fe <__sflush_r+0x32>
 800e36a:	682b      	ldr	r3, [r5, #0]
 800e36c:	2b00      	cmp	r3, #0
 800e36e:	d0c6      	beq.n	800e2fe <__sflush_r+0x32>
 800e370:	2b1d      	cmp	r3, #29
 800e372:	d001      	beq.n	800e378 <__sflush_r+0xac>
 800e374:	2b16      	cmp	r3, #22
 800e376:	d11e      	bne.n	800e3b6 <__sflush_r+0xea>
 800e378:	602f      	str	r7, [r5, #0]
 800e37a:	2000      	movs	r0, #0
 800e37c:	e022      	b.n	800e3c4 <__sflush_r+0xf8>
 800e37e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e382:	b21b      	sxth	r3, r3
 800e384:	e01b      	b.n	800e3be <__sflush_r+0xf2>
 800e386:	690f      	ldr	r7, [r1, #16]
 800e388:	2f00      	cmp	r7, #0
 800e38a:	d0f6      	beq.n	800e37a <__sflush_r+0xae>
 800e38c:	0793      	lsls	r3, r2, #30
 800e38e:	680e      	ldr	r6, [r1, #0]
 800e390:	bf08      	it	eq
 800e392:	694b      	ldreq	r3, [r1, #20]
 800e394:	600f      	str	r7, [r1, #0]
 800e396:	bf18      	it	ne
 800e398:	2300      	movne	r3, #0
 800e39a:	eba6 0807 	sub.w	r8, r6, r7
 800e39e:	608b      	str	r3, [r1, #8]
 800e3a0:	f1b8 0f00 	cmp.w	r8, #0
 800e3a4:	dde9      	ble.n	800e37a <__sflush_r+0xae>
 800e3a6:	6a21      	ldr	r1, [r4, #32]
 800e3a8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e3aa:	4643      	mov	r3, r8
 800e3ac:	463a      	mov	r2, r7
 800e3ae:	4628      	mov	r0, r5
 800e3b0:	47b0      	blx	r6
 800e3b2:	2800      	cmp	r0, #0
 800e3b4:	dc08      	bgt.n	800e3c8 <__sflush_r+0xfc>
 800e3b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e3be:	81a3      	strh	r3, [r4, #12]
 800e3c0:	f04f 30ff 	mov.w	r0, #4294967295
 800e3c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3c8:	4407      	add	r7, r0
 800e3ca:	eba8 0800 	sub.w	r8, r8, r0
 800e3ce:	e7e7      	b.n	800e3a0 <__sflush_r+0xd4>
 800e3d0:	dfbffffe 	.word	0xdfbffffe

0800e3d4 <_fflush_r>:
 800e3d4:	b538      	push	{r3, r4, r5, lr}
 800e3d6:	690b      	ldr	r3, [r1, #16]
 800e3d8:	4605      	mov	r5, r0
 800e3da:	460c      	mov	r4, r1
 800e3dc:	b913      	cbnz	r3, 800e3e4 <_fflush_r+0x10>
 800e3de:	2500      	movs	r5, #0
 800e3e0:	4628      	mov	r0, r5
 800e3e2:	bd38      	pop	{r3, r4, r5, pc}
 800e3e4:	b118      	cbz	r0, 800e3ee <_fflush_r+0x1a>
 800e3e6:	6a03      	ldr	r3, [r0, #32]
 800e3e8:	b90b      	cbnz	r3, 800e3ee <_fflush_r+0x1a>
 800e3ea:	f7fe fa0d 	bl	800c808 <__sinit>
 800e3ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d0f3      	beq.n	800e3de <_fflush_r+0xa>
 800e3f6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e3f8:	07d0      	lsls	r0, r2, #31
 800e3fa:	d404      	bmi.n	800e406 <_fflush_r+0x32>
 800e3fc:	0599      	lsls	r1, r3, #22
 800e3fe:	d402      	bmi.n	800e406 <_fflush_r+0x32>
 800e400:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e402:	f7fe fb2a 	bl	800ca5a <__retarget_lock_acquire_recursive>
 800e406:	4628      	mov	r0, r5
 800e408:	4621      	mov	r1, r4
 800e40a:	f7ff ff5f 	bl	800e2cc <__sflush_r>
 800e40e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e410:	07da      	lsls	r2, r3, #31
 800e412:	4605      	mov	r5, r0
 800e414:	d4e4      	bmi.n	800e3e0 <_fflush_r+0xc>
 800e416:	89a3      	ldrh	r3, [r4, #12]
 800e418:	059b      	lsls	r3, r3, #22
 800e41a:	d4e1      	bmi.n	800e3e0 <_fflush_r+0xc>
 800e41c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e41e:	f7fe fb1d 	bl	800ca5c <__retarget_lock_release_recursive>
 800e422:	e7dd      	b.n	800e3e0 <_fflush_r+0xc>

0800e424 <memmove>:
 800e424:	4288      	cmp	r0, r1
 800e426:	b510      	push	{r4, lr}
 800e428:	eb01 0402 	add.w	r4, r1, r2
 800e42c:	d902      	bls.n	800e434 <memmove+0x10>
 800e42e:	4284      	cmp	r4, r0
 800e430:	4623      	mov	r3, r4
 800e432:	d807      	bhi.n	800e444 <memmove+0x20>
 800e434:	1e43      	subs	r3, r0, #1
 800e436:	42a1      	cmp	r1, r4
 800e438:	d008      	beq.n	800e44c <memmove+0x28>
 800e43a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e43e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e442:	e7f8      	b.n	800e436 <memmove+0x12>
 800e444:	4402      	add	r2, r0
 800e446:	4601      	mov	r1, r0
 800e448:	428a      	cmp	r2, r1
 800e44a:	d100      	bne.n	800e44e <memmove+0x2a>
 800e44c:	bd10      	pop	{r4, pc}
 800e44e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e452:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e456:	e7f7      	b.n	800e448 <memmove+0x24>

0800e458 <_sbrk_r>:
 800e458:	b538      	push	{r3, r4, r5, lr}
 800e45a:	4d06      	ldr	r5, [pc, #24]	@ (800e474 <_sbrk_r+0x1c>)
 800e45c:	2300      	movs	r3, #0
 800e45e:	4604      	mov	r4, r0
 800e460:	4608      	mov	r0, r1
 800e462:	602b      	str	r3, [r5, #0]
 800e464:	f001 faa6 	bl	800f9b4 <_sbrk>
 800e468:	1c43      	adds	r3, r0, #1
 800e46a:	d102      	bne.n	800e472 <_sbrk_r+0x1a>
 800e46c:	682b      	ldr	r3, [r5, #0]
 800e46e:	b103      	cbz	r3, 800e472 <_sbrk_r+0x1a>
 800e470:	6023      	str	r3, [r4, #0]
 800e472:	bd38      	pop	{r3, r4, r5, pc}
 800e474:	20013ddc 	.word	0x20013ddc

0800e478 <__assert_func>:
 800e478:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e47a:	4614      	mov	r4, r2
 800e47c:	461a      	mov	r2, r3
 800e47e:	4b09      	ldr	r3, [pc, #36]	@ (800e4a4 <__assert_func+0x2c>)
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	4605      	mov	r5, r0
 800e484:	68d8      	ldr	r0, [r3, #12]
 800e486:	b954      	cbnz	r4, 800e49e <__assert_func+0x26>
 800e488:	4b07      	ldr	r3, [pc, #28]	@ (800e4a8 <__assert_func+0x30>)
 800e48a:	461c      	mov	r4, r3
 800e48c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e490:	9100      	str	r1, [sp, #0]
 800e492:	462b      	mov	r3, r5
 800e494:	4905      	ldr	r1, [pc, #20]	@ (800e4ac <__assert_func+0x34>)
 800e496:	f000 f86f 	bl	800e578 <fiprintf>
 800e49a:	f000 f87f 	bl	800e59c <abort>
 800e49e:	4b04      	ldr	r3, [pc, #16]	@ (800e4b0 <__assert_func+0x38>)
 800e4a0:	e7f4      	b.n	800e48c <__assert_func+0x14>
 800e4a2:	bf00      	nop
 800e4a4:	20000020 	.word	0x20000020
 800e4a8:	0801022e 	.word	0x0801022e
 800e4ac:	08010200 	.word	0x08010200
 800e4b0:	080101f3 	.word	0x080101f3

0800e4b4 <_calloc_r>:
 800e4b4:	b570      	push	{r4, r5, r6, lr}
 800e4b6:	fba1 5402 	umull	r5, r4, r1, r2
 800e4ba:	b93c      	cbnz	r4, 800e4cc <_calloc_r+0x18>
 800e4bc:	4629      	mov	r1, r5
 800e4be:	f7ff f99f 	bl	800d800 <_malloc_r>
 800e4c2:	4606      	mov	r6, r0
 800e4c4:	b928      	cbnz	r0, 800e4d2 <_calloc_r+0x1e>
 800e4c6:	2600      	movs	r6, #0
 800e4c8:	4630      	mov	r0, r6
 800e4ca:	bd70      	pop	{r4, r5, r6, pc}
 800e4cc:	220c      	movs	r2, #12
 800e4ce:	6002      	str	r2, [r0, #0]
 800e4d0:	e7f9      	b.n	800e4c6 <_calloc_r+0x12>
 800e4d2:	462a      	mov	r2, r5
 800e4d4:	4621      	mov	r1, r4
 800e4d6:	f7fe fa54 	bl	800c982 <memset>
 800e4da:	e7f5      	b.n	800e4c8 <_calloc_r+0x14>

0800e4dc <__ascii_mbtowc>:
 800e4dc:	b082      	sub	sp, #8
 800e4de:	b901      	cbnz	r1, 800e4e2 <__ascii_mbtowc+0x6>
 800e4e0:	a901      	add	r1, sp, #4
 800e4e2:	b142      	cbz	r2, 800e4f6 <__ascii_mbtowc+0x1a>
 800e4e4:	b14b      	cbz	r3, 800e4fa <__ascii_mbtowc+0x1e>
 800e4e6:	7813      	ldrb	r3, [r2, #0]
 800e4e8:	600b      	str	r3, [r1, #0]
 800e4ea:	7812      	ldrb	r2, [r2, #0]
 800e4ec:	1e10      	subs	r0, r2, #0
 800e4ee:	bf18      	it	ne
 800e4f0:	2001      	movne	r0, #1
 800e4f2:	b002      	add	sp, #8
 800e4f4:	4770      	bx	lr
 800e4f6:	4610      	mov	r0, r2
 800e4f8:	e7fb      	b.n	800e4f2 <__ascii_mbtowc+0x16>
 800e4fa:	f06f 0001 	mvn.w	r0, #1
 800e4fe:	e7f8      	b.n	800e4f2 <__ascii_mbtowc+0x16>

0800e500 <_realloc_r>:
 800e500:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e504:	4680      	mov	r8, r0
 800e506:	4615      	mov	r5, r2
 800e508:	460c      	mov	r4, r1
 800e50a:	b921      	cbnz	r1, 800e516 <_realloc_r+0x16>
 800e50c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e510:	4611      	mov	r1, r2
 800e512:	f7ff b975 	b.w	800d800 <_malloc_r>
 800e516:	b92a      	cbnz	r2, 800e524 <_realloc_r+0x24>
 800e518:	f7ff f8fe 	bl	800d718 <_free_r>
 800e51c:	2400      	movs	r4, #0
 800e51e:	4620      	mov	r0, r4
 800e520:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e524:	f000 f841 	bl	800e5aa <_malloc_usable_size_r>
 800e528:	4285      	cmp	r5, r0
 800e52a:	4606      	mov	r6, r0
 800e52c:	d802      	bhi.n	800e534 <_realloc_r+0x34>
 800e52e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e532:	d8f4      	bhi.n	800e51e <_realloc_r+0x1e>
 800e534:	4629      	mov	r1, r5
 800e536:	4640      	mov	r0, r8
 800e538:	f7ff f962 	bl	800d800 <_malloc_r>
 800e53c:	4607      	mov	r7, r0
 800e53e:	2800      	cmp	r0, #0
 800e540:	d0ec      	beq.n	800e51c <_realloc_r+0x1c>
 800e542:	42b5      	cmp	r5, r6
 800e544:	462a      	mov	r2, r5
 800e546:	4621      	mov	r1, r4
 800e548:	bf28      	it	cs
 800e54a:	4632      	movcs	r2, r6
 800e54c:	f7fe fa87 	bl	800ca5e <memcpy>
 800e550:	4621      	mov	r1, r4
 800e552:	4640      	mov	r0, r8
 800e554:	f7ff f8e0 	bl	800d718 <_free_r>
 800e558:	463c      	mov	r4, r7
 800e55a:	e7e0      	b.n	800e51e <_realloc_r+0x1e>

0800e55c <__ascii_wctomb>:
 800e55c:	4603      	mov	r3, r0
 800e55e:	4608      	mov	r0, r1
 800e560:	b141      	cbz	r1, 800e574 <__ascii_wctomb+0x18>
 800e562:	2aff      	cmp	r2, #255	@ 0xff
 800e564:	d904      	bls.n	800e570 <__ascii_wctomb+0x14>
 800e566:	228a      	movs	r2, #138	@ 0x8a
 800e568:	601a      	str	r2, [r3, #0]
 800e56a:	f04f 30ff 	mov.w	r0, #4294967295
 800e56e:	4770      	bx	lr
 800e570:	700a      	strb	r2, [r1, #0]
 800e572:	2001      	movs	r0, #1
 800e574:	4770      	bx	lr
	...

0800e578 <fiprintf>:
 800e578:	b40e      	push	{r1, r2, r3}
 800e57a:	b503      	push	{r0, r1, lr}
 800e57c:	4601      	mov	r1, r0
 800e57e:	ab03      	add	r3, sp, #12
 800e580:	4805      	ldr	r0, [pc, #20]	@ (800e598 <fiprintf+0x20>)
 800e582:	f853 2b04 	ldr.w	r2, [r3], #4
 800e586:	6800      	ldr	r0, [r0, #0]
 800e588:	9301      	str	r3, [sp, #4]
 800e58a:	f000 f83f 	bl	800e60c <_vfiprintf_r>
 800e58e:	b002      	add	sp, #8
 800e590:	f85d eb04 	ldr.w	lr, [sp], #4
 800e594:	b003      	add	sp, #12
 800e596:	4770      	bx	lr
 800e598:	20000020 	.word	0x20000020

0800e59c <abort>:
 800e59c:	b508      	push	{r3, lr}
 800e59e:	2006      	movs	r0, #6
 800e5a0:	f000 fa08 	bl	800e9b4 <raise>
 800e5a4:	2001      	movs	r0, #1
 800e5a6:	f7f4 fbed 	bl	8002d84 <_exit>

0800e5aa <_malloc_usable_size_r>:
 800e5aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e5ae:	1f18      	subs	r0, r3, #4
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	bfbc      	itt	lt
 800e5b4:	580b      	ldrlt	r3, [r1, r0]
 800e5b6:	18c0      	addlt	r0, r0, r3
 800e5b8:	4770      	bx	lr

0800e5ba <__sfputc_r>:
 800e5ba:	6893      	ldr	r3, [r2, #8]
 800e5bc:	3b01      	subs	r3, #1
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	b410      	push	{r4}
 800e5c2:	6093      	str	r3, [r2, #8]
 800e5c4:	da08      	bge.n	800e5d8 <__sfputc_r+0x1e>
 800e5c6:	6994      	ldr	r4, [r2, #24]
 800e5c8:	42a3      	cmp	r3, r4
 800e5ca:	db01      	blt.n	800e5d0 <__sfputc_r+0x16>
 800e5cc:	290a      	cmp	r1, #10
 800e5ce:	d103      	bne.n	800e5d8 <__sfputc_r+0x1e>
 800e5d0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5d4:	f000 b932 	b.w	800e83c <__swbuf_r>
 800e5d8:	6813      	ldr	r3, [r2, #0]
 800e5da:	1c58      	adds	r0, r3, #1
 800e5dc:	6010      	str	r0, [r2, #0]
 800e5de:	7019      	strb	r1, [r3, #0]
 800e5e0:	4608      	mov	r0, r1
 800e5e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e5e6:	4770      	bx	lr

0800e5e8 <__sfputs_r>:
 800e5e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e5ea:	4606      	mov	r6, r0
 800e5ec:	460f      	mov	r7, r1
 800e5ee:	4614      	mov	r4, r2
 800e5f0:	18d5      	adds	r5, r2, r3
 800e5f2:	42ac      	cmp	r4, r5
 800e5f4:	d101      	bne.n	800e5fa <__sfputs_r+0x12>
 800e5f6:	2000      	movs	r0, #0
 800e5f8:	e007      	b.n	800e60a <__sfputs_r+0x22>
 800e5fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5fe:	463a      	mov	r2, r7
 800e600:	4630      	mov	r0, r6
 800e602:	f7ff ffda 	bl	800e5ba <__sfputc_r>
 800e606:	1c43      	adds	r3, r0, #1
 800e608:	d1f3      	bne.n	800e5f2 <__sfputs_r+0xa>
 800e60a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e60c <_vfiprintf_r>:
 800e60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e610:	460d      	mov	r5, r1
 800e612:	b09d      	sub	sp, #116	@ 0x74
 800e614:	4614      	mov	r4, r2
 800e616:	4698      	mov	r8, r3
 800e618:	4606      	mov	r6, r0
 800e61a:	b118      	cbz	r0, 800e624 <_vfiprintf_r+0x18>
 800e61c:	6a03      	ldr	r3, [r0, #32]
 800e61e:	b90b      	cbnz	r3, 800e624 <_vfiprintf_r+0x18>
 800e620:	f7fe f8f2 	bl	800c808 <__sinit>
 800e624:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e626:	07d9      	lsls	r1, r3, #31
 800e628:	d405      	bmi.n	800e636 <_vfiprintf_r+0x2a>
 800e62a:	89ab      	ldrh	r3, [r5, #12]
 800e62c:	059a      	lsls	r2, r3, #22
 800e62e:	d402      	bmi.n	800e636 <_vfiprintf_r+0x2a>
 800e630:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e632:	f7fe fa12 	bl	800ca5a <__retarget_lock_acquire_recursive>
 800e636:	89ab      	ldrh	r3, [r5, #12]
 800e638:	071b      	lsls	r3, r3, #28
 800e63a:	d501      	bpl.n	800e640 <_vfiprintf_r+0x34>
 800e63c:	692b      	ldr	r3, [r5, #16]
 800e63e:	b99b      	cbnz	r3, 800e668 <_vfiprintf_r+0x5c>
 800e640:	4629      	mov	r1, r5
 800e642:	4630      	mov	r0, r6
 800e644:	f000 f938 	bl	800e8b8 <__swsetup_r>
 800e648:	b170      	cbz	r0, 800e668 <_vfiprintf_r+0x5c>
 800e64a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e64c:	07dc      	lsls	r4, r3, #31
 800e64e:	d504      	bpl.n	800e65a <_vfiprintf_r+0x4e>
 800e650:	f04f 30ff 	mov.w	r0, #4294967295
 800e654:	b01d      	add	sp, #116	@ 0x74
 800e656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e65a:	89ab      	ldrh	r3, [r5, #12]
 800e65c:	0598      	lsls	r0, r3, #22
 800e65e:	d4f7      	bmi.n	800e650 <_vfiprintf_r+0x44>
 800e660:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e662:	f7fe f9fb 	bl	800ca5c <__retarget_lock_release_recursive>
 800e666:	e7f3      	b.n	800e650 <_vfiprintf_r+0x44>
 800e668:	2300      	movs	r3, #0
 800e66a:	9309      	str	r3, [sp, #36]	@ 0x24
 800e66c:	2320      	movs	r3, #32
 800e66e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e672:	f8cd 800c 	str.w	r8, [sp, #12]
 800e676:	2330      	movs	r3, #48	@ 0x30
 800e678:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e828 <_vfiprintf_r+0x21c>
 800e67c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e680:	f04f 0901 	mov.w	r9, #1
 800e684:	4623      	mov	r3, r4
 800e686:	469a      	mov	sl, r3
 800e688:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e68c:	b10a      	cbz	r2, 800e692 <_vfiprintf_r+0x86>
 800e68e:	2a25      	cmp	r2, #37	@ 0x25
 800e690:	d1f9      	bne.n	800e686 <_vfiprintf_r+0x7a>
 800e692:	ebba 0b04 	subs.w	fp, sl, r4
 800e696:	d00b      	beq.n	800e6b0 <_vfiprintf_r+0xa4>
 800e698:	465b      	mov	r3, fp
 800e69a:	4622      	mov	r2, r4
 800e69c:	4629      	mov	r1, r5
 800e69e:	4630      	mov	r0, r6
 800e6a0:	f7ff ffa2 	bl	800e5e8 <__sfputs_r>
 800e6a4:	3001      	adds	r0, #1
 800e6a6:	f000 80a7 	beq.w	800e7f8 <_vfiprintf_r+0x1ec>
 800e6aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e6ac:	445a      	add	r2, fp
 800e6ae:	9209      	str	r2, [sp, #36]	@ 0x24
 800e6b0:	f89a 3000 	ldrb.w	r3, [sl]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	f000 809f 	beq.w	800e7f8 <_vfiprintf_r+0x1ec>
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	f04f 32ff 	mov.w	r2, #4294967295
 800e6c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e6c4:	f10a 0a01 	add.w	sl, sl, #1
 800e6c8:	9304      	str	r3, [sp, #16]
 800e6ca:	9307      	str	r3, [sp, #28]
 800e6cc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e6d0:	931a      	str	r3, [sp, #104]	@ 0x68
 800e6d2:	4654      	mov	r4, sl
 800e6d4:	2205      	movs	r2, #5
 800e6d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e6da:	4853      	ldr	r0, [pc, #332]	@ (800e828 <_vfiprintf_r+0x21c>)
 800e6dc:	f7f1 fdc8 	bl	8000270 <memchr>
 800e6e0:	9a04      	ldr	r2, [sp, #16]
 800e6e2:	b9d8      	cbnz	r0, 800e71c <_vfiprintf_r+0x110>
 800e6e4:	06d1      	lsls	r1, r2, #27
 800e6e6:	bf44      	itt	mi
 800e6e8:	2320      	movmi	r3, #32
 800e6ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e6ee:	0713      	lsls	r3, r2, #28
 800e6f0:	bf44      	itt	mi
 800e6f2:	232b      	movmi	r3, #43	@ 0x2b
 800e6f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e6f8:	f89a 3000 	ldrb.w	r3, [sl]
 800e6fc:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6fe:	d015      	beq.n	800e72c <_vfiprintf_r+0x120>
 800e700:	9a07      	ldr	r2, [sp, #28]
 800e702:	4654      	mov	r4, sl
 800e704:	2000      	movs	r0, #0
 800e706:	f04f 0c0a 	mov.w	ip, #10
 800e70a:	4621      	mov	r1, r4
 800e70c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e710:	3b30      	subs	r3, #48	@ 0x30
 800e712:	2b09      	cmp	r3, #9
 800e714:	d94b      	bls.n	800e7ae <_vfiprintf_r+0x1a2>
 800e716:	b1b0      	cbz	r0, 800e746 <_vfiprintf_r+0x13a>
 800e718:	9207      	str	r2, [sp, #28]
 800e71a:	e014      	b.n	800e746 <_vfiprintf_r+0x13a>
 800e71c:	eba0 0308 	sub.w	r3, r0, r8
 800e720:	fa09 f303 	lsl.w	r3, r9, r3
 800e724:	4313      	orrs	r3, r2
 800e726:	9304      	str	r3, [sp, #16]
 800e728:	46a2      	mov	sl, r4
 800e72a:	e7d2      	b.n	800e6d2 <_vfiprintf_r+0xc6>
 800e72c:	9b03      	ldr	r3, [sp, #12]
 800e72e:	1d19      	adds	r1, r3, #4
 800e730:	681b      	ldr	r3, [r3, #0]
 800e732:	9103      	str	r1, [sp, #12]
 800e734:	2b00      	cmp	r3, #0
 800e736:	bfbb      	ittet	lt
 800e738:	425b      	neglt	r3, r3
 800e73a:	f042 0202 	orrlt.w	r2, r2, #2
 800e73e:	9307      	strge	r3, [sp, #28]
 800e740:	9307      	strlt	r3, [sp, #28]
 800e742:	bfb8      	it	lt
 800e744:	9204      	strlt	r2, [sp, #16]
 800e746:	7823      	ldrb	r3, [r4, #0]
 800e748:	2b2e      	cmp	r3, #46	@ 0x2e
 800e74a:	d10a      	bne.n	800e762 <_vfiprintf_r+0x156>
 800e74c:	7863      	ldrb	r3, [r4, #1]
 800e74e:	2b2a      	cmp	r3, #42	@ 0x2a
 800e750:	d132      	bne.n	800e7b8 <_vfiprintf_r+0x1ac>
 800e752:	9b03      	ldr	r3, [sp, #12]
 800e754:	1d1a      	adds	r2, r3, #4
 800e756:	681b      	ldr	r3, [r3, #0]
 800e758:	9203      	str	r2, [sp, #12]
 800e75a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e75e:	3402      	adds	r4, #2
 800e760:	9305      	str	r3, [sp, #20]
 800e762:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e838 <_vfiprintf_r+0x22c>
 800e766:	7821      	ldrb	r1, [r4, #0]
 800e768:	2203      	movs	r2, #3
 800e76a:	4650      	mov	r0, sl
 800e76c:	f7f1 fd80 	bl	8000270 <memchr>
 800e770:	b138      	cbz	r0, 800e782 <_vfiprintf_r+0x176>
 800e772:	9b04      	ldr	r3, [sp, #16]
 800e774:	eba0 000a 	sub.w	r0, r0, sl
 800e778:	2240      	movs	r2, #64	@ 0x40
 800e77a:	4082      	lsls	r2, r0
 800e77c:	4313      	orrs	r3, r2
 800e77e:	3401      	adds	r4, #1
 800e780:	9304      	str	r3, [sp, #16]
 800e782:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e786:	4829      	ldr	r0, [pc, #164]	@ (800e82c <_vfiprintf_r+0x220>)
 800e788:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e78c:	2206      	movs	r2, #6
 800e78e:	f7f1 fd6f 	bl	8000270 <memchr>
 800e792:	2800      	cmp	r0, #0
 800e794:	d03f      	beq.n	800e816 <_vfiprintf_r+0x20a>
 800e796:	4b26      	ldr	r3, [pc, #152]	@ (800e830 <_vfiprintf_r+0x224>)
 800e798:	bb1b      	cbnz	r3, 800e7e2 <_vfiprintf_r+0x1d6>
 800e79a:	9b03      	ldr	r3, [sp, #12]
 800e79c:	3307      	adds	r3, #7
 800e79e:	f023 0307 	bic.w	r3, r3, #7
 800e7a2:	3308      	adds	r3, #8
 800e7a4:	9303      	str	r3, [sp, #12]
 800e7a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e7a8:	443b      	add	r3, r7
 800e7aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800e7ac:	e76a      	b.n	800e684 <_vfiprintf_r+0x78>
 800e7ae:	fb0c 3202 	mla	r2, ip, r2, r3
 800e7b2:	460c      	mov	r4, r1
 800e7b4:	2001      	movs	r0, #1
 800e7b6:	e7a8      	b.n	800e70a <_vfiprintf_r+0xfe>
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	3401      	adds	r4, #1
 800e7bc:	9305      	str	r3, [sp, #20]
 800e7be:	4619      	mov	r1, r3
 800e7c0:	f04f 0c0a 	mov.w	ip, #10
 800e7c4:	4620      	mov	r0, r4
 800e7c6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e7ca:	3a30      	subs	r2, #48	@ 0x30
 800e7cc:	2a09      	cmp	r2, #9
 800e7ce:	d903      	bls.n	800e7d8 <_vfiprintf_r+0x1cc>
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d0c6      	beq.n	800e762 <_vfiprintf_r+0x156>
 800e7d4:	9105      	str	r1, [sp, #20]
 800e7d6:	e7c4      	b.n	800e762 <_vfiprintf_r+0x156>
 800e7d8:	fb0c 2101 	mla	r1, ip, r1, r2
 800e7dc:	4604      	mov	r4, r0
 800e7de:	2301      	movs	r3, #1
 800e7e0:	e7f0      	b.n	800e7c4 <_vfiprintf_r+0x1b8>
 800e7e2:	ab03      	add	r3, sp, #12
 800e7e4:	9300      	str	r3, [sp, #0]
 800e7e6:	462a      	mov	r2, r5
 800e7e8:	4b12      	ldr	r3, [pc, #72]	@ (800e834 <_vfiprintf_r+0x228>)
 800e7ea:	a904      	add	r1, sp, #16
 800e7ec:	4630      	mov	r0, r6
 800e7ee:	f7fd fbc7 	bl	800bf80 <_printf_float>
 800e7f2:	4607      	mov	r7, r0
 800e7f4:	1c78      	adds	r0, r7, #1
 800e7f6:	d1d6      	bne.n	800e7a6 <_vfiprintf_r+0x19a>
 800e7f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e7fa:	07d9      	lsls	r1, r3, #31
 800e7fc:	d405      	bmi.n	800e80a <_vfiprintf_r+0x1fe>
 800e7fe:	89ab      	ldrh	r3, [r5, #12]
 800e800:	059a      	lsls	r2, r3, #22
 800e802:	d402      	bmi.n	800e80a <_vfiprintf_r+0x1fe>
 800e804:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e806:	f7fe f929 	bl	800ca5c <__retarget_lock_release_recursive>
 800e80a:	89ab      	ldrh	r3, [r5, #12]
 800e80c:	065b      	lsls	r3, r3, #25
 800e80e:	f53f af1f 	bmi.w	800e650 <_vfiprintf_r+0x44>
 800e812:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e814:	e71e      	b.n	800e654 <_vfiprintf_r+0x48>
 800e816:	ab03      	add	r3, sp, #12
 800e818:	9300      	str	r3, [sp, #0]
 800e81a:	462a      	mov	r2, r5
 800e81c:	4b05      	ldr	r3, [pc, #20]	@ (800e834 <_vfiprintf_r+0x228>)
 800e81e:	a904      	add	r1, sp, #16
 800e820:	4630      	mov	r0, r6
 800e822:	f7fd fe45 	bl	800c4b0 <_printf_i>
 800e826:	e7e4      	b.n	800e7f2 <_vfiprintf_r+0x1e6>
 800e828:	080101d8 	.word	0x080101d8
 800e82c:	080101e2 	.word	0x080101e2
 800e830:	0800bf81 	.word	0x0800bf81
 800e834:	0800e5e9 	.word	0x0800e5e9
 800e838:	080101de 	.word	0x080101de

0800e83c <__swbuf_r>:
 800e83c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e83e:	460e      	mov	r6, r1
 800e840:	4614      	mov	r4, r2
 800e842:	4605      	mov	r5, r0
 800e844:	b118      	cbz	r0, 800e84e <__swbuf_r+0x12>
 800e846:	6a03      	ldr	r3, [r0, #32]
 800e848:	b90b      	cbnz	r3, 800e84e <__swbuf_r+0x12>
 800e84a:	f7fd ffdd 	bl	800c808 <__sinit>
 800e84e:	69a3      	ldr	r3, [r4, #24]
 800e850:	60a3      	str	r3, [r4, #8]
 800e852:	89a3      	ldrh	r3, [r4, #12]
 800e854:	071a      	lsls	r2, r3, #28
 800e856:	d501      	bpl.n	800e85c <__swbuf_r+0x20>
 800e858:	6923      	ldr	r3, [r4, #16]
 800e85a:	b943      	cbnz	r3, 800e86e <__swbuf_r+0x32>
 800e85c:	4621      	mov	r1, r4
 800e85e:	4628      	mov	r0, r5
 800e860:	f000 f82a 	bl	800e8b8 <__swsetup_r>
 800e864:	b118      	cbz	r0, 800e86e <__swbuf_r+0x32>
 800e866:	f04f 37ff 	mov.w	r7, #4294967295
 800e86a:	4638      	mov	r0, r7
 800e86c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e86e:	6823      	ldr	r3, [r4, #0]
 800e870:	6922      	ldr	r2, [r4, #16]
 800e872:	1a98      	subs	r0, r3, r2
 800e874:	6963      	ldr	r3, [r4, #20]
 800e876:	b2f6      	uxtb	r6, r6
 800e878:	4283      	cmp	r3, r0
 800e87a:	4637      	mov	r7, r6
 800e87c:	dc05      	bgt.n	800e88a <__swbuf_r+0x4e>
 800e87e:	4621      	mov	r1, r4
 800e880:	4628      	mov	r0, r5
 800e882:	f7ff fda7 	bl	800e3d4 <_fflush_r>
 800e886:	2800      	cmp	r0, #0
 800e888:	d1ed      	bne.n	800e866 <__swbuf_r+0x2a>
 800e88a:	68a3      	ldr	r3, [r4, #8]
 800e88c:	3b01      	subs	r3, #1
 800e88e:	60a3      	str	r3, [r4, #8]
 800e890:	6823      	ldr	r3, [r4, #0]
 800e892:	1c5a      	adds	r2, r3, #1
 800e894:	6022      	str	r2, [r4, #0]
 800e896:	701e      	strb	r6, [r3, #0]
 800e898:	6962      	ldr	r2, [r4, #20]
 800e89a:	1c43      	adds	r3, r0, #1
 800e89c:	429a      	cmp	r2, r3
 800e89e:	d004      	beq.n	800e8aa <__swbuf_r+0x6e>
 800e8a0:	89a3      	ldrh	r3, [r4, #12]
 800e8a2:	07db      	lsls	r3, r3, #31
 800e8a4:	d5e1      	bpl.n	800e86a <__swbuf_r+0x2e>
 800e8a6:	2e0a      	cmp	r6, #10
 800e8a8:	d1df      	bne.n	800e86a <__swbuf_r+0x2e>
 800e8aa:	4621      	mov	r1, r4
 800e8ac:	4628      	mov	r0, r5
 800e8ae:	f7ff fd91 	bl	800e3d4 <_fflush_r>
 800e8b2:	2800      	cmp	r0, #0
 800e8b4:	d0d9      	beq.n	800e86a <__swbuf_r+0x2e>
 800e8b6:	e7d6      	b.n	800e866 <__swbuf_r+0x2a>

0800e8b8 <__swsetup_r>:
 800e8b8:	b538      	push	{r3, r4, r5, lr}
 800e8ba:	4b29      	ldr	r3, [pc, #164]	@ (800e960 <__swsetup_r+0xa8>)
 800e8bc:	4605      	mov	r5, r0
 800e8be:	6818      	ldr	r0, [r3, #0]
 800e8c0:	460c      	mov	r4, r1
 800e8c2:	b118      	cbz	r0, 800e8cc <__swsetup_r+0x14>
 800e8c4:	6a03      	ldr	r3, [r0, #32]
 800e8c6:	b90b      	cbnz	r3, 800e8cc <__swsetup_r+0x14>
 800e8c8:	f7fd ff9e 	bl	800c808 <__sinit>
 800e8cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8d0:	0719      	lsls	r1, r3, #28
 800e8d2:	d422      	bmi.n	800e91a <__swsetup_r+0x62>
 800e8d4:	06da      	lsls	r2, r3, #27
 800e8d6:	d407      	bmi.n	800e8e8 <__swsetup_r+0x30>
 800e8d8:	2209      	movs	r2, #9
 800e8da:	602a      	str	r2, [r5, #0]
 800e8dc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e8e0:	81a3      	strh	r3, [r4, #12]
 800e8e2:	f04f 30ff 	mov.w	r0, #4294967295
 800e8e6:	e033      	b.n	800e950 <__swsetup_r+0x98>
 800e8e8:	0758      	lsls	r0, r3, #29
 800e8ea:	d512      	bpl.n	800e912 <__swsetup_r+0x5a>
 800e8ec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e8ee:	b141      	cbz	r1, 800e902 <__swsetup_r+0x4a>
 800e8f0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e8f4:	4299      	cmp	r1, r3
 800e8f6:	d002      	beq.n	800e8fe <__swsetup_r+0x46>
 800e8f8:	4628      	mov	r0, r5
 800e8fa:	f7fe ff0d 	bl	800d718 <_free_r>
 800e8fe:	2300      	movs	r3, #0
 800e900:	6363      	str	r3, [r4, #52]	@ 0x34
 800e902:	89a3      	ldrh	r3, [r4, #12]
 800e904:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e908:	81a3      	strh	r3, [r4, #12]
 800e90a:	2300      	movs	r3, #0
 800e90c:	6063      	str	r3, [r4, #4]
 800e90e:	6923      	ldr	r3, [r4, #16]
 800e910:	6023      	str	r3, [r4, #0]
 800e912:	89a3      	ldrh	r3, [r4, #12]
 800e914:	f043 0308 	orr.w	r3, r3, #8
 800e918:	81a3      	strh	r3, [r4, #12]
 800e91a:	6923      	ldr	r3, [r4, #16]
 800e91c:	b94b      	cbnz	r3, 800e932 <__swsetup_r+0x7a>
 800e91e:	89a3      	ldrh	r3, [r4, #12]
 800e920:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e924:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e928:	d003      	beq.n	800e932 <__swsetup_r+0x7a>
 800e92a:	4621      	mov	r1, r4
 800e92c:	4628      	mov	r0, r5
 800e92e:	f000 f883 	bl	800ea38 <__smakebuf_r>
 800e932:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e936:	f013 0201 	ands.w	r2, r3, #1
 800e93a:	d00a      	beq.n	800e952 <__swsetup_r+0x9a>
 800e93c:	2200      	movs	r2, #0
 800e93e:	60a2      	str	r2, [r4, #8]
 800e940:	6962      	ldr	r2, [r4, #20]
 800e942:	4252      	negs	r2, r2
 800e944:	61a2      	str	r2, [r4, #24]
 800e946:	6922      	ldr	r2, [r4, #16]
 800e948:	b942      	cbnz	r2, 800e95c <__swsetup_r+0xa4>
 800e94a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e94e:	d1c5      	bne.n	800e8dc <__swsetup_r+0x24>
 800e950:	bd38      	pop	{r3, r4, r5, pc}
 800e952:	0799      	lsls	r1, r3, #30
 800e954:	bf58      	it	pl
 800e956:	6962      	ldrpl	r2, [r4, #20]
 800e958:	60a2      	str	r2, [r4, #8]
 800e95a:	e7f4      	b.n	800e946 <__swsetup_r+0x8e>
 800e95c:	2000      	movs	r0, #0
 800e95e:	e7f7      	b.n	800e950 <__swsetup_r+0x98>
 800e960:	20000020 	.word	0x20000020

0800e964 <_raise_r>:
 800e964:	291f      	cmp	r1, #31
 800e966:	b538      	push	{r3, r4, r5, lr}
 800e968:	4605      	mov	r5, r0
 800e96a:	460c      	mov	r4, r1
 800e96c:	d904      	bls.n	800e978 <_raise_r+0x14>
 800e96e:	2316      	movs	r3, #22
 800e970:	6003      	str	r3, [r0, #0]
 800e972:	f04f 30ff 	mov.w	r0, #4294967295
 800e976:	bd38      	pop	{r3, r4, r5, pc}
 800e978:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e97a:	b112      	cbz	r2, 800e982 <_raise_r+0x1e>
 800e97c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e980:	b94b      	cbnz	r3, 800e996 <_raise_r+0x32>
 800e982:	4628      	mov	r0, r5
 800e984:	f000 f830 	bl	800e9e8 <_getpid_r>
 800e988:	4622      	mov	r2, r4
 800e98a:	4601      	mov	r1, r0
 800e98c:	4628      	mov	r0, r5
 800e98e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e992:	f000 b817 	b.w	800e9c4 <_kill_r>
 800e996:	2b01      	cmp	r3, #1
 800e998:	d00a      	beq.n	800e9b0 <_raise_r+0x4c>
 800e99a:	1c59      	adds	r1, r3, #1
 800e99c:	d103      	bne.n	800e9a6 <_raise_r+0x42>
 800e99e:	2316      	movs	r3, #22
 800e9a0:	6003      	str	r3, [r0, #0]
 800e9a2:	2001      	movs	r0, #1
 800e9a4:	e7e7      	b.n	800e976 <_raise_r+0x12>
 800e9a6:	2100      	movs	r1, #0
 800e9a8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e9ac:	4620      	mov	r0, r4
 800e9ae:	4798      	blx	r3
 800e9b0:	2000      	movs	r0, #0
 800e9b2:	e7e0      	b.n	800e976 <_raise_r+0x12>

0800e9b4 <raise>:
 800e9b4:	4b02      	ldr	r3, [pc, #8]	@ (800e9c0 <raise+0xc>)
 800e9b6:	4601      	mov	r1, r0
 800e9b8:	6818      	ldr	r0, [r3, #0]
 800e9ba:	f7ff bfd3 	b.w	800e964 <_raise_r>
 800e9be:	bf00      	nop
 800e9c0:	20000020 	.word	0x20000020

0800e9c4 <_kill_r>:
 800e9c4:	b538      	push	{r3, r4, r5, lr}
 800e9c6:	4d07      	ldr	r5, [pc, #28]	@ (800e9e4 <_kill_r+0x20>)
 800e9c8:	2300      	movs	r3, #0
 800e9ca:	4604      	mov	r4, r0
 800e9cc:	4608      	mov	r0, r1
 800e9ce:	4611      	mov	r1, r2
 800e9d0:	602b      	str	r3, [r5, #0]
 800e9d2:	f7f4 f9c7 	bl	8002d64 <_kill>
 800e9d6:	1c43      	adds	r3, r0, #1
 800e9d8:	d102      	bne.n	800e9e0 <_kill_r+0x1c>
 800e9da:	682b      	ldr	r3, [r5, #0]
 800e9dc:	b103      	cbz	r3, 800e9e0 <_kill_r+0x1c>
 800e9de:	6023      	str	r3, [r4, #0]
 800e9e0:	bd38      	pop	{r3, r4, r5, pc}
 800e9e2:	bf00      	nop
 800e9e4:	20013ddc 	.word	0x20013ddc

0800e9e8 <_getpid_r>:
 800e9e8:	f7f4 b9b4 	b.w	8002d54 <_getpid>

0800e9ec <__swhatbuf_r>:
 800e9ec:	b570      	push	{r4, r5, r6, lr}
 800e9ee:	460c      	mov	r4, r1
 800e9f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e9f4:	2900      	cmp	r1, #0
 800e9f6:	b096      	sub	sp, #88	@ 0x58
 800e9f8:	4615      	mov	r5, r2
 800e9fa:	461e      	mov	r6, r3
 800e9fc:	da0d      	bge.n	800ea1a <__swhatbuf_r+0x2e>
 800e9fe:	89a3      	ldrh	r3, [r4, #12]
 800ea00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ea04:	f04f 0100 	mov.w	r1, #0
 800ea08:	bf14      	ite	ne
 800ea0a:	2340      	movne	r3, #64	@ 0x40
 800ea0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ea10:	2000      	movs	r0, #0
 800ea12:	6031      	str	r1, [r6, #0]
 800ea14:	602b      	str	r3, [r5, #0]
 800ea16:	b016      	add	sp, #88	@ 0x58
 800ea18:	bd70      	pop	{r4, r5, r6, pc}
 800ea1a:	466a      	mov	r2, sp
 800ea1c:	f000 f848 	bl	800eab0 <_fstat_r>
 800ea20:	2800      	cmp	r0, #0
 800ea22:	dbec      	blt.n	800e9fe <__swhatbuf_r+0x12>
 800ea24:	9901      	ldr	r1, [sp, #4]
 800ea26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ea2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ea2e:	4259      	negs	r1, r3
 800ea30:	4159      	adcs	r1, r3
 800ea32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ea36:	e7eb      	b.n	800ea10 <__swhatbuf_r+0x24>

0800ea38 <__smakebuf_r>:
 800ea38:	898b      	ldrh	r3, [r1, #12]
 800ea3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ea3c:	079d      	lsls	r5, r3, #30
 800ea3e:	4606      	mov	r6, r0
 800ea40:	460c      	mov	r4, r1
 800ea42:	d507      	bpl.n	800ea54 <__smakebuf_r+0x1c>
 800ea44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ea48:	6023      	str	r3, [r4, #0]
 800ea4a:	6123      	str	r3, [r4, #16]
 800ea4c:	2301      	movs	r3, #1
 800ea4e:	6163      	str	r3, [r4, #20]
 800ea50:	b003      	add	sp, #12
 800ea52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea54:	ab01      	add	r3, sp, #4
 800ea56:	466a      	mov	r2, sp
 800ea58:	f7ff ffc8 	bl	800e9ec <__swhatbuf_r>
 800ea5c:	9f00      	ldr	r7, [sp, #0]
 800ea5e:	4605      	mov	r5, r0
 800ea60:	4639      	mov	r1, r7
 800ea62:	4630      	mov	r0, r6
 800ea64:	f7fe fecc 	bl	800d800 <_malloc_r>
 800ea68:	b948      	cbnz	r0, 800ea7e <__smakebuf_r+0x46>
 800ea6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ea6e:	059a      	lsls	r2, r3, #22
 800ea70:	d4ee      	bmi.n	800ea50 <__smakebuf_r+0x18>
 800ea72:	f023 0303 	bic.w	r3, r3, #3
 800ea76:	f043 0302 	orr.w	r3, r3, #2
 800ea7a:	81a3      	strh	r3, [r4, #12]
 800ea7c:	e7e2      	b.n	800ea44 <__smakebuf_r+0xc>
 800ea7e:	89a3      	ldrh	r3, [r4, #12]
 800ea80:	6020      	str	r0, [r4, #0]
 800ea82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea86:	81a3      	strh	r3, [r4, #12]
 800ea88:	9b01      	ldr	r3, [sp, #4]
 800ea8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ea8e:	b15b      	cbz	r3, 800eaa8 <__smakebuf_r+0x70>
 800ea90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ea94:	4630      	mov	r0, r6
 800ea96:	f000 f81d 	bl	800ead4 <_isatty_r>
 800ea9a:	b128      	cbz	r0, 800eaa8 <__smakebuf_r+0x70>
 800ea9c:	89a3      	ldrh	r3, [r4, #12]
 800ea9e:	f023 0303 	bic.w	r3, r3, #3
 800eaa2:	f043 0301 	orr.w	r3, r3, #1
 800eaa6:	81a3      	strh	r3, [r4, #12]
 800eaa8:	89a3      	ldrh	r3, [r4, #12]
 800eaaa:	431d      	orrs	r5, r3
 800eaac:	81a5      	strh	r5, [r4, #12]
 800eaae:	e7cf      	b.n	800ea50 <__smakebuf_r+0x18>

0800eab0 <_fstat_r>:
 800eab0:	b538      	push	{r3, r4, r5, lr}
 800eab2:	4d07      	ldr	r5, [pc, #28]	@ (800ead0 <_fstat_r+0x20>)
 800eab4:	2300      	movs	r3, #0
 800eab6:	4604      	mov	r4, r0
 800eab8:	4608      	mov	r0, r1
 800eaba:	4611      	mov	r1, r2
 800eabc:	602b      	str	r3, [r5, #0]
 800eabe:	f7f4 f995 	bl	8002dec <_fstat>
 800eac2:	1c43      	adds	r3, r0, #1
 800eac4:	d102      	bne.n	800eacc <_fstat_r+0x1c>
 800eac6:	682b      	ldr	r3, [r5, #0]
 800eac8:	b103      	cbz	r3, 800eacc <_fstat_r+0x1c>
 800eaca:	6023      	str	r3, [r4, #0]
 800eacc:	bd38      	pop	{r3, r4, r5, pc}
 800eace:	bf00      	nop
 800ead0:	20013ddc 	.word	0x20013ddc

0800ead4 <_isatty_r>:
 800ead4:	b538      	push	{r3, r4, r5, lr}
 800ead6:	4d06      	ldr	r5, [pc, #24]	@ (800eaf0 <_isatty_r+0x1c>)
 800ead8:	2300      	movs	r3, #0
 800eada:	4604      	mov	r4, r0
 800eadc:	4608      	mov	r0, r1
 800eade:	602b      	str	r3, [r5, #0]
 800eae0:	f7f4 f994 	bl	8002e0c <_isatty>
 800eae4:	1c43      	adds	r3, r0, #1
 800eae6:	d102      	bne.n	800eaee <_isatty_r+0x1a>
 800eae8:	682b      	ldr	r3, [r5, #0]
 800eaea:	b103      	cbz	r3, 800eaee <_isatty_r+0x1a>
 800eaec:	6023      	str	r3, [r4, #0]
 800eaee:	bd38      	pop	{r3, r4, r5, pc}
 800eaf0:	20013ddc 	.word	0x20013ddc

0800eaf4 <pow>:
 800eaf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eaf6:	ed2d 8b02 	vpush	{d8}
 800eafa:	eeb0 8a40 	vmov.f32	s16, s0
 800eafe:	eef0 8a60 	vmov.f32	s17, s1
 800eb02:	ec55 4b11 	vmov	r4, r5, d1
 800eb06:	f000 f873 	bl	800ebf0 <__ieee754_pow>
 800eb0a:	4622      	mov	r2, r4
 800eb0c:	462b      	mov	r3, r5
 800eb0e:	4620      	mov	r0, r4
 800eb10:	4629      	mov	r1, r5
 800eb12:	ec57 6b10 	vmov	r6, r7, d0
 800eb16:	f7f2 f859 	bl	8000bcc <__aeabi_dcmpun>
 800eb1a:	2800      	cmp	r0, #0
 800eb1c:	d13b      	bne.n	800eb96 <pow+0xa2>
 800eb1e:	ec51 0b18 	vmov	r0, r1, d8
 800eb22:	2200      	movs	r2, #0
 800eb24:	2300      	movs	r3, #0
 800eb26:	f7f2 f81f 	bl	8000b68 <__aeabi_dcmpeq>
 800eb2a:	b1b8      	cbz	r0, 800eb5c <pow+0x68>
 800eb2c:	2200      	movs	r2, #0
 800eb2e:	2300      	movs	r3, #0
 800eb30:	4620      	mov	r0, r4
 800eb32:	4629      	mov	r1, r5
 800eb34:	f7f2 f818 	bl	8000b68 <__aeabi_dcmpeq>
 800eb38:	2800      	cmp	r0, #0
 800eb3a:	d146      	bne.n	800ebca <pow+0xd6>
 800eb3c:	ec45 4b10 	vmov	d0, r4, r5
 800eb40:	f000 f848 	bl	800ebd4 <finite>
 800eb44:	b338      	cbz	r0, 800eb96 <pow+0xa2>
 800eb46:	2200      	movs	r2, #0
 800eb48:	2300      	movs	r3, #0
 800eb4a:	4620      	mov	r0, r4
 800eb4c:	4629      	mov	r1, r5
 800eb4e:	f7f2 f815 	bl	8000b7c <__aeabi_dcmplt>
 800eb52:	b300      	cbz	r0, 800eb96 <pow+0xa2>
 800eb54:	f7fd ff56 	bl	800ca04 <__errno>
 800eb58:	2322      	movs	r3, #34	@ 0x22
 800eb5a:	e01b      	b.n	800eb94 <pow+0xa0>
 800eb5c:	ec47 6b10 	vmov	d0, r6, r7
 800eb60:	f000 f838 	bl	800ebd4 <finite>
 800eb64:	b9e0      	cbnz	r0, 800eba0 <pow+0xac>
 800eb66:	eeb0 0a48 	vmov.f32	s0, s16
 800eb6a:	eef0 0a68 	vmov.f32	s1, s17
 800eb6e:	f000 f831 	bl	800ebd4 <finite>
 800eb72:	b1a8      	cbz	r0, 800eba0 <pow+0xac>
 800eb74:	ec45 4b10 	vmov	d0, r4, r5
 800eb78:	f000 f82c 	bl	800ebd4 <finite>
 800eb7c:	b180      	cbz	r0, 800eba0 <pow+0xac>
 800eb7e:	4632      	mov	r2, r6
 800eb80:	463b      	mov	r3, r7
 800eb82:	4630      	mov	r0, r6
 800eb84:	4639      	mov	r1, r7
 800eb86:	f7f2 f821 	bl	8000bcc <__aeabi_dcmpun>
 800eb8a:	2800      	cmp	r0, #0
 800eb8c:	d0e2      	beq.n	800eb54 <pow+0x60>
 800eb8e:	f7fd ff39 	bl	800ca04 <__errno>
 800eb92:	2321      	movs	r3, #33	@ 0x21
 800eb94:	6003      	str	r3, [r0, #0]
 800eb96:	ecbd 8b02 	vpop	{d8}
 800eb9a:	ec47 6b10 	vmov	d0, r6, r7
 800eb9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eba0:	2200      	movs	r2, #0
 800eba2:	2300      	movs	r3, #0
 800eba4:	4630      	mov	r0, r6
 800eba6:	4639      	mov	r1, r7
 800eba8:	f7f1 ffde 	bl	8000b68 <__aeabi_dcmpeq>
 800ebac:	2800      	cmp	r0, #0
 800ebae:	d0f2      	beq.n	800eb96 <pow+0xa2>
 800ebb0:	eeb0 0a48 	vmov.f32	s0, s16
 800ebb4:	eef0 0a68 	vmov.f32	s1, s17
 800ebb8:	f000 f80c 	bl	800ebd4 <finite>
 800ebbc:	2800      	cmp	r0, #0
 800ebbe:	d0ea      	beq.n	800eb96 <pow+0xa2>
 800ebc0:	ec45 4b10 	vmov	d0, r4, r5
 800ebc4:	f000 f806 	bl	800ebd4 <finite>
 800ebc8:	e7c3      	b.n	800eb52 <pow+0x5e>
 800ebca:	4f01      	ldr	r7, [pc, #4]	@ (800ebd0 <pow+0xdc>)
 800ebcc:	2600      	movs	r6, #0
 800ebce:	e7e2      	b.n	800eb96 <pow+0xa2>
 800ebd0:	3ff00000 	.word	0x3ff00000

0800ebd4 <finite>:
 800ebd4:	b082      	sub	sp, #8
 800ebd6:	ed8d 0b00 	vstr	d0, [sp]
 800ebda:	9801      	ldr	r0, [sp, #4]
 800ebdc:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800ebe0:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ebe4:	0fc0      	lsrs	r0, r0, #31
 800ebe6:	b002      	add	sp, #8
 800ebe8:	4770      	bx	lr
 800ebea:	0000      	movs	r0, r0
 800ebec:	0000      	movs	r0, r0
	...

0800ebf0 <__ieee754_pow>:
 800ebf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebf4:	b091      	sub	sp, #68	@ 0x44
 800ebf6:	ed8d 1b00 	vstr	d1, [sp]
 800ebfa:	e9dd 1900 	ldrd	r1, r9, [sp]
 800ebfe:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800ec02:	ea5a 0001 	orrs.w	r0, sl, r1
 800ec06:	ec57 6b10 	vmov	r6, r7, d0
 800ec0a:	d113      	bne.n	800ec34 <__ieee754_pow+0x44>
 800ec0c:	19b3      	adds	r3, r6, r6
 800ec0e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800ec12:	4152      	adcs	r2, r2
 800ec14:	4298      	cmp	r0, r3
 800ec16:	4b98      	ldr	r3, [pc, #608]	@ (800ee78 <__ieee754_pow+0x288>)
 800ec18:	4193      	sbcs	r3, r2
 800ec1a:	f080 84ea 	bcs.w	800f5f2 <__ieee754_pow+0xa02>
 800ec1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ec22:	4630      	mov	r0, r6
 800ec24:	4639      	mov	r1, r7
 800ec26:	f7f1 fb81 	bl	800032c <__adddf3>
 800ec2a:	ec41 0b10 	vmov	d0, r0, r1
 800ec2e:	b011      	add	sp, #68	@ 0x44
 800ec30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec34:	4a91      	ldr	r2, [pc, #580]	@ (800ee7c <__ieee754_pow+0x28c>)
 800ec36:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ec3a:	4590      	cmp	r8, r2
 800ec3c:	463d      	mov	r5, r7
 800ec3e:	4633      	mov	r3, r6
 800ec40:	d806      	bhi.n	800ec50 <__ieee754_pow+0x60>
 800ec42:	d101      	bne.n	800ec48 <__ieee754_pow+0x58>
 800ec44:	2e00      	cmp	r6, #0
 800ec46:	d1ea      	bne.n	800ec1e <__ieee754_pow+0x2e>
 800ec48:	4592      	cmp	sl, r2
 800ec4a:	d801      	bhi.n	800ec50 <__ieee754_pow+0x60>
 800ec4c:	d10e      	bne.n	800ec6c <__ieee754_pow+0x7c>
 800ec4e:	b169      	cbz	r1, 800ec6c <__ieee754_pow+0x7c>
 800ec50:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800ec54:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800ec58:	431d      	orrs	r5, r3
 800ec5a:	d1e0      	bne.n	800ec1e <__ieee754_pow+0x2e>
 800ec5c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ec60:	18db      	adds	r3, r3, r3
 800ec62:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800ec66:	4152      	adcs	r2, r2
 800ec68:	429d      	cmp	r5, r3
 800ec6a:	e7d4      	b.n	800ec16 <__ieee754_pow+0x26>
 800ec6c:	2d00      	cmp	r5, #0
 800ec6e:	46c3      	mov	fp, r8
 800ec70:	da3a      	bge.n	800ece8 <__ieee754_pow+0xf8>
 800ec72:	4a83      	ldr	r2, [pc, #524]	@ (800ee80 <__ieee754_pow+0x290>)
 800ec74:	4592      	cmp	sl, r2
 800ec76:	d84d      	bhi.n	800ed14 <__ieee754_pow+0x124>
 800ec78:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800ec7c:	4592      	cmp	sl, r2
 800ec7e:	f240 84c7 	bls.w	800f610 <__ieee754_pow+0xa20>
 800ec82:	ea4f 522a 	mov.w	r2, sl, asr #20
 800ec86:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800ec8a:	2a14      	cmp	r2, #20
 800ec8c:	dd0f      	ble.n	800ecae <__ieee754_pow+0xbe>
 800ec8e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800ec92:	fa21 f402 	lsr.w	r4, r1, r2
 800ec96:	fa04 f202 	lsl.w	r2, r4, r2
 800ec9a:	428a      	cmp	r2, r1
 800ec9c:	f040 84b8 	bne.w	800f610 <__ieee754_pow+0xa20>
 800eca0:	f004 0401 	and.w	r4, r4, #1
 800eca4:	f1c4 0402 	rsb	r4, r4, #2
 800eca8:	2900      	cmp	r1, #0
 800ecaa:	d158      	bne.n	800ed5e <__ieee754_pow+0x16e>
 800ecac:	e00e      	b.n	800eccc <__ieee754_pow+0xdc>
 800ecae:	2900      	cmp	r1, #0
 800ecb0:	d154      	bne.n	800ed5c <__ieee754_pow+0x16c>
 800ecb2:	f1c2 0214 	rsb	r2, r2, #20
 800ecb6:	fa4a f402 	asr.w	r4, sl, r2
 800ecba:	fa04 f202 	lsl.w	r2, r4, r2
 800ecbe:	4552      	cmp	r2, sl
 800ecc0:	f040 84a3 	bne.w	800f60a <__ieee754_pow+0xa1a>
 800ecc4:	f004 0401 	and.w	r4, r4, #1
 800ecc8:	f1c4 0402 	rsb	r4, r4, #2
 800eccc:	4a6d      	ldr	r2, [pc, #436]	@ (800ee84 <__ieee754_pow+0x294>)
 800ecce:	4592      	cmp	sl, r2
 800ecd0:	d12e      	bne.n	800ed30 <__ieee754_pow+0x140>
 800ecd2:	f1b9 0f00 	cmp.w	r9, #0
 800ecd6:	f280 8494 	bge.w	800f602 <__ieee754_pow+0xa12>
 800ecda:	496a      	ldr	r1, [pc, #424]	@ (800ee84 <__ieee754_pow+0x294>)
 800ecdc:	4632      	mov	r2, r6
 800ecde:	463b      	mov	r3, r7
 800ece0:	2000      	movs	r0, #0
 800ece2:	f7f1 fe03 	bl	80008ec <__aeabi_ddiv>
 800ece6:	e7a0      	b.n	800ec2a <__ieee754_pow+0x3a>
 800ece8:	2400      	movs	r4, #0
 800ecea:	bbc1      	cbnz	r1, 800ed5e <__ieee754_pow+0x16e>
 800ecec:	4a63      	ldr	r2, [pc, #396]	@ (800ee7c <__ieee754_pow+0x28c>)
 800ecee:	4592      	cmp	sl, r2
 800ecf0:	d1ec      	bne.n	800eccc <__ieee754_pow+0xdc>
 800ecf2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800ecf6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800ecfa:	431a      	orrs	r2, r3
 800ecfc:	f000 8479 	beq.w	800f5f2 <__ieee754_pow+0xa02>
 800ed00:	4b61      	ldr	r3, [pc, #388]	@ (800ee88 <__ieee754_pow+0x298>)
 800ed02:	4598      	cmp	r8, r3
 800ed04:	d908      	bls.n	800ed18 <__ieee754_pow+0x128>
 800ed06:	f1b9 0f00 	cmp.w	r9, #0
 800ed0a:	f2c0 8476 	blt.w	800f5fa <__ieee754_pow+0xa0a>
 800ed0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed12:	e78a      	b.n	800ec2a <__ieee754_pow+0x3a>
 800ed14:	2402      	movs	r4, #2
 800ed16:	e7e8      	b.n	800ecea <__ieee754_pow+0xfa>
 800ed18:	f1b9 0f00 	cmp.w	r9, #0
 800ed1c:	f04f 0000 	mov.w	r0, #0
 800ed20:	f04f 0100 	mov.w	r1, #0
 800ed24:	da81      	bge.n	800ec2a <__ieee754_pow+0x3a>
 800ed26:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ed2a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800ed2e:	e77c      	b.n	800ec2a <__ieee754_pow+0x3a>
 800ed30:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800ed34:	d106      	bne.n	800ed44 <__ieee754_pow+0x154>
 800ed36:	4632      	mov	r2, r6
 800ed38:	463b      	mov	r3, r7
 800ed3a:	4630      	mov	r0, r6
 800ed3c:	4639      	mov	r1, r7
 800ed3e:	f7f1 fcab 	bl	8000698 <__aeabi_dmul>
 800ed42:	e772      	b.n	800ec2a <__ieee754_pow+0x3a>
 800ed44:	4a51      	ldr	r2, [pc, #324]	@ (800ee8c <__ieee754_pow+0x29c>)
 800ed46:	4591      	cmp	r9, r2
 800ed48:	d109      	bne.n	800ed5e <__ieee754_pow+0x16e>
 800ed4a:	2d00      	cmp	r5, #0
 800ed4c:	db07      	blt.n	800ed5e <__ieee754_pow+0x16e>
 800ed4e:	ec47 6b10 	vmov	d0, r6, r7
 800ed52:	b011      	add	sp, #68	@ 0x44
 800ed54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed58:	f000 bd52 	b.w	800f800 <__ieee754_sqrt>
 800ed5c:	2400      	movs	r4, #0
 800ed5e:	ec47 6b10 	vmov	d0, r6, r7
 800ed62:	9302      	str	r3, [sp, #8]
 800ed64:	f000 fc88 	bl	800f678 <fabs>
 800ed68:	9b02      	ldr	r3, [sp, #8]
 800ed6a:	ec51 0b10 	vmov	r0, r1, d0
 800ed6e:	bb53      	cbnz	r3, 800edc6 <__ieee754_pow+0x1d6>
 800ed70:	4b44      	ldr	r3, [pc, #272]	@ (800ee84 <__ieee754_pow+0x294>)
 800ed72:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d002      	beq.n	800ed80 <__ieee754_pow+0x190>
 800ed7a:	f1b8 0f00 	cmp.w	r8, #0
 800ed7e:	d122      	bne.n	800edc6 <__ieee754_pow+0x1d6>
 800ed80:	f1b9 0f00 	cmp.w	r9, #0
 800ed84:	da05      	bge.n	800ed92 <__ieee754_pow+0x1a2>
 800ed86:	4602      	mov	r2, r0
 800ed88:	460b      	mov	r3, r1
 800ed8a:	2000      	movs	r0, #0
 800ed8c:	493d      	ldr	r1, [pc, #244]	@ (800ee84 <__ieee754_pow+0x294>)
 800ed8e:	f7f1 fdad 	bl	80008ec <__aeabi_ddiv>
 800ed92:	2d00      	cmp	r5, #0
 800ed94:	f6bf af49 	bge.w	800ec2a <__ieee754_pow+0x3a>
 800ed98:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800ed9c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800eda0:	ea58 0804 	orrs.w	r8, r8, r4
 800eda4:	d108      	bne.n	800edb8 <__ieee754_pow+0x1c8>
 800eda6:	4602      	mov	r2, r0
 800eda8:	460b      	mov	r3, r1
 800edaa:	4610      	mov	r0, r2
 800edac:	4619      	mov	r1, r3
 800edae:	f7f1 fabb 	bl	8000328 <__aeabi_dsub>
 800edb2:	4602      	mov	r2, r0
 800edb4:	460b      	mov	r3, r1
 800edb6:	e794      	b.n	800ece2 <__ieee754_pow+0xf2>
 800edb8:	2c01      	cmp	r4, #1
 800edba:	f47f af36 	bne.w	800ec2a <__ieee754_pow+0x3a>
 800edbe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800edc2:	4619      	mov	r1, r3
 800edc4:	e731      	b.n	800ec2a <__ieee754_pow+0x3a>
 800edc6:	0feb      	lsrs	r3, r5, #31
 800edc8:	3b01      	subs	r3, #1
 800edca:	ea53 0204 	orrs.w	r2, r3, r4
 800edce:	d102      	bne.n	800edd6 <__ieee754_pow+0x1e6>
 800edd0:	4632      	mov	r2, r6
 800edd2:	463b      	mov	r3, r7
 800edd4:	e7e9      	b.n	800edaa <__ieee754_pow+0x1ba>
 800edd6:	3c01      	subs	r4, #1
 800edd8:	431c      	orrs	r4, r3
 800edda:	d016      	beq.n	800ee0a <__ieee754_pow+0x21a>
 800eddc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800ee68 <__ieee754_pow+0x278>
 800ede0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800ede4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ede8:	f240 8112 	bls.w	800f010 <__ieee754_pow+0x420>
 800edec:	4b28      	ldr	r3, [pc, #160]	@ (800ee90 <__ieee754_pow+0x2a0>)
 800edee:	459a      	cmp	sl, r3
 800edf0:	4b25      	ldr	r3, [pc, #148]	@ (800ee88 <__ieee754_pow+0x298>)
 800edf2:	d916      	bls.n	800ee22 <__ieee754_pow+0x232>
 800edf4:	4598      	cmp	r8, r3
 800edf6:	d80b      	bhi.n	800ee10 <__ieee754_pow+0x220>
 800edf8:	f1b9 0f00 	cmp.w	r9, #0
 800edfc:	da0b      	bge.n	800ee16 <__ieee754_pow+0x226>
 800edfe:	2000      	movs	r0, #0
 800ee00:	b011      	add	sp, #68	@ 0x44
 800ee02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee06:	f000 bcf3 	b.w	800f7f0 <__math_oflow>
 800ee0a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800ee70 <__ieee754_pow+0x280>
 800ee0e:	e7e7      	b.n	800ede0 <__ieee754_pow+0x1f0>
 800ee10:	f1b9 0f00 	cmp.w	r9, #0
 800ee14:	dcf3      	bgt.n	800edfe <__ieee754_pow+0x20e>
 800ee16:	2000      	movs	r0, #0
 800ee18:	b011      	add	sp, #68	@ 0x44
 800ee1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ee1e:	f000 bcdf 	b.w	800f7e0 <__math_uflow>
 800ee22:	4598      	cmp	r8, r3
 800ee24:	d20c      	bcs.n	800ee40 <__ieee754_pow+0x250>
 800ee26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	f7f1 fea5 	bl	8000b7c <__aeabi_dcmplt>
 800ee32:	3800      	subs	r0, #0
 800ee34:	bf18      	it	ne
 800ee36:	2001      	movne	r0, #1
 800ee38:	f1b9 0f00 	cmp.w	r9, #0
 800ee3c:	daec      	bge.n	800ee18 <__ieee754_pow+0x228>
 800ee3e:	e7df      	b.n	800ee00 <__ieee754_pow+0x210>
 800ee40:	4b10      	ldr	r3, [pc, #64]	@ (800ee84 <__ieee754_pow+0x294>)
 800ee42:	4598      	cmp	r8, r3
 800ee44:	f04f 0200 	mov.w	r2, #0
 800ee48:	d924      	bls.n	800ee94 <__ieee754_pow+0x2a4>
 800ee4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ee4e:	2300      	movs	r3, #0
 800ee50:	f7f1 fe94 	bl	8000b7c <__aeabi_dcmplt>
 800ee54:	3800      	subs	r0, #0
 800ee56:	bf18      	it	ne
 800ee58:	2001      	movne	r0, #1
 800ee5a:	f1b9 0f00 	cmp.w	r9, #0
 800ee5e:	dccf      	bgt.n	800ee00 <__ieee754_pow+0x210>
 800ee60:	e7da      	b.n	800ee18 <__ieee754_pow+0x228>
 800ee62:	bf00      	nop
 800ee64:	f3af 8000 	nop.w
 800ee68:	00000000 	.word	0x00000000
 800ee6c:	3ff00000 	.word	0x3ff00000
 800ee70:	00000000 	.word	0x00000000
 800ee74:	bff00000 	.word	0xbff00000
 800ee78:	fff00000 	.word	0xfff00000
 800ee7c:	7ff00000 	.word	0x7ff00000
 800ee80:	433fffff 	.word	0x433fffff
 800ee84:	3ff00000 	.word	0x3ff00000
 800ee88:	3fefffff 	.word	0x3fefffff
 800ee8c:	3fe00000 	.word	0x3fe00000
 800ee90:	43f00000 	.word	0x43f00000
 800ee94:	4b5a      	ldr	r3, [pc, #360]	@ (800f000 <__ieee754_pow+0x410>)
 800ee96:	f7f1 fa47 	bl	8000328 <__aeabi_dsub>
 800ee9a:	a351      	add	r3, pc, #324	@ (adr r3, 800efe0 <__ieee754_pow+0x3f0>)
 800ee9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eea0:	4604      	mov	r4, r0
 800eea2:	460d      	mov	r5, r1
 800eea4:	f7f1 fbf8 	bl	8000698 <__aeabi_dmul>
 800eea8:	a34f      	add	r3, pc, #316	@ (adr r3, 800efe8 <__ieee754_pow+0x3f8>)
 800eeaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeae:	4606      	mov	r6, r0
 800eeb0:	460f      	mov	r7, r1
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	4629      	mov	r1, r5
 800eeb6:	f7f1 fbef 	bl	8000698 <__aeabi_dmul>
 800eeba:	4b52      	ldr	r3, [pc, #328]	@ (800f004 <__ieee754_pow+0x414>)
 800eebc:	4682      	mov	sl, r0
 800eebe:	468b      	mov	fp, r1
 800eec0:	2200      	movs	r2, #0
 800eec2:	4620      	mov	r0, r4
 800eec4:	4629      	mov	r1, r5
 800eec6:	f7f1 fbe7 	bl	8000698 <__aeabi_dmul>
 800eeca:	4602      	mov	r2, r0
 800eecc:	460b      	mov	r3, r1
 800eece:	a148      	add	r1, pc, #288	@ (adr r1, 800eff0 <__ieee754_pow+0x400>)
 800eed0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800eed4:	f7f1 fa28 	bl	8000328 <__aeabi_dsub>
 800eed8:	4622      	mov	r2, r4
 800eeda:	462b      	mov	r3, r5
 800eedc:	f7f1 fbdc 	bl	8000698 <__aeabi_dmul>
 800eee0:	4602      	mov	r2, r0
 800eee2:	460b      	mov	r3, r1
 800eee4:	2000      	movs	r0, #0
 800eee6:	4948      	ldr	r1, [pc, #288]	@ (800f008 <__ieee754_pow+0x418>)
 800eee8:	f7f1 fa1e 	bl	8000328 <__aeabi_dsub>
 800eeec:	4622      	mov	r2, r4
 800eeee:	4680      	mov	r8, r0
 800eef0:	4689      	mov	r9, r1
 800eef2:	462b      	mov	r3, r5
 800eef4:	4620      	mov	r0, r4
 800eef6:	4629      	mov	r1, r5
 800eef8:	f7f1 fbce 	bl	8000698 <__aeabi_dmul>
 800eefc:	4602      	mov	r2, r0
 800eefe:	460b      	mov	r3, r1
 800ef00:	4640      	mov	r0, r8
 800ef02:	4649      	mov	r1, r9
 800ef04:	f7f1 fbc8 	bl	8000698 <__aeabi_dmul>
 800ef08:	a33b      	add	r3, pc, #236	@ (adr r3, 800eff8 <__ieee754_pow+0x408>)
 800ef0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0e:	f7f1 fbc3 	bl	8000698 <__aeabi_dmul>
 800ef12:	4602      	mov	r2, r0
 800ef14:	460b      	mov	r3, r1
 800ef16:	4650      	mov	r0, sl
 800ef18:	4659      	mov	r1, fp
 800ef1a:	f7f1 fa05 	bl	8000328 <__aeabi_dsub>
 800ef1e:	4602      	mov	r2, r0
 800ef20:	460b      	mov	r3, r1
 800ef22:	4680      	mov	r8, r0
 800ef24:	4689      	mov	r9, r1
 800ef26:	4630      	mov	r0, r6
 800ef28:	4639      	mov	r1, r7
 800ef2a:	f7f1 f9ff 	bl	800032c <__adddf3>
 800ef2e:	2400      	movs	r4, #0
 800ef30:	4632      	mov	r2, r6
 800ef32:	463b      	mov	r3, r7
 800ef34:	4620      	mov	r0, r4
 800ef36:	460d      	mov	r5, r1
 800ef38:	f7f1 f9f6 	bl	8000328 <__aeabi_dsub>
 800ef3c:	4602      	mov	r2, r0
 800ef3e:	460b      	mov	r3, r1
 800ef40:	4640      	mov	r0, r8
 800ef42:	4649      	mov	r1, r9
 800ef44:	f7f1 f9f0 	bl	8000328 <__aeabi_dsub>
 800ef48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ef50:	2300      	movs	r3, #0
 800ef52:	9304      	str	r3, [sp, #16]
 800ef54:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ef58:	4606      	mov	r6, r0
 800ef5a:	460f      	mov	r7, r1
 800ef5c:	4652      	mov	r2, sl
 800ef5e:	465b      	mov	r3, fp
 800ef60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef64:	f7f1 f9e0 	bl	8000328 <__aeabi_dsub>
 800ef68:	4622      	mov	r2, r4
 800ef6a:	462b      	mov	r3, r5
 800ef6c:	f7f1 fb94 	bl	8000698 <__aeabi_dmul>
 800ef70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef74:	4680      	mov	r8, r0
 800ef76:	4689      	mov	r9, r1
 800ef78:	4630      	mov	r0, r6
 800ef7a:	4639      	mov	r1, r7
 800ef7c:	f7f1 fb8c 	bl	8000698 <__aeabi_dmul>
 800ef80:	4602      	mov	r2, r0
 800ef82:	460b      	mov	r3, r1
 800ef84:	4640      	mov	r0, r8
 800ef86:	4649      	mov	r1, r9
 800ef88:	f7f1 f9d0 	bl	800032c <__adddf3>
 800ef8c:	4652      	mov	r2, sl
 800ef8e:	465b      	mov	r3, fp
 800ef90:	4606      	mov	r6, r0
 800ef92:	460f      	mov	r7, r1
 800ef94:	4620      	mov	r0, r4
 800ef96:	4629      	mov	r1, r5
 800ef98:	f7f1 fb7e 	bl	8000698 <__aeabi_dmul>
 800ef9c:	460b      	mov	r3, r1
 800ef9e:	4602      	mov	r2, r0
 800efa0:	4680      	mov	r8, r0
 800efa2:	4689      	mov	r9, r1
 800efa4:	4630      	mov	r0, r6
 800efa6:	4639      	mov	r1, r7
 800efa8:	f7f1 f9c0 	bl	800032c <__adddf3>
 800efac:	4b17      	ldr	r3, [pc, #92]	@ (800f00c <__ieee754_pow+0x41c>)
 800efae:	4299      	cmp	r1, r3
 800efb0:	4604      	mov	r4, r0
 800efb2:	460d      	mov	r5, r1
 800efb4:	468a      	mov	sl, r1
 800efb6:	468b      	mov	fp, r1
 800efb8:	f340 82ef 	ble.w	800f59a <__ieee754_pow+0x9aa>
 800efbc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800efc0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800efc4:	4303      	orrs	r3, r0
 800efc6:	f000 81e8 	beq.w	800f39a <__ieee754_pow+0x7aa>
 800efca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800efce:	2200      	movs	r2, #0
 800efd0:	2300      	movs	r3, #0
 800efd2:	f7f1 fdd3 	bl	8000b7c <__aeabi_dcmplt>
 800efd6:	3800      	subs	r0, #0
 800efd8:	bf18      	it	ne
 800efda:	2001      	movne	r0, #1
 800efdc:	e710      	b.n	800ee00 <__ieee754_pow+0x210>
 800efde:	bf00      	nop
 800efe0:	60000000 	.word	0x60000000
 800efe4:	3ff71547 	.word	0x3ff71547
 800efe8:	f85ddf44 	.word	0xf85ddf44
 800efec:	3e54ae0b 	.word	0x3e54ae0b
 800eff0:	55555555 	.word	0x55555555
 800eff4:	3fd55555 	.word	0x3fd55555
 800eff8:	652b82fe 	.word	0x652b82fe
 800effc:	3ff71547 	.word	0x3ff71547
 800f000:	3ff00000 	.word	0x3ff00000
 800f004:	3fd00000 	.word	0x3fd00000
 800f008:	3fe00000 	.word	0x3fe00000
 800f00c:	408fffff 	.word	0x408fffff
 800f010:	4bd5      	ldr	r3, [pc, #852]	@ (800f368 <__ieee754_pow+0x778>)
 800f012:	402b      	ands	r3, r5
 800f014:	2200      	movs	r2, #0
 800f016:	b92b      	cbnz	r3, 800f024 <__ieee754_pow+0x434>
 800f018:	4bd4      	ldr	r3, [pc, #848]	@ (800f36c <__ieee754_pow+0x77c>)
 800f01a:	f7f1 fb3d 	bl	8000698 <__aeabi_dmul>
 800f01e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800f022:	468b      	mov	fp, r1
 800f024:	ea4f 532b 	mov.w	r3, fp, asr #20
 800f028:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800f02c:	4413      	add	r3, r2
 800f02e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f030:	4bcf      	ldr	r3, [pc, #828]	@ (800f370 <__ieee754_pow+0x780>)
 800f032:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800f036:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800f03a:	459b      	cmp	fp, r3
 800f03c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800f040:	dd08      	ble.n	800f054 <__ieee754_pow+0x464>
 800f042:	4bcc      	ldr	r3, [pc, #816]	@ (800f374 <__ieee754_pow+0x784>)
 800f044:	459b      	cmp	fp, r3
 800f046:	f340 81a5 	ble.w	800f394 <__ieee754_pow+0x7a4>
 800f04a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800f04c:	3301      	adds	r3, #1
 800f04e:	930a      	str	r3, [sp, #40]	@ 0x28
 800f050:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800f054:	f04f 0a00 	mov.w	sl, #0
 800f058:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800f05c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800f05e:	4bc6      	ldr	r3, [pc, #792]	@ (800f378 <__ieee754_pow+0x788>)
 800f060:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800f064:	ed93 7b00 	vldr	d7, [r3]
 800f068:	4629      	mov	r1, r5
 800f06a:	ec53 2b17 	vmov	r2, r3, d7
 800f06e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800f072:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f076:	f7f1 f957 	bl	8000328 <__aeabi_dsub>
 800f07a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f07e:	4606      	mov	r6, r0
 800f080:	460f      	mov	r7, r1
 800f082:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f086:	f7f1 f951 	bl	800032c <__adddf3>
 800f08a:	4602      	mov	r2, r0
 800f08c:	460b      	mov	r3, r1
 800f08e:	2000      	movs	r0, #0
 800f090:	49ba      	ldr	r1, [pc, #744]	@ (800f37c <__ieee754_pow+0x78c>)
 800f092:	f7f1 fc2b 	bl	80008ec <__aeabi_ddiv>
 800f096:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800f09a:	4602      	mov	r2, r0
 800f09c:	460b      	mov	r3, r1
 800f09e:	4630      	mov	r0, r6
 800f0a0:	4639      	mov	r1, r7
 800f0a2:	f7f1 faf9 	bl	8000698 <__aeabi_dmul>
 800f0a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f0aa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800f0ae:	106d      	asrs	r5, r5, #1
 800f0b0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800f0b4:	f04f 0b00 	mov.w	fp, #0
 800f0b8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800f0bc:	4661      	mov	r1, ip
 800f0be:	2200      	movs	r2, #0
 800f0c0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800f0c4:	4658      	mov	r0, fp
 800f0c6:	46e1      	mov	r9, ip
 800f0c8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800f0cc:	4614      	mov	r4, r2
 800f0ce:	461d      	mov	r5, r3
 800f0d0:	f7f1 fae2 	bl	8000698 <__aeabi_dmul>
 800f0d4:	4602      	mov	r2, r0
 800f0d6:	460b      	mov	r3, r1
 800f0d8:	4630      	mov	r0, r6
 800f0da:	4639      	mov	r1, r7
 800f0dc:	f7f1 f924 	bl	8000328 <__aeabi_dsub>
 800f0e0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f0e4:	4606      	mov	r6, r0
 800f0e6:	460f      	mov	r7, r1
 800f0e8:	4620      	mov	r0, r4
 800f0ea:	4629      	mov	r1, r5
 800f0ec:	f7f1 f91c 	bl	8000328 <__aeabi_dsub>
 800f0f0:	4602      	mov	r2, r0
 800f0f2:	460b      	mov	r3, r1
 800f0f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f0f8:	f7f1 f916 	bl	8000328 <__aeabi_dsub>
 800f0fc:	465a      	mov	r2, fp
 800f0fe:	464b      	mov	r3, r9
 800f100:	f7f1 faca 	bl	8000698 <__aeabi_dmul>
 800f104:	4602      	mov	r2, r0
 800f106:	460b      	mov	r3, r1
 800f108:	4630      	mov	r0, r6
 800f10a:	4639      	mov	r1, r7
 800f10c:	f7f1 f90c 	bl	8000328 <__aeabi_dsub>
 800f110:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800f114:	f7f1 fac0 	bl	8000698 <__aeabi_dmul>
 800f118:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f11c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f120:	4610      	mov	r0, r2
 800f122:	4619      	mov	r1, r3
 800f124:	f7f1 fab8 	bl	8000698 <__aeabi_dmul>
 800f128:	a37d      	add	r3, pc, #500	@ (adr r3, 800f320 <__ieee754_pow+0x730>)
 800f12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f12e:	4604      	mov	r4, r0
 800f130:	460d      	mov	r5, r1
 800f132:	f7f1 fab1 	bl	8000698 <__aeabi_dmul>
 800f136:	a37c      	add	r3, pc, #496	@ (adr r3, 800f328 <__ieee754_pow+0x738>)
 800f138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f13c:	f7f1 f8f6 	bl	800032c <__adddf3>
 800f140:	4622      	mov	r2, r4
 800f142:	462b      	mov	r3, r5
 800f144:	f7f1 faa8 	bl	8000698 <__aeabi_dmul>
 800f148:	a379      	add	r3, pc, #484	@ (adr r3, 800f330 <__ieee754_pow+0x740>)
 800f14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f14e:	f7f1 f8ed 	bl	800032c <__adddf3>
 800f152:	4622      	mov	r2, r4
 800f154:	462b      	mov	r3, r5
 800f156:	f7f1 fa9f 	bl	8000698 <__aeabi_dmul>
 800f15a:	a377      	add	r3, pc, #476	@ (adr r3, 800f338 <__ieee754_pow+0x748>)
 800f15c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f160:	f7f1 f8e4 	bl	800032c <__adddf3>
 800f164:	4622      	mov	r2, r4
 800f166:	462b      	mov	r3, r5
 800f168:	f7f1 fa96 	bl	8000698 <__aeabi_dmul>
 800f16c:	a374      	add	r3, pc, #464	@ (adr r3, 800f340 <__ieee754_pow+0x750>)
 800f16e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f172:	f7f1 f8db 	bl	800032c <__adddf3>
 800f176:	4622      	mov	r2, r4
 800f178:	462b      	mov	r3, r5
 800f17a:	f7f1 fa8d 	bl	8000698 <__aeabi_dmul>
 800f17e:	a372      	add	r3, pc, #456	@ (adr r3, 800f348 <__ieee754_pow+0x758>)
 800f180:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f184:	f7f1 f8d2 	bl	800032c <__adddf3>
 800f188:	4622      	mov	r2, r4
 800f18a:	4606      	mov	r6, r0
 800f18c:	460f      	mov	r7, r1
 800f18e:	462b      	mov	r3, r5
 800f190:	4620      	mov	r0, r4
 800f192:	4629      	mov	r1, r5
 800f194:	f7f1 fa80 	bl	8000698 <__aeabi_dmul>
 800f198:	4602      	mov	r2, r0
 800f19a:	460b      	mov	r3, r1
 800f19c:	4630      	mov	r0, r6
 800f19e:	4639      	mov	r1, r7
 800f1a0:	f7f1 fa7a 	bl	8000698 <__aeabi_dmul>
 800f1a4:	465a      	mov	r2, fp
 800f1a6:	4604      	mov	r4, r0
 800f1a8:	460d      	mov	r5, r1
 800f1aa:	464b      	mov	r3, r9
 800f1ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f1b0:	f7f1 f8bc 	bl	800032c <__adddf3>
 800f1b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f1b8:	f7f1 fa6e 	bl	8000698 <__aeabi_dmul>
 800f1bc:	4622      	mov	r2, r4
 800f1be:	462b      	mov	r3, r5
 800f1c0:	f7f1 f8b4 	bl	800032c <__adddf3>
 800f1c4:	465a      	mov	r2, fp
 800f1c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f1ca:	464b      	mov	r3, r9
 800f1cc:	4658      	mov	r0, fp
 800f1ce:	4649      	mov	r1, r9
 800f1d0:	f7f1 fa62 	bl	8000698 <__aeabi_dmul>
 800f1d4:	4b6a      	ldr	r3, [pc, #424]	@ (800f380 <__ieee754_pow+0x790>)
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	4606      	mov	r6, r0
 800f1da:	460f      	mov	r7, r1
 800f1dc:	f7f1 f8a6 	bl	800032c <__adddf3>
 800f1e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800f1e4:	f7f1 f8a2 	bl	800032c <__adddf3>
 800f1e8:	46d8      	mov	r8, fp
 800f1ea:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800f1ee:	460d      	mov	r5, r1
 800f1f0:	465a      	mov	r2, fp
 800f1f2:	460b      	mov	r3, r1
 800f1f4:	4640      	mov	r0, r8
 800f1f6:	4649      	mov	r1, r9
 800f1f8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800f1fc:	f7f1 fa4c 	bl	8000698 <__aeabi_dmul>
 800f200:	465c      	mov	r4, fp
 800f202:	4680      	mov	r8, r0
 800f204:	4689      	mov	r9, r1
 800f206:	4b5e      	ldr	r3, [pc, #376]	@ (800f380 <__ieee754_pow+0x790>)
 800f208:	2200      	movs	r2, #0
 800f20a:	4620      	mov	r0, r4
 800f20c:	4629      	mov	r1, r5
 800f20e:	f7f1 f88b 	bl	8000328 <__aeabi_dsub>
 800f212:	4632      	mov	r2, r6
 800f214:	463b      	mov	r3, r7
 800f216:	f7f1 f887 	bl	8000328 <__aeabi_dsub>
 800f21a:	4602      	mov	r2, r0
 800f21c:	460b      	mov	r3, r1
 800f21e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f222:	f7f1 f881 	bl	8000328 <__aeabi_dsub>
 800f226:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f22a:	f7f1 fa35 	bl	8000698 <__aeabi_dmul>
 800f22e:	4622      	mov	r2, r4
 800f230:	4606      	mov	r6, r0
 800f232:	460f      	mov	r7, r1
 800f234:	462b      	mov	r3, r5
 800f236:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f23a:	f7f1 fa2d 	bl	8000698 <__aeabi_dmul>
 800f23e:	4602      	mov	r2, r0
 800f240:	460b      	mov	r3, r1
 800f242:	4630      	mov	r0, r6
 800f244:	4639      	mov	r1, r7
 800f246:	f7f1 f871 	bl	800032c <__adddf3>
 800f24a:	4606      	mov	r6, r0
 800f24c:	460f      	mov	r7, r1
 800f24e:	4602      	mov	r2, r0
 800f250:	460b      	mov	r3, r1
 800f252:	4640      	mov	r0, r8
 800f254:	4649      	mov	r1, r9
 800f256:	f7f1 f869 	bl	800032c <__adddf3>
 800f25a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800f25e:	a33c      	add	r3, pc, #240	@ (adr r3, 800f350 <__ieee754_pow+0x760>)
 800f260:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f264:	4658      	mov	r0, fp
 800f266:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800f26a:	460d      	mov	r5, r1
 800f26c:	f7f1 fa14 	bl	8000698 <__aeabi_dmul>
 800f270:	465c      	mov	r4, fp
 800f272:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f276:	4642      	mov	r2, r8
 800f278:	464b      	mov	r3, r9
 800f27a:	4620      	mov	r0, r4
 800f27c:	4629      	mov	r1, r5
 800f27e:	f7f1 f853 	bl	8000328 <__aeabi_dsub>
 800f282:	4602      	mov	r2, r0
 800f284:	460b      	mov	r3, r1
 800f286:	4630      	mov	r0, r6
 800f288:	4639      	mov	r1, r7
 800f28a:	f7f1 f84d 	bl	8000328 <__aeabi_dsub>
 800f28e:	a332      	add	r3, pc, #200	@ (adr r3, 800f358 <__ieee754_pow+0x768>)
 800f290:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f294:	f7f1 fa00 	bl	8000698 <__aeabi_dmul>
 800f298:	a331      	add	r3, pc, #196	@ (adr r3, 800f360 <__ieee754_pow+0x770>)
 800f29a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f29e:	4606      	mov	r6, r0
 800f2a0:	460f      	mov	r7, r1
 800f2a2:	4620      	mov	r0, r4
 800f2a4:	4629      	mov	r1, r5
 800f2a6:	f7f1 f9f7 	bl	8000698 <__aeabi_dmul>
 800f2aa:	4602      	mov	r2, r0
 800f2ac:	460b      	mov	r3, r1
 800f2ae:	4630      	mov	r0, r6
 800f2b0:	4639      	mov	r1, r7
 800f2b2:	f7f1 f83b 	bl	800032c <__adddf3>
 800f2b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f2b8:	4b32      	ldr	r3, [pc, #200]	@ (800f384 <__ieee754_pow+0x794>)
 800f2ba:	4413      	add	r3, r2
 800f2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c0:	f7f1 f834 	bl	800032c <__adddf3>
 800f2c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f2c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f2ca:	f7f1 f97b 	bl	80005c4 <__aeabi_i2d>
 800f2ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f2d0:	4b2d      	ldr	r3, [pc, #180]	@ (800f388 <__ieee754_pow+0x798>)
 800f2d2:	4413      	add	r3, r2
 800f2d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f2d8:	4606      	mov	r6, r0
 800f2da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f2de:	460f      	mov	r7, r1
 800f2e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f2e4:	f7f1 f822 	bl	800032c <__adddf3>
 800f2e8:	4642      	mov	r2, r8
 800f2ea:	464b      	mov	r3, r9
 800f2ec:	f7f1 f81e 	bl	800032c <__adddf3>
 800f2f0:	4632      	mov	r2, r6
 800f2f2:	463b      	mov	r3, r7
 800f2f4:	f7f1 f81a 	bl	800032c <__adddf3>
 800f2f8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800f2fc:	4632      	mov	r2, r6
 800f2fe:	463b      	mov	r3, r7
 800f300:	4658      	mov	r0, fp
 800f302:	460d      	mov	r5, r1
 800f304:	f7f1 f810 	bl	8000328 <__aeabi_dsub>
 800f308:	4642      	mov	r2, r8
 800f30a:	464b      	mov	r3, r9
 800f30c:	f7f1 f80c 	bl	8000328 <__aeabi_dsub>
 800f310:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f314:	f7f1 f808 	bl	8000328 <__aeabi_dsub>
 800f318:	465c      	mov	r4, fp
 800f31a:	4602      	mov	r2, r0
 800f31c:	e036      	b.n	800f38c <__ieee754_pow+0x79c>
 800f31e:	bf00      	nop
 800f320:	4a454eef 	.word	0x4a454eef
 800f324:	3fca7e28 	.word	0x3fca7e28
 800f328:	93c9db65 	.word	0x93c9db65
 800f32c:	3fcd864a 	.word	0x3fcd864a
 800f330:	a91d4101 	.word	0xa91d4101
 800f334:	3fd17460 	.word	0x3fd17460
 800f338:	518f264d 	.word	0x518f264d
 800f33c:	3fd55555 	.word	0x3fd55555
 800f340:	db6fabff 	.word	0xdb6fabff
 800f344:	3fdb6db6 	.word	0x3fdb6db6
 800f348:	33333303 	.word	0x33333303
 800f34c:	3fe33333 	.word	0x3fe33333
 800f350:	e0000000 	.word	0xe0000000
 800f354:	3feec709 	.word	0x3feec709
 800f358:	dc3a03fd 	.word	0xdc3a03fd
 800f35c:	3feec709 	.word	0x3feec709
 800f360:	145b01f5 	.word	0x145b01f5
 800f364:	be3e2fe0 	.word	0xbe3e2fe0
 800f368:	7ff00000 	.word	0x7ff00000
 800f36c:	43400000 	.word	0x43400000
 800f370:	0003988e 	.word	0x0003988e
 800f374:	000bb679 	.word	0x000bb679
 800f378:	08010350 	.word	0x08010350
 800f37c:	3ff00000 	.word	0x3ff00000
 800f380:	40080000 	.word	0x40080000
 800f384:	08010330 	.word	0x08010330
 800f388:	08010340 	.word	0x08010340
 800f38c:	460b      	mov	r3, r1
 800f38e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f392:	e5d7      	b.n	800ef44 <__ieee754_pow+0x354>
 800f394:	f04f 0a01 	mov.w	sl, #1
 800f398:	e65e      	b.n	800f058 <__ieee754_pow+0x468>
 800f39a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800f66c <__ieee754_pow+0xa7c>)
 800f39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3a0:	4630      	mov	r0, r6
 800f3a2:	4639      	mov	r1, r7
 800f3a4:	f7f0 ffc2 	bl	800032c <__adddf3>
 800f3a8:	4642      	mov	r2, r8
 800f3aa:	e9cd 0100 	strd	r0, r1, [sp]
 800f3ae:	464b      	mov	r3, r9
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	4629      	mov	r1, r5
 800f3b4:	f7f0 ffb8 	bl	8000328 <__aeabi_dsub>
 800f3b8:	4602      	mov	r2, r0
 800f3ba:	460b      	mov	r3, r1
 800f3bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f3c0:	f7f1 fbfa 	bl	8000bb8 <__aeabi_dcmpgt>
 800f3c4:	2800      	cmp	r0, #0
 800f3c6:	f47f ae00 	bne.w	800efca <__ieee754_pow+0x3da>
 800f3ca:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800f3ce:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f3d2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800f3d6:	fa43 fa0a 	asr.w	sl, r3, sl
 800f3da:	44da      	add	sl, fp
 800f3dc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800f3e0:	489d      	ldr	r0, [pc, #628]	@ (800f658 <__ieee754_pow+0xa68>)
 800f3e2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800f3e6:	4108      	asrs	r0, r1
 800f3e8:	ea00 030a 	and.w	r3, r0, sl
 800f3ec:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800f3f0:	f1c1 0114 	rsb	r1, r1, #20
 800f3f4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800f3f8:	fa4a fa01 	asr.w	sl, sl, r1
 800f3fc:	f1bb 0f00 	cmp.w	fp, #0
 800f400:	4640      	mov	r0, r8
 800f402:	4649      	mov	r1, r9
 800f404:	f04f 0200 	mov.w	r2, #0
 800f408:	bfb8      	it	lt
 800f40a:	f1ca 0a00 	rsblt	sl, sl, #0
 800f40e:	f7f0 ff8b 	bl	8000328 <__aeabi_dsub>
 800f412:	4680      	mov	r8, r0
 800f414:	4689      	mov	r9, r1
 800f416:	4632      	mov	r2, r6
 800f418:	463b      	mov	r3, r7
 800f41a:	4640      	mov	r0, r8
 800f41c:	4649      	mov	r1, r9
 800f41e:	f7f0 ff85 	bl	800032c <__adddf3>
 800f422:	2400      	movs	r4, #0
 800f424:	a37c      	add	r3, pc, #496	@ (adr r3, 800f618 <__ieee754_pow+0xa28>)
 800f426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f42a:	4620      	mov	r0, r4
 800f42c:	460d      	mov	r5, r1
 800f42e:	f7f1 f933 	bl	8000698 <__aeabi_dmul>
 800f432:	4642      	mov	r2, r8
 800f434:	e9cd 0100 	strd	r0, r1, [sp]
 800f438:	464b      	mov	r3, r9
 800f43a:	4620      	mov	r0, r4
 800f43c:	4629      	mov	r1, r5
 800f43e:	f7f0 ff73 	bl	8000328 <__aeabi_dsub>
 800f442:	4602      	mov	r2, r0
 800f444:	460b      	mov	r3, r1
 800f446:	4630      	mov	r0, r6
 800f448:	4639      	mov	r1, r7
 800f44a:	f7f0 ff6d 	bl	8000328 <__aeabi_dsub>
 800f44e:	a374      	add	r3, pc, #464	@ (adr r3, 800f620 <__ieee754_pow+0xa30>)
 800f450:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f454:	f7f1 f920 	bl	8000698 <__aeabi_dmul>
 800f458:	a373      	add	r3, pc, #460	@ (adr r3, 800f628 <__ieee754_pow+0xa38>)
 800f45a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f45e:	4680      	mov	r8, r0
 800f460:	4689      	mov	r9, r1
 800f462:	4620      	mov	r0, r4
 800f464:	4629      	mov	r1, r5
 800f466:	f7f1 f917 	bl	8000698 <__aeabi_dmul>
 800f46a:	4602      	mov	r2, r0
 800f46c:	460b      	mov	r3, r1
 800f46e:	4640      	mov	r0, r8
 800f470:	4649      	mov	r1, r9
 800f472:	f7f0 ff5b 	bl	800032c <__adddf3>
 800f476:	4604      	mov	r4, r0
 800f478:	460d      	mov	r5, r1
 800f47a:	4602      	mov	r2, r0
 800f47c:	460b      	mov	r3, r1
 800f47e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f482:	f7f0 ff53 	bl	800032c <__adddf3>
 800f486:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f48a:	4680      	mov	r8, r0
 800f48c:	4689      	mov	r9, r1
 800f48e:	f7f0 ff4b 	bl	8000328 <__aeabi_dsub>
 800f492:	4602      	mov	r2, r0
 800f494:	460b      	mov	r3, r1
 800f496:	4620      	mov	r0, r4
 800f498:	4629      	mov	r1, r5
 800f49a:	f7f0 ff45 	bl	8000328 <__aeabi_dsub>
 800f49e:	4642      	mov	r2, r8
 800f4a0:	4606      	mov	r6, r0
 800f4a2:	460f      	mov	r7, r1
 800f4a4:	464b      	mov	r3, r9
 800f4a6:	4640      	mov	r0, r8
 800f4a8:	4649      	mov	r1, r9
 800f4aa:	f7f1 f8f5 	bl	8000698 <__aeabi_dmul>
 800f4ae:	a360      	add	r3, pc, #384	@ (adr r3, 800f630 <__ieee754_pow+0xa40>)
 800f4b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4b4:	4604      	mov	r4, r0
 800f4b6:	460d      	mov	r5, r1
 800f4b8:	f7f1 f8ee 	bl	8000698 <__aeabi_dmul>
 800f4bc:	a35e      	add	r3, pc, #376	@ (adr r3, 800f638 <__ieee754_pow+0xa48>)
 800f4be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4c2:	f7f0 ff31 	bl	8000328 <__aeabi_dsub>
 800f4c6:	4622      	mov	r2, r4
 800f4c8:	462b      	mov	r3, r5
 800f4ca:	f7f1 f8e5 	bl	8000698 <__aeabi_dmul>
 800f4ce:	a35c      	add	r3, pc, #368	@ (adr r3, 800f640 <__ieee754_pow+0xa50>)
 800f4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4d4:	f7f0 ff2a 	bl	800032c <__adddf3>
 800f4d8:	4622      	mov	r2, r4
 800f4da:	462b      	mov	r3, r5
 800f4dc:	f7f1 f8dc 	bl	8000698 <__aeabi_dmul>
 800f4e0:	a359      	add	r3, pc, #356	@ (adr r3, 800f648 <__ieee754_pow+0xa58>)
 800f4e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e6:	f7f0 ff1f 	bl	8000328 <__aeabi_dsub>
 800f4ea:	4622      	mov	r2, r4
 800f4ec:	462b      	mov	r3, r5
 800f4ee:	f7f1 f8d3 	bl	8000698 <__aeabi_dmul>
 800f4f2:	a357      	add	r3, pc, #348	@ (adr r3, 800f650 <__ieee754_pow+0xa60>)
 800f4f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4f8:	f7f0 ff18 	bl	800032c <__adddf3>
 800f4fc:	4622      	mov	r2, r4
 800f4fe:	462b      	mov	r3, r5
 800f500:	f7f1 f8ca 	bl	8000698 <__aeabi_dmul>
 800f504:	4602      	mov	r2, r0
 800f506:	460b      	mov	r3, r1
 800f508:	4640      	mov	r0, r8
 800f50a:	4649      	mov	r1, r9
 800f50c:	f7f0 ff0c 	bl	8000328 <__aeabi_dsub>
 800f510:	4604      	mov	r4, r0
 800f512:	460d      	mov	r5, r1
 800f514:	4602      	mov	r2, r0
 800f516:	460b      	mov	r3, r1
 800f518:	4640      	mov	r0, r8
 800f51a:	4649      	mov	r1, r9
 800f51c:	f7f1 f8bc 	bl	8000698 <__aeabi_dmul>
 800f520:	2200      	movs	r2, #0
 800f522:	e9cd 0100 	strd	r0, r1, [sp]
 800f526:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f52a:	4620      	mov	r0, r4
 800f52c:	4629      	mov	r1, r5
 800f52e:	f7f0 fefb 	bl	8000328 <__aeabi_dsub>
 800f532:	4602      	mov	r2, r0
 800f534:	460b      	mov	r3, r1
 800f536:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f53a:	f7f1 f9d7 	bl	80008ec <__aeabi_ddiv>
 800f53e:	4632      	mov	r2, r6
 800f540:	4604      	mov	r4, r0
 800f542:	460d      	mov	r5, r1
 800f544:	463b      	mov	r3, r7
 800f546:	4640      	mov	r0, r8
 800f548:	4649      	mov	r1, r9
 800f54a:	f7f1 f8a5 	bl	8000698 <__aeabi_dmul>
 800f54e:	4632      	mov	r2, r6
 800f550:	463b      	mov	r3, r7
 800f552:	f7f0 feeb 	bl	800032c <__adddf3>
 800f556:	4602      	mov	r2, r0
 800f558:	460b      	mov	r3, r1
 800f55a:	4620      	mov	r0, r4
 800f55c:	4629      	mov	r1, r5
 800f55e:	f7f0 fee3 	bl	8000328 <__aeabi_dsub>
 800f562:	4642      	mov	r2, r8
 800f564:	464b      	mov	r3, r9
 800f566:	f7f0 fedf 	bl	8000328 <__aeabi_dsub>
 800f56a:	460b      	mov	r3, r1
 800f56c:	4602      	mov	r2, r0
 800f56e:	493b      	ldr	r1, [pc, #236]	@ (800f65c <__ieee754_pow+0xa6c>)
 800f570:	2000      	movs	r0, #0
 800f572:	f7f0 fed9 	bl	8000328 <__aeabi_dsub>
 800f576:	ec41 0b10 	vmov	d0, r0, r1
 800f57a:	ee10 3a90 	vmov	r3, s1
 800f57e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f582:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f586:	da30      	bge.n	800f5ea <__ieee754_pow+0x9fa>
 800f588:	4650      	mov	r0, sl
 800f58a:	f000 f87d 	bl	800f688 <scalbn>
 800f58e:	ec51 0b10 	vmov	r0, r1, d0
 800f592:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f596:	f7ff bbd2 	b.w	800ed3e <__ieee754_pow+0x14e>
 800f59a:	4c31      	ldr	r4, [pc, #196]	@ (800f660 <__ieee754_pow+0xa70>)
 800f59c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f5a0:	42a3      	cmp	r3, r4
 800f5a2:	d91a      	bls.n	800f5da <__ieee754_pow+0x9ea>
 800f5a4:	4b2f      	ldr	r3, [pc, #188]	@ (800f664 <__ieee754_pow+0xa74>)
 800f5a6:	440b      	add	r3, r1
 800f5a8:	4303      	orrs	r3, r0
 800f5aa:	d009      	beq.n	800f5c0 <__ieee754_pow+0x9d0>
 800f5ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f5b0:	2200      	movs	r2, #0
 800f5b2:	2300      	movs	r3, #0
 800f5b4:	f7f1 fae2 	bl	8000b7c <__aeabi_dcmplt>
 800f5b8:	3800      	subs	r0, #0
 800f5ba:	bf18      	it	ne
 800f5bc:	2001      	movne	r0, #1
 800f5be:	e42b      	b.n	800ee18 <__ieee754_pow+0x228>
 800f5c0:	4642      	mov	r2, r8
 800f5c2:	464b      	mov	r3, r9
 800f5c4:	f7f0 feb0 	bl	8000328 <__aeabi_dsub>
 800f5c8:	4632      	mov	r2, r6
 800f5ca:	463b      	mov	r3, r7
 800f5cc:	f7f1 faea 	bl	8000ba4 <__aeabi_dcmpge>
 800f5d0:	2800      	cmp	r0, #0
 800f5d2:	d1eb      	bne.n	800f5ac <__ieee754_pow+0x9bc>
 800f5d4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800f674 <__ieee754_pow+0xa84>
 800f5d8:	e6f7      	b.n	800f3ca <__ieee754_pow+0x7da>
 800f5da:	469a      	mov	sl, r3
 800f5dc:	4b22      	ldr	r3, [pc, #136]	@ (800f668 <__ieee754_pow+0xa78>)
 800f5de:	459a      	cmp	sl, r3
 800f5e0:	f63f aef3 	bhi.w	800f3ca <__ieee754_pow+0x7da>
 800f5e4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f5e8:	e715      	b.n	800f416 <__ieee754_pow+0x826>
 800f5ea:	ec51 0b10 	vmov	r0, r1, d0
 800f5ee:	4619      	mov	r1, r3
 800f5f0:	e7cf      	b.n	800f592 <__ieee754_pow+0x9a2>
 800f5f2:	491a      	ldr	r1, [pc, #104]	@ (800f65c <__ieee754_pow+0xa6c>)
 800f5f4:	2000      	movs	r0, #0
 800f5f6:	f7ff bb18 	b.w	800ec2a <__ieee754_pow+0x3a>
 800f5fa:	2000      	movs	r0, #0
 800f5fc:	2100      	movs	r1, #0
 800f5fe:	f7ff bb14 	b.w	800ec2a <__ieee754_pow+0x3a>
 800f602:	4630      	mov	r0, r6
 800f604:	4639      	mov	r1, r7
 800f606:	f7ff bb10 	b.w	800ec2a <__ieee754_pow+0x3a>
 800f60a:	460c      	mov	r4, r1
 800f60c:	f7ff bb5e 	b.w	800eccc <__ieee754_pow+0xdc>
 800f610:	2400      	movs	r4, #0
 800f612:	f7ff bb49 	b.w	800eca8 <__ieee754_pow+0xb8>
 800f616:	bf00      	nop
 800f618:	00000000 	.word	0x00000000
 800f61c:	3fe62e43 	.word	0x3fe62e43
 800f620:	fefa39ef 	.word	0xfefa39ef
 800f624:	3fe62e42 	.word	0x3fe62e42
 800f628:	0ca86c39 	.word	0x0ca86c39
 800f62c:	be205c61 	.word	0xbe205c61
 800f630:	72bea4d0 	.word	0x72bea4d0
 800f634:	3e663769 	.word	0x3e663769
 800f638:	c5d26bf1 	.word	0xc5d26bf1
 800f63c:	3ebbbd41 	.word	0x3ebbbd41
 800f640:	af25de2c 	.word	0xaf25de2c
 800f644:	3f11566a 	.word	0x3f11566a
 800f648:	16bebd93 	.word	0x16bebd93
 800f64c:	3f66c16c 	.word	0x3f66c16c
 800f650:	5555553e 	.word	0x5555553e
 800f654:	3fc55555 	.word	0x3fc55555
 800f658:	fff00000 	.word	0xfff00000
 800f65c:	3ff00000 	.word	0x3ff00000
 800f660:	4090cbff 	.word	0x4090cbff
 800f664:	3f6f3400 	.word	0x3f6f3400
 800f668:	3fe00000 	.word	0x3fe00000
 800f66c:	652b82fe 	.word	0x652b82fe
 800f670:	3c971547 	.word	0x3c971547
 800f674:	4090cc00 	.word	0x4090cc00

0800f678 <fabs>:
 800f678:	ec51 0b10 	vmov	r0, r1, d0
 800f67c:	4602      	mov	r2, r0
 800f67e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f682:	ec43 2b10 	vmov	d0, r2, r3
 800f686:	4770      	bx	lr

0800f688 <scalbn>:
 800f688:	b570      	push	{r4, r5, r6, lr}
 800f68a:	ec55 4b10 	vmov	r4, r5, d0
 800f68e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f692:	4606      	mov	r6, r0
 800f694:	462b      	mov	r3, r5
 800f696:	b991      	cbnz	r1, 800f6be <scalbn+0x36>
 800f698:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f69c:	4323      	orrs	r3, r4
 800f69e:	d03d      	beq.n	800f71c <scalbn+0x94>
 800f6a0:	4b35      	ldr	r3, [pc, #212]	@ (800f778 <scalbn+0xf0>)
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	4629      	mov	r1, r5
 800f6a6:	2200      	movs	r2, #0
 800f6a8:	f7f0 fff6 	bl	8000698 <__aeabi_dmul>
 800f6ac:	4b33      	ldr	r3, [pc, #204]	@ (800f77c <scalbn+0xf4>)
 800f6ae:	429e      	cmp	r6, r3
 800f6b0:	4604      	mov	r4, r0
 800f6b2:	460d      	mov	r5, r1
 800f6b4:	da0f      	bge.n	800f6d6 <scalbn+0x4e>
 800f6b6:	a328      	add	r3, pc, #160	@ (adr r3, 800f758 <scalbn+0xd0>)
 800f6b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6bc:	e01e      	b.n	800f6fc <scalbn+0x74>
 800f6be:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f6c2:	4291      	cmp	r1, r2
 800f6c4:	d10b      	bne.n	800f6de <scalbn+0x56>
 800f6c6:	4622      	mov	r2, r4
 800f6c8:	4620      	mov	r0, r4
 800f6ca:	4629      	mov	r1, r5
 800f6cc:	f7f0 fe2e 	bl	800032c <__adddf3>
 800f6d0:	4604      	mov	r4, r0
 800f6d2:	460d      	mov	r5, r1
 800f6d4:	e022      	b.n	800f71c <scalbn+0x94>
 800f6d6:	460b      	mov	r3, r1
 800f6d8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f6dc:	3936      	subs	r1, #54	@ 0x36
 800f6de:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f6e2:	4296      	cmp	r6, r2
 800f6e4:	dd0d      	ble.n	800f702 <scalbn+0x7a>
 800f6e6:	2d00      	cmp	r5, #0
 800f6e8:	a11d      	add	r1, pc, #116	@ (adr r1, 800f760 <scalbn+0xd8>)
 800f6ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6ee:	da02      	bge.n	800f6f6 <scalbn+0x6e>
 800f6f0:	a11d      	add	r1, pc, #116	@ (adr r1, 800f768 <scalbn+0xe0>)
 800f6f2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6f6:	a31a      	add	r3, pc, #104	@ (adr r3, 800f760 <scalbn+0xd8>)
 800f6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6fc:	f7f0 ffcc 	bl	8000698 <__aeabi_dmul>
 800f700:	e7e6      	b.n	800f6d0 <scalbn+0x48>
 800f702:	1872      	adds	r2, r6, r1
 800f704:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800f708:	428a      	cmp	r2, r1
 800f70a:	dcec      	bgt.n	800f6e6 <scalbn+0x5e>
 800f70c:	2a00      	cmp	r2, #0
 800f70e:	dd08      	ble.n	800f722 <scalbn+0x9a>
 800f710:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f714:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f718:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f71c:	ec45 4b10 	vmov	d0, r4, r5
 800f720:	bd70      	pop	{r4, r5, r6, pc}
 800f722:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800f726:	da08      	bge.n	800f73a <scalbn+0xb2>
 800f728:	2d00      	cmp	r5, #0
 800f72a:	a10b      	add	r1, pc, #44	@ (adr r1, 800f758 <scalbn+0xd0>)
 800f72c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f730:	dac1      	bge.n	800f6b6 <scalbn+0x2e>
 800f732:	a10f      	add	r1, pc, #60	@ (adr r1, 800f770 <scalbn+0xe8>)
 800f734:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f738:	e7bd      	b.n	800f6b6 <scalbn+0x2e>
 800f73a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f73e:	3236      	adds	r2, #54	@ 0x36
 800f740:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f744:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f748:	4620      	mov	r0, r4
 800f74a:	4b0d      	ldr	r3, [pc, #52]	@ (800f780 <scalbn+0xf8>)
 800f74c:	4629      	mov	r1, r5
 800f74e:	2200      	movs	r2, #0
 800f750:	e7d4      	b.n	800f6fc <scalbn+0x74>
 800f752:	bf00      	nop
 800f754:	f3af 8000 	nop.w
 800f758:	c2f8f359 	.word	0xc2f8f359
 800f75c:	01a56e1f 	.word	0x01a56e1f
 800f760:	8800759c 	.word	0x8800759c
 800f764:	7e37e43c 	.word	0x7e37e43c
 800f768:	8800759c 	.word	0x8800759c
 800f76c:	fe37e43c 	.word	0xfe37e43c
 800f770:	c2f8f359 	.word	0xc2f8f359
 800f774:	81a56e1f 	.word	0x81a56e1f
 800f778:	43500000 	.word	0x43500000
 800f77c:	ffff3cb0 	.word	0xffff3cb0
 800f780:	3c900000 	.word	0x3c900000

0800f784 <with_errno>:
 800f784:	b510      	push	{r4, lr}
 800f786:	ed2d 8b02 	vpush	{d8}
 800f78a:	eeb0 8a40 	vmov.f32	s16, s0
 800f78e:	eef0 8a60 	vmov.f32	s17, s1
 800f792:	4604      	mov	r4, r0
 800f794:	f7fd f936 	bl	800ca04 <__errno>
 800f798:	eeb0 0a48 	vmov.f32	s0, s16
 800f79c:	eef0 0a68 	vmov.f32	s1, s17
 800f7a0:	ecbd 8b02 	vpop	{d8}
 800f7a4:	6004      	str	r4, [r0, #0]
 800f7a6:	bd10      	pop	{r4, pc}

0800f7a8 <xflow>:
 800f7a8:	4603      	mov	r3, r0
 800f7aa:	b507      	push	{r0, r1, r2, lr}
 800f7ac:	ec51 0b10 	vmov	r0, r1, d0
 800f7b0:	b183      	cbz	r3, 800f7d4 <xflow+0x2c>
 800f7b2:	4602      	mov	r2, r0
 800f7b4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f7b8:	e9cd 2300 	strd	r2, r3, [sp]
 800f7bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f7c0:	f7f0 ff6a 	bl	8000698 <__aeabi_dmul>
 800f7c4:	ec41 0b10 	vmov	d0, r0, r1
 800f7c8:	2022      	movs	r0, #34	@ 0x22
 800f7ca:	b003      	add	sp, #12
 800f7cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800f7d0:	f7ff bfd8 	b.w	800f784 <with_errno>
 800f7d4:	4602      	mov	r2, r0
 800f7d6:	460b      	mov	r3, r1
 800f7d8:	e7ee      	b.n	800f7b8 <xflow+0x10>
 800f7da:	0000      	movs	r0, r0
 800f7dc:	0000      	movs	r0, r0
	...

0800f7e0 <__math_uflow>:
 800f7e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f7e8 <__math_uflow+0x8>
 800f7e4:	f7ff bfe0 	b.w	800f7a8 <xflow>
 800f7e8:	00000000 	.word	0x00000000
 800f7ec:	10000000 	.word	0x10000000

0800f7f0 <__math_oflow>:
 800f7f0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f7f8 <__math_oflow+0x8>
 800f7f4:	f7ff bfd8 	b.w	800f7a8 <xflow>
 800f7f8:	00000000 	.word	0x00000000
 800f7fc:	70000000 	.word	0x70000000

0800f800 <__ieee754_sqrt>:
 800f800:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f804:	4a68      	ldr	r2, [pc, #416]	@ (800f9a8 <__ieee754_sqrt+0x1a8>)
 800f806:	ec55 4b10 	vmov	r4, r5, d0
 800f80a:	43aa      	bics	r2, r5
 800f80c:	462b      	mov	r3, r5
 800f80e:	4621      	mov	r1, r4
 800f810:	d110      	bne.n	800f834 <__ieee754_sqrt+0x34>
 800f812:	4622      	mov	r2, r4
 800f814:	4620      	mov	r0, r4
 800f816:	4629      	mov	r1, r5
 800f818:	f7f0 ff3e 	bl	8000698 <__aeabi_dmul>
 800f81c:	4602      	mov	r2, r0
 800f81e:	460b      	mov	r3, r1
 800f820:	4620      	mov	r0, r4
 800f822:	4629      	mov	r1, r5
 800f824:	f7f0 fd82 	bl	800032c <__adddf3>
 800f828:	4604      	mov	r4, r0
 800f82a:	460d      	mov	r5, r1
 800f82c:	ec45 4b10 	vmov	d0, r4, r5
 800f830:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f834:	2d00      	cmp	r5, #0
 800f836:	dc0e      	bgt.n	800f856 <__ieee754_sqrt+0x56>
 800f838:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f83c:	4322      	orrs	r2, r4
 800f83e:	d0f5      	beq.n	800f82c <__ieee754_sqrt+0x2c>
 800f840:	b19d      	cbz	r5, 800f86a <__ieee754_sqrt+0x6a>
 800f842:	4622      	mov	r2, r4
 800f844:	4620      	mov	r0, r4
 800f846:	4629      	mov	r1, r5
 800f848:	f7f0 fd6e 	bl	8000328 <__aeabi_dsub>
 800f84c:	4602      	mov	r2, r0
 800f84e:	460b      	mov	r3, r1
 800f850:	f7f1 f84c 	bl	80008ec <__aeabi_ddiv>
 800f854:	e7e8      	b.n	800f828 <__ieee754_sqrt+0x28>
 800f856:	152a      	asrs	r2, r5, #20
 800f858:	d115      	bne.n	800f886 <__ieee754_sqrt+0x86>
 800f85a:	2000      	movs	r0, #0
 800f85c:	e009      	b.n	800f872 <__ieee754_sqrt+0x72>
 800f85e:	0acb      	lsrs	r3, r1, #11
 800f860:	3a15      	subs	r2, #21
 800f862:	0549      	lsls	r1, r1, #21
 800f864:	2b00      	cmp	r3, #0
 800f866:	d0fa      	beq.n	800f85e <__ieee754_sqrt+0x5e>
 800f868:	e7f7      	b.n	800f85a <__ieee754_sqrt+0x5a>
 800f86a:	462a      	mov	r2, r5
 800f86c:	e7fa      	b.n	800f864 <__ieee754_sqrt+0x64>
 800f86e:	005b      	lsls	r3, r3, #1
 800f870:	3001      	adds	r0, #1
 800f872:	02dc      	lsls	r4, r3, #11
 800f874:	d5fb      	bpl.n	800f86e <__ieee754_sqrt+0x6e>
 800f876:	1e44      	subs	r4, r0, #1
 800f878:	1b12      	subs	r2, r2, r4
 800f87a:	f1c0 0420 	rsb	r4, r0, #32
 800f87e:	fa21 f404 	lsr.w	r4, r1, r4
 800f882:	4323      	orrs	r3, r4
 800f884:	4081      	lsls	r1, r0
 800f886:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f88a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800f88e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f892:	07d2      	lsls	r2, r2, #31
 800f894:	bf5c      	itt	pl
 800f896:	005b      	lslpl	r3, r3, #1
 800f898:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f89c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f8a0:	bf58      	it	pl
 800f8a2:	0049      	lslpl	r1, r1, #1
 800f8a4:	2600      	movs	r6, #0
 800f8a6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f8aa:	106d      	asrs	r5, r5, #1
 800f8ac:	0049      	lsls	r1, r1, #1
 800f8ae:	2016      	movs	r0, #22
 800f8b0:	4632      	mov	r2, r6
 800f8b2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f8b6:	1917      	adds	r7, r2, r4
 800f8b8:	429f      	cmp	r7, r3
 800f8ba:	bfde      	ittt	le
 800f8bc:	193a      	addle	r2, r7, r4
 800f8be:	1bdb      	suble	r3, r3, r7
 800f8c0:	1936      	addle	r6, r6, r4
 800f8c2:	0fcf      	lsrs	r7, r1, #31
 800f8c4:	3801      	subs	r0, #1
 800f8c6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f8ca:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f8ce:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f8d2:	d1f0      	bne.n	800f8b6 <__ieee754_sqrt+0xb6>
 800f8d4:	4604      	mov	r4, r0
 800f8d6:	2720      	movs	r7, #32
 800f8d8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f8dc:	429a      	cmp	r2, r3
 800f8de:	eb00 0e0c 	add.w	lr, r0, ip
 800f8e2:	db02      	blt.n	800f8ea <__ieee754_sqrt+0xea>
 800f8e4:	d113      	bne.n	800f90e <__ieee754_sqrt+0x10e>
 800f8e6:	458e      	cmp	lr, r1
 800f8e8:	d811      	bhi.n	800f90e <__ieee754_sqrt+0x10e>
 800f8ea:	f1be 0f00 	cmp.w	lr, #0
 800f8ee:	eb0e 000c 	add.w	r0, lr, ip
 800f8f2:	da42      	bge.n	800f97a <__ieee754_sqrt+0x17a>
 800f8f4:	2800      	cmp	r0, #0
 800f8f6:	db40      	blt.n	800f97a <__ieee754_sqrt+0x17a>
 800f8f8:	f102 0801 	add.w	r8, r2, #1
 800f8fc:	1a9b      	subs	r3, r3, r2
 800f8fe:	458e      	cmp	lr, r1
 800f900:	bf88      	it	hi
 800f902:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f906:	eba1 010e 	sub.w	r1, r1, lr
 800f90a:	4464      	add	r4, ip
 800f90c:	4642      	mov	r2, r8
 800f90e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f912:	3f01      	subs	r7, #1
 800f914:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f918:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f91c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f920:	d1dc      	bne.n	800f8dc <__ieee754_sqrt+0xdc>
 800f922:	4319      	orrs	r1, r3
 800f924:	d01b      	beq.n	800f95e <__ieee754_sqrt+0x15e>
 800f926:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800f9ac <__ieee754_sqrt+0x1ac>
 800f92a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800f9b0 <__ieee754_sqrt+0x1b0>
 800f92e:	e9da 0100 	ldrd	r0, r1, [sl]
 800f932:	e9db 2300 	ldrd	r2, r3, [fp]
 800f936:	f7f0 fcf7 	bl	8000328 <__aeabi_dsub>
 800f93a:	e9da 8900 	ldrd	r8, r9, [sl]
 800f93e:	4602      	mov	r2, r0
 800f940:	460b      	mov	r3, r1
 800f942:	4640      	mov	r0, r8
 800f944:	4649      	mov	r1, r9
 800f946:	f7f1 f923 	bl	8000b90 <__aeabi_dcmple>
 800f94a:	b140      	cbz	r0, 800f95e <__ieee754_sqrt+0x15e>
 800f94c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f950:	e9da 0100 	ldrd	r0, r1, [sl]
 800f954:	e9db 2300 	ldrd	r2, r3, [fp]
 800f958:	d111      	bne.n	800f97e <__ieee754_sqrt+0x17e>
 800f95a:	3601      	adds	r6, #1
 800f95c:	463c      	mov	r4, r7
 800f95e:	1072      	asrs	r2, r6, #1
 800f960:	0863      	lsrs	r3, r4, #1
 800f962:	07f1      	lsls	r1, r6, #31
 800f964:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f968:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f96c:	bf48      	it	mi
 800f96e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f972:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800f976:	4618      	mov	r0, r3
 800f978:	e756      	b.n	800f828 <__ieee754_sqrt+0x28>
 800f97a:	4690      	mov	r8, r2
 800f97c:	e7be      	b.n	800f8fc <__ieee754_sqrt+0xfc>
 800f97e:	f7f0 fcd5 	bl	800032c <__adddf3>
 800f982:	e9da 8900 	ldrd	r8, r9, [sl]
 800f986:	4602      	mov	r2, r0
 800f988:	460b      	mov	r3, r1
 800f98a:	4640      	mov	r0, r8
 800f98c:	4649      	mov	r1, r9
 800f98e:	f7f1 f8f5 	bl	8000b7c <__aeabi_dcmplt>
 800f992:	b120      	cbz	r0, 800f99e <__ieee754_sqrt+0x19e>
 800f994:	1ca0      	adds	r0, r4, #2
 800f996:	bf08      	it	eq
 800f998:	3601      	addeq	r6, #1
 800f99a:	3402      	adds	r4, #2
 800f99c:	e7df      	b.n	800f95e <__ieee754_sqrt+0x15e>
 800f99e:	1c63      	adds	r3, r4, #1
 800f9a0:	f023 0401 	bic.w	r4, r3, #1
 800f9a4:	e7db      	b.n	800f95e <__ieee754_sqrt+0x15e>
 800f9a6:	bf00      	nop
 800f9a8:	7ff00000 	.word	0x7ff00000
 800f9ac:	200001e8 	.word	0x200001e8
 800f9b0:	200001e0 	.word	0x200001e0

0800f9b4 <_sbrk>:
 800f9b4:	4a04      	ldr	r2, [pc, #16]	@ (800f9c8 <_sbrk+0x14>)
 800f9b6:	6811      	ldr	r1, [r2, #0]
 800f9b8:	4603      	mov	r3, r0
 800f9ba:	b909      	cbnz	r1, 800f9c0 <_sbrk+0xc>
 800f9bc:	4903      	ldr	r1, [pc, #12]	@ (800f9cc <_sbrk+0x18>)
 800f9be:	6011      	str	r1, [r2, #0]
 800f9c0:	6810      	ldr	r0, [r2, #0]
 800f9c2:	4403      	add	r3, r0
 800f9c4:	6013      	str	r3, [r2, #0]
 800f9c6:	4770      	bx	lr
 800f9c8:	20013dec 	.word	0x20013dec
 800f9cc:	20013df0 	.word	0x20013df0

0800f9d0 <_init>:
 800f9d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9d2:	bf00      	nop
 800f9d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9d6:	bc08      	pop	{r3}
 800f9d8:	469e      	mov	lr, r3
 800f9da:	4770      	bx	lr

0800f9dc <_fini>:
 800f9dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f9de:	bf00      	nop
 800f9e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f9e2:	bc08      	pop	{r3}
 800f9e4:	469e      	mov	lr, r3
 800f9e6:	4770      	bx	lr
