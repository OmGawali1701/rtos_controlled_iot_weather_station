
Normal_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fe4  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000430  08009178  08009178  0000a178  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080095a8  080095a8  0000b1e8  2**0
                  CONTENTS
  4 .ARM          00000008  080095a8  080095a8  0000a5a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080095b0  080095b0  0000b1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080095b0  080095b0  0000a5b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080095b4  080095b4  0000a5b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  080095b8  0000b000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b1e8  2**0
                  CONTENTS
 10 .bss          0000034c  200001e8  200001e8  0000b1e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000534  20000534  0000b1e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b1e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c2b9  00000000  00000000  0000b218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d46  00000000  00000000  000174d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b10  00000000  00000000  00019218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008a2  00000000  00000000  00019d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022d4e  00000000  00000000  0001a5ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e97a  00000000  00000000  0003d318  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d417e  00000000  00000000  0004bc92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011fe10  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004284  00000000  00000000  0011fe54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  001240d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800915c 	.word	0x0800915c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	0800915c 	.word	0x0800915c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295
 8000c66:	f000 b9b5 	b.w	8000fd4 <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b96a 	b.w	8000fd4 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	460c      	mov	r4, r1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d14e      	bne.n	8000dc2 <__udivmoddi4+0xaa>
 8000d24:	4694      	mov	ip, r2
 8000d26:	458c      	cmp	ip, r1
 8000d28:	4686      	mov	lr, r0
 8000d2a:	fab2 f282 	clz	r2, r2
 8000d2e:	d962      	bls.n	8000df6 <__udivmoddi4+0xde>
 8000d30:	b14a      	cbz	r2, 8000d46 <__udivmoddi4+0x2e>
 8000d32:	f1c2 0320 	rsb	r3, r2, #32
 8000d36:	4091      	lsls	r1, r2
 8000d38:	fa20 f303 	lsr.w	r3, r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	4319      	orrs	r1, r3
 8000d42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4a:	fa1f f68c 	uxth.w	r6, ip
 8000d4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d56:	fb07 1114 	mls	r1, r7, r4, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb04 f106 	mul.w	r1, r4, r6
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x64>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d6e:	f080 8112 	bcs.w	8000f96 <__udivmoddi4+0x27e>
 8000d72:	4299      	cmp	r1, r3
 8000d74:	f240 810f 	bls.w	8000f96 <__udivmoddi4+0x27e>
 8000d78:	3c02      	subs	r4, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	fa1f f38e 	uxth.w	r3, lr
 8000d82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d86:	fb07 1110 	mls	r1, r7, r0, r1
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f606 	mul.w	r6, r0, r6
 8000d92:	429e      	cmp	r6, r3
 8000d94:	d90a      	bls.n	8000dac <__udivmoddi4+0x94>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9e:	f080 80fc 	bcs.w	8000f9a <__udivmoddi4+0x282>
 8000da2:	429e      	cmp	r6, r3
 8000da4:	f240 80f9 	bls.w	8000f9a <__udivmoddi4+0x282>
 8000da8:	4463      	add	r3, ip
 8000daa:	3802      	subs	r0, #2
 8000dac:	1b9b      	subs	r3, r3, r6
 8000dae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000db2:	2100      	movs	r1, #0
 8000db4:	b11d      	cbz	r5, 8000dbe <__udivmoddi4+0xa6>
 8000db6:	40d3      	lsrs	r3, r2
 8000db8:	2200      	movs	r2, #0
 8000dba:	e9c5 3200 	strd	r3, r2, [r5]
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d905      	bls.n	8000dd2 <__udivmoddi4+0xba>
 8000dc6:	b10d      	cbz	r5, 8000dcc <__udivmoddi4+0xb4>
 8000dc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e7f5      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000dd2:	fab3 f183 	clz	r1, r3
 8000dd6:	2900      	cmp	r1, #0
 8000dd8:	d146      	bne.n	8000e68 <__udivmoddi4+0x150>
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	d302      	bcc.n	8000de4 <__udivmoddi4+0xcc>
 8000dde:	4290      	cmp	r0, r2
 8000de0:	f0c0 80f0 	bcc.w	8000fc4 <__udivmoddi4+0x2ac>
 8000de4:	1a86      	subs	r6, r0, r2
 8000de6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dea:	2001      	movs	r0, #1
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d0e6      	beq.n	8000dbe <__udivmoddi4+0xa6>
 8000df0:	e9c5 6300 	strd	r6, r3, [r5]
 8000df4:	e7e3      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	f040 8090 	bne.w	8000f1c <__udivmoddi4+0x204>
 8000dfc:	eba1 040c 	sub.w	r4, r1, ip
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e12:	fb08 4416 	mls	r4, r8, r6, r4
 8000e16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1a:	fb07 f006 	mul.w	r0, r7, r6
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x11c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x11a>
 8000e2c:	4298      	cmp	r0, r3
 8000e2e:	f200 80cd 	bhi.w	8000fcc <__udivmoddi4+0x2b4>
 8000e32:	4626      	mov	r6, r4
 8000e34:	1a1c      	subs	r4, r3, r0
 8000e36:	fa1f f38e 	uxth.w	r3, lr
 8000e3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb00 f707 	mul.w	r7, r0, r7
 8000e4a:	429f      	cmp	r7, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x148>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x146>
 8000e58:	429f      	cmp	r7, r3
 8000e5a:	f200 80b0 	bhi.w	8000fbe <__udivmoddi4+0x2a6>
 8000e5e:	4620      	mov	r0, r4
 8000e60:	1bdb      	subs	r3, r3, r7
 8000e62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e66:	e7a5      	b.n	8000db4 <__udivmoddi4+0x9c>
 8000e68:	f1c1 0620 	rsb	r6, r1, #32
 8000e6c:	408b      	lsls	r3, r1
 8000e6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e72:	431f      	orrs	r7, r3
 8000e74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e78:	fa04 f301 	lsl.w	r3, r4, r1
 8000e7c:	ea43 030c 	orr.w	r3, r3, ip
 8000e80:	40f4      	lsrs	r4, r6
 8000e82:	fa00 f801 	lsl.w	r8, r0, r1
 8000e86:	0c38      	lsrs	r0, r7, #16
 8000e88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e90:	fa1f fc87 	uxth.w	ip, r7
 8000e94:	fb00 441e 	mls	r4, r0, lr, r4
 8000e98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000ea0:	45a1      	cmp	r9, r4
 8000ea2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea6:	d90a      	bls.n	8000ebe <__udivmoddi4+0x1a6>
 8000ea8:	193c      	adds	r4, r7, r4
 8000eaa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eae:	f080 8084 	bcs.w	8000fba <__udivmoddi4+0x2a2>
 8000eb2:	45a1      	cmp	r9, r4
 8000eb4:	f240 8081 	bls.w	8000fba <__udivmoddi4+0x2a2>
 8000eb8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	eba4 0409 	sub.w	r4, r4, r9
 8000ec2:	fa1f f983 	uxth.w	r9, r3
 8000ec6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eca:	fb00 4413 	mls	r4, r0, r3, r4
 8000ece:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed6:	45a4      	cmp	ip, r4
 8000ed8:	d907      	bls.n	8000eea <__udivmoddi4+0x1d2>
 8000eda:	193c      	adds	r4, r7, r4
 8000edc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ee0:	d267      	bcs.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d965      	bls.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee6:	3b02      	subs	r3, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eee:	fba0 9302 	umull	r9, r3, r0, r2
 8000ef2:	eba4 040c 	sub.w	r4, r4, ip
 8000ef6:	429c      	cmp	r4, r3
 8000ef8:	46ce      	mov	lr, r9
 8000efa:	469c      	mov	ip, r3
 8000efc:	d351      	bcc.n	8000fa2 <__udivmoddi4+0x28a>
 8000efe:	d04e      	beq.n	8000f9e <__udivmoddi4+0x286>
 8000f00:	b155      	cbz	r5, 8000f18 <__udivmoddi4+0x200>
 8000f02:	ebb8 030e 	subs.w	r3, r8, lr
 8000f06:	eb64 040c 	sbc.w	r4, r4, ip
 8000f0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0e:	40cb      	lsrs	r3, r1
 8000f10:	431e      	orrs	r6, r3
 8000f12:	40cc      	lsrs	r4, r1
 8000f14:	e9c5 6400 	strd	r6, r4, [r5]
 8000f18:	2100      	movs	r1, #0
 8000f1a:	e750      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000f1c:	f1c2 0320 	rsb	r3, r2, #32
 8000f20:	fa20 f103 	lsr.w	r1, r0, r3
 8000f24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f28:	fa24 f303 	lsr.w	r3, r4, r3
 8000f2c:	4094      	lsls	r4, r2
 8000f2e:	430c      	orrs	r4, r1
 8000f30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f38:	fa1f f78c 	uxth.w	r7, ip
 8000f3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f40:	fb08 3110 	mls	r1, r8, r0, r3
 8000f44:	0c23      	lsrs	r3, r4, #16
 8000f46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f4a:	fb00 f107 	mul.w	r1, r0, r7
 8000f4e:	4299      	cmp	r1, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x24c>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f5a:	d22c      	bcs.n	8000fb6 <__udivmoddi4+0x29e>
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	d92a      	bls.n	8000fb6 <__udivmoddi4+0x29e>
 8000f60:	3802      	subs	r0, #2
 8000f62:	4463      	add	r3, ip
 8000f64:	1a5b      	subs	r3, r3, r1
 8000f66:	b2a4      	uxth	r4, r4
 8000f68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f74:	fb01 f307 	mul.w	r3, r1, r7
 8000f78:	42a3      	cmp	r3, r4
 8000f7a:	d908      	bls.n	8000f8e <__udivmoddi4+0x276>
 8000f7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f84:	d213      	bcs.n	8000fae <__udivmoddi4+0x296>
 8000f86:	42a3      	cmp	r3, r4
 8000f88:	d911      	bls.n	8000fae <__udivmoddi4+0x296>
 8000f8a:	3902      	subs	r1, #2
 8000f8c:	4464      	add	r4, ip
 8000f8e:	1ae4      	subs	r4, r4, r3
 8000f90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f94:	e739      	b.n	8000e0a <__udivmoddi4+0xf2>
 8000f96:	4604      	mov	r4, r0
 8000f98:	e6f0      	b.n	8000d7c <__udivmoddi4+0x64>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e706      	b.n	8000dac <__udivmoddi4+0x94>
 8000f9e:	45c8      	cmp	r8, r9
 8000fa0:	d2ae      	bcs.n	8000f00 <__udivmoddi4+0x1e8>
 8000fa2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fa6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000faa:	3801      	subs	r0, #1
 8000fac:	e7a8      	b.n	8000f00 <__udivmoddi4+0x1e8>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	e7ed      	b.n	8000f8e <__udivmoddi4+0x276>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	e799      	b.n	8000eea <__udivmoddi4+0x1d2>
 8000fb6:	4630      	mov	r0, r6
 8000fb8:	e7d4      	b.n	8000f64 <__udivmoddi4+0x24c>
 8000fba:	46d6      	mov	lr, sl
 8000fbc:	e77f      	b.n	8000ebe <__udivmoddi4+0x1a6>
 8000fbe:	4463      	add	r3, ip
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	e74d      	b.n	8000e60 <__udivmoddi4+0x148>
 8000fc4:	4606      	mov	r6, r0
 8000fc6:	4623      	mov	r3, r4
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e70f      	b.n	8000dec <__udivmoddi4+0xd4>
 8000fcc:	3e02      	subs	r6, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	e730      	b.n	8000e34 <__udivmoddi4+0x11c>
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08c      	sub	sp, #48	@ 0x30
 8000fdc:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	9302      	str	r3, [sp, #8]
 8000fe4:	2319      	movs	r3, #25
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	463b      	mov	r3, r7
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2301      	movs	r3, #1
 8000fee:	2288      	movs	r2, #136	@ 0x88
 8000ff0:	21ec      	movs	r1, #236	@ 0xec
 8000ff2:	4857      	ldr	r0, [pc, #348]	@ (8001150 <TrimRead+0x178>)
 8000ff4:	f002 fcc4 	bl	8003980 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	3319      	adds	r3, #25
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	9202      	str	r2, [sp, #8]
 8001002:	2207      	movs	r2, #7
 8001004:	9201      	str	r2, [sp, #4]
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	22e1      	movs	r2, #225	@ 0xe1
 800100c:	21ec      	movs	r1, #236	@ 0xec
 800100e:	4850      	ldr	r0, [pc, #320]	@ (8001150 <TrimRead+0x178>)
 8001010:	f002 fcb6 	bl	8003980 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001014:	787b      	ldrb	r3, [r7, #1]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b21a      	sxth	r2, r3
 800101a:	783b      	ldrb	r3, [r7, #0]
 800101c:	b21b      	sxth	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b21b      	sxth	r3, r3
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b4b      	ldr	r3, [pc, #300]	@ (8001154 <TrimRead+0x17c>)
 8001026:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	b21a      	sxth	r2, r3
 800102e:	78bb      	ldrb	r3, [r7, #2]
 8001030:	b21b      	sxth	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b21a      	sxth	r2, r3
 8001036:	4b48      	ldr	r3, [pc, #288]	@ (8001158 <TrimRead+0x180>)
 8001038:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800103a:	797b      	ldrb	r3, [r7, #5]
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	b21a      	sxth	r2, r3
 8001040:	793b      	ldrb	r3, [r7, #4]
 8001042:	b21b      	sxth	r3, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	b21a      	sxth	r2, r3
 8001048:	4b44      	ldr	r3, [pc, #272]	@ (800115c <TrimRead+0x184>)
 800104a:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	797b      	ldrb	r3, [r7, #5]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21b      	sxth	r3, r3
 800105a:	b29a      	uxth	r2, r3
 800105c:	4b40      	ldr	r3, [pc, #256]	@ (8001160 <TrimRead+0x188>)
 800105e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001060:	7a7b      	ldrb	r3, [r7, #9]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b21a      	sxth	r2, r3
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b21a      	sxth	r2, r3
 800106e:	4b3d      	ldr	r3, [pc, #244]	@ (8001164 <TrimRead+0x18c>)
 8001070:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001072:	7afb      	ldrb	r3, [r7, #11]
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	b21a      	sxth	r2, r3
 8001078:	7abb      	ldrb	r3, [r7, #10]
 800107a:	b21b      	sxth	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b21a      	sxth	r2, r3
 8001080:	4b39      	ldr	r3, [pc, #228]	@ (8001168 <TrimRead+0x190>)
 8001082:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001084:	7b7b      	ldrb	r3, [r7, #13]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	7b3b      	ldrb	r3, [r7, #12]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21a      	sxth	r2, r3
 8001092:	4b36      	ldr	r3, [pc, #216]	@ (800116c <TrimRead+0x194>)
 8001094:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	7bbb      	ldrb	r3, [r7, #14]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	4b32      	ldr	r3, [pc, #200]	@ (8001170 <TrimRead+0x198>)
 80010a6:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80010a8:	7c7b      	ldrb	r3, [r7, #17]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	7c3b      	ldrb	r3, [r7, #16]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001174 <TrimRead+0x19c>)
 80010b8:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80010ba:	7cfb      	ldrb	r3, [r7, #19]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	7cbb      	ldrb	r3, [r7, #18]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001178 <TrimRead+0x1a0>)
 80010ca:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80010cc:	7d7b      	ldrb	r3, [r7, #21]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	7d3b      	ldrb	r3, [r7, #20]
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b21a      	sxth	r2, r3
 80010da:	4b28      	ldr	r3, [pc, #160]	@ (800117c <TrimRead+0x1a4>)
 80010dc:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	7dbb      	ldrb	r3, [r7, #22]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	4b24      	ldr	r3, [pc, #144]	@ (8001180 <TrimRead+0x1a8>)
 80010ee:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80010f0:	7e3b      	ldrb	r3, [r7, #24]
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b23      	ldr	r3, [pc, #140]	@ (8001184 <TrimRead+0x1ac>)
 80010f6:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80010f8:	7ebb      	ldrb	r3, [r7, #26]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	7e7b      	ldrb	r3, [r7, #25]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21a      	sxth	r2, r3
 8001106:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <TrimRead+0x1b0>)
 8001108:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 800110a:	7efb      	ldrb	r3, [r7, #27]
 800110c:	461a      	mov	r2, r3
 800110e:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <TrimRead+0x1b4>)
 8001110:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8001112:	7f3b      	ldrb	r3, [r7, #28]
 8001114:	011b      	lsls	r3, r3, #4
 8001116:	b21a      	sxth	r2, r3
 8001118:	7f7b      	ldrb	r3, [r7, #29]
 800111a:	b21b      	sxth	r3, r3
 800111c:	f003 030f 	and.w	r3, r3, #15
 8001120:	b21b      	sxth	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	b21a      	sxth	r2, r3
 8001126:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <TrimRead+0x1b8>)
 8001128:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800112a:	7fbb      	ldrb	r3, [r7, #30]
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	b21a      	sxth	r2, r3
 8001130:	7f7b      	ldrb	r3, [r7, #29]
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	b2db      	uxtb	r3, r3
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b21a      	sxth	r2, r3
 800113c:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <TrimRead+0x1bc>)
 800113e:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001140:	7ffb      	ldrb	r3, [r7, #31]
 8001142:	b21a      	sxth	r2, r3
 8001144:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <TrimRead+0x1c0>)
 8001146:	801a      	strh	r2, [r3, #0]
}
 8001148:	bf00      	nop
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200002ac 	.word	0x200002ac
 8001154:	2000023c 	.word	0x2000023c
 8001158:	20000244 	.word	0x20000244
 800115c:	20000246 	.word	0x20000246
 8001160:	2000023e 	.word	0x2000023e
 8001164:	20000248 	.word	0x20000248
 8001168:	2000024a 	.word	0x2000024a
 800116c:	2000024c 	.word	0x2000024c
 8001170:	2000024e 	.word	0x2000024e
 8001174:	20000250 	.word	0x20000250
 8001178:	20000252 	.word	0x20000252
 800117c:	20000254 	.word	0x20000254
 8001180:	20000256 	.word	0x20000256
 8001184:	20000240 	.word	0x20000240
 8001188:	20000258 	.word	0x20000258
 800118c:	20000242 	.word	0x20000242
 8001190:	2000025a 	.word	0x2000025a
 8001194:	2000025c 	.word	0x2000025c
 8001198:	2000025e 	.word	0x2000025e

0800119c <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b089      	sub	sp, #36	@ 0x24
 80011a0:	af04      	add	r7, sp, #16
 80011a2:	4604      	mov	r4, r0
 80011a4:	4608      	mov	r0, r1
 80011a6:	4611      	mov	r1, r2
 80011a8:	461a      	mov	r2, r3
 80011aa:	4623      	mov	r3, r4
 80011ac:	71fb      	strb	r3, [r7, #7]
 80011ae:	4603      	mov	r3, r0
 80011b0:	71bb      	strb	r3, [r7, #6]
 80011b2:	460b      	mov	r3, r1
 80011b4:	717b      	strb	r3, [r7, #5]
 80011b6:	4613      	mov	r3, r2
 80011b8:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80011ba:	f7ff ff0d 	bl	8000fd8 <TrimRead>


	uint8_t datatowrite = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80011c6:	23b6      	movs	r3, #182	@ 0xb6
 80011c8:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ce:	9302      	str	r3, [sp, #8]
 80011d0:	2301      	movs	r3, #1
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	f107 030f 	add.w	r3, r7, #15
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	22e0      	movs	r2, #224	@ 0xe0
 80011de:	21ec      	movs	r1, #236	@ 0xec
 80011e0:	4858      	ldr	r0, [pc, #352]	@ (8001344 <BME280_Config+0x1a8>)
 80011e2:	f002 fad3 	bl	800378c <HAL_I2C_Mem_Write>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <BME280_Config+0x56>
	{
		return -1;
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
 80011f0:	e0a3      	b.n	800133a <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 80011f2:	2064      	movs	r0, #100	@ 0x64
 80011f4:	f001 fafa 	bl	80027ec <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80011f8:	797b      	ldrb	r3, [r7, #5]
 80011fa:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	2301      	movs	r3, #1
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	f107 030f 	add.w	r3, r7, #15
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2301      	movs	r3, #1
 800120e:	22f2      	movs	r2, #242	@ 0xf2
 8001210:	21ec      	movs	r1, #236	@ 0xec
 8001212:	484c      	ldr	r0, [pc, #304]	@ (8001344 <BME280_Config+0x1a8>)
 8001214:	f002 faba 	bl	800378c <HAL_I2C_Mem_Write>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d002      	beq.n	8001224 <BME280_Config+0x88>
	{
		return -1;
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
 8001222:	e08a      	b.n	800133a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001224:	2064      	movs	r0, #100	@ 0x64
 8001226:	f001 fae1 	bl	80027ec <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800122a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122e:	9302      	str	r3, [sp, #8]
 8001230:	2301      	movs	r3, #1
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	f107 030e 	add.w	r3, r7, #14
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	22f2      	movs	r2, #242	@ 0xf2
 800123e:	21ec      	movs	r1, #236	@ 0xec
 8001240:	4840      	ldr	r0, [pc, #256]	@ (8001344 <BME280_Config+0x1a8>)
 8001242:	f002 fb9d 	bl	8003980 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001246:	7bba      	ldrb	r2, [r7, #14]
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	429a      	cmp	r2, r3
 800124c:	d002      	beq.n	8001254 <BME280_Config+0xb8>
	{
		return -1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	e072      	b.n	800133a <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001254:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001258:	015b      	lsls	r3, r3, #5
 800125a:	b25a      	sxtb	r2, r3
 800125c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	b25b      	sxtb	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b25b      	sxtb	r3, r3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800126c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	2301      	movs	r3, #1
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	f107 030f 	add.w	r3, r7, #15
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2301      	movs	r3, #1
 800127e:	22f5      	movs	r2, #245	@ 0xf5
 8001280:	21ec      	movs	r1, #236	@ 0xec
 8001282:	4830      	ldr	r0, [pc, #192]	@ (8001344 <BME280_Config+0x1a8>)
 8001284:	f002 fa82 	bl	800378c <HAL_I2C_Mem_Write>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <BME280_Config+0xf8>
	{
		return -1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	e052      	b.n	800133a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001294:	2064      	movs	r0, #100	@ 0x64
 8001296:	f001 faa9 	bl	80027ec <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800129a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	f107 030e 	add.w	r3, r7, #14
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	22f5      	movs	r2, #245	@ 0xf5
 80012ae:	21ec      	movs	r1, #236	@ 0xec
 80012b0:	4824      	ldr	r0, [pc, #144]	@ (8001344 <BME280_Config+0x1a8>)
 80012b2:	f002 fb65 	bl	8003980 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012b6:	7bba      	ldrb	r2, [r7, #14]
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d002      	beq.n	80012c4 <BME280_Config+0x128>
	{
		return -1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	e03a      	b.n	800133a <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	015b      	lsls	r3, r3, #5
 80012c8:	b25a      	sxtb	r2, r3
 80012ca:	79bb      	ldrb	r3, [r7, #6]
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b25a      	sxtb	r2, r3
 80012d4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80012d8:	4313      	orrs	r3, r2
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f107 030f 	add.w	r3, r7, #15
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	22f4      	movs	r2, #244	@ 0xf4
 80012f4:	21ec      	movs	r1, #236	@ 0xec
 80012f6:	4813      	ldr	r0, [pc, #76]	@ (8001344 <BME280_Config+0x1a8>)
 80012f8:	f002 fa48 	bl	800378c <HAL_I2C_Mem_Write>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <BME280_Config+0x16c>
	{
		return -1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	e018      	b.n	800133a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001308:	2064      	movs	r0, #100	@ 0x64
 800130a:	f001 fa6f 	bl	80027ec <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800130e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001312:	9302      	str	r3, [sp, #8]
 8001314:	2301      	movs	r3, #1
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	f107 030e 	add.w	r3, r7, #14
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	22f4      	movs	r2, #244	@ 0xf4
 8001322:	21ec      	movs	r1, #236	@ 0xec
 8001324:	4807      	ldr	r0, [pc, #28]	@ (8001344 <BME280_Config+0x1a8>)
 8001326:	f002 fb2b 	bl	8003980 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800132a:	7bba      	ldrb	r2, [r7, #14]
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	429a      	cmp	r2, r3
 8001330:	d002      	beq.n	8001338 <BME280_Config+0x19c>
	{
		return -1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	e000      	b.n	800133a <BME280_Config+0x19e>
	}

	return 0;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	bd90      	pop	{r4, r7, pc}
 8001342:	bf00      	nop
 8001344:	200002ac 	.word	0x200002ac

08001348 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800134e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001352:	9302      	str	r3, [sp, #8]
 8001354:	2301      	movs	r3, #1
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	4b1e      	ldr	r3, [pc, #120]	@ (80013d4 <BMEReadRaw+0x8c>)
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2301      	movs	r3, #1
 800135e:	22d0      	movs	r2, #208	@ 0xd0
 8001360:	21ec      	movs	r1, #236	@ 0xec
 8001362:	481d      	ldr	r0, [pc, #116]	@ (80013d8 <BMEReadRaw+0x90>)
 8001364:	f002 fb0c 	bl	8003980 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001368:	4b1a      	ldr	r3, [pc, #104]	@ (80013d4 <BMEReadRaw+0x8c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b60      	cmp	r3, #96	@ 0x60
 800136e:	d12a      	bne.n	80013c6 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001370:	f04f 33ff 	mov.w	r3, #4294967295
 8001374:	9302      	str	r3, [sp, #8]
 8001376:	2308      	movs	r3, #8
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	463b      	mov	r3, r7
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	2301      	movs	r3, #1
 8001380:	22f7      	movs	r2, #247	@ 0xf7
 8001382:	21ec      	movs	r1, #236	@ 0xec
 8001384:	4814      	ldr	r0, [pc, #80]	@ (80013d8 <BMEReadRaw+0x90>)
 8001386:	f002 fafb 	bl	8003980 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800138a:	783b      	ldrb	r3, [r7, #0]
 800138c:	031a      	lsls	r2, r3, #12
 800138e:	787b      	ldrb	r3, [r7, #1]
 8001390:	011b      	lsls	r3, r3, #4
 8001392:	4313      	orrs	r3, r2
 8001394:	78ba      	ldrb	r2, [r7, #2]
 8001396:	0912      	lsrs	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	4313      	orrs	r3, r2
 800139c:	4a0f      	ldr	r2, [pc, #60]	@ (80013dc <BMEReadRaw+0x94>)
 800139e:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	031a      	lsls	r2, r3, #12
 80013a4:	793b      	ldrb	r3, [r7, #4]
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	4313      	orrs	r3, r2
 80013aa:	797a      	ldrb	r2, [r7, #5]
 80013ac:	0912      	lsrs	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	4313      	orrs	r3, r2
 80013b2:	4a0b      	ldr	r2, [pc, #44]	@ (80013e0 <BMEReadRaw+0x98>)
 80013b4:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	79fa      	ldrb	r2, [r7, #7]
 80013bc:	4313      	orrs	r3, r2
 80013be:	4a09      	ldr	r2, [pc, #36]	@ (80013e4 <BMEReadRaw+0x9c>)
 80013c0:	6013      	str	r3, [r2, #0]

		return 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e001      	b.n	80013ca <BMEReadRaw+0x82>
	}

	else return -1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000022c 	.word	0x2000022c
 80013d8:	200002ac 	.word	0x200002ac
 80013dc:	20000234 	.word	0x20000234
 80013e0:	20000230 	.word	0x20000230
 80013e4:	20000238 	.word	0x20000238

080013e8 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	10da      	asrs	r2, r3, #3
 80013f4:	4b19      	ldr	r3, [pc, #100]	@ (800145c <BME280_compensate_T_int32+0x74>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	4a18      	ldr	r2, [pc, #96]	@ (8001460 <BME280_compensate_T_int32+0x78>)
 80013fe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	12db      	asrs	r3, r3, #11
 8001408:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	111b      	asrs	r3, r3, #4
 800140e:	4a13      	ldr	r2, [pc, #76]	@ (800145c <BME280_compensate_T_int32+0x74>)
 8001410:	8812      	ldrh	r2, [r2, #0]
 8001412:	1a9b      	subs	r3, r3, r2
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	1112      	asrs	r2, r2, #4
 8001418:	4910      	ldr	r1, [pc, #64]	@ (800145c <BME280_compensate_T_int32+0x74>)
 800141a:	8809      	ldrh	r1, [r1, #0]
 800141c:	1a52      	subs	r2, r2, r1
 800141e:	fb02 f303 	mul.w	r3, r2, r3
 8001422:	131b      	asrs	r3, r3, #12
 8001424:	4a0f      	ldr	r2, [pc, #60]	@ (8001464 <BME280_compensate_T_int32+0x7c>)
 8001426:	f9b2 2000 	ldrsh.w	r2, [r2]
 800142a:	fb02 f303 	mul.w	r3, r2, r3
 800142e:	139b      	asrs	r3, r3, #14
 8001430:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4413      	add	r3, r2
 8001438:	4a0b      	ldr	r2, [pc, #44]	@ (8001468 <BME280_compensate_T_int32+0x80>)
 800143a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800143c:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <BME280_compensate_T_int32+0x80>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	3380      	adds	r3, #128	@ 0x80
 8001448:	121b      	asrs	r3, r3, #8
 800144a:	60fb      	str	r3, [r7, #12]
	return T;
 800144c:	68fb      	ldr	r3, [r7, #12]
}
 800144e:	4618      	mov	r0, r3
 8001450:	371c      	adds	r7, #28
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	2000023c 	.word	0x2000023c
 8001460:	20000244 	.word	0x20000244
 8001464:	20000246 	.word	0x20000246
 8001468:	20000260 	.word	0x20000260

0800146c <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800146c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001470:	b0ca      	sub	sp, #296	@ 0x128
 8001472:	af00      	add	r7, sp, #0
 8001474:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001478:	4baf      	ldr	r3, [pc, #700]	@ (8001738 <BME280_compensate_P_int64+0x2cc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	17da      	asrs	r2, r3, #31
 800147e:	461c      	mov	r4, r3
 8001480:	4615      	mov	r5, r2
 8001482:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001486:	f145 3bff 	adc.w	fp, r5, #4294967295
 800148a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800148e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001492:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001496:	fb03 f102 	mul.w	r1, r3, r2
 800149a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800149e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014a2:	fb02 f303 	mul.w	r3, r2, r3
 80014a6:	18ca      	adds	r2, r1, r3
 80014a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014ac:	fba3 8903 	umull	r8, r9, r3, r3
 80014b0:	eb02 0309 	add.w	r3, r2, r9
 80014b4:	4699      	mov	r9, r3
 80014b6:	4ba1      	ldr	r3, [pc, #644]	@ (800173c <BME280_compensate_P_int64+0x2d0>)
 80014b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014bc:	b21b      	sxth	r3, r3
 80014be:	17da      	asrs	r2, r3, #31
 80014c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80014c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80014c8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80014cc:	4603      	mov	r3, r0
 80014ce:	fb03 f209 	mul.w	r2, r3, r9
 80014d2:	460b      	mov	r3, r1
 80014d4:	fb08 f303 	mul.w	r3, r8, r3
 80014d8:	4413      	add	r3, r2
 80014da:	4602      	mov	r2, r0
 80014dc:	fba8 1202 	umull	r1, r2, r8, r2
 80014e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80014e4:	460a      	mov	r2, r1
 80014e6:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80014ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80014ee:	4413      	add	r3, r2
 80014f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80014f4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80014f8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80014fc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001500:	4b8f      	ldr	r3, [pc, #572]	@ (8001740 <BME280_compensate_P_int64+0x2d4>)
 8001502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001506:	b21b      	sxth	r3, r3
 8001508:	17da      	asrs	r2, r3, #31
 800150a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800150e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001512:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001516:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800151a:	462a      	mov	r2, r5
 800151c:	fb02 f203 	mul.w	r2, r2, r3
 8001520:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001524:	4621      	mov	r1, r4
 8001526:	fb01 f303 	mul.w	r3, r1, r3
 800152a:	441a      	add	r2, r3
 800152c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001530:	4621      	mov	r1, r4
 8001532:	fba3 1301 	umull	r1, r3, r3, r1
 8001536:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800153a:	460b      	mov	r3, r1
 800153c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001544:	18d3      	adds	r3, r2, r3
 8001546:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800154a:	f04f 0000 	mov.w	r0, #0
 800154e:	f04f 0100 	mov.w	r1, #0
 8001552:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001556:	462b      	mov	r3, r5
 8001558:	0459      	lsls	r1, r3, #17
 800155a:	4623      	mov	r3, r4
 800155c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001560:	4623      	mov	r3, r4
 8001562:	0458      	lsls	r0, r3, #17
 8001564:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001568:	1814      	adds	r4, r2, r0
 800156a:	643c      	str	r4, [r7, #64]	@ 0x40
 800156c:	414b      	adcs	r3, r1
 800156e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001570:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001574:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001578:	4b72      	ldr	r3, [pc, #456]	@ (8001744 <BME280_compensate_P_int64+0x2d8>)
 800157a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157e:	b21b      	sxth	r3, r3
 8001580:	17da      	asrs	r2, r3, #31
 8001582:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001586:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800158a:	f04f 0000 	mov.w	r0, #0
 800158e:	f04f 0100 	mov.w	r1, #0
 8001592:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001596:	00d9      	lsls	r1, r3, #3
 8001598:	2000      	movs	r0, #0
 800159a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800159e:	1814      	adds	r4, r2, r0
 80015a0:	63bc      	str	r4, [r7, #56]	@ 0x38
 80015a2:	414b      	adcs	r3, r1
 80015a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015a6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80015aa:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80015ae:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015b6:	fb03 f102 	mul.w	r1, r3, r2
 80015ba:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015be:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
 80015c6:	18ca      	adds	r2, r1, r3
 80015c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015cc:	fba3 1303 	umull	r1, r3, r3, r3
 80015d0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015d4:	460b      	mov	r3, r1
 80015d6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80015da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80015de:	18d3      	adds	r3, r2, r3
 80015e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015e4:	4b58      	ldr	r3, [pc, #352]	@ (8001748 <BME280_compensate_P_int64+0x2dc>)
 80015e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	17da      	asrs	r2, r3, #31
 80015ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80015f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80015f6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80015fa:	462b      	mov	r3, r5
 80015fc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001600:	4642      	mov	r2, r8
 8001602:	fb02 f203 	mul.w	r2, r2, r3
 8001606:	464b      	mov	r3, r9
 8001608:	4621      	mov	r1, r4
 800160a:	fb01 f303 	mul.w	r3, r1, r3
 800160e:	4413      	add	r3, r2
 8001610:	4622      	mov	r2, r4
 8001612:	4641      	mov	r1, r8
 8001614:	fba2 1201 	umull	r1, r2, r2, r1
 8001618:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800161c:	460a      	mov	r2, r1
 800161e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001622:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001626:	4413      	add	r3, r2
 8001628:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800162c:	f04f 0000 	mov.w	r0, #0
 8001630:	f04f 0100 	mov.w	r1, #0
 8001634:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001638:	4623      	mov	r3, r4
 800163a:	0a18      	lsrs	r0, r3, #8
 800163c:	462b      	mov	r3, r5
 800163e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001642:	462b      	mov	r3, r5
 8001644:	1219      	asrs	r1, r3, #8
 8001646:	4b41      	ldr	r3, [pc, #260]	@ (800174c <BME280_compensate_P_int64+0x2e0>)
 8001648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164c:	b21b      	sxth	r3, r3
 800164e:	17da      	asrs	r2, r3, #31
 8001650:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001654:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001658:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800165c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001660:	464a      	mov	r2, r9
 8001662:	fb02 f203 	mul.w	r2, r2, r3
 8001666:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800166a:	4644      	mov	r4, r8
 800166c:	fb04 f303 	mul.w	r3, r4, r3
 8001670:	441a      	add	r2, r3
 8001672:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001676:	4644      	mov	r4, r8
 8001678:	fba3 4304 	umull	r4, r3, r3, r4
 800167c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001680:	4623      	mov	r3, r4
 8001682:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001686:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800168a:	18d3      	adds	r3, r2, r3
 800168c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800169c:	464c      	mov	r4, r9
 800169e:	0323      	lsls	r3, r4, #12
 80016a0:	4644      	mov	r4, r8
 80016a2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80016a6:	4644      	mov	r4, r8
 80016a8:	0322      	lsls	r2, r4, #12
 80016aa:	1884      	adds	r4, r0, r2
 80016ac:	633c      	str	r4, [r7, #48]	@ 0x30
 80016ae:	eb41 0303 	adc.w	r3, r1, r3
 80016b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80016b4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80016b8:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80016bc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80016c0:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80016c4:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80016c8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80016cc:	4b20      	ldr	r3, [pc, #128]	@ (8001750 <BME280_compensate_P_int64+0x2e4>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	2200      	movs	r2, #0
 80016d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80016d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016dc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80016e0:	462b      	mov	r3, r5
 80016e2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80016e6:	4642      	mov	r2, r8
 80016e8:	fb02 f203 	mul.w	r2, r2, r3
 80016ec:	464b      	mov	r3, r9
 80016ee:	4621      	mov	r1, r4
 80016f0:	fb01 f303 	mul.w	r3, r1, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	4622      	mov	r2, r4
 80016f8:	4641      	mov	r1, r8
 80016fa:	fba2 1201 	umull	r1, r2, r2, r1
 80016fe:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001702:	460a      	mov	r2, r1
 8001704:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001708:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800170c:	4413      	add	r3, r2
 800170e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800171e:	4629      	mov	r1, r5
 8001720:	104a      	asrs	r2, r1, #1
 8001722:	4629      	mov	r1, r5
 8001724:	17cb      	asrs	r3, r1, #31
 8001726:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 800172a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800172e:	4313      	orrs	r3, r2
 8001730:	d110      	bne.n	8001754 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001732:	2300      	movs	r3, #0
 8001734:	e154      	b.n	80019e0 <BME280_compensate_P_int64+0x574>
 8001736:	bf00      	nop
 8001738:	20000260 	.word	0x20000260
 800173c:	20000250 	.word	0x20000250
 8001740:	2000024e 	.word	0x2000024e
 8001744:	2000024c 	.word	0x2000024c
 8001748:	2000024a 	.word	0x2000024a
 800174c:	20000248 	.word	0x20000248
 8001750:	2000023e 	.word	0x2000023e
	}
	p = 1048576-adc_P;
 8001754:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001758:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800175c:	17da      	asrs	r2, r3, #31
 800175e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001760:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001762:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001766:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800176a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800176e:	105b      	asrs	r3, r3, #1
 8001770:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001774:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001778:	07db      	lsls	r3, r3, #31
 800177a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800177e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001782:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001786:	4621      	mov	r1, r4
 8001788:	1a89      	subs	r1, r1, r2
 800178a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800178c:	4629      	mov	r1, r5
 800178e:	eb61 0303 	sbc.w	r3, r1, r3
 8001792:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001794:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001798:	4622      	mov	r2, r4
 800179a:	462b      	mov	r3, r5
 800179c:	1891      	adds	r1, r2, r2
 800179e:	6239      	str	r1, [r7, #32]
 80017a0:	415b      	adcs	r3, r3
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017a8:	4621      	mov	r1, r4
 80017aa:	1851      	adds	r1, r2, r1
 80017ac:	61b9      	str	r1, [r7, #24]
 80017ae:	4629      	mov	r1, r5
 80017b0:	414b      	adcs	r3, r1
 80017b2:	61fb      	str	r3, [r7, #28]
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80017c0:	4649      	mov	r1, r9
 80017c2:	018b      	lsls	r3, r1, #6
 80017c4:	4641      	mov	r1, r8
 80017c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ca:	4641      	mov	r1, r8
 80017cc:	018a      	lsls	r2, r1, #6
 80017ce:	4641      	mov	r1, r8
 80017d0:	1889      	adds	r1, r1, r2
 80017d2:	6139      	str	r1, [r7, #16]
 80017d4:	4649      	mov	r1, r9
 80017d6:	eb43 0101 	adc.w	r1, r3, r1
 80017da:	6179      	str	r1, [r7, #20]
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80017e8:	4649      	mov	r1, r9
 80017ea:	008b      	lsls	r3, r1, #2
 80017ec:	4641      	mov	r1, r8
 80017ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017f2:	4641      	mov	r1, r8
 80017f4:	008a      	lsls	r2, r1, #2
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
 80017fa:	4603      	mov	r3, r0
 80017fc:	4622      	mov	r2, r4
 80017fe:	189b      	adds	r3, r3, r2
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	460b      	mov	r3, r1
 8001804:	462a      	mov	r2, r5
 8001806:	eb42 0303 	adc.w	r3, r2, r3
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001818:	4649      	mov	r1, r9
 800181a:	008b      	lsls	r3, r1, #2
 800181c:	4641      	mov	r1, r8
 800181e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001822:	4641      	mov	r1, r8
 8001824:	008a      	lsls	r2, r1, #2
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	4603      	mov	r3, r0
 800182c:	4622      	mov	r2, r4
 800182e:	189b      	adds	r3, r3, r2
 8001830:	673b      	str	r3, [r7, #112]	@ 0x70
 8001832:	462b      	mov	r3, r5
 8001834:	460a      	mov	r2, r1
 8001836:	eb42 0303 	adc.w	r3, r2, r3
 800183a:	677b      	str	r3, [r7, #116]	@ 0x74
 800183c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001840:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001844:	f7ff fa00 	bl	8000c48 <__aeabi_ldivmod>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001850:	4b66      	ldr	r3, [pc, #408]	@ (80019ec <BME280_compensate_P_int64+0x580>)
 8001852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001856:	b21b      	sxth	r3, r3
 8001858:	17da      	asrs	r2, r3, #31
 800185a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800185c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800185e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001862:	f04f 0000 	mov.w	r0, #0
 8001866:	f04f 0100 	mov.w	r1, #0
 800186a:	0b50      	lsrs	r0, r2, #13
 800186c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001870:	1359      	asrs	r1, r3, #13
 8001872:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001876:	462b      	mov	r3, r5
 8001878:	fb00 f203 	mul.w	r2, r0, r3
 800187c:	4623      	mov	r3, r4
 800187e:	fb03 f301 	mul.w	r3, r3, r1
 8001882:	4413      	add	r3, r2
 8001884:	4622      	mov	r2, r4
 8001886:	fba2 1200 	umull	r1, r2, r2, r0
 800188a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800188e:	460a      	mov	r2, r1
 8001890:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001894:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001898:	4413      	add	r3, r2
 800189a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800189e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80018a2:	f04f 0000 	mov.w	r0, #0
 80018a6:	f04f 0100 	mov.w	r1, #0
 80018aa:	0b50      	lsrs	r0, r2, #13
 80018ac:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018b0:	1359      	asrs	r1, r3, #13
 80018b2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80018b6:	462b      	mov	r3, r5
 80018b8:	fb00 f203 	mul.w	r2, r0, r3
 80018bc:	4623      	mov	r3, r4
 80018be:	fb03 f301 	mul.w	r3, r3, r1
 80018c2:	4413      	add	r3, r2
 80018c4:	4622      	mov	r2, r4
 80018c6:	fba2 1200 	umull	r1, r2, r2, r0
 80018ca:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80018ce:	460a      	mov	r2, r1
 80018d0:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80018d4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80018d8:	4413      	add	r3, r2
 80018da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80018ea:	4621      	mov	r1, r4
 80018ec:	0e4a      	lsrs	r2, r1, #25
 80018ee:	4629      	mov	r1, r5
 80018f0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80018f4:	4629      	mov	r1, r5
 80018f6:	164b      	asrs	r3, r1, #25
 80018f8:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80018fc:	4b3c      	ldr	r3, [pc, #240]	@ (80019f0 <BME280_compensate_P_int64+0x584>)
 80018fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001902:	b21b      	sxth	r3, r3
 8001904:	17da      	asrs	r2, r3, #31
 8001906:	663b      	str	r3, [r7, #96]	@ 0x60
 8001908:	667a      	str	r2, [r7, #100]	@ 0x64
 800190a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800190e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001912:	462a      	mov	r2, r5
 8001914:	fb02 f203 	mul.w	r2, r2, r3
 8001918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800191c:	4621      	mov	r1, r4
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	4413      	add	r3, r2
 8001924:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001928:	4621      	mov	r1, r4
 800192a:	fba2 1201 	umull	r1, r2, r2, r1
 800192e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001932:	460a      	mov	r2, r1
 8001934:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001938:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800193c:	4413      	add	r3, r2
 800193e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 800194e:	4621      	mov	r1, r4
 8001950:	0cca      	lsrs	r2, r1, #19
 8001952:	4629      	mov	r1, r5
 8001954:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001958:	4629      	mov	r1, r5
 800195a:	14cb      	asrs	r3, r1, #19
 800195c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001960:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001964:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001968:	1884      	adds	r4, r0, r2
 800196a:	65bc      	str	r4, [r7, #88]	@ 0x58
 800196c:	eb41 0303 	adc.w	r3, r1, r3
 8001970:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001972:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001976:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800197a:	4621      	mov	r1, r4
 800197c:	1889      	adds	r1, r1, r2
 800197e:	6539      	str	r1, [r7, #80]	@ 0x50
 8001980:	4629      	mov	r1, r5
 8001982:	eb43 0101 	adc.w	r1, r3, r1
 8001986:	6579      	str	r1, [r7, #84]	@ 0x54
 8001988:	f04f 0000 	mov.w	r0, #0
 800198c:	f04f 0100 	mov.w	r1, #0
 8001990:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001994:	4623      	mov	r3, r4
 8001996:	0a18      	lsrs	r0, r3, #8
 8001998:	462b      	mov	r3, r5
 800199a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800199e:	462b      	mov	r3, r5
 80019a0:	1219      	asrs	r1, r3, #8
 80019a2:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <BME280_compensate_P_int64+0x588>)
 80019a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	17da      	asrs	r2, r3, #31
 80019ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019ae:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80019bc:	464c      	mov	r4, r9
 80019be:	0123      	lsls	r3, r4, #4
 80019c0:	4644      	mov	r4, r8
 80019c2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80019c6:	4644      	mov	r4, r8
 80019c8:	0122      	lsls	r2, r4, #4
 80019ca:	1884      	adds	r4, r0, r2
 80019cc:	603c      	str	r4, [r7, #0]
 80019ce:	eb41 0303 	adc.w	r3, r1, r3
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019d8:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 80019dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80019e6:	46bd      	mov	sp, r7
 80019e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ec:	20000256 	.word	0x20000256
 80019f0:	20000254 	.word	0x20000254
 80019f4:	20000252 	.word	0x20000252

080019f8 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001a00:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab4 <bme280_compensate_H_int32+0xbc>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001a08:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	039a      	lsls	r2, r3, #14
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab8 <bme280_compensate_H_int32+0xc0>)
 8001a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a14:	051b      	lsls	r3, r3, #20
 8001a16:	1ad2      	subs	r2, r2, r3
 8001a18:	4b28      	ldr	r3, [pc, #160]	@ (8001abc <bme280_compensate_H_int32+0xc4>)
 8001a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a28:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a2c:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a2e:	4a24      	ldr	r2, [pc, #144]	@ (8001ac0 <bme280_compensate_H_int32+0xc8>)
 8001a30:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a34:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a3c:	1292      	asrs	r2, r2, #10
 8001a3e:	4921      	ldr	r1, [pc, #132]	@ (8001ac4 <bme280_compensate_H_int32+0xcc>)
 8001a40:	8809      	ldrh	r1, [r1, #0]
 8001a42:	4608      	mov	r0, r1
 8001a44:	68f9      	ldr	r1, [r7, #12]
 8001a46:	fb00 f101 	mul.w	r1, r0, r1
 8001a4a:	12c9      	asrs	r1, r1, #11
 8001a4c:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001a50:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001a54:	1292      	asrs	r2, r2, #10
 8001a56:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001a5a:	491b      	ldr	r1, [pc, #108]	@ (8001ac8 <bme280_compensate_H_int32+0xd0>)
 8001a5c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001a60:	fb01 f202 	mul.w	r2, r1, r2
 8001a64:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
					8192) >> 14));
 8001a68:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a6a:	fb02 f303 	mul.w	r3, r2, r3
 8001a6e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	13db      	asrs	r3, r3, #15
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	13d2      	asrs	r2, r2, #15
 8001a78:	fb02 f303 	mul.w	r3, r2, r3
 8001a7c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001a7e:	4a13      	ldr	r2, [pc, #76]	@ (8001acc <bme280_compensate_H_int32+0xd4>)
 8001a80:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a82:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001a86:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a94:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001a9c:	bfa8      	it	ge
 8001a9e:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001aa2:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	131b      	asrs	r3, r3, #12
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	20000260 	.word	0x20000260
 8001ab8:	2000025a 	.word	0x2000025a
 8001abc:	2000025c 	.word	0x2000025c
 8001ac0:	2000025e 	.word	0x2000025e
 8001ac4:	20000242 	.word	0x20000242
 8001ac8:	20000258 	.word	0x20000258
 8001acc:	20000240 	.word	0x20000240

08001ad0 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001ad4:	f7ff fc38 	bl	8001348 <BMEReadRaw>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d16c      	bne.n	8001bb8 <BME280_Measure+0xe8>
	{
		  if (tRaw == 0x800000) SD.Temperature = 0; // value in case temp measurement was disabled
 8001ade:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd4 <BME280_Measure+0x104>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ae6:	d104      	bne.n	8001af2 <BME280_Measure+0x22>
 8001ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd8 <BME280_Measure+0x108>)
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e016      	b.n	8001b20 <BME280_Measure+0x50>
		  else
		  {
			  SD.Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001af2:	4b38      	ldr	r3, [pc, #224]	@ (8001bd4 <BME280_Measure+0x104>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fc76 	bl	80013e8 <BME280_compensate_T_int32>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fd10 	bl	8000524 <__aeabi_i2d>
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	4b34      	ldr	r3, [pc, #208]	@ (8001bdc <BME280_Measure+0x10c>)
 8001b0a:	f7fe fe9f 	bl	800084c <__aeabi_ddiv>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	f7ff f847 	bl	8000ba8 <__aeabi_d2f>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4a2e      	ldr	r2, [pc, #184]	@ (8001bd8 <BME280_Measure+0x108>)
 8001b1e:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) SD.Pressure = 0; // value in case temp measurement was disabled
 8001b20:	4b2f      	ldr	r3, [pc, #188]	@ (8001be0 <BME280_Measure+0x110>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b28:	d104      	bne.n	8001b34 <BME280_Measure+0x64>
 8001b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd8 <BME280_Measure+0x108>)
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	e01f      	b.n	8001b74 <BME280_Measure+0xa4>
		  else
		  {
#if SUPPORT_64BIT
			  SD.Pressure = (((BME280_compensate_P_int64 (pRaw))/256.0)/1000);  // as per datasheet, the pressure is x256
 8001b34:	4b2a      	ldr	r3, [pc, #168]	@ (8001be0 <BME280_Measure+0x110>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fc97 	bl	800146c <BME280_compensate_P_int64>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fcdf 	bl	8000504 <__aeabi_ui2d>
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	4b26      	ldr	r3, [pc, #152]	@ (8001be4 <BME280_Measure+0x114>)
 8001b4c:	f7fe fe7e 	bl	800084c <__aeabi_ddiv>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	4b22      	ldr	r3, [pc, #136]	@ (8001be8 <BME280_Measure+0x118>)
 8001b5e:	f7fe fe75 	bl	800084c <__aeabi_ddiv>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f7ff f81d 	bl	8000ba8 <__aeabi_d2f>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4a19      	ldr	r2, [pc, #100]	@ (8001bd8 <BME280_Measure+0x108>)
 8001b72:	6053      	str	r3, [r2, #4]
			  SD.Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) SD.Humidity = 0; // value in case temp measurement was disabled
 8001b74:	4b1d      	ldr	r3, [pc, #116]	@ (8001bec <BME280_Measure+0x11c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b7c:	d104      	bne.n	8001b88 <BME280_Measure+0xb8>
 8001b7e:	4b16      	ldr	r3, [pc, #88]	@ (8001bd8 <BME280_Measure+0x108>)
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
	// if the device is detached
	else
	{
		SD.Temperature = SD.Pressure = SD.Humidity = 0;
	}
}
 8001b86:	e023      	b.n	8001bd0 <BME280_Measure+0x100>
			  SD.Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001b88:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <BME280_Measure+0x11c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff33 	bl	80019f8 <bme280_compensate_H_int32>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fcb5 	bl	8000504 <__aeabi_ui2d>
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	4b14      	ldr	r3, [pc, #80]	@ (8001bf0 <BME280_Measure+0x120>)
 8001ba0:	f7fe fe54 	bl	800084c <__aeabi_ddiv>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	f7fe fffc 	bl	8000ba8 <__aeabi_d2f>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4a09      	ldr	r2, [pc, #36]	@ (8001bd8 <BME280_Measure+0x108>)
 8001bb4:	6093      	str	r3, [r2, #8]
}
 8001bb6:	e00b      	b.n	8001bd0 <BME280_Measure+0x100>
		SD.Temperature = SD.Pressure = SD.Humidity = 0;
 8001bb8:	4b07      	ldr	r3, [pc, #28]	@ (8001bd8 <BME280_Measure+0x108>)
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <BME280_Measure+0x108>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	4a04      	ldr	r2, [pc, #16]	@ (8001bd8 <BME280_Measure+0x108>)
 8001bc6:	6053      	str	r3, [r2, #4]
 8001bc8:	4b03      	ldr	r3, [pc, #12]	@ (8001bd8 <BME280_Measure+0x108>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	4a02      	ldr	r2, [pc, #8]	@ (8001bd8 <BME280_Measure+0x108>)
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000230 	.word	0x20000230
 8001bd8:	20000204 	.word	0x20000204
 8001bdc:	40590000 	.word	0x40590000
 8001be0:	20000234 	.word	0x20000234
 8001be4:	40700000 	.word	0x40700000
 8001be8:	408f4000 	.word	0x408f4000
 8001bec:	20000238 	.word	0x20000238
 8001bf0:	40900000 	.word	0x40900000
 8001bf4:	00000000 	.word	0x00000000

08001bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bfc:	b092      	sub	sp, #72	@ 0x48
 8001bfe:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c00:	f000 fd82 	bl	8002708 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c04:	f000 f978 	bl	8001ef8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c08:	f000 fa7e 	bl	8002108 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001c0c:	f000 f9d2 	bl	8001fb4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001c10:	f000 fa22 	bl	8002058 <MX_I2C1_Init>
  MX_UART5_Init();
 8001c14:	f000 fa4e 	bl	80020b4 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);//Setting The Modes and Overlasampling in BME280
 8001c18:	2304      	movs	r3, #4
 8001c1a:	9301      	str	r3, [sp, #4]
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	9300      	str	r3, [sp, #0]
 8001c20:	2303      	movs	r3, #3
 8001c22:	2201      	movs	r2, #1
 8001c24:	2105      	movs	r1, #5
 8001c26:	2002      	movs	r0, #2
 8001c28:	f7ff fab8 	bl	800119c <BME280_Config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8001c2c:	48a2      	ldr	r0, [pc, #648]	@ (8001eb8 <main+0x2c0>)
 8001c2e:	f000 fe45 	bl	80028bc <HAL_ADC_Start>
	  BME280_Measure();//Measuring (THP-values) from sensor
 8001c32:	f7ff ff4d 	bl	8001ad0 <BME280_Measure>

	 // HAL_ADC_PollForConversion(&hadc1, 10);//waiting for conversion completion (timeout in milliseconds)
	 // SD.ADC_Data=HAL_ADC_GetValue(&hadc1);
	 // Above Poll API Pauses the ADC So we are using it only ones for checking if the value is converted or not
	  if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8001c36:	210a      	movs	r1, #10
 8001c38:	489f      	ldr	r0, [pc, #636]	@ (8001eb8 <main+0x2c0>)
 8001c3a:	f000 ff11 	bl	8002a60 <HAL_ADC_PollForConversion>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d107      	bne.n	8001c54 <main+0x5c>
	  {
		  SD.ADC_Value = HAL_ADC_GetValue(&hadc1);
 8001c44:	489c      	ldr	r0, [pc, #624]	@ (8001eb8 <main+0x2c0>)
 8001c46:	f000 ff96 	bl	8002b76 <HAL_ADC_GetValue>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	b29a      	uxth	r2, r3
 8001c4e:	4b9b      	ldr	r3, [pc, #620]	@ (8001ebc <main+0x2c4>)
 8001c50:	819a      	strh	r2, [r3, #12]
 8001c52:	e002      	b.n	8001c5a <main+0x62>
	  }// Get ADC value
	  else
	  {
		  SD.ADC_Value=0;
 8001c54:	4b99      	ldr	r3, [pc, #612]	@ (8001ebc <main+0x2c4>)
 8001c56:	2200      	movs	r2, #0
 8001c58:	819a      	strh	r2, [r3, #12]
	  }
	    // Convert ADC Value to Voltage (for 5V sensor Vcc)
	  SD.mq135_voltage = (SD.ADC_Value * 5.0) / 4095.0;
 8001c5a:	4b98      	ldr	r3, [pc, #608]	@ (8001ebc <main+0x2c4>)
 8001c5c:	899b      	ldrh	r3, [r3, #12]
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f7fe fc60 	bl	8000524 <__aeabi_i2d>
 8001c64:	f04f 0200 	mov.w	r2, #0
 8001c68:	4b95      	ldr	r3, [pc, #596]	@ (8001ec0 <main+0x2c8>)
 8001c6a:	f7fe fcc5 	bl	80005f8 <__aeabi_dmul>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	460b      	mov	r3, r1
 8001c72:	4610      	mov	r0, r2
 8001c74:	4619      	mov	r1, r3
 8001c76:	a38a      	add	r3, pc, #552	@ (adr r3, 8001ea0 <main+0x2a8>)
 8001c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c7c:	f7fe fde6 	bl	800084c <__aeabi_ddiv>
 8001c80:	4602      	mov	r2, r0
 8001c82:	460b      	mov	r3, r1
 8001c84:	4610      	mov	r0, r2
 8001c86:	4619      	mov	r1, r3
 8001c88:	f7fe ff8e 	bl	8000ba8 <__aeabi_d2f>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	4a8b      	ldr	r2, [pc, #556]	@ (8001ebc <main+0x2c4>)
 8001c90:	6113      	str	r3, [r2, #16]

	    // Calculate Sensor Resistance (Rs)
	  SD.Rs = ((5.0 - SD.mq135_voltage) / SD.mq135_voltage) * RL;
 8001c92:	4b8a      	ldr	r3, [pc, #552]	@ (8001ebc <main+0x2c4>)
 8001c94:	691b      	ldr	r3, [r3, #16]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7fe fc56 	bl	8000548 <__aeabi_f2d>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	f04f 0000 	mov.w	r0, #0
 8001ca4:	4986      	ldr	r1, [pc, #536]	@ (8001ec0 <main+0x2c8>)
 8001ca6:	f7fe faef 	bl	8000288 <__aeabi_dsub>
 8001caa:	4602      	mov	r2, r0
 8001cac:	460b      	mov	r3, r1
 8001cae:	4614      	mov	r4, r2
 8001cb0:	461d      	mov	r5, r3
 8001cb2:	4b82      	ldr	r3, [pc, #520]	@ (8001ebc <main+0x2c4>)
 8001cb4:	691b      	ldr	r3, [r3, #16]
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	f7fe fc46 	bl	8000548 <__aeabi_f2d>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	460b      	mov	r3, r1
 8001cc0:	4620      	mov	r0, r4
 8001cc2:	4629      	mov	r1, r5
 8001cc4:	f7fe fdc2 	bl	800084c <__aeabi_ddiv>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	460b      	mov	r3, r1
 8001ccc:	4610      	mov	r0, r2
 8001cce:	4619      	mov	r1, r3
 8001cd0:	f04f 0200 	mov.w	r2, #0
 8001cd4:	4b7b      	ldr	r3, [pc, #492]	@ (8001ec4 <main+0x2cc>)
 8001cd6:	f7fe fc8f 	bl	80005f8 <__aeabi_dmul>
 8001cda:	4602      	mov	r2, r0
 8001cdc:	460b      	mov	r3, r1
 8001cde:	4610      	mov	r0, r2
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	f7fe ff61 	bl	8000ba8 <__aeabi_d2f>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4a74      	ldr	r2, [pc, #464]	@ (8001ebc <main+0x2c4>)
 8001cea:	6153      	str	r3, [r2, #20]

	  SD.Co2     = calculate_ppm(SD.Rs, R0_CO2, A_CO2, B_CO2);
 8001cec:	4b73      	ldr	r3, [pc, #460]	@ (8001ebc <main+0x2c4>)
 8001cee:	edd3 7a05 	vldr	s15, [r3, #20]
 8001cf2:	eddf 1a75 	vldr	s3, [pc, #468]	@ 8001ec8 <main+0x2d0>
 8001cf6:	ed9f 1a75 	vldr	s2, [pc, #468]	@ 8001ecc <main+0x2d4>
 8001cfa:	eddf 0a75 	vldr	s1, [pc, #468]	@ 8001ed0 <main+0x2d8>
 8001cfe:	eeb0 0a67 	vmov.f32	s0, s15
 8001d02:	f000 fa6f 	bl	80021e4 <calculate_ppm>
 8001d06:	eef0 7a40 	vmov.f32	s15, s0
 8001d0a:	4b6c      	ldr	r3, [pc, #432]	@ (8001ebc <main+0x2c4>)
 8001d0c:	edc3 7a06 	vstr	s15, [r3, #24]
	  SD.NH3 = calculate_ppm(SD.Rs, R0_NH3, A_NH3, B_NH3);
 8001d10:	4b6a      	ldr	r3, [pc, #424]	@ (8001ebc <main+0x2c4>)
 8001d12:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d16:	eddf 1a6f 	vldr	s3, [pc, #444]	@ 8001ed4 <main+0x2dc>
 8001d1a:	ed9f 1a6f 	vldr	s2, [pc, #444]	@ 8001ed8 <main+0x2e0>
 8001d1e:	eddf 0a6f 	vldr	s1, [pc, #444]	@ 8001edc <main+0x2e4>
 8001d22:	eeb0 0a67 	vmov.f32	s0, s15
 8001d26:	f000 fa5d 	bl	80021e4 <calculate_ppm>
 8001d2a:	eef0 7a40 	vmov.f32	s15, s0
 8001d2e:	4b63      	ldr	r3, [pc, #396]	@ (8001ebc <main+0x2c4>)
 8001d30:	edc3 7a07 	vstr	s15, [r3, #28]
	  SD.Ethanol = calculate_ppm(SD.Rs, R0_Ethanol, A_Ethanol, B_Ethanol);
 8001d34:	4b61      	ldr	r3, [pc, #388]	@ (8001ebc <main+0x2c4>)
 8001d36:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d3a:	eddf 1a69 	vldr	s3, [pc, #420]	@ 8001ee0 <main+0x2e8>
 8001d3e:	ed9f 1a69 	vldr	s2, [pc, #420]	@ 8001ee4 <main+0x2ec>
 8001d42:	eef0 0a0e 	vmov.f32	s1, #14	@ 0x40700000  3.750
 8001d46:	eeb0 0a67 	vmov.f32	s0, s15
 8001d4a:	f000 fa4b 	bl	80021e4 <calculate_ppm>
 8001d4e:	eef0 7a40 	vmov.f32	s15, s0
 8001d52:	4b5a      	ldr	r3, [pc, #360]	@ (8001ebc <main+0x2c4>)
 8001d54:	edc3 7a08 	vstr	s15, [r3, #32]
	  SD.AQI = ((SD.Co2 / 10) * 0.4) + ((SD.NH3 * 100) * 0.3) + ((SD.Ethanol * 100) * 0.3);
 8001d58:	4b58      	ldr	r3, [pc, #352]	@ (8001ebc <main+0x2c4>)
 8001d5a:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d5e:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001d62:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d66:	ee16 0a90 	vmov	r0, s13
 8001d6a:	f7fe fbed 	bl	8000548 <__aeabi_f2d>
 8001d6e:	a34e      	add	r3, pc, #312	@ (adr r3, 8001ea8 <main+0x2b0>)
 8001d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d74:	f7fe fc40 	bl	80005f8 <__aeabi_dmul>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	460b      	mov	r3, r1
 8001d7c:	4614      	mov	r4, r2
 8001d7e:	461d      	mov	r5, r3
 8001d80:	4b4e      	ldr	r3, [pc, #312]	@ (8001ebc <main+0x2c4>)
 8001d82:	edd3 7a07 	vldr	s15, [r3, #28]
 8001d86:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8001ee8 <main+0x2f0>
 8001d8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d8e:	ee17 0a90 	vmov	r0, s15
 8001d92:	f7fe fbd9 	bl	8000548 <__aeabi_f2d>
 8001d96:	a346      	add	r3, pc, #280	@ (adr r3, 8001eb0 <main+0x2b8>)
 8001d98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d9c:	f7fe fc2c 	bl	80005f8 <__aeabi_dmul>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4620      	mov	r0, r4
 8001da6:	4629      	mov	r1, r5
 8001da8:	f7fe fa70 	bl	800028c <__adddf3>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4614      	mov	r4, r2
 8001db2:	461d      	mov	r5, r3
 8001db4:	4b41      	ldr	r3, [pc, #260]	@ (8001ebc <main+0x2c4>)
 8001db6:	edd3 7a08 	vldr	s15, [r3, #32]
 8001dba:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001ee8 <main+0x2f0>
 8001dbe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dc2:	ee17 0a90 	vmov	r0, s15
 8001dc6:	f7fe fbbf 	bl	8000548 <__aeabi_f2d>
 8001dca:	a339      	add	r3, pc, #228	@ (adr r3, 8001eb0 <main+0x2b8>)
 8001dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd0:	f7fe fc12 	bl	80005f8 <__aeabi_dmul>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4620      	mov	r0, r4
 8001dda:	4629      	mov	r1, r5
 8001ddc:	f7fe fa56 	bl	800028c <__adddf3>
 8001de0:	4602      	mov	r2, r0
 8001de2:	460b      	mov	r3, r1
 8001de4:	4610      	mov	r0, r2
 8001de6:	4619      	mov	r1, r3
 8001de8:	f7fe fede 	bl	8000ba8 <__aeabi_d2f>
 8001dec:	4603      	mov	r3, r0
 8001dee:	4a33      	ldr	r2, [pc, #204]	@ (8001ebc <main+0x2c4>)
 8001df0:	6253      	str	r3, [r2, #36]	@ 0x24

	  sprintf(buff,"Temperature = %.2f\r\nPressure = %.2f\r\nHumidity = %.2f\r\nCo2 = %.2f\r\nAmonia(NH3) = %.2f\r\nEthanol = %.2f\r\nAQI = %.2f\r\n\n",SD.Temperature,SD.Pressure,SD.Humidity,SD.Co2,SD.NH3,SD.Ethanol,SD.AQI);
 8001df2:	4b32      	ldr	r3, [pc, #200]	@ (8001ebc <main+0x2c4>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4618      	mov	r0, r3
 8001df8:	f7fe fba6 	bl	8000548 <__aeabi_f2d>
 8001dfc:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001e00:	4b2e      	ldr	r3, [pc, #184]	@ (8001ebc <main+0x2c4>)
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb9f 	bl	8000548 <__aeabi_f2d>
 8001e0a:	4680      	mov	r8, r0
 8001e0c:	4689      	mov	r9, r1
 8001e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8001ebc <main+0x2c4>)
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f7fe fb98 	bl	8000548 <__aeabi_f2d>
 8001e18:	4682      	mov	sl, r0
 8001e1a:	468b      	mov	fp, r1
 8001e1c:	4b27      	ldr	r3, [pc, #156]	@ (8001ebc <main+0x2c4>)
 8001e1e:	699b      	ldr	r3, [r3, #24]
 8001e20:	4618      	mov	r0, r3
 8001e22:	f7fe fb91 	bl	8000548 <__aeabi_f2d>
 8001e26:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001e2a:	4b24      	ldr	r3, [pc, #144]	@ (8001ebc <main+0x2c4>)
 8001e2c:	69db      	ldr	r3, [r3, #28]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7fe fb8a 	bl	8000548 <__aeabi_f2d>
 8001e34:	e9c7 0100 	strd	r0, r1, [r7]
 8001e38:	4b20      	ldr	r3, [pc, #128]	@ (8001ebc <main+0x2c4>)
 8001e3a:	6a1b      	ldr	r3, [r3, #32]
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	f7fe fb83 	bl	8000548 <__aeabi_f2d>
 8001e42:	4604      	mov	r4, r0
 8001e44:	460d      	mov	r5, r1
 8001e46:	4b1d      	ldr	r3, [pc, #116]	@ (8001ebc <main+0x2c4>)
 8001e48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	f7fe fb7c 	bl	8000548 <__aeabi_f2d>
 8001e50:	4602      	mov	r2, r0
 8001e52:	460b      	mov	r3, r1
 8001e54:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001e58:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001e5c:	ed97 7b00 	vldr	d7, [r7]
 8001e60:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001e64:	ed97 7b02 	vldr	d7, [r7, #8]
 8001e68:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001e6c:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001e70:	e9cd 8900 	strd	r8, r9, [sp]
 8001e74:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001e78:	491c      	ldr	r1, [pc, #112]	@ (8001eec <main+0x2f4>)
 8001e7a:	481d      	ldr	r0, [pc, #116]	@ (8001ef0 <main+0x2f8>)
 8001e7c:	f004 f8e4 	bl	8006048 <siprintf>
	  HAL_UART_Transmit(&huart5, (uint8_t *)buff, strlen(buff), 10);
 8001e80:	481b      	ldr	r0, [pc, #108]	@ (8001ef0 <main+0x2f8>)
 8001e82:	f7fe f9f5 	bl	8000270 <strlen>
 8001e86:	4603      	mov	r3, r0
 8001e88:	b29a      	uxth	r2, r3
 8001e8a:	230a      	movs	r3, #10
 8001e8c:	4918      	ldr	r1, [pc, #96]	@ (8001ef0 <main+0x2f8>)
 8001e8e:	4819      	ldr	r0, [pc, #100]	@ (8001ef4 <main+0x2fc>)
 8001e90:	f003 f804 	bl	8004e9c <HAL_UART_Transmit>
	  HAL_Delay(500);
 8001e94:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001e98:	f000 fca8 	bl	80027ec <HAL_Delay>
	  HAL_ADC_Start(&hadc1);
 8001e9c:	e6c6      	b.n	8001c2c <main+0x34>
 8001e9e:	bf00      	nop
 8001ea0:	00000000 	.word	0x00000000
 8001ea4:	40affe00 	.word	0x40affe00
 8001ea8:	9999999a 	.word	0x9999999a
 8001eac:	3fd99999 	.word	0x3fd99999
 8001eb0:	33333333 	.word	0x33333333
 8001eb4:	3fd33333 	.word	0x3fd33333
 8001eb8:	20000264 	.word	0x20000264
 8001ebc:	20000204 	.word	0x20000204
 8001ec0:	40140000 	.word	0x40140000
 8001ec4:	40240000 	.word	0x40240000
 8001ec8:	c03137de 	.word	0xc03137de
 8001ecc:	42e93442 	.word	0x42e93442
 8001ed0:	423e0000 	.word	0x423e0000
 8001ed4:	c01e45a2 	.word	0xc01e45a2
 8001ed8:	42cc6666 	.word	0x42cc6666
 8001edc:	3fee147b 	.word	0x3fee147b
 8001ee0:	c04b851f 	.word	0xc04b851f
 8001ee4:	429a828f 	.word	0x429a828f
 8001ee8:	42c80000 	.word	0x42c80000
 8001eec:	08009178 	.word	0x08009178
 8001ef0:	20000348 	.word	0x20000348
 8001ef4:	20000300 	.word	0x20000300

08001ef8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b094      	sub	sp, #80	@ 0x50
 8001efc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001efe:	f107 0320 	add.w	r3, r7, #32
 8001f02:	2230      	movs	r2, #48	@ 0x30
 8001f04:	2100      	movs	r1, #0
 8001f06:	4618      	mov	r0, r3
 8001f08:	f004 f901 	bl	800610e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f0c:	f107 030c 	add.w	r3, r7, #12
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	60bb      	str	r3, [r7, #8]
 8001f20:	4b22      	ldr	r3, [pc, #136]	@ (8001fac <SystemClock_Config+0xb4>)
 8001f22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f24:	4a21      	ldr	r2, [pc, #132]	@ (8001fac <SystemClock_Config+0xb4>)
 8001f26:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f2a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f2c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fac <SystemClock_Config+0xb4>)
 8001f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f30:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f38:	2300      	movs	r3, #0
 8001f3a:	607b      	str	r3, [r7, #4]
 8001f3c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fb0 <SystemClock_Config+0xb8>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a1b      	ldr	r2, [pc, #108]	@ (8001fb0 <SystemClock_Config+0xb8>)
 8001f42:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f46:	6013      	str	r3, [r2, #0]
 8001f48:	4b19      	ldr	r3, [pc, #100]	@ (8001fb0 <SystemClock_Config+0xb8>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f50:	607b      	str	r3, [r7, #4]
 8001f52:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f54:	2302      	movs	r3, #2
 8001f56:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f58:	2301      	movs	r3, #1
 8001f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f5c:	2310      	movs	r3, #16
 8001f5e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f60:	2300      	movs	r3, #0
 8001f62:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f64:	f107 0320 	add.w	r3, r7, #32
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f002 faef 	bl	800454c <HAL_RCC_OscConfig>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d001      	beq.n	8001f78 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001f74:	f000 f973 	bl	800225e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f78:	230f      	movs	r3, #15
 8001f7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f80:	2300      	movs	r3, #0
 8001f82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001f84:	2300      	movs	r3, #0
 8001f86:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001f8c:	f107 030c 	add.w	r3, r7, #12
 8001f90:	2100      	movs	r1, #0
 8001f92:	4618      	mov	r0, r3
 8001f94:	f002 fd52 	bl	8004a3c <HAL_RCC_ClockConfig>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d001      	beq.n	8001fa2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001f9e:	f000 f95e 	bl	800225e <Error_Handler>
  }
}
 8001fa2:	bf00      	nop
 8001fa4:	3750      	adds	r7, #80	@ 0x50
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	40023800 	.word	0x40023800
 8001fb0:	40007000 	.word	0x40007000

08001fb4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fb4:	b580      	push	{r7, lr}
 8001fb6:	b084      	sub	sp, #16
 8001fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fba:	463b      	mov	r3, r7
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	601a      	str	r2, [r3, #0]
 8001fc0:	605a      	str	r2, [r3, #4]
 8001fc2:	609a      	str	r2, [r3, #8]
 8001fc4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001fc6:	4b21      	ldr	r3, [pc, #132]	@ (800204c <MX_ADC1_Init+0x98>)
 8001fc8:	4a21      	ldr	r2, [pc, #132]	@ (8002050 <MX_ADC1_Init+0x9c>)
 8001fca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001fcc:	4b1f      	ldr	r3, [pc, #124]	@ (800204c <MX_ADC1_Init+0x98>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001fd2:	4b1e      	ldr	r3, [pc, #120]	@ (800204c <MX_ADC1_Init+0x98>)
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001fd8:	4b1c      	ldr	r3, [pc, #112]	@ (800204c <MX_ADC1_Init+0x98>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001fde:	4b1b      	ldr	r3, [pc, #108]	@ (800204c <MX_ADC1_Init+0x98>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001fe4:	4b19      	ldr	r3, [pc, #100]	@ (800204c <MX_ADC1_Init+0x98>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001fec:	4b17      	ldr	r3, [pc, #92]	@ (800204c <MX_ADC1_Init+0x98>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001ff2:	4b16      	ldr	r3, [pc, #88]	@ (800204c <MX_ADC1_Init+0x98>)
 8001ff4:	4a17      	ldr	r2, [pc, #92]	@ (8002054 <MX_ADC1_Init+0xa0>)
 8001ff6:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001ff8:	4b14      	ldr	r3, [pc, #80]	@ (800204c <MX_ADC1_Init+0x98>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ffe:	4b13      	ldr	r3, [pc, #76]	@ (800204c <MX_ADC1_Init+0x98>)
 8002000:	2201      	movs	r2, #1
 8002002:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002004:	4b11      	ldr	r3, [pc, #68]	@ (800204c <MX_ADC1_Init+0x98>)
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800200c:	4b0f      	ldr	r3, [pc, #60]	@ (800204c <MX_ADC1_Init+0x98>)
 800200e:	2201      	movs	r2, #1
 8002010:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002012:	480e      	ldr	r0, [pc, #56]	@ (800204c <MX_ADC1_Init+0x98>)
 8002014:	f000 fc0e 	bl	8002834 <HAL_ADC_Init>
 8002018:	4603      	mov	r3, r0
 800201a:	2b00      	cmp	r3, #0
 800201c:	d001      	beq.n	8002022 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800201e:	f000 f91e 	bl	800225e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002022:	2301      	movs	r3, #1
 8002024:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002026:	2301      	movs	r3, #1
 8002028:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800202e:	463b      	mov	r3, r7
 8002030:	4619      	mov	r1, r3
 8002032:	4806      	ldr	r0, [pc, #24]	@ (800204c <MX_ADC1_Init+0x98>)
 8002034:	f000 fdac 	bl	8002b90 <HAL_ADC_ConfigChannel>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800203e:	f000 f90e 	bl	800225e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002042:	bf00      	nop
 8002044:	3710      	adds	r7, #16
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	20000264 	.word	0x20000264
 8002050:	40012000 	.word	0x40012000
 8002054:	0f000001 	.word	0x0f000001

08002058 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800205c:	4b12      	ldr	r3, [pc, #72]	@ (80020a8 <MX_I2C1_Init+0x50>)
 800205e:	4a13      	ldr	r2, [pc, #76]	@ (80020ac <MX_I2C1_Init+0x54>)
 8002060:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002062:	4b11      	ldr	r3, [pc, #68]	@ (80020a8 <MX_I2C1_Init+0x50>)
 8002064:	4a12      	ldr	r2, [pc, #72]	@ (80020b0 <MX_I2C1_Init+0x58>)
 8002066:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002068:	4b0f      	ldr	r3, [pc, #60]	@ (80020a8 <MX_I2C1_Init+0x50>)
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 236;
 800206e:	4b0e      	ldr	r3, [pc, #56]	@ (80020a8 <MX_I2C1_Init+0x50>)
 8002070:	22ec      	movs	r2, #236	@ 0xec
 8002072:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_10BIT;
 8002074:	4b0c      	ldr	r3, [pc, #48]	@ (80020a8 <MX_I2C1_Init+0x50>)
 8002076:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800207a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800207c:	4b0a      	ldr	r3, [pc, #40]	@ (80020a8 <MX_I2C1_Init+0x50>)
 800207e:	2200      	movs	r2, #0
 8002080:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002082:	4b09      	ldr	r3, [pc, #36]	@ (80020a8 <MX_I2C1_Init+0x50>)
 8002084:	2200      	movs	r2, #0
 8002086:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002088:	4b07      	ldr	r3, [pc, #28]	@ (80020a8 <MX_I2C1_Init+0x50>)
 800208a:	2200      	movs	r2, #0
 800208c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800208e:	4b06      	ldr	r3, [pc, #24]	@ (80020a8 <MX_I2C1_Init+0x50>)
 8002090:	2200      	movs	r2, #0
 8002092:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002094:	4804      	ldr	r0, [pc, #16]	@ (80020a8 <MX_I2C1_Init+0x50>)
 8002096:	f001 fa35 	bl	8003504 <HAL_I2C_Init>
 800209a:	4603      	mov	r3, r0
 800209c:	2b00      	cmp	r3, #0
 800209e:	d001      	beq.n	80020a4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020a0:	f000 f8dd 	bl	800225e <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020a4:	bf00      	nop
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	200002ac 	.word	0x200002ac
 80020ac:	40005400 	.word	0x40005400
 80020b0:	000186a0 	.word	0x000186a0

080020b4 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80020b8:	4b11      	ldr	r3, [pc, #68]	@ (8002100 <MX_UART5_Init+0x4c>)
 80020ba:	4a12      	ldr	r2, [pc, #72]	@ (8002104 <MX_UART5_Init+0x50>)
 80020bc:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 80020be:	4b10      	ldr	r3, [pc, #64]	@ (8002100 <MX_UART5_Init+0x4c>)
 80020c0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80020c4:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80020c6:	4b0e      	ldr	r3, [pc, #56]	@ (8002100 <MX_UART5_Init+0x4c>)
 80020c8:	2200      	movs	r2, #0
 80020ca:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80020cc:	4b0c      	ldr	r3, [pc, #48]	@ (8002100 <MX_UART5_Init+0x4c>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80020d2:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <MX_UART5_Init+0x4c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80020d8:	4b09      	ldr	r3, [pc, #36]	@ (8002100 <MX_UART5_Init+0x4c>)
 80020da:	220c      	movs	r2, #12
 80020dc:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020de:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <MX_UART5_Init+0x4c>)
 80020e0:	2200      	movs	r2, #0
 80020e2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80020e4:	4b06      	ldr	r3, [pc, #24]	@ (8002100 <MX_UART5_Init+0x4c>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80020ea:	4805      	ldr	r0, [pc, #20]	@ (8002100 <MX_UART5_Init+0x4c>)
 80020ec:	f002 fe86 	bl	8004dfc <HAL_UART_Init>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80020f6:	f000 f8b2 	bl	800225e <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	20000300 	.word	0x20000300
 8002104:	40005000 	.word	0x40005000

08002108 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b08a      	sub	sp, #40	@ 0x28
 800210c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210e:	f107 0314 	add.w	r3, r7, #20
 8002112:	2200      	movs	r2, #0
 8002114:	601a      	str	r2, [r3, #0]
 8002116:	605a      	str	r2, [r3, #4]
 8002118:	609a      	str	r2, [r3, #8]
 800211a:	60da      	str	r2, [r3, #12]
 800211c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	4b2d      	ldr	r3, [pc, #180]	@ (80021d8 <MX_GPIO_Init+0xd0>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002126:	4a2c      	ldr	r2, [pc, #176]	@ (80021d8 <MX_GPIO_Init+0xd0>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6313      	str	r3, [r2, #48]	@ 0x30
 800212e:	4b2a      	ldr	r3, [pc, #168]	@ (80021d8 <MX_GPIO_Init+0xd0>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800213a:	2300      	movs	r3, #0
 800213c:	60fb      	str	r3, [r7, #12]
 800213e:	4b26      	ldr	r3, [pc, #152]	@ (80021d8 <MX_GPIO_Init+0xd0>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002142:	4a25      	ldr	r2, [pc, #148]	@ (80021d8 <MX_GPIO_Init+0xd0>)
 8002144:	f043 0308 	orr.w	r3, r3, #8
 8002148:	6313      	str	r3, [r2, #48]	@ 0x30
 800214a:	4b23      	ldr	r3, [pc, #140]	@ (80021d8 <MX_GPIO_Init+0xd0>)
 800214c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800214e:	f003 0308 	and.w	r3, r3, #8
 8002152:	60fb      	str	r3, [r7, #12]
 8002154:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002156:	2300      	movs	r3, #0
 8002158:	60bb      	str	r3, [r7, #8]
 800215a:	4b1f      	ldr	r3, [pc, #124]	@ (80021d8 <MX_GPIO_Init+0xd0>)
 800215c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800215e:	4a1e      	ldr	r2, [pc, #120]	@ (80021d8 <MX_GPIO_Init+0xd0>)
 8002160:	f043 0304 	orr.w	r3, r3, #4
 8002164:	6313      	str	r3, [r2, #48]	@ 0x30
 8002166:	4b1c      	ldr	r3, [pc, #112]	@ (80021d8 <MX_GPIO_Init+0xd0>)
 8002168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800216a:	f003 0304 	and.w	r3, r3, #4
 800216e:	60bb      	str	r3, [r7, #8]
 8002170:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002172:	2300      	movs	r3, #0
 8002174:	607b      	str	r3, [r7, #4]
 8002176:	4b18      	ldr	r3, [pc, #96]	@ (80021d8 <MX_GPIO_Init+0xd0>)
 8002178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800217a:	4a17      	ldr	r2, [pc, #92]	@ (80021d8 <MX_GPIO_Init+0xd0>)
 800217c:	f043 0302 	orr.w	r3, r3, #2
 8002180:	6313      	str	r3, [r2, #48]	@ 0x30
 8002182:	4b15      	ldr	r3, [pc, #84]	@ (80021d8 <MX_GPIO_Init+0xd0>)
 8002184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002186:	f003 0302 	and.w	r3, r3, #2
 800218a:	607b      	str	r3, [r7, #4]
 800218c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800218e:	2200      	movs	r2, #0
 8002190:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8002194:	4811      	ldr	r0, [pc, #68]	@ (80021dc <MX_GPIO_Init+0xd4>)
 8002196:	f001 f99b 	bl	80034d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800219a:	2301      	movs	r3, #1
 800219c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800219e:	2300      	movs	r3, #0
 80021a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a2:	2300      	movs	r3, #0
 80021a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021a6:	f107 0314 	add.w	r3, r7, #20
 80021aa:	4619      	mov	r1, r3
 80021ac:	480c      	ldr	r0, [pc, #48]	@ (80021e0 <MX_GPIO_Init+0xd8>)
 80021ae:	f000 fff3 	bl	8003198 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80021b2:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80021b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b8:	2301      	movs	r3, #1
 80021ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021bc:	2300      	movs	r3, #0
 80021be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c0:	2300      	movs	r3, #0
 80021c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021c4:	f107 0314 	add.w	r3, r7, #20
 80021c8:	4619      	mov	r1, r3
 80021ca:	4804      	ldr	r0, [pc, #16]	@ (80021dc <MX_GPIO_Init+0xd4>)
 80021cc:	f000 ffe4 	bl	8003198 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80021d0:	bf00      	nop
 80021d2:	3728      	adds	r7, #40	@ 0x28
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40020c00 	.word	0x40020c00
 80021e0:	40020000 	.word	0x40020000

080021e4 <calculate_ppm>:

/* USER CODE BEGIN 4 */
float calculate_ppm(float Rs, float R0, float A, float B)
{
 80021e4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	ed87 0a03 	vstr	s0, [r7, #12]
 80021f0:	edc7 0a02 	vstr	s1, [r7, #8]
 80021f4:	ed87 1a01 	vstr	s2, [r7, #4]
 80021f8:	edc7 1a00 	vstr	s3, [r7]
    return A * pow((Rs / R0), B);
 80021fc:	6878      	ldr	r0, [r7, #4]
 80021fe:	f7fe f9a3 	bl	8000548 <__aeabi_f2d>
 8002202:	4604      	mov	r4, r0
 8002204:	460d      	mov	r5, r1
 8002206:	ed97 7a03 	vldr	s14, [r7, #12]
 800220a:	edd7 7a02 	vldr	s15, [r7, #8]
 800220e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002212:	ee16 0a90 	vmov	r0, s13
 8002216:	f7fe f997 	bl	8000548 <__aeabi_f2d>
 800221a:	4680      	mov	r8, r0
 800221c:	4689      	mov	r9, r1
 800221e:	6838      	ldr	r0, [r7, #0]
 8002220:	f7fe f992 	bl	8000548 <__aeabi_f2d>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	ec43 2b11 	vmov	d1, r2, r3
 800222c:	ec49 8b10 	vmov	d0, r8, r9
 8002230:	f006 f836 	bl	80082a0 <pow>
 8002234:	ec53 2b10 	vmov	r2, r3, d0
 8002238:	4620      	mov	r0, r4
 800223a:	4629      	mov	r1, r5
 800223c:	f7fe f9dc 	bl	80005f8 <__aeabi_dmul>
 8002240:	4602      	mov	r2, r0
 8002242:	460b      	mov	r3, r1
 8002244:	4610      	mov	r0, r2
 8002246:	4619      	mov	r1, r3
 8002248:	f7fe fcae 	bl	8000ba8 <__aeabi_d2f>
 800224c:	4603      	mov	r3, r0
 800224e:	ee07 3a90 	vmov	s15, r3
}
 8002252:	eeb0 0a67 	vmov.f32	s0, s15
 8002256:	3710      	adds	r7, #16
 8002258:	46bd      	mov	sp, r7
 800225a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

0800225e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800225e:	b480      	push	{r7}
 8002260:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002262:	b672      	cpsid	i
}
 8002264:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002266:	bf00      	nop
 8002268:	e7fd      	b.n	8002266 <Error_Handler+0x8>
	...

0800226c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	607b      	str	r3, [r7, #4]
 8002276:	4b10      	ldr	r3, [pc, #64]	@ (80022b8 <HAL_MspInit+0x4c>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800227a:	4a0f      	ldr	r2, [pc, #60]	@ (80022b8 <HAL_MspInit+0x4c>)
 800227c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002280:	6453      	str	r3, [r2, #68]	@ 0x44
 8002282:	4b0d      	ldr	r3, [pc, #52]	@ (80022b8 <HAL_MspInit+0x4c>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002286:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800228a:	607b      	str	r3, [r7, #4]
 800228c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800228e:	2300      	movs	r3, #0
 8002290:	603b      	str	r3, [r7, #0]
 8002292:	4b09      	ldr	r3, [pc, #36]	@ (80022b8 <HAL_MspInit+0x4c>)
 8002294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002296:	4a08      	ldr	r2, [pc, #32]	@ (80022b8 <HAL_MspInit+0x4c>)
 8002298:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800229c:	6413      	str	r3, [r2, #64]	@ 0x40
 800229e:	4b06      	ldr	r3, [pc, #24]	@ (80022b8 <HAL_MspInit+0x4c>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022a6:	603b      	str	r3, [r7, #0]
 80022a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40023800 	.word	0x40023800

080022bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b08a      	sub	sp, #40	@ 0x28
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022c4:	f107 0314 	add.w	r3, r7, #20
 80022c8:	2200      	movs	r2, #0
 80022ca:	601a      	str	r2, [r3, #0]
 80022cc:	605a      	str	r2, [r3, #4]
 80022ce:	609a      	str	r2, [r3, #8]
 80022d0:	60da      	str	r2, [r3, #12]
 80022d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	4a17      	ldr	r2, [pc, #92]	@ (8002338 <HAL_ADC_MspInit+0x7c>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d127      	bne.n	800232e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80022de:	2300      	movs	r3, #0
 80022e0:	613b      	str	r3, [r7, #16]
 80022e2:	4b16      	ldr	r3, [pc, #88]	@ (800233c <HAL_ADC_MspInit+0x80>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e6:	4a15      	ldr	r2, [pc, #84]	@ (800233c <HAL_ADC_MspInit+0x80>)
 80022e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022ec:	6453      	str	r3, [r2, #68]	@ 0x44
 80022ee:	4b13      	ldr	r3, [pc, #76]	@ (800233c <HAL_ADC_MspInit+0x80>)
 80022f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022f6:	613b      	str	r3, [r7, #16]
 80022f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	60fb      	str	r3, [r7, #12]
 80022fe:	4b0f      	ldr	r3, [pc, #60]	@ (800233c <HAL_ADC_MspInit+0x80>)
 8002300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002302:	4a0e      	ldr	r2, [pc, #56]	@ (800233c <HAL_ADC_MspInit+0x80>)
 8002304:	f043 0301 	orr.w	r3, r3, #1
 8002308:	6313      	str	r3, [r2, #48]	@ 0x30
 800230a:	4b0c      	ldr	r3, [pc, #48]	@ (800233c <HAL_ADC_MspInit+0x80>)
 800230c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800230e:	f003 0301 	and.w	r3, r3, #1
 8002312:	60fb      	str	r3, [r7, #12]
 8002314:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002316:	2302      	movs	r3, #2
 8002318:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800231a:	2303      	movs	r3, #3
 800231c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231e:	2300      	movs	r3, #0
 8002320:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002322:	f107 0314 	add.w	r3, r7, #20
 8002326:	4619      	mov	r1, r3
 8002328:	4805      	ldr	r0, [pc, #20]	@ (8002340 <HAL_ADC_MspInit+0x84>)
 800232a:	f000 ff35 	bl	8003198 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800232e:	bf00      	nop
 8002330:	3728      	adds	r7, #40	@ 0x28
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
 8002336:	bf00      	nop
 8002338:	40012000 	.word	0x40012000
 800233c:	40023800 	.word	0x40023800
 8002340:	40020000 	.word	0x40020000

08002344 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b08a      	sub	sp, #40	@ 0x28
 8002348:	af00      	add	r7, sp, #0
 800234a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800234c:	f107 0314 	add.w	r3, r7, #20
 8002350:	2200      	movs	r2, #0
 8002352:	601a      	str	r2, [r3, #0]
 8002354:	605a      	str	r2, [r3, #4]
 8002356:	609a      	str	r2, [r3, #8]
 8002358:	60da      	str	r2, [r3, #12]
 800235a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a19      	ldr	r2, [pc, #100]	@ (80023c8 <HAL_I2C_MspInit+0x84>)
 8002362:	4293      	cmp	r3, r2
 8002364:	d12b      	bne.n	80023be <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	613b      	str	r3, [r7, #16]
 800236a:	4b18      	ldr	r3, [pc, #96]	@ (80023cc <HAL_I2C_MspInit+0x88>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	4a17      	ldr	r2, [pc, #92]	@ (80023cc <HAL_I2C_MspInit+0x88>)
 8002370:	f043 0302 	orr.w	r3, r3, #2
 8002374:	6313      	str	r3, [r2, #48]	@ 0x30
 8002376:	4b15      	ldr	r3, [pc, #84]	@ (80023cc <HAL_I2C_MspInit+0x88>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	f003 0302 	and.w	r3, r3, #2
 800237e:	613b      	str	r3, [r7, #16]
 8002380:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002382:	23c0      	movs	r3, #192	@ 0xc0
 8002384:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002386:	2312      	movs	r3, #18
 8002388:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800238a:	2300      	movs	r3, #0
 800238c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800238e:	2303      	movs	r3, #3
 8002390:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002392:	2304      	movs	r3, #4
 8002394:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002396:	f107 0314 	add.w	r3, r7, #20
 800239a:	4619      	mov	r1, r3
 800239c:	480c      	ldr	r0, [pc, #48]	@ (80023d0 <HAL_I2C_MspInit+0x8c>)
 800239e:	f000 fefb 	bl	8003198 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80023a2:	2300      	movs	r3, #0
 80023a4:	60fb      	str	r3, [r7, #12]
 80023a6:	4b09      	ldr	r3, [pc, #36]	@ (80023cc <HAL_I2C_MspInit+0x88>)
 80023a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023aa:	4a08      	ldr	r2, [pc, #32]	@ (80023cc <HAL_I2C_MspInit+0x88>)
 80023ac:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80023b0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023b2:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <HAL_I2C_MspInit+0x88>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80023ba:	60fb      	str	r3, [r7, #12]
 80023bc:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 80023be:	bf00      	nop
 80023c0:	3728      	adds	r7, #40	@ 0x28
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	40005400 	.word	0x40005400
 80023cc:	40023800 	.word	0x40023800
 80023d0:	40020400 	.word	0x40020400

080023d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b08a      	sub	sp, #40	@ 0x28
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023dc:	f107 0314 	add.w	r3, r7, #20
 80023e0:	2200      	movs	r2, #0
 80023e2:	601a      	str	r2, [r3, #0]
 80023e4:	605a      	str	r2, [r3, #4]
 80023e6:	609a      	str	r2, [r3, #8]
 80023e8:	60da      	str	r2, [r3, #12]
 80023ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a28      	ldr	r2, [pc, #160]	@ (8002494 <HAL_UART_MspInit+0xc0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d14a      	bne.n	800248c <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	613b      	str	r3, [r7, #16]
 80023fa:	4b27      	ldr	r3, [pc, #156]	@ (8002498 <HAL_UART_MspInit+0xc4>)
 80023fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023fe:	4a26      	ldr	r2, [pc, #152]	@ (8002498 <HAL_UART_MspInit+0xc4>)
 8002400:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002404:	6413      	str	r3, [r2, #64]	@ 0x40
 8002406:	4b24      	ldr	r3, [pc, #144]	@ (8002498 <HAL_UART_MspInit+0xc4>)
 8002408:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800240a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800240e:	613b      	str	r3, [r7, #16]
 8002410:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	60fb      	str	r3, [r7, #12]
 8002416:	4b20      	ldr	r3, [pc, #128]	@ (8002498 <HAL_UART_MspInit+0xc4>)
 8002418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241a:	4a1f      	ldr	r2, [pc, #124]	@ (8002498 <HAL_UART_MspInit+0xc4>)
 800241c:	f043 0304 	orr.w	r3, r3, #4
 8002420:	6313      	str	r3, [r2, #48]	@ 0x30
 8002422:	4b1d      	ldr	r3, [pc, #116]	@ (8002498 <HAL_UART_MspInit+0xc4>)
 8002424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	60bb      	str	r3, [r7, #8]
 8002432:	4b19      	ldr	r3, [pc, #100]	@ (8002498 <HAL_UART_MspInit+0xc4>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002436:	4a18      	ldr	r2, [pc, #96]	@ (8002498 <HAL_UART_MspInit+0xc4>)
 8002438:	f043 0308 	orr.w	r3, r3, #8
 800243c:	6313      	str	r3, [r2, #48]	@ 0x30
 800243e:	4b16      	ldr	r3, [pc, #88]	@ (8002498 <HAL_UART_MspInit+0xc4>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002442:	f003 0308 	and.w	r3, r3, #8
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800244a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800244e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002458:	2303      	movs	r3, #3
 800245a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800245c:	2308      	movs	r3, #8
 800245e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	4619      	mov	r1, r3
 8002466:	480d      	ldr	r0, [pc, #52]	@ (800249c <HAL_UART_MspInit+0xc8>)
 8002468:	f000 fe96 	bl	8003198 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800246c:	2304      	movs	r3, #4
 800246e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002470:	2302      	movs	r3, #2
 8002472:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002478:	2303      	movs	r3, #3
 800247a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800247c:	2308      	movs	r3, #8
 800247e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002480:	f107 0314 	add.w	r3, r7, #20
 8002484:	4619      	mov	r1, r3
 8002486:	4806      	ldr	r0, [pc, #24]	@ (80024a0 <HAL_UART_MspInit+0xcc>)
 8002488:	f000 fe86 	bl	8003198 <HAL_GPIO_Init>

  /* USER CODE END UART5_MspInit 1 */

  }

}
 800248c:	bf00      	nop
 800248e:	3728      	adds	r7, #40	@ 0x28
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	40005000 	.word	0x40005000
 8002498:	40023800 	.word	0x40023800
 800249c:	40020800 	.word	0x40020800
 80024a0:	40020c00 	.word	0x40020c00

080024a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80024a8:	bf00      	nop
 80024aa:	e7fd      	b.n	80024a8 <NMI_Handler+0x4>

080024ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024b0:	bf00      	nop
 80024b2:	e7fd      	b.n	80024b0 <HardFault_Handler+0x4>

080024b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024b8:	bf00      	nop
 80024ba:	e7fd      	b.n	80024b8 <MemManage_Handler+0x4>

080024bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024bc:	b480      	push	{r7}
 80024be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80024c0:	bf00      	nop
 80024c2:	e7fd      	b.n	80024c0 <BusFault_Handler+0x4>

080024c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80024c8:	bf00      	nop
 80024ca:	e7fd      	b.n	80024c8 <UsageFault_Handler+0x4>

080024cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr

080024da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024da:	b480      	push	{r7}
 80024dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024de:	bf00      	nop
 80024e0:	46bd      	mov	sp, r7
 80024e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e6:	4770      	bx	lr

080024e8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024ec:	bf00      	nop
 80024ee:	46bd      	mov	sp, r7
 80024f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f4:	4770      	bx	lr

080024f6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024f6:	b580      	push	{r7, lr}
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024fa:	f000 f957 	bl	80027ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}

08002502 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002502:	b480      	push	{r7}
 8002504:	af00      	add	r7, sp, #0
  return 1;
 8002506:	2301      	movs	r3, #1
}
 8002508:	4618      	mov	r0, r3
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <_kill>:

int _kill(int pid, int sig)
{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
 800251a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800251c:	f003 fe4a 	bl	80061b4 <__errno>
 8002520:	4603      	mov	r3, r0
 8002522:	2216      	movs	r2, #22
 8002524:	601a      	str	r2, [r3, #0]
  return -1;
 8002526:	f04f 33ff 	mov.w	r3, #4294967295
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}

08002532 <_exit>:

void _exit (int status)
{
 8002532:	b580      	push	{r7, lr}
 8002534:	b082      	sub	sp, #8
 8002536:	af00      	add	r7, sp, #0
 8002538:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800253a:	f04f 31ff 	mov.w	r1, #4294967295
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ffe7 	bl	8002512 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002544:	bf00      	nop
 8002546:	e7fd      	b.n	8002544 <_exit+0x12>

08002548 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002548:	b580      	push	{r7, lr}
 800254a:	b086      	sub	sp, #24
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]
 8002558:	e00a      	b.n	8002570 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800255a:	f3af 8000 	nop.w
 800255e:	4601      	mov	r1, r0
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	1c5a      	adds	r2, r3, #1
 8002564:	60ba      	str	r2, [r7, #8]
 8002566:	b2ca      	uxtb	r2, r1
 8002568:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800256a:	697b      	ldr	r3, [r7, #20]
 800256c:	3301      	adds	r3, #1
 800256e:	617b      	str	r3, [r7, #20]
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	429a      	cmp	r2, r3
 8002576:	dbf0      	blt.n	800255a <_read+0x12>
  }

  return len;
 8002578:	687b      	ldr	r3, [r7, #4]
}
 800257a:	4618      	mov	r0, r3
 800257c:	3718      	adds	r7, #24
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}

08002582 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002582:	b580      	push	{r7, lr}
 8002584:	b086      	sub	sp, #24
 8002586:	af00      	add	r7, sp, #0
 8002588:	60f8      	str	r0, [r7, #12]
 800258a:	60b9      	str	r1, [r7, #8]
 800258c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800258e:	2300      	movs	r3, #0
 8002590:	617b      	str	r3, [r7, #20]
 8002592:	e009      	b.n	80025a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	1c5a      	adds	r2, r3, #1
 8002598:	60ba      	str	r2, [r7, #8]
 800259a:	781b      	ldrb	r3, [r3, #0]
 800259c:	4618      	mov	r0, r3
 800259e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	3301      	adds	r3, #1
 80025a6:	617b      	str	r3, [r7, #20]
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	dbf1      	blt.n	8002594 <_write+0x12>
  }
  return len;
 80025b0:	687b      	ldr	r3, [r7, #4]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3718      	adds	r7, #24
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}

080025ba <_close>:

int _close(int file)
{
 80025ba:	b480      	push	{r7}
 80025bc:	b083      	sub	sp, #12
 80025be:	af00      	add	r7, sp, #0
 80025c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80025c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	370c      	adds	r7, #12
 80025ca:	46bd      	mov	sp, r7
 80025cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d0:	4770      	bx	lr

080025d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80025d2:	b480      	push	{r7}
 80025d4:	b083      	sub	sp, #12
 80025d6:	af00      	add	r7, sp, #0
 80025d8:	6078      	str	r0, [r7, #4]
 80025da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80025e2:	605a      	str	r2, [r3, #4]
  return 0;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <_isatty>:

int _isatty(int file)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80025fa:	2301      	movs	r3, #1
}
 80025fc:	4618      	mov	r0, r3
 80025fe:	370c      	adds	r7, #12
 8002600:	46bd      	mov	sp, r7
 8002602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002606:	4770      	bx	lr

08002608 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	60f8      	str	r0, [r7, #12]
 8002610:	60b9      	str	r1, [r7, #8]
 8002612:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3714      	adds	r7, #20
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b086      	sub	sp, #24
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800262c:	4a14      	ldr	r2, [pc, #80]	@ (8002680 <_sbrk+0x5c>)
 800262e:	4b15      	ldr	r3, [pc, #84]	@ (8002684 <_sbrk+0x60>)
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002634:	697b      	ldr	r3, [r7, #20]
 8002636:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002638:	4b13      	ldr	r3, [pc, #76]	@ (8002688 <_sbrk+0x64>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d102      	bne.n	8002646 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002640:	4b11      	ldr	r3, [pc, #68]	@ (8002688 <_sbrk+0x64>)
 8002642:	4a12      	ldr	r2, [pc, #72]	@ (800268c <_sbrk+0x68>)
 8002644:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002646:	4b10      	ldr	r3, [pc, #64]	@ (8002688 <_sbrk+0x64>)
 8002648:	681a      	ldr	r2, [r3, #0]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4413      	add	r3, r2
 800264e:	693a      	ldr	r2, [r7, #16]
 8002650:	429a      	cmp	r2, r3
 8002652:	d207      	bcs.n	8002664 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002654:	f003 fdae 	bl	80061b4 <__errno>
 8002658:	4603      	mov	r3, r0
 800265a:	220c      	movs	r2, #12
 800265c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800265e:	f04f 33ff 	mov.w	r3, #4294967295
 8002662:	e009      	b.n	8002678 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002664:	4b08      	ldr	r3, [pc, #32]	@ (8002688 <_sbrk+0x64>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800266a:	4b07      	ldr	r3, [pc, #28]	@ (8002688 <_sbrk+0x64>)
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	4413      	add	r3, r2
 8002672:	4a05      	ldr	r2, [pc, #20]	@ (8002688 <_sbrk+0x64>)
 8002674:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002676:	68fb      	ldr	r3, [r7, #12]
}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	20020000 	.word	0x20020000
 8002684:	00000400 	.word	0x00000400
 8002688:	200003e0 	.word	0x200003e0
 800268c:	20000538 	.word	0x20000538

08002690 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002690:	b480      	push	{r7}
 8002692:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002694:	4b06      	ldr	r3, [pc, #24]	@ (80026b0 <SystemInit+0x20>)
 8002696:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800269a:	4a05      	ldr	r2, [pc, #20]	@ (80026b0 <SystemInit+0x20>)
 800269c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80026a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026a4:	bf00      	nop
 80026a6:	46bd      	mov	sp, r7
 80026a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ac:	4770      	bx	lr
 80026ae:	bf00      	nop
 80026b0:	e000ed00 	.word	0xe000ed00

080026b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80026b4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80026ec <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80026b8:	f7ff ffea 	bl	8002690 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80026bc:	480c      	ldr	r0, [pc, #48]	@ (80026f0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80026be:	490d      	ldr	r1, [pc, #52]	@ (80026f4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80026c0:	4a0d      	ldr	r2, [pc, #52]	@ (80026f8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80026c2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80026c4:	e002      	b.n	80026cc <LoopCopyDataInit>

080026c6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80026c6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80026c8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80026ca:	3304      	adds	r3, #4

080026cc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80026cc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80026ce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80026d0:	d3f9      	bcc.n	80026c6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80026d2:	4a0a      	ldr	r2, [pc, #40]	@ (80026fc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80026d4:	4c0a      	ldr	r4, [pc, #40]	@ (8002700 <LoopFillZerobss+0x22>)
  movs r3, #0
 80026d6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80026d8:	e001      	b.n	80026de <LoopFillZerobss>

080026da <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80026da:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80026dc:	3204      	adds	r2, #4

080026de <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80026de:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80026e0:	d3fb      	bcc.n	80026da <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80026e2:	f003 fd6d 	bl	80061c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80026e6:	f7ff fa87 	bl	8001bf8 <main>
  bx  lr    
 80026ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80026ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80026f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80026f4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80026f8:	080095b8 	.word	0x080095b8
  ldr r2, =_sbss
 80026fc:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002700:	20000534 	.word	0x20000534

08002704 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002704:	e7fe      	b.n	8002704 <ADC_IRQHandler>
	...

08002708 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800270c:	4b0e      	ldr	r3, [pc, #56]	@ (8002748 <HAL_Init+0x40>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	4a0d      	ldr	r2, [pc, #52]	@ (8002748 <HAL_Init+0x40>)
 8002712:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002716:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002718:	4b0b      	ldr	r3, [pc, #44]	@ (8002748 <HAL_Init+0x40>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a0a      	ldr	r2, [pc, #40]	@ (8002748 <HAL_Init+0x40>)
 800271e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002722:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002724:	4b08      	ldr	r3, [pc, #32]	@ (8002748 <HAL_Init+0x40>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	4a07      	ldr	r2, [pc, #28]	@ (8002748 <HAL_Init+0x40>)
 800272a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800272e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002730:	2003      	movs	r0, #3
 8002732:	f000 fcfd 	bl	8003130 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002736:	200f      	movs	r0, #15
 8002738:	f000 f808 	bl	800274c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800273c:	f7ff fd96 	bl	800226c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002740:	2300      	movs	r3, #0
}
 8002742:	4618      	mov	r0, r3
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40023c00 	.word	0x40023c00

0800274c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b082      	sub	sp, #8
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002754:	4b12      	ldr	r3, [pc, #72]	@ (80027a0 <HAL_InitTick+0x54>)
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	4b12      	ldr	r3, [pc, #72]	@ (80027a4 <HAL_InitTick+0x58>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	4619      	mov	r1, r3
 800275e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002762:	fbb3 f3f1 	udiv	r3, r3, r1
 8002766:	fbb2 f3f3 	udiv	r3, r2, r3
 800276a:	4618      	mov	r0, r3
 800276c:	f000 fd07 	bl	800317e <HAL_SYSTICK_Config>
 8002770:	4603      	mov	r3, r0
 8002772:	2b00      	cmp	r3, #0
 8002774:	d001      	beq.n	800277a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e00e      	b.n	8002798 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2b0f      	cmp	r3, #15
 800277e:	d80a      	bhi.n	8002796 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002780:	2200      	movs	r2, #0
 8002782:	6879      	ldr	r1, [r7, #4]
 8002784:	f04f 30ff 	mov.w	r0, #4294967295
 8002788:	f000 fcdd 	bl	8003146 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800278c:	4a06      	ldr	r2, [pc, #24]	@ (80027a8 <HAL_InitTick+0x5c>)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002792:	2300      	movs	r3, #0
 8002794:	e000      	b.n	8002798 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002796:	2301      	movs	r3, #1
}
 8002798:	4618      	mov	r0, r3
 800279a:	3708      	adds	r7, #8
 800279c:	46bd      	mov	sp, r7
 800279e:	bd80      	pop	{r7, pc}
 80027a0:	20000000 	.word	0x20000000
 80027a4:	20000008 	.word	0x20000008
 80027a8:	20000004 	.word	0x20000004

080027ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80027ac:	b480      	push	{r7}
 80027ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80027b0:	4b06      	ldr	r3, [pc, #24]	@ (80027cc <HAL_IncTick+0x20>)
 80027b2:	781b      	ldrb	r3, [r3, #0]
 80027b4:	461a      	mov	r2, r3
 80027b6:	4b06      	ldr	r3, [pc, #24]	@ (80027d0 <HAL_IncTick+0x24>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4413      	add	r3, r2
 80027bc:	4a04      	ldr	r2, [pc, #16]	@ (80027d0 <HAL_IncTick+0x24>)
 80027be:	6013      	str	r3, [r2, #0]
}
 80027c0:	bf00      	nop
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	20000008 	.word	0x20000008
 80027d0:	200003e4 	.word	0x200003e4

080027d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80027d4:	b480      	push	{r7}
 80027d6:	af00      	add	r7, sp, #0
  return uwTick;
 80027d8:	4b03      	ldr	r3, [pc, #12]	@ (80027e8 <HAL_GetTick+0x14>)
 80027da:	681b      	ldr	r3, [r3, #0]
}
 80027dc:	4618      	mov	r0, r3
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr
 80027e6:	bf00      	nop
 80027e8:	200003e4 	.word	0x200003e4

080027ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b084      	sub	sp, #16
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80027f4:	f7ff ffee 	bl	80027d4 <HAL_GetTick>
 80027f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002804:	d005      	beq.n	8002812 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002806:	4b0a      	ldr	r3, [pc, #40]	@ (8002830 <HAL_Delay+0x44>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	4413      	add	r3, r2
 8002810:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002812:	bf00      	nop
 8002814:	f7ff ffde 	bl	80027d4 <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	68bb      	ldr	r3, [r7, #8]
 800281c:	1ad3      	subs	r3, r2, r3
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	429a      	cmp	r2, r3
 8002822:	d8f7      	bhi.n	8002814 <HAL_Delay+0x28>
  {
  }
}
 8002824:	bf00      	nop
 8002826:	bf00      	nop
 8002828:	3710      	adds	r7, #16
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20000008 	.word	0x20000008

08002834 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800283c:	2300      	movs	r3, #0
 800283e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d101      	bne.n	800284a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e033      	b.n	80028b2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	2b00      	cmp	r3, #0
 8002850:	d109      	bne.n	8002866 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f7ff fd32 	bl	80022bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2200      	movs	r2, #0
 800285c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2200      	movs	r2, #0
 8002862:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	f003 0310 	and.w	r3, r3, #16
 800286e:	2b00      	cmp	r3, #0
 8002870:	d118      	bne.n	80028a4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002876:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800287a:	f023 0302 	bic.w	r3, r3, #2
 800287e:	f043 0202 	orr.w	r2, r3, #2
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 faa4 	bl	8002dd4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2200      	movs	r2, #0
 8002890:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002896:	f023 0303 	bic.w	r3, r3, #3
 800289a:	f043 0201 	orr.w	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	641a      	str	r2, [r3, #64]	@ 0x40
 80028a2:	e001      	b.n	80028a8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80028a4:	2301      	movs	r3, #1
 80028a6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2200      	movs	r2, #0
 80028ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80028b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
	...

080028bc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d101      	bne.n	80028d6 <HAL_ADC_Start+0x1a>
 80028d2:	2302      	movs	r3, #2
 80028d4:	e0b2      	b.n	8002a3c <HAL_ADC_Start+0x180>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	689b      	ldr	r3, [r3, #8]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d018      	beq.n	800291e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	689a      	ldr	r2, [r3, #8]
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f042 0201 	orr.w	r2, r2, #1
 80028fa:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80028fc:	4b52      	ldr	r3, [pc, #328]	@ (8002a48 <HAL_ADC_Start+0x18c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a52      	ldr	r2, [pc, #328]	@ (8002a4c <HAL_ADC_Start+0x190>)
 8002902:	fba2 2303 	umull	r2, r3, r2, r3
 8002906:	0c9a      	lsrs	r2, r3, #18
 8002908:	4613      	mov	r3, r2
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	4413      	add	r3, r2
 800290e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002910:	e002      	b.n	8002918 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	3b01      	subs	r3, #1
 8002916:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1f9      	bne.n	8002912 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	f003 0301 	and.w	r3, r3, #1
 8002928:	2b01      	cmp	r3, #1
 800292a:	d17a      	bne.n	8002a22 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002934:	f023 0301 	bic.w	r3, r3, #1
 8002938:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800294a:	2b00      	cmp	r3, #0
 800294c:	d007      	beq.n	800295e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002956:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002966:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800296a:	d106      	bne.n	800297a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002970:	f023 0206 	bic.w	r2, r3, #6
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	645a      	str	r2, [r3, #68]	@ 0x44
 8002978:	e002      	b.n	8002980 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2200      	movs	r2, #0
 800297e:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2200      	movs	r2, #0
 8002984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002988:	4b31      	ldr	r3, [pc, #196]	@ (8002a50 <HAL_ADC_Start+0x194>)
 800298a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002994:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f003 031f 	and.w	r3, r3, #31
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d12a      	bne.n	80029f8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	4a2b      	ldr	r2, [pc, #172]	@ (8002a54 <HAL_ADC_Start+0x198>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	d015      	beq.n	80029d8 <HAL_ADC_Start+0x11c>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a29      	ldr	r2, [pc, #164]	@ (8002a58 <HAL_ADC_Start+0x19c>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d105      	bne.n	80029c2 <HAL_ADC_Start+0x106>
 80029b6:	4b26      	ldr	r3, [pc, #152]	@ (8002a50 <HAL_ADC_Start+0x194>)
 80029b8:	685b      	ldr	r3, [r3, #4]
 80029ba:	f003 031f 	and.w	r3, r3, #31
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d00a      	beq.n	80029d8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a25      	ldr	r2, [pc, #148]	@ (8002a5c <HAL_ADC_Start+0x1a0>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d136      	bne.n	8002a3a <HAL_ADC_Start+0x17e>
 80029cc:	4b20      	ldr	r3, [pc, #128]	@ (8002a50 <HAL_ADC_Start+0x194>)
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f003 0310 	and.w	r3, r3, #16
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d130      	bne.n	8002a3a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d129      	bne.n	8002a3a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	689a      	ldr	r2, [r3, #8]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80029f4:	609a      	str	r2, [r3, #8]
 80029f6:	e020      	b.n	8002a3a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	4a15      	ldr	r2, [pc, #84]	@ (8002a54 <HAL_ADC_Start+0x198>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d11b      	bne.n	8002a3a <HAL_ADC_Start+0x17e>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d114      	bne.n	8002a3a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689a      	ldr	r2, [r3, #8]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002a1e:	609a      	str	r2, [r3, #8]
 8002a20:	e00b      	b.n	8002a3a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a26:	f043 0210 	orr.w	r2, r3, #16
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a32:	f043 0201 	orr.w	r2, r3, #1
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002a3a:	2300      	movs	r3, #0
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	20000000 	.word	0x20000000
 8002a4c:	431bde83 	.word	0x431bde83
 8002a50:	40012300 	.word	0x40012300
 8002a54:	40012000 	.word	0x40012000
 8002a58:	40012100 	.word	0x40012100
 8002a5c:	40012200 	.word	0x40012200

08002a60 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b084      	sub	sp, #16
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
 8002a68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a78:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a7c:	d113      	bne.n	8002aa6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689b      	ldr	r3, [r3, #8]
 8002a84:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002a88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002a8c:	d10b      	bne.n	8002aa6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	f043 0220 	orr.w	r2, r3, #32
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e063      	b.n	8002b6e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002aa6:	f7ff fe95 	bl	80027d4 <HAL_GetTick>
 8002aaa:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002aac:	e021      	b.n	8002af2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ab4:	d01d      	beq.n	8002af2 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002ab6:	683b      	ldr	r3, [r7, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d007      	beq.n	8002acc <HAL_ADC_PollForConversion+0x6c>
 8002abc:	f7ff fe8a 	bl	80027d4 <HAL_GetTick>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	1ad3      	subs	r3, r2, r3
 8002ac6:	683a      	ldr	r2, [r7, #0]
 8002ac8:	429a      	cmp	r2, r3
 8002aca:	d212      	bcs.n	8002af2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0302 	and.w	r3, r3, #2
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d00b      	beq.n	8002af2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ade:	f043 0204 	orr.w	r2, r3, #4
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002aee:	2303      	movs	r3, #3
 8002af0:	e03d      	b.n	8002b6e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f003 0302 	and.w	r3, r3, #2
 8002afc:	2b02      	cmp	r3, #2
 8002afe:	d1d6      	bne.n	8002aae <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f06f 0212 	mvn.w	r2, #18
 8002b08:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d123      	bne.n	8002b6c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d11f      	bne.n	8002b6c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b32:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d006      	beq.n	8002b48 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d111      	bne.n	8002b6c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d105      	bne.n	8002b6c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b64:	f043 0201 	orr.w	r2, r3, #1
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}

08002b76 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002b76:	b480      	push	{r7}
 8002b78:	b083      	sub	sp, #12
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr

08002b90 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b085      	sub	sp, #20
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
 8002b98:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002b9a:	2300      	movs	r3, #0
 8002b9c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d101      	bne.n	8002bac <HAL_ADC_ConfigChannel+0x1c>
 8002ba8:	2302      	movs	r3, #2
 8002baa:	e105      	b.n	8002db8 <HAL_ADC_ConfigChannel+0x228>
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2b09      	cmp	r3, #9
 8002bba:	d925      	bls.n	8002c08 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	68d9      	ldr	r1, [r3, #12]
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	4613      	mov	r3, r2
 8002bcc:	005b      	lsls	r3, r3, #1
 8002bce:	4413      	add	r3, r2
 8002bd0:	3b1e      	subs	r3, #30
 8002bd2:	2207      	movs	r2, #7
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43da      	mvns	r2, r3
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	400a      	ands	r2, r1
 8002be0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68d9      	ldr	r1, [r3, #12]
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	689a      	ldr	r2, [r3, #8]
 8002bec:	683b      	ldr	r3, [r7, #0]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	005b      	lsls	r3, r3, #1
 8002bf8:	4403      	add	r3, r0
 8002bfa:	3b1e      	subs	r3, #30
 8002bfc:	409a      	lsls	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	60da      	str	r2, [r3, #12]
 8002c06:	e022      	b.n	8002c4e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	6919      	ldr	r1, [r3, #16]
 8002c0e:	683b      	ldr	r3, [r7, #0]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	b29b      	uxth	r3, r3
 8002c14:	461a      	mov	r2, r3
 8002c16:	4613      	mov	r3, r2
 8002c18:	005b      	lsls	r3, r3, #1
 8002c1a:	4413      	add	r3, r2
 8002c1c:	2207      	movs	r2, #7
 8002c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c22:	43da      	mvns	r2, r3
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	400a      	ands	r2, r1
 8002c2a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	6919      	ldr	r1, [r3, #16]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	689a      	ldr	r2, [r3, #8]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	b29b      	uxth	r3, r3
 8002c3c:	4618      	mov	r0, r3
 8002c3e:	4603      	mov	r3, r0
 8002c40:	005b      	lsls	r3, r3, #1
 8002c42:	4403      	add	r3, r0
 8002c44:	409a      	lsls	r2, r3
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	430a      	orrs	r2, r1
 8002c4c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	2b06      	cmp	r3, #6
 8002c54:	d824      	bhi.n	8002ca0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685a      	ldr	r2, [r3, #4]
 8002c60:	4613      	mov	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4413      	add	r3, r2
 8002c66:	3b05      	subs	r3, #5
 8002c68:	221f      	movs	r2, #31
 8002c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c6e:	43da      	mvns	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	400a      	ands	r2, r1
 8002c76:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	b29b      	uxth	r3, r3
 8002c84:	4618      	mov	r0, r3
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685a      	ldr	r2, [r3, #4]
 8002c8a:	4613      	mov	r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	4413      	add	r3, r2
 8002c90:	3b05      	subs	r3, #5
 8002c92:	fa00 f203 	lsl.w	r2, r0, r3
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	430a      	orrs	r2, r1
 8002c9c:	635a      	str	r2, [r3, #52]	@ 0x34
 8002c9e:	e04c      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b0c      	cmp	r3, #12
 8002ca6:	d824      	bhi.n	8002cf2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685a      	ldr	r2, [r3, #4]
 8002cb2:	4613      	mov	r3, r2
 8002cb4:	009b      	lsls	r3, r3, #2
 8002cb6:	4413      	add	r3, r2
 8002cb8:	3b23      	subs	r3, #35	@ 0x23
 8002cba:	221f      	movs	r2, #31
 8002cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc0:	43da      	mvns	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	400a      	ands	r2, r1
 8002cc8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	685a      	ldr	r2, [r3, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3b23      	subs	r3, #35	@ 0x23
 8002ce4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	430a      	orrs	r2, r1
 8002cee:	631a      	str	r2, [r3, #48]	@ 0x30
 8002cf0:	e023      	b.n	8002d3a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	685a      	ldr	r2, [r3, #4]
 8002cfc:	4613      	mov	r3, r2
 8002cfe:	009b      	lsls	r3, r3, #2
 8002d00:	4413      	add	r3, r2
 8002d02:	3b41      	subs	r3, #65	@ 0x41
 8002d04:	221f      	movs	r2, #31
 8002d06:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0a:	43da      	mvns	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	400a      	ands	r2, r1
 8002d12:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002d1a:	683b      	ldr	r3, [r7, #0]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	b29b      	uxth	r3, r3
 8002d20:	4618      	mov	r0, r3
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685a      	ldr	r2, [r3, #4]
 8002d26:	4613      	mov	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	4413      	add	r3, r2
 8002d2c:	3b41      	subs	r3, #65	@ 0x41
 8002d2e:	fa00 f203 	lsl.w	r2, r0, r3
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002d3a:	4b22      	ldr	r3, [pc, #136]	@ (8002dc4 <HAL_ADC_ConfigChannel+0x234>)
 8002d3c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	4a21      	ldr	r2, [pc, #132]	@ (8002dc8 <HAL_ADC_ConfigChannel+0x238>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d109      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x1cc>
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2b12      	cmp	r3, #18
 8002d4e:	d105      	bne.n	8002d5c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4a19      	ldr	r2, [pc, #100]	@ (8002dc8 <HAL_ADC_ConfigChannel+0x238>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d123      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x21e>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b10      	cmp	r3, #16
 8002d6c:	d003      	beq.n	8002d76 <HAL_ADC_ConfigChannel+0x1e6>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b11      	cmp	r3, #17
 8002d74:	d11b      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2b10      	cmp	r3, #16
 8002d88:	d111      	bne.n	8002dae <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002d8a:	4b10      	ldr	r3, [pc, #64]	@ (8002dcc <HAL_ADC_ConfigChannel+0x23c>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a10      	ldr	r2, [pc, #64]	@ (8002dd0 <HAL_ADC_ConfigChannel+0x240>)
 8002d90:	fba2 2303 	umull	r2, r3, r2, r3
 8002d94:	0c9a      	lsrs	r2, r3, #18
 8002d96:	4613      	mov	r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	4413      	add	r3, r2
 8002d9c:	005b      	lsls	r3, r3, #1
 8002d9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002da0:	e002      	b.n	8002da8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	3b01      	subs	r3, #1
 8002da6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d1f9      	bne.n	8002da2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2200      	movs	r2, #0
 8002db2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002db6:	2300      	movs	r3, #0
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc2:	4770      	bx	lr
 8002dc4:	40012300 	.word	0x40012300
 8002dc8:	40012000 	.word	0x40012000
 8002dcc:	20000000 	.word	0x20000000
 8002dd0:	431bde83 	.word	0x431bde83

08002dd4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b085      	sub	sp, #20
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ddc:	4b79      	ldr	r3, [pc, #484]	@ (8002fc4 <ADC_Init+0x1f0>)
 8002dde:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	431a      	orrs	r2, r3
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e08:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	6859      	ldr	r1, [r3, #4]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	691b      	ldr	r3, [r3, #16]
 8002e14:	021a      	lsls	r2, r3, #8
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	430a      	orrs	r2, r1
 8002e1c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	685a      	ldr	r2, [r3, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002e2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	6859      	ldr	r1, [r3, #4]
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002e4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	6899      	ldr	r1, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	68da      	ldr	r2, [r3, #12]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	430a      	orrs	r2, r1
 8002e60:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e66:	4a58      	ldr	r2, [pc, #352]	@ (8002fc8 <ADC_Init+0x1f4>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d022      	beq.n	8002eb2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689a      	ldr	r2, [r3, #8]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002e7a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	6899      	ldr	r1, [r3, #8]
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	430a      	orrs	r2, r1
 8002e8c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	689a      	ldr	r2, [r3, #8]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002e9c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6899      	ldr	r1, [r3, #8]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	430a      	orrs	r2, r1
 8002eae:	609a      	str	r2, [r3, #8]
 8002eb0:	e00f      	b.n	8002ed2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	689a      	ldr	r2, [r3, #8]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ec0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	689a      	ldr	r2, [r3, #8]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ed0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	689a      	ldr	r2, [r3, #8]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f022 0202 	bic.w	r2, r2, #2
 8002ee0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	6899      	ldr	r1, [r3, #8]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	7e1b      	ldrb	r3, [r3, #24]
 8002eec:	005a      	lsls	r2, r3, #1
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d01b      	beq.n	8002f38 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	685a      	ldr	r2, [r3, #4]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f0e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	685a      	ldr	r2, [r3, #4]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002f1e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6859      	ldr	r1, [r3, #4]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f2a:	3b01      	subs	r3, #1
 8002f2c:	035a      	lsls	r2, r3, #13
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	e007      	b.n	8002f48 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f46:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002f56:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	69db      	ldr	r3, [r3, #28]
 8002f62:	3b01      	subs	r3, #1
 8002f64:	051a      	lsls	r2, r3, #20
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	430a      	orrs	r2, r1
 8002f6c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002f7c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	6899      	ldr	r1, [r3, #8]
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f8a:	025a      	lsls	r2, r3, #9
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	430a      	orrs	r2, r1
 8002f92:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689a      	ldr	r2, [r3, #8]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002fa2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	6899      	ldr	r1, [r3, #8]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	695b      	ldr	r3, [r3, #20]
 8002fae:	029a      	lsls	r2, r3, #10
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	430a      	orrs	r2, r1
 8002fb6:	609a      	str	r2, [r3, #8]
}
 8002fb8:	bf00      	nop
 8002fba:	3714      	adds	r7, #20
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr
 8002fc4:	40012300 	.word	0x40012300
 8002fc8:	0f000001 	.word	0x0f000001

08002fcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b085      	sub	sp, #20
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f003 0307 	and.w	r3, r3, #7
 8002fda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8003010 <__NVIC_SetPriorityGrouping+0x44>)
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002fe2:	68ba      	ldr	r2, [r7, #8]
 8002fe4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002fe8:	4013      	ands	r3, r2
 8002fea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ff4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002ff8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ffc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002ffe:	4a04      	ldr	r2, [pc, #16]	@ (8003010 <__NVIC_SetPriorityGrouping+0x44>)
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	60d3      	str	r3, [r2, #12]
}
 8003004:	bf00      	nop
 8003006:	3714      	adds	r7, #20
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	e000ed00 	.word	0xe000ed00

08003014 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003014:	b480      	push	{r7}
 8003016:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003018:	4b04      	ldr	r3, [pc, #16]	@ (800302c <__NVIC_GetPriorityGrouping+0x18>)
 800301a:	68db      	ldr	r3, [r3, #12]
 800301c:	0a1b      	lsrs	r3, r3, #8
 800301e:	f003 0307 	and.w	r3, r3, #7
}
 8003022:	4618      	mov	r0, r3
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	e000ed00 	.word	0xe000ed00

08003030 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	6039      	str	r1, [r7, #0]
 800303a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800303c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003040:	2b00      	cmp	r3, #0
 8003042:	db0a      	blt.n	800305a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	b2da      	uxtb	r2, r3
 8003048:	490c      	ldr	r1, [pc, #48]	@ (800307c <__NVIC_SetPriority+0x4c>)
 800304a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304e:	0112      	lsls	r2, r2, #4
 8003050:	b2d2      	uxtb	r2, r2
 8003052:	440b      	add	r3, r1
 8003054:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003058:	e00a      	b.n	8003070 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	b2da      	uxtb	r2, r3
 800305e:	4908      	ldr	r1, [pc, #32]	@ (8003080 <__NVIC_SetPriority+0x50>)
 8003060:	79fb      	ldrb	r3, [r7, #7]
 8003062:	f003 030f 	and.w	r3, r3, #15
 8003066:	3b04      	subs	r3, #4
 8003068:	0112      	lsls	r2, r2, #4
 800306a:	b2d2      	uxtb	r2, r2
 800306c:	440b      	add	r3, r1
 800306e:	761a      	strb	r2, [r3, #24]
}
 8003070:	bf00      	nop
 8003072:	370c      	adds	r7, #12
 8003074:	46bd      	mov	sp, r7
 8003076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307a:	4770      	bx	lr
 800307c:	e000e100 	.word	0xe000e100
 8003080:	e000ed00 	.word	0xe000ed00

08003084 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003084:	b480      	push	{r7}
 8003086:	b089      	sub	sp, #36	@ 0x24
 8003088:	af00      	add	r7, sp, #0
 800308a:	60f8      	str	r0, [r7, #12]
 800308c:	60b9      	str	r1, [r7, #8]
 800308e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 0307 	and.w	r3, r3, #7
 8003096:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	f1c3 0307 	rsb	r3, r3, #7
 800309e:	2b04      	cmp	r3, #4
 80030a0:	bf28      	it	cs
 80030a2:	2304      	movcs	r3, #4
 80030a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	3304      	adds	r3, #4
 80030aa:	2b06      	cmp	r3, #6
 80030ac:	d902      	bls.n	80030b4 <NVIC_EncodePriority+0x30>
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	3b03      	subs	r3, #3
 80030b2:	e000      	b.n	80030b6 <NVIC_EncodePriority+0x32>
 80030b4:	2300      	movs	r3, #0
 80030b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030b8:	f04f 32ff 	mov.w	r2, #4294967295
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	43da      	mvns	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	401a      	ands	r2, r3
 80030c8:	697b      	ldr	r3, [r7, #20]
 80030ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80030cc:	f04f 31ff 	mov.w	r1, #4294967295
 80030d0:	697b      	ldr	r3, [r7, #20]
 80030d2:	fa01 f303 	lsl.w	r3, r1, r3
 80030d6:	43d9      	mvns	r1, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030dc:	4313      	orrs	r3, r2
         );
}
 80030de:	4618      	mov	r0, r3
 80030e0:	3724      	adds	r7, #36	@ 0x24
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr
	...

080030ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b082      	sub	sp, #8
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	3b01      	subs	r3, #1
 80030f8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030fc:	d301      	bcc.n	8003102 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80030fe:	2301      	movs	r3, #1
 8003100:	e00f      	b.n	8003122 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003102:	4a0a      	ldr	r2, [pc, #40]	@ (800312c <SysTick_Config+0x40>)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	3b01      	subs	r3, #1
 8003108:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800310a:	210f      	movs	r1, #15
 800310c:	f04f 30ff 	mov.w	r0, #4294967295
 8003110:	f7ff ff8e 	bl	8003030 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003114:	4b05      	ldr	r3, [pc, #20]	@ (800312c <SysTick_Config+0x40>)
 8003116:	2200      	movs	r2, #0
 8003118:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800311a:	4b04      	ldr	r3, [pc, #16]	@ (800312c <SysTick_Config+0x40>)
 800311c:	2207      	movs	r2, #7
 800311e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003120:	2300      	movs	r3, #0
}
 8003122:	4618      	mov	r0, r3
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}
 800312a:	bf00      	nop
 800312c:	e000e010 	.word	0xe000e010

08003130 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff ff47 	bl	8002fcc <__NVIC_SetPriorityGrouping>
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}

08003146 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003146:	b580      	push	{r7, lr}
 8003148:	b086      	sub	sp, #24
 800314a:	af00      	add	r7, sp, #0
 800314c:	4603      	mov	r3, r0
 800314e:	60b9      	str	r1, [r7, #8]
 8003150:	607a      	str	r2, [r7, #4]
 8003152:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003158:	f7ff ff5c 	bl	8003014 <__NVIC_GetPriorityGrouping>
 800315c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800315e:	687a      	ldr	r2, [r7, #4]
 8003160:	68b9      	ldr	r1, [r7, #8]
 8003162:	6978      	ldr	r0, [r7, #20]
 8003164:	f7ff ff8e 	bl	8003084 <NVIC_EncodePriority>
 8003168:	4602      	mov	r2, r0
 800316a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800316e:	4611      	mov	r1, r2
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff ff5d 	bl	8003030 <__NVIC_SetPriority>
}
 8003176:	bf00      	nop
 8003178:	3718      	adds	r7, #24
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}

0800317e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800317e:	b580      	push	{r7, lr}
 8003180:	b082      	sub	sp, #8
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f7ff ffb0 	bl	80030ec <SysTick_Config>
 800318c:	4603      	mov	r3, r0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
	...

08003198 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003198:	b480      	push	{r7}
 800319a:	b089      	sub	sp, #36	@ 0x24
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031a2:	2300      	movs	r3, #0
 80031a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031ae:	2300      	movs	r3, #0
 80031b0:	61fb      	str	r3, [r7, #28]
 80031b2:	e16b      	b.n	800348c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80031b4:	2201      	movs	r2, #1
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	fa02 f303 	lsl.w	r3, r2, r3
 80031bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	4013      	ands	r3, r2
 80031c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80031c8:	693a      	ldr	r2, [r7, #16]
 80031ca:	697b      	ldr	r3, [r7, #20]
 80031cc:	429a      	cmp	r2, r3
 80031ce:	f040 815a 	bne.w	8003486 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d005      	beq.n	80031ea <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031de:	683b      	ldr	r3, [r7, #0]
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80031e6:	2b02      	cmp	r3, #2
 80031e8:	d130      	bne.n	800324c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	689b      	ldr	r3, [r3, #8]
 80031ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	005b      	lsls	r3, r3, #1
 80031f4:	2203      	movs	r2, #3
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	43db      	mvns	r3, r3
 80031fc:	69ba      	ldr	r2, [r7, #24]
 80031fe:	4013      	ands	r3, r2
 8003200:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	68da      	ldr	r2, [r3, #12]
 8003206:	69fb      	ldr	r3, [r7, #28]
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	fa02 f303 	lsl.w	r3, r2, r3
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69ba      	ldr	r2, [r7, #24]
 8003218:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	685b      	ldr	r3, [r3, #4]
 800321e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003220:	2201      	movs	r2, #1
 8003222:	69fb      	ldr	r3, [r7, #28]
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	43db      	mvns	r3, r3
 800322a:	69ba      	ldr	r2, [r7, #24]
 800322c:	4013      	ands	r3, r2
 800322e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	091b      	lsrs	r3, r3, #4
 8003236:	f003 0201 	and.w	r2, r3, #1
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	fa02 f303 	lsl.w	r3, r2, r3
 8003240:	69ba      	ldr	r2, [r7, #24]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69ba      	ldr	r2, [r7, #24]
 800324a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	2b03      	cmp	r3, #3
 8003256:	d017      	beq.n	8003288 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	68db      	ldr	r3, [r3, #12]
 800325c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800325e:	69fb      	ldr	r3, [r7, #28]
 8003260:	005b      	lsls	r3, r3, #1
 8003262:	2203      	movs	r2, #3
 8003264:	fa02 f303 	lsl.w	r3, r2, r3
 8003268:	43db      	mvns	r3, r3
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	4013      	ands	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	689a      	ldr	r2, [r3, #8]
 8003274:	69fb      	ldr	r3, [r7, #28]
 8003276:	005b      	lsls	r3, r3, #1
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	69ba      	ldr	r2, [r7, #24]
 800327e:	4313      	orrs	r3, r2
 8003280:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69ba      	ldr	r2, [r7, #24]
 8003286:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003288:	683b      	ldr	r3, [r7, #0]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	f003 0303 	and.w	r3, r3, #3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d123      	bne.n	80032dc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	08da      	lsrs	r2, r3, #3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	3208      	adds	r2, #8
 800329c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	f003 0307 	and.w	r3, r3, #7
 80032a8:	009b      	lsls	r3, r3, #2
 80032aa:	220f      	movs	r2, #15
 80032ac:	fa02 f303 	lsl.w	r3, r2, r3
 80032b0:	43db      	mvns	r3, r3
 80032b2:	69ba      	ldr	r2, [r7, #24]
 80032b4:	4013      	ands	r3, r2
 80032b6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80032b8:	683b      	ldr	r3, [r7, #0]
 80032ba:	691a      	ldr	r2, [r3, #16]
 80032bc:	69fb      	ldr	r3, [r7, #28]
 80032be:	f003 0307 	and.w	r3, r3, #7
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	fa02 f303 	lsl.w	r3, r2, r3
 80032c8:	69ba      	ldr	r2, [r7, #24]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	08da      	lsrs	r2, r3, #3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	3208      	adds	r2, #8
 80032d6:	69b9      	ldr	r1, [r7, #24]
 80032d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	005b      	lsls	r3, r3, #1
 80032e6:	2203      	movs	r2, #3
 80032e8:	fa02 f303 	lsl.w	r3, r2, r3
 80032ec:	43db      	mvns	r3, r3
 80032ee:	69ba      	ldr	r2, [r7, #24]
 80032f0:	4013      	ands	r3, r2
 80032f2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f003 0203 	and.w	r2, r3, #3
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	005b      	lsls	r3, r3, #1
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	69ba      	ldr	r2, [r7, #24]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003310:	683b      	ldr	r3, [r7, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 80b4 	beq.w	8003486 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800331e:	2300      	movs	r3, #0
 8003320:	60fb      	str	r3, [r7, #12]
 8003322:	4b60      	ldr	r3, [pc, #384]	@ (80034a4 <HAL_GPIO_Init+0x30c>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003326:	4a5f      	ldr	r2, [pc, #380]	@ (80034a4 <HAL_GPIO_Init+0x30c>)
 8003328:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800332c:	6453      	str	r3, [r2, #68]	@ 0x44
 800332e:	4b5d      	ldr	r3, [pc, #372]	@ (80034a4 <HAL_GPIO_Init+0x30c>)
 8003330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003336:	60fb      	str	r3, [r7, #12]
 8003338:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800333a:	4a5b      	ldr	r2, [pc, #364]	@ (80034a8 <HAL_GPIO_Init+0x310>)
 800333c:	69fb      	ldr	r3, [r7, #28]
 800333e:	089b      	lsrs	r3, r3, #2
 8003340:	3302      	adds	r3, #2
 8003342:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003346:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003348:	69fb      	ldr	r3, [r7, #28]
 800334a:	f003 0303 	and.w	r3, r3, #3
 800334e:	009b      	lsls	r3, r3, #2
 8003350:	220f      	movs	r2, #15
 8003352:	fa02 f303 	lsl.w	r3, r2, r3
 8003356:	43db      	mvns	r3, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4013      	ands	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	4a52      	ldr	r2, [pc, #328]	@ (80034ac <HAL_GPIO_Init+0x314>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d02b      	beq.n	80033be <HAL_GPIO_Init+0x226>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a51      	ldr	r2, [pc, #324]	@ (80034b0 <HAL_GPIO_Init+0x318>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d025      	beq.n	80033ba <HAL_GPIO_Init+0x222>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a50      	ldr	r2, [pc, #320]	@ (80034b4 <HAL_GPIO_Init+0x31c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d01f      	beq.n	80033b6 <HAL_GPIO_Init+0x21e>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a4f      	ldr	r2, [pc, #316]	@ (80034b8 <HAL_GPIO_Init+0x320>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d019      	beq.n	80033b2 <HAL_GPIO_Init+0x21a>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a4e      	ldr	r2, [pc, #312]	@ (80034bc <HAL_GPIO_Init+0x324>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d013      	beq.n	80033ae <HAL_GPIO_Init+0x216>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a4d      	ldr	r2, [pc, #308]	@ (80034c0 <HAL_GPIO_Init+0x328>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d00d      	beq.n	80033aa <HAL_GPIO_Init+0x212>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a4c      	ldr	r2, [pc, #304]	@ (80034c4 <HAL_GPIO_Init+0x32c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d007      	beq.n	80033a6 <HAL_GPIO_Init+0x20e>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a4b      	ldr	r2, [pc, #300]	@ (80034c8 <HAL_GPIO_Init+0x330>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d101      	bne.n	80033a2 <HAL_GPIO_Init+0x20a>
 800339e:	2307      	movs	r3, #7
 80033a0:	e00e      	b.n	80033c0 <HAL_GPIO_Init+0x228>
 80033a2:	2308      	movs	r3, #8
 80033a4:	e00c      	b.n	80033c0 <HAL_GPIO_Init+0x228>
 80033a6:	2306      	movs	r3, #6
 80033a8:	e00a      	b.n	80033c0 <HAL_GPIO_Init+0x228>
 80033aa:	2305      	movs	r3, #5
 80033ac:	e008      	b.n	80033c0 <HAL_GPIO_Init+0x228>
 80033ae:	2304      	movs	r3, #4
 80033b0:	e006      	b.n	80033c0 <HAL_GPIO_Init+0x228>
 80033b2:	2303      	movs	r3, #3
 80033b4:	e004      	b.n	80033c0 <HAL_GPIO_Init+0x228>
 80033b6:	2302      	movs	r3, #2
 80033b8:	e002      	b.n	80033c0 <HAL_GPIO_Init+0x228>
 80033ba:	2301      	movs	r3, #1
 80033bc:	e000      	b.n	80033c0 <HAL_GPIO_Init+0x228>
 80033be:	2300      	movs	r3, #0
 80033c0:	69fa      	ldr	r2, [r7, #28]
 80033c2:	f002 0203 	and.w	r2, r2, #3
 80033c6:	0092      	lsls	r2, r2, #2
 80033c8:	4093      	lsls	r3, r2
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80033d0:	4935      	ldr	r1, [pc, #212]	@ (80034a8 <HAL_GPIO_Init+0x310>)
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	089b      	lsrs	r3, r3, #2
 80033d6:	3302      	adds	r3, #2
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80033de:	4b3b      	ldr	r3, [pc, #236]	@ (80034cc <HAL_GPIO_Init+0x334>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	43db      	mvns	r3, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4013      	ands	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	685b      	ldr	r3, [r3, #4]
 80033f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d003      	beq.n	8003402 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	4313      	orrs	r3, r2
 8003400:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003402:	4a32      	ldr	r2, [pc, #200]	@ (80034cc <HAL_GPIO_Init+0x334>)
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003408:	4b30      	ldr	r3, [pc, #192]	@ (80034cc <HAL_GPIO_Init+0x334>)
 800340a:	68db      	ldr	r3, [r3, #12]
 800340c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d003      	beq.n	800342c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	693b      	ldr	r3, [r7, #16]
 8003428:	4313      	orrs	r3, r2
 800342a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800342c:	4a27      	ldr	r2, [pc, #156]	@ (80034cc <HAL_GPIO_Init+0x334>)
 800342e:	69bb      	ldr	r3, [r7, #24]
 8003430:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003432:	4b26      	ldr	r3, [pc, #152]	@ (80034cc <HAL_GPIO_Init+0x334>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	43db      	mvns	r3, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4013      	ands	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003456:	4a1d      	ldr	r2, [pc, #116]	@ (80034cc <HAL_GPIO_Init+0x334>)
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800345c:	4b1b      	ldr	r3, [pc, #108]	@ (80034cc <HAL_GPIO_Init+0x334>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003480:	4a12      	ldr	r2, [pc, #72]	@ (80034cc <HAL_GPIO_Init+0x334>)
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	3301      	adds	r3, #1
 800348a:	61fb      	str	r3, [r7, #28]
 800348c:	69fb      	ldr	r3, [r7, #28]
 800348e:	2b0f      	cmp	r3, #15
 8003490:	f67f ae90 	bls.w	80031b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003494:	bf00      	nop
 8003496:	bf00      	nop
 8003498:	3724      	adds	r7, #36	@ 0x24
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	40023800 	.word	0x40023800
 80034a8:	40013800 	.word	0x40013800
 80034ac:	40020000 	.word	0x40020000
 80034b0:	40020400 	.word	0x40020400
 80034b4:	40020800 	.word	0x40020800
 80034b8:	40020c00 	.word	0x40020c00
 80034bc:	40021000 	.word	0x40021000
 80034c0:	40021400 	.word	0x40021400
 80034c4:	40021800 	.word	0x40021800
 80034c8:	40021c00 	.word	0x40021c00
 80034cc:	40013c00 	.word	0x40013c00

080034d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	460b      	mov	r3, r1
 80034da:	807b      	strh	r3, [r7, #2]
 80034dc:	4613      	mov	r3, r2
 80034de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80034e0:	787b      	ldrb	r3, [r7, #1]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80034e6:	887a      	ldrh	r2, [r7, #2]
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80034ec:	e003      	b.n	80034f6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80034ee:	887b      	ldrh	r3, [r7, #2]
 80034f0:	041a      	lsls	r2, r3, #16
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	619a      	str	r2, [r3, #24]
}
 80034f6:	bf00      	nop
 80034f8:	370c      	adds	r7, #12
 80034fa:	46bd      	mov	sp, r7
 80034fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003500:	4770      	bx	lr
	...

08003504 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d101      	bne.n	8003516 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003512:	2301      	movs	r3, #1
 8003514:	e12b      	b.n	800376e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800351c:	b2db      	uxtb	r3, r3
 800351e:	2b00      	cmp	r3, #0
 8003520:	d106      	bne.n	8003530 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7fe ff0a 	bl	8002344 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2224      	movs	r2, #36	@ 0x24
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	681a      	ldr	r2, [r3, #0]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f022 0201 	bic.w	r2, r2, #1
 8003546:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003556:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003566:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003568:	f001 fc20 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 800356c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	4a81      	ldr	r2, [pc, #516]	@ (8003778 <HAL_I2C_Init+0x274>)
 8003574:	4293      	cmp	r3, r2
 8003576:	d807      	bhi.n	8003588 <HAL_I2C_Init+0x84>
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	4a80      	ldr	r2, [pc, #512]	@ (800377c <HAL_I2C_Init+0x278>)
 800357c:	4293      	cmp	r3, r2
 800357e:	bf94      	ite	ls
 8003580:	2301      	movls	r3, #1
 8003582:	2300      	movhi	r3, #0
 8003584:	b2db      	uxtb	r3, r3
 8003586:	e006      	b.n	8003596 <HAL_I2C_Init+0x92>
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	4a7d      	ldr	r2, [pc, #500]	@ (8003780 <HAL_I2C_Init+0x27c>)
 800358c:	4293      	cmp	r3, r2
 800358e:	bf94      	ite	ls
 8003590:	2301      	movls	r3, #1
 8003592:	2300      	movhi	r3, #0
 8003594:	b2db      	uxtb	r3, r3
 8003596:	2b00      	cmp	r3, #0
 8003598:	d001      	beq.n	800359e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800359a:	2301      	movs	r3, #1
 800359c:	e0e7      	b.n	800376e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	4a78      	ldr	r2, [pc, #480]	@ (8003784 <HAL_I2C_Init+0x280>)
 80035a2:	fba2 2303 	umull	r2, r3, r2, r3
 80035a6:	0c9b      	lsrs	r3, r3, #18
 80035a8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	68ba      	ldr	r2, [r7, #8]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	6a1b      	ldr	r3, [r3, #32]
 80035c4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	4a6a      	ldr	r2, [pc, #424]	@ (8003778 <HAL_I2C_Init+0x274>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d802      	bhi.n	80035d8 <HAL_I2C_Init+0xd4>
 80035d2:	68bb      	ldr	r3, [r7, #8]
 80035d4:	3301      	adds	r3, #1
 80035d6:	e009      	b.n	80035ec <HAL_I2C_Init+0xe8>
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80035de:	fb02 f303 	mul.w	r3, r2, r3
 80035e2:	4a69      	ldr	r2, [pc, #420]	@ (8003788 <HAL_I2C_Init+0x284>)
 80035e4:	fba2 2303 	umull	r2, r3, r2, r3
 80035e8:	099b      	lsrs	r3, r3, #6
 80035ea:	3301      	adds	r3, #1
 80035ec:	687a      	ldr	r2, [r7, #4]
 80035ee:	6812      	ldr	r2, [r2, #0]
 80035f0:	430b      	orrs	r3, r1
 80035f2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	69db      	ldr	r3, [r3, #28]
 80035fa:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80035fe:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	495c      	ldr	r1, [pc, #368]	@ (8003778 <HAL_I2C_Init+0x274>)
 8003608:	428b      	cmp	r3, r1
 800360a:	d819      	bhi.n	8003640 <HAL_I2C_Init+0x13c>
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	1e59      	subs	r1, r3, #1
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	005b      	lsls	r3, r3, #1
 8003616:	fbb1 f3f3 	udiv	r3, r1, r3
 800361a:	1c59      	adds	r1, r3, #1
 800361c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003620:	400b      	ands	r3, r1
 8003622:	2b00      	cmp	r3, #0
 8003624:	d00a      	beq.n	800363c <HAL_I2C_Init+0x138>
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1e59      	subs	r1, r3, #1
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	005b      	lsls	r3, r3, #1
 8003630:	fbb1 f3f3 	udiv	r3, r1, r3
 8003634:	3301      	adds	r3, #1
 8003636:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800363a:	e051      	b.n	80036e0 <HAL_I2C_Init+0x1dc>
 800363c:	2304      	movs	r3, #4
 800363e:	e04f      	b.n	80036e0 <HAL_I2C_Init+0x1dc>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d111      	bne.n	800366c <HAL_I2C_Init+0x168>
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	1e58      	subs	r0, r3, #1
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6859      	ldr	r1, [r3, #4]
 8003650:	460b      	mov	r3, r1
 8003652:	005b      	lsls	r3, r3, #1
 8003654:	440b      	add	r3, r1
 8003656:	fbb0 f3f3 	udiv	r3, r0, r3
 800365a:	3301      	adds	r3, #1
 800365c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003660:	2b00      	cmp	r3, #0
 8003662:	bf0c      	ite	eq
 8003664:	2301      	moveq	r3, #1
 8003666:	2300      	movne	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	e012      	b.n	8003692 <HAL_I2C_Init+0x18e>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	1e58      	subs	r0, r3, #1
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6859      	ldr	r1, [r3, #4]
 8003674:	460b      	mov	r3, r1
 8003676:	009b      	lsls	r3, r3, #2
 8003678:	440b      	add	r3, r1
 800367a:	0099      	lsls	r1, r3, #2
 800367c:	440b      	add	r3, r1
 800367e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003682:	3301      	adds	r3, #1
 8003684:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003688:	2b00      	cmp	r3, #0
 800368a:	bf0c      	ite	eq
 800368c:	2301      	moveq	r3, #1
 800368e:	2300      	movne	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <HAL_I2C_Init+0x196>
 8003696:	2301      	movs	r3, #1
 8003698:	e022      	b.n	80036e0 <HAL_I2C_Init+0x1dc>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	689b      	ldr	r3, [r3, #8]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10e      	bne.n	80036c0 <HAL_I2C_Init+0x1bc>
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	1e58      	subs	r0, r3, #1
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6859      	ldr	r1, [r3, #4]
 80036aa:	460b      	mov	r3, r1
 80036ac:	005b      	lsls	r3, r3, #1
 80036ae:	440b      	add	r3, r1
 80036b0:	fbb0 f3f3 	udiv	r3, r0, r3
 80036b4:	3301      	adds	r3, #1
 80036b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036ba:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80036be:	e00f      	b.n	80036e0 <HAL_I2C_Init+0x1dc>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	1e58      	subs	r0, r3, #1
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	6859      	ldr	r1, [r3, #4]
 80036c8:	460b      	mov	r3, r1
 80036ca:	009b      	lsls	r3, r3, #2
 80036cc:	440b      	add	r3, r1
 80036ce:	0099      	lsls	r1, r3, #2
 80036d0:	440b      	add	r3, r1
 80036d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80036d6:	3301      	adds	r3, #1
 80036d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80036dc:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80036e0:	6879      	ldr	r1, [r7, #4]
 80036e2:	6809      	ldr	r1, [r1, #0]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	69da      	ldr	r2, [r3, #28]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800370e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003712:	687a      	ldr	r2, [r7, #4]
 8003714:	6911      	ldr	r1, [r2, #16]
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	68d2      	ldr	r2, [r2, #12]
 800371a:	4311      	orrs	r1, r2
 800371c:	687a      	ldr	r2, [r7, #4]
 800371e:	6812      	ldr	r2, [r2, #0]
 8003720:	430b      	orrs	r3, r1
 8003722:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	68db      	ldr	r3, [r3, #12]
 800372a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	431a      	orrs	r2, r3
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	430a      	orrs	r2, r1
 800373e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f042 0201 	orr.w	r2, r2, #1
 800374e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2220      	movs	r2, #32
 800375a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2200      	movs	r2, #0
 8003762:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	000186a0 	.word	0x000186a0
 800377c:	001e847f 	.word	0x001e847f
 8003780:	003d08ff 	.word	0x003d08ff
 8003784:	431bde83 	.word	0x431bde83
 8003788:	10624dd3 	.word	0x10624dd3

0800378c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b088      	sub	sp, #32
 8003790:	af02      	add	r7, sp, #8
 8003792:	60f8      	str	r0, [r7, #12]
 8003794:	4608      	mov	r0, r1
 8003796:	4611      	mov	r1, r2
 8003798:	461a      	mov	r2, r3
 800379a:	4603      	mov	r3, r0
 800379c:	817b      	strh	r3, [r7, #10]
 800379e:	460b      	mov	r3, r1
 80037a0:	813b      	strh	r3, [r7, #8]
 80037a2:	4613      	mov	r3, r2
 80037a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80037a6:	f7ff f815 	bl	80027d4 <HAL_GetTick>
 80037aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	2b20      	cmp	r3, #32
 80037b6:	f040 80d9 	bne.w	800396c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	9300      	str	r3, [sp, #0]
 80037be:	2319      	movs	r3, #25
 80037c0:	2201      	movs	r2, #1
 80037c2:	496d      	ldr	r1, [pc, #436]	@ (8003978 <HAL_I2C_Mem_Write+0x1ec>)
 80037c4:	68f8      	ldr	r0, [r7, #12]
 80037c6:	f000 fc8b 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 80037ca:	4603      	mov	r3, r0
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d001      	beq.n	80037d4 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80037d0:	2302      	movs	r3, #2
 80037d2:	e0cc      	b.n	800396e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d101      	bne.n	80037e2 <HAL_I2C_Mem_Write+0x56>
 80037de:	2302      	movs	r3, #2
 80037e0:	e0c5      	b.n	800396e <HAL_I2C_Mem_Write+0x1e2>
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2201      	movs	r2, #1
 80037e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d007      	beq.n	8003808 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	681a      	ldr	r2, [r3, #0]
 80037fe:	68fb      	ldr	r3, [r7, #12]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f042 0201 	orr.w	r2, r2, #1
 8003806:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681a      	ldr	r2, [r3, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003816:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2221      	movs	r2, #33	@ 0x21
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	2240      	movs	r2, #64	@ 0x40
 8003824:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	2200      	movs	r2, #0
 800382c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	6a3a      	ldr	r2, [r7, #32]
 8003832:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003838:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800383e:	b29a      	uxth	r2, r3
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	4a4d      	ldr	r2, [pc, #308]	@ (800397c <HAL_I2C_Mem_Write+0x1f0>)
 8003848:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800384a:	88f8      	ldrh	r0, [r7, #6]
 800384c:	893a      	ldrh	r2, [r7, #8]
 800384e:	8979      	ldrh	r1, [r7, #10]
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	9301      	str	r3, [sp, #4]
 8003854:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003856:	9300      	str	r3, [sp, #0]
 8003858:	4603      	mov	r3, r0
 800385a:	68f8      	ldr	r0, [r7, #12]
 800385c:	f000 fac2 	bl	8003de4 <I2C_RequestMemoryWrite>
 8003860:	4603      	mov	r3, r0
 8003862:	2b00      	cmp	r3, #0
 8003864:	d052      	beq.n	800390c <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003866:	2301      	movs	r3, #1
 8003868:	e081      	b.n	800396e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800386a:	697a      	ldr	r2, [r7, #20]
 800386c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	f000 fd50 	bl	8004314 <I2C_WaitOnTXEFlagUntilTimeout>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00d      	beq.n	8003896 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387e:	2b04      	cmp	r3, #4
 8003880:	d107      	bne.n	8003892 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003890:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e06b      	b.n	800396e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800389a:	781a      	ldrb	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a6:	1c5a      	adds	r2, r3, #1
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038b0:	3b01      	subs	r3, #1
 80038b2:	b29a      	uxth	r2, r3
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038bc:	b29b      	uxth	r3, r3
 80038be:	3b01      	subs	r3, #1
 80038c0:	b29a      	uxth	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	695b      	ldr	r3, [r3, #20]
 80038cc:	f003 0304 	and.w	r3, r3, #4
 80038d0:	2b04      	cmp	r3, #4
 80038d2:	d11b      	bne.n	800390c <HAL_I2C_Mem_Write+0x180>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d017      	beq.n	800390c <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e0:	781a      	ldrb	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038ec:	1c5a      	adds	r2, r3, #1
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003902:	b29b      	uxth	r3, r3
 8003904:	3b01      	subs	r3, #1
 8003906:	b29a      	uxth	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003910:	2b00      	cmp	r3, #0
 8003912:	d1aa      	bne.n	800386a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003914:	697a      	ldr	r2, [r7, #20]
 8003916:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 fd43 	bl	80043a4 <I2C_WaitOnBTFFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d00d      	beq.n	8003940 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003928:	2b04      	cmp	r3, #4
 800392a:	d107      	bne.n	800393c <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800393a:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800393c:	2301      	movs	r3, #1
 800393e:	e016      	b.n	800396e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	681a      	ldr	r2, [r3, #0]
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800394e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2220      	movs	r2, #32
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	2200      	movs	r2, #0
 8003964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003968:	2300      	movs	r3, #0
 800396a:	e000      	b.n	800396e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800396c:	2302      	movs	r3, #2
  }
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	00100002 	.word	0x00100002
 800397c:	ffff0000 	.word	0xffff0000

08003980 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	b08c      	sub	sp, #48	@ 0x30
 8003984:	af02      	add	r7, sp, #8
 8003986:	60f8      	str	r0, [r7, #12]
 8003988:	4608      	mov	r0, r1
 800398a:	4611      	mov	r1, r2
 800398c:	461a      	mov	r2, r3
 800398e:	4603      	mov	r3, r0
 8003990:	817b      	strh	r3, [r7, #10]
 8003992:	460b      	mov	r3, r1
 8003994:	813b      	strh	r3, [r7, #8]
 8003996:	4613      	mov	r3, r2
 8003998:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800399a:	f7fe ff1b 	bl	80027d4 <HAL_GetTick>
 800399e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b20      	cmp	r3, #32
 80039aa:	f040 8214 	bne.w	8003dd6 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80039ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039b0:	9300      	str	r3, [sp, #0]
 80039b2:	2319      	movs	r3, #25
 80039b4:	2201      	movs	r2, #1
 80039b6:	497b      	ldr	r1, [pc, #492]	@ (8003ba4 <HAL_I2C_Mem_Read+0x224>)
 80039b8:	68f8      	ldr	r0, [r7, #12]
 80039ba:	f000 fb91 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80039c4:	2302      	movs	r3, #2
 80039c6:	e207      	b.n	8003dd8 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80039ce:	2b01      	cmp	r3, #1
 80039d0:	d101      	bne.n	80039d6 <HAL_I2C_Mem_Read+0x56>
 80039d2:	2302      	movs	r3, #2
 80039d4:	e200      	b.n	8003dd8 <HAL_I2C_Mem_Read+0x458>
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	2201      	movs	r2, #1
 80039da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b01      	cmp	r3, #1
 80039ea:	d007      	beq.n	80039fc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f042 0201 	orr.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a0a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	2222      	movs	r2, #34	@ 0x22
 8003a10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	2240      	movs	r2, #64	@ 0x40
 8003a18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2200      	movs	r2, #0
 8003a20:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a26:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003a2c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a32:	b29a      	uxth	r2, r3
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	4a5b      	ldr	r2, [pc, #364]	@ (8003ba8 <HAL_I2C_Mem_Read+0x228>)
 8003a3c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a3e:	88f8      	ldrh	r0, [r7, #6]
 8003a40:	893a      	ldrh	r2, [r7, #8]
 8003a42:	8979      	ldrh	r1, [r7, #10]
 8003a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	68f8      	ldr	r0, [r7, #12]
 8003a50:	f000 fa5e 	bl	8003f10 <I2C_RequestMemoryRead>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d001      	beq.n	8003a5e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
 8003a5c:	e1bc      	b.n	8003dd8 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d113      	bne.n	8003a8e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a66:	2300      	movs	r3, #0
 8003a68:	623b      	str	r3, [r7, #32]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	695b      	ldr	r3, [r3, #20]
 8003a70:	623b      	str	r3, [r7, #32]
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	699b      	ldr	r3, [r3, #24]
 8003a78:	623b      	str	r3, [r7, #32]
 8003a7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	681a      	ldr	r2, [r3, #0]
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a8a:	601a      	str	r2, [r3, #0]
 8003a8c:	e190      	b.n	8003db0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d11b      	bne.n	8003ace <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	681a      	ldr	r2, [r3, #0]
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003aa4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61fb      	str	r3, [r7, #28]
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	695b      	ldr	r3, [r3, #20]
 8003ab0:	61fb      	str	r3, [r7, #28]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	699b      	ldr	r3, [r3, #24]
 8003ab8:	61fb      	str	r3, [r7, #28]
 8003aba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003aca:	601a      	str	r2, [r3, #0]
 8003acc:	e170      	b.n	8003db0 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad2:	2b02      	cmp	r3, #2
 8003ad4:	d11b      	bne.n	8003b0e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ae4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003af4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003af6:	2300      	movs	r3, #0
 8003af8:	61bb      	str	r3, [r7, #24]
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	695b      	ldr	r3, [r3, #20]
 8003b00:	61bb      	str	r3, [r7, #24]
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	699b      	ldr	r3, [r3, #24]
 8003b08:	61bb      	str	r3, [r7, #24]
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	e150      	b.n	8003db0 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	695b      	ldr	r3, [r3, #20]
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	699b      	ldr	r3, [r3, #24]
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003b24:	e144      	b.n	8003db0 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b2a:	2b03      	cmp	r3, #3
 8003b2c:	f200 80f1 	bhi.w	8003d12 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d123      	bne.n	8003b80 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003b3a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003b3c:	68f8      	ldr	r0, [r7, #12]
 8003b3e:	f000 fc79 	bl	8004434 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d001      	beq.n	8003b4c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	e145      	b.n	8003dd8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	691a      	ldr	r2, [r3, #16]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b56:	b2d2      	uxtb	r2, r2
 8003b58:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b5e:	1c5a      	adds	r2, r3, #1
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b68:	3b01      	subs	r3, #1
 8003b6a:	b29a      	uxth	r2, r3
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b74:	b29b      	uxth	r3, r3
 8003b76:	3b01      	subs	r3, #1
 8003b78:	b29a      	uxth	r2, r3
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003b7e:	e117      	b.n	8003db0 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b84:	2b02      	cmp	r3, #2
 8003b86:	d14e      	bne.n	8003c26 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003b88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b8a:	9300      	str	r3, [sp, #0]
 8003b8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b8e:	2200      	movs	r2, #0
 8003b90:	4906      	ldr	r1, [pc, #24]	@ (8003bac <HAL_I2C_Mem_Read+0x22c>)
 8003b92:	68f8      	ldr	r0, [r7, #12]
 8003b94:	f000 faa4 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 8003b98:	4603      	mov	r3, r0
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d008      	beq.n	8003bb0 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	e11a      	b.n	8003dd8 <HAL_I2C_Mem_Read+0x458>
 8003ba2:	bf00      	nop
 8003ba4:	00100002 	.word	0x00100002
 8003ba8:	ffff0000 	.word	0xffff0000
 8003bac:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	691a      	ldr	r2, [r3, #16]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bca:	b2d2      	uxtb	r2, r2
 8003bcc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bd2:	1c5a      	adds	r2, r3, #1
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bdc:	3b01      	subs	r3, #1
 8003bde:	b29a      	uxth	r2, r3
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	691a      	ldr	r2, [r3, #16]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfc:	b2d2      	uxtb	r2, r2
 8003bfe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c04:	1c5a      	adds	r2, r3, #1
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c0e:	3b01      	subs	r3, #1
 8003c10:	b29a      	uxth	r2, r3
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c1a:	b29b      	uxth	r3, r3
 8003c1c:	3b01      	subs	r3, #1
 8003c1e:	b29a      	uxth	r2, r3
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c24:	e0c4      	b.n	8003db0 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c28:	9300      	str	r3, [sp, #0]
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	496c      	ldr	r1, [pc, #432]	@ (8003de0 <HAL_I2C_Mem_Read+0x460>)
 8003c30:	68f8      	ldr	r0, [r7, #12]
 8003c32:	f000 fa55 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 8003c36:	4603      	mov	r3, r0
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d001      	beq.n	8003c40 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0cb      	b.n	8003dd8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681a      	ldr	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691a      	ldr	r2, [r3, #16]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c6c:	3b01      	subs	r3, #1
 8003c6e:	b29a      	uxth	r2, r3
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	3b01      	subs	r3, #1
 8003c7c:	b29a      	uxth	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c84:	9300      	str	r3, [sp, #0]
 8003c86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c88:	2200      	movs	r2, #0
 8003c8a:	4955      	ldr	r1, [pc, #340]	@ (8003de0 <HAL_I2C_Mem_Read+0x460>)
 8003c8c:	68f8      	ldr	r0, [r7, #12]
 8003c8e:	f000 fa27 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 8003c92:	4603      	mov	r3, r0
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d001      	beq.n	8003c9c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003c98:	2301      	movs	r3, #1
 8003c9a:	e09d      	b.n	8003dd8 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	681a      	ldr	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003caa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691a      	ldr	r2, [r3, #16]
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cb6:	b2d2      	uxtb	r2, r2
 8003cb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cc8:	3b01      	subs	r3, #1
 8003cca:	b29a      	uxth	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cd4:	b29b      	uxth	r3, r3
 8003cd6:	3b01      	subs	r3, #1
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	691a      	ldr	r2, [r3, #16]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ce8:	b2d2      	uxtb	r2, r2
 8003cea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf0:	1c5a      	adds	r2, r3, #1
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d06:	b29b      	uxth	r3, r3
 8003d08:	3b01      	subs	r3, #1
 8003d0a:	b29a      	uxth	r2, r3
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d10:	e04e      	b.n	8003db0 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003d12:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003d14:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 fb8c 	bl	8004434 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d1c:	4603      	mov	r3, r0
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d001      	beq.n	8003d26 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003d22:	2301      	movs	r3, #1
 8003d24:	e058      	b.n	8003dd8 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	691a      	ldr	r2, [r3, #16]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d38:	1c5a      	adds	r2, r3, #1
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d42:	3b01      	subs	r3, #1
 8003d44:	b29a      	uxth	r2, r3
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4e:	b29b      	uxth	r3, r3
 8003d50:	3b01      	subs	r3, #1
 8003d52:	b29a      	uxth	r2, r3
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	695b      	ldr	r3, [r3, #20]
 8003d5e:	f003 0304 	and.w	r3, r3, #4
 8003d62:	2b04      	cmp	r3, #4
 8003d64:	d124      	bne.n	8003db0 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d6a:	2b03      	cmp	r3, #3
 8003d6c:	d107      	bne.n	8003d7e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d7c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	691a      	ldr	r2, [r3, #16]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d88:	b2d2      	uxtb	r2, r2
 8003d8a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d90:	1c5a      	adds	r2, r3, #1
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9a:	3b01      	subs	r3, #1
 8003d9c:	b29a      	uxth	r2, r3
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da6:	b29b      	uxth	r3, r3
 8003da8:	3b01      	subs	r3, #1
 8003daa:	b29a      	uxth	r2, r3
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	f47f aeb6 	bne.w	8003b26 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2220      	movs	r2, #32
 8003dbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	e000      	b.n	8003dd8 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003dd6:	2302      	movs	r3, #2
  }
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3728      	adds	r7, #40	@ 0x28
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	00010004 	.word	0x00010004

08003de4 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b088      	sub	sp, #32
 8003de8:	af02      	add	r7, sp, #8
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	4608      	mov	r0, r1
 8003dee:	4611      	mov	r1, r2
 8003df0:	461a      	mov	r2, r3
 8003df2:	4603      	mov	r3, r0
 8003df4:	817b      	strh	r3, [r7, #10]
 8003df6:	460b      	mov	r3, r1
 8003df8:	813b      	strh	r3, [r7, #8]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	681a      	ldr	r2, [r3, #0]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e0c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e10:	9300      	str	r3, [sp, #0]
 8003e12:	6a3b      	ldr	r3, [r7, #32]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e1a:	68f8      	ldr	r0, [r7, #12]
 8003e1c:	f000 f960 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 8003e20:	4603      	mov	r3, r0
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d00d      	beq.n	8003e42 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e30:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e34:	d103      	bne.n	8003e3e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e3c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e3e:	2303      	movs	r3, #3
 8003e40:	e05f      	b.n	8003f02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e42:	897b      	ldrh	r3, [r7, #10]
 8003e44:	b2db      	uxtb	r3, r3
 8003e46:	461a      	mov	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e50:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e54:	6a3a      	ldr	r2, [r7, #32]
 8003e56:	492d      	ldr	r1, [pc, #180]	@ (8003f0c <I2C_RequestMemoryWrite+0x128>)
 8003e58:	68f8      	ldr	r0, [r7, #12]
 8003e5a:	f000 f9bb 	bl	80041d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d001      	beq.n	8003e68 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003e64:	2301      	movs	r3, #1
 8003e66:	e04c      	b.n	8003f02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e68:	2300      	movs	r3, #0
 8003e6a:	617b      	str	r3, [r7, #20]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	695b      	ldr	r3, [r3, #20]
 8003e72:	617b      	str	r3, [r7, #20]
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	699b      	ldr	r3, [r3, #24]
 8003e7a:	617b      	str	r3, [r7, #20]
 8003e7c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e80:	6a39      	ldr	r1, [r7, #32]
 8003e82:	68f8      	ldr	r0, [r7, #12]
 8003e84:	f000 fa46 	bl	8004314 <I2C_WaitOnTXEFlagUntilTimeout>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d00d      	beq.n	8003eaa <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d107      	bne.n	8003ea6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	681a      	ldr	r2, [r3, #0]
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ea4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e02b      	b.n	8003f02 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003eaa:	88fb      	ldrh	r3, [r7, #6]
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d105      	bne.n	8003ebc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003eb0:	893b      	ldrh	r3, [r7, #8]
 8003eb2:	b2da      	uxtb	r2, r3
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	611a      	str	r2, [r3, #16]
 8003eba:	e021      	b.n	8003f00 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ebc:	893b      	ldrh	r3, [r7, #8]
 8003ebe:	0a1b      	lsrs	r3, r3, #8
 8003ec0:	b29b      	uxth	r3, r3
 8003ec2:	b2da      	uxtb	r2, r3
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ecc:	6a39      	ldr	r1, [r7, #32]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 fa20 	bl	8004314 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00d      	beq.n	8003ef6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d107      	bne.n	8003ef2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ef0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e005      	b.n	8003f02 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003ef6:	893b      	ldrh	r3, [r7, #8]
 8003ef8:	b2da      	uxtb	r2, r3
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f00:	2300      	movs	r3, #0
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3718      	adds	r7, #24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
 8003f0a:	bf00      	nop
 8003f0c:	00010002 	.word	0x00010002

08003f10 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b088      	sub	sp, #32
 8003f14:	af02      	add	r7, sp, #8
 8003f16:	60f8      	str	r0, [r7, #12]
 8003f18:	4608      	mov	r0, r1
 8003f1a:	4611      	mov	r1, r2
 8003f1c:	461a      	mov	r2, r3
 8003f1e:	4603      	mov	r3, r0
 8003f20:	817b      	strh	r3, [r7, #10]
 8003f22:	460b      	mov	r3, r1
 8003f24:	813b      	strh	r3, [r7, #8]
 8003f26:	4613      	mov	r3, r2
 8003f28:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	681a      	ldr	r2, [r3, #0]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003f38:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f48:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	6a3b      	ldr	r3, [r7, #32]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f000 f8c2 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d00d      	beq.n	8003f7e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f6c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f70:	d103      	bne.n	8003f7a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f78:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f7a:	2303      	movs	r3, #3
 8003f7c:	e0aa      	b.n	80040d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f7e:	897b      	ldrh	r3, [r7, #10]
 8003f80:	b2db      	uxtb	r3, r3
 8003f82:	461a      	mov	r2, r3
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f8c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f90:	6a3a      	ldr	r2, [r7, #32]
 8003f92:	4952      	ldr	r1, [pc, #328]	@ (80040dc <I2C_RequestMemoryRead+0x1cc>)
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 f91d 	bl	80041d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e097      	b.n	80040d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	617b      	str	r3, [r7, #20]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	617b      	str	r3, [r7, #20]
 8003fb8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003fba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fbc:	6a39      	ldr	r1, [r7, #32]
 8003fbe:	68f8      	ldr	r0, [r7, #12]
 8003fc0:	f000 f9a8 	bl	8004314 <I2C_WaitOnTXEFlagUntilTimeout>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d00d      	beq.n	8003fe6 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d107      	bne.n	8003fe2 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fe0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e076      	b.n	80040d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003fe6:	88fb      	ldrh	r3, [r7, #6]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d105      	bne.n	8003ff8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003fec:	893b      	ldrh	r3, [r7, #8]
 8003fee:	b2da      	uxtb	r2, r3
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	611a      	str	r2, [r3, #16]
 8003ff6:	e021      	b.n	800403c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003ff8:	893b      	ldrh	r3, [r7, #8]
 8003ffa:	0a1b      	lsrs	r3, r3, #8
 8003ffc:	b29b      	uxth	r3, r3
 8003ffe:	b2da      	uxtb	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004006:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004008:	6a39      	ldr	r1, [r7, #32]
 800400a:	68f8      	ldr	r0, [r7, #12]
 800400c:	f000 f982 	bl	8004314 <I2C_WaitOnTXEFlagUntilTimeout>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00d      	beq.n	8004032 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800401a:	2b04      	cmp	r3, #4
 800401c:	d107      	bne.n	800402e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800402c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e050      	b.n	80040d4 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004032:	893b      	ldrh	r3, [r7, #8]
 8004034:	b2da      	uxtb	r2, r3
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800403c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403e:	6a39      	ldr	r1, [r7, #32]
 8004040:	68f8      	ldr	r0, [r7, #12]
 8004042:	f000 f967 	bl	8004314 <I2C_WaitOnTXEFlagUntilTimeout>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d00d      	beq.n	8004068 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004050:	2b04      	cmp	r3, #4
 8004052:	d107      	bne.n	8004064 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681a      	ldr	r2, [r3, #0]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004062:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e035      	b.n	80040d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004076:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004078:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800407a:	9300      	str	r3, [sp, #0]
 800407c:	6a3b      	ldr	r3, [r7, #32]
 800407e:	2200      	movs	r2, #0
 8004080:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004084:	68f8      	ldr	r0, [r7, #12]
 8004086:	f000 f82b 	bl	80040e0 <I2C_WaitOnFlagUntilTimeout>
 800408a:	4603      	mov	r3, r0
 800408c:	2b00      	cmp	r3, #0
 800408e:	d00d      	beq.n	80040ac <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800409a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800409e:	d103      	bne.n	80040a8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80040a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e013      	b.n	80040d4 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80040ac:	897b      	ldrh	r3, [r7, #10]
 80040ae:	b2db      	uxtb	r3, r3
 80040b0:	f043 0301 	orr.w	r3, r3, #1
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040be:	6a3a      	ldr	r2, [r7, #32]
 80040c0:	4906      	ldr	r1, [pc, #24]	@ (80040dc <I2C_RequestMemoryRead+0x1cc>)
 80040c2:	68f8      	ldr	r0, [r7, #12]
 80040c4:	f000 f886 	bl	80041d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e000      	b.n	80040d4 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3718      	adds	r7, #24
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	00010002 	.word	0x00010002

080040e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80040e0:	b580      	push	{r7, lr}
 80040e2:	b084      	sub	sp, #16
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	60f8      	str	r0, [r7, #12]
 80040e8:	60b9      	str	r1, [r7, #8]
 80040ea:	603b      	str	r3, [r7, #0]
 80040ec:	4613      	mov	r3, r2
 80040ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040f0:	e048      	b.n	8004184 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040f8:	d044      	beq.n	8004184 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040fa:	f7fe fb6b 	bl	80027d4 <HAL_GetTick>
 80040fe:	4602      	mov	r2, r0
 8004100:	69bb      	ldr	r3, [r7, #24]
 8004102:	1ad3      	subs	r3, r2, r3
 8004104:	683a      	ldr	r2, [r7, #0]
 8004106:	429a      	cmp	r2, r3
 8004108:	d302      	bcc.n	8004110 <I2C_WaitOnFlagUntilTimeout+0x30>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d139      	bne.n	8004184 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	0c1b      	lsrs	r3, r3, #16
 8004114:	b2db      	uxtb	r3, r3
 8004116:	2b01      	cmp	r3, #1
 8004118:	d10d      	bne.n	8004136 <I2C_WaitOnFlagUntilTimeout+0x56>
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	695b      	ldr	r3, [r3, #20]
 8004120:	43da      	mvns	r2, r3
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	4013      	ands	r3, r2
 8004126:	b29b      	uxth	r3, r3
 8004128:	2b00      	cmp	r3, #0
 800412a:	bf0c      	ite	eq
 800412c:	2301      	moveq	r3, #1
 800412e:	2300      	movne	r3, #0
 8004130:	b2db      	uxtb	r3, r3
 8004132:	461a      	mov	r2, r3
 8004134:	e00c      	b.n	8004150 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	699b      	ldr	r3, [r3, #24]
 800413c:	43da      	mvns	r2, r3
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	4013      	ands	r3, r2
 8004142:	b29b      	uxth	r3, r3
 8004144:	2b00      	cmp	r3, #0
 8004146:	bf0c      	ite	eq
 8004148:	2301      	moveq	r3, #1
 800414a:	2300      	movne	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	461a      	mov	r2, r3
 8004150:	79fb      	ldrb	r3, [r7, #7]
 8004152:	429a      	cmp	r2, r3
 8004154:	d116      	bne.n	8004184 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	2200      	movs	r2, #0
 800415a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	2220      	movs	r2, #32
 8004160:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	2200      	movs	r2, #0
 8004168:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004170:	f043 0220 	orr.w	r2, r3, #32
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004180:	2301      	movs	r3, #1
 8004182:	e023      	b.n	80041cc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	0c1b      	lsrs	r3, r3, #16
 8004188:	b2db      	uxtb	r3, r3
 800418a:	2b01      	cmp	r3, #1
 800418c:	d10d      	bne.n	80041aa <I2C_WaitOnFlagUntilTimeout+0xca>
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695b      	ldr	r3, [r3, #20]
 8004194:	43da      	mvns	r2, r3
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	4013      	ands	r3, r2
 800419a:	b29b      	uxth	r3, r3
 800419c:	2b00      	cmp	r3, #0
 800419e:	bf0c      	ite	eq
 80041a0:	2301      	moveq	r3, #1
 80041a2:	2300      	movne	r3, #0
 80041a4:	b2db      	uxtb	r3, r3
 80041a6:	461a      	mov	r2, r3
 80041a8:	e00c      	b.n	80041c4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	699b      	ldr	r3, [r3, #24]
 80041b0:	43da      	mvns	r2, r3
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	4013      	ands	r3, r2
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	bf0c      	ite	eq
 80041bc:	2301      	moveq	r3, #1
 80041be:	2300      	movne	r3, #0
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	461a      	mov	r2, r3
 80041c4:	79fb      	ldrb	r3, [r7, #7]
 80041c6:	429a      	cmp	r2, r3
 80041c8:	d093      	beq.n	80040f2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3710      	adds	r7, #16
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
 80041e0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80041e2:	e071      	b.n	80042c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	695b      	ldr	r3, [r3, #20]
 80041ea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80041ee:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041f2:	d123      	bne.n	800423c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681a      	ldr	r2, [r3, #0]
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004202:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800420c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2200      	movs	r2, #0
 8004212:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2220      	movs	r2, #32
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004228:	f043 0204 	orr.w	r2, r3, #4
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2200      	movs	r2, #0
 8004234:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	e067      	b.n	800430c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004242:	d041      	beq.n	80042c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004244:	f7fe fac6 	bl	80027d4 <HAL_GetTick>
 8004248:	4602      	mov	r2, r0
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	1ad3      	subs	r3, r2, r3
 800424e:	687a      	ldr	r2, [r7, #4]
 8004250:	429a      	cmp	r2, r3
 8004252:	d302      	bcc.n	800425a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d136      	bne.n	80042c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	0c1b      	lsrs	r3, r3, #16
 800425e:	b2db      	uxtb	r3, r3
 8004260:	2b01      	cmp	r3, #1
 8004262:	d10c      	bne.n	800427e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	695b      	ldr	r3, [r3, #20]
 800426a:	43da      	mvns	r2, r3
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	4013      	ands	r3, r2
 8004270:	b29b      	uxth	r3, r3
 8004272:	2b00      	cmp	r3, #0
 8004274:	bf14      	ite	ne
 8004276:	2301      	movne	r3, #1
 8004278:	2300      	moveq	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	e00b      	b.n	8004296 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	699b      	ldr	r3, [r3, #24]
 8004284:	43da      	mvns	r2, r3
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	4013      	ands	r3, r2
 800428a:	b29b      	uxth	r3, r3
 800428c:	2b00      	cmp	r3, #0
 800428e:	bf14      	ite	ne
 8004290:	2301      	movne	r3, #1
 8004292:	2300      	moveq	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	2b00      	cmp	r3, #0
 8004298:	d016      	beq.n	80042c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2200      	movs	r2, #0
 800429e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2220      	movs	r2, #32
 80042a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2200      	movs	r2, #0
 80042ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042b4:	f043 0220 	orr.w	r2, r3, #32
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e021      	b.n	800430c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	0c1b      	lsrs	r3, r3, #16
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	2b01      	cmp	r3, #1
 80042d0:	d10c      	bne.n	80042ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	43da      	mvns	r2, r3
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	4013      	ands	r3, r2
 80042de:	b29b      	uxth	r3, r3
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	bf14      	ite	ne
 80042e4:	2301      	movne	r3, #1
 80042e6:	2300      	moveq	r3, #0
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	e00b      	b.n	8004304 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	699b      	ldr	r3, [r3, #24]
 80042f2:	43da      	mvns	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	4013      	ands	r3, r2
 80042f8:	b29b      	uxth	r3, r3
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	bf14      	ite	ne
 80042fe:	2301      	movne	r3, #1
 8004300:	2300      	moveq	r3, #0
 8004302:	b2db      	uxtb	r3, r3
 8004304:	2b00      	cmp	r3, #0
 8004306:	f47f af6d 	bne.w	80041e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800430a:	2300      	movs	r3, #0
}
 800430c:	4618      	mov	r0, r3
 800430e:	3710      	adds	r7, #16
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	60f8      	str	r0, [r7, #12]
 800431c:	60b9      	str	r1, [r7, #8]
 800431e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004320:	e034      	b.n	800438c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004322:	68f8      	ldr	r0, [r7, #12]
 8004324:	f000 f8e3 	bl	80044ee <I2C_IsAcknowledgeFailed>
 8004328:	4603      	mov	r3, r0
 800432a:	2b00      	cmp	r3, #0
 800432c:	d001      	beq.n	8004332 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e034      	b.n	800439c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004332:	68bb      	ldr	r3, [r7, #8]
 8004334:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004338:	d028      	beq.n	800438c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800433a:	f7fe fa4b 	bl	80027d4 <HAL_GetTick>
 800433e:	4602      	mov	r2, r0
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	1ad3      	subs	r3, r2, r3
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	429a      	cmp	r2, r3
 8004348:	d302      	bcc.n	8004350 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d11d      	bne.n	800438c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800435a:	2b80      	cmp	r3, #128	@ 0x80
 800435c:	d016      	beq.n	800438c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	2200      	movs	r2, #0
 8004362:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2220      	movs	r2, #32
 8004368:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2200      	movs	r2, #0
 8004370:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004378:	f043 0220 	orr.w	r2, r3, #32
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e007      	b.n	800439c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	695b      	ldr	r3, [r3, #20]
 8004392:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004396:	2b80      	cmp	r3, #128	@ 0x80
 8004398:	d1c3      	bne.n	8004322 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800439a:	2300      	movs	r3, #0
}
 800439c:	4618      	mov	r0, r3
 800439e:	3710      	adds	r7, #16
 80043a0:	46bd      	mov	sp, r7
 80043a2:	bd80      	pop	{r7, pc}

080043a4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b084      	sub	sp, #16
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	60f8      	str	r0, [r7, #12]
 80043ac:	60b9      	str	r1, [r7, #8]
 80043ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80043b0:	e034      	b.n	800441c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f000 f89b 	bl	80044ee <I2C_IsAcknowledgeFailed>
 80043b8:	4603      	mov	r3, r0
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e034      	b.n	800442c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80043c2:	68bb      	ldr	r3, [r7, #8]
 80043c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043c8:	d028      	beq.n	800441c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80043ca:	f7fe fa03 	bl	80027d4 <HAL_GetTick>
 80043ce:	4602      	mov	r2, r0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	1ad3      	subs	r3, r2, r3
 80043d4:	68ba      	ldr	r2, [r7, #8]
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d302      	bcc.n	80043e0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80043da:	68bb      	ldr	r3, [r7, #8]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d11d      	bne.n	800441c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	695b      	ldr	r3, [r3, #20]
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	2b04      	cmp	r3, #4
 80043ec:	d016      	beq.n	800441c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	2200      	movs	r2, #0
 80043f2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004408:	f043 0220 	orr.w	r2, r3, #32
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e007      	b.n	800442c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	695b      	ldr	r3, [r3, #20]
 8004422:	f003 0304 	and.w	r3, r3, #4
 8004426:	2b04      	cmp	r3, #4
 8004428:	d1c3      	bne.n	80043b2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3710      	adds	r7, #16
 8004430:	46bd      	mov	sp, r7
 8004432:	bd80      	pop	{r7, pc}

08004434 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b084      	sub	sp, #16
 8004438:	af00      	add	r7, sp, #0
 800443a:	60f8      	str	r0, [r7, #12]
 800443c:	60b9      	str	r1, [r7, #8]
 800443e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004440:	e049      	b.n	80044d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	f003 0310 	and.w	r3, r3, #16
 800444c:	2b10      	cmp	r3, #16
 800444e:	d119      	bne.n	8004484 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f06f 0210 	mvn.w	r2, #16
 8004458:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2200      	movs	r2, #0
 800445e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2220      	movs	r2, #32
 8004464:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	2200      	movs	r2, #0
 800446c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e030      	b.n	80044e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004484:	f7fe f9a6 	bl	80027d4 <HAL_GetTick>
 8004488:	4602      	mov	r2, r0
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	1ad3      	subs	r3, r2, r3
 800448e:	68ba      	ldr	r2, [r7, #8]
 8004490:	429a      	cmp	r2, r3
 8004492:	d302      	bcc.n	800449a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	2b00      	cmp	r3, #0
 8004498:	d11d      	bne.n	80044d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	695b      	ldr	r3, [r3, #20]
 80044a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044a4:	2b40      	cmp	r3, #64	@ 0x40
 80044a6:	d016      	beq.n	80044d6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2220      	movs	r2, #32
 80044b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	2200      	movs	r2, #0
 80044ba:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c2:	f043 0220 	orr.w	r2, r3, #32
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80044d2:	2301      	movs	r3, #1
 80044d4:	e007      	b.n	80044e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044e0:	2b40      	cmp	r3, #64	@ 0x40
 80044e2:	d1ae      	bne.n	8004442 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80044e4:	2300      	movs	r3, #0
}
 80044e6:	4618      	mov	r0, r3
 80044e8:	3710      	adds	r7, #16
 80044ea:	46bd      	mov	sp, r7
 80044ec:	bd80      	pop	{r7, pc}

080044ee <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80044ee:	b480      	push	{r7}
 80044f0:	b083      	sub	sp, #12
 80044f2:	af00      	add	r7, sp, #0
 80044f4:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	695b      	ldr	r3, [r3, #20]
 80044fc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004500:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004504:	d11b      	bne.n	800453e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800450e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800452a:	f043 0204 	orr.w	r2, r3, #4
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e000      	b.n	8004540 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	370c      	adds	r7, #12
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b086      	sub	sp, #24
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d101      	bne.n	800455e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800455a:	2301      	movs	r3, #1
 800455c:	e267      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f003 0301 	and.w	r3, r3, #1
 8004566:	2b00      	cmp	r3, #0
 8004568:	d075      	beq.n	8004656 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800456a:	4b88      	ldr	r3, [pc, #544]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 800456c:	689b      	ldr	r3, [r3, #8]
 800456e:	f003 030c 	and.w	r3, r3, #12
 8004572:	2b04      	cmp	r3, #4
 8004574:	d00c      	beq.n	8004590 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004576:	4b85      	ldr	r3, [pc, #532]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800457e:	2b08      	cmp	r3, #8
 8004580:	d112      	bne.n	80045a8 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004582:	4b82      	ldr	r3, [pc, #520]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800458a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800458e:	d10b      	bne.n	80045a8 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004590:	4b7e      	ldr	r3, [pc, #504]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004598:	2b00      	cmp	r3, #0
 800459a:	d05b      	beq.n	8004654 <HAL_RCC_OscConfig+0x108>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d157      	bne.n	8004654 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e242      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80045b0:	d106      	bne.n	80045c0 <HAL_RCC_OscConfig+0x74>
 80045b2:	4b76      	ldr	r3, [pc, #472]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a75      	ldr	r2, [pc, #468]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80045b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045bc:	6013      	str	r3, [r2, #0]
 80045be:	e01d      	b.n	80045fc <HAL_RCC_OscConfig+0xb0>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80045c8:	d10c      	bne.n	80045e4 <HAL_RCC_OscConfig+0x98>
 80045ca:	4b70      	ldr	r3, [pc, #448]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a6f      	ldr	r2, [pc, #444]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80045d0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80045d4:	6013      	str	r3, [r2, #0]
 80045d6:	4b6d      	ldr	r3, [pc, #436]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	4a6c      	ldr	r2, [pc, #432]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80045dc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80045e0:	6013      	str	r3, [r2, #0]
 80045e2:	e00b      	b.n	80045fc <HAL_RCC_OscConfig+0xb0>
 80045e4:	4b69      	ldr	r3, [pc, #420]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	4a68      	ldr	r2, [pc, #416]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80045ea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80045ee:	6013      	str	r3, [r2, #0]
 80045f0:	4b66      	ldr	r3, [pc, #408]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a65      	ldr	r2, [pc, #404]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80045f6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80045fa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	2b00      	cmp	r3, #0
 8004602:	d013      	beq.n	800462c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004604:	f7fe f8e6 	bl	80027d4 <HAL_GetTick>
 8004608:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800460a:	e008      	b.n	800461e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800460c:	f7fe f8e2 	bl	80027d4 <HAL_GetTick>
 8004610:	4602      	mov	r2, r0
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	1ad3      	subs	r3, r2, r3
 8004616:	2b64      	cmp	r3, #100	@ 0x64
 8004618:	d901      	bls.n	800461e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e207      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800461e:	4b5b      	ldr	r3, [pc, #364]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004626:	2b00      	cmp	r3, #0
 8004628:	d0f0      	beq.n	800460c <HAL_RCC_OscConfig+0xc0>
 800462a:	e014      	b.n	8004656 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800462c:	f7fe f8d2 	bl	80027d4 <HAL_GetTick>
 8004630:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004632:	e008      	b.n	8004646 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004634:	f7fe f8ce 	bl	80027d4 <HAL_GetTick>
 8004638:	4602      	mov	r2, r0
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	1ad3      	subs	r3, r2, r3
 800463e:	2b64      	cmp	r3, #100	@ 0x64
 8004640:	d901      	bls.n	8004646 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004642:	2303      	movs	r3, #3
 8004644:	e1f3      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004646:	4b51      	ldr	r3, [pc, #324]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d1f0      	bne.n	8004634 <HAL_RCC_OscConfig+0xe8>
 8004652:	e000      	b.n	8004656 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004654:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0302 	and.w	r3, r3, #2
 800465e:	2b00      	cmp	r3, #0
 8004660:	d063      	beq.n	800472a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004662:	4b4a      	ldr	r3, [pc, #296]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 8004664:	689b      	ldr	r3, [r3, #8]
 8004666:	f003 030c 	and.w	r3, r3, #12
 800466a:	2b00      	cmp	r3, #0
 800466c:	d00b      	beq.n	8004686 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800466e:	4b47      	ldr	r3, [pc, #284]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004676:	2b08      	cmp	r3, #8
 8004678:	d11c      	bne.n	80046b4 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800467a:	4b44      	ldr	r3, [pc, #272]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d116      	bne.n	80046b4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004686:	4b41      	ldr	r3, [pc, #260]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d005      	beq.n	800469e <HAL_RCC_OscConfig+0x152>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	68db      	ldr	r3, [r3, #12]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d001      	beq.n	800469e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800469a:	2301      	movs	r3, #1
 800469c:	e1c7      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800469e:	4b3b      	ldr	r3, [pc, #236]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	691b      	ldr	r3, [r3, #16]
 80046aa:	00db      	lsls	r3, r3, #3
 80046ac:	4937      	ldr	r1, [pc, #220]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80046ae:	4313      	orrs	r3, r2
 80046b0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80046b2:	e03a      	b.n	800472a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	68db      	ldr	r3, [r3, #12]
 80046b8:	2b00      	cmp	r3, #0
 80046ba:	d020      	beq.n	80046fe <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80046bc:	4b34      	ldr	r3, [pc, #208]	@ (8004790 <HAL_RCC_OscConfig+0x244>)
 80046be:	2201      	movs	r2, #1
 80046c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046c2:	f7fe f887 	bl	80027d4 <HAL_GetTick>
 80046c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046c8:	e008      	b.n	80046dc <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046ca:	f7fe f883 	bl	80027d4 <HAL_GetTick>
 80046ce:	4602      	mov	r2, r0
 80046d0:	693b      	ldr	r3, [r7, #16]
 80046d2:	1ad3      	subs	r3, r2, r3
 80046d4:	2b02      	cmp	r3, #2
 80046d6:	d901      	bls.n	80046dc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80046d8:	2303      	movs	r3, #3
 80046da:	e1a8      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046dc:	4b2b      	ldr	r3, [pc, #172]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d0f0      	beq.n	80046ca <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80046e8:	4b28      	ldr	r3, [pc, #160]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	00db      	lsls	r3, r3, #3
 80046f6:	4925      	ldr	r1, [pc, #148]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 80046f8:	4313      	orrs	r3, r2
 80046fa:	600b      	str	r3, [r1, #0]
 80046fc:	e015      	b.n	800472a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046fe:	4b24      	ldr	r3, [pc, #144]	@ (8004790 <HAL_RCC_OscConfig+0x244>)
 8004700:	2200      	movs	r2, #0
 8004702:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004704:	f7fe f866 	bl	80027d4 <HAL_GetTick>
 8004708:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800470a:	e008      	b.n	800471e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800470c:	f7fe f862 	bl	80027d4 <HAL_GetTick>
 8004710:	4602      	mov	r2, r0
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	1ad3      	subs	r3, r2, r3
 8004716:	2b02      	cmp	r3, #2
 8004718:	d901      	bls.n	800471e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800471a:	2303      	movs	r3, #3
 800471c:	e187      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800471e:	4b1b      	ldr	r3, [pc, #108]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f0      	bne.n	800470c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0308 	and.w	r3, r3, #8
 8004732:	2b00      	cmp	r3, #0
 8004734:	d036      	beq.n	80047a4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	695b      	ldr	r3, [r3, #20]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d016      	beq.n	800476c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800473e:	4b15      	ldr	r3, [pc, #84]	@ (8004794 <HAL_RCC_OscConfig+0x248>)
 8004740:	2201      	movs	r2, #1
 8004742:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004744:	f7fe f846 	bl	80027d4 <HAL_GetTick>
 8004748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800474a:	e008      	b.n	800475e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800474c:	f7fe f842 	bl	80027d4 <HAL_GetTick>
 8004750:	4602      	mov	r2, r0
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	1ad3      	subs	r3, r2, r3
 8004756:	2b02      	cmp	r3, #2
 8004758:	d901      	bls.n	800475e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800475a:	2303      	movs	r3, #3
 800475c:	e167      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800475e:	4b0b      	ldr	r3, [pc, #44]	@ (800478c <HAL_RCC_OscConfig+0x240>)
 8004760:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004762:	f003 0302 	and.w	r3, r3, #2
 8004766:	2b00      	cmp	r3, #0
 8004768:	d0f0      	beq.n	800474c <HAL_RCC_OscConfig+0x200>
 800476a:	e01b      	b.n	80047a4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800476c:	4b09      	ldr	r3, [pc, #36]	@ (8004794 <HAL_RCC_OscConfig+0x248>)
 800476e:	2200      	movs	r2, #0
 8004770:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004772:	f7fe f82f 	bl	80027d4 <HAL_GetTick>
 8004776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004778:	e00e      	b.n	8004798 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800477a:	f7fe f82b 	bl	80027d4 <HAL_GetTick>
 800477e:	4602      	mov	r2, r0
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	1ad3      	subs	r3, r2, r3
 8004784:	2b02      	cmp	r3, #2
 8004786:	d907      	bls.n	8004798 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e150      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
 800478c:	40023800 	.word	0x40023800
 8004790:	42470000 	.word	0x42470000
 8004794:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004798:	4b88      	ldr	r3, [pc, #544]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 800479a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800479c:	f003 0302 	and.w	r3, r3, #2
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d1ea      	bne.n	800477a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f003 0304 	and.w	r3, r3, #4
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	f000 8097 	beq.w	80048e0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80047b2:	2300      	movs	r3, #0
 80047b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80047b6:	4b81      	ldr	r3, [pc, #516]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 80047b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d10f      	bne.n	80047e2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80047c2:	2300      	movs	r3, #0
 80047c4:	60bb      	str	r3, [r7, #8]
 80047c6:	4b7d      	ldr	r3, [pc, #500]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 80047c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ca:	4a7c      	ldr	r2, [pc, #496]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 80047cc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80047d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80047d2:	4b7a      	ldr	r3, [pc, #488]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 80047d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80047da:	60bb      	str	r3, [r7, #8]
 80047dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80047de:	2301      	movs	r3, #1
 80047e0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047e2:	4b77      	ldr	r3, [pc, #476]	@ (80049c0 <HAL_RCC_OscConfig+0x474>)
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d118      	bne.n	8004820 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047ee:	4b74      	ldr	r3, [pc, #464]	@ (80049c0 <HAL_RCC_OscConfig+0x474>)
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	4a73      	ldr	r2, [pc, #460]	@ (80049c0 <HAL_RCC_OscConfig+0x474>)
 80047f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80047f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047fa:	f7fd ffeb 	bl	80027d4 <HAL_GetTick>
 80047fe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004800:	e008      	b.n	8004814 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004802:	f7fd ffe7 	bl	80027d4 <HAL_GetTick>
 8004806:	4602      	mov	r2, r0
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	1ad3      	subs	r3, r2, r3
 800480c:	2b02      	cmp	r3, #2
 800480e:	d901      	bls.n	8004814 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004810:	2303      	movs	r3, #3
 8004812:	e10c      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004814:	4b6a      	ldr	r3, [pc, #424]	@ (80049c0 <HAL_RCC_OscConfig+0x474>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800481c:	2b00      	cmp	r3, #0
 800481e:	d0f0      	beq.n	8004802 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	2b01      	cmp	r3, #1
 8004826:	d106      	bne.n	8004836 <HAL_RCC_OscConfig+0x2ea>
 8004828:	4b64      	ldr	r3, [pc, #400]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 800482a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800482c:	4a63      	ldr	r2, [pc, #396]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 800482e:	f043 0301 	orr.w	r3, r3, #1
 8004832:	6713      	str	r3, [r2, #112]	@ 0x70
 8004834:	e01c      	b.n	8004870 <HAL_RCC_OscConfig+0x324>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	2b05      	cmp	r3, #5
 800483c:	d10c      	bne.n	8004858 <HAL_RCC_OscConfig+0x30c>
 800483e:	4b5f      	ldr	r3, [pc, #380]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 8004840:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004842:	4a5e      	ldr	r2, [pc, #376]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 8004844:	f043 0304 	orr.w	r3, r3, #4
 8004848:	6713      	str	r3, [r2, #112]	@ 0x70
 800484a:	4b5c      	ldr	r3, [pc, #368]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 800484c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800484e:	4a5b      	ldr	r2, [pc, #364]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 8004850:	f043 0301 	orr.w	r3, r3, #1
 8004854:	6713      	str	r3, [r2, #112]	@ 0x70
 8004856:	e00b      	b.n	8004870 <HAL_RCC_OscConfig+0x324>
 8004858:	4b58      	ldr	r3, [pc, #352]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 800485a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800485c:	4a57      	ldr	r2, [pc, #348]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 800485e:	f023 0301 	bic.w	r3, r3, #1
 8004862:	6713      	str	r3, [r2, #112]	@ 0x70
 8004864:	4b55      	ldr	r3, [pc, #340]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 8004866:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004868:	4a54      	ldr	r2, [pc, #336]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 800486a:	f023 0304 	bic.w	r3, r3, #4
 800486e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	2b00      	cmp	r3, #0
 8004876:	d015      	beq.n	80048a4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004878:	f7fd ffac 	bl	80027d4 <HAL_GetTick>
 800487c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800487e:	e00a      	b.n	8004896 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004880:	f7fd ffa8 	bl	80027d4 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e0cb      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004896:	4b49      	ldr	r3, [pc, #292]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 8004898:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d0ee      	beq.n	8004880 <HAL_RCC_OscConfig+0x334>
 80048a2:	e014      	b.n	80048ce <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048a4:	f7fd ff96 	bl	80027d4 <HAL_GetTick>
 80048a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048aa:	e00a      	b.n	80048c2 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80048ac:	f7fd ff92 	bl	80027d4 <HAL_GetTick>
 80048b0:	4602      	mov	r2, r0
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	1ad3      	subs	r3, r2, r3
 80048b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d901      	bls.n	80048c2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80048be:	2303      	movs	r3, #3
 80048c0:	e0b5      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048c2:	4b3e      	ldr	r3, [pc, #248]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 80048c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80048c6:	f003 0302 	and.w	r3, r3, #2
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d1ee      	bne.n	80048ac <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80048ce:	7dfb      	ldrb	r3, [r7, #23]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d105      	bne.n	80048e0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048d4:	4b39      	ldr	r3, [pc, #228]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 80048d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048d8:	4a38      	ldr	r2, [pc, #224]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 80048da:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80048de:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	699b      	ldr	r3, [r3, #24]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f000 80a1 	beq.w	8004a2c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048ea:	4b34      	ldr	r3, [pc, #208]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 030c 	and.w	r3, r3, #12
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d05c      	beq.n	80049b0 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	2b02      	cmp	r3, #2
 80048fc:	d141      	bne.n	8004982 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048fe:	4b31      	ldr	r3, [pc, #196]	@ (80049c4 <HAL_RCC_OscConfig+0x478>)
 8004900:	2200      	movs	r2, #0
 8004902:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004904:	f7fd ff66 	bl	80027d4 <HAL_GetTick>
 8004908:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800490a:	e008      	b.n	800491e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800490c:	f7fd ff62 	bl	80027d4 <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	693b      	ldr	r3, [r7, #16]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	2b02      	cmp	r3, #2
 8004918:	d901      	bls.n	800491e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800491a:	2303      	movs	r3, #3
 800491c:	e087      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800491e:	4b27      	ldr	r3, [pc, #156]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004926:	2b00      	cmp	r3, #0
 8004928:	d1f0      	bne.n	800490c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69da      	ldr	r2, [r3, #28]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004938:	019b      	lsls	r3, r3, #6
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004940:	085b      	lsrs	r3, r3, #1
 8004942:	3b01      	subs	r3, #1
 8004944:	041b      	lsls	r3, r3, #16
 8004946:	431a      	orrs	r2, r3
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800494c:	061b      	lsls	r3, r3, #24
 800494e:	491b      	ldr	r1, [pc, #108]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 8004950:	4313      	orrs	r3, r2
 8004952:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004954:	4b1b      	ldr	r3, [pc, #108]	@ (80049c4 <HAL_RCC_OscConfig+0x478>)
 8004956:	2201      	movs	r2, #1
 8004958:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800495a:	f7fd ff3b 	bl	80027d4 <HAL_GetTick>
 800495e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004960:	e008      	b.n	8004974 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004962:	f7fd ff37 	bl	80027d4 <HAL_GetTick>
 8004966:	4602      	mov	r2, r0
 8004968:	693b      	ldr	r3, [r7, #16]
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	2b02      	cmp	r3, #2
 800496e:	d901      	bls.n	8004974 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004970:	2303      	movs	r3, #3
 8004972:	e05c      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004974:	4b11      	ldr	r3, [pc, #68]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800497c:	2b00      	cmp	r3, #0
 800497e:	d0f0      	beq.n	8004962 <HAL_RCC_OscConfig+0x416>
 8004980:	e054      	b.n	8004a2c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004982:	4b10      	ldr	r3, [pc, #64]	@ (80049c4 <HAL_RCC_OscConfig+0x478>)
 8004984:	2200      	movs	r2, #0
 8004986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004988:	f7fd ff24 	bl	80027d4 <HAL_GetTick>
 800498c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800498e:	e008      	b.n	80049a2 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004990:	f7fd ff20 	bl	80027d4 <HAL_GetTick>
 8004994:	4602      	mov	r2, r0
 8004996:	693b      	ldr	r3, [r7, #16]
 8004998:	1ad3      	subs	r3, r2, r3
 800499a:	2b02      	cmp	r3, #2
 800499c:	d901      	bls.n	80049a2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800499e:	2303      	movs	r3, #3
 80049a0:	e045      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80049a2:	4b06      	ldr	r3, [pc, #24]	@ (80049bc <HAL_RCC_OscConfig+0x470>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d1f0      	bne.n	8004990 <HAL_RCC_OscConfig+0x444>
 80049ae:	e03d      	b.n	8004a2c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	699b      	ldr	r3, [r3, #24]
 80049b4:	2b01      	cmp	r3, #1
 80049b6:	d107      	bne.n	80049c8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80049b8:	2301      	movs	r3, #1
 80049ba:	e038      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
 80049bc:	40023800 	.word	0x40023800
 80049c0:	40007000 	.word	0x40007000
 80049c4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80049c8:	4b1b      	ldr	r3, [pc, #108]	@ (8004a38 <HAL_RCC_OscConfig+0x4ec>)
 80049ca:	685b      	ldr	r3, [r3, #4]
 80049cc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d028      	beq.n	8004a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80049e0:	429a      	cmp	r2, r3
 80049e2:	d121      	bne.n	8004a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ee:	429a      	cmp	r2, r3
 80049f0:	d11a      	bne.n	8004a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80049f2:	68fa      	ldr	r2, [r7, #12]
 80049f4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80049f8:	4013      	ands	r3, r2
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80049fe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004a00:	4293      	cmp	r3, r2
 8004a02:	d111      	bne.n	8004a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0e:	085b      	lsrs	r3, r3, #1
 8004a10:	3b01      	subs	r3, #1
 8004a12:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004a14:	429a      	cmp	r2, r3
 8004a16:	d107      	bne.n	8004a28 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a22:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d001      	beq.n	8004a2c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e000      	b.n	8004a2e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004a2c:	2300      	movs	r3, #0
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3718      	adds	r7, #24
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	40023800 	.word	0x40023800

08004a3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b084      	sub	sp, #16
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d101      	bne.n	8004a50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004a4c:	2301      	movs	r3, #1
 8004a4e:	e0cc      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004a50:	4b68      	ldr	r3, [pc, #416]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0307 	and.w	r3, r3, #7
 8004a58:	683a      	ldr	r2, [r7, #0]
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d90c      	bls.n	8004a78 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a5e:	4b65      	ldr	r3, [pc, #404]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a60:	683a      	ldr	r2, [r7, #0]
 8004a62:	b2d2      	uxtb	r2, r2
 8004a64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a66:	4b63      	ldr	r3, [pc, #396]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0307 	and.w	r3, r3, #7
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	429a      	cmp	r2, r3
 8004a72:	d001      	beq.n	8004a78 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	e0b8      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d020      	beq.n	8004ac6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0304 	and.w	r3, r3, #4
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d005      	beq.n	8004a9c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a90:	4b59      	ldr	r3, [pc, #356]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	4a58      	ldr	r2, [pc, #352]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004a96:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004a9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f003 0308 	and.w	r3, r3, #8
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d005      	beq.n	8004ab4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004aa8:	4b53      	ldr	r3, [pc, #332]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aaa:	689b      	ldr	r3, [r3, #8]
 8004aac:	4a52      	ldr	r2, [pc, #328]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004aae:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ab2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ab4:	4b50      	ldr	r3, [pc, #320]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	689b      	ldr	r3, [r3, #8]
 8004ac0:	494d      	ldr	r1, [pc, #308]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d044      	beq.n	8004b5c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2b01      	cmp	r3, #1
 8004ad8:	d107      	bne.n	8004aea <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ada:	4b47      	ldr	r3, [pc, #284]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d119      	bne.n	8004b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e07f      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	2b02      	cmp	r3, #2
 8004af0:	d003      	beq.n	8004afa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004af6:	2b03      	cmp	r3, #3
 8004af8:	d107      	bne.n	8004b0a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004afa:	4b3f      	ldr	r3, [pc, #252]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d109      	bne.n	8004b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b06:	2301      	movs	r3, #1
 8004b08:	e06f      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b0a:	4b3b      	ldr	r3, [pc, #236]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d101      	bne.n	8004b1a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b16:	2301      	movs	r3, #1
 8004b18:	e067      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004b1a:	4b37      	ldr	r3, [pc, #220]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f023 0203 	bic.w	r2, r3, #3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	4934      	ldr	r1, [pc, #208]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004b2c:	f7fd fe52 	bl	80027d4 <HAL_GetTick>
 8004b30:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b32:	e00a      	b.n	8004b4a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004b34:	f7fd fe4e 	bl	80027d4 <HAL_GetTick>
 8004b38:	4602      	mov	r2, r0
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b42:	4293      	cmp	r3, r2
 8004b44:	d901      	bls.n	8004b4a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004b46:	2303      	movs	r3, #3
 8004b48:	e04f      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004b4a:	4b2b      	ldr	r3, [pc, #172]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	f003 020c 	and.w	r2, r3, #12
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	685b      	ldr	r3, [r3, #4]
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	429a      	cmp	r2, r3
 8004b5a:	d1eb      	bne.n	8004b34 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b5c:	4b25      	ldr	r3, [pc, #148]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f003 0307 	and.w	r3, r3, #7
 8004b64:	683a      	ldr	r2, [r7, #0]
 8004b66:	429a      	cmp	r2, r3
 8004b68:	d20c      	bcs.n	8004b84 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b6a:	4b22      	ldr	r3, [pc, #136]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	b2d2      	uxtb	r2, r2
 8004b70:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b72:	4b20      	ldr	r3, [pc, #128]	@ (8004bf4 <HAL_RCC_ClockConfig+0x1b8>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0307 	and.w	r3, r3, #7
 8004b7a:	683a      	ldr	r2, [r7, #0]
 8004b7c:	429a      	cmp	r2, r3
 8004b7e:	d001      	beq.n	8004b84 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004b80:	2301      	movs	r3, #1
 8004b82:	e032      	b.n	8004bea <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f003 0304 	and.w	r3, r3, #4
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d008      	beq.n	8004ba2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b90:	4b19      	ldr	r3, [pc, #100]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	4916      	ldr	r1, [pc, #88]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0308 	and.w	r3, r3, #8
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d009      	beq.n	8004bc2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004bae:	4b12      	ldr	r3, [pc, #72]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	00db      	lsls	r3, r3, #3
 8004bbc:	490e      	ldr	r1, [pc, #56]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004bc2:	f000 f821 	bl	8004c08 <HAL_RCC_GetSysClockFreq>
 8004bc6:	4602      	mov	r2, r0
 8004bc8:	4b0b      	ldr	r3, [pc, #44]	@ (8004bf8 <HAL_RCC_ClockConfig+0x1bc>)
 8004bca:	689b      	ldr	r3, [r3, #8]
 8004bcc:	091b      	lsrs	r3, r3, #4
 8004bce:	f003 030f 	and.w	r3, r3, #15
 8004bd2:	490a      	ldr	r1, [pc, #40]	@ (8004bfc <HAL_RCC_ClockConfig+0x1c0>)
 8004bd4:	5ccb      	ldrb	r3, [r1, r3]
 8004bd6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bda:	4a09      	ldr	r2, [pc, #36]	@ (8004c00 <HAL_RCC_ClockConfig+0x1c4>)
 8004bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004bde:	4b09      	ldr	r3, [pc, #36]	@ (8004c04 <HAL_RCC_ClockConfig+0x1c8>)
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4618      	mov	r0, r3
 8004be4:	f7fd fdb2 	bl	800274c <HAL_InitTick>

  return HAL_OK;
 8004be8:	2300      	movs	r3, #0
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3710      	adds	r7, #16
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	40023c00 	.word	0x40023c00
 8004bf8:	40023800 	.word	0x40023800
 8004bfc:	080091ec 	.word	0x080091ec
 8004c00:	20000000 	.word	0x20000000
 8004c04:	20000004 	.word	0x20000004

08004c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004c08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c0c:	b090      	sub	sp, #64	@ 0x40
 8004c0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004c10:	2300      	movs	r3, #0
 8004c12:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8004c14:	2300      	movs	r3, #0
 8004c16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8004c18:	2300      	movs	r3, #0
 8004c1a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004c20:	4b59      	ldr	r3, [pc, #356]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 030c 	and.w	r3, r3, #12
 8004c28:	2b08      	cmp	r3, #8
 8004c2a:	d00d      	beq.n	8004c48 <HAL_RCC_GetSysClockFreq+0x40>
 8004c2c:	2b08      	cmp	r3, #8
 8004c2e:	f200 80a1 	bhi.w	8004d74 <HAL_RCC_GetSysClockFreq+0x16c>
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d002      	beq.n	8004c3c <HAL_RCC_GetSysClockFreq+0x34>
 8004c36:	2b04      	cmp	r3, #4
 8004c38:	d003      	beq.n	8004c42 <HAL_RCC_GetSysClockFreq+0x3a>
 8004c3a:	e09b      	b.n	8004d74 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004c3c:	4b53      	ldr	r3, [pc, #332]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x184>)
 8004c3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c40:	e09b      	b.n	8004d7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004c42:	4b53      	ldr	r3, [pc, #332]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c44:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004c46:	e098      	b.n	8004d7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004c48:	4b4f      	ldr	r3, [pc, #316]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c4a:	685b      	ldr	r3, [r3, #4]
 8004c4c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004c50:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004c52:	4b4d      	ldr	r3, [pc, #308]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d028      	beq.n	8004cb0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004c5e:	4b4a      	ldr	r3, [pc, #296]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	099b      	lsrs	r3, r3, #6
 8004c64:	2200      	movs	r2, #0
 8004c66:	623b      	str	r3, [r7, #32]
 8004c68:	627a      	str	r2, [r7, #36]	@ 0x24
 8004c6a:	6a3b      	ldr	r3, [r7, #32]
 8004c6c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004c70:	2100      	movs	r1, #0
 8004c72:	4b47      	ldr	r3, [pc, #284]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c74:	fb03 f201 	mul.w	r2, r3, r1
 8004c78:	2300      	movs	r3, #0
 8004c7a:	fb00 f303 	mul.w	r3, r0, r3
 8004c7e:	4413      	add	r3, r2
 8004c80:	4a43      	ldr	r2, [pc, #268]	@ (8004d90 <HAL_RCC_GetSysClockFreq+0x188>)
 8004c82:	fba0 1202 	umull	r1, r2, r0, r2
 8004c86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c88:	460a      	mov	r2, r1
 8004c8a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004c8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c8e:	4413      	add	r3, r2
 8004c90:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004c92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c94:	2200      	movs	r2, #0
 8004c96:	61bb      	str	r3, [r7, #24]
 8004c98:	61fa      	str	r2, [r7, #28]
 8004c9a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c9e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004ca2:	f7fc f821 	bl	8000ce8 <__aeabi_uldivmod>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	460b      	mov	r3, r1
 8004caa:	4613      	mov	r3, r2
 8004cac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004cae:	e053      	b.n	8004d58 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004cb0:	4b35      	ldr	r3, [pc, #212]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	099b      	lsrs	r3, r3, #6
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	617a      	str	r2, [r7, #20]
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004cc2:	f04f 0b00 	mov.w	fp, #0
 8004cc6:	4652      	mov	r2, sl
 8004cc8:	465b      	mov	r3, fp
 8004cca:	f04f 0000 	mov.w	r0, #0
 8004cce:	f04f 0100 	mov.w	r1, #0
 8004cd2:	0159      	lsls	r1, r3, #5
 8004cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004cd8:	0150      	lsls	r0, r2, #5
 8004cda:	4602      	mov	r2, r0
 8004cdc:	460b      	mov	r3, r1
 8004cde:	ebb2 080a 	subs.w	r8, r2, sl
 8004ce2:	eb63 090b 	sbc.w	r9, r3, fp
 8004ce6:	f04f 0200 	mov.w	r2, #0
 8004cea:	f04f 0300 	mov.w	r3, #0
 8004cee:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004cf2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004cf6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004cfa:	ebb2 0408 	subs.w	r4, r2, r8
 8004cfe:	eb63 0509 	sbc.w	r5, r3, r9
 8004d02:	f04f 0200 	mov.w	r2, #0
 8004d06:	f04f 0300 	mov.w	r3, #0
 8004d0a:	00eb      	lsls	r3, r5, #3
 8004d0c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004d10:	00e2      	lsls	r2, r4, #3
 8004d12:	4614      	mov	r4, r2
 8004d14:	461d      	mov	r5, r3
 8004d16:	eb14 030a 	adds.w	r3, r4, sl
 8004d1a:	603b      	str	r3, [r7, #0]
 8004d1c:	eb45 030b 	adc.w	r3, r5, fp
 8004d20:	607b      	str	r3, [r7, #4]
 8004d22:	f04f 0200 	mov.w	r2, #0
 8004d26:	f04f 0300 	mov.w	r3, #0
 8004d2a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004d2e:	4629      	mov	r1, r5
 8004d30:	028b      	lsls	r3, r1, #10
 8004d32:	4621      	mov	r1, r4
 8004d34:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004d38:	4621      	mov	r1, r4
 8004d3a:	028a      	lsls	r2, r1, #10
 8004d3c:	4610      	mov	r0, r2
 8004d3e:	4619      	mov	r1, r3
 8004d40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d42:	2200      	movs	r2, #0
 8004d44:	60bb      	str	r3, [r7, #8]
 8004d46:	60fa      	str	r2, [r7, #12]
 8004d48:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d4c:	f7fb ffcc 	bl	8000ce8 <__aeabi_uldivmod>
 8004d50:	4602      	mov	r2, r0
 8004d52:	460b      	mov	r3, r1
 8004d54:	4613      	mov	r3, r2
 8004d56:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8004d58:	4b0b      	ldr	r3, [pc, #44]	@ (8004d88 <HAL_RCC_GetSysClockFreq+0x180>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	0c1b      	lsrs	r3, r3, #16
 8004d5e:	f003 0303 	and.w	r3, r3, #3
 8004d62:	3301      	adds	r3, #1
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8004d68:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004d6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d70:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d72:	e002      	b.n	8004d7a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004d74:	4b05      	ldr	r3, [pc, #20]	@ (8004d8c <HAL_RCC_GetSysClockFreq+0x184>)
 8004d76:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004d78:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3740      	adds	r7, #64	@ 0x40
 8004d80:	46bd      	mov	sp, r7
 8004d82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d86:	bf00      	nop
 8004d88:	40023800 	.word	0x40023800
 8004d8c:	00f42400 	.word	0x00f42400
 8004d90:	017d7840 	.word	0x017d7840

08004d94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d94:	b480      	push	{r7}
 8004d96:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d98:	4b03      	ldr	r3, [pc, #12]	@ (8004da8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
 8004da6:	bf00      	nop
 8004da8:	20000000 	.word	0x20000000

08004dac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004db0:	f7ff fff0 	bl	8004d94 <HAL_RCC_GetHCLKFreq>
 8004db4:	4602      	mov	r2, r0
 8004db6:	4b05      	ldr	r3, [pc, #20]	@ (8004dcc <HAL_RCC_GetPCLK1Freq+0x20>)
 8004db8:	689b      	ldr	r3, [r3, #8]
 8004dba:	0a9b      	lsrs	r3, r3, #10
 8004dbc:	f003 0307 	and.w	r3, r3, #7
 8004dc0:	4903      	ldr	r1, [pc, #12]	@ (8004dd0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004dc2:	5ccb      	ldrb	r3, [r1, r3]
 8004dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004dc8:	4618      	mov	r0, r3
 8004dca:	bd80      	pop	{r7, pc}
 8004dcc:	40023800 	.word	0x40023800
 8004dd0:	080091fc 	.word	0x080091fc

08004dd4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004dd8:	f7ff ffdc 	bl	8004d94 <HAL_RCC_GetHCLKFreq>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	4b05      	ldr	r3, [pc, #20]	@ (8004df4 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	0b5b      	lsrs	r3, r3, #13
 8004de4:	f003 0307 	and.w	r3, r3, #7
 8004de8:	4903      	ldr	r1, [pc, #12]	@ (8004df8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dea:	5ccb      	ldrb	r3, [r1, r3]
 8004dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004df0:	4618      	mov	r0, r3
 8004df2:	bd80      	pop	{r7, pc}
 8004df4:	40023800 	.word	0x40023800
 8004df8:	080091fc 	.word	0x080091fc

08004dfc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d101      	bne.n	8004e0e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	e042      	b.n	8004e94 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d106      	bne.n	8004e28 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	2200      	movs	r2, #0
 8004e1e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f7fd fad6 	bl	80023d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2224      	movs	r2, #36	@ 0x24
 8004e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	68da      	ldr	r2, [r3, #12]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004e3e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f973 	bl	800512c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	691a      	ldr	r2, [r3, #16]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004e54:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695a      	ldr	r2, [r3, #20]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004e64:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	68da      	ldr	r2, [r3, #12]
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004e74:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	2220      	movs	r2, #32
 8004e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2220      	movs	r2, #32
 8004e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2200      	movs	r2, #0
 8004e90:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004e92:	2300      	movs	r3, #0
}
 8004e94:	4618      	mov	r0, r3
 8004e96:	3708      	adds	r7, #8
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	bd80      	pop	{r7, pc}

08004e9c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b08a      	sub	sp, #40	@ 0x28
 8004ea0:	af02      	add	r7, sp, #8
 8004ea2:	60f8      	str	r0, [r7, #12]
 8004ea4:	60b9      	str	r1, [r7, #8]
 8004ea6:	603b      	str	r3, [r7, #0]
 8004ea8:	4613      	mov	r3, r2
 8004eaa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004eac:	2300      	movs	r3, #0
 8004eae:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004eb6:	b2db      	uxtb	r3, r3
 8004eb8:	2b20      	cmp	r3, #32
 8004eba:	d175      	bne.n	8004fa8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <HAL_UART_Transmit+0x2c>
 8004ec2:	88fb      	ldrh	r3, [r7, #6]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d101      	bne.n	8004ecc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	e06e      	b.n	8004faa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2200      	movs	r2, #0
 8004ed0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	2221      	movs	r2, #33	@ 0x21
 8004ed6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004eda:	f7fd fc7b 	bl	80027d4 <HAL_GetTick>
 8004ede:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	88fa      	ldrh	r2, [r7, #6]
 8004ee4:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	88fa      	ldrh	r2, [r7, #6]
 8004eea:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ef4:	d108      	bne.n	8004f08 <HAL_UART_Transmit+0x6c>
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d104      	bne.n	8004f08 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004efe:	2300      	movs	r3, #0
 8004f00:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	61bb      	str	r3, [r7, #24]
 8004f06:	e003      	b.n	8004f10 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004f10:	e02e      	b.n	8004f70 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004f12:	683b      	ldr	r3, [r7, #0]
 8004f14:	9300      	str	r3, [sp, #0]
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	2180      	movs	r1, #128	@ 0x80
 8004f1c:	68f8      	ldr	r0, [r7, #12]
 8004f1e:	f000 f848 	bl	8004fb2 <UART_WaitOnFlagUntilTimeout>
 8004f22:	4603      	mov	r3, r0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d005      	beq.n	8004f34 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2220      	movs	r2, #32
 8004f2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e03a      	b.n	8004faa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004f34:	69fb      	ldr	r3, [r7, #28]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10b      	bne.n	8004f52 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004f3a:	69bb      	ldr	r3, [r7, #24]
 8004f3c:	881b      	ldrh	r3, [r3, #0]
 8004f3e:	461a      	mov	r2, r3
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f48:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	3302      	adds	r3, #2
 8004f4e:	61bb      	str	r3, [r7, #24]
 8004f50:	e007      	b.n	8004f62 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004f52:	69fb      	ldr	r3, [r7, #28]
 8004f54:	781a      	ldrb	r2, [r3, #0]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004f5c:	69fb      	ldr	r3, [r7, #28]
 8004f5e:	3301      	adds	r3, #1
 8004f60:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f66:	b29b      	uxth	r3, r3
 8004f68:	3b01      	subs	r3, #1
 8004f6a:	b29a      	uxth	r2, r3
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1cb      	bne.n	8004f12 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	9300      	str	r3, [sp, #0]
 8004f7e:	697b      	ldr	r3, [r7, #20]
 8004f80:	2200      	movs	r2, #0
 8004f82:	2140      	movs	r1, #64	@ 0x40
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 f814 	bl	8004fb2 <UART_WaitOnFlagUntilTimeout>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d005      	beq.n	8004f9c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004f98:	2303      	movs	r3, #3
 8004f9a:	e006      	b.n	8004faa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2220      	movs	r2, #32
 8004fa0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	e000      	b.n	8004faa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004fa8:	2302      	movs	r3, #2
  }
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	3720      	adds	r7, #32
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}

08004fb2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fb2:	b580      	push	{r7, lr}
 8004fb4:	b086      	sub	sp, #24
 8004fb6:	af00      	add	r7, sp, #0
 8004fb8:	60f8      	str	r0, [r7, #12]
 8004fba:	60b9      	str	r1, [r7, #8]
 8004fbc:	603b      	str	r3, [r7, #0]
 8004fbe:	4613      	mov	r3, r2
 8004fc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fc2:	e03b      	b.n	800503c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fc4:	6a3b      	ldr	r3, [r7, #32]
 8004fc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fca:	d037      	beq.n	800503c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fcc:	f7fd fc02 	bl	80027d4 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	6a3a      	ldr	r2, [r7, #32]
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d302      	bcc.n	8004fe2 <UART_WaitOnFlagUntilTimeout+0x30>
 8004fdc:	6a3b      	ldr	r3, [r7, #32]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004fe2:	2303      	movs	r3, #3
 8004fe4:	e03a      	b.n	800505c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fe6:	68fb      	ldr	r3, [r7, #12]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	f003 0304 	and.w	r3, r3, #4
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d023      	beq.n	800503c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	2b80      	cmp	r3, #128	@ 0x80
 8004ff8:	d020      	beq.n	800503c <UART_WaitOnFlagUntilTimeout+0x8a>
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	2b40      	cmp	r3, #64	@ 0x40
 8004ffe:	d01d      	beq.n	800503c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b08      	cmp	r3, #8
 800500c:	d116      	bne.n	800503c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800500e:	2300      	movs	r3, #0
 8005010:	617b      	str	r3, [r7, #20]
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	617b      	str	r3, [r7, #20]
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	617b      	str	r3, [r7, #20]
 8005022:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005024:	68f8      	ldr	r0, [r7, #12]
 8005026:	f000 f81d 	bl	8005064 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2208      	movs	r2, #8
 800502e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	2200      	movs	r2, #0
 8005034:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005038:	2301      	movs	r3, #1
 800503a:	e00f      	b.n	800505c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	4013      	ands	r3, r2
 8005046:	68ba      	ldr	r2, [r7, #8]
 8005048:	429a      	cmp	r2, r3
 800504a:	bf0c      	ite	eq
 800504c:	2301      	moveq	r3, #1
 800504e:	2300      	movne	r3, #0
 8005050:	b2db      	uxtb	r3, r3
 8005052:	461a      	mov	r2, r3
 8005054:	79fb      	ldrb	r3, [r7, #7]
 8005056:	429a      	cmp	r2, r3
 8005058:	d0b4      	beq.n	8004fc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800505a:	2300      	movs	r3, #0
}
 800505c:	4618      	mov	r0, r3
 800505e:	3718      	adds	r7, #24
 8005060:	46bd      	mov	sp, r7
 8005062:	bd80      	pop	{r7, pc}

08005064 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005064:	b480      	push	{r7}
 8005066:	b095      	sub	sp, #84	@ 0x54
 8005068:	af00      	add	r7, sp, #0
 800506a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	330c      	adds	r3, #12
 8005072:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005074:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005076:	e853 3f00 	ldrex	r3, [r3]
 800507a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800507c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005082:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	330c      	adds	r3, #12
 800508a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800508c:	643a      	str	r2, [r7, #64]	@ 0x40
 800508e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005090:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005092:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005094:	e841 2300 	strex	r3, r2, [r1]
 8005098:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800509a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800509c:	2b00      	cmp	r3, #0
 800509e:	d1e5      	bne.n	800506c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	3314      	adds	r3, #20
 80050a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050a8:	6a3b      	ldr	r3, [r7, #32]
 80050aa:	e853 3f00 	ldrex	r3, [r3]
 80050ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	f023 0301 	bic.w	r3, r3, #1
 80050b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3314      	adds	r3, #20
 80050be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050c0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050c4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050c8:	e841 2300 	strex	r3, r2, [r1]
 80050cc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1e5      	bne.n	80050a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d8:	2b01      	cmp	r3, #1
 80050da:	d119      	bne.n	8005110 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	330c      	adds	r3, #12
 80050e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	e853 3f00 	ldrex	r3, [r3]
 80050ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f023 0310 	bic.w	r3, r3, #16
 80050f2:	647b      	str	r3, [r7, #68]	@ 0x44
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	330c      	adds	r3, #12
 80050fa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050fc:	61ba      	str	r2, [r7, #24]
 80050fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	6979      	ldr	r1, [r7, #20]
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	e841 2300 	strex	r3, r2, [r1]
 8005108:	613b      	str	r3, [r7, #16]
   return(result);
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e5      	bne.n	80050dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2220      	movs	r2, #32
 8005114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800511e:	bf00      	nop
 8005120:	3754      	adds	r7, #84	@ 0x54
 8005122:	46bd      	mov	sp, r7
 8005124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005128:	4770      	bx	lr
	...

0800512c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800512c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005130:	b0c0      	sub	sp, #256	@ 0x100
 8005132:	af00      	add	r7, sp, #0
 8005134:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	691b      	ldr	r3, [r3, #16]
 8005140:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005148:	68d9      	ldr	r1, [r3, #12]
 800514a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	ea40 0301 	orr.w	r3, r0, r1
 8005154:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800515a:	689a      	ldr	r2, [r3, #8]
 800515c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	431a      	orrs	r2, r3
 8005164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005168:	695b      	ldr	r3, [r3, #20]
 800516a:	431a      	orrs	r2, r3
 800516c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005170:	69db      	ldr	r3, [r3, #28]
 8005172:	4313      	orrs	r3, r2
 8005174:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005184:	f021 010c 	bic.w	r1, r1, #12
 8005188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005192:	430b      	orrs	r3, r1
 8005194:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80051a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a6:	6999      	ldr	r1, [r3, #24]
 80051a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	ea40 0301 	orr.w	r3, r0, r1
 80051b2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b8:	681a      	ldr	r2, [r3, #0]
 80051ba:	4b8f      	ldr	r3, [pc, #572]	@ (80053f8 <UART_SetConfig+0x2cc>)
 80051bc:	429a      	cmp	r2, r3
 80051be:	d005      	beq.n	80051cc <UART_SetConfig+0xa0>
 80051c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c4:	681a      	ldr	r2, [r3, #0]
 80051c6:	4b8d      	ldr	r3, [pc, #564]	@ (80053fc <UART_SetConfig+0x2d0>)
 80051c8:	429a      	cmp	r2, r3
 80051ca:	d104      	bne.n	80051d6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80051cc:	f7ff fe02 	bl	8004dd4 <HAL_RCC_GetPCLK2Freq>
 80051d0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80051d4:	e003      	b.n	80051de <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80051d6:	f7ff fde9 	bl	8004dac <HAL_RCC_GetPCLK1Freq>
 80051da:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80051de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e2:	69db      	ldr	r3, [r3, #28]
 80051e4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80051e8:	f040 810c 	bne.w	8005404 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80051ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051f0:	2200      	movs	r2, #0
 80051f2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80051f6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80051fa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80051fe:	4622      	mov	r2, r4
 8005200:	462b      	mov	r3, r5
 8005202:	1891      	adds	r1, r2, r2
 8005204:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005206:	415b      	adcs	r3, r3
 8005208:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800520a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800520e:	4621      	mov	r1, r4
 8005210:	eb12 0801 	adds.w	r8, r2, r1
 8005214:	4629      	mov	r1, r5
 8005216:	eb43 0901 	adc.w	r9, r3, r1
 800521a:	f04f 0200 	mov.w	r2, #0
 800521e:	f04f 0300 	mov.w	r3, #0
 8005222:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005226:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800522a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800522e:	4690      	mov	r8, r2
 8005230:	4699      	mov	r9, r3
 8005232:	4623      	mov	r3, r4
 8005234:	eb18 0303 	adds.w	r3, r8, r3
 8005238:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800523c:	462b      	mov	r3, r5
 800523e:	eb49 0303 	adc.w	r3, r9, r3
 8005242:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800524a:	685b      	ldr	r3, [r3, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005252:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005256:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800525a:	460b      	mov	r3, r1
 800525c:	18db      	adds	r3, r3, r3
 800525e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005260:	4613      	mov	r3, r2
 8005262:	eb42 0303 	adc.w	r3, r2, r3
 8005266:	657b      	str	r3, [r7, #84]	@ 0x54
 8005268:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800526c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005270:	f7fb fd3a 	bl	8000ce8 <__aeabi_uldivmod>
 8005274:	4602      	mov	r2, r0
 8005276:	460b      	mov	r3, r1
 8005278:	4b61      	ldr	r3, [pc, #388]	@ (8005400 <UART_SetConfig+0x2d4>)
 800527a:	fba3 2302 	umull	r2, r3, r3, r2
 800527e:	095b      	lsrs	r3, r3, #5
 8005280:	011c      	lsls	r4, r3, #4
 8005282:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005286:	2200      	movs	r2, #0
 8005288:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800528c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005290:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005294:	4642      	mov	r2, r8
 8005296:	464b      	mov	r3, r9
 8005298:	1891      	adds	r1, r2, r2
 800529a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800529c:	415b      	adcs	r3, r3
 800529e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052a0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80052a4:	4641      	mov	r1, r8
 80052a6:	eb12 0a01 	adds.w	sl, r2, r1
 80052aa:	4649      	mov	r1, r9
 80052ac:	eb43 0b01 	adc.w	fp, r3, r1
 80052b0:	f04f 0200 	mov.w	r2, #0
 80052b4:	f04f 0300 	mov.w	r3, #0
 80052b8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052bc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052c0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80052c4:	4692      	mov	sl, r2
 80052c6:	469b      	mov	fp, r3
 80052c8:	4643      	mov	r3, r8
 80052ca:	eb1a 0303 	adds.w	r3, sl, r3
 80052ce:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80052d2:	464b      	mov	r3, r9
 80052d4:	eb4b 0303 	adc.w	r3, fp, r3
 80052d8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80052dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	2200      	movs	r2, #0
 80052e4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80052e8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80052ec:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80052f0:	460b      	mov	r3, r1
 80052f2:	18db      	adds	r3, r3, r3
 80052f4:	643b      	str	r3, [r7, #64]	@ 0x40
 80052f6:	4613      	mov	r3, r2
 80052f8:	eb42 0303 	adc.w	r3, r2, r3
 80052fc:	647b      	str	r3, [r7, #68]	@ 0x44
 80052fe:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005302:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005306:	f7fb fcef 	bl	8000ce8 <__aeabi_uldivmod>
 800530a:	4602      	mov	r2, r0
 800530c:	460b      	mov	r3, r1
 800530e:	4611      	mov	r1, r2
 8005310:	4b3b      	ldr	r3, [pc, #236]	@ (8005400 <UART_SetConfig+0x2d4>)
 8005312:	fba3 2301 	umull	r2, r3, r3, r1
 8005316:	095b      	lsrs	r3, r3, #5
 8005318:	2264      	movs	r2, #100	@ 0x64
 800531a:	fb02 f303 	mul.w	r3, r2, r3
 800531e:	1acb      	subs	r3, r1, r3
 8005320:	00db      	lsls	r3, r3, #3
 8005322:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005326:	4b36      	ldr	r3, [pc, #216]	@ (8005400 <UART_SetConfig+0x2d4>)
 8005328:	fba3 2302 	umull	r2, r3, r3, r2
 800532c:	095b      	lsrs	r3, r3, #5
 800532e:	005b      	lsls	r3, r3, #1
 8005330:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005334:	441c      	add	r4, r3
 8005336:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800533a:	2200      	movs	r2, #0
 800533c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005340:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005344:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005348:	4642      	mov	r2, r8
 800534a:	464b      	mov	r3, r9
 800534c:	1891      	adds	r1, r2, r2
 800534e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005350:	415b      	adcs	r3, r3
 8005352:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005354:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005358:	4641      	mov	r1, r8
 800535a:	1851      	adds	r1, r2, r1
 800535c:	6339      	str	r1, [r7, #48]	@ 0x30
 800535e:	4649      	mov	r1, r9
 8005360:	414b      	adcs	r3, r1
 8005362:	637b      	str	r3, [r7, #52]	@ 0x34
 8005364:	f04f 0200 	mov.w	r2, #0
 8005368:	f04f 0300 	mov.w	r3, #0
 800536c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005370:	4659      	mov	r1, fp
 8005372:	00cb      	lsls	r3, r1, #3
 8005374:	4651      	mov	r1, sl
 8005376:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800537a:	4651      	mov	r1, sl
 800537c:	00ca      	lsls	r2, r1, #3
 800537e:	4610      	mov	r0, r2
 8005380:	4619      	mov	r1, r3
 8005382:	4603      	mov	r3, r0
 8005384:	4642      	mov	r2, r8
 8005386:	189b      	adds	r3, r3, r2
 8005388:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800538c:	464b      	mov	r3, r9
 800538e:	460a      	mov	r2, r1
 8005390:	eb42 0303 	adc.w	r3, r2, r3
 8005394:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800539c:	685b      	ldr	r3, [r3, #4]
 800539e:	2200      	movs	r2, #0
 80053a0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80053a4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80053a8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80053ac:	460b      	mov	r3, r1
 80053ae:	18db      	adds	r3, r3, r3
 80053b0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80053b2:	4613      	mov	r3, r2
 80053b4:	eb42 0303 	adc.w	r3, r2, r3
 80053b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80053ba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80053be:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80053c2:	f7fb fc91 	bl	8000ce8 <__aeabi_uldivmod>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	4b0d      	ldr	r3, [pc, #52]	@ (8005400 <UART_SetConfig+0x2d4>)
 80053cc:	fba3 1302 	umull	r1, r3, r3, r2
 80053d0:	095b      	lsrs	r3, r3, #5
 80053d2:	2164      	movs	r1, #100	@ 0x64
 80053d4:	fb01 f303 	mul.w	r3, r1, r3
 80053d8:	1ad3      	subs	r3, r2, r3
 80053da:	00db      	lsls	r3, r3, #3
 80053dc:	3332      	adds	r3, #50	@ 0x32
 80053de:	4a08      	ldr	r2, [pc, #32]	@ (8005400 <UART_SetConfig+0x2d4>)
 80053e0:	fba2 2303 	umull	r2, r3, r2, r3
 80053e4:	095b      	lsrs	r3, r3, #5
 80053e6:	f003 0207 	and.w	r2, r3, #7
 80053ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4422      	add	r2, r4
 80053f2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80053f4:	e106      	b.n	8005604 <UART_SetConfig+0x4d8>
 80053f6:	bf00      	nop
 80053f8:	40011000 	.word	0x40011000
 80053fc:	40011400 	.word	0x40011400
 8005400:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005404:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005408:	2200      	movs	r2, #0
 800540a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800540e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005412:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005416:	4642      	mov	r2, r8
 8005418:	464b      	mov	r3, r9
 800541a:	1891      	adds	r1, r2, r2
 800541c:	6239      	str	r1, [r7, #32]
 800541e:	415b      	adcs	r3, r3
 8005420:	627b      	str	r3, [r7, #36]	@ 0x24
 8005422:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005426:	4641      	mov	r1, r8
 8005428:	1854      	adds	r4, r2, r1
 800542a:	4649      	mov	r1, r9
 800542c:	eb43 0501 	adc.w	r5, r3, r1
 8005430:	f04f 0200 	mov.w	r2, #0
 8005434:	f04f 0300 	mov.w	r3, #0
 8005438:	00eb      	lsls	r3, r5, #3
 800543a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800543e:	00e2      	lsls	r2, r4, #3
 8005440:	4614      	mov	r4, r2
 8005442:	461d      	mov	r5, r3
 8005444:	4643      	mov	r3, r8
 8005446:	18e3      	adds	r3, r4, r3
 8005448:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800544c:	464b      	mov	r3, r9
 800544e:	eb45 0303 	adc.w	r3, r5, r3
 8005452:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005456:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800545a:	685b      	ldr	r3, [r3, #4]
 800545c:	2200      	movs	r2, #0
 800545e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005462:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	f04f 0300 	mov.w	r3, #0
 800546e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005472:	4629      	mov	r1, r5
 8005474:	008b      	lsls	r3, r1, #2
 8005476:	4621      	mov	r1, r4
 8005478:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800547c:	4621      	mov	r1, r4
 800547e:	008a      	lsls	r2, r1, #2
 8005480:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005484:	f7fb fc30 	bl	8000ce8 <__aeabi_uldivmod>
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4b60      	ldr	r3, [pc, #384]	@ (8005610 <UART_SetConfig+0x4e4>)
 800548e:	fba3 2302 	umull	r2, r3, r3, r2
 8005492:	095b      	lsrs	r3, r3, #5
 8005494:	011c      	lsls	r4, r3, #4
 8005496:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800549a:	2200      	movs	r2, #0
 800549c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80054a0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80054a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80054a8:	4642      	mov	r2, r8
 80054aa:	464b      	mov	r3, r9
 80054ac:	1891      	adds	r1, r2, r2
 80054ae:	61b9      	str	r1, [r7, #24]
 80054b0:	415b      	adcs	r3, r3
 80054b2:	61fb      	str	r3, [r7, #28]
 80054b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054b8:	4641      	mov	r1, r8
 80054ba:	1851      	adds	r1, r2, r1
 80054bc:	6139      	str	r1, [r7, #16]
 80054be:	4649      	mov	r1, r9
 80054c0:	414b      	adcs	r3, r1
 80054c2:	617b      	str	r3, [r7, #20]
 80054c4:	f04f 0200 	mov.w	r2, #0
 80054c8:	f04f 0300 	mov.w	r3, #0
 80054cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80054d0:	4659      	mov	r1, fp
 80054d2:	00cb      	lsls	r3, r1, #3
 80054d4:	4651      	mov	r1, sl
 80054d6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054da:	4651      	mov	r1, sl
 80054dc:	00ca      	lsls	r2, r1, #3
 80054de:	4610      	mov	r0, r2
 80054e0:	4619      	mov	r1, r3
 80054e2:	4603      	mov	r3, r0
 80054e4:	4642      	mov	r2, r8
 80054e6:	189b      	adds	r3, r3, r2
 80054e8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80054ec:	464b      	mov	r3, r9
 80054ee:	460a      	mov	r2, r1
 80054f0:	eb42 0303 	adc.w	r3, r2, r3
 80054f4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80054f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005502:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005504:	f04f 0200 	mov.w	r2, #0
 8005508:	f04f 0300 	mov.w	r3, #0
 800550c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005510:	4649      	mov	r1, r9
 8005512:	008b      	lsls	r3, r1, #2
 8005514:	4641      	mov	r1, r8
 8005516:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800551a:	4641      	mov	r1, r8
 800551c:	008a      	lsls	r2, r1, #2
 800551e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005522:	f7fb fbe1 	bl	8000ce8 <__aeabi_uldivmod>
 8005526:	4602      	mov	r2, r0
 8005528:	460b      	mov	r3, r1
 800552a:	4611      	mov	r1, r2
 800552c:	4b38      	ldr	r3, [pc, #224]	@ (8005610 <UART_SetConfig+0x4e4>)
 800552e:	fba3 2301 	umull	r2, r3, r3, r1
 8005532:	095b      	lsrs	r3, r3, #5
 8005534:	2264      	movs	r2, #100	@ 0x64
 8005536:	fb02 f303 	mul.w	r3, r2, r3
 800553a:	1acb      	subs	r3, r1, r3
 800553c:	011b      	lsls	r3, r3, #4
 800553e:	3332      	adds	r3, #50	@ 0x32
 8005540:	4a33      	ldr	r2, [pc, #204]	@ (8005610 <UART_SetConfig+0x4e4>)
 8005542:	fba2 2303 	umull	r2, r3, r2, r3
 8005546:	095b      	lsrs	r3, r3, #5
 8005548:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800554c:	441c      	add	r4, r3
 800554e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005552:	2200      	movs	r2, #0
 8005554:	673b      	str	r3, [r7, #112]	@ 0x70
 8005556:	677a      	str	r2, [r7, #116]	@ 0x74
 8005558:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800555c:	4642      	mov	r2, r8
 800555e:	464b      	mov	r3, r9
 8005560:	1891      	adds	r1, r2, r2
 8005562:	60b9      	str	r1, [r7, #8]
 8005564:	415b      	adcs	r3, r3
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800556c:	4641      	mov	r1, r8
 800556e:	1851      	adds	r1, r2, r1
 8005570:	6039      	str	r1, [r7, #0]
 8005572:	4649      	mov	r1, r9
 8005574:	414b      	adcs	r3, r1
 8005576:	607b      	str	r3, [r7, #4]
 8005578:	f04f 0200 	mov.w	r2, #0
 800557c:	f04f 0300 	mov.w	r3, #0
 8005580:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005584:	4659      	mov	r1, fp
 8005586:	00cb      	lsls	r3, r1, #3
 8005588:	4651      	mov	r1, sl
 800558a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800558e:	4651      	mov	r1, sl
 8005590:	00ca      	lsls	r2, r1, #3
 8005592:	4610      	mov	r0, r2
 8005594:	4619      	mov	r1, r3
 8005596:	4603      	mov	r3, r0
 8005598:	4642      	mov	r2, r8
 800559a:	189b      	adds	r3, r3, r2
 800559c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800559e:	464b      	mov	r3, r9
 80055a0:	460a      	mov	r2, r1
 80055a2:	eb42 0303 	adc.w	r3, r2, r3
 80055a6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80055a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055ac:	685b      	ldr	r3, [r3, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	663b      	str	r3, [r7, #96]	@ 0x60
 80055b2:	667a      	str	r2, [r7, #100]	@ 0x64
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80055c0:	4649      	mov	r1, r9
 80055c2:	008b      	lsls	r3, r1, #2
 80055c4:	4641      	mov	r1, r8
 80055c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055ca:	4641      	mov	r1, r8
 80055cc:	008a      	lsls	r2, r1, #2
 80055ce:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80055d2:	f7fb fb89 	bl	8000ce8 <__aeabi_uldivmod>
 80055d6:	4602      	mov	r2, r0
 80055d8:	460b      	mov	r3, r1
 80055da:	4b0d      	ldr	r3, [pc, #52]	@ (8005610 <UART_SetConfig+0x4e4>)
 80055dc:	fba3 1302 	umull	r1, r3, r3, r2
 80055e0:	095b      	lsrs	r3, r3, #5
 80055e2:	2164      	movs	r1, #100	@ 0x64
 80055e4:	fb01 f303 	mul.w	r3, r1, r3
 80055e8:	1ad3      	subs	r3, r2, r3
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	3332      	adds	r3, #50	@ 0x32
 80055ee:	4a08      	ldr	r2, [pc, #32]	@ (8005610 <UART_SetConfig+0x4e4>)
 80055f0:	fba2 2303 	umull	r2, r3, r2, r3
 80055f4:	095b      	lsrs	r3, r3, #5
 80055f6:	f003 020f 	and.w	r2, r3, #15
 80055fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	4422      	add	r2, r4
 8005602:	609a      	str	r2, [r3, #8]
}
 8005604:	bf00      	nop
 8005606:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800560a:	46bd      	mov	sp, r7
 800560c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005610:	51eb851f 	.word	0x51eb851f

08005614 <__cvt>:
 8005614:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005618:	ec57 6b10 	vmov	r6, r7, d0
 800561c:	2f00      	cmp	r7, #0
 800561e:	460c      	mov	r4, r1
 8005620:	4619      	mov	r1, r3
 8005622:	463b      	mov	r3, r7
 8005624:	bfbb      	ittet	lt
 8005626:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800562a:	461f      	movlt	r7, r3
 800562c:	2300      	movge	r3, #0
 800562e:	232d      	movlt	r3, #45	@ 0x2d
 8005630:	700b      	strb	r3, [r1, #0]
 8005632:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005634:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005638:	4691      	mov	r9, r2
 800563a:	f023 0820 	bic.w	r8, r3, #32
 800563e:	bfbc      	itt	lt
 8005640:	4632      	movlt	r2, r6
 8005642:	4616      	movlt	r6, r2
 8005644:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005648:	d005      	beq.n	8005656 <__cvt+0x42>
 800564a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800564e:	d100      	bne.n	8005652 <__cvt+0x3e>
 8005650:	3401      	adds	r4, #1
 8005652:	2102      	movs	r1, #2
 8005654:	e000      	b.n	8005658 <__cvt+0x44>
 8005656:	2103      	movs	r1, #3
 8005658:	ab03      	add	r3, sp, #12
 800565a:	9301      	str	r3, [sp, #4]
 800565c:	ab02      	add	r3, sp, #8
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	ec47 6b10 	vmov	d0, r6, r7
 8005664:	4653      	mov	r3, sl
 8005666:	4622      	mov	r2, r4
 8005668:	f000 fe5a 	bl	8006320 <_dtoa_r>
 800566c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005670:	4605      	mov	r5, r0
 8005672:	d119      	bne.n	80056a8 <__cvt+0x94>
 8005674:	f019 0f01 	tst.w	r9, #1
 8005678:	d00e      	beq.n	8005698 <__cvt+0x84>
 800567a:	eb00 0904 	add.w	r9, r0, r4
 800567e:	2200      	movs	r2, #0
 8005680:	2300      	movs	r3, #0
 8005682:	4630      	mov	r0, r6
 8005684:	4639      	mov	r1, r7
 8005686:	f7fb fa1f 	bl	8000ac8 <__aeabi_dcmpeq>
 800568a:	b108      	cbz	r0, 8005690 <__cvt+0x7c>
 800568c:	f8cd 900c 	str.w	r9, [sp, #12]
 8005690:	2230      	movs	r2, #48	@ 0x30
 8005692:	9b03      	ldr	r3, [sp, #12]
 8005694:	454b      	cmp	r3, r9
 8005696:	d31e      	bcc.n	80056d6 <__cvt+0xc2>
 8005698:	9b03      	ldr	r3, [sp, #12]
 800569a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800569c:	1b5b      	subs	r3, r3, r5
 800569e:	4628      	mov	r0, r5
 80056a0:	6013      	str	r3, [r2, #0]
 80056a2:	b004      	add	sp, #16
 80056a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80056a8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80056ac:	eb00 0904 	add.w	r9, r0, r4
 80056b0:	d1e5      	bne.n	800567e <__cvt+0x6a>
 80056b2:	7803      	ldrb	r3, [r0, #0]
 80056b4:	2b30      	cmp	r3, #48	@ 0x30
 80056b6:	d10a      	bne.n	80056ce <__cvt+0xba>
 80056b8:	2200      	movs	r2, #0
 80056ba:	2300      	movs	r3, #0
 80056bc:	4630      	mov	r0, r6
 80056be:	4639      	mov	r1, r7
 80056c0:	f7fb fa02 	bl	8000ac8 <__aeabi_dcmpeq>
 80056c4:	b918      	cbnz	r0, 80056ce <__cvt+0xba>
 80056c6:	f1c4 0401 	rsb	r4, r4, #1
 80056ca:	f8ca 4000 	str.w	r4, [sl]
 80056ce:	f8da 3000 	ldr.w	r3, [sl]
 80056d2:	4499      	add	r9, r3
 80056d4:	e7d3      	b.n	800567e <__cvt+0x6a>
 80056d6:	1c59      	adds	r1, r3, #1
 80056d8:	9103      	str	r1, [sp, #12]
 80056da:	701a      	strb	r2, [r3, #0]
 80056dc:	e7d9      	b.n	8005692 <__cvt+0x7e>

080056de <__exponent>:
 80056de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80056e0:	2900      	cmp	r1, #0
 80056e2:	bfba      	itte	lt
 80056e4:	4249      	neglt	r1, r1
 80056e6:	232d      	movlt	r3, #45	@ 0x2d
 80056e8:	232b      	movge	r3, #43	@ 0x2b
 80056ea:	2909      	cmp	r1, #9
 80056ec:	7002      	strb	r2, [r0, #0]
 80056ee:	7043      	strb	r3, [r0, #1]
 80056f0:	dd29      	ble.n	8005746 <__exponent+0x68>
 80056f2:	f10d 0307 	add.w	r3, sp, #7
 80056f6:	461d      	mov	r5, r3
 80056f8:	270a      	movs	r7, #10
 80056fa:	461a      	mov	r2, r3
 80056fc:	fbb1 f6f7 	udiv	r6, r1, r7
 8005700:	fb07 1416 	mls	r4, r7, r6, r1
 8005704:	3430      	adds	r4, #48	@ 0x30
 8005706:	f802 4c01 	strb.w	r4, [r2, #-1]
 800570a:	460c      	mov	r4, r1
 800570c:	2c63      	cmp	r4, #99	@ 0x63
 800570e:	f103 33ff 	add.w	r3, r3, #4294967295
 8005712:	4631      	mov	r1, r6
 8005714:	dcf1      	bgt.n	80056fa <__exponent+0x1c>
 8005716:	3130      	adds	r1, #48	@ 0x30
 8005718:	1e94      	subs	r4, r2, #2
 800571a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800571e:	1c41      	adds	r1, r0, #1
 8005720:	4623      	mov	r3, r4
 8005722:	42ab      	cmp	r3, r5
 8005724:	d30a      	bcc.n	800573c <__exponent+0x5e>
 8005726:	f10d 0309 	add.w	r3, sp, #9
 800572a:	1a9b      	subs	r3, r3, r2
 800572c:	42ac      	cmp	r4, r5
 800572e:	bf88      	it	hi
 8005730:	2300      	movhi	r3, #0
 8005732:	3302      	adds	r3, #2
 8005734:	4403      	add	r3, r0
 8005736:	1a18      	subs	r0, r3, r0
 8005738:	b003      	add	sp, #12
 800573a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800573c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005740:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005744:	e7ed      	b.n	8005722 <__exponent+0x44>
 8005746:	2330      	movs	r3, #48	@ 0x30
 8005748:	3130      	adds	r1, #48	@ 0x30
 800574a:	7083      	strb	r3, [r0, #2]
 800574c:	70c1      	strb	r1, [r0, #3]
 800574e:	1d03      	adds	r3, r0, #4
 8005750:	e7f1      	b.n	8005736 <__exponent+0x58>
	...

08005754 <_printf_float>:
 8005754:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005758:	b08d      	sub	sp, #52	@ 0x34
 800575a:	460c      	mov	r4, r1
 800575c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005760:	4616      	mov	r6, r2
 8005762:	461f      	mov	r7, r3
 8005764:	4605      	mov	r5, r0
 8005766:	f000 fcdb 	bl	8006120 <_localeconv_r>
 800576a:	6803      	ldr	r3, [r0, #0]
 800576c:	9304      	str	r3, [sp, #16]
 800576e:	4618      	mov	r0, r3
 8005770:	f7fa fd7e 	bl	8000270 <strlen>
 8005774:	2300      	movs	r3, #0
 8005776:	930a      	str	r3, [sp, #40]	@ 0x28
 8005778:	f8d8 3000 	ldr.w	r3, [r8]
 800577c:	9005      	str	r0, [sp, #20]
 800577e:	3307      	adds	r3, #7
 8005780:	f023 0307 	bic.w	r3, r3, #7
 8005784:	f103 0208 	add.w	r2, r3, #8
 8005788:	f894 a018 	ldrb.w	sl, [r4, #24]
 800578c:	f8d4 b000 	ldr.w	fp, [r4]
 8005790:	f8c8 2000 	str.w	r2, [r8]
 8005794:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005798:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800579c:	9307      	str	r3, [sp, #28]
 800579e:	f8cd 8018 	str.w	r8, [sp, #24]
 80057a2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80057a6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057aa:	4b9c      	ldr	r3, [pc, #624]	@ (8005a1c <_printf_float+0x2c8>)
 80057ac:	f04f 32ff 	mov.w	r2, #4294967295
 80057b0:	f7fb f9bc 	bl	8000b2c <__aeabi_dcmpun>
 80057b4:	bb70      	cbnz	r0, 8005814 <_printf_float+0xc0>
 80057b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057ba:	4b98      	ldr	r3, [pc, #608]	@ (8005a1c <_printf_float+0x2c8>)
 80057bc:	f04f 32ff 	mov.w	r2, #4294967295
 80057c0:	f7fb f996 	bl	8000af0 <__aeabi_dcmple>
 80057c4:	bb30      	cbnz	r0, 8005814 <_printf_float+0xc0>
 80057c6:	2200      	movs	r2, #0
 80057c8:	2300      	movs	r3, #0
 80057ca:	4640      	mov	r0, r8
 80057cc:	4649      	mov	r1, r9
 80057ce:	f7fb f985 	bl	8000adc <__aeabi_dcmplt>
 80057d2:	b110      	cbz	r0, 80057da <_printf_float+0x86>
 80057d4:	232d      	movs	r3, #45	@ 0x2d
 80057d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80057da:	4a91      	ldr	r2, [pc, #580]	@ (8005a20 <_printf_float+0x2cc>)
 80057dc:	4b91      	ldr	r3, [pc, #580]	@ (8005a24 <_printf_float+0x2d0>)
 80057de:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80057e2:	bf94      	ite	ls
 80057e4:	4690      	movls	r8, r2
 80057e6:	4698      	movhi	r8, r3
 80057e8:	2303      	movs	r3, #3
 80057ea:	6123      	str	r3, [r4, #16]
 80057ec:	f02b 0304 	bic.w	r3, fp, #4
 80057f0:	6023      	str	r3, [r4, #0]
 80057f2:	f04f 0900 	mov.w	r9, #0
 80057f6:	9700      	str	r7, [sp, #0]
 80057f8:	4633      	mov	r3, r6
 80057fa:	aa0b      	add	r2, sp, #44	@ 0x2c
 80057fc:	4621      	mov	r1, r4
 80057fe:	4628      	mov	r0, r5
 8005800:	f000 f9d2 	bl	8005ba8 <_printf_common>
 8005804:	3001      	adds	r0, #1
 8005806:	f040 808d 	bne.w	8005924 <_printf_float+0x1d0>
 800580a:	f04f 30ff 	mov.w	r0, #4294967295
 800580e:	b00d      	add	sp, #52	@ 0x34
 8005810:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005814:	4642      	mov	r2, r8
 8005816:	464b      	mov	r3, r9
 8005818:	4640      	mov	r0, r8
 800581a:	4649      	mov	r1, r9
 800581c:	f7fb f986 	bl	8000b2c <__aeabi_dcmpun>
 8005820:	b140      	cbz	r0, 8005834 <_printf_float+0xe0>
 8005822:	464b      	mov	r3, r9
 8005824:	2b00      	cmp	r3, #0
 8005826:	bfbc      	itt	lt
 8005828:	232d      	movlt	r3, #45	@ 0x2d
 800582a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800582e:	4a7e      	ldr	r2, [pc, #504]	@ (8005a28 <_printf_float+0x2d4>)
 8005830:	4b7e      	ldr	r3, [pc, #504]	@ (8005a2c <_printf_float+0x2d8>)
 8005832:	e7d4      	b.n	80057de <_printf_float+0x8a>
 8005834:	6863      	ldr	r3, [r4, #4]
 8005836:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800583a:	9206      	str	r2, [sp, #24]
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	d13b      	bne.n	80058b8 <_printf_float+0x164>
 8005840:	2306      	movs	r3, #6
 8005842:	6063      	str	r3, [r4, #4]
 8005844:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005848:	2300      	movs	r3, #0
 800584a:	6022      	str	r2, [r4, #0]
 800584c:	9303      	str	r3, [sp, #12]
 800584e:	ab0a      	add	r3, sp, #40	@ 0x28
 8005850:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005854:	ab09      	add	r3, sp, #36	@ 0x24
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	6861      	ldr	r1, [r4, #4]
 800585a:	ec49 8b10 	vmov	d0, r8, r9
 800585e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005862:	4628      	mov	r0, r5
 8005864:	f7ff fed6 	bl	8005614 <__cvt>
 8005868:	9b06      	ldr	r3, [sp, #24]
 800586a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800586c:	2b47      	cmp	r3, #71	@ 0x47
 800586e:	4680      	mov	r8, r0
 8005870:	d129      	bne.n	80058c6 <_printf_float+0x172>
 8005872:	1cc8      	adds	r0, r1, #3
 8005874:	db02      	blt.n	800587c <_printf_float+0x128>
 8005876:	6863      	ldr	r3, [r4, #4]
 8005878:	4299      	cmp	r1, r3
 800587a:	dd41      	ble.n	8005900 <_printf_float+0x1ac>
 800587c:	f1aa 0a02 	sub.w	sl, sl, #2
 8005880:	fa5f fa8a 	uxtb.w	sl, sl
 8005884:	3901      	subs	r1, #1
 8005886:	4652      	mov	r2, sl
 8005888:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800588c:	9109      	str	r1, [sp, #36]	@ 0x24
 800588e:	f7ff ff26 	bl	80056de <__exponent>
 8005892:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005894:	1813      	adds	r3, r2, r0
 8005896:	2a01      	cmp	r2, #1
 8005898:	4681      	mov	r9, r0
 800589a:	6123      	str	r3, [r4, #16]
 800589c:	dc02      	bgt.n	80058a4 <_printf_float+0x150>
 800589e:	6822      	ldr	r2, [r4, #0]
 80058a0:	07d2      	lsls	r2, r2, #31
 80058a2:	d501      	bpl.n	80058a8 <_printf_float+0x154>
 80058a4:	3301      	adds	r3, #1
 80058a6:	6123      	str	r3, [r4, #16]
 80058a8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d0a2      	beq.n	80057f6 <_printf_float+0xa2>
 80058b0:	232d      	movs	r3, #45	@ 0x2d
 80058b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80058b6:	e79e      	b.n	80057f6 <_printf_float+0xa2>
 80058b8:	9a06      	ldr	r2, [sp, #24]
 80058ba:	2a47      	cmp	r2, #71	@ 0x47
 80058bc:	d1c2      	bne.n	8005844 <_printf_float+0xf0>
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d1c0      	bne.n	8005844 <_printf_float+0xf0>
 80058c2:	2301      	movs	r3, #1
 80058c4:	e7bd      	b.n	8005842 <_printf_float+0xee>
 80058c6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80058ca:	d9db      	bls.n	8005884 <_printf_float+0x130>
 80058cc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80058d0:	d118      	bne.n	8005904 <_printf_float+0x1b0>
 80058d2:	2900      	cmp	r1, #0
 80058d4:	6863      	ldr	r3, [r4, #4]
 80058d6:	dd0b      	ble.n	80058f0 <_printf_float+0x19c>
 80058d8:	6121      	str	r1, [r4, #16]
 80058da:	b913      	cbnz	r3, 80058e2 <_printf_float+0x18e>
 80058dc:	6822      	ldr	r2, [r4, #0]
 80058de:	07d0      	lsls	r0, r2, #31
 80058e0:	d502      	bpl.n	80058e8 <_printf_float+0x194>
 80058e2:	3301      	adds	r3, #1
 80058e4:	440b      	add	r3, r1
 80058e6:	6123      	str	r3, [r4, #16]
 80058e8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80058ea:	f04f 0900 	mov.w	r9, #0
 80058ee:	e7db      	b.n	80058a8 <_printf_float+0x154>
 80058f0:	b913      	cbnz	r3, 80058f8 <_printf_float+0x1a4>
 80058f2:	6822      	ldr	r2, [r4, #0]
 80058f4:	07d2      	lsls	r2, r2, #31
 80058f6:	d501      	bpl.n	80058fc <_printf_float+0x1a8>
 80058f8:	3302      	adds	r3, #2
 80058fa:	e7f4      	b.n	80058e6 <_printf_float+0x192>
 80058fc:	2301      	movs	r3, #1
 80058fe:	e7f2      	b.n	80058e6 <_printf_float+0x192>
 8005900:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005904:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005906:	4299      	cmp	r1, r3
 8005908:	db05      	blt.n	8005916 <_printf_float+0x1c2>
 800590a:	6823      	ldr	r3, [r4, #0]
 800590c:	6121      	str	r1, [r4, #16]
 800590e:	07d8      	lsls	r0, r3, #31
 8005910:	d5ea      	bpl.n	80058e8 <_printf_float+0x194>
 8005912:	1c4b      	adds	r3, r1, #1
 8005914:	e7e7      	b.n	80058e6 <_printf_float+0x192>
 8005916:	2900      	cmp	r1, #0
 8005918:	bfd4      	ite	le
 800591a:	f1c1 0202 	rsble	r2, r1, #2
 800591e:	2201      	movgt	r2, #1
 8005920:	4413      	add	r3, r2
 8005922:	e7e0      	b.n	80058e6 <_printf_float+0x192>
 8005924:	6823      	ldr	r3, [r4, #0]
 8005926:	055a      	lsls	r2, r3, #21
 8005928:	d407      	bmi.n	800593a <_printf_float+0x1e6>
 800592a:	6923      	ldr	r3, [r4, #16]
 800592c:	4642      	mov	r2, r8
 800592e:	4631      	mov	r1, r6
 8005930:	4628      	mov	r0, r5
 8005932:	47b8      	blx	r7
 8005934:	3001      	adds	r0, #1
 8005936:	d12b      	bne.n	8005990 <_printf_float+0x23c>
 8005938:	e767      	b.n	800580a <_printf_float+0xb6>
 800593a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800593e:	f240 80dd 	bls.w	8005afc <_printf_float+0x3a8>
 8005942:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005946:	2200      	movs	r2, #0
 8005948:	2300      	movs	r3, #0
 800594a:	f7fb f8bd 	bl	8000ac8 <__aeabi_dcmpeq>
 800594e:	2800      	cmp	r0, #0
 8005950:	d033      	beq.n	80059ba <_printf_float+0x266>
 8005952:	4a37      	ldr	r2, [pc, #220]	@ (8005a30 <_printf_float+0x2dc>)
 8005954:	2301      	movs	r3, #1
 8005956:	4631      	mov	r1, r6
 8005958:	4628      	mov	r0, r5
 800595a:	47b8      	blx	r7
 800595c:	3001      	adds	r0, #1
 800595e:	f43f af54 	beq.w	800580a <_printf_float+0xb6>
 8005962:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005966:	4543      	cmp	r3, r8
 8005968:	db02      	blt.n	8005970 <_printf_float+0x21c>
 800596a:	6823      	ldr	r3, [r4, #0]
 800596c:	07d8      	lsls	r0, r3, #31
 800596e:	d50f      	bpl.n	8005990 <_printf_float+0x23c>
 8005970:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005974:	4631      	mov	r1, r6
 8005976:	4628      	mov	r0, r5
 8005978:	47b8      	blx	r7
 800597a:	3001      	adds	r0, #1
 800597c:	f43f af45 	beq.w	800580a <_printf_float+0xb6>
 8005980:	f04f 0900 	mov.w	r9, #0
 8005984:	f108 38ff 	add.w	r8, r8, #4294967295
 8005988:	f104 0a1a 	add.w	sl, r4, #26
 800598c:	45c8      	cmp	r8, r9
 800598e:	dc09      	bgt.n	80059a4 <_printf_float+0x250>
 8005990:	6823      	ldr	r3, [r4, #0]
 8005992:	079b      	lsls	r3, r3, #30
 8005994:	f100 8103 	bmi.w	8005b9e <_printf_float+0x44a>
 8005998:	68e0      	ldr	r0, [r4, #12]
 800599a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800599c:	4298      	cmp	r0, r3
 800599e:	bfb8      	it	lt
 80059a0:	4618      	movlt	r0, r3
 80059a2:	e734      	b.n	800580e <_printf_float+0xba>
 80059a4:	2301      	movs	r3, #1
 80059a6:	4652      	mov	r2, sl
 80059a8:	4631      	mov	r1, r6
 80059aa:	4628      	mov	r0, r5
 80059ac:	47b8      	blx	r7
 80059ae:	3001      	adds	r0, #1
 80059b0:	f43f af2b 	beq.w	800580a <_printf_float+0xb6>
 80059b4:	f109 0901 	add.w	r9, r9, #1
 80059b8:	e7e8      	b.n	800598c <_printf_float+0x238>
 80059ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059bc:	2b00      	cmp	r3, #0
 80059be:	dc39      	bgt.n	8005a34 <_printf_float+0x2e0>
 80059c0:	4a1b      	ldr	r2, [pc, #108]	@ (8005a30 <_printf_float+0x2dc>)
 80059c2:	2301      	movs	r3, #1
 80059c4:	4631      	mov	r1, r6
 80059c6:	4628      	mov	r0, r5
 80059c8:	47b8      	blx	r7
 80059ca:	3001      	adds	r0, #1
 80059cc:	f43f af1d 	beq.w	800580a <_printf_float+0xb6>
 80059d0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80059d4:	ea59 0303 	orrs.w	r3, r9, r3
 80059d8:	d102      	bne.n	80059e0 <_printf_float+0x28c>
 80059da:	6823      	ldr	r3, [r4, #0]
 80059dc:	07d9      	lsls	r1, r3, #31
 80059de:	d5d7      	bpl.n	8005990 <_printf_float+0x23c>
 80059e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80059e4:	4631      	mov	r1, r6
 80059e6:	4628      	mov	r0, r5
 80059e8:	47b8      	blx	r7
 80059ea:	3001      	adds	r0, #1
 80059ec:	f43f af0d 	beq.w	800580a <_printf_float+0xb6>
 80059f0:	f04f 0a00 	mov.w	sl, #0
 80059f4:	f104 0b1a 	add.w	fp, r4, #26
 80059f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80059fa:	425b      	negs	r3, r3
 80059fc:	4553      	cmp	r3, sl
 80059fe:	dc01      	bgt.n	8005a04 <_printf_float+0x2b0>
 8005a00:	464b      	mov	r3, r9
 8005a02:	e793      	b.n	800592c <_printf_float+0x1d8>
 8005a04:	2301      	movs	r3, #1
 8005a06:	465a      	mov	r2, fp
 8005a08:	4631      	mov	r1, r6
 8005a0a:	4628      	mov	r0, r5
 8005a0c:	47b8      	blx	r7
 8005a0e:	3001      	adds	r0, #1
 8005a10:	f43f aefb 	beq.w	800580a <_printf_float+0xb6>
 8005a14:	f10a 0a01 	add.w	sl, sl, #1
 8005a18:	e7ee      	b.n	80059f8 <_printf_float+0x2a4>
 8005a1a:	bf00      	nop
 8005a1c:	7fefffff 	.word	0x7fefffff
 8005a20:	08009204 	.word	0x08009204
 8005a24:	08009208 	.word	0x08009208
 8005a28:	0800920c 	.word	0x0800920c
 8005a2c:	08009210 	.word	0x08009210
 8005a30:	08009214 	.word	0x08009214
 8005a34:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a36:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005a3a:	4553      	cmp	r3, sl
 8005a3c:	bfa8      	it	ge
 8005a3e:	4653      	movge	r3, sl
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	4699      	mov	r9, r3
 8005a44:	dc36      	bgt.n	8005ab4 <_printf_float+0x360>
 8005a46:	f04f 0b00 	mov.w	fp, #0
 8005a4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a4e:	f104 021a 	add.w	r2, r4, #26
 8005a52:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005a54:	9306      	str	r3, [sp, #24]
 8005a56:	eba3 0309 	sub.w	r3, r3, r9
 8005a5a:	455b      	cmp	r3, fp
 8005a5c:	dc31      	bgt.n	8005ac2 <_printf_float+0x36e>
 8005a5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a60:	459a      	cmp	sl, r3
 8005a62:	dc3a      	bgt.n	8005ada <_printf_float+0x386>
 8005a64:	6823      	ldr	r3, [r4, #0]
 8005a66:	07da      	lsls	r2, r3, #31
 8005a68:	d437      	bmi.n	8005ada <_printf_float+0x386>
 8005a6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a6c:	ebaa 0903 	sub.w	r9, sl, r3
 8005a70:	9b06      	ldr	r3, [sp, #24]
 8005a72:	ebaa 0303 	sub.w	r3, sl, r3
 8005a76:	4599      	cmp	r9, r3
 8005a78:	bfa8      	it	ge
 8005a7a:	4699      	movge	r9, r3
 8005a7c:	f1b9 0f00 	cmp.w	r9, #0
 8005a80:	dc33      	bgt.n	8005aea <_printf_float+0x396>
 8005a82:	f04f 0800 	mov.w	r8, #0
 8005a86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005a8a:	f104 0b1a 	add.w	fp, r4, #26
 8005a8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a90:	ebaa 0303 	sub.w	r3, sl, r3
 8005a94:	eba3 0309 	sub.w	r3, r3, r9
 8005a98:	4543      	cmp	r3, r8
 8005a9a:	f77f af79 	ble.w	8005990 <_printf_float+0x23c>
 8005a9e:	2301      	movs	r3, #1
 8005aa0:	465a      	mov	r2, fp
 8005aa2:	4631      	mov	r1, r6
 8005aa4:	4628      	mov	r0, r5
 8005aa6:	47b8      	blx	r7
 8005aa8:	3001      	adds	r0, #1
 8005aaa:	f43f aeae 	beq.w	800580a <_printf_float+0xb6>
 8005aae:	f108 0801 	add.w	r8, r8, #1
 8005ab2:	e7ec      	b.n	8005a8e <_printf_float+0x33a>
 8005ab4:	4642      	mov	r2, r8
 8005ab6:	4631      	mov	r1, r6
 8005ab8:	4628      	mov	r0, r5
 8005aba:	47b8      	blx	r7
 8005abc:	3001      	adds	r0, #1
 8005abe:	d1c2      	bne.n	8005a46 <_printf_float+0x2f2>
 8005ac0:	e6a3      	b.n	800580a <_printf_float+0xb6>
 8005ac2:	2301      	movs	r3, #1
 8005ac4:	4631      	mov	r1, r6
 8005ac6:	4628      	mov	r0, r5
 8005ac8:	9206      	str	r2, [sp, #24]
 8005aca:	47b8      	blx	r7
 8005acc:	3001      	adds	r0, #1
 8005ace:	f43f ae9c 	beq.w	800580a <_printf_float+0xb6>
 8005ad2:	9a06      	ldr	r2, [sp, #24]
 8005ad4:	f10b 0b01 	add.w	fp, fp, #1
 8005ad8:	e7bb      	b.n	8005a52 <_printf_float+0x2fe>
 8005ada:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ade:	4631      	mov	r1, r6
 8005ae0:	4628      	mov	r0, r5
 8005ae2:	47b8      	blx	r7
 8005ae4:	3001      	adds	r0, #1
 8005ae6:	d1c0      	bne.n	8005a6a <_printf_float+0x316>
 8005ae8:	e68f      	b.n	800580a <_printf_float+0xb6>
 8005aea:	9a06      	ldr	r2, [sp, #24]
 8005aec:	464b      	mov	r3, r9
 8005aee:	4442      	add	r2, r8
 8005af0:	4631      	mov	r1, r6
 8005af2:	4628      	mov	r0, r5
 8005af4:	47b8      	blx	r7
 8005af6:	3001      	adds	r0, #1
 8005af8:	d1c3      	bne.n	8005a82 <_printf_float+0x32e>
 8005afa:	e686      	b.n	800580a <_printf_float+0xb6>
 8005afc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005b00:	f1ba 0f01 	cmp.w	sl, #1
 8005b04:	dc01      	bgt.n	8005b0a <_printf_float+0x3b6>
 8005b06:	07db      	lsls	r3, r3, #31
 8005b08:	d536      	bpl.n	8005b78 <_printf_float+0x424>
 8005b0a:	2301      	movs	r3, #1
 8005b0c:	4642      	mov	r2, r8
 8005b0e:	4631      	mov	r1, r6
 8005b10:	4628      	mov	r0, r5
 8005b12:	47b8      	blx	r7
 8005b14:	3001      	adds	r0, #1
 8005b16:	f43f ae78 	beq.w	800580a <_printf_float+0xb6>
 8005b1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005b1e:	4631      	mov	r1, r6
 8005b20:	4628      	mov	r0, r5
 8005b22:	47b8      	blx	r7
 8005b24:	3001      	adds	r0, #1
 8005b26:	f43f ae70 	beq.w	800580a <_printf_float+0xb6>
 8005b2a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005b2e:	2200      	movs	r2, #0
 8005b30:	2300      	movs	r3, #0
 8005b32:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005b36:	f7fa ffc7 	bl	8000ac8 <__aeabi_dcmpeq>
 8005b3a:	b9c0      	cbnz	r0, 8005b6e <_printf_float+0x41a>
 8005b3c:	4653      	mov	r3, sl
 8005b3e:	f108 0201 	add.w	r2, r8, #1
 8005b42:	4631      	mov	r1, r6
 8005b44:	4628      	mov	r0, r5
 8005b46:	47b8      	blx	r7
 8005b48:	3001      	adds	r0, #1
 8005b4a:	d10c      	bne.n	8005b66 <_printf_float+0x412>
 8005b4c:	e65d      	b.n	800580a <_printf_float+0xb6>
 8005b4e:	2301      	movs	r3, #1
 8005b50:	465a      	mov	r2, fp
 8005b52:	4631      	mov	r1, r6
 8005b54:	4628      	mov	r0, r5
 8005b56:	47b8      	blx	r7
 8005b58:	3001      	adds	r0, #1
 8005b5a:	f43f ae56 	beq.w	800580a <_printf_float+0xb6>
 8005b5e:	f108 0801 	add.w	r8, r8, #1
 8005b62:	45d0      	cmp	r8, sl
 8005b64:	dbf3      	blt.n	8005b4e <_printf_float+0x3fa>
 8005b66:	464b      	mov	r3, r9
 8005b68:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005b6c:	e6df      	b.n	800592e <_printf_float+0x1da>
 8005b6e:	f04f 0800 	mov.w	r8, #0
 8005b72:	f104 0b1a 	add.w	fp, r4, #26
 8005b76:	e7f4      	b.n	8005b62 <_printf_float+0x40e>
 8005b78:	2301      	movs	r3, #1
 8005b7a:	4642      	mov	r2, r8
 8005b7c:	e7e1      	b.n	8005b42 <_printf_float+0x3ee>
 8005b7e:	2301      	movs	r3, #1
 8005b80:	464a      	mov	r2, r9
 8005b82:	4631      	mov	r1, r6
 8005b84:	4628      	mov	r0, r5
 8005b86:	47b8      	blx	r7
 8005b88:	3001      	adds	r0, #1
 8005b8a:	f43f ae3e 	beq.w	800580a <_printf_float+0xb6>
 8005b8e:	f108 0801 	add.w	r8, r8, #1
 8005b92:	68e3      	ldr	r3, [r4, #12]
 8005b94:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005b96:	1a5b      	subs	r3, r3, r1
 8005b98:	4543      	cmp	r3, r8
 8005b9a:	dcf0      	bgt.n	8005b7e <_printf_float+0x42a>
 8005b9c:	e6fc      	b.n	8005998 <_printf_float+0x244>
 8005b9e:	f04f 0800 	mov.w	r8, #0
 8005ba2:	f104 0919 	add.w	r9, r4, #25
 8005ba6:	e7f4      	b.n	8005b92 <_printf_float+0x43e>

08005ba8 <_printf_common>:
 8005ba8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005bac:	4616      	mov	r6, r2
 8005bae:	4698      	mov	r8, r3
 8005bb0:	688a      	ldr	r2, [r1, #8]
 8005bb2:	690b      	ldr	r3, [r1, #16]
 8005bb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	bfb8      	it	lt
 8005bbc:	4613      	movlt	r3, r2
 8005bbe:	6033      	str	r3, [r6, #0]
 8005bc0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005bc4:	4607      	mov	r7, r0
 8005bc6:	460c      	mov	r4, r1
 8005bc8:	b10a      	cbz	r2, 8005bce <_printf_common+0x26>
 8005bca:	3301      	adds	r3, #1
 8005bcc:	6033      	str	r3, [r6, #0]
 8005bce:	6823      	ldr	r3, [r4, #0]
 8005bd0:	0699      	lsls	r1, r3, #26
 8005bd2:	bf42      	ittt	mi
 8005bd4:	6833      	ldrmi	r3, [r6, #0]
 8005bd6:	3302      	addmi	r3, #2
 8005bd8:	6033      	strmi	r3, [r6, #0]
 8005bda:	6825      	ldr	r5, [r4, #0]
 8005bdc:	f015 0506 	ands.w	r5, r5, #6
 8005be0:	d106      	bne.n	8005bf0 <_printf_common+0x48>
 8005be2:	f104 0a19 	add.w	sl, r4, #25
 8005be6:	68e3      	ldr	r3, [r4, #12]
 8005be8:	6832      	ldr	r2, [r6, #0]
 8005bea:	1a9b      	subs	r3, r3, r2
 8005bec:	42ab      	cmp	r3, r5
 8005bee:	dc26      	bgt.n	8005c3e <_printf_common+0x96>
 8005bf0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005bf4:	6822      	ldr	r2, [r4, #0]
 8005bf6:	3b00      	subs	r3, #0
 8005bf8:	bf18      	it	ne
 8005bfa:	2301      	movne	r3, #1
 8005bfc:	0692      	lsls	r2, r2, #26
 8005bfe:	d42b      	bmi.n	8005c58 <_printf_common+0xb0>
 8005c00:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005c04:	4641      	mov	r1, r8
 8005c06:	4638      	mov	r0, r7
 8005c08:	47c8      	blx	r9
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	d01e      	beq.n	8005c4c <_printf_common+0xa4>
 8005c0e:	6823      	ldr	r3, [r4, #0]
 8005c10:	6922      	ldr	r2, [r4, #16]
 8005c12:	f003 0306 	and.w	r3, r3, #6
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	bf02      	ittt	eq
 8005c1a:	68e5      	ldreq	r5, [r4, #12]
 8005c1c:	6833      	ldreq	r3, [r6, #0]
 8005c1e:	1aed      	subeq	r5, r5, r3
 8005c20:	68a3      	ldr	r3, [r4, #8]
 8005c22:	bf0c      	ite	eq
 8005c24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005c28:	2500      	movne	r5, #0
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	bfc4      	itt	gt
 8005c2e:	1a9b      	subgt	r3, r3, r2
 8005c30:	18ed      	addgt	r5, r5, r3
 8005c32:	2600      	movs	r6, #0
 8005c34:	341a      	adds	r4, #26
 8005c36:	42b5      	cmp	r5, r6
 8005c38:	d11a      	bne.n	8005c70 <_printf_common+0xc8>
 8005c3a:	2000      	movs	r0, #0
 8005c3c:	e008      	b.n	8005c50 <_printf_common+0xa8>
 8005c3e:	2301      	movs	r3, #1
 8005c40:	4652      	mov	r2, sl
 8005c42:	4641      	mov	r1, r8
 8005c44:	4638      	mov	r0, r7
 8005c46:	47c8      	blx	r9
 8005c48:	3001      	adds	r0, #1
 8005c4a:	d103      	bne.n	8005c54 <_printf_common+0xac>
 8005c4c:	f04f 30ff 	mov.w	r0, #4294967295
 8005c50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005c54:	3501      	adds	r5, #1
 8005c56:	e7c6      	b.n	8005be6 <_printf_common+0x3e>
 8005c58:	18e1      	adds	r1, r4, r3
 8005c5a:	1c5a      	adds	r2, r3, #1
 8005c5c:	2030      	movs	r0, #48	@ 0x30
 8005c5e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005c62:	4422      	add	r2, r4
 8005c64:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005c68:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005c6c:	3302      	adds	r3, #2
 8005c6e:	e7c7      	b.n	8005c00 <_printf_common+0x58>
 8005c70:	2301      	movs	r3, #1
 8005c72:	4622      	mov	r2, r4
 8005c74:	4641      	mov	r1, r8
 8005c76:	4638      	mov	r0, r7
 8005c78:	47c8      	blx	r9
 8005c7a:	3001      	adds	r0, #1
 8005c7c:	d0e6      	beq.n	8005c4c <_printf_common+0xa4>
 8005c7e:	3601      	adds	r6, #1
 8005c80:	e7d9      	b.n	8005c36 <_printf_common+0x8e>
	...

08005c84 <_printf_i>:
 8005c84:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005c88:	7e0f      	ldrb	r7, [r1, #24]
 8005c8a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005c8c:	2f78      	cmp	r7, #120	@ 0x78
 8005c8e:	4691      	mov	r9, r2
 8005c90:	4680      	mov	r8, r0
 8005c92:	460c      	mov	r4, r1
 8005c94:	469a      	mov	sl, r3
 8005c96:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005c9a:	d807      	bhi.n	8005cac <_printf_i+0x28>
 8005c9c:	2f62      	cmp	r7, #98	@ 0x62
 8005c9e:	d80a      	bhi.n	8005cb6 <_printf_i+0x32>
 8005ca0:	2f00      	cmp	r7, #0
 8005ca2:	f000 80d2 	beq.w	8005e4a <_printf_i+0x1c6>
 8005ca6:	2f58      	cmp	r7, #88	@ 0x58
 8005ca8:	f000 80b9 	beq.w	8005e1e <_printf_i+0x19a>
 8005cac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005cb0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005cb4:	e03a      	b.n	8005d2c <_printf_i+0xa8>
 8005cb6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005cba:	2b15      	cmp	r3, #21
 8005cbc:	d8f6      	bhi.n	8005cac <_printf_i+0x28>
 8005cbe:	a101      	add	r1, pc, #4	@ (adr r1, 8005cc4 <_printf_i+0x40>)
 8005cc0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005cc4:	08005d1d 	.word	0x08005d1d
 8005cc8:	08005d31 	.word	0x08005d31
 8005ccc:	08005cad 	.word	0x08005cad
 8005cd0:	08005cad 	.word	0x08005cad
 8005cd4:	08005cad 	.word	0x08005cad
 8005cd8:	08005cad 	.word	0x08005cad
 8005cdc:	08005d31 	.word	0x08005d31
 8005ce0:	08005cad 	.word	0x08005cad
 8005ce4:	08005cad 	.word	0x08005cad
 8005ce8:	08005cad 	.word	0x08005cad
 8005cec:	08005cad 	.word	0x08005cad
 8005cf0:	08005e31 	.word	0x08005e31
 8005cf4:	08005d5b 	.word	0x08005d5b
 8005cf8:	08005deb 	.word	0x08005deb
 8005cfc:	08005cad 	.word	0x08005cad
 8005d00:	08005cad 	.word	0x08005cad
 8005d04:	08005e53 	.word	0x08005e53
 8005d08:	08005cad 	.word	0x08005cad
 8005d0c:	08005d5b 	.word	0x08005d5b
 8005d10:	08005cad 	.word	0x08005cad
 8005d14:	08005cad 	.word	0x08005cad
 8005d18:	08005df3 	.word	0x08005df3
 8005d1c:	6833      	ldr	r3, [r6, #0]
 8005d1e:	1d1a      	adds	r2, r3, #4
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	6032      	str	r2, [r6, #0]
 8005d24:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005d28:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	e09d      	b.n	8005e6c <_printf_i+0x1e8>
 8005d30:	6833      	ldr	r3, [r6, #0]
 8005d32:	6820      	ldr	r0, [r4, #0]
 8005d34:	1d19      	adds	r1, r3, #4
 8005d36:	6031      	str	r1, [r6, #0]
 8005d38:	0606      	lsls	r6, r0, #24
 8005d3a:	d501      	bpl.n	8005d40 <_printf_i+0xbc>
 8005d3c:	681d      	ldr	r5, [r3, #0]
 8005d3e:	e003      	b.n	8005d48 <_printf_i+0xc4>
 8005d40:	0645      	lsls	r5, r0, #25
 8005d42:	d5fb      	bpl.n	8005d3c <_printf_i+0xb8>
 8005d44:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005d48:	2d00      	cmp	r5, #0
 8005d4a:	da03      	bge.n	8005d54 <_printf_i+0xd0>
 8005d4c:	232d      	movs	r3, #45	@ 0x2d
 8005d4e:	426d      	negs	r5, r5
 8005d50:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005d54:	4859      	ldr	r0, [pc, #356]	@ (8005ebc <_printf_i+0x238>)
 8005d56:	230a      	movs	r3, #10
 8005d58:	e011      	b.n	8005d7e <_printf_i+0xfa>
 8005d5a:	6821      	ldr	r1, [r4, #0]
 8005d5c:	6833      	ldr	r3, [r6, #0]
 8005d5e:	0608      	lsls	r0, r1, #24
 8005d60:	f853 5b04 	ldr.w	r5, [r3], #4
 8005d64:	d402      	bmi.n	8005d6c <_printf_i+0xe8>
 8005d66:	0649      	lsls	r1, r1, #25
 8005d68:	bf48      	it	mi
 8005d6a:	b2ad      	uxthmi	r5, r5
 8005d6c:	2f6f      	cmp	r7, #111	@ 0x6f
 8005d6e:	4853      	ldr	r0, [pc, #332]	@ (8005ebc <_printf_i+0x238>)
 8005d70:	6033      	str	r3, [r6, #0]
 8005d72:	bf14      	ite	ne
 8005d74:	230a      	movne	r3, #10
 8005d76:	2308      	moveq	r3, #8
 8005d78:	2100      	movs	r1, #0
 8005d7a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005d7e:	6866      	ldr	r6, [r4, #4]
 8005d80:	60a6      	str	r6, [r4, #8]
 8005d82:	2e00      	cmp	r6, #0
 8005d84:	bfa2      	ittt	ge
 8005d86:	6821      	ldrge	r1, [r4, #0]
 8005d88:	f021 0104 	bicge.w	r1, r1, #4
 8005d8c:	6021      	strge	r1, [r4, #0]
 8005d8e:	b90d      	cbnz	r5, 8005d94 <_printf_i+0x110>
 8005d90:	2e00      	cmp	r6, #0
 8005d92:	d04b      	beq.n	8005e2c <_printf_i+0x1a8>
 8005d94:	4616      	mov	r6, r2
 8005d96:	fbb5 f1f3 	udiv	r1, r5, r3
 8005d9a:	fb03 5711 	mls	r7, r3, r1, r5
 8005d9e:	5dc7      	ldrb	r7, [r0, r7]
 8005da0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005da4:	462f      	mov	r7, r5
 8005da6:	42bb      	cmp	r3, r7
 8005da8:	460d      	mov	r5, r1
 8005daa:	d9f4      	bls.n	8005d96 <_printf_i+0x112>
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d10b      	bne.n	8005dc8 <_printf_i+0x144>
 8005db0:	6823      	ldr	r3, [r4, #0]
 8005db2:	07df      	lsls	r7, r3, #31
 8005db4:	d508      	bpl.n	8005dc8 <_printf_i+0x144>
 8005db6:	6923      	ldr	r3, [r4, #16]
 8005db8:	6861      	ldr	r1, [r4, #4]
 8005dba:	4299      	cmp	r1, r3
 8005dbc:	bfde      	ittt	le
 8005dbe:	2330      	movle	r3, #48	@ 0x30
 8005dc0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005dc4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005dc8:	1b92      	subs	r2, r2, r6
 8005dca:	6122      	str	r2, [r4, #16]
 8005dcc:	f8cd a000 	str.w	sl, [sp]
 8005dd0:	464b      	mov	r3, r9
 8005dd2:	aa03      	add	r2, sp, #12
 8005dd4:	4621      	mov	r1, r4
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	f7ff fee6 	bl	8005ba8 <_printf_common>
 8005ddc:	3001      	adds	r0, #1
 8005dde:	d14a      	bne.n	8005e76 <_printf_i+0x1f2>
 8005de0:	f04f 30ff 	mov.w	r0, #4294967295
 8005de4:	b004      	add	sp, #16
 8005de6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005dea:	6823      	ldr	r3, [r4, #0]
 8005dec:	f043 0320 	orr.w	r3, r3, #32
 8005df0:	6023      	str	r3, [r4, #0]
 8005df2:	4833      	ldr	r0, [pc, #204]	@ (8005ec0 <_printf_i+0x23c>)
 8005df4:	2778      	movs	r7, #120	@ 0x78
 8005df6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005dfa:	6823      	ldr	r3, [r4, #0]
 8005dfc:	6831      	ldr	r1, [r6, #0]
 8005dfe:	061f      	lsls	r7, r3, #24
 8005e00:	f851 5b04 	ldr.w	r5, [r1], #4
 8005e04:	d402      	bmi.n	8005e0c <_printf_i+0x188>
 8005e06:	065f      	lsls	r7, r3, #25
 8005e08:	bf48      	it	mi
 8005e0a:	b2ad      	uxthmi	r5, r5
 8005e0c:	6031      	str	r1, [r6, #0]
 8005e0e:	07d9      	lsls	r1, r3, #31
 8005e10:	bf44      	itt	mi
 8005e12:	f043 0320 	orrmi.w	r3, r3, #32
 8005e16:	6023      	strmi	r3, [r4, #0]
 8005e18:	b11d      	cbz	r5, 8005e22 <_printf_i+0x19e>
 8005e1a:	2310      	movs	r3, #16
 8005e1c:	e7ac      	b.n	8005d78 <_printf_i+0xf4>
 8005e1e:	4827      	ldr	r0, [pc, #156]	@ (8005ebc <_printf_i+0x238>)
 8005e20:	e7e9      	b.n	8005df6 <_printf_i+0x172>
 8005e22:	6823      	ldr	r3, [r4, #0]
 8005e24:	f023 0320 	bic.w	r3, r3, #32
 8005e28:	6023      	str	r3, [r4, #0]
 8005e2a:	e7f6      	b.n	8005e1a <_printf_i+0x196>
 8005e2c:	4616      	mov	r6, r2
 8005e2e:	e7bd      	b.n	8005dac <_printf_i+0x128>
 8005e30:	6833      	ldr	r3, [r6, #0]
 8005e32:	6825      	ldr	r5, [r4, #0]
 8005e34:	6961      	ldr	r1, [r4, #20]
 8005e36:	1d18      	adds	r0, r3, #4
 8005e38:	6030      	str	r0, [r6, #0]
 8005e3a:	062e      	lsls	r6, r5, #24
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	d501      	bpl.n	8005e44 <_printf_i+0x1c0>
 8005e40:	6019      	str	r1, [r3, #0]
 8005e42:	e002      	b.n	8005e4a <_printf_i+0x1c6>
 8005e44:	0668      	lsls	r0, r5, #25
 8005e46:	d5fb      	bpl.n	8005e40 <_printf_i+0x1bc>
 8005e48:	8019      	strh	r1, [r3, #0]
 8005e4a:	2300      	movs	r3, #0
 8005e4c:	6123      	str	r3, [r4, #16]
 8005e4e:	4616      	mov	r6, r2
 8005e50:	e7bc      	b.n	8005dcc <_printf_i+0x148>
 8005e52:	6833      	ldr	r3, [r6, #0]
 8005e54:	1d1a      	adds	r2, r3, #4
 8005e56:	6032      	str	r2, [r6, #0]
 8005e58:	681e      	ldr	r6, [r3, #0]
 8005e5a:	6862      	ldr	r2, [r4, #4]
 8005e5c:	2100      	movs	r1, #0
 8005e5e:	4630      	mov	r0, r6
 8005e60:	f7fa f9b6 	bl	80001d0 <memchr>
 8005e64:	b108      	cbz	r0, 8005e6a <_printf_i+0x1e6>
 8005e66:	1b80      	subs	r0, r0, r6
 8005e68:	6060      	str	r0, [r4, #4]
 8005e6a:	6863      	ldr	r3, [r4, #4]
 8005e6c:	6123      	str	r3, [r4, #16]
 8005e6e:	2300      	movs	r3, #0
 8005e70:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005e74:	e7aa      	b.n	8005dcc <_printf_i+0x148>
 8005e76:	6923      	ldr	r3, [r4, #16]
 8005e78:	4632      	mov	r2, r6
 8005e7a:	4649      	mov	r1, r9
 8005e7c:	4640      	mov	r0, r8
 8005e7e:	47d0      	blx	sl
 8005e80:	3001      	adds	r0, #1
 8005e82:	d0ad      	beq.n	8005de0 <_printf_i+0x15c>
 8005e84:	6823      	ldr	r3, [r4, #0]
 8005e86:	079b      	lsls	r3, r3, #30
 8005e88:	d413      	bmi.n	8005eb2 <_printf_i+0x22e>
 8005e8a:	68e0      	ldr	r0, [r4, #12]
 8005e8c:	9b03      	ldr	r3, [sp, #12]
 8005e8e:	4298      	cmp	r0, r3
 8005e90:	bfb8      	it	lt
 8005e92:	4618      	movlt	r0, r3
 8005e94:	e7a6      	b.n	8005de4 <_printf_i+0x160>
 8005e96:	2301      	movs	r3, #1
 8005e98:	4632      	mov	r2, r6
 8005e9a:	4649      	mov	r1, r9
 8005e9c:	4640      	mov	r0, r8
 8005e9e:	47d0      	blx	sl
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	d09d      	beq.n	8005de0 <_printf_i+0x15c>
 8005ea4:	3501      	adds	r5, #1
 8005ea6:	68e3      	ldr	r3, [r4, #12]
 8005ea8:	9903      	ldr	r1, [sp, #12]
 8005eaa:	1a5b      	subs	r3, r3, r1
 8005eac:	42ab      	cmp	r3, r5
 8005eae:	dcf2      	bgt.n	8005e96 <_printf_i+0x212>
 8005eb0:	e7eb      	b.n	8005e8a <_printf_i+0x206>
 8005eb2:	2500      	movs	r5, #0
 8005eb4:	f104 0619 	add.w	r6, r4, #25
 8005eb8:	e7f5      	b.n	8005ea6 <_printf_i+0x222>
 8005eba:	bf00      	nop
 8005ebc:	08009216 	.word	0x08009216
 8005ec0:	08009227 	.word	0x08009227

08005ec4 <std>:
 8005ec4:	2300      	movs	r3, #0
 8005ec6:	b510      	push	{r4, lr}
 8005ec8:	4604      	mov	r4, r0
 8005eca:	e9c0 3300 	strd	r3, r3, [r0]
 8005ece:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005ed2:	6083      	str	r3, [r0, #8]
 8005ed4:	8181      	strh	r1, [r0, #12]
 8005ed6:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ed8:	81c2      	strh	r2, [r0, #14]
 8005eda:	6183      	str	r3, [r0, #24]
 8005edc:	4619      	mov	r1, r3
 8005ede:	2208      	movs	r2, #8
 8005ee0:	305c      	adds	r0, #92	@ 0x5c
 8005ee2:	f000 f914 	bl	800610e <memset>
 8005ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8005f1c <std+0x58>)
 8005ee8:	6263      	str	r3, [r4, #36]	@ 0x24
 8005eea:	4b0d      	ldr	r3, [pc, #52]	@ (8005f20 <std+0x5c>)
 8005eec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005eee:	4b0d      	ldr	r3, [pc, #52]	@ (8005f24 <std+0x60>)
 8005ef0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8005f28 <std+0x64>)
 8005ef4:	6323      	str	r3, [r4, #48]	@ 0x30
 8005ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8005f2c <std+0x68>)
 8005ef8:	6224      	str	r4, [r4, #32]
 8005efa:	429c      	cmp	r4, r3
 8005efc:	d006      	beq.n	8005f0c <std+0x48>
 8005efe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005f02:	4294      	cmp	r4, r2
 8005f04:	d002      	beq.n	8005f0c <std+0x48>
 8005f06:	33d0      	adds	r3, #208	@ 0xd0
 8005f08:	429c      	cmp	r4, r3
 8005f0a:	d105      	bne.n	8005f18 <std+0x54>
 8005f0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005f10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f14:	f000 b978 	b.w	8006208 <__retarget_lock_init_recursive>
 8005f18:	bd10      	pop	{r4, pc}
 8005f1a:	bf00      	nop
 8005f1c:	08006089 	.word	0x08006089
 8005f20:	080060ab 	.word	0x080060ab
 8005f24:	080060e3 	.word	0x080060e3
 8005f28:	08006107 	.word	0x08006107
 8005f2c:	200003e8 	.word	0x200003e8

08005f30 <stdio_exit_handler>:
 8005f30:	4a02      	ldr	r2, [pc, #8]	@ (8005f3c <stdio_exit_handler+0xc>)
 8005f32:	4903      	ldr	r1, [pc, #12]	@ (8005f40 <stdio_exit_handler+0x10>)
 8005f34:	4803      	ldr	r0, [pc, #12]	@ (8005f44 <stdio_exit_handler+0x14>)
 8005f36:	f000 b869 	b.w	800600c <_fwalk_sglue>
 8005f3a:	bf00      	nop
 8005f3c:	2000000c 	.word	0x2000000c
 8005f40:	08007b65 	.word	0x08007b65
 8005f44:	2000001c 	.word	0x2000001c

08005f48 <cleanup_stdio>:
 8005f48:	6841      	ldr	r1, [r0, #4]
 8005f4a:	4b0c      	ldr	r3, [pc, #48]	@ (8005f7c <cleanup_stdio+0x34>)
 8005f4c:	4299      	cmp	r1, r3
 8005f4e:	b510      	push	{r4, lr}
 8005f50:	4604      	mov	r4, r0
 8005f52:	d001      	beq.n	8005f58 <cleanup_stdio+0x10>
 8005f54:	f001 fe06 	bl	8007b64 <_fflush_r>
 8005f58:	68a1      	ldr	r1, [r4, #8]
 8005f5a:	4b09      	ldr	r3, [pc, #36]	@ (8005f80 <cleanup_stdio+0x38>)
 8005f5c:	4299      	cmp	r1, r3
 8005f5e:	d002      	beq.n	8005f66 <cleanup_stdio+0x1e>
 8005f60:	4620      	mov	r0, r4
 8005f62:	f001 fdff 	bl	8007b64 <_fflush_r>
 8005f66:	68e1      	ldr	r1, [r4, #12]
 8005f68:	4b06      	ldr	r3, [pc, #24]	@ (8005f84 <cleanup_stdio+0x3c>)
 8005f6a:	4299      	cmp	r1, r3
 8005f6c:	d004      	beq.n	8005f78 <cleanup_stdio+0x30>
 8005f6e:	4620      	mov	r0, r4
 8005f70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005f74:	f001 bdf6 	b.w	8007b64 <_fflush_r>
 8005f78:	bd10      	pop	{r4, pc}
 8005f7a:	bf00      	nop
 8005f7c:	200003e8 	.word	0x200003e8
 8005f80:	20000450 	.word	0x20000450
 8005f84:	200004b8 	.word	0x200004b8

08005f88 <global_stdio_init.part.0>:
 8005f88:	b510      	push	{r4, lr}
 8005f8a:	4b0b      	ldr	r3, [pc, #44]	@ (8005fb8 <global_stdio_init.part.0+0x30>)
 8005f8c:	4c0b      	ldr	r4, [pc, #44]	@ (8005fbc <global_stdio_init.part.0+0x34>)
 8005f8e:	4a0c      	ldr	r2, [pc, #48]	@ (8005fc0 <global_stdio_init.part.0+0x38>)
 8005f90:	601a      	str	r2, [r3, #0]
 8005f92:	4620      	mov	r0, r4
 8005f94:	2200      	movs	r2, #0
 8005f96:	2104      	movs	r1, #4
 8005f98:	f7ff ff94 	bl	8005ec4 <std>
 8005f9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005fa0:	2201      	movs	r2, #1
 8005fa2:	2109      	movs	r1, #9
 8005fa4:	f7ff ff8e 	bl	8005ec4 <std>
 8005fa8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005fac:	2202      	movs	r2, #2
 8005fae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fb2:	2112      	movs	r1, #18
 8005fb4:	f7ff bf86 	b.w	8005ec4 <std>
 8005fb8:	20000520 	.word	0x20000520
 8005fbc:	200003e8 	.word	0x200003e8
 8005fc0:	08005f31 	.word	0x08005f31

08005fc4 <__sfp_lock_acquire>:
 8005fc4:	4801      	ldr	r0, [pc, #4]	@ (8005fcc <__sfp_lock_acquire+0x8>)
 8005fc6:	f000 b920 	b.w	800620a <__retarget_lock_acquire_recursive>
 8005fca:	bf00      	nop
 8005fcc:	20000529 	.word	0x20000529

08005fd0 <__sfp_lock_release>:
 8005fd0:	4801      	ldr	r0, [pc, #4]	@ (8005fd8 <__sfp_lock_release+0x8>)
 8005fd2:	f000 b91b 	b.w	800620c <__retarget_lock_release_recursive>
 8005fd6:	bf00      	nop
 8005fd8:	20000529 	.word	0x20000529

08005fdc <__sinit>:
 8005fdc:	b510      	push	{r4, lr}
 8005fde:	4604      	mov	r4, r0
 8005fe0:	f7ff fff0 	bl	8005fc4 <__sfp_lock_acquire>
 8005fe4:	6a23      	ldr	r3, [r4, #32]
 8005fe6:	b11b      	cbz	r3, 8005ff0 <__sinit+0x14>
 8005fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005fec:	f7ff bff0 	b.w	8005fd0 <__sfp_lock_release>
 8005ff0:	4b04      	ldr	r3, [pc, #16]	@ (8006004 <__sinit+0x28>)
 8005ff2:	6223      	str	r3, [r4, #32]
 8005ff4:	4b04      	ldr	r3, [pc, #16]	@ (8006008 <__sinit+0x2c>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d1f5      	bne.n	8005fe8 <__sinit+0xc>
 8005ffc:	f7ff ffc4 	bl	8005f88 <global_stdio_init.part.0>
 8006000:	e7f2      	b.n	8005fe8 <__sinit+0xc>
 8006002:	bf00      	nop
 8006004:	08005f49 	.word	0x08005f49
 8006008:	20000520 	.word	0x20000520

0800600c <_fwalk_sglue>:
 800600c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006010:	4607      	mov	r7, r0
 8006012:	4688      	mov	r8, r1
 8006014:	4614      	mov	r4, r2
 8006016:	2600      	movs	r6, #0
 8006018:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800601c:	f1b9 0901 	subs.w	r9, r9, #1
 8006020:	d505      	bpl.n	800602e <_fwalk_sglue+0x22>
 8006022:	6824      	ldr	r4, [r4, #0]
 8006024:	2c00      	cmp	r4, #0
 8006026:	d1f7      	bne.n	8006018 <_fwalk_sglue+0xc>
 8006028:	4630      	mov	r0, r6
 800602a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800602e:	89ab      	ldrh	r3, [r5, #12]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d907      	bls.n	8006044 <_fwalk_sglue+0x38>
 8006034:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006038:	3301      	adds	r3, #1
 800603a:	d003      	beq.n	8006044 <_fwalk_sglue+0x38>
 800603c:	4629      	mov	r1, r5
 800603e:	4638      	mov	r0, r7
 8006040:	47c0      	blx	r8
 8006042:	4306      	orrs	r6, r0
 8006044:	3568      	adds	r5, #104	@ 0x68
 8006046:	e7e9      	b.n	800601c <_fwalk_sglue+0x10>

08006048 <siprintf>:
 8006048:	b40e      	push	{r1, r2, r3}
 800604a:	b500      	push	{lr}
 800604c:	b09c      	sub	sp, #112	@ 0x70
 800604e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006050:	9002      	str	r0, [sp, #8]
 8006052:	9006      	str	r0, [sp, #24]
 8006054:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006058:	4809      	ldr	r0, [pc, #36]	@ (8006080 <siprintf+0x38>)
 800605a:	9107      	str	r1, [sp, #28]
 800605c:	9104      	str	r1, [sp, #16]
 800605e:	4909      	ldr	r1, [pc, #36]	@ (8006084 <siprintf+0x3c>)
 8006060:	f853 2b04 	ldr.w	r2, [r3], #4
 8006064:	9105      	str	r1, [sp, #20]
 8006066:	6800      	ldr	r0, [r0, #0]
 8006068:	9301      	str	r3, [sp, #4]
 800606a:	a902      	add	r1, sp, #8
 800606c:	f001 fbfa 	bl	8007864 <_svfiprintf_r>
 8006070:	9b02      	ldr	r3, [sp, #8]
 8006072:	2200      	movs	r2, #0
 8006074:	701a      	strb	r2, [r3, #0]
 8006076:	b01c      	add	sp, #112	@ 0x70
 8006078:	f85d eb04 	ldr.w	lr, [sp], #4
 800607c:	b003      	add	sp, #12
 800607e:	4770      	bx	lr
 8006080:	20000018 	.word	0x20000018
 8006084:	ffff0208 	.word	0xffff0208

08006088 <__sread>:
 8006088:	b510      	push	{r4, lr}
 800608a:	460c      	mov	r4, r1
 800608c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006090:	f000 f86c 	bl	800616c <_read_r>
 8006094:	2800      	cmp	r0, #0
 8006096:	bfab      	itete	ge
 8006098:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800609a:	89a3      	ldrhlt	r3, [r4, #12]
 800609c:	181b      	addge	r3, r3, r0
 800609e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80060a2:	bfac      	ite	ge
 80060a4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80060a6:	81a3      	strhlt	r3, [r4, #12]
 80060a8:	bd10      	pop	{r4, pc}

080060aa <__swrite>:
 80060aa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060ae:	461f      	mov	r7, r3
 80060b0:	898b      	ldrh	r3, [r1, #12]
 80060b2:	05db      	lsls	r3, r3, #23
 80060b4:	4605      	mov	r5, r0
 80060b6:	460c      	mov	r4, r1
 80060b8:	4616      	mov	r6, r2
 80060ba:	d505      	bpl.n	80060c8 <__swrite+0x1e>
 80060bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060c0:	2302      	movs	r3, #2
 80060c2:	2200      	movs	r2, #0
 80060c4:	f000 f840 	bl	8006148 <_lseek_r>
 80060c8:	89a3      	ldrh	r3, [r4, #12]
 80060ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80060ce:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80060d2:	81a3      	strh	r3, [r4, #12]
 80060d4:	4632      	mov	r2, r6
 80060d6:	463b      	mov	r3, r7
 80060d8:	4628      	mov	r0, r5
 80060da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060de:	f000 b857 	b.w	8006190 <_write_r>

080060e2 <__sseek>:
 80060e2:	b510      	push	{r4, lr}
 80060e4:	460c      	mov	r4, r1
 80060e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80060ea:	f000 f82d 	bl	8006148 <_lseek_r>
 80060ee:	1c43      	adds	r3, r0, #1
 80060f0:	89a3      	ldrh	r3, [r4, #12]
 80060f2:	bf15      	itete	ne
 80060f4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80060f6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80060fa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80060fe:	81a3      	strheq	r3, [r4, #12]
 8006100:	bf18      	it	ne
 8006102:	81a3      	strhne	r3, [r4, #12]
 8006104:	bd10      	pop	{r4, pc}

08006106 <__sclose>:
 8006106:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800610a:	f000 b80d 	b.w	8006128 <_close_r>

0800610e <memset>:
 800610e:	4402      	add	r2, r0
 8006110:	4603      	mov	r3, r0
 8006112:	4293      	cmp	r3, r2
 8006114:	d100      	bne.n	8006118 <memset+0xa>
 8006116:	4770      	bx	lr
 8006118:	f803 1b01 	strb.w	r1, [r3], #1
 800611c:	e7f9      	b.n	8006112 <memset+0x4>
	...

08006120 <_localeconv_r>:
 8006120:	4800      	ldr	r0, [pc, #0]	@ (8006124 <_localeconv_r+0x4>)
 8006122:	4770      	bx	lr
 8006124:	20000158 	.word	0x20000158

08006128 <_close_r>:
 8006128:	b538      	push	{r3, r4, r5, lr}
 800612a:	4d06      	ldr	r5, [pc, #24]	@ (8006144 <_close_r+0x1c>)
 800612c:	2300      	movs	r3, #0
 800612e:	4604      	mov	r4, r0
 8006130:	4608      	mov	r0, r1
 8006132:	602b      	str	r3, [r5, #0]
 8006134:	f7fc fa41 	bl	80025ba <_close>
 8006138:	1c43      	adds	r3, r0, #1
 800613a:	d102      	bne.n	8006142 <_close_r+0x1a>
 800613c:	682b      	ldr	r3, [r5, #0]
 800613e:	b103      	cbz	r3, 8006142 <_close_r+0x1a>
 8006140:	6023      	str	r3, [r4, #0]
 8006142:	bd38      	pop	{r3, r4, r5, pc}
 8006144:	20000524 	.word	0x20000524

08006148 <_lseek_r>:
 8006148:	b538      	push	{r3, r4, r5, lr}
 800614a:	4d07      	ldr	r5, [pc, #28]	@ (8006168 <_lseek_r+0x20>)
 800614c:	4604      	mov	r4, r0
 800614e:	4608      	mov	r0, r1
 8006150:	4611      	mov	r1, r2
 8006152:	2200      	movs	r2, #0
 8006154:	602a      	str	r2, [r5, #0]
 8006156:	461a      	mov	r2, r3
 8006158:	f7fc fa56 	bl	8002608 <_lseek>
 800615c:	1c43      	adds	r3, r0, #1
 800615e:	d102      	bne.n	8006166 <_lseek_r+0x1e>
 8006160:	682b      	ldr	r3, [r5, #0]
 8006162:	b103      	cbz	r3, 8006166 <_lseek_r+0x1e>
 8006164:	6023      	str	r3, [r4, #0]
 8006166:	bd38      	pop	{r3, r4, r5, pc}
 8006168:	20000524 	.word	0x20000524

0800616c <_read_r>:
 800616c:	b538      	push	{r3, r4, r5, lr}
 800616e:	4d07      	ldr	r5, [pc, #28]	@ (800618c <_read_r+0x20>)
 8006170:	4604      	mov	r4, r0
 8006172:	4608      	mov	r0, r1
 8006174:	4611      	mov	r1, r2
 8006176:	2200      	movs	r2, #0
 8006178:	602a      	str	r2, [r5, #0]
 800617a:	461a      	mov	r2, r3
 800617c:	f7fc f9e4 	bl	8002548 <_read>
 8006180:	1c43      	adds	r3, r0, #1
 8006182:	d102      	bne.n	800618a <_read_r+0x1e>
 8006184:	682b      	ldr	r3, [r5, #0]
 8006186:	b103      	cbz	r3, 800618a <_read_r+0x1e>
 8006188:	6023      	str	r3, [r4, #0]
 800618a:	bd38      	pop	{r3, r4, r5, pc}
 800618c:	20000524 	.word	0x20000524

08006190 <_write_r>:
 8006190:	b538      	push	{r3, r4, r5, lr}
 8006192:	4d07      	ldr	r5, [pc, #28]	@ (80061b0 <_write_r+0x20>)
 8006194:	4604      	mov	r4, r0
 8006196:	4608      	mov	r0, r1
 8006198:	4611      	mov	r1, r2
 800619a:	2200      	movs	r2, #0
 800619c:	602a      	str	r2, [r5, #0]
 800619e:	461a      	mov	r2, r3
 80061a0:	f7fc f9ef 	bl	8002582 <_write>
 80061a4:	1c43      	adds	r3, r0, #1
 80061a6:	d102      	bne.n	80061ae <_write_r+0x1e>
 80061a8:	682b      	ldr	r3, [r5, #0]
 80061aa:	b103      	cbz	r3, 80061ae <_write_r+0x1e>
 80061ac:	6023      	str	r3, [r4, #0]
 80061ae:	bd38      	pop	{r3, r4, r5, pc}
 80061b0:	20000524 	.word	0x20000524

080061b4 <__errno>:
 80061b4:	4b01      	ldr	r3, [pc, #4]	@ (80061bc <__errno+0x8>)
 80061b6:	6818      	ldr	r0, [r3, #0]
 80061b8:	4770      	bx	lr
 80061ba:	bf00      	nop
 80061bc:	20000018 	.word	0x20000018

080061c0 <__libc_init_array>:
 80061c0:	b570      	push	{r4, r5, r6, lr}
 80061c2:	4d0d      	ldr	r5, [pc, #52]	@ (80061f8 <__libc_init_array+0x38>)
 80061c4:	4c0d      	ldr	r4, [pc, #52]	@ (80061fc <__libc_init_array+0x3c>)
 80061c6:	1b64      	subs	r4, r4, r5
 80061c8:	10a4      	asrs	r4, r4, #2
 80061ca:	2600      	movs	r6, #0
 80061cc:	42a6      	cmp	r6, r4
 80061ce:	d109      	bne.n	80061e4 <__libc_init_array+0x24>
 80061d0:	4d0b      	ldr	r5, [pc, #44]	@ (8006200 <__libc_init_array+0x40>)
 80061d2:	4c0c      	ldr	r4, [pc, #48]	@ (8006204 <__libc_init_array+0x44>)
 80061d4:	f002 ffc2 	bl	800915c <_init>
 80061d8:	1b64      	subs	r4, r4, r5
 80061da:	10a4      	asrs	r4, r4, #2
 80061dc:	2600      	movs	r6, #0
 80061de:	42a6      	cmp	r6, r4
 80061e0:	d105      	bne.n	80061ee <__libc_init_array+0x2e>
 80061e2:	bd70      	pop	{r4, r5, r6, pc}
 80061e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80061e8:	4798      	blx	r3
 80061ea:	3601      	adds	r6, #1
 80061ec:	e7ee      	b.n	80061cc <__libc_init_array+0xc>
 80061ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80061f2:	4798      	blx	r3
 80061f4:	3601      	adds	r6, #1
 80061f6:	e7f2      	b.n	80061de <__libc_init_array+0x1e>
 80061f8:	080095b0 	.word	0x080095b0
 80061fc:	080095b0 	.word	0x080095b0
 8006200:	080095b0 	.word	0x080095b0
 8006204:	080095b4 	.word	0x080095b4

08006208 <__retarget_lock_init_recursive>:
 8006208:	4770      	bx	lr

0800620a <__retarget_lock_acquire_recursive>:
 800620a:	4770      	bx	lr

0800620c <__retarget_lock_release_recursive>:
 800620c:	4770      	bx	lr

0800620e <quorem>:
 800620e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006212:	6903      	ldr	r3, [r0, #16]
 8006214:	690c      	ldr	r4, [r1, #16]
 8006216:	42a3      	cmp	r3, r4
 8006218:	4607      	mov	r7, r0
 800621a:	db7e      	blt.n	800631a <quorem+0x10c>
 800621c:	3c01      	subs	r4, #1
 800621e:	f101 0814 	add.w	r8, r1, #20
 8006222:	00a3      	lsls	r3, r4, #2
 8006224:	f100 0514 	add.w	r5, r0, #20
 8006228:	9300      	str	r3, [sp, #0]
 800622a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800622e:	9301      	str	r3, [sp, #4]
 8006230:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006234:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006238:	3301      	adds	r3, #1
 800623a:	429a      	cmp	r2, r3
 800623c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006240:	fbb2 f6f3 	udiv	r6, r2, r3
 8006244:	d32e      	bcc.n	80062a4 <quorem+0x96>
 8006246:	f04f 0a00 	mov.w	sl, #0
 800624a:	46c4      	mov	ip, r8
 800624c:	46ae      	mov	lr, r5
 800624e:	46d3      	mov	fp, sl
 8006250:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006254:	b298      	uxth	r0, r3
 8006256:	fb06 a000 	mla	r0, r6, r0, sl
 800625a:	0c02      	lsrs	r2, r0, #16
 800625c:	0c1b      	lsrs	r3, r3, #16
 800625e:	fb06 2303 	mla	r3, r6, r3, r2
 8006262:	f8de 2000 	ldr.w	r2, [lr]
 8006266:	b280      	uxth	r0, r0
 8006268:	b292      	uxth	r2, r2
 800626a:	1a12      	subs	r2, r2, r0
 800626c:	445a      	add	r2, fp
 800626e:	f8de 0000 	ldr.w	r0, [lr]
 8006272:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006276:	b29b      	uxth	r3, r3
 8006278:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800627c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006280:	b292      	uxth	r2, r2
 8006282:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006286:	45e1      	cmp	r9, ip
 8006288:	f84e 2b04 	str.w	r2, [lr], #4
 800628c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006290:	d2de      	bcs.n	8006250 <quorem+0x42>
 8006292:	9b00      	ldr	r3, [sp, #0]
 8006294:	58eb      	ldr	r3, [r5, r3]
 8006296:	b92b      	cbnz	r3, 80062a4 <quorem+0x96>
 8006298:	9b01      	ldr	r3, [sp, #4]
 800629a:	3b04      	subs	r3, #4
 800629c:	429d      	cmp	r5, r3
 800629e:	461a      	mov	r2, r3
 80062a0:	d32f      	bcc.n	8006302 <quorem+0xf4>
 80062a2:	613c      	str	r4, [r7, #16]
 80062a4:	4638      	mov	r0, r7
 80062a6:	f001 f979 	bl	800759c <__mcmp>
 80062aa:	2800      	cmp	r0, #0
 80062ac:	db25      	blt.n	80062fa <quorem+0xec>
 80062ae:	4629      	mov	r1, r5
 80062b0:	2000      	movs	r0, #0
 80062b2:	f858 2b04 	ldr.w	r2, [r8], #4
 80062b6:	f8d1 c000 	ldr.w	ip, [r1]
 80062ba:	fa1f fe82 	uxth.w	lr, r2
 80062be:	fa1f f38c 	uxth.w	r3, ip
 80062c2:	eba3 030e 	sub.w	r3, r3, lr
 80062c6:	4403      	add	r3, r0
 80062c8:	0c12      	lsrs	r2, r2, #16
 80062ca:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80062ce:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80062d2:	b29b      	uxth	r3, r3
 80062d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80062d8:	45c1      	cmp	r9, r8
 80062da:	f841 3b04 	str.w	r3, [r1], #4
 80062de:	ea4f 4022 	mov.w	r0, r2, asr #16
 80062e2:	d2e6      	bcs.n	80062b2 <quorem+0xa4>
 80062e4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80062e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80062ec:	b922      	cbnz	r2, 80062f8 <quorem+0xea>
 80062ee:	3b04      	subs	r3, #4
 80062f0:	429d      	cmp	r5, r3
 80062f2:	461a      	mov	r2, r3
 80062f4:	d30b      	bcc.n	800630e <quorem+0x100>
 80062f6:	613c      	str	r4, [r7, #16]
 80062f8:	3601      	adds	r6, #1
 80062fa:	4630      	mov	r0, r6
 80062fc:	b003      	add	sp, #12
 80062fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006302:	6812      	ldr	r2, [r2, #0]
 8006304:	3b04      	subs	r3, #4
 8006306:	2a00      	cmp	r2, #0
 8006308:	d1cb      	bne.n	80062a2 <quorem+0x94>
 800630a:	3c01      	subs	r4, #1
 800630c:	e7c6      	b.n	800629c <quorem+0x8e>
 800630e:	6812      	ldr	r2, [r2, #0]
 8006310:	3b04      	subs	r3, #4
 8006312:	2a00      	cmp	r2, #0
 8006314:	d1ef      	bne.n	80062f6 <quorem+0xe8>
 8006316:	3c01      	subs	r4, #1
 8006318:	e7ea      	b.n	80062f0 <quorem+0xe2>
 800631a:	2000      	movs	r0, #0
 800631c:	e7ee      	b.n	80062fc <quorem+0xee>
	...

08006320 <_dtoa_r>:
 8006320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006324:	69c7      	ldr	r7, [r0, #28]
 8006326:	b099      	sub	sp, #100	@ 0x64
 8006328:	ed8d 0b02 	vstr	d0, [sp, #8]
 800632c:	ec55 4b10 	vmov	r4, r5, d0
 8006330:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006332:	9109      	str	r1, [sp, #36]	@ 0x24
 8006334:	4683      	mov	fp, r0
 8006336:	920e      	str	r2, [sp, #56]	@ 0x38
 8006338:	9313      	str	r3, [sp, #76]	@ 0x4c
 800633a:	b97f      	cbnz	r7, 800635c <_dtoa_r+0x3c>
 800633c:	2010      	movs	r0, #16
 800633e:	f000 fdfd 	bl	8006f3c <malloc>
 8006342:	4602      	mov	r2, r0
 8006344:	f8cb 001c 	str.w	r0, [fp, #28]
 8006348:	b920      	cbnz	r0, 8006354 <_dtoa_r+0x34>
 800634a:	4ba7      	ldr	r3, [pc, #668]	@ (80065e8 <_dtoa_r+0x2c8>)
 800634c:	21ef      	movs	r1, #239	@ 0xef
 800634e:	48a7      	ldr	r0, [pc, #668]	@ (80065ec <_dtoa_r+0x2cc>)
 8006350:	f001 fc68 	bl	8007c24 <__assert_func>
 8006354:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006358:	6007      	str	r7, [r0, #0]
 800635a:	60c7      	str	r7, [r0, #12]
 800635c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006360:	6819      	ldr	r1, [r3, #0]
 8006362:	b159      	cbz	r1, 800637c <_dtoa_r+0x5c>
 8006364:	685a      	ldr	r2, [r3, #4]
 8006366:	604a      	str	r2, [r1, #4]
 8006368:	2301      	movs	r3, #1
 800636a:	4093      	lsls	r3, r2
 800636c:	608b      	str	r3, [r1, #8]
 800636e:	4658      	mov	r0, fp
 8006370:	f000 feda 	bl	8007128 <_Bfree>
 8006374:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006378:	2200      	movs	r2, #0
 800637a:	601a      	str	r2, [r3, #0]
 800637c:	1e2b      	subs	r3, r5, #0
 800637e:	bfb9      	ittee	lt
 8006380:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006384:	9303      	strlt	r3, [sp, #12]
 8006386:	2300      	movge	r3, #0
 8006388:	6033      	strge	r3, [r6, #0]
 800638a:	9f03      	ldr	r7, [sp, #12]
 800638c:	4b98      	ldr	r3, [pc, #608]	@ (80065f0 <_dtoa_r+0x2d0>)
 800638e:	bfbc      	itt	lt
 8006390:	2201      	movlt	r2, #1
 8006392:	6032      	strlt	r2, [r6, #0]
 8006394:	43bb      	bics	r3, r7
 8006396:	d112      	bne.n	80063be <_dtoa_r+0x9e>
 8006398:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800639a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800639e:	6013      	str	r3, [r2, #0]
 80063a0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80063a4:	4323      	orrs	r3, r4
 80063a6:	f000 854d 	beq.w	8006e44 <_dtoa_r+0xb24>
 80063aa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80063ac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006604 <_dtoa_r+0x2e4>
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	f000 854f 	beq.w	8006e54 <_dtoa_r+0xb34>
 80063b6:	f10a 0303 	add.w	r3, sl, #3
 80063ba:	f000 bd49 	b.w	8006e50 <_dtoa_r+0xb30>
 80063be:	ed9d 7b02 	vldr	d7, [sp, #8]
 80063c2:	2200      	movs	r2, #0
 80063c4:	ec51 0b17 	vmov	r0, r1, d7
 80063c8:	2300      	movs	r3, #0
 80063ca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80063ce:	f7fa fb7b 	bl	8000ac8 <__aeabi_dcmpeq>
 80063d2:	4680      	mov	r8, r0
 80063d4:	b158      	cbz	r0, 80063ee <_dtoa_r+0xce>
 80063d6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80063d8:	2301      	movs	r3, #1
 80063da:	6013      	str	r3, [r2, #0]
 80063dc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80063de:	b113      	cbz	r3, 80063e6 <_dtoa_r+0xc6>
 80063e0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80063e2:	4b84      	ldr	r3, [pc, #528]	@ (80065f4 <_dtoa_r+0x2d4>)
 80063e4:	6013      	str	r3, [r2, #0]
 80063e6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006608 <_dtoa_r+0x2e8>
 80063ea:	f000 bd33 	b.w	8006e54 <_dtoa_r+0xb34>
 80063ee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80063f2:	aa16      	add	r2, sp, #88	@ 0x58
 80063f4:	a917      	add	r1, sp, #92	@ 0x5c
 80063f6:	4658      	mov	r0, fp
 80063f8:	f001 f980 	bl	80076fc <__d2b>
 80063fc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006400:	4681      	mov	r9, r0
 8006402:	2e00      	cmp	r6, #0
 8006404:	d077      	beq.n	80064f6 <_dtoa_r+0x1d6>
 8006406:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006408:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800640c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006410:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006414:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006418:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800641c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006420:	4619      	mov	r1, r3
 8006422:	2200      	movs	r2, #0
 8006424:	4b74      	ldr	r3, [pc, #464]	@ (80065f8 <_dtoa_r+0x2d8>)
 8006426:	f7f9 ff2f 	bl	8000288 <__aeabi_dsub>
 800642a:	a369      	add	r3, pc, #420	@ (adr r3, 80065d0 <_dtoa_r+0x2b0>)
 800642c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006430:	f7fa f8e2 	bl	80005f8 <__aeabi_dmul>
 8006434:	a368      	add	r3, pc, #416	@ (adr r3, 80065d8 <_dtoa_r+0x2b8>)
 8006436:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643a:	f7f9 ff27 	bl	800028c <__adddf3>
 800643e:	4604      	mov	r4, r0
 8006440:	4630      	mov	r0, r6
 8006442:	460d      	mov	r5, r1
 8006444:	f7fa f86e 	bl	8000524 <__aeabi_i2d>
 8006448:	a365      	add	r3, pc, #404	@ (adr r3, 80065e0 <_dtoa_r+0x2c0>)
 800644a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800644e:	f7fa f8d3 	bl	80005f8 <__aeabi_dmul>
 8006452:	4602      	mov	r2, r0
 8006454:	460b      	mov	r3, r1
 8006456:	4620      	mov	r0, r4
 8006458:	4629      	mov	r1, r5
 800645a:	f7f9 ff17 	bl	800028c <__adddf3>
 800645e:	4604      	mov	r4, r0
 8006460:	460d      	mov	r5, r1
 8006462:	f7fa fb79 	bl	8000b58 <__aeabi_d2iz>
 8006466:	2200      	movs	r2, #0
 8006468:	4607      	mov	r7, r0
 800646a:	2300      	movs	r3, #0
 800646c:	4620      	mov	r0, r4
 800646e:	4629      	mov	r1, r5
 8006470:	f7fa fb34 	bl	8000adc <__aeabi_dcmplt>
 8006474:	b140      	cbz	r0, 8006488 <_dtoa_r+0x168>
 8006476:	4638      	mov	r0, r7
 8006478:	f7fa f854 	bl	8000524 <__aeabi_i2d>
 800647c:	4622      	mov	r2, r4
 800647e:	462b      	mov	r3, r5
 8006480:	f7fa fb22 	bl	8000ac8 <__aeabi_dcmpeq>
 8006484:	b900      	cbnz	r0, 8006488 <_dtoa_r+0x168>
 8006486:	3f01      	subs	r7, #1
 8006488:	2f16      	cmp	r7, #22
 800648a:	d851      	bhi.n	8006530 <_dtoa_r+0x210>
 800648c:	4b5b      	ldr	r3, [pc, #364]	@ (80065fc <_dtoa_r+0x2dc>)
 800648e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006496:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800649a:	f7fa fb1f 	bl	8000adc <__aeabi_dcmplt>
 800649e:	2800      	cmp	r0, #0
 80064a0:	d048      	beq.n	8006534 <_dtoa_r+0x214>
 80064a2:	3f01      	subs	r7, #1
 80064a4:	2300      	movs	r3, #0
 80064a6:	9312      	str	r3, [sp, #72]	@ 0x48
 80064a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80064aa:	1b9b      	subs	r3, r3, r6
 80064ac:	1e5a      	subs	r2, r3, #1
 80064ae:	bf44      	itt	mi
 80064b0:	f1c3 0801 	rsbmi	r8, r3, #1
 80064b4:	2300      	movmi	r3, #0
 80064b6:	9208      	str	r2, [sp, #32]
 80064b8:	bf54      	ite	pl
 80064ba:	f04f 0800 	movpl.w	r8, #0
 80064be:	9308      	strmi	r3, [sp, #32]
 80064c0:	2f00      	cmp	r7, #0
 80064c2:	db39      	blt.n	8006538 <_dtoa_r+0x218>
 80064c4:	9b08      	ldr	r3, [sp, #32]
 80064c6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80064c8:	443b      	add	r3, r7
 80064ca:	9308      	str	r3, [sp, #32]
 80064cc:	2300      	movs	r3, #0
 80064ce:	930a      	str	r3, [sp, #40]	@ 0x28
 80064d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064d2:	2b09      	cmp	r3, #9
 80064d4:	d864      	bhi.n	80065a0 <_dtoa_r+0x280>
 80064d6:	2b05      	cmp	r3, #5
 80064d8:	bfc4      	itt	gt
 80064da:	3b04      	subgt	r3, #4
 80064dc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80064de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064e0:	f1a3 0302 	sub.w	r3, r3, #2
 80064e4:	bfcc      	ite	gt
 80064e6:	2400      	movgt	r4, #0
 80064e8:	2401      	movle	r4, #1
 80064ea:	2b03      	cmp	r3, #3
 80064ec:	d863      	bhi.n	80065b6 <_dtoa_r+0x296>
 80064ee:	e8df f003 	tbb	[pc, r3]
 80064f2:	372a      	.short	0x372a
 80064f4:	5535      	.short	0x5535
 80064f6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80064fa:	441e      	add	r6, r3
 80064fc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006500:	2b20      	cmp	r3, #32
 8006502:	bfc1      	itttt	gt
 8006504:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006508:	409f      	lslgt	r7, r3
 800650a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800650e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006512:	bfd6      	itet	le
 8006514:	f1c3 0320 	rsble	r3, r3, #32
 8006518:	ea47 0003 	orrgt.w	r0, r7, r3
 800651c:	fa04 f003 	lslle.w	r0, r4, r3
 8006520:	f7f9 fff0 	bl	8000504 <__aeabi_ui2d>
 8006524:	2201      	movs	r2, #1
 8006526:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800652a:	3e01      	subs	r6, #1
 800652c:	9214      	str	r2, [sp, #80]	@ 0x50
 800652e:	e777      	b.n	8006420 <_dtoa_r+0x100>
 8006530:	2301      	movs	r3, #1
 8006532:	e7b8      	b.n	80064a6 <_dtoa_r+0x186>
 8006534:	9012      	str	r0, [sp, #72]	@ 0x48
 8006536:	e7b7      	b.n	80064a8 <_dtoa_r+0x188>
 8006538:	427b      	negs	r3, r7
 800653a:	930a      	str	r3, [sp, #40]	@ 0x28
 800653c:	2300      	movs	r3, #0
 800653e:	eba8 0807 	sub.w	r8, r8, r7
 8006542:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006544:	e7c4      	b.n	80064d0 <_dtoa_r+0x1b0>
 8006546:	2300      	movs	r3, #0
 8006548:	930b      	str	r3, [sp, #44]	@ 0x2c
 800654a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800654c:	2b00      	cmp	r3, #0
 800654e:	dc35      	bgt.n	80065bc <_dtoa_r+0x29c>
 8006550:	2301      	movs	r3, #1
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	9307      	str	r3, [sp, #28]
 8006556:	461a      	mov	r2, r3
 8006558:	920e      	str	r2, [sp, #56]	@ 0x38
 800655a:	e00b      	b.n	8006574 <_dtoa_r+0x254>
 800655c:	2301      	movs	r3, #1
 800655e:	e7f3      	b.n	8006548 <_dtoa_r+0x228>
 8006560:	2300      	movs	r3, #0
 8006562:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006564:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006566:	18fb      	adds	r3, r7, r3
 8006568:	9300      	str	r3, [sp, #0]
 800656a:	3301      	adds	r3, #1
 800656c:	2b01      	cmp	r3, #1
 800656e:	9307      	str	r3, [sp, #28]
 8006570:	bfb8      	it	lt
 8006572:	2301      	movlt	r3, #1
 8006574:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006578:	2100      	movs	r1, #0
 800657a:	2204      	movs	r2, #4
 800657c:	f102 0514 	add.w	r5, r2, #20
 8006580:	429d      	cmp	r5, r3
 8006582:	d91f      	bls.n	80065c4 <_dtoa_r+0x2a4>
 8006584:	6041      	str	r1, [r0, #4]
 8006586:	4658      	mov	r0, fp
 8006588:	f000 fd8e 	bl	80070a8 <_Balloc>
 800658c:	4682      	mov	sl, r0
 800658e:	2800      	cmp	r0, #0
 8006590:	d13c      	bne.n	800660c <_dtoa_r+0x2ec>
 8006592:	4b1b      	ldr	r3, [pc, #108]	@ (8006600 <_dtoa_r+0x2e0>)
 8006594:	4602      	mov	r2, r0
 8006596:	f240 11af 	movw	r1, #431	@ 0x1af
 800659a:	e6d8      	b.n	800634e <_dtoa_r+0x2e>
 800659c:	2301      	movs	r3, #1
 800659e:	e7e0      	b.n	8006562 <_dtoa_r+0x242>
 80065a0:	2401      	movs	r4, #1
 80065a2:	2300      	movs	r3, #0
 80065a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80065a6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80065a8:	f04f 33ff 	mov.w	r3, #4294967295
 80065ac:	9300      	str	r3, [sp, #0]
 80065ae:	9307      	str	r3, [sp, #28]
 80065b0:	2200      	movs	r2, #0
 80065b2:	2312      	movs	r3, #18
 80065b4:	e7d0      	b.n	8006558 <_dtoa_r+0x238>
 80065b6:	2301      	movs	r3, #1
 80065b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065ba:	e7f5      	b.n	80065a8 <_dtoa_r+0x288>
 80065bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065be:	9300      	str	r3, [sp, #0]
 80065c0:	9307      	str	r3, [sp, #28]
 80065c2:	e7d7      	b.n	8006574 <_dtoa_r+0x254>
 80065c4:	3101      	adds	r1, #1
 80065c6:	0052      	lsls	r2, r2, #1
 80065c8:	e7d8      	b.n	800657c <_dtoa_r+0x25c>
 80065ca:	bf00      	nop
 80065cc:	f3af 8000 	nop.w
 80065d0:	636f4361 	.word	0x636f4361
 80065d4:	3fd287a7 	.word	0x3fd287a7
 80065d8:	8b60c8b3 	.word	0x8b60c8b3
 80065dc:	3fc68a28 	.word	0x3fc68a28
 80065e0:	509f79fb 	.word	0x509f79fb
 80065e4:	3fd34413 	.word	0x3fd34413
 80065e8:	08009245 	.word	0x08009245
 80065ec:	0800925c 	.word	0x0800925c
 80065f0:	7ff00000 	.word	0x7ff00000
 80065f4:	08009215 	.word	0x08009215
 80065f8:	3ff80000 	.word	0x3ff80000
 80065fc:	08009358 	.word	0x08009358
 8006600:	080092b4 	.word	0x080092b4
 8006604:	08009241 	.word	0x08009241
 8006608:	08009214 	.word	0x08009214
 800660c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006610:	6018      	str	r0, [r3, #0]
 8006612:	9b07      	ldr	r3, [sp, #28]
 8006614:	2b0e      	cmp	r3, #14
 8006616:	f200 80a4 	bhi.w	8006762 <_dtoa_r+0x442>
 800661a:	2c00      	cmp	r4, #0
 800661c:	f000 80a1 	beq.w	8006762 <_dtoa_r+0x442>
 8006620:	2f00      	cmp	r7, #0
 8006622:	dd33      	ble.n	800668c <_dtoa_r+0x36c>
 8006624:	4bad      	ldr	r3, [pc, #692]	@ (80068dc <_dtoa_r+0x5bc>)
 8006626:	f007 020f 	and.w	r2, r7, #15
 800662a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800662e:	ed93 7b00 	vldr	d7, [r3]
 8006632:	05f8      	lsls	r0, r7, #23
 8006634:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006638:	ea4f 1427 	mov.w	r4, r7, asr #4
 800663c:	d516      	bpl.n	800666c <_dtoa_r+0x34c>
 800663e:	4ba8      	ldr	r3, [pc, #672]	@ (80068e0 <_dtoa_r+0x5c0>)
 8006640:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006644:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006648:	f7fa f900 	bl	800084c <__aeabi_ddiv>
 800664c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006650:	f004 040f 	and.w	r4, r4, #15
 8006654:	2603      	movs	r6, #3
 8006656:	4da2      	ldr	r5, [pc, #648]	@ (80068e0 <_dtoa_r+0x5c0>)
 8006658:	b954      	cbnz	r4, 8006670 <_dtoa_r+0x350>
 800665a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800665e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006662:	f7fa f8f3 	bl	800084c <__aeabi_ddiv>
 8006666:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800666a:	e028      	b.n	80066be <_dtoa_r+0x39e>
 800666c:	2602      	movs	r6, #2
 800666e:	e7f2      	b.n	8006656 <_dtoa_r+0x336>
 8006670:	07e1      	lsls	r1, r4, #31
 8006672:	d508      	bpl.n	8006686 <_dtoa_r+0x366>
 8006674:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006678:	e9d5 2300 	ldrd	r2, r3, [r5]
 800667c:	f7f9 ffbc 	bl	80005f8 <__aeabi_dmul>
 8006680:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006684:	3601      	adds	r6, #1
 8006686:	1064      	asrs	r4, r4, #1
 8006688:	3508      	adds	r5, #8
 800668a:	e7e5      	b.n	8006658 <_dtoa_r+0x338>
 800668c:	f000 80d2 	beq.w	8006834 <_dtoa_r+0x514>
 8006690:	427c      	negs	r4, r7
 8006692:	4b92      	ldr	r3, [pc, #584]	@ (80068dc <_dtoa_r+0x5bc>)
 8006694:	4d92      	ldr	r5, [pc, #584]	@ (80068e0 <_dtoa_r+0x5c0>)
 8006696:	f004 020f 	and.w	r2, r4, #15
 800669a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800669e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066a2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80066a6:	f7f9 ffa7 	bl	80005f8 <__aeabi_dmul>
 80066aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066ae:	1124      	asrs	r4, r4, #4
 80066b0:	2300      	movs	r3, #0
 80066b2:	2602      	movs	r6, #2
 80066b4:	2c00      	cmp	r4, #0
 80066b6:	f040 80b2 	bne.w	800681e <_dtoa_r+0x4fe>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d1d3      	bne.n	8006666 <_dtoa_r+0x346>
 80066be:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80066c0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	f000 80b7 	beq.w	8006838 <_dtoa_r+0x518>
 80066ca:	4b86      	ldr	r3, [pc, #536]	@ (80068e4 <_dtoa_r+0x5c4>)
 80066cc:	2200      	movs	r2, #0
 80066ce:	4620      	mov	r0, r4
 80066d0:	4629      	mov	r1, r5
 80066d2:	f7fa fa03 	bl	8000adc <__aeabi_dcmplt>
 80066d6:	2800      	cmp	r0, #0
 80066d8:	f000 80ae 	beq.w	8006838 <_dtoa_r+0x518>
 80066dc:	9b07      	ldr	r3, [sp, #28]
 80066de:	2b00      	cmp	r3, #0
 80066e0:	f000 80aa 	beq.w	8006838 <_dtoa_r+0x518>
 80066e4:	9b00      	ldr	r3, [sp, #0]
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	dd37      	ble.n	800675a <_dtoa_r+0x43a>
 80066ea:	1e7b      	subs	r3, r7, #1
 80066ec:	9304      	str	r3, [sp, #16]
 80066ee:	4620      	mov	r0, r4
 80066f0:	4b7d      	ldr	r3, [pc, #500]	@ (80068e8 <_dtoa_r+0x5c8>)
 80066f2:	2200      	movs	r2, #0
 80066f4:	4629      	mov	r1, r5
 80066f6:	f7f9 ff7f 	bl	80005f8 <__aeabi_dmul>
 80066fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066fe:	9c00      	ldr	r4, [sp, #0]
 8006700:	3601      	adds	r6, #1
 8006702:	4630      	mov	r0, r6
 8006704:	f7f9 ff0e 	bl	8000524 <__aeabi_i2d>
 8006708:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800670c:	f7f9 ff74 	bl	80005f8 <__aeabi_dmul>
 8006710:	4b76      	ldr	r3, [pc, #472]	@ (80068ec <_dtoa_r+0x5cc>)
 8006712:	2200      	movs	r2, #0
 8006714:	f7f9 fdba 	bl	800028c <__adddf3>
 8006718:	4605      	mov	r5, r0
 800671a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800671e:	2c00      	cmp	r4, #0
 8006720:	f040 808d 	bne.w	800683e <_dtoa_r+0x51e>
 8006724:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006728:	4b71      	ldr	r3, [pc, #452]	@ (80068f0 <_dtoa_r+0x5d0>)
 800672a:	2200      	movs	r2, #0
 800672c:	f7f9 fdac 	bl	8000288 <__aeabi_dsub>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006738:	462a      	mov	r2, r5
 800673a:	4633      	mov	r3, r6
 800673c:	f7fa f9ec 	bl	8000b18 <__aeabi_dcmpgt>
 8006740:	2800      	cmp	r0, #0
 8006742:	f040 828b 	bne.w	8006c5c <_dtoa_r+0x93c>
 8006746:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800674a:	462a      	mov	r2, r5
 800674c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006750:	f7fa f9c4 	bl	8000adc <__aeabi_dcmplt>
 8006754:	2800      	cmp	r0, #0
 8006756:	f040 8128 	bne.w	80069aa <_dtoa_r+0x68a>
 800675a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800675e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006762:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006764:	2b00      	cmp	r3, #0
 8006766:	f2c0 815a 	blt.w	8006a1e <_dtoa_r+0x6fe>
 800676a:	2f0e      	cmp	r7, #14
 800676c:	f300 8157 	bgt.w	8006a1e <_dtoa_r+0x6fe>
 8006770:	4b5a      	ldr	r3, [pc, #360]	@ (80068dc <_dtoa_r+0x5bc>)
 8006772:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006776:	ed93 7b00 	vldr	d7, [r3]
 800677a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800677c:	2b00      	cmp	r3, #0
 800677e:	ed8d 7b00 	vstr	d7, [sp]
 8006782:	da03      	bge.n	800678c <_dtoa_r+0x46c>
 8006784:	9b07      	ldr	r3, [sp, #28]
 8006786:	2b00      	cmp	r3, #0
 8006788:	f340 8101 	ble.w	800698e <_dtoa_r+0x66e>
 800678c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006790:	4656      	mov	r6, sl
 8006792:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006796:	4620      	mov	r0, r4
 8006798:	4629      	mov	r1, r5
 800679a:	f7fa f857 	bl	800084c <__aeabi_ddiv>
 800679e:	f7fa f9db 	bl	8000b58 <__aeabi_d2iz>
 80067a2:	4680      	mov	r8, r0
 80067a4:	f7f9 febe 	bl	8000524 <__aeabi_i2d>
 80067a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067ac:	f7f9 ff24 	bl	80005f8 <__aeabi_dmul>
 80067b0:	4602      	mov	r2, r0
 80067b2:	460b      	mov	r3, r1
 80067b4:	4620      	mov	r0, r4
 80067b6:	4629      	mov	r1, r5
 80067b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80067bc:	f7f9 fd64 	bl	8000288 <__aeabi_dsub>
 80067c0:	f806 4b01 	strb.w	r4, [r6], #1
 80067c4:	9d07      	ldr	r5, [sp, #28]
 80067c6:	eba6 040a 	sub.w	r4, r6, sl
 80067ca:	42a5      	cmp	r5, r4
 80067cc:	4602      	mov	r2, r0
 80067ce:	460b      	mov	r3, r1
 80067d0:	f040 8117 	bne.w	8006a02 <_dtoa_r+0x6e2>
 80067d4:	f7f9 fd5a 	bl	800028c <__adddf3>
 80067d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067dc:	4604      	mov	r4, r0
 80067de:	460d      	mov	r5, r1
 80067e0:	f7fa f99a 	bl	8000b18 <__aeabi_dcmpgt>
 80067e4:	2800      	cmp	r0, #0
 80067e6:	f040 80f9 	bne.w	80069dc <_dtoa_r+0x6bc>
 80067ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067ee:	4620      	mov	r0, r4
 80067f0:	4629      	mov	r1, r5
 80067f2:	f7fa f969 	bl	8000ac8 <__aeabi_dcmpeq>
 80067f6:	b118      	cbz	r0, 8006800 <_dtoa_r+0x4e0>
 80067f8:	f018 0f01 	tst.w	r8, #1
 80067fc:	f040 80ee 	bne.w	80069dc <_dtoa_r+0x6bc>
 8006800:	4649      	mov	r1, r9
 8006802:	4658      	mov	r0, fp
 8006804:	f000 fc90 	bl	8007128 <_Bfree>
 8006808:	2300      	movs	r3, #0
 800680a:	7033      	strb	r3, [r6, #0]
 800680c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800680e:	3701      	adds	r7, #1
 8006810:	601f      	str	r7, [r3, #0]
 8006812:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006814:	2b00      	cmp	r3, #0
 8006816:	f000 831d 	beq.w	8006e54 <_dtoa_r+0xb34>
 800681a:	601e      	str	r6, [r3, #0]
 800681c:	e31a      	b.n	8006e54 <_dtoa_r+0xb34>
 800681e:	07e2      	lsls	r2, r4, #31
 8006820:	d505      	bpl.n	800682e <_dtoa_r+0x50e>
 8006822:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006826:	f7f9 fee7 	bl	80005f8 <__aeabi_dmul>
 800682a:	3601      	adds	r6, #1
 800682c:	2301      	movs	r3, #1
 800682e:	1064      	asrs	r4, r4, #1
 8006830:	3508      	adds	r5, #8
 8006832:	e73f      	b.n	80066b4 <_dtoa_r+0x394>
 8006834:	2602      	movs	r6, #2
 8006836:	e742      	b.n	80066be <_dtoa_r+0x39e>
 8006838:	9c07      	ldr	r4, [sp, #28]
 800683a:	9704      	str	r7, [sp, #16]
 800683c:	e761      	b.n	8006702 <_dtoa_r+0x3e2>
 800683e:	4b27      	ldr	r3, [pc, #156]	@ (80068dc <_dtoa_r+0x5bc>)
 8006840:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006842:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006846:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800684a:	4454      	add	r4, sl
 800684c:	2900      	cmp	r1, #0
 800684e:	d053      	beq.n	80068f8 <_dtoa_r+0x5d8>
 8006850:	4928      	ldr	r1, [pc, #160]	@ (80068f4 <_dtoa_r+0x5d4>)
 8006852:	2000      	movs	r0, #0
 8006854:	f7f9 fffa 	bl	800084c <__aeabi_ddiv>
 8006858:	4633      	mov	r3, r6
 800685a:	462a      	mov	r2, r5
 800685c:	f7f9 fd14 	bl	8000288 <__aeabi_dsub>
 8006860:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006864:	4656      	mov	r6, sl
 8006866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800686a:	f7fa f975 	bl	8000b58 <__aeabi_d2iz>
 800686e:	4605      	mov	r5, r0
 8006870:	f7f9 fe58 	bl	8000524 <__aeabi_i2d>
 8006874:	4602      	mov	r2, r0
 8006876:	460b      	mov	r3, r1
 8006878:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800687c:	f7f9 fd04 	bl	8000288 <__aeabi_dsub>
 8006880:	3530      	adds	r5, #48	@ 0x30
 8006882:	4602      	mov	r2, r0
 8006884:	460b      	mov	r3, r1
 8006886:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800688a:	f806 5b01 	strb.w	r5, [r6], #1
 800688e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006892:	f7fa f923 	bl	8000adc <__aeabi_dcmplt>
 8006896:	2800      	cmp	r0, #0
 8006898:	d171      	bne.n	800697e <_dtoa_r+0x65e>
 800689a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800689e:	4911      	ldr	r1, [pc, #68]	@ (80068e4 <_dtoa_r+0x5c4>)
 80068a0:	2000      	movs	r0, #0
 80068a2:	f7f9 fcf1 	bl	8000288 <__aeabi_dsub>
 80068a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80068aa:	f7fa f917 	bl	8000adc <__aeabi_dcmplt>
 80068ae:	2800      	cmp	r0, #0
 80068b0:	f040 8095 	bne.w	80069de <_dtoa_r+0x6be>
 80068b4:	42a6      	cmp	r6, r4
 80068b6:	f43f af50 	beq.w	800675a <_dtoa_r+0x43a>
 80068ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80068be:	4b0a      	ldr	r3, [pc, #40]	@ (80068e8 <_dtoa_r+0x5c8>)
 80068c0:	2200      	movs	r2, #0
 80068c2:	f7f9 fe99 	bl	80005f8 <__aeabi_dmul>
 80068c6:	4b08      	ldr	r3, [pc, #32]	@ (80068e8 <_dtoa_r+0x5c8>)
 80068c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80068cc:	2200      	movs	r2, #0
 80068ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80068d2:	f7f9 fe91 	bl	80005f8 <__aeabi_dmul>
 80068d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80068da:	e7c4      	b.n	8006866 <_dtoa_r+0x546>
 80068dc:	08009358 	.word	0x08009358
 80068e0:	08009330 	.word	0x08009330
 80068e4:	3ff00000 	.word	0x3ff00000
 80068e8:	40240000 	.word	0x40240000
 80068ec:	401c0000 	.word	0x401c0000
 80068f0:	40140000 	.word	0x40140000
 80068f4:	3fe00000 	.word	0x3fe00000
 80068f8:	4631      	mov	r1, r6
 80068fa:	4628      	mov	r0, r5
 80068fc:	f7f9 fe7c 	bl	80005f8 <__aeabi_dmul>
 8006900:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006904:	9415      	str	r4, [sp, #84]	@ 0x54
 8006906:	4656      	mov	r6, sl
 8006908:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800690c:	f7fa f924 	bl	8000b58 <__aeabi_d2iz>
 8006910:	4605      	mov	r5, r0
 8006912:	f7f9 fe07 	bl	8000524 <__aeabi_i2d>
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800691e:	f7f9 fcb3 	bl	8000288 <__aeabi_dsub>
 8006922:	3530      	adds	r5, #48	@ 0x30
 8006924:	f806 5b01 	strb.w	r5, [r6], #1
 8006928:	4602      	mov	r2, r0
 800692a:	460b      	mov	r3, r1
 800692c:	42a6      	cmp	r6, r4
 800692e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006932:	f04f 0200 	mov.w	r2, #0
 8006936:	d124      	bne.n	8006982 <_dtoa_r+0x662>
 8006938:	4bac      	ldr	r3, [pc, #688]	@ (8006bec <_dtoa_r+0x8cc>)
 800693a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800693e:	f7f9 fca5 	bl	800028c <__adddf3>
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800694a:	f7fa f8e5 	bl	8000b18 <__aeabi_dcmpgt>
 800694e:	2800      	cmp	r0, #0
 8006950:	d145      	bne.n	80069de <_dtoa_r+0x6be>
 8006952:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006956:	49a5      	ldr	r1, [pc, #660]	@ (8006bec <_dtoa_r+0x8cc>)
 8006958:	2000      	movs	r0, #0
 800695a:	f7f9 fc95 	bl	8000288 <__aeabi_dsub>
 800695e:	4602      	mov	r2, r0
 8006960:	460b      	mov	r3, r1
 8006962:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006966:	f7fa f8b9 	bl	8000adc <__aeabi_dcmplt>
 800696a:	2800      	cmp	r0, #0
 800696c:	f43f aef5 	beq.w	800675a <_dtoa_r+0x43a>
 8006970:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006972:	1e73      	subs	r3, r6, #1
 8006974:	9315      	str	r3, [sp, #84]	@ 0x54
 8006976:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800697a:	2b30      	cmp	r3, #48	@ 0x30
 800697c:	d0f8      	beq.n	8006970 <_dtoa_r+0x650>
 800697e:	9f04      	ldr	r7, [sp, #16]
 8006980:	e73e      	b.n	8006800 <_dtoa_r+0x4e0>
 8006982:	4b9b      	ldr	r3, [pc, #620]	@ (8006bf0 <_dtoa_r+0x8d0>)
 8006984:	f7f9 fe38 	bl	80005f8 <__aeabi_dmul>
 8006988:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800698c:	e7bc      	b.n	8006908 <_dtoa_r+0x5e8>
 800698e:	d10c      	bne.n	80069aa <_dtoa_r+0x68a>
 8006990:	4b98      	ldr	r3, [pc, #608]	@ (8006bf4 <_dtoa_r+0x8d4>)
 8006992:	2200      	movs	r2, #0
 8006994:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006998:	f7f9 fe2e 	bl	80005f8 <__aeabi_dmul>
 800699c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80069a0:	f7fa f8b0 	bl	8000b04 <__aeabi_dcmpge>
 80069a4:	2800      	cmp	r0, #0
 80069a6:	f000 8157 	beq.w	8006c58 <_dtoa_r+0x938>
 80069aa:	2400      	movs	r4, #0
 80069ac:	4625      	mov	r5, r4
 80069ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80069b0:	43db      	mvns	r3, r3
 80069b2:	9304      	str	r3, [sp, #16]
 80069b4:	4656      	mov	r6, sl
 80069b6:	2700      	movs	r7, #0
 80069b8:	4621      	mov	r1, r4
 80069ba:	4658      	mov	r0, fp
 80069bc:	f000 fbb4 	bl	8007128 <_Bfree>
 80069c0:	2d00      	cmp	r5, #0
 80069c2:	d0dc      	beq.n	800697e <_dtoa_r+0x65e>
 80069c4:	b12f      	cbz	r7, 80069d2 <_dtoa_r+0x6b2>
 80069c6:	42af      	cmp	r7, r5
 80069c8:	d003      	beq.n	80069d2 <_dtoa_r+0x6b2>
 80069ca:	4639      	mov	r1, r7
 80069cc:	4658      	mov	r0, fp
 80069ce:	f000 fbab 	bl	8007128 <_Bfree>
 80069d2:	4629      	mov	r1, r5
 80069d4:	4658      	mov	r0, fp
 80069d6:	f000 fba7 	bl	8007128 <_Bfree>
 80069da:	e7d0      	b.n	800697e <_dtoa_r+0x65e>
 80069dc:	9704      	str	r7, [sp, #16]
 80069de:	4633      	mov	r3, r6
 80069e0:	461e      	mov	r6, r3
 80069e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80069e6:	2a39      	cmp	r2, #57	@ 0x39
 80069e8:	d107      	bne.n	80069fa <_dtoa_r+0x6da>
 80069ea:	459a      	cmp	sl, r3
 80069ec:	d1f8      	bne.n	80069e0 <_dtoa_r+0x6c0>
 80069ee:	9a04      	ldr	r2, [sp, #16]
 80069f0:	3201      	adds	r2, #1
 80069f2:	9204      	str	r2, [sp, #16]
 80069f4:	2230      	movs	r2, #48	@ 0x30
 80069f6:	f88a 2000 	strb.w	r2, [sl]
 80069fa:	781a      	ldrb	r2, [r3, #0]
 80069fc:	3201      	adds	r2, #1
 80069fe:	701a      	strb	r2, [r3, #0]
 8006a00:	e7bd      	b.n	800697e <_dtoa_r+0x65e>
 8006a02:	4b7b      	ldr	r3, [pc, #492]	@ (8006bf0 <_dtoa_r+0x8d0>)
 8006a04:	2200      	movs	r2, #0
 8006a06:	f7f9 fdf7 	bl	80005f8 <__aeabi_dmul>
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	4604      	mov	r4, r0
 8006a10:	460d      	mov	r5, r1
 8006a12:	f7fa f859 	bl	8000ac8 <__aeabi_dcmpeq>
 8006a16:	2800      	cmp	r0, #0
 8006a18:	f43f aebb 	beq.w	8006792 <_dtoa_r+0x472>
 8006a1c:	e6f0      	b.n	8006800 <_dtoa_r+0x4e0>
 8006a1e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006a20:	2a00      	cmp	r2, #0
 8006a22:	f000 80db 	beq.w	8006bdc <_dtoa_r+0x8bc>
 8006a26:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a28:	2a01      	cmp	r2, #1
 8006a2a:	f300 80bf 	bgt.w	8006bac <_dtoa_r+0x88c>
 8006a2e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006a30:	2a00      	cmp	r2, #0
 8006a32:	f000 80b7 	beq.w	8006ba4 <_dtoa_r+0x884>
 8006a36:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006a3a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006a3c:	4646      	mov	r6, r8
 8006a3e:	9a08      	ldr	r2, [sp, #32]
 8006a40:	2101      	movs	r1, #1
 8006a42:	441a      	add	r2, r3
 8006a44:	4658      	mov	r0, fp
 8006a46:	4498      	add	r8, r3
 8006a48:	9208      	str	r2, [sp, #32]
 8006a4a:	f000 fc21 	bl	8007290 <__i2b>
 8006a4e:	4605      	mov	r5, r0
 8006a50:	b15e      	cbz	r6, 8006a6a <_dtoa_r+0x74a>
 8006a52:	9b08      	ldr	r3, [sp, #32]
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	dd08      	ble.n	8006a6a <_dtoa_r+0x74a>
 8006a58:	42b3      	cmp	r3, r6
 8006a5a:	9a08      	ldr	r2, [sp, #32]
 8006a5c:	bfa8      	it	ge
 8006a5e:	4633      	movge	r3, r6
 8006a60:	eba8 0803 	sub.w	r8, r8, r3
 8006a64:	1af6      	subs	r6, r6, r3
 8006a66:	1ad3      	subs	r3, r2, r3
 8006a68:	9308      	str	r3, [sp, #32]
 8006a6a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a6c:	b1f3      	cbz	r3, 8006aac <_dtoa_r+0x78c>
 8006a6e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 80b7 	beq.w	8006be4 <_dtoa_r+0x8c4>
 8006a76:	b18c      	cbz	r4, 8006a9c <_dtoa_r+0x77c>
 8006a78:	4629      	mov	r1, r5
 8006a7a:	4622      	mov	r2, r4
 8006a7c:	4658      	mov	r0, fp
 8006a7e:	f000 fcc7 	bl	8007410 <__pow5mult>
 8006a82:	464a      	mov	r2, r9
 8006a84:	4601      	mov	r1, r0
 8006a86:	4605      	mov	r5, r0
 8006a88:	4658      	mov	r0, fp
 8006a8a:	f000 fc17 	bl	80072bc <__multiply>
 8006a8e:	4649      	mov	r1, r9
 8006a90:	9004      	str	r0, [sp, #16]
 8006a92:	4658      	mov	r0, fp
 8006a94:	f000 fb48 	bl	8007128 <_Bfree>
 8006a98:	9b04      	ldr	r3, [sp, #16]
 8006a9a:	4699      	mov	r9, r3
 8006a9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a9e:	1b1a      	subs	r2, r3, r4
 8006aa0:	d004      	beq.n	8006aac <_dtoa_r+0x78c>
 8006aa2:	4649      	mov	r1, r9
 8006aa4:	4658      	mov	r0, fp
 8006aa6:	f000 fcb3 	bl	8007410 <__pow5mult>
 8006aaa:	4681      	mov	r9, r0
 8006aac:	2101      	movs	r1, #1
 8006aae:	4658      	mov	r0, fp
 8006ab0:	f000 fbee 	bl	8007290 <__i2b>
 8006ab4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006ab6:	4604      	mov	r4, r0
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 81cf 	beq.w	8006e5c <_dtoa_r+0xb3c>
 8006abe:	461a      	mov	r2, r3
 8006ac0:	4601      	mov	r1, r0
 8006ac2:	4658      	mov	r0, fp
 8006ac4:	f000 fca4 	bl	8007410 <__pow5mult>
 8006ac8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006aca:	2b01      	cmp	r3, #1
 8006acc:	4604      	mov	r4, r0
 8006ace:	f300 8095 	bgt.w	8006bfc <_dtoa_r+0x8dc>
 8006ad2:	9b02      	ldr	r3, [sp, #8]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	f040 8087 	bne.w	8006be8 <_dtoa_r+0x8c8>
 8006ada:	9b03      	ldr	r3, [sp, #12]
 8006adc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	f040 8089 	bne.w	8006bf8 <_dtoa_r+0x8d8>
 8006ae6:	9b03      	ldr	r3, [sp, #12]
 8006ae8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006aec:	0d1b      	lsrs	r3, r3, #20
 8006aee:	051b      	lsls	r3, r3, #20
 8006af0:	b12b      	cbz	r3, 8006afe <_dtoa_r+0x7de>
 8006af2:	9b08      	ldr	r3, [sp, #32]
 8006af4:	3301      	adds	r3, #1
 8006af6:	9308      	str	r3, [sp, #32]
 8006af8:	f108 0801 	add.w	r8, r8, #1
 8006afc:	2301      	movs	r3, #1
 8006afe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b00:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	f000 81b0 	beq.w	8006e68 <_dtoa_r+0xb48>
 8006b08:	6923      	ldr	r3, [r4, #16]
 8006b0a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006b0e:	6918      	ldr	r0, [r3, #16]
 8006b10:	f000 fb72 	bl	80071f8 <__hi0bits>
 8006b14:	f1c0 0020 	rsb	r0, r0, #32
 8006b18:	9b08      	ldr	r3, [sp, #32]
 8006b1a:	4418      	add	r0, r3
 8006b1c:	f010 001f 	ands.w	r0, r0, #31
 8006b20:	d077      	beq.n	8006c12 <_dtoa_r+0x8f2>
 8006b22:	f1c0 0320 	rsb	r3, r0, #32
 8006b26:	2b04      	cmp	r3, #4
 8006b28:	dd6b      	ble.n	8006c02 <_dtoa_r+0x8e2>
 8006b2a:	9b08      	ldr	r3, [sp, #32]
 8006b2c:	f1c0 001c 	rsb	r0, r0, #28
 8006b30:	4403      	add	r3, r0
 8006b32:	4480      	add	r8, r0
 8006b34:	4406      	add	r6, r0
 8006b36:	9308      	str	r3, [sp, #32]
 8006b38:	f1b8 0f00 	cmp.w	r8, #0
 8006b3c:	dd05      	ble.n	8006b4a <_dtoa_r+0x82a>
 8006b3e:	4649      	mov	r1, r9
 8006b40:	4642      	mov	r2, r8
 8006b42:	4658      	mov	r0, fp
 8006b44:	f000 fcbe 	bl	80074c4 <__lshift>
 8006b48:	4681      	mov	r9, r0
 8006b4a:	9b08      	ldr	r3, [sp, #32]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	dd05      	ble.n	8006b5c <_dtoa_r+0x83c>
 8006b50:	4621      	mov	r1, r4
 8006b52:	461a      	mov	r2, r3
 8006b54:	4658      	mov	r0, fp
 8006b56:	f000 fcb5 	bl	80074c4 <__lshift>
 8006b5a:	4604      	mov	r4, r0
 8006b5c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d059      	beq.n	8006c16 <_dtoa_r+0x8f6>
 8006b62:	4621      	mov	r1, r4
 8006b64:	4648      	mov	r0, r9
 8006b66:	f000 fd19 	bl	800759c <__mcmp>
 8006b6a:	2800      	cmp	r0, #0
 8006b6c:	da53      	bge.n	8006c16 <_dtoa_r+0x8f6>
 8006b6e:	1e7b      	subs	r3, r7, #1
 8006b70:	9304      	str	r3, [sp, #16]
 8006b72:	4649      	mov	r1, r9
 8006b74:	2300      	movs	r3, #0
 8006b76:	220a      	movs	r2, #10
 8006b78:	4658      	mov	r0, fp
 8006b7a:	f000 faf7 	bl	800716c <__multadd>
 8006b7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006b80:	4681      	mov	r9, r0
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	f000 8172 	beq.w	8006e6c <_dtoa_r+0xb4c>
 8006b88:	2300      	movs	r3, #0
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	220a      	movs	r2, #10
 8006b8e:	4658      	mov	r0, fp
 8006b90:	f000 faec 	bl	800716c <__multadd>
 8006b94:	9b00      	ldr	r3, [sp, #0]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	4605      	mov	r5, r0
 8006b9a:	dc67      	bgt.n	8006c6c <_dtoa_r+0x94c>
 8006b9c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b9e:	2b02      	cmp	r3, #2
 8006ba0:	dc41      	bgt.n	8006c26 <_dtoa_r+0x906>
 8006ba2:	e063      	b.n	8006c6c <_dtoa_r+0x94c>
 8006ba4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006ba6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006baa:	e746      	b.n	8006a3a <_dtoa_r+0x71a>
 8006bac:	9b07      	ldr	r3, [sp, #28]
 8006bae:	1e5c      	subs	r4, r3, #1
 8006bb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006bb2:	42a3      	cmp	r3, r4
 8006bb4:	bfbf      	itttt	lt
 8006bb6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006bb8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006bba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006bbc:	1ae3      	sublt	r3, r4, r3
 8006bbe:	bfb4      	ite	lt
 8006bc0:	18d2      	addlt	r2, r2, r3
 8006bc2:	1b1c      	subge	r4, r3, r4
 8006bc4:	9b07      	ldr	r3, [sp, #28]
 8006bc6:	bfbc      	itt	lt
 8006bc8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006bca:	2400      	movlt	r4, #0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	bfb5      	itete	lt
 8006bd0:	eba8 0603 	sublt.w	r6, r8, r3
 8006bd4:	9b07      	ldrge	r3, [sp, #28]
 8006bd6:	2300      	movlt	r3, #0
 8006bd8:	4646      	movge	r6, r8
 8006bda:	e730      	b.n	8006a3e <_dtoa_r+0x71e>
 8006bdc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006bde:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006be0:	4646      	mov	r6, r8
 8006be2:	e735      	b.n	8006a50 <_dtoa_r+0x730>
 8006be4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006be6:	e75c      	b.n	8006aa2 <_dtoa_r+0x782>
 8006be8:	2300      	movs	r3, #0
 8006bea:	e788      	b.n	8006afe <_dtoa_r+0x7de>
 8006bec:	3fe00000 	.word	0x3fe00000
 8006bf0:	40240000 	.word	0x40240000
 8006bf4:	40140000 	.word	0x40140000
 8006bf8:	9b02      	ldr	r3, [sp, #8]
 8006bfa:	e780      	b.n	8006afe <_dtoa_r+0x7de>
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c00:	e782      	b.n	8006b08 <_dtoa_r+0x7e8>
 8006c02:	d099      	beq.n	8006b38 <_dtoa_r+0x818>
 8006c04:	9a08      	ldr	r2, [sp, #32]
 8006c06:	331c      	adds	r3, #28
 8006c08:	441a      	add	r2, r3
 8006c0a:	4498      	add	r8, r3
 8006c0c:	441e      	add	r6, r3
 8006c0e:	9208      	str	r2, [sp, #32]
 8006c10:	e792      	b.n	8006b38 <_dtoa_r+0x818>
 8006c12:	4603      	mov	r3, r0
 8006c14:	e7f6      	b.n	8006c04 <_dtoa_r+0x8e4>
 8006c16:	9b07      	ldr	r3, [sp, #28]
 8006c18:	9704      	str	r7, [sp, #16]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	dc20      	bgt.n	8006c60 <_dtoa_r+0x940>
 8006c1e:	9300      	str	r3, [sp, #0]
 8006c20:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	dd1e      	ble.n	8006c64 <_dtoa_r+0x944>
 8006c26:	9b00      	ldr	r3, [sp, #0]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f47f aec0 	bne.w	80069ae <_dtoa_r+0x68e>
 8006c2e:	4621      	mov	r1, r4
 8006c30:	2205      	movs	r2, #5
 8006c32:	4658      	mov	r0, fp
 8006c34:	f000 fa9a 	bl	800716c <__multadd>
 8006c38:	4601      	mov	r1, r0
 8006c3a:	4604      	mov	r4, r0
 8006c3c:	4648      	mov	r0, r9
 8006c3e:	f000 fcad 	bl	800759c <__mcmp>
 8006c42:	2800      	cmp	r0, #0
 8006c44:	f77f aeb3 	ble.w	80069ae <_dtoa_r+0x68e>
 8006c48:	4656      	mov	r6, sl
 8006c4a:	2331      	movs	r3, #49	@ 0x31
 8006c4c:	f806 3b01 	strb.w	r3, [r6], #1
 8006c50:	9b04      	ldr	r3, [sp, #16]
 8006c52:	3301      	adds	r3, #1
 8006c54:	9304      	str	r3, [sp, #16]
 8006c56:	e6ae      	b.n	80069b6 <_dtoa_r+0x696>
 8006c58:	9c07      	ldr	r4, [sp, #28]
 8006c5a:	9704      	str	r7, [sp, #16]
 8006c5c:	4625      	mov	r5, r4
 8006c5e:	e7f3      	b.n	8006c48 <_dtoa_r+0x928>
 8006c60:	9b07      	ldr	r3, [sp, #28]
 8006c62:	9300      	str	r3, [sp, #0]
 8006c64:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	f000 8104 	beq.w	8006e74 <_dtoa_r+0xb54>
 8006c6c:	2e00      	cmp	r6, #0
 8006c6e:	dd05      	ble.n	8006c7c <_dtoa_r+0x95c>
 8006c70:	4629      	mov	r1, r5
 8006c72:	4632      	mov	r2, r6
 8006c74:	4658      	mov	r0, fp
 8006c76:	f000 fc25 	bl	80074c4 <__lshift>
 8006c7a:	4605      	mov	r5, r0
 8006c7c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d05a      	beq.n	8006d38 <_dtoa_r+0xa18>
 8006c82:	6869      	ldr	r1, [r5, #4]
 8006c84:	4658      	mov	r0, fp
 8006c86:	f000 fa0f 	bl	80070a8 <_Balloc>
 8006c8a:	4606      	mov	r6, r0
 8006c8c:	b928      	cbnz	r0, 8006c9a <_dtoa_r+0x97a>
 8006c8e:	4b84      	ldr	r3, [pc, #528]	@ (8006ea0 <_dtoa_r+0xb80>)
 8006c90:	4602      	mov	r2, r0
 8006c92:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006c96:	f7ff bb5a 	b.w	800634e <_dtoa_r+0x2e>
 8006c9a:	692a      	ldr	r2, [r5, #16]
 8006c9c:	3202      	adds	r2, #2
 8006c9e:	0092      	lsls	r2, r2, #2
 8006ca0:	f105 010c 	add.w	r1, r5, #12
 8006ca4:	300c      	adds	r0, #12
 8006ca6:	f000 ffaf 	bl	8007c08 <memcpy>
 8006caa:	2201      	movs	r2, #1
 8006cac:	4631      	mov	r1, r6
 8006cae:	4658      	mov	r0, fp
 8006cb0:	f000 fc08 	bl	80074c4 <__lshift>
 8006cb4:	f10a 0301 	add.w	r3, sl, #1
 8006cb8:	9307      	str	r3, [sp, #28]
 8006cba:	9b00      	ldr	r3, [sp, #0]
 8006cbc:	4453      	add	r3, sl
 8006cbe:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006cc0:	9b02      	ldr	r3, [sp, #8]
 8006cc2:	f003 0301 	and.w	r3, r3, #1
 8006cc6:	462f      	mov	r7, r5
 8006cc8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006cca:	4605      	mov	r5, r0
 8006ccc:	9b07      	ldr	r3, [sp, #28]
 8006cce:	4621      	mov	r1, r4
 8006cd0:	3b01      	subs	r3, #1
 8006cd2:	4648      	mov	r0, r9
 8006cd4:	9300      	str	r3, [sp, #0]
 8006cd6:	f7ff fa9a 	bl	800620e <quorem>
 8006cda:	4639      	mov	r1, r7
 8006cdc:	9002      	str	r0, [sp, #8]
 8006cde:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006ce2:	4648      	mov	r0, r9
 8006ce4:	f000 fc5a 	bl	800759c <__mcmp>
 8006ce8:	462a      	mov	r2, r5
 8006cea:	9008      	str	r0, [sp, #32]
 8006cec:	4621      	mov	r1, r4
 8006cee:	4658      	mov	r0, fp
 8006cf0:	f000 fc70 	bl	80075d4 <__mdiff>
 8006cf4:	68c2      	ldr	r2, [r0, #12]
 8006cf6:	4606      	mov	r6, r0
 8006cf8:	bb02      	cbnz	r2, 8006d3c <_dtoa_r+0xa1c>
 8006cfa:	4601      	mov	r1, r0
 8006cfc:	4648      	mov	r0, r9
 8006cfe:	f000 fc4d 	bl	800759c <__mcmp>
 8006d02:	4602      	mov	r2, r0
 8006d04:	4631      	mov	r1, r6
 8006d06:	4658      	mov	r0, fp
 8006d08:	920e      	str	r2, [sp, #56]	@ 0x38
 8006d0a:	f000 fa0d 	bl	8007128 <_Bfree>
 8006d0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006d10:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006d12:	9e07      	ldr	r6, [sp, #28]
 8006d14:	ea43 0102 	orr.w	r1, r3, r2
 8006d18:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d1a:	4319      	orrs	r1, r3
 8006d1c:	d110      	bne.n	8006d40 <_dtoa_r+0xa20>
 8006d1e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006d22:	d029      	beq.n	8006d78 <_dtoa_r+0xa58>
 8006d24:	9b08      	ldr	r3, [sp, #32]
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	dd02      	ble.n	8006d30 <_dtoa_r+0xa10>
 8006d2a:	9b02      	ldr	r3, [sp, #8]
 8006d2c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006d30:	9b00      	ldr	r3, [sp, #0]
 8006d32:	f883 8000 	strb.w	r8, [r3]
 8006d36:	e63f      	b.n	80069b8 <_dtoa_r+0x698>
 8006d38:	4628      	mov	r0, r5
 8006d3a:	e7bb      	b.n	8006cb4 <_dtoa_r+0x994>
 8006d3c:	2201      	movs	r2, #1
 8006d3e:	e7e1      	b.n	8006d04 <_dtoa_r+0x9e4>
 8006d40:	9b08      	ldr	r3, [sp, #32]
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	db04      	blt.n	8006d50 <_dtoa_r+0xa30>
 8006d46:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006d48:	430b      	orrs	r3, r1
 8006d4a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006d4c:	430b      	orrs	r3, r1
 8006d4e:	d120      	bne.n	8006d92 <_dtoa_r+0xa72>
 8006d50:	2a00      	cmp	r2, #0
 8006d52:	dded      	ble.n	8006d30 <_dtoa_r+0xa10>
 8006d54:	4649      	mov	r1, r9
 8006d56:	2201      	movs	r2, #1
 8006d58:	4658      	mov	r0, fp
 8006d5a:	f000 fbb3 	bl	80074c4 <__lshift>
 8006d5e:	4621      	mov	r1, r4
 8006d60:	4681      	mov	r9, r0
 8006d62:	f000 fc1b 	bl	800759c <__mcmp>
 8006d66:	2800      	cmp	r0, #0
 8006d68:	dc03      	bgt.n	8006d72 <_dtoa_r+0xa52>
 8006d6a:	d1e1      	bne.n	8006d30 <_dtoa_r+0xa10>
 8006d6c:	f018 0f01 	tst.w	r8, #1
 8006d70:	d0de      	beq.n	8006d30 <_dtoa_r+0xa10>
 8006d72:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006d76:	d1d8      	bne.n	8006d2a <_dtoa_r+0xa0a>
 8006d78:	9a00      	ldr	r2, [sp, #0]
 8006d7a:	2339      	movs	r3, #57	@ 0x39
 8006d7c:	7013      	strb	r3, [r2, #0]
 8006d7e:	4633      	mov	r3, r6
 8006d80:	461e      	mov	r6, r3
 8006d82:	3b01      	subs	r3, #1
 8006d84:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006d88:	2a39      	cmp	r2, #57	@ 0x39
 8006d8a:	d052      	beq.n	8006e32 <_dtoa_r+0xb12>
 8006d8c:	3201      	adds	r2, #1
 8006d8e:	701a      	strb	r2, [r3, #0]
 8006d90:	e612      	b.n	80069b8 <_dtoa_r+0x698>
 8006d92:	2a00      	cmp	r2, #0
 8006d94:	dd07      	ble.n	8006da6 <_dtoa_r+0xa86>
 8006d96:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006d9a:	d0ed      	beq.n	8006d78 <_dtoa_r+0xa58>
 8006d9c:	9a00      	ldr	r2, [sp, #0]
 8006d9e:	f108 0301 	add.w	r3, r8, #1
 8006da2:	7013      	strb	r3, [r2, #0]
 8006da4:	e608      	b.n	80069b8 <_dtoa_r+0x698>
 8006da6:	9b07      	ldr	r3, [sp, #28]
 8006da8:	9a07      	ldr	r2, [sp, #28]
 8006daa:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006dae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d028      	beq.n	8006e06 <_dtoa_r+0xae6>
 8006db4:	4649      	mov	r1, r9
 8006db6:	2300      	movs	r3, #0
 8006db8:	220a      	movs	r2, #10
 8006dba:	4658      	mov	r0, fp
 8006dbc:	f000 f9d6 	bl	800716c <__multadd>
 8006dc0:	42af      	cmp	r7, r5
 8006dc2:	4681      	mov	r9, r0
 8006dc4:	f04f 0300 	mov.w	r3, #0
 8006dc8:	f04f 020a 	mov.w	r2, #10
 8006dcc:	4639      	mov	r1, r7
 8006dce:	4658      	mov	r0, fp
 8006dd0:	d107      	bne.n	8006de2 <_dtoa_r+0xac2>
 8006dd2:	f000 f9cb 	bl	800716c <__multadd>
 8006dd6:	4607      	mov	r7, r0
 8006dd8:	4605      	mov	r5, r0
 8006dda:	9b07      	ldr	r3, [sp, #28]
 8006ddc:	3301      	adds	r3, #1
 8006dde:	9307      	str	r3, [sp, #28]
 8006de0:	e774      	b.n	8006ccc <_dtoa_r+0x9ac>
 8006de2:	f000 f9c3 	bl	800716c <__multadd>
 8006de6:	4629      	mov	r1, r5
 8006de8:	4607      	mov	r7, r0
 8006dea:	2300      	movs	r3, #0
 8006dec:	220a      	movs	r2, #10
 8006dee:	4658      	mov	r0, fp
 8006df0:	f000 f9bc 	bl	800716c <__multadd>
 8006df4:	4605      	mov	r5, r0
 8006df6:	e7f0      	b.n	8006dda <_dtoa_r+0xaba>
 8006df8:	9b00      	ldr	r3, [sp, #0]
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	bfcc      	ite	gt
 8006dfe:	461e      	movgt	r6, r3
 8006e00:	2601      	movle	r6, #1
 8006e02:	4456      	add	r6, sl
 8006e04:	2700      	movs	r7, #0
 8006e06:	4649      	mov	r1, r9
 8006e08:	2201      	movs	r2, #1
 8006e0a:	4658      	mov	r0, fp
 8006e0c:	f000 fb5a 	bl	80074c4 <__lshift>
 8006e10:	4621      	mov	r1, r4
 8006e12:	4681      	mov	r9, r0
 8006e14:	f000 fbc2 	bl	800759c <__mcmp>
 8006e18:	2800      	cmp	r0, #0
 8006e1a:	dcb0      	bgt.n	8006d7e <_dtoa_r+0xa5e>
 8006e1c:	d102      	bne.n	8006e24 <_dtoa_r+0xb04>
 8006e1e:	f018 0f01 	tst.w	r8, #1
 8006e22:	d1ac      	bne.n	8006d7e <_dtoa_r+0xa5e>
 8006e24:	4633      	mov	r3, r6
 8006e26:	461e      	mov	r6, r3
 8006e28:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006e2c:	2a30      	cmp	r2, #48	@ 0x30
 8006e2e:	d0fa      	beq.n	8006e26 <_dtoa_r+0xb06>
 8006e30:	e5c2      	b.n	80069b8 <_dtoa_r+0x698>
 8006e32:	459a      	cmp	sl, r3
 8006e34:	d1a4      	bne.n	8006d80 <_dtoa_r+0xa60>
 8006e36:	9b04      	ldr	r3, [sp, #16]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	9304      	str	r3, [sp, #16]
 8006e3c:	2331      	movs	r3, #49	@ 0x31
 8006e3e:	f88a 3000 	strb.w	r3, [sl]
 8006e42:	e5b9      	b.n	80069b8 <_dtoa_r+0x698>
 8006e44:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006e46:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006ea4 <_dtoa_r+0xb84>
 8006e4a:	b11b      	cbz	r3, 8006e54 <_dtoa_r+0xb34>
 8006e4c:	f10a 0308 	add.w	r3, sl, #8
 8006e50:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006e52:	6013      	str	r3, [r2, #0]
 8006e54:	4650      	mov	r0, sl
 8006e56:	b019      	add	sp, #100	@ 0x64
 8006e58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	f77f ae37 	ble.w	8006ad2 <_dtoa_r+0x7b2>
 8006e64:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e66:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e68:	2001      	movs	r0, #1
 8006e6a:	e655      	b.n	8006b18 <_dtoa_r+0x7f8>
 8006e6c:	9b00      	ldr	r3, [sp, #0]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	f77f aed6 	ble.w	8006c20 <_dtoa_r+0x900>
 8006e74:	4656      	mov	r6, sl
 8006e76:	4621      	mov	r1, r4
 8006e78:	4648      	mov	r0, r9
 8006e7a:	f7ff f9c8 	bl	800620e <quorem>
 8006e7e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006e82:	f806 8b01 	strb.w	r8, [r6], #1
 8006e86:	9b00      	ldr	r3, [sp, #0]
 8006e88:	eba6 020a 	sub.w	r2, r6, sl
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	ddb3      	ble.n	8006df8 <_dtoa_r+0xad8>
 8006e90:	4649      	mov	r1, r9
 8006e92:	2300      	movs	r3, #0
 8006e94:	220a      	movs	r2, #10
 8006e96:	4658      	mov	r0, fp
 8006e98:	f000 f968 	bl	800716c <__multadd>
 8006e9c:	4681      	mov	r9, r0
 8006e9e:	e7ea      	b.n	8006e76 <_dtoa_r+0xb56>
 8006ea0:	080092b4 	.word	0x080092b4
 8006ea4:	08009238 	.word	0x08009238

08006ea8 <_free_r>:
 8006ea8:	b538      	push	{r3, r4, r5, lr}
 8006eaa:	4605      	mov	r5, r0
 8006eac:	2900      	cmp	r1, #0
 8006eae:	d041      	beq.n	8006f34 <_free_r+0x8c>
 8006eb0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006eb4:	1f0c      	subs	r4, r1, #4
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	bfb8      	it	lt
 8006eba:	18e4      	addlt	r4, r4, r3
 8006ebc:	f000 f8e8 	bl	8007090 <__malloc_lock>
 8006ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8006f38 <_free_r+0x90>)
 8006ec2:	6813      	ldr	r3, [r2, #0]
 8006ec4:	b933      	cbnz	r3, 8006ed4 <_free_r+0x2c>
 8006ec6:	6063      	str	r3, [r4, #4]
 8006ec8:	6014      	str	r4, [r2, #0]
 8006eca:	4628      	mov	r0, r5
 8006ecc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ed0:	f000 b8e4 	b.w	800709c <__malloc_unlock>
 8006ed4:	42a3      	cmp	r3, r4
 8006ed6:	d908      	bls.n	8006eea <_free_r+0x42>
 8006ed8:	6820      	ldr	r0, [r4, #0]
 8006eda:	1821      	adds	r1, r4, r0
 8006edc:	428b      	cmp	r3, r1
 8006ede:	bf01      	itttt	eq
 8006ee0:	6819      	ldreq	r1, [r3, #0]
 8006ee2:	685b      	ldreq	r3, [r3, #4]
 8006ee4:	1809      	addeq	r1, r1, r0
 8006ee6:	6021      	streq	r1, [r4, #0]
 8006ee8:	e7ed      	b.n	8006ec6 <_free_r+0x1e>
 8006eea:	461a      	mov	r2, r3
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	b10b      	cbz	r3, 8006ef4 <_free_r+0x4c>
 8006ef0:	42a3      	cmp	r3, r4
 8006ef2:	d9fa      	bls.n	8006eea <_free_r+0x42>
 8006ef4:	6811      	ldr	r1, [r2, #0]
 8006ef6:	1850      	adds	r0, r2, r1
 8006ef8:	42a0      	cmp	r0, r4
 8006efa:	d10b      	bne.n	8006f14 <_free_r+0x6c>
 8006efc:	6820      	ldr	r0, [r4, #0]
 8006efe:	4401      	add	r1, r0
 8006f00:	1850      	adds	r0, r2, r1
 8006f02:	4283      	cmp	r3, r0
 8006f04:	6011      	str	r1, [r2, #0]
 8006f06:	d1e0      	bne.n	8006eca <_free_r+0x22>
 8006f08:	6818      	ldr	r0, [r3, #0]
 8006f0a:	685b      	ldr	r3, [r3, #4]
 8006f0c:	6053      	str	r3, [r2, #4]
 8006f0e:	4408      	add	r0, r1
 8006f10:	6010      	str	r0, [r2, #0]
 8006f12:	e7da      	b.n	8006eca <_free_r+0x22>
 8006f14:	d902      	bls.n	8006f1c <_free_r+0x74>
 8006f16:	230c      	movs	r3, #12
 8006f18:	602b      	str	r3, [r5, #0]
 8006f1a:	e7d6      	b.n	8006eca <_free_r+0x22>
 8006f1c:	6820      	ldr	r0, [r4, #0]
 8006f1e:	1821      	adds	r1, r4, r0
 8006f20:	428b      	cmp	r3, r1
 8006f22:	bf04      	itt	eq
 8006f24:	6819      	ldreq	r1, [r3, #0]
 8006f26:	685b      	ldreq	r3, [r3, #4]
 8006f28:	6063      	str	r3, [r4, #4]
 8006f2a:	bf04      	itt	eq
 8006f2c:	1809      	addeq	r1, r1, r0
 8006f2e:	6021      	streq	r1, [r4, #0]
 8006f30:	6054      	str	r4, [r2, #4]
 8006f32:	e7ca      	b.n	8006eca <_free_r+0x22>
 8006f34:	bd38      	pop	{r3, r4, r5, pc}
 8006f36:	bf00      	nop
 8006f38:	20000530 	.word	0x20000530

08006f3c <malloc>:
 8006f3c:	4b02      	ldr	r3, [pc, #8]	@ (8006f48 <malloc+0xc>)
 8006f3e:	4601      	mov	r1, r0
 8006f40:	6818      	ldr	r0, [r3, #0]
 8006f42:	f000 b825 	b.w	8006f90 <_malloc_r>
 8006f46:	bf00      	nop
 8006f48:	20000018 	.word	0x20000018

08006f4c <sbrk_aligned>:
 8006f4c:	b570      	push	{r4, r5, r6, lr}
 8006f4e:	4e0f      	ldr	r6, [pc, #60]	@ (8006f8c <sbrk_aligned+0x40>)
 8006f50:	460c      	mov	r4, r1
 8006f52:	6831      	ldr	r1, [r6, #0]
 8006f54:	4605      	mov	r5, r0
 8006f56:	b911      	cbnz	r1, 8006f5e <sbrk_aligned+0x12>
 8006f58:	f000 fe46 	bl	8007be8 <_sbrk_r>
 8006f5c:	6030      	str	r0, [r6, #0]
 8006f5e:	4621      	mov	r1, r4
 8006f60:	4628      	mov	r0, r5
 8006f62:	f000 fe41 	bl	8007be8 <_sbrk_r>
 8006f66:	1c43      	adds	r3, r0, #1
 8006f68:	d103      	bne.n	8006f72 <sbrk_aligned+0x26>
 8006f6a:	f04f 34ff 	mov.w	r4, #4294967295
 8006f6e:	4620      	mov	r0, r4
 8006f70:	bd70      	pop	{r4, r5, r6, pc}
 8006f72:	1cc4      	adds	r4, r0, #3
 8006f74:	f024 0403 	bic.w	r4, r4, #3
 8006f78:	42a0      	cmp	r0, r4
 8006f7a:	d0f8      	beq.n	8006f6e <sbrk_aligned+0x22>
 8006f7c:	1a21      	subs	r1, r4, r0
 8006f7e:	4628      	mov	r0, r5
 8006f80:	f000 fe32 	bl	8007be8 <_sbrk_r>
 8006f84:	3001      	adds	r0, #1
 8006f86:	d1f2      	bne.n	8006f6e <sbrk_aligned+0x22>
 8006f88:	e7ef      	b.n	8006f6a <sbrk_aligned+0x1e>
 8006f8a:	bf00      	nop
 8006f8c:	2000052c 	.word	0x2000052c

08006f90 <_malloc_r>:
 8006f90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006f94:	1ccd      	adds	r5, r1, #3
 8006f96:	f025 0503 	bic.w	r5, r5, #3
 8006f9a:	3508      	adds	r5, #8
 8006f9c:	2d0c      	cmp	r5, #12
 8006f9e:	bf38      	it	cc
 8006fa0:	250c      	movcc	r5, #12
 8006fa2:	2d00      	cmp	r5, #0
 8006fa4:	4606      	mov	r6, r0
 8006fa6:	db01      	blt.n	8006fac <_malloc_r+0x1c>
 8006fa8:	42a9      	cmp	r1, r5
 8006faa:	d904      	bls.n	8006fb6 <_malloc_r+0x26>
 8006fac:	230c      	movs	r3, #12
 8006fae:	6033      	str	r3, [r6, #0]
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006fb6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800708c <_malloc_r+0xfc>
 8006fba:	f000 f869 	bl	8007090 <__malloc_lock>
 8006fbe:	f8d8 3000 	ldr.w	r3, [r8]
 8006fc2:	461c      	mov	r4, r3
 8006fc4:	bb44      	cbnz	r4, 8007018 <_malloc_r+0x88>
 8006fc6:	4629      	mov	r1, r5
 8006fc8:	4630      	mov	r0, r6
 8006fca:	f7ff ffbf 	bl	8006f4c <sbrk_aligned>
 8006fce:	1c43      	adds	r3, r0, #1
 8006fd0:	4604      	mov	r4, r0
 8006fd2:	d158      	bne.n	8007086 <_malloc_r+0xf6>
 8006fd4:	f8d8 4000 	ldr.w	r4, [r8]
 8006fd8:	4627      	mov	r7, r4
 8006fda:	2f00      	cmp	r7, #0
 8006fdc:	d143      	bne.n	8007066 <_malloc_r+0xd6>
 8006fde:	2c00      	cmp	r4, #0
 8006fe0:	d04b      	beq.n	800707a <_malloc_r+0xea>
 8006fe2:	6823      	ldr	r3, [r4, #0]
 8006fe4:	4639      	mov	r1, r7
 8006fe6:	4630      	mov	r0, r6
 8006fe8:	eb04 0903 	add.w	r9, r4, r3
 8006fec:	f000 fdfc 	bl	8007be8 <_sbrk_r>
 8006ff0:	4581      	cmp	r9, r0
 8006ff2:	d142      	bne.n	800707a <_malloc_r+0xea>
 8006ff4:	6821      	ldr	r1, [r4, #0]
 8006ff6:	1a6d      	subs	r5, r5, r1
 8006ff8:	4629      	mov	r1, r5
 8006ffa:	4630      	mov	r0, r6
 8006ffc:	f7ff ffa6 	bl	8006f4c <sbrk_aligned>
 8007000:	3001      	adds	r0, #1
 8007002:	d03a      	beq.n	800707a <_malloc_r+0xea>
 8007004:	6823      	ldr	r3, [r4, #0]
 8007006:	442b      	add	r3, r5
 8007008:	6023      	str	r3, [r4, #0]
 800700a:	f8d8 3000 	ldr.w	r3, [r8]
 800700e:	685a      	ldr	r2, [r3, #4]
 8007010:	bb62      	cbnz	r2, 800706c <_malloc_r+0xdc>
 8007012:	f8c8 7000 	str.w	r7, [r8]
 8007016:	e00f      	b.n	8007038 <_malloc_r+0xa8>
 8007018:	6822      	ldr	r2, [r4, #0]
 800701a:	1b52      	subs	r2, r2, r5
 800701c:	d420      	bmi.n	8007060 <_malloc_r+0xd0>
 800701e:	2a0b      	cmp	r2, #11
 8007020:	d917      	bls.n	8007052 <_malloc_r+0xc2>
 8007022:	1961      	adds	r1, r4, r5
 8007024:	42a3      	cmp	r3, r4
 8007026:	6025      	str	r5, [r4, #0]
 8007028:	bf18      	it	ne
 800702a:	6059      	strne	r1, [r3, #4]
 800702c:	6863      	ldr	r3, [r4, #4]
 800702e:	bf08      	it	eq
 8007030:	f8c8 1000 	streq.w	r1, [r8]
 8007034:	5162      	str	r2, [r4, r5]
 8007036:	604b      	str	r3, [r1, #4]
 8007038:	4630      	mov	r0, r6
 800703a:	f000 f82f 	bl	800709c <__malloc_unlock>
 800703e:	f104 000b 	add.w	r0, r4, #11
 8007042:	1d23      	adds	r3, r4, #4
 8007044:	f020 0007 	bic.w	r0, r0, #7
 8007048:	1ac2      	subs	r2, r0, r3
 800704a:	bf1c      	itt	ne
 800704c:	1a1b      	subne	r3, r3, r0
 800704e:	50a3      	strne	r3, [r4, r2]
 8007050:	e7af      	b.n	8006fb2 <_malloc_r+0x22>
 8007052:	6862      	ldr	r2, [r4, #4]
 8007054:	42a3      	cmp	r3, r4
 8007056:	bf0c      	ite	eq
 8007058:	f8c8 2000 	streq.w	r2, [r8]
 800705c:	605a      	strne	r2, [r3, #4]
 800705e:	e7eb      	b.n	8007038 <_malloc_r+0xa8>
 8007060:	4623      	mov	r3, r4
 8007062:	6864      	ldr	r4, [r4, #4]
 8007064:	e7ae      	b.n	8006fc4 <_malloc_r+0x34>
 8007066:	463c      	mov	r4, r7
 8007068:	687f      	ldr	r7, [r7, #4]
 800706a:	e7b6      	b.n	8006fda <_malloc_r+0x4a>
 800706c:	461a      	mov	r2, r3
 800706e:	685b      	ldr	r3, [r3, #4]
 8007070:	42a3      	cmp	r3, r4
 8007072:	d1fb      	bne.n	800706c <_malloc_r+0xdc>
 8007074:	2300      	movs	r3, #0
 8007076:	6053      	str	r3, [r2, #4]
 8007078:	e7de      	b.n	8007038 <_malloc_r+0xa8>
 800707a:	230c      	movs	r3, #12
 800707c:	6033      	str	r3, [r6, #0]
 800707e:	4630      	mov	r0, r6
 8007080:	f000 f80c 	bl	800709c <__malloc_unlock>
 8007084:	e794      	b.n	8006fb0 <_malloc_r+0x20>
 8007086:	6005      	str	r5, [r0, #0]
 8007088:	e7d6      	b.n	8007038 <_malloc_r+0xa8>
 800708a:	bf00      	nop
 800708c:	20000530 	.word	0x20000530

08007090 <__malloc_lock>:
 8007090:	4801      	ldr	r0, [pc, #4]	@ (8007098 <__malloc_lock+0x8>)
 8007092:	f7ff b8ba 	b.w	800620a <__retarget_lock_acquire_recursive>
 8007096:	bf00      	nop
 8007098:	20000528 	.word	0x20000528

0800709c <__malloc_unlock>:
 800709c:	4801      	ldr	r0, [pc, #4]	@ (80070a4 <__malloc_unlock+0x8>)
 800709e:	f7ff b8b5 	b.w	800620c <__retarget_lock_release_recursive>
 80070a2:	bf00      	nop
 80070a4:	20000528 	.word	0x20000528

080070a8 <_Balloc>:
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	69c6      	ldr	r6, [r0, #28]
 80070ac:	4604      	mov	r4, r0
 80070ae:	460d      	mov	r5, r1
 80070b0:	b976      	cbnz	r6, 80070d0 <_Balloc+0x28>
 80070b2:	2010      	movs	r0, #16
 80070b4:	f7ff ff42 	bl	8006f3c <malloc>
 80070b8:	4602      	mov	r2, r0
 80070ba:	61e0      	str	r0, [r4, #28]
 80070bc:	b920      	cbnz	r0, 80070c8 <_Balloc+0x20>
 80070be:	4b18      	ldr	r3, [pc, #96]	@ (8007120 <_Balloc+0x78>)
 80070c0:	4818      	ldr	r0, [pc, #96]	@ (8007124 <_Balloc+0x7c>)
 80070c2:	216b      	movs	r1, #107	@ 0x6b
 80070c4:	f000 fdae 	bl	8007c24 <__assert_func>
 80070c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80070cc:	6006      	str	r6, [r0, #0]
 80070ce:	60c6      	str	r6, [r0, #12]
 80070d0:	69e6      	ldr	r6, [r4, #28]
 80070d2:	68f3      	ldr	r3, [r6, #12]
 80070d4:	b183      	cbz	r3, 80070f8 <_Balloc+0x50>
 80070d6:	69e3      	ldr	r3, [r4, #28]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80070de:	b9b8      	cbnz	r0, 8007110 <_Balloc+0x68>
 80070e0:	2101      	movs	r1, #1
 80070e2:	fa01 f605 	lsl.w	r6, r1, r5
 80070e6:	1d72      	adds	r2, r6, #5
 80070e8:	0092      	lsls	r2, r2, #2
 80070ea:	4620      	mov	r0, r4
 80070ec:	f000 fdb8 	bl	8007c60 <_calloc_r>
 80070f0:	b160      	cbz	r0, 800710c <_Balloc+0x64>
 80070f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80070f6:	e00e      	b.n	8007116 <_Balloc+0x6e>
 80070f8:	2221      	movs	r2, #33	@ 0x21
 80070fa:	2104      	movs	r1, #4
 80070fc:	4620      	mov	r0, r4
 80070fe:	f000 fdaf 	bl	8007c60 <_calloc_r>
 8007102:	69e3      	ldr	r3, [r4, #28]
 8007104:	60f0      	str	r0, [r6, #12]
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	2b00      	cmp	r3, #0
 800710a:	d1e4      	bne.n	80070d6 <_Balloc+0x2e>
 800710c:	2000      	movs	r0, #0
 800710e:	bd70      	pop	{r4, r5, r6, pc}
 8007110:	6802      	ldr	r2, [r0, #0]
 8007112:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007116:	2300      	movs	r3, #0
 8007118:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800711c:	e7f7      	b.n	800710e <_Balloc+0x66>
 800711e:	bf00      	nop
 8007120:	08009245 	.word	0x08009245
 8007124:	080092c5 	.word	0x080092c5

08007128 <_Bfree>:
 8007128:	b570      	push	{r4, r5, r6, lr}
 800712a:	69c6      	ldr	r6, [r0, #28]
 800712c:	4605      	mov	r5, r0
 800712e:	460c      	mov	r4, r1
 8007130:	b976      	cbnz	r6, 8007150 <_Bfree+0x28>
 8007132:	2010      	movs	r0, #16
 8007134:	f7ff ff02 	bl	8006f3c <malloc>
 8007138:	4602      	mov	r2, r0
 800713a:	61e8      	str	r0, [r5, #28]
 800713c:	b920      	cbnz	r0, 8007148 <_Bfree+0x20>
 800713e:	4b09      	ldr	r3, [pc, #36]	@ (8007164 <_Bfree+0x3c>)
 8007140:	4809      	ldr	r0, [pc, #36]	@ (8007168 <_Bfree+0x40>)
 8007142:	218f      	movs	r1, #143	@ 0x8f
 8007144:	f000 fd6e 	bl	8007c24 <__assert_func>
 8007148:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800714c:	6006      	str	r6, [r0, #0]
 800714e:	60c6      	str	r6, [r0, #12]
 8007150:	b13c      	cbz	r4, 8007162 <_Bfree+0x3a>
 8007152:	69eb      	ldr	r3, [r5, #28]
 8007154:	6862      	ldr	r2, [r4, #4]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800715c:	6021      	str	r1, [r4, #0]
 800715e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007162:	bd70      	pop	{r4, r5, r6, pc}
 8007164:	08009245 	.word	0x08009245
 8007168:	080092c5 	.word	0x080092c5

0800716c <__multadd>:
 800716c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007170:	690d      	ldr	r5, [r1, #16]
 8007172:	4607      	mov	r7, r0
 8007174:	460c      	mov	r4, r1
 8007176:	461e      	mov	r6, r3
 8007178:	f101 0c14 	add.w	ip, r1, #20
 800717c:	2000      	movs	r0, #0
 800717e:	f8dc 3000 	ldr.w	r3, [ip]
 8007182:	b299      	uxth	r1, r3
 8007184:	fb02 6101 	mla	r1, r2, r1, r6
 8007188:	0c1e      	lsrs	r6, r3, #16
 800718a:	0c0b      	lsrs	r3, r1, #16
 800718c:	fb02 3306 	mla	r3, r2, r6, r3
 8007190:	b289      	uxth	r1, r1
 8007192:	3001      	adds	r0, #1
 8007194:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007198:	4285      	cmp	r5, r0
 800719a:	f84c 1b04 	str.w	r1, [ip], #4
 800719e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80071a2:	dcec      	bgt.n	800717e <__multadd+0x12>
 80071a4:	b30e      	cbz	r6, 80071ea <__multadd+0x7e>
 80071a6:	68a3      	ldr	r3, [r4, #8]
 80071a8:	42ab      	cmp	r3, r5
 80071aa:	dc19      	bgt.n	80071e0 <__multadd+0x74>
 80071ac:	6861      	ldr	r1, [r4, #4]
 80071ae:	4638      	mov	r0, r7
 80071b0:	3101      	adds	r1, #1
 80071b2:	f7ff ff79 	bl	80070a8 <_Balloc>
 80071b6:	4680      	mov	r8, r0
 80071b8:	b928      	cbnz	r0, 80071c6 <__multadd+0x5a>
 80071ba:	4602      	mov	r2, r0
 80071bc:	4b0c      	ldr	r3, [pc, #48]	@ (80071f0 <__multadd+0x84>)
 80071be:	480d      	ldr	r0, [pc, #52]	@ (80071f4 <__multadd+0x88>)
 80071c0:	21ba      	movs	r1, #186	@ 0xba
 80071c2:	f000 fd2f 	bl	8007c24 <__assert_func>
 80071c6:	6922      	ldr	r2, [r4, #16]
 80071c8:	3202      	adds	r2, #2
 80071ca:	f104 010c 	add.w	r1, r4, #12
 80071ce:	0092      	lsls	r2, r2, #2
 80071d0:	300c      	adds	r0, #12
 80071d2:	f000 fd19 	bl	8007c08 <memcpy>
 80071d6:	4621      	mov	r1, r4
 80071d8:	4638      	mov	r0, r7
 80071da:	f7ff ffa5 	bl	8007128 <_Bfree>
 80071de:	4644      	mov	r4, r8
 80071e0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80071e4:	3501      	adds	r5, #1
 80071e6:	615e      	str	r6, [r3, #20]
 80071e8:	6125      	str	r5, [r4, #16]
 80071ea:	4620      	mov	r0, r4
 80071ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80071f0:	080092b4 	.word	0x080092b4
 80071f4:	080092c5 	.word	0x080092c5

080071f8 <__hi0bits>:
 80071f8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80071fc:	4603      	mov	r3, r0
 80071fe:	bf36      	itet	cc
 8007200:	0403      	lslcc	r3, r0, #16
 8007202:	2000      	movcs	r0, #0
 8007204:	2010      	movcc	r0, #16
 8007206:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800720a:	bf3c      	itt	cc
 800720c:	021b      	lslcc	r3, r3, #8
 800720e:	3008      	addcc	r0, #8
 8007210:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007214:	bf3c      	itt	cc
 8007216:	011b      	lslcc	r3, r3, #4
 8007218:	3004      	addcc	r0, #4
 800721a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800721e:	bf3c      	itt	cc
 8007220:	009b      	lslcc	r3, r3, #2
 8007222:	3002      	addcc	r0, #2
 8007224:	2b00      	cmp	r3, #0
 8007226:	db05      	blt.n	8007234 <__hi0bits+0x3c>
 8007228:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800722c:	f100 0001 	add.w	r0, r0, #1
 8007230:	bf08      	it	eq
 8007232:	2020      	moveq	r0, #32
 8007234:	4770      	bx	lr

08007236 <__lo0bits>:
 8007236:	6803      	ldr	r3, [r0, #0]
 8007238:	4602      	mov	r2, r0
 800723a:	f013 0007 	ands.w	r0, r3, #7
 800723e:	d00b      	beq.n	8007258 <__lo0bits+0x22>
 8007240:	07d9      	lsls	r1, r3, #31
 8007242:	d421      	bmi.n	8007288 <__lo0bits+0x52>
 8007244:	0798      	lsls	r0, r3, #30
 8007246:	bf49      	itett	mi
 8007248:	085b      	lsrmi	r3, r3, #1
 800724a:	089b      	lsrpl	r3, r3, #2
 800724c:	2001      	movmi	r0, #1
 800724e:	6013      	strmi	r3, [r2, #0]
 8007250:	bf5c      	itt	pl
 8007252:	6013      	strpl	r3, [r2, #0]
 8007254:	2002      	movpl	r0, #2
 8007256:	4770      	bx	lr
 8007258:	b299      	uxth	r1, r3
 800725a:	b909      	cbnz	r1, 8007260 <__lo0bits+0x2a>
 800725c:	0c1b      	lsrs	r3, r3, #16
 800725e:	2010      	movs	r0, #16
 8007260:	b2d9      	uxtb	r1, r3
 8007262:	b909      	cbnz	r1, 8007268 <__lo0bits+0x32>
 8007264:	3008      	adds	r0, #8
 8007266:	0a1b      	lsrs	r3, r3, #8
 8007268:	0719      	lsls	r1, r3, #28
 800726a:	bf04      	itt	eq
 800726c:	091b      	lsreq	r3, r3, #4
 800726e:	3004      	addeq	r0, #4
 8007270:	0799      	lsls	r1, r3, #30
 8007272:	bf04      	itt	eq
 8007274:	089b      	lsreq	r3, r3, #2
 8007276:	3002      	addeq	r0, #2
 8007278:	07d9      	lsls	r1, r3, #31
 800727a:	d403      	bmi.n	8007284 <__lo0bits+0x4e>
 800727c:	085b      	lsrs	r3, r3, #1
 800727e:	f100 0001 	add.w	r0, r0, #1
 8007282:	d003      	beq.n	800728c <__lo0bits+0x56>
 8007284:	6013      	str	r3, [r2, #0]
 8007286:	4770      	bx	lr
 8007288:	2000      	movs	r0, #0
 800728a:	4770      	bx	lr
 800728c:	2020      	movs	r0, #32
 800728e:	4770      	bx	lr

08007290 <__i2b>:
 8007290:	b510      	push	{r4, lr}
 8007292:	460c      	mov	r4, r1
 8007294:	2101      	movs	r1, #1
 8007296:	f7ff ff07 	bl	80070a8 <_Balloc>
 800729a:	4602      	mov	r2, r0
 800729c:	b928      	cbnz	r0, 80072aa <__i2b+0x1a>
 800729e:	4b05      	ldr	r3, [pc, #20]	@ (80072b4 <__i2b+0x24>)
 80072a0:	4805      	ldr	r0, [pc, #20]	@ (80072b8 <__i2b+0x28>)
 80072a2:	f240 1145 	movw	r1, #325	@ 0x145
 80072a6:	f000 fcbd 	bl	8007c24 <__assert_func>
 80072aa:	2301      	movs	r3, #1
 80072ac:	6144      	str	r4, [r0, #20]
 80072ae:	6103      	str	r3, [r0, #16]
 80072b0:	bd10      	pop	{r4, pc}
 80072b2:	bf00      	nop
 80072b4:	080092b4 	.word	0x080092b4
 80072b8:	080092c5 	.word	0x080092c5

080072bc <__multiply>:
 80072bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072c0:	4614      	mov	r4, r2
 80072c2:	690a      	ldr	r2, [r1, #16]
 80072c4:	6923      	ldr	r3, [r4, #16]
 80072c6:	429a      	cmp	r2, r3
 80072c8:	bfa8      	it	ge
 80072ca:	4623      	movge	r3, r4
 80072cc:	460f      	mov	r7, r1
 80072ce:	bfa4      	itt	ge
 80072d0:	460c      	movge	r4, r1
 80072d2:	461f      	movge	r7, r3
 80072d4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80072d8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80072dc:	68a3      	ldr	r3, [r4, #8]
 80072de:	6861      	ldr	r1, [r4, #4]
 80072e0:	eb0a 0609 	add.w	r6, sl, r9
 80072e4:	42b3      	cmp	r3, r6
 80072e6:	b085      	sub	sp, #20
 80072e8:	bfb8      	it	lt
 80072ea:	3101      	addlt	r1, #1
 80072ec:	f7ff fedc 	bl	80070a8 <_Balloc>
 80072f0:	b930      	cbnz	r0, 8007300 <__multiply+0x44>
 80072f2:	4602      	mov	r2, r0
 80072f4:	4b44      	ldr	r3, [pc, #272]	@ (8007408 <__multiply+0x14c>)
 80072f6:	4845      	ldr	r0, [pc, #276]	@ (800740c <__multiply+0x150>)
 80072f8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80072fc:	f000 fc92 	bl	8007c24 <__assert_func>
 8007300:	f100 0514 	add.w	r5, r0, #20
 8007304:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007308:	462b      	mov	r3, r5
 800730a:	2200      	movs	r2, #0
 800730c:	4543      	cmp	r3, r8
 800730e:	d321      	bcc.n	8007354 <__multiply+0x98>
 8007310:	f107 0114 	add.w	r1, r7, #20
 8007314:	f104 0214 	add.w	r2, r4, #20
 8007318:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800731c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007320:	9302      	str	r3, [sp, #8]
 8007322:	1b13      	subs	r3, r2, r4
 8007324:	3b15      	subs	r3, #21
 8007326:	f023 0303 	bic.w	r3, r3, #3
 800732a:	3304      	adds	r3, #4
 800732c:	f104 0715 	add.w	r7, r4, #21
 8007330:	42ba      	cmp	r2, r7
 8007332:	bf38      	it	cc
 8007334:	2304      	movcc	r3, #4
 8007336:	9301      	str	r3, [sp, #4]
 8007338:	9b02      	ldr	r3, [sp, #8]
 800733a:	9103      	str	r1, [sp, #12]
 800733c:	428b      	cmp	r3, r1
 800733e:	d80c      	bhi.n	800735a <__multiply+0x9e>
 8007340:	2e00      	cmp	r6, #0
 8007342:	dd03      	ble.n	800734c <__multiply+0x90>
 8007344:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007348:	2b00      	cmp	r3, #0
 800734a:	d05b      	beq.n	8007404 <__multiply+0x148>
 800734c:	6106      	str	r6, [r0, #16]
 800734e:	b005      	add	sp, #20
 8007350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007354:	f843 2b04 	str.w	r2, [r3], #4
 8007358:	e7d8      	b.n	800730c <__multiply+0x50>
 800735a:	f8b1 a000 	ldrh.w	sl, [r1]
 800735e:	f1ba 0f00 	cmp.w	sl, #0
 8007362:	d024      	beq.n	80073ae <__multiply+0xf2>
 8007364:	f104 0e14 	add.w	lr, r4, #20
 8007368:	46a9      	mov	r9, r5
 800736a:	f04f 0c00 	mov.w	ip, #0
 800736e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007372:	f8d9 3000 	ldr.w	r3, [r9]
 8007376:	fa1f fb87 	uxth.w	fp, r7
 800737a:	b29b      	uxth	r3, r3
 800737c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007380:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007384:	f8d9 7000 	ldr.w	r7, [r9]
 8007388:	4463      	add	r3, ip
 800738a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800738e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007392:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007396:	b29b      	uxth	r3, r3
 8007398:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800739c:	4572      	cmp	r2, lr
 800739e:	f849 3b04 	str.w	r3, [r9], #4
 80073a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80073a6:	d8e2      	bhi.n	800736e <__multiply+0xb2>
 80073a8:	9b01      	ldr	r3, [sp, #4]
 80073aa:	f845 c003 	str.w	ip, [r5, r3]
 80073ae:	9b03      	ldr	r3, [sp, #12]
 80073b0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80073b4:	3104      	adds	r1, #4
 80073b6:	f1b9 0f00 	cmp.w	r9, #0
 80073ba:	d021      	beq.n	8007400 <__multiply+0x144>
 80073bc:	682b      	ldr	r3, [r5, #0]
 80073be:	f104 0c14 	add.w	ip, r4, #20
 80073c2:	46ae      	mov	lr, r5
 80073c4:	f04f 0a00 	mov.w	sl, #0
 80073c8:	f8bc b000 	ldrh.w	fp, [ip]
 80073cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80073d0:	fb09 770b 	mla	r7, r9, fp, r7
 80073d4:	4457      	add	r7, sl
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80073dc:	f84e 3b04 	str.w	r3, [lr], #4
 80073e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80073e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80073e8:	f8be 3000 	ldrh.w	r3, [lr]
 80073ec:	fb09 330a 	mla	r3, r9, sl, r3
 80073f0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80073f4:	4562      	cmp	r2, ip
 80073f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80073fa:	d8e5      	bhi.n	80073c8 <__multiply+0x10c>
 80073fc:	9f01      	ldr	r7, [sp, #4]
 80073fe:	51eb      	str	r3, [r5, r7]
 8007400:	3504      	adds	r5, #4
 8007402:	e799      	b.n	8007338 <__multiply+0x7c>
 8007404:	3e01      	subs	r6, #1
 8007406:	e79b      	b.n	8007340 <__multiply+0x84>
 8007408:	080092b4 	.word	0x080092b4
 800740c:	080092c5 	.word	0x080092c5

08007410 <__pow5mult>:
 8007410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007414:	4615      	mov	r5, r2
 8007416:	f012 0203 	ands.w	r2, r2, #3
 800741a:	4607      	mov	r7, r0
 800741c:	460e      	mov	r6, r1
 800741e:	d007      	beq.n	8007430 <__pow5mult+0x20>
 8007420:	4c25      	ldr	r4, [pc, #148]	@ (80074b8 <__pow5mult+0xa8>)
 8007422:	3a01      	subs	r2, #1
 8007424:	2300      	movs	r3, #0
 8007426:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800742a:	f7ff fe9f 	bl	800716c <__multadd>
 800742e:	4606      	mov	r6, r0
 8007430:	10ad      	asrs	r5, r5, #2
 8007432:	d03d      	beq.n	80074b0 <__pow5mult+0xa0>
 8007434:	69fc      	ldr	r4, [r7, #28]
 8007436:	b97c      	cbnz	r4, 8007458 <__pow5mult+0x48>
 8007438:	2010      	movs	r0, #16
 800743a:	f7ff fd7f 	bl	8006f3c <malloc>
 800743e:	4602      	mov	r2, r0
 8007440:	61f8      	str	r0, [r7, #28]
 8007442:	b928      	cbnz	r0, 8007450 <__pow5mult+0x40>
 8007444:	4b1d      	ldr	r3, [pc, #116]	@ (80074bc <__pow5mult+0xac>)
 8007446:	481e      	ldr	r0, [pc, #120]	@ (80074c0 <__pow5mult+0xb0>)
 8007448:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800744c:	f000 fbea 	bl	8007c24 <__assert_func>
 8007450:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007454:	6004      	str	r4, [r0, #0]
 8007456:	60c4      	str	r4, [r0, #12]
 8007458:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800745c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007460:	b94c      	cbnz	r4, 8007476 <__pow5mult+0x66>
 8007462:	f240 2171 	movw	r1, #625	@ 0x271
 8007466:	4638      	mov	r0, r7
 8007468:	f7ff ff12 	bl	8007290 <__i2b>
 800746c:	2300      	movs	r3, #0
 800746e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007472:	4604      	mov	r4, r0
 8007474:	6003      	str	r3, [r0, #0]
 8007476:	f04f 0900 	mov.w	r9, #0
 800747a:	07eb      	lsls	r3, r5, #31
 800747c:	d50a      	bpl.n	8007494 <__pow5mult+0x84>
 800747e:	4631      	mov	r1, r6
 8007480:	4622      	mov	r2, r4
 8007482:	4638      	mov	r0, r7
 8007484:	f7ff ff1a 	bl	80072bc <__multiply>
 8007488:	4631      	mov	r1, r6
 800748a:	4680      	mov	r8, r0
 800748c:	4638      	mov	r0, r7
 800748e:	f7ff fe4b 	bl	8007128 <_Bfree>
 8007492:	4646      	mov	r6, r8
 8007494:	106d      	asrs	r5, r5, #1
 8007496:	d00b      	beq.n	80074b0 <__pow5mult+0xa0>
 8007498:	6820      	ldr	r0, [r4, #0]
 800749a:	b938      	cbnz	r0, 80074ac <__pow5mult+0x9c>
 800749c:	4622      	mov	r2, r4
 800749e:	4621      	mov	r1, r4
 80074a0:	4638      	mov	r0, r7
 80074a2:	f7ff ff0b 	bl	80072bc <__multiply>
 80074a6:	6020      	str	r0, [r4, #0]
 80074a8:	f8c0 9000 	str.w	r9, [r0]
 80074ac:	4604      	mov	r4, r0
 80074ae:	e7e4      	b.n	800747a <__pow5mult+0x6a>
 80074b0:	4630      	mov	r0, r6
 80074b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80074b6:	bf00      	nop
 80074b8:	08009320 	.word	0x08009320
 80074bc:	08009245 	.word	0x08009245
 80074c0:	080092c5 	.word	0x080092c5

080074c4 <__lshift>:
 80074c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074c8:	460c      	mov	r4, r1
 80074ca:	6849      	ldr	r1, [r1, #4]
 80074cc:	6923      	ldr	r3, [r4, #16]
 80074ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80074d2:	68a3      	ldr	r3, [r4, #8]
 80074d4:	4607      	mov	r7, r0
 80074d6:	4691      	mov	r9, r2
 80074d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80074dc:	f108 0601 	add.w	r6, r8, #1
 80074e0:	42b3      	cmp	r3, r6
 80074e2:	db0b      	blt.n	80074fc <__lshift+0x38>
 80074e4:	4638      	mov	r0, r7
 80074e6:	f7ff fddf 	bl	80070a8 <_Balloc>
 80074ea:	4605      	mov	r5, r0
 80074ec:	b948      	cbnz	r0, 8007502 <__lshift+0x3e>
 80074ee:	4602      	mov	r2, r0
 80074f0:	4b28      	ldr	r3, [pc, #160]	@ (8007594 <__lshift+0xd0>)
 80074f2:	4829      	ldr	r0, [pc, #164]	@ (8007598 <__lshift+0xd4>)
 80074f4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80074f8:	f000 fb94 	bl	8007c24 <__assert_func>
 80074fc:	3101      	adds	r1, #1
 80074fe:	005b      	lsls	r3, r3, #1
 8007500:	e7ee      	b.n	80074e0 <__lshift+0x1c>
 8007502:	2300      	movs	r3, #0
 8007504:	f100 0114 	add.w	r1, r0, #20
 8007508:	f100 0210 	add.w	r2, r0, #16
 800750c:	4618      	mov	r0, r3
 800750e:	4553      	cmp	r3, sl
 8007510:	db33      	blt.n	800757a <__lshift+0xb6>
 8007512:	6920      	ldr	r0, [r4, #16]
 8007514:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007518:	f104 0314 	add.w	r3, r4, #20
 800751c:	f019 091f 	ands.w	r9, r9, #31
 8007520:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007524:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007528:	d02b      	beq.n	8007582 <__lshift+0xbe>
 800752a:	f1c9 0e20 	rsb	lr, r9, #32
 800752e:	468a      	mov	sl, r1
 8007530:	2200      	movs	r2, #0
 8007532:	6818      	ldr	r0, [r3, #0]
 8007534:	fa00 f009 	lsl.w	r0, r0, r9
 8007538:	4310      	orrs	r0, r2
 800753a:	f84a 0b04 	str.w	r0, [sl], #4
 800753e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007542:	459c      	cmp	ip, r3
 8007544:	fa22 f20e 	lsr.w	r2, r2, lr
 8007548:	d8f3      	bhi.n	8007532 <__lshift+0x6e>
 800754a:	ebac 0304 	sub.w	r3, ip, r4
 800754e:	3b15      	subs	r3, #21
 8007550:	f023 0303 	bic.w	r3, r3, #3
 8007554:	3304      	adds	r3, #4
 8007556:	f104 0015 	add.w	r0, r4, #21
 800755a:	4584      	cmp	ip, r0
 800755c:	bf38      	it	cc
 800755e:	2304      	movcc	r3, #4
 8007560:	50ca      	str	r2, [r1, r3]
 8007562:	b10a      	cbz	r2, 8007568 <__lshift+0xa4>
 8007564:	f108 0602 	add.w	r6, r8, #2
 8007568:	3e01      	subs	r6, #1
 800756a:	4638      	mov	r0, r7
 800756c:	612e      	str	r6, [r5, #16]
 800756e:	4621      	mov	r1, r4
 8007570:	f7ff fdda 	bl	8007128 <_Bfree>
 8007574:	4628      	mov	r0, r5
 8007576:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800757a:	f842 0f04 	str.w	r0, [r2, #4]!
 800757e:	3301      	adds	r3, #1
 8007580:	e7c5      	b.n	800750e <__lshift+0x4a>
 8007582:	3904      	subs	r1, #4
 8007584:	f853 2b04 	ldr.w	r2, [r3], #4
 8007588:	f841 2f04 	str.w	r2, [r1, #4]!
 800758c:	459c      	cmp	ip, r3
 800758e:	d8f9      	bhi.n	8007584 <__lshift+0xc0>
 8007590:	e7ea      	b.n	8007568 <__lshift+0xa4>
 8007592:	bf00      	nop
 8007594:	080092b4 	.word	0x080092b4
 8007598:	080092c5 	.word	0x080092c5

0800759c <__mcmp>:
 800759c:	690a      	ldr	r2, [r1, #16]
 800759e:	4603      	mov	r3, r0
 80075a0:	6900      	ldr	r0, [r0, #16]
 80075a2:	1a80      	subs	r0, r0, r2
 80075a4:	b530      	push	{r4, r5, lr}
 80075a6:	d10e      	bne.n	80075c6 <__mcmp+0x2a>
 80075a8:	3314      	adds	r3, #20
 80075aa:	3114      	adds	r1, #20
 80075ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80075b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80075b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80075b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80075bc:	4295      	cmp	r5, r2
 80075be:	d003      	beq.n	80075c8 <__mcmp+0x2c>
 80075c0:	d205      	bcs.n	80075ce <__mcmp+0x32>
 80075c2:	f04f 30ff 	mov.w	r0, #4294967295
 80075c6:	bd30      	pop	{r4, r5, pc}
 80075c8:	42a3      	cmp	r3, r4
 80075ca:	d3f3      	bcc.n	80075b4 <__mcmp+0x18>
 80075cc:	e7fb      	b.n	80075c6 <__mcmp+0x2a>
 80075ce:	2001      	movs	r0, #1
 80075d0:	e7f9      	b.n	80075c6 <__mcmp+0x2a>
	...

080075d4 <__mdiff>:
 80075d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075d8:	4689      	mov	r9, r1
 80075da:	4606      	mov	r6, r0
 80075dc:	4611      	mov	r1, r2
 80075de:	4648      	mov	r0, r9
 80075e0:	4614      	mov	r4, r2
 80075e2:	f7ff ffdb 	bl	800759c <__mcmp>
 80075e6:	1e05      	subs	r5, r0, #0
 80075e8:	d112      	bne.n	8007610 <__mdiff+0x3c>
 80075ea:	4629      	mov	r1, r5
 80075ec:	4630      	mov	r0, r6
 80075ee:	f7ff fd5b 	bl	80070a8 <_Balloc>
 80075f2:	4602      	mov	r2, r0
 80075f4:	b928      	cbnz	r0, 8007602 <__mdiff+0x2e>
 80075f6:	4b3f      	ldr	r3, [pc, #252]	@ (80076f4 <__mdiff+0x120>)
 80075f8:	f240 2137 	movw	r1, #567	@ 0x237
 80075fc:	483e      	ldr	r0, [pc, #248]	@ (80076f8 <__mdiff+0x124>)
 80075fe:	f000 fb11 	bl	8007c24 <__assert_func>
 8007602:	2301      	movs	r3, #1
 8007604:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007608:	4610      	mov	r0, r2
 800760a:	b003      	add	sp, #12
 800760c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007610:	bfbc      	itt	lt
 8007612:	464b      	movlt	r3, r9
 8007614:	46a1      	movlt	r9, r4
 8007616:	4630      	mov	r0, r6
 8007618:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800761c:	bfba      	itte	lt
 800761e:	461c      	movlt	r4, r3
 8007620:	2501      	movlt	r5, #1
 8007622:	2500      	movge	r5, #0
 8007624:	f7ff fd40 	bl	80070a8 <_Balloc>
 8007628:	4602      	mov	r2, r0
 800762a:	b918      	cbnz	r0, 8007634 <__mdiff+0x60>
 800762c:	4b31      	ldr	r3, [pc, #196]	@ (80076f4 <__mdiff+0x120>)
 800762e:	f240 2145 	movw	r1, #581	@ 0x245
 8007632:	e7e3      	b.n	80075fc <__mdiff+0x28>
 8007634:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007638:	6926      	ldr	r6, [r4, #16]
 800763a:	60c5      	str	r5, [r0, #12]
 800763c:	f109 0310 	add.w	r3, r9, #16
 8007640:	f109 0514 	add.w	r5, r9, #20
 8007644:	f104 0e14 	add.w	lr, r4, #20
 8007648:	f100 0b14 	add.w	fp, r0, #20
 800764c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007650:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007654:	9301      	str	r3, [sp, #4]
 8007656:	46d9      	mov	r9, fp
 8007658:	f04f 0c00 	mov.w	ip, #0
 800765c:	9b01      	ldr	r3, [sp, #4]
 800765e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007662:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007666:	9301      	str	r3, [sp, #4]
 8007668:	fa1f f38a 	uxth.w	r3, sl
 800766c:	4619      	mov	r1, r3
 800766e:	b283      	uxth	r3, r0
 8007670:	1acb      	subs	r3, r1, r3
 8007672:	0c00      	lsrs	r0, r0, #16
 8007674:	4463      	add	r3, ip
 8007676:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800767a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800767e:	b29b      	uxth	r3, r3
 8007680:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007684:	4576      	cmp	r6, lr
 8007686:	f849 3b04 	str.w	r3, [r9], #4
 800768a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800768e:	d8e5      	bhi.n	800765c <__mdiff+0x88>
 8007690:	1b33      	subs	r3, r6, r4
 8007692:	3b15      	subs	r3, #21
 8007694:	f023 0303 	bic.w	r3, r3, #3
 8007698:	3415      	adds	r4, #21
 800769a:	3304      	adds	r3, #4
 800769c:	42a6      	cmp	r6, r4
 800769e:	bf38      	it	cc
 80076a0:	2304      	movcc	r3, #4
 80076a2:	441d      	add	r5, r3
 80076a4:	445b      	add	r3, fp
 80076a6:	461e      	mov	r6, r3
 80076a8:	462c      	mov	r4, r5
 80076aa:	4544      	cmp	r4, r8
 80076ac:	d30e      	bcc.n	80076cc <__mdiff+0xf8>
 80076ae:	f108 0103 	add.w	r1, r8, #3
 80076b2:	1b49      	subs	r1, r1, r5
 80076b4:	f021 0103 	bic.w	r1, r1, #3
 80076b8:	3d03      	subs	r5, #3
 80076ba:	45a8      	cmp	r8, r5
 80076bc:	bf38      	it	cc
 80076be:	2100      	movcc	r1, #0
 80076c0:	440b      	add	r3, r1
 80076c2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80076c6:	b191      	cbz	r1, 80076ee <__mdiff+0x11a>
 80076c8:	6117      	str	r7, [r2, #16]
 80076ca:	e79d      	b.n	8007608 <__mdiff+0x34>
 80076cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80076d0:	46e6      	mov	lr, ip
 80076d2:	0c08      	lsrs	r0, r1, #16
 80076d4:	fa1c fc81 	uxtah	ip, ip, r1
 80076d8:	4471      	add	r1, lr
 80076da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80076de:	b289      	uxth	r1, r1
 80076e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80076e4:	f846 1b04 	str.w	r1, [r6], #4
 80076e8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80076ec:	e7dd      	b.n	80076aa <__mdiff+0xd6>
 80076ee:	3f01      	subs	r7, #1
 80076f0:	e7e7      	b.n	80076c2 <__mdiff+0xee>
 80076f2:	bf00      	nop
 80076f4:	080092b4 	.word	0x080092b4
 80076f8:	080092c5 	.word	0x080092c5

080076fc <__d2b>:
 80076fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007700:	460f      	mov	r7, r1
 8007702:	2101      	movs	r1, #1
 8007704:	ec59 8b10 	vmov	r8, r9, d0
 8007708:	4616      	mov	r6, r2
 800770a:	f7ff fccd 	bl	80070a8 <_Balloc>
 800770e:	4604      	mov	r4, r0
 8007710:	b930      	cbnz	r0, 8007720 <__d2b+0x24>
 8007712:	4602      	mov	r2, r0
 8007714:	4b23      	ldr	r3, [pc, #140]	@ (80077a4 <__d2b+0xa8>)
 8007716:	4824      	ldr	r0, [pc, #144]	@ (80077a8 <__d2b+0xac>)
 8007718:	f240 310f 	movw	r1, #783	@ 0x30f
 800771c:	f000 fa82 	bl	8007c24 <__assert_func>
 8007720:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007724:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007728:	b10d      	cbz	r5, 800772e <__d2b+0x32>
 800772a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800772e:	9301      	str	r3, [sp, #4]
 8007730:	f1b8 0300 	subs.w	r3, r8, #0
 8007734:	d023      	beq.n	800777e <__d2b+0x82>
 8007736:	4668      	mov	r0, sp
 8007738:	9300      	str	r3, [sp, #0]
 800773a:	f7ff fd7c 	bl	8007236 <__lo0bits>
 800773e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007742:	b1d0      	cbz	r0, 800777a <__d2b+0x7e>
 8007744:	f1c0 0320 	rsb	r3, r0, #32
 8007748:	fa02 f303 	lsl.w	r3, r2, r3
 800774c:	430b      	orrs	r3, r1
 800774e:	40c2      	lsrs	r2, r0
 8007750:	6163      	str	r3, [r4, #20]
 8007752:	9201      	str	r2, [sp, #4]
 8007754:	9b01      	ldr	r3, [sp, #4]
 8007756:	61a3      	str	r3, [r4, #24]
 8007758:	2b00      	cmp	r3, #0
 800775a:	bf0c      	ite	eq
 800775c:	2201      	moveq	r2, #1
 800775e:	2202      	movne	r2, #2
 8007760:	6122      	str	r2, [r4, #16]
 8007762:	b1a5      	cbz	r5, 800778e <__d2b+0x92>
 8007764:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007768:	4405      	add	r5, r0
 800776a:	603d      	str	r5, [r7, #0]
 800776c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007770:	6030      	str	r0, [r6, #0]
 8007772:	4620      	mov	r0, r4
 8007774:	b003      	add	sp, #12
 8007776:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800777a:	6161      	str	r1, [r4, #20]
 800777c:	e7ea      	b.n	8007754 <__d2b+0x58>
 800777e:	a801      	add	r0, sp, #4
 8007780:	f7ff fd59 	bl	8007236 <__lo0bits>
 8007784:	9b01      	ldr	r3, [sp, #4]
 8007786:	6163      	str	r3, [r4, #20]
 8007788:	3020      	adds	r0, #32
 800778a:	2201      	movs	r2, #1
 800778c:	e7e8      	b.n	8007760 <__d2b+0x64>
 800778e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007792:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007796:	6038      	str	r0, [r7, #0]
 8007798:	6918      	ldr	r0, [r3, #16]
 800779a:	f7ff fd2d 	bl	80071f8 <__hi0bits>
 800779e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80077a2:	e7e5      	b.n	8007770 <__d2b+0x74>
 80077a4:	080092b4 	.word	0x080092b4
 80077a8:	080092c5 	.word	0x080092c5

080077ac <__ssputs_r>:
 80077ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077b0:	688e      	ldr	r6, [r1, #8]
 80077b2:	461f      	mov	r7, r3
 80077b4:	42be      	cmp	r6, r7
 80077b6:	680b      	ldr	r3, [r1, #0]
 80077b8:	4682      	mov	sl, r0
 80077ba:	460c      	mov	r4, r1
 80077bc:	4690      	mov	r8, r2
 80077be:	d82d      	bhi.n	800781c <__ssputs_r+0x70>
 80077c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80077c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80077c8:	d026      	beq.n	8007818 <__ssputs_r+0x6c>
 80077ca:	6965      	ldr	r5, [r4, #20]
 80077cc:	6909      	ldr	r1, [r1, #16]
 80077ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80077d2:	eba3 0901 	sub.w	r9, r3, r1
 80077d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80077da:	1c7b      	adds	r3, r7, #1
 80077dc:	444b      	add	r3, r9
 80077de:	106d      	asrs	r5, r5, #1
 80077e0:	429d      	cmp	r5, r3
 80077e2:	bf38      	it	cc
 80077e4:	461d      	movcc	r5, r3
 80077e6:	0553      	lsls	r3, r2, #21
 80077e8:	d527      	bpl.n	800783a <__ssputs_r+0x8e>
 80077ea:	4629      	mov	r1, r5
 80077ec:	f7ff fbd0 	bl	8006f90 <_malloc_r>
 80077f0:	4606      	mov	r6, r0
 80077f2:	b360      	cbz	r0, 800784e <__ssputs_r+0xa2>
 80077f4:	6921      	ldr	r1, [r4, #16]
 80077f6:	464a      	mov	r2, r9
 80077f8:	f000 fa06 	bl	8007c08 <memcpy>
 80077fc:	89a3      	ldrh	r3, [r4, #12]
 80077fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007802:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007806:	81a3      	strh	r3, [r4, #12]
 8007808:	6126      	str	r6, [r4, #16]
 800780a:	6165      	str	r5, [r4, #20]
 800780c:	444e      	add	r6, r9
 800780e:	eba5 0509 	sub.w	r5, r5, r9
 8007812:	6026      	str	r6, [r4, #0]
 8007814:	60a5      	str	r5, [r4, #8]
 8007816:	463e      	mov	r6, r7
 8007818:	42be      	cmp	r6, r7
 800781a:	d900      	bls.n	800781e <__ssputs_r+0x72>
 800781c:	463e      	mov	r6, r7
 800781e:	6820      	ldr	r0, [r4, #0]
 8007820:	4632      	mov	r2, r6
 8007822:	4641      	mov	r1, r8
 8007824:	f000 f9c6 	bl	8007bb4 <memmove>
 8007828:	68a3      	ldr	r3, [r4, #8]
 800782a:	1b9b      	subs	r3, r3, r6
 800782c:	60a3      	str	r3, [r4, #8]
 800782e:	6823      	ldr	r3, [r4, #0]
 8007830:	4433      	add	r3, r6
 8007832:	6023      	str	r3, [r4, #0]
 8007834:	2000      	movs	r0, #0
 8007836:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800783a:	462a      	mov	r2, r5
 800783c:	f000 fa36 	bl	8007cac <_realloc_r>
 8007840:	4606      	mov	r6, r0
 8007842:	2800      	cmp	r0, #0
 8007844:	d1e0      	bne.n	8007808 <__ssputs_r+0x5c>
 8007846:	6921      	ldr	r1, [r4, #16]
 8007848:	4650      	mov	r0, sl
 800784a:	f7ff fb2d 	bl	8006ea8 <_free_r>
 800784e:	230c      	movs	r3, #12
 8007850:	f8ca 3000 	str.w	r3, [sl]
 8007854:	89a3      	ldrh	r3, [r4, #12]
 8007856:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800785a:	81a3      	strh	r3, [r4, #12]
 800785c:	f04f 30ff 	mov.w	r0, #4294967295
 8007860:	e7e9      	b.n	8007836 <__ssputs_r+0x8a>
	...

08007864 <_svfiprintf_r>:
 8007864:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007868:	4698      	mov	r8, r3
 800786a:	898b      	ldrh	r3, [r1, #12]
 800786c:	061b      	lsls	r3, r3, #24
 800786e:	b09d      	sub	sp, #116	@ 0x74
 8007870:	4607      	mov	r7, r0
 8007872:	460d      	mov	r5, r1
 8007874:	4614      	mov	r4, r2
 8007876:	d510      	bpl.n	800789a <_svfiprintf_r+0x36>
 8007878:	690b      	ldr	r3, [r1, #16]
 800787a:	b973      	cbnz	r3, 800789a <_svfiprintf_r+0x36>
 800787c:	2140      	movs	r1, #64	@ 0x40
 800787e:	f7ff fb87 	bl	8006f90 <_malloc_r>
 8007882:	6028      	str	r0, [r5, #0]
 8007884:	6128      	str	r0, [r5, #16]
 8007886:	b930      	cbnz	r0, 8007896 <_svfiprintf_r+0x32>
 8007888:	230c      	movs	r3, #12
 800788a:	603b      	str	r3, [r7, #0]
 800788c:	f04f 30ff 	mov.w	r0, #4294967295
 8007890:	b01d      	add	sp, #116	@ 0x74
 8007892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007896:	2340      	movs	r3, #64	@ 0x40
 8007898:	616b      	str	r3, [r5, #20]
 800789a:	2300      	movs	r3, #0
 800789c:	9309      	str	r3, [sp, #36]	@ 0x24
 800789e:	2320      	movs	r3, #32
 80078a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80078a4:	f8cd 800c 	str.w	r8, [sp, #12]
 80078a8:	2330      	movs	r3, #48	@ 0x30
 80078aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007a48 <_svfiprintf_r+0x1e4>
 80078ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80078b2:	f04f 0901 	mov.w	r9, #1
 80078b6:	4623      	mov	r3, r4
 80078b8:	469a      	mov	sl, r3
 80078ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80078be:	b10a      	cbz	r2, 80078c4 <_svfiprintf_r+0x60>
 80078c0:	2a25      	cmp	r2, #37	@ 0x25
 80078c2:	d1f9      	bne.n	80078b8 <_svfiprintf_r+0x54>
 80078c4:	ebba 0b04 	subs.w	fp, sl, r4
 80078c8:	d00b      	beq.n	80078e2 <_svfiprintf_r+0x7e>
 80078ca:	465b      	mov	r3, fp
 80078cc:	4622      	mov	r2, r4
 80078ce:	4629      	mov	r1, r5
 80078d0:	4638      	mov	r0, r7
 80078d2:	f7ff ff6b 	bl	80077ac <__ssputs_r>
 80078d6:	3001      	adds	r0, #1
 80078d8:	f000 80a7 	beq.w	8007a2a <_svfiprintf_r+0x1c6>
 80078dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078de:	445a      	add	r2, fp
 80078e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80078e2:	f89a 3000 	ldrb.w	r3, [sl]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	f000 809f 	beq.w	8007a2a <_svfiprintf_r+0x1c6>
 80078ec:	2300      	movs	r3, #0
 80078ee:	f04f 32ff 	mov.w	r2, #4294967295
 80078f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078f6:	f10a 0a01 	add.w	sl, sl, #1
 80078fa:	9304      	str	r3, [sp, #16]
 80078fc:	9307      	str	r3, [sp, #28]
 80078fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007902:	931a      	str	r3, [sp, #104]	@ 0x68
 8007904:	4654      	mov	r4, sl
 8007906:	2205      	movs	r2, #5
 8007908:	f814 1b01 	ldrb.w	r1, [r4], #1
 800790c:	484e      	ldr	r0, [pc, #312]	@ (8007a48 <_svfiprintf_r+0x1e4>)
 800790e:	f7f8 fc5f 	bl	80001d0 <memchr>
 8007912:	9a04      	ldr	r2, [sp, #16]
 8007914:	b9d8      	cbnz	r0, 800794e <_svfiprintf_r+0xea>
 8007916:	06d0      	lsls	r0, r2, #27
 8007918:	bf44      	itt	mi
 800791a:	2320      	movmi	r3, #32
 800791c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007920:	0711      	lsls	r1, r2, #28
 8007922:	bf44      	itt	mi
 8007924:	232b      	movmi	r3, #43	@ 0x2b
 8007926:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800792a:	f89a 3000 	ldrb.w	r3, [sl]
 800792e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007930:	d015      	beq.n	800795e <_svfiprintf_r+0xfa>
 8007932:	9a07      	ldr	r2, [sp, #28]
 8007934:	4654      	mov	r4, sl
 8007936:	2000      	movs	r0, #0
 8007938:	f04f 0c0a 	mov.w	ip, #10
 800793c:	4621      	mov	r1, r4
 800793e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007942:	3b30      	subs	r3, #48	@ 0x30
 8007944:	2b09      	cmp	r3, #9
 8007946:	d94b      	bls.n	80079e0 <_svfiprintf_r+0x17c>
 8007948:	b1b0      	cbz	r0, 8007978 <_svfiprintf_r+0x114>
 800794a:	9207      	str	r2, [sp, #28]
 800794c:	e014      	b.n	8007978 <_svfiprintf_r+0x114>
 800794e:	eba0 0308 	sub.w	r3, r0, r8
 8007952:	fa09 f303 	lsl.w	r3, r9, r3
 8007956:	4313      	orrs	r3, r2
 8007958:	9304      	str	r3, [sp, #16]
 800795a:	46a2      	mov	sl, r4
 800795c:	e7d2      	b.n	8007904 <_svfiprintf_r+0xa0>
 800795e:	9b03      	ldr	r3, [sp, #12]
 8007960:	1d19      	adds	r1, r3, #4
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	9103      	str	r1, [sp, #12]
 8007966:	2b00      	cmp	r3, #0
 8007968:	bfbb      	ittet	lt
 800796a:	425b      	neglt	r3, r3
 800796c:	f042 0202 	orrlt.w	r2, r2, #2
 8007970:	9307      	strge	r3, [sp, #28]
 8007972:	9307      	strlt	r3, [sp, #28]
 8007974:	bfb8      	it	lt
 8007976:	9204      	strlt	r2, [sp, #16]
 8007978:	7823      	ldrb	r3, [r4, #0]
 800797a:	2b2e      	cmp	r3, #46	@ 0x2e
 800797c:	d10a      	bne.n	8007994 <_svfiprintf_r+0x130>
 800797e:	7863      	ldrb	r3, [r4, #1]
 8007980:	2b2a      	cmp	r3, #42	@ 0x2a
 8007982:	d132      	bne.n	80079ea <_svfiprintf_r+0x186>
 8007984:	9b03      	ldr	r3, [sp, #12]
 8007986:	1d1a      	adds	r2, r3, #4
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	9203      	str	r2, [sp, #12]
 800798c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007990:	3402      	adds	r4, #2
 8007992:	9305      	str	r3, [sp, #20]
 8007994:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007a58 <_svfiprintf_r+0x1f4>
 8007998:	7821      	ldrb	r1, [r4, #0]
 800799a:	2203      	movs	r2, #3
 800799c:	4650      	mov	r0, sl
 800799e:	f7f8 fc17 	bl	80001d0 <memchr>
 80079a2:	b138      	cbz	r0, 80079b4 <_svfiprintf_r+0x150>
 80079a4:	9b04      	ldr	r3, [sp, #16]
 80079a6:	eba0 000a 	sub.w	r0, r0, sl
 80079aa:	2240      	movs	r2, #64	@ 0x40
 80079ac:	4082      	lsls	r2, r0
 80079ae:	4313      	orrs	r3, r2
 80079b0:	3401      	adds	r4, #1
 80079b2:	9304      	str	r3, [sp, #16]
 80079b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80079b8:	4824      	ldr	r0, [pc, #144]	@ (8007a4c <_svfiprintf_r+0x1e8>)
 80079ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80079be:	2206      	movs	r2, #6
 80079c0:	f7f8 fc06 	bl	80001d0 <memchr>
 80079c4:	2800      	cmp	r0, #0
 80079c6:	d036      	beq.n	8007a36 <_svfiprintf_r+0x1d2>
 80079c8:	4b21      	ldr	r3, [pc, #132]	@ (8007a50 <_svfiprintf_r+0x1ec>)
 80079ca:	bb1b      	cbnz	r3, 8007a14 <_svfiprintf_r+0x1b0>
 80079cc:	9b03      	ldr	r3, [sp, #12]
 80079ce:	3307      	adds	r3, #7
 80079d0:	f023 0307 	bic.w	r3, r3, #7
 80079d4:	3308      	adds	r3, #8
 80079d6:	9303      	str	r3, [sp, #12]
 80079d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80079da:	4433      	add	r3, r6
 80079dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80079de:	e76a      	b.n	80078b6 <_svfiprintf_r+0x52>
 80079e0:	fb0c 3202 	mla	r2, ip, r2, r3
 80079e4:	460c      	mov	r4, r1
 80079e6:	2001      	movs	r0, #1
 80079e8:	e7a8      	b.n	800793c <_svfiprintf_r+0xd8>
 80079ea:	2300      	movs	r3, #0
 80079ec:	3401      	adds	r4, #1
 80079ee:	9305      	str	r3, [sp, #20]
 80079f0:	4619      	mov	r1, r3
 80079f2:	f04f 0c0a 	mov.w	ip, #10
 80079f6:	4620      	mov	r0, r4
 80079f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079fc:	3a30      	subs	r2, #48	@ 0x30
 80079fe:	2a09      	cmp	r2, #9
 8007a00:	d903      	bls.n	8007a0a <_svfiprintf_r+0x1a6>
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d0c6      	beq.n	8007994 <_svfiprintf_r+0x130>
 8007a06:	9105      	str	r1, [sp, #20]
 8007a08:	e7c4      	b.n	8007994 <_svfiprintf_r+0x130>
 8007a0a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a0e:	4604      	mov	r4, r0
 8007a10:	2301      	movs	r3, #1
 8007a12:	e7f0      	b.n	80079f6 <_svfiprintf_r+0x192>
 8007a14:	ab03      	add	r3, sp, #12
 8007a16:	9300      	str	r3, [sp, #0]
 8007a18:	462a      	mov	r2, r5
 8007a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8007a54 <_svfiprintf_r+0x1f0>)
 8007a1c:	a904      	add	r1, sp, #16
 8007a1e:	4638      	mov	r0, r7
 8007a20:	f7fd fe98 	bl	8005754 <_printf_float>
 8007a24:	1c42      	adds	r2, r0, #1
 8007a26:	4606      	mov	r6, r0
 8007a28:	d1d6      	bne.n	80079d8 <_svfiprintf_r+0x174>
 8007a2a:	89ab      	ldrh	r3, [r5, #12]
 8007a2c:	065b      	lsls	r3, r3, #25
 8007a2e:	f53f af2d 	bmi.w	800788c <_svfiprintf_r+0x28>
 8007a32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007a34:	e72c      	b.n	8007890 <_svfiprintf_r+0x2c>
 8007a36:	ab03      	add	r3, sp, #12
 8007a38:	9300      	str	r3, [sp, #0]
 8007a3a:	462a      	mov	r2, r5
 8007a3c:	4b05      	ldr	r3, [pc, #20]	@ (8007a54 <_svfiprintf_r+0x1f0>)
 8007a3e:	a904      	add	r1, sp, #16
 8007a40:	4638      	mov	r0, r7
 8007a42:	f7fe f91f 	bl	8005c84 <_printf_i>
 8007a46:	e7ed      	b.n	8007a24 <_svfiprintf_r+0x1c0>
 8007a48:	08009420 	.word	0x08009420
 8007a4c:	0800942a 	.word	0x0800942a
 8007a50:	08005755 	.word	0x08005755
 8007a54:	080077ad 	.word	0x080077ad
 8007a58:	08009426 	.word	0x08009426

08007a5c <__sflush_r>:
 8007a5c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a64:	0716      	lsls	r6, r2, #28
 8007a66:	4605      	mov	r5, r0
 8007a68:	460c      	mov	r4, r1
 8007a6a:	d454      	bmi.n	8007b16 <__sflush_r+0xba>
 8007a6c:	684b      	ldr	r3, [r1, #4]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	dc02      	bgt.n	8007a78 <__sflush_r+0x1c>
 8007a72:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	dd48      	ble.n	8007b0a <__sflush_r+0xae>
 8007a78:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007a7a:	2e00      	cmp	r6, #0
 8007a7c:	d045      	beq.n	8007b0a <__sflush_r+0xae>
 8007a7e:	2300      	movs	r3, #0
 8007a80:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007a84:	682f      	ldr	r7, [r5, #0]
 8007a86:	6a21      	ldr	r1, [r4, #32]
 8007a88:	602b      	str	r3, [r5, #0]
 8007a8a:	d030      	beq.n	8007aee <__sflush_r+0x92>
 8007a8c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007a8e:	89a3      	ldrh	r3, [r4, #12]
 8007a90:	0759      	lsls	r1, r3, #29
 8007a92:	d505      	bpl.n	8007aa0 <__sflush_r+0x44>
 8007a94:	6863      	ldr	r3, [r4, #4]
 8007a96:	1ad2      	subs	r2, r2, r3
 8007a98:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007a9a:	b10b      	cbz	r3, 8007aa0 <__sflush_r+0x44>
 8007a9c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007a9e:	1ad2      	subs	r2, r2, r3
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007aa4:	6a21      	ldr	r1, [r4, #32]
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	47b0      	blx	r6
 8007aaa:	1c43      	adds	r3, r0, #1
 8007aac:	89a3      	ldrh	r3, [r4, #12]
 8007aae:	d106      	bne.n	8007abe <__sflush_r+0x62>
 8007ab0:	6829      	ldr	r1, [r5, #0]
 8007ab2:	291d      	cmp	r1, #29
 8007ab4:	d82b      	bhi.n	8007b0e <__sflush_r+0xb2>
 8007ab6:	4a2a      	ldr	r2, [pc, #168]	@ (8007b60 <__sflush_r+0x104>)
 8007ab8:	410a      	asrs	r2, r1
 8007aba:	07d6      	lsls	r6, r2, #31
 8007abc:	d427      	bmi.n	8007b0e <__sflush_r+0xb2>
 8007abe:	2200      	movs	r2, #0
 8007ac0:	6062      	str	r2, [r4, #4]
 8007ac2:	04d9      	lsls	r1, r3, #19
 8007ac4:	6922      	ldr	r2, [r4, #16]
 8007ac6:	6022      	str	r2, [r4, #0]
 8007ac8:	d504      	bpl.n	8007ad4 <__sflush_r+0x78>
 8007aca:	1c42      	adds	r2, r0, #1
 8007acc:	d101      	bne.n	8007ad2 <__sflush_r+0x76>
 8007ace:	682b      	ldr	r3, [r5, #0]
 8007ad0:	b903      	cbnz	r3, 8007ad4 <__sflush_r+0x78>
 8007ad2:	6560      	str	r0, [r4, #84]	@ 0x54
 8007ad4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007ad6:	602f      	str	r7, [r5, #0]
 8007ad8:	b1b9      	cbz	r1, 8007b0a <__sflush_r+0xae>
 8007ada:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ade:	4299      	cmp	r1, r3
 8007ae0:	d002      	beq.n	8007ae8 <__sflush_r+0x8c>
 8007ae2:	4628      	mov	r0, r5
 8007ae4:	f7ff f9e0 	bl	8006ea8 <_free_r>
 8007ae8:	2300      	movs	r3, #0
 8007aea:	6363      	str	r3, [r4, #52]	@ 0x34
 8007aec:	e00d      	b.n	8007b0a <__sflush_r+0xae>
 8007aee:	2301      	movs	r3, #1
 8007af0:	4628      	mov	r0, r5
 8007af2:	47b0      	blx	r6
 8007af4:	4602      	mov	r2, r0
 8007af6:	1c50      	adds	r0, r2, #1
 8007af8:	d1c9      	bne.n	8007a8e <__sflush_r+0x32>
 8007afa:	682b      	ldr	r3, [r5, #0]
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d0c6      	beq.n	8007a8e <__sflush_r+0x32>
 8007b00:	2b1d      	cmp	r3, #29
 8007b02:	d001      	beq.n	8007b08 <__sflush_r+0xac>
 8007b04:	2b16      	cmp	r3, #22
 8007b06:	d11e      	bne.n	8007b46 <__sflush_r+0xea>
 8007b08:	602f      	str	r7, [r5, #0]
 8007b0a:	2000      	movs	r0, #0
 8007b0c:	e022      	b.n	8007b54 <__sflush_r+0xf8>
 8007b0e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b12:	b21b      	sxth	r3, r3
 8007b14:	e01b      	b.n	8007b4e <__sflush_r+0xf2>
 8007b16:	690f      	ldr	r7, [r1, #16]
 8007b18:	2f00      	cmp	r7, #0
 8007b1a:	d0f6      	beq.n	8007b0a <__sflush_r+0xae>
 8007b1c:	0793      	lsls	r3, r2, #30
 8007b1e:	680e      	ldr	r6, [r1, #0]
 8007b20:	bf08      	it	eq
 8007b22:	694b      	ldreq	r3, [r1, #20]
 8007b24:	600f      	str	r7, [r1, #0]
 8007b26:	bf18      	it	ne
 8007b28:	2300      	movne	r3, #0
 8007b2a:	eba6 0807 	sub.w	r8, r6, r7
 8007b2e:	608b      	str	r3, [r1, #8]
 8007b30:	f1b8 0f00 	cmp.w	r8, #0
 8007b34:	dde9      	ble.n	8007b0a <__sflush_r+0xae>
 8007b36:	6a21      	ldr	r1, [r4, #32]
 8007b38:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8007b3a:	4643      	mov	r3, r8
 8007b3c:	463a      	mov	r2, r7
 8007b3e:	4628      	mov	r0, r5
 8007b40:	47b0      	blx	r6
 8007b42:	2800      	cmp	r0, #0
 8007b44:	dc08      	bgt.n	8007b58 <__sflush_r+0xfc>
 8007b46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b4a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b4e:	81a3      	strh	r3, [r4, #12]
 8007b50:	f04f 30ff 	mov.w	r0, #4294967295
 8007b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b58:	4407      	add	r7, r0
 8007b5a:	eba8 0800 	sub.w	r8, r8, r0
 8007b5e:	e7e7      	b.n	8007b30 <__sflush_r+0xd4>
 8007b60:	dfbffffe 	.word	0xdfbffffe

08007b64 <_fflush_r>:
 8007b64:	b538      	push	{r3, r4, r5, lr}
 8007b66:	690b      	ldr	r3, [r1, #16]
 8007b68:	4605      	mov	r5, r0
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	b913      	cbnz	r3, 8007b74 <_fflush_r+0x10>
 8007b6e:	2500      	movs	r5, #0
 8007b70:	4628      	mov	r0, r5
 8007b72:	bd38      	pop	{r3, r4, r5, pc}
 8007b74:	b118      	cbz	r0, 8007b7e <_fflush_r+0x1a>
 8007b76:	6a03      	ldr	r3, [r0, #32]
 8007b78:	b90b      	cbnz	r3, 8007b7e <_fflush_r+0x1a>
 8007b7a:	f7fe fa2f 	bl	8005fdc <__sinit>
 8007b7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d0f3      	beq.n	8007b6e <_fflush_r+0xa>
 8007b86:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007b88:	07d0      	lsls	r0, r2, #31
 8007b8a:	d404      	bmi.n	8007b96 <_fflush_r+0x32>
 8007b8c:	0599      	lsls	r1, r3, #22
 8007b8e:	d402      	bmi.n	8007b96 <_fflush_r+0x32>
 8007b90:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007b92:	f7fe fb3a 	bl	800620a <__retarget_lock_acquire_recursive>
 8007b96:	4628      	mov	r0, r5
 8007b98:	4621      	mov	r1, r4
 8007b9a:	f7ff ff5f 	bl	8007a5c <__sflush_r>
 8007b9e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007ba0:	07da      	lsls	r2, r3, #31
 8007ba2:	4605      	mov	r5, r0
 8007ba4:	d4e4      	bmi.n	8007b70 <_fflush_r+0xc>
 8007ba6:	89a3      	ldrh	r3, [r4, #12]
 8007ba8:	059b      	lsls	r3, r3, #22
 8007baa:	d4e1      	bmi.n	8007b70 <_fflush_r+0xc>
 8007bac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bae:	f7fe fb2d 	bl	800620c <__retarget_lock_release_recursive>
 8007bb2:	e7dd      	b.n	8007b70 <_fflush_r+0xc>

08007bb4 <memmove>:
 8007bb4:	4288      	cmp	r0, r1
 8007bb6:	b510      	push	{r4, lr}
 8007bb8:	eb01 0402 	add.w	r4, r1, r2
 8007bbc:	d902      	bls.n	8007bc4 <memmove+0x10>
 8007bbe:	4284      	cmp	r4, r0
 8007bc0:	4623      	mov	r3, r4
 8007bc2:	d807      	bhi.n	8007bd4 <memmove+0x20>
 8007bc4:	1e43      	subs	r3, r0, #1
 8007bc6:	42a1      	cmp	r1, r4
 8007bc8:	d008      	beq.n	8007bdc <memmove+0x28>
 8007bca:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007bce:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007bd2:	e7f8      	b.n	8007bc6 <memmove+0x12>
 8007bd4:	4402      	add	r2, r0
 8007bd6:	4601      	mov	r1, r0
 8007bd8:	428a      	cmp	r2, r1
 8007bda:	d100      	bne.n	8007bde <memmove+0x2a>
 8007bdc:	bd10      	pop	{r4, pc}
 8007bde:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007be2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007be6:	e7f7      	b.n	8007bd8 <memmove+0x24>

08007be8 <_sbrk_r>:
 8007be8:	b538      	push	{r3, r4, r5, lr}
 8007bea:	4d06      	ldr	r5, [pc, #24]	@ (8007c04 <_sbrk_r+0x1c>)
 8007bec:	2300      	movs	r3, #0
 8007bee:	4604      	mov	r4, r0
 8007bf0:	4608      	mov	r0, r1
 8007bf2:	602b      	str	r3, [r5, #0]
 8007bf4:	f7fa fd16 	bl	8002624 <_sbrk>
 8007bf8:	1c43      	adds	r3, r0, #1
 8007bfa:	d102      	bne.n	8007c02 <_sbrk_r+0x1a>
 8007bfc:	682b      	ldr	r3, [r5, #0]
 8007bfe:	b103      	cbz	r3, 8007c02 <_sbrk_r+0x1a>
 8007c00:	6023      	str	r3, [r4, #0]
 8007c02:	bd38      	pop	{r3, r4, r5, pc}
 8007c04:	20000524 	.word	0x20000524

08007c08 <memcpy>:
 8007c08:	440a      	add	r2, r1
 8007c0a:	4291      	cmp	r1, r2
 8007c0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8007c10:	d100      	bne.n	8007c14 <memcpy+0xc>
 8007c12:	4770      	bx	lr
 8007c14:	b510      	push	{r4, lr}
 8007c16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007c1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007c1e:	4291      	cmp	r1, r2
 8007c20:	d1f9      	bne.n	8007c16 <memcpy+0xe>
 8007c22:	bd10      	pop	{r4, pc}

08007c24 <__assert_func>:
 8007c24:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007c26:	4614      	mov	r4, r2
 8007c28:	461a      	mov	r2, r3
 8007c2a:	4b09      	ldr	r3, [pc, #36]	@ (8007c50 <__assert_func+0x2c>)
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	4605      	mov	r5, r0
 8007c30:	68d8      	ldr	r0, [r3, #12]
 8007c32:	b954      	cbnz	r4, 8007c4a <__assert_func+0x26>
 8007c34:	4b07      	ldr	r3, [pc, #28]	@ (8007c54 <__assert_func+0x30>)
 8007c36:	461c      	mov	r4, r3
 8007c38:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007c3c:	9100      	str	r1, [sp, #0]
 8007c3e:	462b      	mov	r3, r5
 8007c40:	4905      	ldr	r1, [pc, #20]	@ (8007c58 <__assert_func+0x34>)
 8007c42:	f000 f86f 	bl	8007d24 <fiprintf>
 8007c46:	f000 f87f 	bl	8007d48 <abort>
 8007c4a:	4b04      	ldr	r3, [pc, #16]	@ (8007c5c <__assert_func+0x38>)
 8007c4c:	e7f4      	b.n	8007c38 <__assert_func+0x14>
 8007c4e:	bf00      	nop
 8007c50:	20000018 	.word	0x20000018
 8007c54:	08009476 	.word	0x08009476
 8007c58:	08009448 	.word	0x08009448
 8007c5c:	0800943b 	.word	0x0800943b

08007c60 <_calloc_r>:
 8007c60:	b570      	push	{r4, r5, r6, lr}
 8007c62:	fba1 5402 	umull	r5, r4, r1, r2
 8007c66:	b93c      	cbnz	r4, 8007c78 <_calloc_r+0x18>
 8007c68:	4629      	mov	r1, r5
 8007c6a:	f7ff f991 	bl	8006f90 <_malloc_r>
 8007c6e:	4606      	mov	r6, r0
 8007c70:	b928      	cbnz	r0, 8007c7e <_calloc_r+0x1e>
 8007c72:	2600      	movs	r6, #0
 8007c74:	4630      	mov	r0, r6
 8007c76:	bd70      	pop	{r4, r5, r6, pc}
 8007c78:	220c      	movs	r2, #12
 8007c7a:	6002      	str	r2, [r0, #0]
 8007c7c:	e7f9      	b.n	8007c72 <_calloc_r+0x12>
 8007c7e:	462a      	mov	r2, r5
 8007c80:	4621      	mov	r1, r4
 8007c82:	f7fe fa44 	bl	800610e <memset>
 8007c86:	e7f5      	b.n	8007c74 <_calloc_r+0x14>

08007c88 <__ascii_mbtowc>:
 8007c88:	b082      	sub	sp, #8
 8007c8a:	b901      	cbnz	r1, 8007c8e <__ascii_mbtowc+0x6>
 8007c8c:	a901      	add	r1, sp, #4
 8007c8e:	b142      	cbz	r2, 8007ca2 <__ascii_mbtowc+0x1a>
 8007c90:	b14b      	cbz	r3, 8007ca6 <__ascii_mbtowc+0x1e>
 8007c92:	7813      	ldrb	r3, [r2, #0]
 8007c94:	600b      	str	r3, [r1, #0]
 8007c96:	7812      	ldrb	r2, [r2, #0]
 8007c98:	1e10      	subs	r0, r2, #0
 8007c9a:	bf18      	it	ne
 8007c9c:	2001      	movne	r0, #1
 8007c9e:	b002      	add	sp, #8
 8007ca0:	4770      	bx	lr
 8007ca2:	4610      	mov	r0, r2
 8007ca4:	e7fb      	b.n	8007c9e <__ascii_mbtowc+0x16>
 8007ca6:	f06f 0001 	mvn.w	r0, #1
 8007caa:	e7f8      	b.n	8007c9e <__ascii_mbtowc+0x16>

08007cac <_realloc_r>:
 8007cac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cb0:	4680      	mov	r8, r0
 8007cb2:	4615      	mov	r5, r2
 8007cb4:	460c      	mov	r4, r1
 8007cb6:	b921      	cbnz	r1, 8007cc2 <_realloc_r+0x16>
 8007cb8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cbc:	4611      	mov	r1, r2
 8007cbe:	f7ff b967 	b.w	8006f90 <_malloc_r>
 8007cc2:	b92a      	cbnz	r2, 8007cd0 <_realloc_r+0x24>
 8007cc4:	f7ff f8f0 	bl	8006ea8 <_free_r>
 8007cc8:	2400      	movs	r4, #0
 8007cca:	4620      	mov	r0, r4
 8007ccc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007cd0:	f000 f841 	bl	8007d56 <_malloc_usable_size_r>
 8007cd4:	4285      	cmp	r5, r0
 8007cd6:	4606      	mov	r6, r0
 8007cd8:	d802      	bhi.n	8007ce0 <_realloc_r+0x34>
 8007cda:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007cde:	d8f4      	bhi.n	8007cca <_realloc_r+0x1e>
 8007ce0:	4629      	mov	r1, r5
 8007ce2:	4640      	mov	r0, r8
 8007ce4:	f7ff f954 	bl	8006f90 <_malloc_r>
 8007ce8:	4607      	mov	r7, r0
 8007cea:	2800      	cmp	r0, #0
 8007cec:	d0ec      	beq.n	8007cc8 <_realloc_r+0x1c>
 8007cee:	42b5      	cmp	r5, r6
 8007cf0:	462a      	mov	r2, r5
 8007cf2:	4621      	mov	r1, r4
 8007cf4:	bf28      	it	cs
 8007cf6:	4632      	movcs	r2, r6
 8007cf8:	f7ff ff86 	bl	8007c08 <memcpy>
 8007cfc:	4621      	mov	r1, r4
 8007cfe:	4640      	mov	r0, r8
 8007d00:	f7ff f8d2 	bl	8006ea8 <_free_r>
 8007d04:	463c      	mov	r4, r7
 8007d06:	e7e0      	b.n	8007cca <_realloc_r+0x1e>

08007d08 <__ascii_wctomb>:
 8007d08:	4603      	mov	r3, r0
 8007d0a:	4608      	mov	r0, r1
 8007d0c:	b141      	cbz	r1, 8007d20 <__ascii_wctomb+0x18>
 8007d0e:	2aff      	cmp	r2, #255	@ 0xff
 8007d10:	d904      	bls.n	8007d1c <__ascii_wctomb+0x14>
 8007d12:	228a      	movs	r2, #138	@ 0x8a
 8007d14:	601a      	str	r2, [r3, #0]
 8007d16:	f04f 30ff 	mov.w	r0, #4294967295
 8007d1a:	4770      	bx	lr
 8007d1c:	700a      	strb	r2, [r1, #0]
 8007d1e:	2001      	movs	r0, #1
 8007d20:	4770      	bx	lr
	...

08007d24 <fiprintf>:
 8007d24:	b40e      	push	{r1, r2, r3}
 8007d26:	b503      	push	{r0, r1, lr}
 8007d28:	4601      	mov	r1, r0
 8007d2a:	ab03      	add	r3, sp, #12
 8007d2c:	4805      	ldr	r0, [pc, #20]	@ (8007d44 <fiprintf+0x20>)
 8007d2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007d32:	6800      	ldr	r0, [r0, #0]
 8007d34:	9301      	str	r3, [sp, #4]
 8007d36:	f000 f83f 	bl	8007db8 <_vfiprintf_r>
 8007d3a:	b002      	add	sp, #8
 8007d3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007d40:	b003      	add	sp, #12
 8007d42:	4770      	bx	lr
 8007d44:	20000018 	.word	0x20000018

08007d48 <abort>:
 8007d48:	b508      	push	{r3, lr}
 8007d4a:	2006      	movs	r0, #6
 8007d4c:	f000 fa08 	bl	8008160 <raise>
 8007d50:	2001      	movs	r0, #1
 8007d52:	f7fa fbee 	bl	8002532 <_exit>

08007d56 <_malloc_usable_size_r>:
 8007d56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d5a:	1f18      	subs	r0, r3, #4
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	bfbc      	itt	lt
 8007d60:	580b      	ldrlt	r3, [r1, r0]
 8007d62:	18c0      	addlt	r0, r0, r3
 8007d64:	4770      	bx	lr

08007d66 <__sfputc_r>:
 8007d66:	6893      	ldr	r3, [r2, #8]
 8007d68:	3b01      	subs	r3, #1
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	b410      	push	{r4}
 8007d6e:	6093      	str	r3, [r2, #8]
 8007d70:	da08      	bge.n	8007d84 <__sfputc_r+0x1e>
 8007d72:	6994      	ldr	r4, [r2, #24]
 8007d74:	42a3      	cmp	r3, r4
 8007d76:	db01      	blt.n	8007d7c <__sfputc_r+0x16>
 8007d78:	290a      	cmp	r1, #10
 8007d7a:	d103      	bne.n	8007d84 <__sfputc_r+0x1e>
 8007d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d80:	f000 b932 	b.w	8007fe8 <__swbuf_r>
 8007d84:	6813      	ldr	r3, [r2, #0]
 8007d86:	1c58      	adds	r0, r3, #1
 8007d88:	6010      	str	r0, [r2, #0]
 8007d8a:	7019      	strb	r1, [r3, #0]
 8007d8c:	4608      	mov	r0, r1
 8007d8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <__sfputs_r>:
 8007d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d96:	4606      	mov	r6, r0
 8007d98:	460f      	mov	r7, r1
 8007d9a:	4614      	mov	r4, r2
 8007d9c:	18d5      	adds	r5, r2, r3
 8007d9e:	42ac      	cmp	r4, r5
 8007da0:	d101      	bne.n	8007da6 <__sfputs_r+0x12>
 8007da2:	2000      	movs	r0, #0
 8007da4:	e007      	b.n	8007db6 <__sfputs_r+0x22>
 8007da6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007daa:	463a      	mov	r2, r7
 8007dac:	4630      	mov	r0, r6
 8007dae:	f7ff ffda 	bl	8007d66 <__sfputc_r>
 8007db2:	1c43      	adds	r3, r0, #1
 8007db4:	d1f3      	bne.n	8007d9e <__sfputs_r+0xa>
 8007db6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007db8 <_vfiprintf_r>:
 8007db8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dbc:	460d      	mov	r5, r1
 8007dbe:	b09d      	sub	sp, #116	@ 0x74
 8007dc0:	4614      	mov	r4, r2
 8007dc2:	4698      	mov	r8, r3
 8007dc4:	4606      	mov	r6, r0
 8007dc6:	b118      	cbz	r0, 8007dd0 <_vfiprintf_r+0x18>
 8007dc8:	6a03      	ldr	r3, [r0, #32]
 8007dca:	b90b      	cbnz	r3, 8007dd0 <_vfiprintf_r+0x18>
 8007dcc:	f7fe f906 	bl	8005fdc <__sinit>
 8007dd0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007dd2:	07d9      	lsls	r1, r3, #31
 8007dd4:	d405      	bmi.n	8007de2 <_vfiprintf_r+0x2a>
 8007dd6:	89ab      	ldrh	r3, [r5, #12]
 8007dd8:	059a      	lsls	r2, r3, #22
 8007dda:	d402      	bmi.n	8007de2 <_vfiprintf_r+0x2a>
 8007ddc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007dde:	f7fe fa14 	bl	800620a <__retarget_lock_acquire_recursive>
 8007de2:	89ab      	ldrh	r3, [r5, #12]
 8007de4:	071b      	lsls	r3, r3, #28
 8007de6:	d501      	bpl.n	8007dec <_vfiprintf_r+0x34>
 8007de8:	692b      	ldr	r3, [r5, #16]
 8007dea:	b99b      	cbnz	r3, 8007e14 <_vfiprintf_r+0x5c>
 8007dec:	4629      	mov	r1, r5
 8007dee:	4630      	mov	r0, r6
 8007df0:	f000 f938 	bl	8008064 <__swsetup_r>
 8007df4:	b170      	cbz	r0, 8007e14 <_vfiprintf_r+0x5c>
 8007df6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007df8:	07dc      	lsls	r4, r3, #31
 8007dfa:	d504      	bpl.n	8007e06 <_vfiprintf_r+0x4e>
 8007dfc:	f04f 30ff 	mov.w	r0, #4294967295
 8007e00:	b01d      	add	sp, #116	@ 0x74
 8007e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e06:	89ab      	ldrh	r3, [r5, #12]
 8007e08:	0598      	lsls	r0, r3, #22
 8007e0a:	d4f7      	bmi.n	8007dfc <_vfiprintf_r+0x44>
 8007e0c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e0e:	f7fe f9fd 	bl	800620c <__retarget_lock_release_recursive>
 8007e12:	e7f3      	b.n	8007dfc <_vfiprintf_r+0x44>
 8007e14:	2300      	movs	r3, #0
 8007e16:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e18:	2320      	movs	r3, #32
 8007e1a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e1e:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e22:	2330      	movs	r3, #48	@ 0x30
 8007e24:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007fd4 <_vfiprintf_r+0x21c>
 8007e28:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e2c:	f04f 0901 	mov.w	r9, #1
 8007e30:	4623      	mov	r3, r4
 8007e32:	469a      	mov	sl, r3
 8007e34:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e38:	b10a      	cbz	r2, 8007e3e <_vfiprintf_r+0x86>
 8007e3a:	2a25      	cmp	r2, #37	@ 0x25
 8007e3c:	d1f9      	bne.n	8007e32 <_vfiprintf_r+0x7a>
 8007e3e:	ebba 0b04 	subs.w	fp, sl, r4
 8007e42:	d00b      	beq.n	8007e5c <_vfiprintf_r+0xa4>
 8007e44:	465b      	mov	r3, fp
 8007e46:	4622      	mov	r2, r4
 8007e48:	4629      	mov	r1, r5
 8007e4a:	4630      	mov	r0, r6
 8007e4c:	f7ff ffa2 	bl	8007d94 <__sfputs_r>
 8007e50:	3001      	adds	r0, #1
 8007e52:	f000 80a7 	beq.w	8007fa4 <_vfiprintf_r+0x1ec>
 8007e56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e58:	445a      	add	r2, fp
 8007e5a:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e5c:	f89a 3000 	ldrb.w	r3, [sl]
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	f000 809f 	beq.w	8007fa4 <_vfiprintf_r+0x1ec>
 8007e66:	2300      	movs	r3, #0
 8007e68:	f04f 32ff 	mov.w	r2, #4294967295
 8007e6c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e70:	f10a 0a01 	add.w	sl, sl, #1
 8007e74:	9304      	str	r3, [sp, #16]
 8007e76:	9307      	str	r3, [sp, #28]
 8007e78:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e7c:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e7e:	4654      	mov	r4, sl
 8007e80:	2205      	movs	r2, #5
 8007e82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e86:	4853      	ldr	r0, [pc, #332]	@ (8007fd4 <_vfiprintf_r+0x21c>)
 8007e88:	f7f8 f9a2 	bl	80001d0 <memchr>
 8007e8c:	9a04      	ldr	r2, [sp, #16]
 8007e8e:	b9d8      	cbnz	r0, 8007ec8 <_vfiprintf_r+0x110>
 8007e90:	06d1      	lsls	r1, r2, #27
 8007e92:	bf44      	itt	mi
 8007e94:	2320      	movmi	r3, #32
 8007e96:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007e9a:	0713      	lsls	r3, r2, #28
 8007e9c:	bf44      	itt	mi
 8007e9e:	232b      	movmi	r3, #43	@ 0x2b
 8007ea0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ea4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ea8:	2b2a      	cmp	r3, #42	@ 0x2a
 8007eaa:	d015      	beq.n	8007ed8 <_vfiprintf_r+0x120>
 8007eac:	9a07      	ldr	r2, [sp, #28]
 8007eae:	4654      	mov	r4, sl
 8007eb0:	2000      	movs	r0, #0
 8007eb2:	f04f 0c0a 	mov.w	ip, #10
 8007eb6:	4621      	mov	r1, r4
 8007eb8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ebc:	3b30      	subs	r3, #48	@ 0x30
 8007ebe:	2b09      	cmp	r3, #9
 8007ec0:	d94b      	bls.n	8007f5a <_vfiprintf_r+0x1a2>
 8007ec2:	b1b0      	cbz	r0, 8007ef2 <_vfiprintf_r+0x13a>
 8007ec4:	9207      	str	r2, [sp, #28]
 8007ec6:	e014      	b.n	8007ef2 <_vfiprintf_r+0x13a>
 8007ec8:	eba0 0308 	sub.w	r3, r0, r8
 8007ecc:	fa09 f303 	lsl.w	r3, r9, r3
 8007ed0:	4313      	orrs	r3, r2
 8007ed2:	9304      	str	r3, [sp, #16]
 8007ed4:	46a2      	mov	sl, r4
 8007ed6:	e7d2      	b.n	8007e7e <_vfiprintf_r+0xc6>
 8007ed8:	9b03      	ldr	r3, [sp, #12]
 8007eda:	1d19      	adds	r1, r3, #4
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	9103      	str	r1, [sp, #12]
 8007ee0:	2b00      	cmp	r3, #0
 8007ee2:	bfbb      	ittet	lt
 8007ee4:	425b      	neglt	r3, r3
 8007ee6:	f042 0202 	orrlt.w	r2, r2, #2
 8007eea:	9307      	strge	r3, [sp, #28]
 8007eec:	9307      	strlt	r3, [sp, #28]
 8007eee:	bfb8      	it	lt
 8007ef0:	9204      	strlt	r2, [sp, #16]
 8007ef2:	7823      	ldrb	r3, [r4, #0]
 8007ef4:	2b2e      	cmp	r3, #46	@ 0x2e
 8007ef6:	d10a      	bne.n	8007f0e <_vfiprintf_r+0x156>
 8007ef8:	7863      	ldrb	r3, [r4, #1]
 8007efa:	2b2a      	cmp	r3, #42	@ 0x2a
 8007efc:	d132      	bne.n	8007f64 <_vfiprintf_r+0x1ac>
 8007efe:	9b03      	ldr	r3, [sp, #12]
 8007f00:	1d1a      	adds	r2, r3, #4
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	9203      	str	r2, [sp, #12]
 8007f06:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f0a:	3402      	adds	r4, #2
 8007f0c:	9305      	str	r3, [sp, #20]
 8007f0e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007fe4 <_vfiprintf_r+0x22c>
 8007f12:	7821      	ldrb	r1, [r4, #0]
 8007f14:	2203      	movs	r2, #3
 8007f16:	4650      	mov	r0, sl
 8007f18:	f7f8 f95a 	bl	80001d0 <memchr>
 8007f1c:	b138      	cbz	r0, 8007f2e <_vfiprintf_r+0x176>
 8007f1e:	9b04      	ldr	r3, [sp, #16]
 8007f20:	eba0 000a 	sub.w	r0, r0, sl
 8007f24:	2240      	movs	r2, #64	@ 0x40
 8007f26:	4082      	lsls	r2, r0
 8007f28:	4313      	orrs	r3, r2
 8007f2a:	3401      	adds	r4, #1
 8007f2c:	9304      	str	r3, [sp, #16]
 8007f2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f32:	4829      	ldr	r0, [pc, #164]	@ (8007fd8 <_vfiprintf_r+0x220>)
 8007f34:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f38:	2206      	movs	r2, #6
 8007f3a:	f7f8 f949 	bl	80001d0 <memchr>
 8007f3e:	2800      	cmp	r0, #0
 8007f40:	d03f      	beq.n	8007fc2 <_vfiprintf_r+0x20a>
 8007f42:	4b26      	ldr	r3, [pc, #152]	@ (8007fdc <_vfiprintf_r+0x224>)
 8007f44:	bb1b      	cbnz	r3, 8007f8e <_vfiprintf_r+0x1d6>
 8007f46:	9b03      	ldr	r3, [sp, #12]
 8007f48:	3307      	adds	r3, #7
 8007f4a:	f023 0307 	bic.w	r3, r3, #7
 8007f4e:	3308      	adds	r3, #8
 8007f50:	9303      	str	r3, [sp, #12]
 8007f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f54:	443b      	add	r3, r7
 8007f56:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f58:	e76a      	b.n	8007e30 <_vfiprintf_r+0x78>
 8007f5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f5e:	460c      	mov	r4, r1
 8007f60:	2001      	movs	r0, #1
 8007f62:	e7a8      	b.n	8007eb6 <_vfiprintf_r+0xfe>
 8007f64:	2300      	movs	r3, #0
 8007f66:	3401      	adds	r4, #1
 8007f68:	9305      	str	r3, [sp, #20]
 8007f6a:	4619      	mov	r1, r3
 8007f6c:	f04f 0c0a 	mov.w	ip, #10
 8007f70:	4620      	mov	r0, r4
 8007f72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f76:	3a30      	subs	r2, #48	@ 0x30
 8007f78:	2a09      	cmp	r2, #9
 8007f7a:	d903      	bls.n	8007f84 <_vfiprintf_r+0x1cc>
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d0c6      	beq.n	8007f0e <_vfiprintf_r+0x156>
 8007f80:	9105      	str	r1, [sp, #20]
 8007f82:	e7c4      	b.n	8007f0e <_vfiprintf_r+0x156>
 8007f84:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f88:	4604      	mov	r4, r0
 8007f8a:	2301      	movs	r3, #1
 8007f8c:	e7f0      	b.n	8007f70 <_vfiprintf_r+0x1b8>
 8007f8e:	ab03      	add	r3, sp, #12
 8007f90:	9300      	str	r3, [sp, #0]
 8007f92:	462a      	mov	r2, r5
 8007f94:	4b12      	ldr	r3, [pc, #72]	@ (8007fe0 <_vfiprintf_r+0x228>)
 8007f96:	a904      	add	r1, sp, #16
 8007f98:	4630      	mov	r0, r6
 8007f9a:	f7fd fbdb 	bl	8005754 <_printf_float>
 8007f9e:	4607      	mov	r7, r0
 8007fa0:	1c78      	adds	r0, r7, #1
 8007fa2:	d1d6      	bne.n	8007f52 <_vfiprintf_r+0x19a>
 8007fa4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fa6:	07d9      	lsls	r1, r3, #31
 8007fa8:	d405      	bmi.n	8007fb6 <_vfiprintf_r+0x1fe>
 8007faa:	89ab      	ldrh	r3, [r5, #12]
 8007fac:	059a      	lsls	r2, r3, #22
 8007fae:	d402      	bmi.n	8007fb6 <_vfiprintf_r+0x1fe>
 8007fb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fb2:	f7fe f92b 	bl	800620c <__retarget_lock_release_recursive>
 8007fb6:	89ab      	ldrh	r3, [r5, #12]
 8007fb8:	065b      	lsls	r3, r3, #25
 8007fba:	f53f af1f 	bmi.w	8007dfc <_vfiprintf_r+0x44>
 8007fbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007fc0:	e71e      	b.n	8007e00 <_vfiprintf_r+0x48>
 8007fc2:	ab03      	add	r3, sp, #12
 8007fc4:	9300      	str	r3, [sp, #0]
 8007fc6:	462a      	mov	r2, r5
 8007fc8:	4b05      	ldr	r3, [pc, #20]	@ (8007fe0 <_vfiprintf_r+0x228>)
 8007fca:	a904      	add	r1, sp, #16
 8007fcc:	4630      	mov	r0, r6
 8007fce:	f7fd fe59 	bl	8005c84 <_printf_i>
 8007fd2:	e7e4      	b.n	8007f9e <_vfiprintf_r+0x1e6>
 8007fd4:	08009420 	.word	0x08009420
 8007fd8:	0800942a 	.word	0x0800942a
 8007fdc:	08005755 	.word	0x08005755
 8007fe0:	08007d95 	.word	0x08007d95
 8007fe4:	08009426 	.word	0x08009426

08007fe8 <__swbuf_r>:
 8007fe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fea:	460e      	mov	r6, r1
 8007fec:	4614      	mov	r4, r2
 8007fee:	4605      	mov	r5, r0
 8007ff0:	b118      	cbz	r0, 8007ffa <__swbuf_r+0x12>
 8007ff2:	6a03      	ldr	r3, [r0, #32]
 8007ff4:	b90b      	cbnz	r3, 8007ffa <__swbuf_r+0x12>
 8007ff6:	f7fd fff1 	bl	8005fdc <__sinit>
 8007ffa:	69a3      	ldr	r3, [r4, #24]
 8007ffc:	60a3      	str	r3, [r4, #8]
 8007ffe:	89a3      	ldrh	r3, [r4, #12]
 8008000:	071a      	lsls	r2, r3, #28
 8008002:	d501      	bpl.n	8008008 <__swbuf_r+0x20>
 8008004:	6923      	ldr	r3, [r4, #16]
 8008006:	b943      	cbnz	r3, 800801a <__swbuf_r+0x32>
 8008008:	4621      	mov	r1, r4
 800800a:	4628      	mov	r0, r5
 800800c:	f000 f82a 	bl	8008064 <__swsetup_r>
 8008010:	b118      	cbz	r0, 800801a <__swbuf_r+0x32>
 8008012:	f04f 37ff 	mov.w	r7, #4294967295
 8008016:	4638      	mov	r0, r7
 8008018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800801a:	6823      	ldr	r3, [r4, #0]
 800801c:	6922      	ldr	r2, [r4, #16]
 800801e:	1a98      	subs	r0, r3, r2
 8008020:	6963      	ldr	r3, [r4, #20]
 8008022:	b2f6      	uxtb	r6, r6
 8008024:	4283      	cmp	r3, r0
 8008026:	4637      	mov	r7, r6
 8008028:	dc05      	bgt.n	8008036 <__swbuf_r+0x4e>
 800802a:	4621      	mov	r1, r4
 800802c:	4628      	mov	r0, r5
 800802e:	f7ff fd99 	bl	8007b64 <_fflush_r>
 8008032:	2800      	cmp	r0, #0
 8008034:	d1ed      	bne.n	8008012 <__swbuf_r+0x2a>
 8008036:	68a3      	ldr	r3, [r4, #8]
 8008038:	3b01      	subs	r3, #1
 800803a:	60a3      	str	r3, [r4, #8]
 800803c:	6823      	ldr	r3, [r4, #0]
 800803e:	1c5a      	adds	r2, r3, #1
 8008040:	6022      	str	r2, [r4, #0]
 8008042:	701e      	strb	r6, [r3, #0]
 8008044:	6962      	ldr	r2, [r4, #20]
 8008046:	1c43      	adds	r3, r0, #1
 8008048:	429a      	cmp	r2, r3
 800804a:	d004      	beq.n	8008056 <__swbuf_r+0x6e>
 800804c:	89a3      	ldrh	r3, [r4, #12]
 800804e:	07db      	lsls	r3, r3, #31
 8008050:	d5e1      	bpl.n	8008016 <__swbuf_r+0x2e>
 8008052:	2e0a      	cmp	r6, #10
 8008054:	d1df      	bne.n	8008016 <__swbuf_r+0x2e>
 8008056:	4621      	mov	r1, r4
 8008058:	4628      	mov	r0, r5
 800805a:	f7ff fd83 	bl	8007b64 <_fflush_r>
 800805e:	2800      	cmp	r0, #0
 8008060:	d0d9      	beq.n	8008016 <__swbuf_r+0x2e>
 8008062:	e7d6      	b.n	8008012 <__swbuf_r+0x2a>

08008064 <__swsetup_r>:
 8008064:	b538      	push	{r3, r4, r5, lr}
 8008066:	4b29      	ldr	r3, [pc, #164]	@ (800810c <__swsetup_r+0xa8>)
 8008068:	4605      	mov	r5, r0
 800806a:	6818      	ldr	r0, [r3, #0]
 800806c:	460c      	mov	r4, r1
 800806e:	b118      	cbz	r0, 8008078 <__swsetup_r+0x14>
 8008070:	6a03      	ldr	r3, [r0, #32]
 8008072:	b90b      	cbnz	r3, 8008078 <__swsetup_r+0x14>
 8008074:	f7fd ffb2 	bl	8005fdc <__sinit>
 8008078:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800807c:	0719      	lsls	r1, r3, #28
 800807e:	d422      	bmi.n	80080c6 <__swsetup_r+0x62>
 8008080:	06da      	lsls	r2, r3, #27
 8008082:	d407      	bmi.n	8008094 <__swsetup_r+0x30>
 8008084:	2209      	movs	r2, #9
 8008086:	602a      	str	r2, [r5, #0]
 8008088:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800808c:	81a3      	strh	r3, [r4, #12]
 800808e:	f04f 30ff 	mov.w	r0, #4294967295
 8008092:	e033      	b.n	80080fc <__swsetup_r+0x98>
 8008094:	0758      	lsls	r0, r3, #29
 8008096:	d512      	bpl.n	80080be <__swsetup_r+0x5a>
 8008098:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800809a:	b141      	cbz	r1, 80080ae <__swsetup_r+0x4a>
 800809c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80080a0:	4299      	cmp	r1, r3
 80080a2:	d002      	beq.n	80080aa <__swsetup_r+0x46>
 80080a4:	4628      	mov	r0, r5
 80080a6:	f7fe feff 	bl	8006ea8 <_free_r>
 80080aa:	2300      	movs	r3, #0
 80080ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80080ae:	89a3      	ldrh	r3, [r4, #12]
 80080b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80080b4:	81a3      	strh	r3, [r4, #12]
 80080b6:	2300      	movs	r3, #0
 80080b8:	6063      	str	r3, [r4, #4]
 80080ba:	6923      	ldr	r3, [r4, #16]
 80080bc:	6023      	str	r3, [r4, #0]
 80080be:	89a3      	ldrh	r3, [r4, #12]
 80080c0:	f043 0308 	orr.w	r3, r3, #8
 80080c4:	81a3      	strh	r3, [r4, #12]
 80080c6:	6923      	ldr	r3, [r4, #16]
 80080c8:	b94b      	cbnz	r3, 80080de <__swsetup_r+0x7a>
 80080ca:	89a3      	ldrh	r3, [r4, #12]
 80080cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80080d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080d4:	d003      	beq.n	80080de <__swsetup_r+0x7a>
 80080d6:	4621      	mov	r1, r4
 80080d8:	4628      	mov	r0, r5
 80080da:	f000 f883 	bl	80081e4 <__smakebuf_r>
 80080de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080e2:	f013 0201 	ands.w	r2, r3, #1
 80080e6:	d00a      	beq.n	80080fe <__swsetup_r+0x9a>
 80080e8:	2200      	movs	r2, #0
 80080ea:	60a2      	str	r2, [r4, #8]
 80080ec:	6962      	ldr	r2, [r4, #20]
 80080ee:	4252      	negs	r2, r2
 80080f0:	61a2      	str	r2, [r4, #24]
 80080f2:	6922      	ldr	r2, [r4, #16]
 80080f4:	b942      	cbnz	r2, 8008108 <__swsetup_r+0xa4>
 80080f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80080fa:	d1c5      	bne.n	8008088 <__swsetup_r+0x24>
 80080fc:	bd38      	pop	{r3, r4, r5, pc}
 80080fe:	0799      	lsls	r1, r3, #30
 8008100:	bf58      	it	pl
 8008102:	6962      	ldrpl	r2, [r4, #20]
 8008104:	60a2      	str	r2, [r4, #8]
 8008106:	e7f4      	b.n	80080f2 <__swsetup_r+0x8e>
 8008108:	2000      	movs	r0, #0
 800810a:	e7f7      	b.n	80080fc <__swsetup_r+0x98>
 800810c:	20000018 	.word	0x20000018

08008110 <_raise_r>:
 8008110:	291f      	cmp	r1, #31
 8008112:	b538      	push	{r3, r4, r5, lr}
 8008114:	4605      	mov	r5, r0
 8008116:	460c      	mov	r4, r1
 8008118:	d904      	bls.n	8008124 <_raise_r+0x14>
 800811a:	2316      	movs	r3, #22
 800811c:	6003      	str	r3, [r0, #0]
 800811e:	f04f 30ff 	mov.w	r0, #4294967295
 8008122:	bd38      	pop	{r3, r4, r5, pc}
 8008124:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008126:	b112      	cbz	r2, 800812e <_raise_r+0x1e>
 8008128:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800812c:	b94b      	cbnz	r3, 8008142 <_raise_r+0x32>
 800812e:	4628      	mov	r0, r5
 8008130:	f000 f830 	bl	8008194 <_getpid_r>
 8008134:	4622      	mov	r2, r4
 8008136:	4601      	mov	r1, r0
 8008138:	4628      	mov	r0, r5
 800813a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800813e:	f000 b817 	b.w	8008170 <_kill_r>
 8008142:	2b01      	cmp	r3, #1
 8008144:	d00a      	beq.n	800815c <_raise_r+0x4c>
 8008146:	1c59      	adds	r1, r3, #1
 8008148:	d103      	bne.n	8008152 <_raise_r+0x42>
 800814a:	2316      	movs	r3, #22
 800814c:	6003      	str	r3, [r0, #0]
 800814e:	2001      	movs	r0, #1
 8008150:	e7e7      	b.n	8008122 <_raise_r+0x12>
 8008152:	2100      	movs	r1, #0
 8008154:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008158:	4620      	mov	r0, r4
 800815a:	4798      	blx	r3
 800815c:	2000      	movs	r0, #0
 800815e:	e7e0      	b.n	8008122 <_raise_r+0x12>

08008160 <raise>:
 8008160:	4b02      	ldr	r3, [pc, #8]	@ (800816c <raise+0xc>)
 8008162:	4601      	mov	r1, r0
 8008164:	6818      	ldr	r0, [r3, #0]
 8008166:	f7ff bfd3 	b.w	8008110 <_raise_r>
 800816a:	bf00      	nop
 800816c:	20000018 	.word	0x20000018

08008170 <_kill_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4d07      	ldr	r5, [pc, #28]	@ (8008190 <_kill_r+0x20>)
 8008174:	2300      	movs	r3, #0
 8008176:	4604      	mov	r4, r0
 8008178:	4608      	mov	r0, r1
 800817a:	4611      	mov	r1, r2
 800817c:	602b      	str	r3, [r5, #0]
 800817e:	f7fa f9c8 	bl	8002512 <_kill>
 8008182:	1c43      	adds	r3, r0, #1
 8008184:	d102      	bne.n	800818c <_kill_r+0x1c>
 8008186:	682b      	ldr	r3, [r5, #0]
 8008188:	b103      	cbz	r3, 800818c <_kill_r+0x1c>
 800818a:	6023      	str	r3, [r4, #0]
 800818c:	bd38      	pop	{r3, r4, r5, pc}
 800818e:	bf00      	nop
 8008190:	20000524 	.word	0x20000524

08008194 <_getpid_r>:
 8008194:	f7fa b9b5 	b.w	8002502 <_getpid>

08008198 <__swhatbuf_r>:
 8008198:	b570      	push	{r4, r5, r6, lr}
 800819a:	460c      	mov	r4, r1
 800819c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081a0:	2900      	cmp	r1, #0
 80081a2:	b096      	sub	sp, #88	@ 0x58
 80081a4:	4615      	mov	r5, r2
 80081a6:	461e      	mov	r6, r3
 80081a8:	da0d      	bge.n	80081c6 <__swhatbuf_r+0x2e>
 80081aa:	89a3      	ldrh	r3, [r4, #12]
 80081ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80081b0:	f04f 0100 	mov.w	r1, #0
 80081b4:	bf14      	ite	ne
 80081b6:	2340      	movne	r3, #64	@ 0x40
 80081b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80081bc:	2000      	movs	r0, #0
 80081be:	6031      	str	r1, [r6, #0]
 80081c0:	602b      	str	r3, [r5, #0]
 80081c2:	b016      	add	sp, #88	@ 0x58
 80081c4:	bd70      	pop	{r4, r5, r6, pc}
 80081c6:	466a      	mov	r2, sp
 80081c8:	f000 f848 	bl	800825c <_fstat_r>
 80081cc:	2800      	cmp	r0, #0
 80081ce:	dbec      	blt.n	80081aa <__swhatbuf_r+0x12>
 80081d0:	9901      	ldr	r1, [sp, #4]
 80081d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80081d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80081da:	4259      	negs	r1, r3
 80081dc:	4159      	adcs	r1, r3
 80081de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081e2:	e7eb      	b.n	80081bc <__swhatbuf_r+0x24>

080081e4 <__smakebuf_r>:
 80081e4:	898b      	ldrh	r3, [r1, #12]
 80081e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081e8:	079d      	lsls	r5, r3, #30
 80081ea:	4606      	mov	r6, r0
 80081ec:	460c      	mov	r4, r1
 80081ee:	d507      	bpl.n	8008200 <__smakebuf_r+0x1c>
 80081f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80081f4:	6023      	str	r3, [r4, #0]
 80081f6:	6123      	str	r3, [r4, #16]
 80081f8:	2301      	movs	r3, #1
 80081fa:	6163      	str	r3, [r4, #20]
 80081fc:	b003      	add	sp, #12
 80081fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008200:	ab01      	add	r3, sp, #4
 8008202:	466a      	mov	r2, sp
 8008204:	f7ff ffc8 	bl	8008198 <__swhatbuf_r>
 8008208:	9f00      	ldr	r7, [sp, #0]
 800820a:	4605      	mov	r5, r0
 800820c:	4639      	mov	r1, r7
 800820e:	4630      	mov	r0, r6
 8008210:	f7fe febe 	bl	8006f90 <_malloc_r>
 8008214:	b948      	cbnz	r0, 800822a <__smakebuf_r+0x46>
 8008216:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800821a:	059a      	lsls	r2, r3, #22
 800821c:	d4ee      	bmi.n	80081fc <__smakebuf_r+0x18>
 800821e:	f023 0303 	bic.w	r3, r3, #3
 8008222:	f043 0302 	orr.w	r3, r3, #2
 8008226:	81a3      	strh	r3, [r4, #12]
 8008228:	e7e2      	b.n	80081f0 <__smakebuf_r+0xc>
 800822a:	89a3      	ldrh	r3, [r4, #12]
 800822c:	6020      	str	r0, [r4, #0]
 800822e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008232:	81a3      	strh	r3, [r4, #12]
 8008234:	9b01      	ldr	r3, [sp, #4]
 8008236:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800823a:	b15b      	cbz	r3, 8008254 <__smakebuf_r+0x70>
 800823c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008240:	4630      	mov	r0, r6
 8008242:	f000 f81d 	bl	8008280 <_isatty_r>
 8008246:	b128      	cbz	r0, 8008254 <__smakebuf_r+0x70>
 8008248:	89a3      	ldrh	r3, [r4, #12]
 800824a:	f023 0303 	bic.w	r3, r3, #3
 800824e:	f043 0301 	orr.w	r3, r3, #1
 8008252:	81a3      	strh	r3, [r4, #12]
 8008254:	89a3      	ldrh	r3, [r4, #12]
 8008256:	431d      	orrs	r5, r3
 8008258:	81a5      	strh	r5, [r4, #12]
 800825a:	e7cf      	b.n	80081fc <__smakebuf_r+0x18>

0800825c <_fstat_r>:
 800825c:	b538      	push	{r3, r4, r5, lr}
 800825e:	4d07      	ldr	r5, [pc, #28]	@ (800827c <_fstat_r+0x20>)
 8008260:	2300      	movs	r3, #0
 8008262:	4604      	mov	r4, r0
 8008264:	4608      	mov	r0, r1
 8008266:	4611      	mov	r1, r2
 8008268:	602b      	str	r3, [r5, #0]
 800826a:	f7fa f9b2 	bl	80025d2 <_fstat>
 800826e:	1c43      	adds	r3, r0, #1
 8008270:	d102      	bne.n	8008278 <_fstat_r+0x1c>
 8008272:	682b      	ldr	r3, [r5, #0]
 8008274:	b103      	cbz	r3, 8008278 <_fstat_r+0x1c>
 8008276:	6023      	str	r3, [r4, #0]
 8008278:	bd38      	pop	{r3, r4, r5, pc}
 800827a:	bf00      	nop
 800827c:	20000524 	.word	0x20000524

08008280 <_isatty_r>:
 8008280:	b538      	push	{r3, r4, r5, lr}
 8008282:	4d06      	ldr	r5, [pc, #24]	@ (800829c <_isatty_r+0x1c>)
 8008284:	2300      	movs	r3, #0
 8008286:	4604      	mov	r4, r0
 8008288:	4608      	mov	r0, r1
 800828a:	602b      	str	r3, [r5, #0]
 800828c:	f7fa f9b1 	bl	80025f2 <_isatty>
 8008290:	1c43      	adds	r3, r0, #1
 8008292:	d102      	bne.n	800829a <_isatty_r+0x1a>
 8008294:	682b      	ldr	r3, [r5, #0]
 8008296:	b103      	cbz	r3, 800829a <_isatty_r+0x1a>
 8008298:	6023      	str	r3, [r4, #0]
 800829a:	bd38      	pop	{r3, r4, r5, pc}
 800829c:	20000524 	.word	0x20000524

080082a0 <pow>:
 80082a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082a2:	ed2d 8b02 	vpush	{d8}
 80082a6:	eeb0 8a40 	vmov.f32	s16, s0
 80082aa:	eef0 8a60 	vmov.f32	s17, s1
 80082ae:	ec55 4b11 	vmov	r4, r5, d1
 80082b2:	f000 f871 	bl	8008398 <__ieee754_pow>
 80082b6:	4622      	mov	r2, r4
 80082b8:	462b      	mov	r3, r5
 80082ba:	4620      	mov	r0, r4
 80082bc:	4629      	mov	r1, r5
 80082be:	ec57 6b10 	vmov	r6, r7, d0
 80082c2:	f7f8 fc33 	bl	8000b2c <__aeabi_dcmpun>
 80082c6:	2800      	cmp	r0, #0
 80082c8:	d13b      	bne.n	8008342 <pow+0xa2>
 80082ca:	ec51 0b18 	vmov	r0, r1, d8
 80082ce:	2200      	movs	r2, #0
 80082d0:	2300      	movs	r3, #0
 80082d2:	f7f8 fbf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80082d6:	b1b8      	cbz	r0, 8008308 <pow+0x68>
 80082d8:	2200      	movs	r2, #0
 80082da:	2300      	movs	r3, #0
 80082dc:	4620      	mov	r0, r4
 80082de:	4629      	mov	r1, r5
 80082e0:	f7f8 fbf2 	bl	8000ac8 <__aeabi_dcmpeq>
 80082e4:	2800      	cmp	r0, #0
 80082e6:	d146      	bne.n	8008376 <pow+0xd6>
 80082e8:	ec45 4b10 	vmov	d0, r4, r5
 80082ec:	f000 f848 	bl	8008380 <finite>
 80082f0:	b338      	cbz	r0, 8008342 <pow+0xa2>
 80082f2:	2200      	movs	r2, #0
 80082f4:	2300      	movs	r3, #0
 80082f6:	4620      	mov	r0, r4
 80082f8:	4629      	mov	r1, r5
 80082fa:	f7f8 fbef 	bl	8000adc <__aeabi_dcmplt>
 80082fe:	b300      	cbz	r0, 8008342 <pow+0xa2>
 8008300:	f7fd ff58 	bl	80061b4 <__errno>
 8008304:	2322      	movs	r3, #34	@ 0x22
 8008306:	e01b      	b.n	8008340 <pow+0xa0>
 8008308:	ec47 6b10 	vmov	d0, r6, r7
 800830c:	f000 f838 	bl	8008380 <finite>
 8008310:	b9e0      	cbnz	r0, 800834c <pow+0xac>
 8008312:	eeb0 0a48 	vmov.f32	s0, s16
 8008316:	eef0 0a68 	vmov.f32	s1, s17
 800831a:	f000 f831 	bl	8008380 <finite>
 800831e:	b1a8      	cbz	r0, 800834c <pow+0xac>
 8008320:	ec45 4b10 	vmov	d0, r4, r5
 8008324:	f000 f82c 	bl	8008380 <finite>
 8008328:	b180      	cbz	r0, 800834c <pow+0xac>
 800832a:	4632      	mov	r2, r6
 800832c:	463b      	mov	r3, r7
 800832e:	4630      	mov	r0, r6
 8008330:	4639      	mov	r1, r7
 8008332:	f7f8 fbfb 	bl	8000b2c <__aeabi_dcmpun>
 8008336:	2800      	cmp	r0, #0
 8008338:	d0e2      	beq.n	8008300 <pow+0x60>
 800833a:	f7fd ff3b 	bl	80061b4 <__errno>
 800833e:	2321      	movs	r3, #33	@ 0x21
 8008340:	6003      	str	r3, [r0, #0]
 8008342:	ecbd 8b02 	vpop	{d8}
 8008346:	ec47 6b10 	vmov	d0, r6, r7
 800834a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800834c:	2200      	movs	r2, #0
 800834e:	2300      	movs	r3, #0
 8008350:	4630      	mov	r0, r6
 8008352:	4639      	mov	r1, r7
 8008354:	f7f8 fbb8 	bl	8000ac8 <__aeabi_dcmpeq>
 8008358:	2800      	cmp	r0, #0
 800835a:	d0f2      	beq.n	8008342 <pow+0xa2>
 800835c:	eeb0 0a48 	vmov.f32	s0, s16
 8008360:	eef0 0a68 	vmov.f32	s1, s17
 8008364:	f000 f80c 	bl	8008380 <finite>
 8008368:	2800      	cmp	r0, #0
 800836a:	d0ea      	beq.n	8008342 <pow+0xa2>
 800836c:	ec45 4b10 	vmov	d0, r4, r5
 8008370:	f000 f806 	bl	8008380 <finite>
 8008374:	e7c3      	b.n	80082fe <pow+0x5e>
 8008376:	4f01      	ldr	r7, [pc, #4]	@ (800837c <pow+0xdc>)
 8008378:	2600      	movs	r6, #0
 800837a:	e7e2      	b.n	8008342 <pow+0xa2>
 800837c:	3ff00000 	.word	0x3ff00000

08008380 <finite>:
 8008380:	b082      	sub	sp, #8
 8008382:	ed8d 0b00 	vstr	d0, [sp]
 8008386:	9801      	ldr	r0, [sp, #4]
 8008388:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800838c:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008390:	0fc0      	lsrs	r0, r0, #31
 8008392:	b002      	add	sp, #8
 8008394:	4770      	bx	lr
	...

08008398 <__ieee754_pow>:
 8008398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800839c:	b091      	sub	sp, #68	@ 0x44
 800839e:	ed8d 1b00 	vstr	d1, [sp]
 80083a2:	e9dd 1900 	ldrd	r1, r9, [sp]
 80083a6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 80083aa:	ea5a 0001 	orrs.w	r0, sl, r1
 80083ae:	ec57 6b10 	vmov	r6, r7, d0
 80083b2:	d113      	bne.n	80083dc <__ieee754_pow+0x44>
 80083b4:	19b3      	adds	r3, r6, r6
 80083b6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 80083ba:	4152      	adcs	r2, r2
 80083bc:	4298      	cmp	r0, r3
 80083be:	4b98      	ldr	r3, [pc, #608]	@ (8008620 <__ieee754_pow+0x288>)
 80083c0:	4193      	sbcs	r3, r2
 80083c2:	f080 84ea 	bcs.w	8008d9a <__ieee754_pow+0xa02>
 80083c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083ca:	4630      	mov	r0, r6
 80083cc:	4639      	mov	r1, r7
 80083ce:	f7f7 ff5d 	bl	800028c <__adddf3>
 80083d2:	ec41 0b10 	vmov	d0, r0, r1
 80083d6:	b011      	add	sp, #68	@ 0x44
 80083d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083dc:	4a91      	ldr	r2, [pc, #580]	@ (8008624 <__ieee754_pow+0x28c>)
 80083de:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 80083e2:	4590      	cmp	r8, r2
 80083e4:	463d      	mov	r5, r7
 80083e6:	4633      	mov	r3, r6
 80083e8:	d806      	bhi.n	80083f8 <__ieee754_pow+0x60>
 80083ea:	d101      	bne.n	80083f0 <__ieee754_pow+0x58>
 80083ec:	2e00      	cmp	r6, #0
 80083ee:	d1ea      	bne.n	80083c6 <__ieee754_pow+0x2e>
 80083f0:	4592      	cmp	sl, r2
 80083f2:	d801      	bhi.n	80083f8 <__ieee754_pow+0x60>
 80083f4:	d10e      	bne.n	8008414 <__ieee754_pow+0x7c>
 80083f6:	b169      	cbz	r1, 8008414 <__ieee754_pow+0x7c>
 80083f8:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 80083fc:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008400:	431d      	orrs	r5, r3
 8008402:	d1e0      	bne.n	80083c6 <__ieee754_pow+0x2e>
 8008404:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008408:	18db      	adds	r3, r3, r3
 800840a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800840e:	4152      	adcs	r2, r2
 8008410:	429d      	cmp	r5, r3
 8008412:	e7d4      	b.n	80083be <__ieee754_pow+0x26>
 8008414:	2d00      	cmp	r5, #0
 8008416:	46c3      	mov	fp, r8
 8008418:	da3a      	bge.n	8008490 <__ieee754_pow+0xf8>
 800841a:	4a83      	ldr	r2, [pc, #524]	@ (8008628 <__ieee754_pow+0x290>)
 800841c:	4592      	cmp	sl, r2
 800841e:	d84d      	bhi.n	80084bc <__ieee754_pow+0x124>
 8008420:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008424:	4592      	cmp	sl, r2
 8008426:	f240 84c7 	bls.w	8008db8 <__ieee754_pow+0xa20>
 800842a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800842e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008432:	2a14      	cmp	r2, #20
 8008434:	dd0f      	ble.n	8008456 <__ieee754_pow+0xbe>
 8008436:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800843a:	fa21 f402 	lsr.w	r4, r1, r2
 800843e:	fa04 f202 	lsl.w	r2, r4, r2
 8008442:	428a      	cmp	r2, r1
 8008444:	f040 84b8 	bne.w	8008db8 <__ieee754_pow+0xa20>
 8008448:	f004 0401 	and.w	r4, r4, #1
 800844c:	f1c4 0402 	rsb	r4, r4, #2
 8008450:	2900      	cmp	r1, #0
 8008452:	d158      	bne.n	8008506 <__ieee754_pow+0x16e>
 8008454:	e00e      	b.n	8008474 <__ieee754_pow+0xdc>
 8008456:	2900      	cmp	r1, #0
 8008458:	d154      	bne.n	8008504 <__ieee754_pow+0x16c>
 800845a:	f1c2 0214 	rsb	r2, r2, #20
 800845e:	fa4a f402 	asr.w	r4, sl, r2
 8008462:	fa04 f202 	lsl.w	r2, r4, r2
 8008466:	4552      	cmp	r2, sl
 8008468:	f040 84a3 	bne.w	8008db2 <__ieee754_pow+0xa1a>
 800846c:	f004 0401 	and.w	r4, r4, #1
 8008470:	f1c4 0402 	rsb	r4, r4, #2
 8008474:	4a6d      	ldr	r2, [pc, #436]	@ (800862c <__ieee754_pow+0x294>)
 8008476:	4592      	cmp	sl, r2
 8008478:	d12e      	bne.n	80084d8 <__ieee754_pow+0x140>
 800847a:	f1b9 0f00 	cmp.w	r9, #0
 800847e:	f280 8494 	bge.w	8008daa <__ieee754_pow+0xa12>
 8008482:	496a      	ldr	r1, [pc, #424]	@ (800862c <__ieee754_pow+0x294>)
 8008484:	4632      	mov	r2, r6
 8008486:	463b      	mov	r3, r7
 8008488:	2000      	movs	r0, #0
 800848a:	f7f8 f9df 	bl	800084c <__aeabi_ddiv>
 800848e:	e7a0      	b.n	80083d2 <__ieee754_pow+0x3a>
 8008490:	2400      	movs	r4, #0
 8008492:	bbc1      	cbnz	r1, 8008506 <__ieee754_pow+0x16e>
 8008494:	4a63      	ldr	r2, [pc, #396]	@ (8008624 <__ieee754_pow+0x28c>)
 8008496:	4592      	cmp	sl, r2
 8008498:	d1ec      	bne.n	8008474 <__ieee754_pow+0xdc>
 800849a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800849e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 80084a2:	431a      	orrs	r2, r3
 80084a4:	f000 8479 	beq.w	8008d9a <__ieee754_pow+0xa02>
 80084a8:	4b61      	ldr	r3, [pc, #388]	@ (8008630 <__ieee754_pow+0x298>)
 80084aa:	4598      	cmp	r8, r3
 80084ac:	d908      	bls.n	80084c0 <__ieee754_pow+0x128>
 80084ae:	f1b9 0f00 	cmp.w	r9, #0
 80084b2:	f2c0 8476 	blt.w	8008da2 <__ieee754_pow+0xa0a>
 80084b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084ba:	e78a      	b.n	80083d2 <__ieee754_pow+0x3a>
 80084bc:	2402      	movs	r4, #2
 80084be:	e7e8      	b.n	8008492 <__ieee754_pow+0xfa>
 80084c0:	f1b9 0f00 	cmp.w	r9, #0
 80084c4:	f04f 0000 	mov.w	r0, #0
 80084c8:	f04f 0100 	mov.w	r1, #0
 80084cc:	da81      	bge.n	80083d2 <__ieee754_pow+0x3a>
 80084ce:	e9dd 0300 	ldrd	r0, r3, [sp]
 80084d2:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 80084d6:	e77c      	b.n	80083d2 <__ieee754_pow+0x3a>
 80084d8:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 80084dc:	d106      	bne.n	80084ec <__ieee754_pow+0x154>
 80084de:	4632      	mov	r2, r6
 80084e0:	463b      	mov	r3, r7
 80084e2:	4630      	mov	r0, r6
 80084e4:	4639      	mov	r1, r7
 80084e6:	f7f8 f887 	bl	80005f8 <__aeabi_dmul>
 80084ea:	e772      	b.n	80083d2 <__ieee754_pow+0x3a>
 80084ec:	4a51      	ldr	r2, [pc, #324]	@ (8008634 <__ieee754_pow+0x29c>)
 80084ee:	4591      	cmp	r9, r2
 80084f0:	d109      	bne.n	8008506 <__ieee754_pow+0x16e>
 80084f2:	2d00      	cmp	r5, #0
 80084f4:	db07      	blt.n	8008506 <__ieee754_pow+0x16e>
 80084f6:	ec47 6b10 	vmov	d0, r6, r7
 80084fa:	b011      	add	sp, #68	@ 0x44
 80084fc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008500:	f000 bd52 	b.w	8008fa8 <__ieee754_sqrt>
 8008504:	2400      	movs	r4, #0
 8008506:	ec47 6b10 	vmov	d0, r6, r7
 800850a:	9302      	str	r3, [sp, #8]
 800850c:	f000 fc88 	bl	8008e20 <fabs>
 8008510:	9b02      	ldr	r3, [sp, #8]
 8008512:	ec51 0b10 	vmov	r0, r1, d0
 8008516:	bb53      	cbnz	r3, 800856e <__ieee754_pow+0x1d6>
 8008518:	4b44      	ldr	r3, [pc, #272]	@ (800862c <__ieee754_pow+0x294>)
 800851a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800851e:	429a      	cmp	r2, r3
 8008520:	d002      	beq.n	8008528 <__ieee754_pow+0x190>
 8008522:	f1b8 0f00 	cmp.w	r8, #0
 8008526:	d122      	bne.n	800856e <__ieee754_pow+0x1d6>
 8008528:	f1b9 0f00 	cmp.w	r9, #0
 800852c:	da05      	bge.n	800853a <__ieee754_pow+0x1a2>
 800852e:	4602      	mov	r2, r0
 8008530:	460b      	mov	r3, r1
 8008532:	2000      	movs	r0, #0
 8008534:	493d      	ldr	r1, [pc, #244]	@ (800862c <__ieee754_pow+0x294>)
 8008536:	f7f8 f989 	bl	800084c <__aeabi_ddiv>
 800853a:	2d00      	cmp	r5, #0
 800853c:	f6bf af49 	bge.w	80083d2 <__ieee754_pow+0x3a>
 8008540:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 8008544:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 8008548:	ea58 0804 	orrs.w	r8, r8, r4
 800854c:	d108      	bne.n	8008560 <__ieee754_pow+0x1c8>
 800854e:	4602      	mov	r2, r0
 8008550:	460b      	mov	r3, r1
 8008552:	4610      	mov	r0, r2
 8008554:	4619      	mov	r1, r3
 8008556:	f7f7 fe97 	bl	8000288 <__aeabi_dsub>
 800855a:	4602      	mov	r2, r0
 800855c:	460b      	mov	r3, r1
 800855e:	e794      	b.n	800848a <__ieee754_pow+0xf2>
 8008560:	2c01      	cmp	r4, #1
 8008562:	f47f af36 	bne.w	80083d2 <__ieee754_pow+0x3a>
 8008566:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800856a:	4619      	mov	r1, r3
 800856c:	e731      	b.n	80083d2 <__ieee754_pow+0x3a>
 800856e:	0feb      	lsrs	r3, r5, #31
 8008570:	3b01      	subs	r3, #1
 8008572:	ea53 0204 	orrs.w	r2, r3, r4
 8008576:	d102      	bne.n	800857e <__ieee754_pow+0x1e6>
 8008578:	4632      	mov	r2, r6
 800857a:	463b      	mov	r3, r7
 800857c:	e7e9      	b.n	8008552 <__ieee754_pow+0x1ba>
 800857e:	3c01      	subs	r4, #1
 8008580:	431c      	orrs	r4, r3
 8008582:	d016      	beq.n	80085b2 <__ieee754_pow+0x21a>
 8008584:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 8008610 <__ieee754_pow+0x278>
 8008588:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800858c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008590:	f240 8112 	bls.w	80087b8 <__ieee754_pow+0x420>
 8008594:	4b28      	ldr	r3, [pc, #160]	@ (8008638 <__ieee754_pow+0x2a0>)
 8008596:	459a      	cmp	sl, r3
 8008598:	4b25      	ldr	r3, [pc, #148]	@ (8008630 <__ieee754_pow+0x298>)
 800859a:	d916      	bls.n	80085ca <__ieee754_pow+0x232>
 800859c:	4598      	cmp	r8, r3
 800859e:	d80b      	bhi.n	80085b8 <__ieee754_pow+0x220>
 80085a0:	f1b9 0f00 	cmp.w	r9, #0
 80085a4:	da0b      	bge.n	80085be <__ieee754_pow+0x226>
 80085a6:	2000      	movs	r0, #0
 80085a8:	b011      	add	sp, #68	@ 0x44
 80085aa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085ae:	f000 bcf3 	b.w	8008f98 <__math_oflow>
 80085b2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 8008618 <__ieee754_pow+0x280>
 80085b6:	e7e7      	b.n	8008588 <__ieee754_pow+0x1f0>
 80085b8:	f1b9 0f00 	cmp.w	r9, #0
 80085bc:	dcf3      	bgt.n	80085a6 <__ieee754_pow+0x20e>
 80085be:	2000      	movs	r0, #0
 80085c0:	b011      	add	sp, #68	@ 0x44
 80085c2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085c6:	f000 bcdf 	b.w	8008f88 <__math_uflow>
 80085ca:	4598      	cmp	r8, r3
 80085cc:	d20c      	bcs.n	80085e8 <__ieee754_pow+0x250>
 80085ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085d2:	2200      	movs	r2, #0
 80085d4:	2300      	movs	r3, #0
 80085d6:	f7f8 fa81 	bl	8000adc <__aeabi_dcmplt>
 80085da:	3800      	subs	r0, #0
 80085dc:	bf18      	it	ne
 80085de:	2001      	movne	r0, #1
 80085e0:	f1b9 0f00 	cmp.w	r9, #0
 80085e4:	daec      	bge.n	80085c0 <__ieee754_pow+0x228>
 80085e6:	e7df      	b.n	80085a8 <__ieee754_pow+0x210>
 80085e8:	4b10      	ldr	r3, [pc, #64]	@ (800862c <__ieee754_pow+0x294>)
 80085ea:	4598      	cmp	r8, r3
 80085ec:	f04f 0200 	mov.w	r2, #0
 80085f0:	d924      	bls.n	800863c <__ieee754_pow+0x2a4>
 80085f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80085f6:	2300      	movs	r3, #0
 80085f8:	f7f8 fa70 	bl	8000adc <__aeabi_dcmplt>
 80085fc:	3800      	subs	r0, #0
 80085fe:	bf18      	it	ne
 8008600:	2001      	movne	r0, #1
 8008602:	f1b9 0f00 	cmp.w	r9, #0
 8008606:	dccf      	bgt.n	80085a8 <__ieee754_pow+0x210>
 8008608:	e7da      	b.n	80085c0 <__ieee754_pow+0x228>
 800860a:	bf00      	nop
 800860c:	f3af 8000 	nop.w
 8008610:	00000000 	.word	0x00000000
 8008614:	3ff00000 	.word	0x3ff00000
 8008618:	00000000 	.word	0x00000000
 800861c:	bff00000 	.word	0xbff00000
 8008620:	fff00000 	.word	0xfff00000
 8008624:	7ff00000 	.word	0x7ff00000
 8008628:	433fffff 	.word	0x433fffff
 800862c:	3ff00000 	.word	0x3ff00000
 8008630:	3fefffff 	.word	0x3fefffff
 8008634:	3fe00000 	.word	0x3fe00000
 8008638:	43f00000 	.word	0x43f00000
 800863c:	4b5a      	ldr	r3, [pc, #360]	@ (80087a8 <__ieee754_pow+0x410>)
 800863e:	f7f7 fe23 	bl	8000288 <__aeabi_dsub>
 8008642:	a351      	add	r3, pc, #324	@ (adr r3, 8008788 <__ieee754_pow+0x3f0>)
 8008644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008648:	4604      	mov	r4, r0
 800864a:	460d      	mov	r5, r1
 800864c:	f7f7 ffd4 	bl	80005f8 <__aeabi_dmul>
 8008650:	a34f      	add	r3, pc, #316	@ (adr r3, 8008790 <__ieee754_pow+0x3f8>)
 8008652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008656:	4606      	mov	r6, r0
 8008658:	460f      	mov	r7, r1
 800865a:	4620      	mov	r0, r4
 800865c:	4629      	mov	r1, r5
 800865e:	f7f7 ffcb 	bl	80005f8 <__aeabi_dmul>
 8008662:	4b52      	ldr	r3, [pc, #328]	@ (80087ac <__ieee754_pow+0x414>)
 8008664:	4682      	mov	sl, r0
 8008666:	468b      	mov	fp, r1
 8008668:	2200      	movs	r2, #0
 800866a:	4620      	mov	r0, r4
 800866c:	4629      	mov	r1, r5
 800866e:	f7f7 ffc3 	bl	80005f8 <__aeabi_dmul>
 8008672:	4602      	mov	r2, r0
 8008674:	460b      	mov	r3, r1
 8008676:	a148      	add	r1, pc, #288	@ (adr r1, 8008798 <__ieee754_pow+0x400>)
 8008678:	e9d1 0100 	ldrd	r0, r1, [r1]
 800867c:	f7f7 fe04 	bl	8000288 <__aeabi_dsub>
 8008680:	4622      	mov	r2, r4
 8008682:	462b      	mov	r3, r5
 8008684:	f7f7 ffb8 	bl	80005f8 <__aeabi_dmul>
 8008688:	4602      	mov	r2, r0
 800868a:	460b      	mov	r3, r1
 800868c:	2000      	movs	r0, #0
 800868e:	4948      	ldr	r1, [pc, #288]	@ (80087b0 <__ieee754_pow+0x418>)
 8008690:	f7f7 fdfa 	bl	8000288 <__aeabi_dsub>
 8008694:	4622      	mov	r2, r4
 8008696:	4680      	mov	r8, r0
 8008698:	4689      	mov	r9, r1
 800869a:	462b      	mov	r3, r5
 800869c:	4620      	mov	r0, r4
 800869e:	4629      	mov	r1, r5
 80086a0:	f7f7 ffaa 	bl	80005f8 <__aeabi_dmul>
 80086a4:	4602      	mov	r2, r0
 80086a6:	460b      	mov	r3, r1
 80086a8:	4640      	mov	r0, r8
 80086aa:	4649      	mov	r1, r9
 80086ac:	f7f7 ffa4 	bl	80005f8 <__aeabi_dmul>
 80086b0:	a33b      	add	r3, pc, #236	@ (adr r3, 80087a0 <__ieee754_pow+0x408>)
 80086b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086b6:	f7f7 ff9f 	bl	80005f8 <__aeabi_dmul>
 80086ba:	4602      	mov	r2, r0
 80086bc:	460b      	mov	r3, r1
 80086be:	4650      	mov	r0, sl
 80086c0:	4659      	mov	r1, fp
 80086c2:	f7f7 fde1 	bl	8000288 <__aeabi_dsub>
 80086c6:	4602      	mov	r2, r0
 80086c8:	460b      	mov	r3, r1
 80086ca:	4680      	mov	r8, r0
 80086cc:	4689      	mov	r9, r1
 80086ce:	4630      	mov	r0, r6
 80086d0:	4639      	mov	r1, r7
 80086d2:	f7f7 fddb 	bl	800028c <__adddf3>
 80086d6:	2400      	movs	r4, #0
 80086d8:	4632      	mov	r2, r6
 80086da:	463b      	mov	r3, r7
 80086dc:	4620      	mov	r0, r4
 80086de:	460d      	mov	r5, r1
 80086e0:	f7f7 fdd2 	bl	8000288 <__aeabi_dsub>
 80086e4:	4602      	mov	r2, r0
 80086e6:	460b      	mov	r3, r1
 80086e8:	4640      	mov	r0, r8
 80086ea:	4649      	mov	r1, r9
 80086ec:	f7f7 fdcc 	bl	8000288 <__aeabi_dsub>
 80086f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80086f4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80086f8:	2300      	movs	r3, #0
 80086fa:	9304      	str	r3, [sp, #16]
 80086fc:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008700:	4606      	mov	r6, r0
 8008702:	460f      	mov	r7, r1
 8008704:	4652      	mov	r2, sl
 8008706:	465b      	mov	r3, fp
 8008708:	e9dd 0100 	ldrd	r0, r1, [sp]
 800870c:	f7f7 fdbc 	bl	8000288 <__aeabi_dsub>
 8008710:	4622      	mov	r2, r4
 8008712:	462b      	mov	r3, r5
 8008714:	f7f7 ff70 	bl	80005f8 <__aeabi_dmul>
 8008718:	e9dd 2300 	ldrd	r2, r3, [sp]
 800871c:	4680      	mov	r8, r0
 800871e:	4689      	mov	r9, r1
 8008720:	4630      	mov	r0, r6
 8008722:	4639      	mov	r1, r7
 8008724:	f7f7 ff68 	bl	80005f8 <__aeabi_dmul>
 8008728:	4602      	mov	r2, r0
 800872a:	460b      	mov	r3, r1
 800872c:	4640      	mov	r0, r8
 800872e:	4649      	mov	r1, r9
 8008730:	f7f7 fdac 	bl	800028c <__adddf3>
 8008734:	4652      	mov	r2, sl
 8008736:	465b      	mov	r3, fp
 8008738:	4606      	mov	r6, r0
 800873a:	460f      	mov	r7, r1
 800873c:	4620      	mov	r0, r4
 800873e:	4629      	mov	r1, r5
 8008740:	f7f7 ff5a 	bl	80005f8 <__aeabi_dmul>
 8008744:	460b      	mov	r3, r1
 8008746:	4602      	mov	r2, r0
 8008748:	4680      	mov	r8, r0
 800874a:	4689      	mov	r9, r1
 800874c:	4630      	mov	r0, r6
 800874e:	4639      	mov	r1, r7
 8008750:	f7f7 fd9c 	bl	800028c <__adddf3>
 8008754:	4b17      	ldr	r3, [pc, #92]	@ (80087b4 <__ieee754_pow+0x41c>)
 8008756:	4299      	cmp	r1, r3
 8008758:	4604      	mov	r4, r0
 800875a:	460d      	mov	r5, r1
 800875c:	468a      	mov	sl, r1
 800875e:	468b      	mov	fp, r1
 8008760:	f340 82ef 	ble.w	8008d42 <__ieee754_pow+0x9aa>
 8008764:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8008768:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800876c:	4303      	orrs	r3, r0
 800876e:	f000 81e8 	beq.w	8008b42 <__ieee754_pow+0x7aa>
 8008772:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008776:	2200      	movs	r2, #0
 8008778:	2300      	movs	r3, #0
 800877a:	f7f8 f9af 	bl	8000adc <__aeabi_dcmplt>
 800877e:	3800      	subs	r0, #0
 8008780:	bf18      	it	ne
 8008782:	2001      	movne	r0, #1
 8008784:	e710      	b.n	80085a8 <__ieee754_pow+0x210>
 8008786:	bf00      	nop
 8008788:	60000000 	.word	0x60000000
 800878c:	3ff71547 	.word	0x3ff71547
 8008790:	f85ddf44 	.word	0xf85ddf44
 8008794:	3e54ae0b 	.word	0x3e54ae0b
 8008798:	55555555 	.word	0x55555555
 800879c:	3fd55555 	.word	0x3fd55555
 80087a0:	652b82fe 	.word	0x652b82fe
 80087a4:	3ff71547 	.word	0x3ff71547
 80087a8:	3ff00000 	.word	0x3ff00000
 80087ac:	3fd00000 	.word	0x3fd00000
 80087b0:	3fe00000 	.word	0x3fe00000
 80087b4:	408fffff 	.word	0x408fffff
 80087b8:	4bd5      	ldr	r3, [pc, #852]	@ (8008b10 <__ieee754_pow+0x778>)
 80087ba:	402b      	ands	r3, r5
 80087bc:	2200      	movs	r2, #0
 80087be:	b92b      	cbnz	r3, 80087cc <__ieee754_pow+0x434>
 80087c0:	4bd4      	ldr	r3, [pc, #848]	@ (8008b14 <__ieee754_pow+0x77c>)
 80087c2:	f7f7 ff19 	bl	80005f8 <__aeabi_dmul>
 80087c6:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 80087ca:	468b      	mov	fp, r1
 80087cc:	ea4f 532b 	mov.w	r3, fp, asr #20
 80087d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80087d4:	4413      	add	r3, r2
 80087d6:	930a      	str	r3, [sp, #40]	@ 0x28
 80087d8:	4bcf      	ldr	r3, [pc, #828]	@ (8008b18 <__ieee754_pow+0x780>)
 80087da:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 80087de:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 80087e2:	459b      	cmp	fp, r3
 80087e4:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80087e8:	dd08      	ble.n	80087fc <__ieee754_pow+0x464>
 80087ea:	4bcc      	ldr	r3, [pc, #816]	@ (8008b1c <__ieee754_pow+0x784>)
 80087ec:	459b      	cmp	fp, r3
 80087ee:	f340 81a5 	ble.w	8008b3c <__ieee754_pow+0x7a4>
 80087f2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80087f4:	3301      	adds	r3, #1
 80087f6:	930a      	str	r3, [sp, #40]	@ 0x28
 80087f8:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 80087fc:	f04f 0a00 	mov.w	sl, #0
 8008800:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8008804:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008806:	4bc6      	ldr	r3, [pc, #792]	@ (8008b20 <__ieee754_pow+0x788>)
 8008808:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800880c:	ed93 7b00 	vldr	d7, [r3]
 8008810:	4629      	mov	r1, r5
 8008812:	ec53 2b17 	vmov	r2, r3, d7
 8008816:	ed8d 7b06 	vstr	d7, [sp, #24]
 800881a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800881e:	f7f7 fd33 	bl	8000288 <__aeabi_dsub>
 8008822:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008826:	4606      	mov	r6, r0
 8008828:	460f      	mov	r7, r1
 800882a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800882e:	f7f7 fd2d 	bl	800028c <__adddf3>
 8008832:	4602      	mov	r2, r0
 8008834:	460b      	mov	r3, r1
 8008836:	2000      	movs	r0, #0
 8008838:	49ba      	ldr	r1, [pc, #744]	@ (8008b24 <__ieee754_pow+0x78c>)
 800883a:	f7f8 f807 	bl	800084c <__aeabi_ddiv>
 800883e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 8008842:	4602      	mov	r2, r0
 8008844:	460b      	mov	r3, r1
 8008846:	4630      	mov	r0, r6
 8008848:	4639      	mov	r1, r7
 800884a:	f7f7 fed5 	bl	80005f8 <__aeabi_dmul>
 800884e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008852:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 8008856:	106d      	asrs	r5, r5, #1
 8008858:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800885c:	f04f 0b00 	mov.w	fp, #0
 8008860:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 8008864:	4661      	mov	r1, ip
 8008866:	2200      	movs	r2, #0
 8008868:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800886c:	4658      	mov	r0, fp
 800886e:	46e1      	mov	r9, ip
 8008870:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 8008874:	4614      	mov	r4, r2
 8008876:	461d      	mov	r5, r3
 8008878:	f7f7 febe 	bl	80005f8 <__aeabi_dmul>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	4630      	mov	r0, r6
 8008882:	4639      	mov	r1, r7
 8008884:	f7f7 fd00 	bl	8000288 <__aeabi_dsub>
 8008888:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800888c:	4606      	mov	r6, r0
 800888e:	460f      	mov	r7, r1
 8008890:	4620      	mov	r0, r4
 8008892:	4629      	mov	r1, r5
 8008894:	f7f7 fcf8 	bl	8000288 <__aeabi_dsub>
 8008898:	4602      	mov	r2, r0
 800889a:	460b      	mov	r3, r1
 800889c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80088a0:	f7f7 fcf2 	bl	8000288 <__aeabi_dsub>
 80088a4:	465a      	mov	r2, fp
 80088a6:	464b      	mov	r3, r9
 80088a8:	f7f7 fea6 	bl	80005f8 <__aeabi_dmul>
 80088ac:	4602      	mov	r2, r0
 80088ae:	460b      	mov	r3, r1
 80088b0:	4630      	mov	r0, r6
 80088b2:	4639      	mov	r1, r7
 80088b4:	f7f7 fce8 	bl	8000288 <__aeabi_dsub>
 80088b8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80088bc:	f7f7 fe9c 	bl	80005f8 <__aeabi_dmul>
 80088c0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80088c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80088c8:	4610      	mov	r0, r2
 80088ca:	4619      	mov	r1, r3
 80088cc:	f7f7 fe94 	bl	80005f8 <__aeabi_dmul>
 80088d0:	a37d      	add	r3, pc, #500	@ (adr r3, 8008ac8 <__ieee754_pow+0x730>)
 80088d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088d6:	4604      	mov	r4, r0
 80088d8:	460d      	mov	r5, r1
 80088da:	f7f7 fe8d 	bl	80005f8 <__aeabi_dmul>
 80088de:	a37c      	add	r3, pc, #496	@ (adr r3, 8008ad0 <__ieee754_pow+0x738>)
 80088e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088e4:	f7f7 fcd2 	bl	800028c <__adddf3>
 80088e8:	4622      	mov	r2, r4
 80088ea:	462b      	mov	r3, r5
 80088ec:	f7f7 fe84 	bl	80005f8 <__aeabi_dmul>
 80088f0:	a379      	add	r3, pc, #484	@ (adr r3, 8008ad8 <__ieee754_pow+0x740>)
 80088f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088f6:	f7f7 fcc9 	bl	800028c <__adddf3>
 80088fa:	4622      	mov	r2, r4
 80088fc:	462b      	mov	r3, r5
 80088fe:	f7f7 fe7b 	bl	80005f8 <__aeabi_dmul>
 8008902:	a377      	add	r3, pc, #476	@ (adr r3, 8008ae0 <__ieee754_pow+0x748>)
 8008904:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008908:	f7f7 fcc0 	bl	800028c <__adddf3>
 800890c:	4622      	mov	r2, r4
 800890e:	462b      	mov	r3, r5
 8008910:	f7f7 fe72 	bl	80005f8 <__aeabi_dmul>
 8008914:	a374      	add	r3, pc, #464	@ (adr r3, 8008ae8 <__ieee754_pow+0x750>)
 8008916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800891a:	f7f7 fcb7 	bl	800028c <__adddf3>
 800891e:	4622      	mov	r2, r4
 8008920:	462b      	mov	r3, r5
 8008922:	f7f7 fe69 	bl	80005f8 <__aeabi_dmul>
 8008926:	a372      	add	r3, pc, #456	@ (adr r3, 8008af0 <__ieee754_pow+0x758>)
 8008928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800892c:	f7f7 fcae 	bl	800028c <__adddf3>
 8008930:	4622      	mov	r2, r4
 8008932:	4606      	mov	r6, r0
 8008934:	460f      	mov	r7, r1
 8008936:	462b      	mov	r3, r5
 8008938:	4620      	mov	r0, r4
 800893a:	4629      	mov	r1, r5
 800893c:	f7f7 fe5c 	bl	80005f8 <__aeabi_dmul>
 8008940:	4602      	mov	r2, r0
 8008942:	460b      	mov	r3, r1
 8008944:	4630      	mov	r0, r6
 8008946:	4639      	mov	r1, r7
 8008948:	f7f7 fe56 	bl	80005f8 <__aeabi_dmul>
 800894c:	465a      	mov	r2, fp
 800894e:	4604      	mov	r4, r0
 8008950:	460d      	mov	r5, r1
 8008952:	464b      	mov	r3, r9
 8008954:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008958:	f7f7 fc98 	bl	800028c <__adddf3>
 800895c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008960:	f7f7 fe4a 	bl	80005f8 <__aeabi_dmul>
 8008964:	4622      	mov	r2, r4
 8008966:	462b      	mov	r3, r5
 8008968:	f7f7 fc90 	bl	800028c <__adddf3>
 800896c:	465a      	mov	r2, fp
 800896e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008972:	464b      	mov	r3, r9
 8008974:	4658      	mov	r0, fp
 8008976:	4649      	mov	r1, r9
 8008978:	f7f7 fe3e 	bl	80005f8 <__aeabi_dmul>
 800897c:	4b6a      	ldr	r3, [pc, #424]	@ (8008b28 <__ieee754_pow+0x790>)
 800897e:	2200      	movs	r2, #0
 8008980:	4606      	mov	r6, r0
 8008982:	460f      	mov	r7, r1
 8008984:	f7f7 fc82 	bl	800028c <__adddf3>
 8008988:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800898c:	f7f7 fc7e 	bl	800028c <__adddf3>
 8008990:	46d8      	mov	r8, fp
 8008992:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 8008996:	460d      	mov	r5, r1
 8008998:	465a      	mov	r2, fp
 800899a:	460b      	mov	r3, r1
 800899c:	4640      	mov	r0, r8
 800899e:	4649      	mov	r1, r9
 80089a0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 80089a4:	f7f7 fe28 	bl	80005f8 <__aeabi_dmul>
 80089a8:	465c      	mov	r4, fp
 80089aa:	4680      	mov	r8, r0
 80089ac:	4689      	mov	r9, r1
 80089ae:	4b5e      	ldr	r3, [pc, #376]	@ (8008b28 <__ieee754_pow+0x790>)
 80089b0:	2200      	movs	r2, #0
 80089b2:	4620      	mov	r0, r4
 80089b4:	4629      	mov	r1, r5
 80089b6:	f7f7 fc67 	bl	8000288 <__aeabi_dsub>
 80089ba:	4632      	mov	r2, r6
 80089bc:	463b      	mov	r3, r7
 80089be:	f7f7 fc63 	bl	8000288 <__aeabi_dsub>
 80089c2:	4602      	mov	r2, r0
 80089c4:	460b      	mov	r3, r1
 80089c6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80089ca:	f7f7 fc5d 	bl	8000288 <__aeabi_dsub>
 80089ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089d2:	f7f7 fe11 	bl	80005f8 <__aeabi_dmul>
 80089d6:	4622      	mov	r2, r4
 80089d8:	4606      	mov	r6, r0
 80089da:	460f      	mov	r7, r1
 80089dc:	462b      	mov	r3, r5
 80089de:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80089e2:	f7f7 fe09 	bl	80005f8 <__aeabi_dmul>
 80089e6:	4602      	mov	r2, r0
 80089e8:	460b      	mov	r3, r1
 80089ea:	4630      	mov	r0, r6
 80089ec:	4639      	mov	r1, r7
 80089ee:	f7f7 fc4d 	bl	800028c <__adddf3>
 80089f2:	4606      	mov	r6, r0
 80089f4:	460f      	mov	r7, r1
 80089f6:	4602      	mov	r2, r0
 80089f8:	460b      	mov	r3, r1
 80089fa:	4640      	mov	r0, r8
 80089fc:	4649      	mov	r1, r9
 80089fe:	f7f7 fc45 	bl	800028c <__adddf3>
 8008a02:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 8008a06:	a33c      	add	r3, pc, #240	@ (adr r3, 8008af8 <__ieee754_pow+0x760>)
 8008a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a0c:	4658      	mov	r0, fp
 8008a0e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 8008a12:	460d      	mov	r5, r1
 8008a14:	f7f7 fdf0 	bl	80005f8 <__aeabi_dmul>
 8008a18:	465c      	mov	r4, fp
 8008a1a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008a1e:	4642      	mov	r2, r8
 8008a20:	464b      	mov	r3, r9
 8008a22:	4620      	mov	r0, r4
 8008a24:	4629      	mov	r1, r5
 8008a26:	f7f7 fc2f 	bl	8000288 <__aeabi_dsub>
 8008a2a:	4602      	mov	r2, r0
 8008a2c:	460b      	mov	r3, r1
 8008a2e:	4630      	mov	r0, r6
 8008a30:	4639      	mov	r1, r7
 8008a32:	f7f7 fc29 	bl	8000288 <__aeabi_dsub>
 8008a36:	a332      	add	r3, pc, #200	@ (adr r3, 8008b00 <__ieee754_pow+0x768>)
 8008a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a3c:	f7f7 fddc 	bl	80005f8 <__aeabi_dmul>
 8008a40:	a331      	add	r3, pc, #196	@ (adr r3, 8008b08 <__ieee754_pow+0x770>)
 8008a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a46:	4606      	mov	r6, r0
 8008a48:	460f      	mov	r7, r1
 8008a4a:	4620      	mov	r0, r4
 8008a4c:	4629      	mov	r1, r5
 8008a4e:	f7f7 fdd3 	bl	80005f8 <__aeabi_dmul>
 8008a52:	4602      	mov	r2, r0
 8008a54:	460b      	mov	r3, r1
 8008a56:	4630      	mov	r0, r6
 8008a58:	4639      	mov	r1, r7
 8008a5a:	f7f7 fc17 	bl	800028c <__adddf3>
 8008a5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008a60:	4b32      	ldr	r3, [pc, #200]	@ (8008b2c <__ieee754_pow+0x794>)
 8008a62:	4413      	add	r3, r2
 8008a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008a68:	f7f7 fc10 	bl	800028c <__adddf3>
 8008a6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008a70:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8008a72:	f7f7 fd57 	bl	8000524 <__aeabi_i2d>
 8008a76:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008a78:	4b2d      	ldr	r3, [pc, #180]	@ (8008b30 <__ieee754_pow+0x798>)
 8008a7a:	4413      	add	r3, r2
 8008a7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008a80:	4606      	mov	r6, r0
 8008a82:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008a86:	460f      	mov	r7, r1
 8008a88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008a8c:	f7f7 fbfe 	bl	800028c <__adddf3>
 8008a90:	4642      	mov	r2, r8
 8008a92:	464b      	mov	r3, r9
 8008a94:	f7f7 fbfa 	bl	800028c <__adddf3>
 8008a98:	4632      	mov	r2, r6
 8008a9a:	463b      	mov	r3, r7
 8008a9c:	f7f7 fbf6 	bl	800028c <__adddf3>
 8008aa0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 8008aa4:	4632      	mov	r2, r6
 8008aa6:	463b      	mov	r3, r7
 8008aa8:	4658      	mov	r0, fp
 8008aaa:	460d      	mov	r5, r1
 8008aac:	f7f7 fbec 	bl	8000288 <__aeabi_dsub>
 8008ab0:	4642      	mov	r2, r8
 8008ab2:	464b      	mov	r3, r9
 8008ab4:	f7f7 fbe8 	bl	8000288 <__aeabi_dsub>
 8008ab8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008abc:	f7f7 fbe4 	bl	8000288 <__aeabi_dsub>
 8008ac0:	465c      	mov	r4, fp
 8008ac2:	4602      	mov	r2, r0
 8008ac4:	e036      	b.n	8008b34 <__ieee754_pow+0x79c>
 8008ac6:	bf00      	nop
 8008ac8:	4a454eef 	.word	0x4a454eef
 8008acc:	3fca7e28 	.word	0x3fca7e28
 8008ad0:	93c9db65 	.word	0x93c9db65
 8008ad4:	3fcd864a 	.word	0x3fcd864a
 8008ad8:	a91d4101 	.word	0xa91d4101
 8008adc:	3fd17460 	.word	0x3fd17460
 8008ae0:	518f264d 	.word	0x518f264d
 8008ae4:	3fd55555 	.word	0x3fd55555
 8008ae8:	db6fabff 	.word	0xdb6fabff
 8008aec:	3fdb6db6 	.word	0x3fdb6db6
 8008af0:	33333303 	.word	0x33333303
 8008af4:	3fe33333 	.word	0x3fe33333
 8008af8:	e0000000 	.word	0xe0000000
 8008afc:	3feec709 	.word	0x3feec709
 8008b00:	dc3a03fd 	.word	0xdc3a03fd
 8008b04:	3feec709 	.word	0x3feec709
 8008b08:	145b01f5 	.word	0x145b01f5
 8008b0c:	be3e2fe0 	.word	0xbe3e2fe0
 8008b10:	7ff00000 	.word	0x7ff00000
 8008b14:	43400000 	.word	0x43400000
 8008b18:	0003988e 	.word	0x0003988e
 8008b1c:	000bb679 	.word	0x000bb679
 8008b20:	08009598 	.word	0x08009598
 8008b24:	3ff00000 	.word	0x3ff00000
 8008b28:	40080000 	.word	0x40080000
 8008b2c:	08009578 	.word	0x08009578
 8008b30:	08009588 	.word	0x08009588
 8008b34:	460b      	mov	r3, r1
 8008b36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008b3a:	e5d7      	b.n	80086ec <__ieee754_pow+0x354>
 8008b3c:	f04f 0a01 	mov.w	sl, #1
 8008b40:	e65e      	b.n	8008800 <__ieee754_pow+0x468>
 8008b42:	a3b4      	add	r3, pc, #720	@ (adr r3, 8008e14 <__ieee754_pow+0xa7c>)
 8008b44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b48:	4630      	mov	r0, r6
 8008b4a:	4639      	mov	r1, r7
 8008b4c:	f7f7 fb9e 	bl	800028c <__adddf3>
 8008b50:	4642      	mov	r2, r8
 8008b52:	e9cd 0100 	strd	r0, r1, [sp]
 8008b56:	464b      	mov	r3, r9
 8008b58:	4620      	mov	r0, r4
 8008b5a:	4629      	mov	r1, r5
 8008b5c:	f7f7 fb94 	bl	8000288 <__aeabi_dsub>
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008b68:	f7f7 ffd6 	bl	8000b18 <__aeabi_dcmpgt>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	f47f ae00 	bne.w	8008772 <__ieee754_pow+0x3da>
 8008b72:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 8008b76:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8008b7a:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8008b7e:	fa43 fa0a 	asr.w	sl, r3, sl
 8008b82:	44da      	add	sl, fp
 8008b84:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8008b88:	489d      	ldr	r0, [pc, #628]	@ (8008e00 <__ieee754_pow+0xa68>)
 8008b8a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8008b8e:	4108      	asrs	r0, r1
 8008b90:	ea00 030a 	and.w	r3, r0, sl
 8008b94:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8008b98:	f1c1 0114 	rsb	r1, r1, #20
 8008b9c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8008ba0:	fa4a fa01 	asr.w	sl, sl, r1
 8008ba4:	f1bb 0f00 	cmp.w	fp, #0
 8008ba8:	4640      	mov	r0, r8
 8008baa:	4649      	mov	r1, r9
 8008bac:	f04f 0200 	mov.w	r2, #0
 8008bb0:	bfb8      	it	lt
 8008bb2:	f1ca 0a00 	rsblt	sl, sl, #0
 8008bb6:	f7f7 fb67 	bl	8000288 <__aeabi_dsub>
 8008bba:	4680      	mov	r8, r0
 8008bbc:	4689      	mov	r9, r1
 8008bbe:	4632      	mov	r2, r6
 8008bc0:	463b      	mov	r3, r7
 8008bc2:	4640      	mov	r0, r8
 8008bc4:	4649      	mov	r1, r9
 8008bc6:	f7f7 fb61 	bl	800028c <__adddf3>
 8008bca:	2400      	movs	r4, #0
 8008bcc:	a37c      	add	r3, pc, #496	@ (adr r3, 8008dc0 <__ieee754_pow+0xa28>)
 8008bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd2:	4620      	mov	r0, r4
 8008bd4:	460d      	mov	r5, r1
 8008bd6:	f7f7 fd0f 	bl	80005f8 <__aeabi_dmul>
 8008bda:	4642      	mov	r2, r8
 8008bdc:	e9cd 0100 	strd	r0, r1, [sp]
 8008be0:	464b      	mov	r3, r9
 8008be2:	4620      	mov	r0, r4
 8008be4:	4629      	mov	r1, r5
 8008be6:	f7f7 fb4f 	bl	8000288 <__aeabi_dsub>
 8008bea:	4602      	mov	r2, r0
 8008bec:	460b      	mov	r3, r1
 8008bee:	4630      	mov	r0, r6
 8008bf0:	4639      	mov	r1, r7
 8008bf2:	f7f7 fb49 	bl	8000288 <__aeabi_dsub>
 8008bf6:	a374      	add	r3, pc, #464	@ (adr r3, 8008dc8 <__ieee754_pow+0xa30>)
 8008bf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bfc:	f7f7 fcfc 	bl	80005f8 <__aeabi_dmul>
 8008c00:	a373      	add	r3, pc, #460	@ (adr r3, 8008dd0 <__ieee754_pow+0xa38>)
 8008c02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c06:	4680      	mov	r8, r0
 8008c08:	4689      	mov	r9, r1
 8008c0a:	4620      	mov	r0, r4
 8008c0c:	4629      	mov	r1, r5
 8008c0e:	f7f7 fcf3 	bl	80005f8 <__aeabi_dmul>
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	4640      	mov	r0, r8
 8008c18:	4649      	mov	r1, r9
 8008c1a:	f7f7 fb37 	bl	800028c <__adddf3>
 8008c1e:	4604      	mov	r4, r0
 8008c20:	460d      	mov	r5, r1
 8008c22:	4602      	mov	r2, r0
 8008c24:	460b      	mov	r3, r1
 8008c26:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008c2a:	f7f7 fb2f 	bl	800028c <__adddf3>
 8008c2e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008c32:	4680      	mov	r8, r0
 8008c34:	4689      	mov	r9, r1
 8008c36:	f7f7 fb27 	bl	8000288 <__aeabi_dsub>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	460b      	mov	r3, r1
 8008c3e:	4620      	mov	r0, r4
 8008c40:	4629      	mov	r1, r5
 8008c42:	f7f7 fb21 	bl	8000288 <__aeabi_dsub>
 8008c46:	4642      	mov	r2, r8
 8008c48:	4606      	mov	r6, r0
 8008c4a:	460f      	mov	r7, r1
 8008c4c:	464b      	mov	r3, r9
 8008c4e:	4640      	mov	r0, r8
 8008c50:	4649      	mov	r1, r9
 8008c52:	f7f7 fcd1 	bl	80005f8 <__aeabi_dmul>
 8008c56:	a360      	add	r3, pc, #384	@ (adr r3, 8008dd8 <__ieee754_pow+0xa40>)
 8008c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	460d      	mov	r5, r1
 8008c60:	f7f7 fcca 	bl	80005f8 <__aeabi_dmul>
 8008c64:	a35e      	add	r3, pc, #376	@ (adr r3, 8008de0 <__ieee754_pow+0xa48>)
 8008c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c6a:	f7f7 fb0d 	bl	8000288 <__aeabi_dsub>
 8008c6e:	4622      	mov	r2, r4
 8008c70:	462b      	mov	r3, r5
 8008c72:	f7f7 fcc1 	bl	80005f8 <__aeabi_dmul>
 8008c76:	a35c      	add	r3, pc, #368	@ (adr r3, 8008de8 <__ieee754_pow+0xa50>)
 8008c78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c7c:	f7f7 fb06 	bl	800028c <__adddf3>
 8008c80:	4622      	mov	r2, r4
 8008c82:	462b      	mov	r3, r5
 8008c84:	f7f7 fcb8 	bl	80005f8 <__aeabi_dmul>
 8008c88:	a359      	add	r3, pc, #356	@ (adr r3, 8008df0 <__ieee754_pow+0xa58>)
 8008c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8e:	f7f7 fafb 	bl	8000288 <__aeabi_dsub>
 8008c92:	4622      	mov	r2, r4
 8008c94:	462b      	mov	r3, r5
 8008c96:	f7f7 fcaf 	bl	80005f8 <__aeabi_dmul>
 8008c9a:	a357      	add	r3, pc, #348	@ (adr r3, 8008df8 <__ieee754_pow+0xa60>)
 8008c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca0:	f7f7 faf4 	bl	800028c <__adddf3>
 8008ca4:	4622      	mov	r2, r4
 8008ca6:	462b      	mov	r3, r5
 8008ca8:	f7f7 fca6 	bl	80005f8 <__aeabi_dmul>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	4640      	mov	r0, r8
 8008cb2:	4649      	mov	r1, r9
 8008cb4:	f7f7 fae8 	bl	8000288 <__aeabi_dsub>
 8008cb8:	4604      	mov	r4, r0
 8008cba:	460d      	mov	r5, r1
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	460b      	mov	r3, r1
 8008cc0:	4640      	mov	r0, r8
 8008cc2:	4649      	mov	r1, r9
 8008cc4:	f7f7 fc98 	bl	80005f8 <__aeabi_dmul>
 8008cc8:	2200      	movs	r2, #0
 8008cca:	e9cd 0100 	strd	r0, r1, [sp]
 8008cce:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8008cd2:	4620      	mov	r0, r4
 8008cd4:	4629      	mov	r1, r5
 8008cd6:	f7f7 fad7 	bl	8000288 <__aeabi_dsub>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	460b      	mov	r3, r1
 8008cde:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008ce2:	f7f7 fdb3 	bl	800084c <__aeabi_ddiv>
 8008ce6:	4632      	mov	r2, r6
 8008ce8:	4604      	mov	r4, r0
 8008cea:	460d      	mov	r5, r1
 8008cec:	463b      	mov	r3, r7
 8008cee:	4640      	mov	r0, r8
 8008cf0:	4649      	mov	r1, r9
 8008cf2:	f7f7 fc81 	bl	80005f8 <__aeabi_dmul>
 8008cf6:	4632      	mov	r2, r6
 8008cf8:	463b      	mov	r3, r7
 8008cfa:	f7f7 fac7 	bl	800028c <__adddf3>
 8008cfe:	4602      	mov	r2, r0
 8008d00:	460b      	mov	r3, r1
 8008d02:	4620      	mov	r0, r4
 8008d04:	4629      	mov	r1, r5
 8008d06:	f7f7 fabf 	bl	8000288 <__aeabi_dsub>
 8008d0a:	4642      	mov	r2, r8
 8008d0c:	464b      	mov	r3, r9
 8008d0e:	f7f7 fabb 	bl	8000288 <__aeabi_dsub>
 8008d12:	460b      	mov	r3, r1
 8008d14:	4602      	mov	r2, r0
 8008d16:	493b      	ldr	r1, [pc, #236]	@ (8008e04 <__ieee754_pow+0xa6c>)
 8008d18:	2000      	movs	r0, #0
 8008d1a:	f7f7 fab5 	bl	8000288 <__aeabi_dsub>
 8008d1e:	ec41 0b10 	vmov	d0, r0, r1
 8008d22:	ee10 3a90 	vmov	r3, s1
 8008d26:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8008d2a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008d2e:	da30      	bge.n	8008d92 <__ieee754_pow+0x9fa>
 8008d30:	4650      	mov	r0, sl
 8008d32:	f000 f87d 	bl	8008e30 <scalbn>
 8008d36:	ec51 0b10 	vmov	r0, r1, d0
 8008d3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008d3e:	f7ff bbd2 	b.w	80084e6 <__ieee754_pow+0x14e>
 8008d42:	4c31      	ldr	r4, [pc, #196]	@ (8008e08 <__ieee754_pow+0xa70>)
 8008d44:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008d48:	42a3      	cmp	r3, r4
 8008d4a:	d91a      	bls.n	8008d82 <__ieee754_pow+0x9ea>
 8008d4c:	4b2f      	ldr	r3, [pc, #188]	@ (8008e0c <__ieee754_pow+0xa74>)
 8008d4e:	440b      	add	r3, r1
 8008d50:	4303      	orrs	r3, r0
 8008d52:	d009      	beq.n	8008d68 <__ieee754_pow+0x9d0>
 8008d54:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d58:	2200      	movs	r2, #0
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	f7f7 febe 	bl	8000adc <__aeabi_dcmplt>
 8008d60:	3800      	subs	r0, #0
 8008d62:	bf18      	it	ne
 8008d64:	2001      	movne	r0, #1
 8008d66:	e42b      	b.n	80085c0 <__ieee754_pow+0x228>
 8008d68:	4642      	mov	r2, r8
 8008d6a:	464b      	mov	r3, r9
 8008d6c:	f7f7 fa8c 	bl	8000288 <__aeabi_dsub>
 8008d70:	4632      	mov	r2, r6
 8008d72:	463b      	mov	r3, r7
 8008d74:	f7f7 fec6 	bl	8000b04 <__aeabi_dcmpge>
 8008d78:	2800      	cmp	r0, #0
 8008d7a:	d1eb      	bne.n	8008d54 <__ieee754_pow+0x9bc>
 8008d7c:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 8008e1c <__ieee754_pow+0xa84>
 8008d80:	e6f7      	b.n	8008b72 <__ieee754_pow+0x7da>
 8008d82:	469a      	mov	sl, r3
 8008d84:	4b22      	ldr	r3, [pc, #136]	@ (8008e10 <__ieee754_pow+0xa78>)
 8008d86:	459a      	cmp	sl, r3
 8008d88:	f63f aef3 	bhi.w	8008b72 <__ieee754_pow+0x7da>
 8008d8c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8008d90:	e715      	b.n	8008bbe <__ieee754_pow+0x826>
 8008d92:	ec51 0b10 	vmov	r0, r1, d0
 8008d96:	4619      	mov	r1, r3
 8008d98:	e7cf      	b.n	8008d3a <__ieee754_pow+0x9a2>
 8008d9a:	491a      	ldr	r1, [pc, #104]	@ (8008e04 <__ieee754_pow+0xa6c>)
 8008d9c:	2000      	movs	r0, #0
 8008d9e:	f7ff bb18 	b.w	80083d2 <__ieee754_pow+0x3a>
 8008da2:	2000      	movs	r0, #0
 8008da4:	2100      	movs	r1, #0
 8008da6:	f7ff bb14 	b.w	80083d2 <__ieee754_pow+0x3a>
 8008daa:	4630      	mov	r0, r6
 8008dac:	4639      	mov	r1, r7
 8008dae:	f7ff bb10 	b.w	80083d2 <__ieee754_pow+0x3a>
 8008db2:	460c      	mov	r4, r1
 8008db4:	f7ff bb5e 	b.w	8008474 <__ieee754_pow+0xdc>
 8008db8:	2400      	movs	r4, #0
 8008dba:	f7ff bb49 	b.w	8008450 <__ieee754_pow+0xb8>
 8008dbe:	bf00      	nop
 8008dc0:	00000000 	.word	0x00000000
 8008dc4:	3fe62e43 	.word	0x3fe62e43
 8008dc8:	fefa39ef 	.word	0xfefa39ef
 8008dcc:	3fe62e42 	.word	0x3fe62e42
 8008dd0:	0ca86c39 	.word	0x0ca86c39
 8008dd4:	be205c61 	.word	0xbe205c61
 8008dd8:	72bea4d0 	.word	0x72bea4d0
 8008ddc:	3e663769 	.word	0x3e663769
 8008de0:	c5d26bf1 	.word	0xc5d26bf1
 8008de4:	3ebbbd41 	.word	0x3ebbbd41
 8008de8:	af25de2c 	.word	0xaf25de2c
 8008dec:	3f11566a 	.word	0x3f11566a
 8008df0:	16bebd93 	.word	0x16bebd93
 8008df4:	3f66c16c 	.word	0x3f66c16c
 8008df8:	5555553e 	.word	0x5555553e
 8008dfc:	3fc55555 	.word	0x3fc55555
 8008e00:	fff00000 	.word	0xfff00000
 8008e04:	3ff00000 	.word	0x3ff00000
 8008e08:	4090cbff 	.word	0x4090cbff
 8008e0c:	3f6f3400 	.word	0x3f6f3400
 8008e10:	3fe00000 	.word	0x3fe00000
 8008e14:	652b82fe 	.word	0x652b82fe
 8008e18:	3c971547 	.word	0x3c971547
 8008e1c:	4090cc00 	.word	0x4090cc00

08008e20 <fabs>:
 8008e20:	ec51 0b10 	vmov	r0, r1, d0
 8008e24:	4602      	mov	r2, r0
 8008e26:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008e2a:	ec43 2b10 	vmov	d0, r2, r3
 8008e2e:	4770      	bx	lr

08008e30 <scalbn>:
 8008e30:	b570      	push	{r4, r5, r6, lr}
 8008e32:	ec55 4b10 	vmov	r4, r5, d0
 8008e36:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8008e3a:	4606      	mov	r6, r0
 8008e3c:	462b      	mov	r3, r5
 8008e3e:	b991      	cbnz	r1, 8008e66 <scalbn+0x36>
 8008e40:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 8008e44:	4323      	orrs	r3, r4
 8008e46:	d03d      	beq.n	8008ec4 <scalbn+0x94>
 8008e48:	4b35      	ldr	r3, [pc, #212]	@ (8008f20 <scalbn+0xf0>)
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	4629      	mov	r1, r5
 8008e4e:	2200      	movs	r2, #0
 8008e50:	f7f7 fbd2 	bl	80005f8 <__aeabi_dmul>
 8008e54:	4b33      	ldr	r3, [pc, #204]	@ (8008f24 <scalbn+0xf4>)
 8008e56:	429e      	cmp	r6, r3
 8008e58:	4604      	mov	r4, r0
 8008e5a:	460d      	mov	r5, r1
 8008e5c:	da0f      	bge.n	8008e7e <scalbn+0x4e>
 8008e5e:	a328      	add	r3, pc, #160	@ (adr r3, 8008f00 <scalbn+0xd0>)
 8008e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e64:	e01e      	b.n	8008ea4 <scalbn+0x74>
 8008e66:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8008e6a:	4291      	cmp	r1, r2
 8008e6c:	d10b      	bne.n	8008e86 <scalbn+0x56>
 8008e6e:	4622      	mov	r2, r4
 8008e70:	4620      	mov	r0, r4
 8008e72:	4629      	mov	r1, r5
 8008e74:	f7f7 fa0a 	bl	800028c <__adddf3>
 8008e78:	4604      	mov	r4, r0
 8008e7a:	460d      	mov	r5, r1
 8008e7c:	e022      	b.n	8008ec4 <scalbn+0x94>
 8008e7e:	460b      	mov	r3, r1
 8008e80:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8008e84:	3936      	subs	r1, #54	@ 0x36
 8008e86:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8008e8a:	4296      	cmp	r6, r2
 8008e8c:	dd0d      	ble.n	8008eaa <scalbn+0x7a>
 8008e8e:	2d00      	cmp	r5, #0
 8008e90:	a11d      	add	r1, pc, #116	@ (adr r1, 8008f08 <scalbn+0xd8>)
 8008e92:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e96:	da02      	bge.n	8008e9e <scalbn+0x6e>
 8008e98:	a11d      	add	r1, pc, #116	@ (adr r1, 8008f10 <scalbn+0xe0>)
 8008e9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008e9e:	a31a      	add	r3, pc, #104	@ (adr r3, 8008f08 <scalbn+0xd8>)
 8008ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea4:	f7f7 fba8 	bl	80005f8 <__aeabi_dmul>
 8008ea8:	e7e6      	b.n	8008e78 <scalbn+0x48>
 8008eaa:	1872      	adds	r2, r6, r1
 8008eac:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8008eb0:	428a      	cmp	r2, r1
 8008eb2:	dcec      	bgt.n	8008e8e <scalbn+0x5e>
 8008eb4:	2a00      	cmp	r2, #0
 8008eb6:	dd08      	ble.n	8008eca <scalbn+0x9a>
 8008eb8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008ebc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008ec0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008ec4:	ec45 4b10 	vmov	d0, r4, r5
 8008ec8:	bd70      	pop	{r4, r5, r6, pc}
 8008eca:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8008ece:	da08      	bge.n	8008ee2 <scalbn+0xb2>
 8008ed0:	2d00      	cmp	r5, #0
 8008ed2:	a10b      	add	r1, pc, #44	@ (adr r1, 8008f00 <scalbn+0xd0>)
 8008ed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ed8:	dac1      	bge.n	8008e5e <scalbn+0x2e>
 8008eda:	a10f      	add	r1, pc, #60	@ (adr r1, 8008f18 <scalbn+0xe8>)
 8008edc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ee0:	e7bd      	b.n	8008e5e <scalbn+0x2e>
 8008ee2:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8008ee6:	3236      	adds	r2, #54	@ 0x36
 8008ee8:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8008eec:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8008ef0:	4620      	mov	r0, r4
 8008ef2:	4b0d      	ldr	r3, [pc, #52]	@ (8008f28 <scalbn+0xf8>)
 8008ef4:	4629      	mov	r1, r5
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	e7d4      	b.n	8008ea4 <scalbn+0x74>
 8008efa:	bf00      	nop
 8008efc:	f3af 8000 	nop.w
 8008f00:	c2f8f359 	.word	0xc2f8f359
 8008f04:	01a56e1f 	.word	0x01a56e1f
 8008f08:	8800759c 	.word	0x8800759c
 8008f0c:	7e37e43c 	.word	0x7e37e43c
 8008f10:	8800759c 	.word	0x8800759c
 8008f14:	fe37e43c 	.word	0xfe37e43c
 8008f18:	c2f8f359 	.word	0xc2f8f359
 8008f1c:	81a56e1f 	.word	0x81a56e1f
 8008f20:	43500000 	.word	0x43500000
 8008f24:	ffff3cb0 	.word	0xffff3cb0
 8008f28:	3c900000 	.word	0x3c900000

08008f2c <with_errno>:
 8008f2c:	b510      	push	{r4, lr}
 8008f2e:	ed2d 8b02 	vpush	{d8}
 8008f32:	eeb0 8a40 	vmov.f32	s16, s0
 8008f36:	eef0 8a60 	vmov.f32	s17, s1
 8008f3a:	4604      	mov	r4, r0
 8008f3c:	f7fd f93a 	bl	80061b4 <__errno>
 8008f40:	eeb0 0a48 	vmov.f32	s0, s16
 8008f44:	eef0 0a68 	vmov.f32	s1, s17
 8008f48:	ecbd 8b02 	vpop	{d8}
 8008f4c:	6004      	str	r4, [r0, #0]
 8008f4e:	bd10      	pop	{r4, pc}

08008f50 <xflow>:
 8008f50:	4603      	mov	r3, r0
 8008f52:	b507      	push	{r0, r1, r2, lr}
 8008f54:	ec51 0b10 	vmov	r0, r1, d0
 8008f58:	b183      	cbz	r3, 8008f7c <xflow+0x2c>
 8008f5a:	4602      	mov	r2, r0
 8008f5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008f60:	e9cd 2300 	strd	r2, r3, [sp]
 8008f64:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f68:	f7f7 fb46 	bl	80005f8 <__aeabi_dmul>
 8008f6c:	ec41 0b10 	vmov	d0, r0, r1
 8008f70:	2022      	movs	r0, #34	@ 0x22
 8008f72:	b003      	add	sp, #12
 8008f74:	f85d eb04 	ldr.w	lr, [sp], #4
 8008f78:	f7ff bfd8 	b.w	8008f2c <with_errno>
 8008f7c:	4602      	mov	r2, r0
 8008f7e:	460b      	mov	r3, r1
 8008f80:	e7ee      	b.n	8008f60 <xflow+0x10>
 8008f82:	0000      	movs	r0, r0
 8008f84:	0000      	movs	r0, r0
	...

08008f88 <__math_uflow>:
 8008f88:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008f90 <__math_uflow+0x8>
 8008f8c:	f7ff bfe0 	b.w	8008f50 <xflow>
 8008f90:	00000000 	.word	0x00000000
 8008f94:	10000000 	.word	0x10000000

08008f98 <__math_oflow>:
 8008f98:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8008fa0 <__math_oflow+0x8>
 8008f9c:	f7ff bfd8 	b.w	8008f50 <xflow>
 8008fa0:	00000000 	.word	0x00000000
 8008fa4:	70000000 	.word	0x70000000

08008fa8 <__ieee754_sqrt>:
 8008fa8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fac:	4a68      	ldr	r2, [pc, #416]	@ (8009150 <__ieee754_sqrt+0x1a8>)
 8008fae:	ec55 4b10 	vmov	r4, r5, d0
 8008fb2:	43aa      	bics	r2, r5
 8008fb4:	462b      	mov	r3, r5
 8008fb6:	4621      	mov	r1, r4
 8008fb8:	d110      	bne.n	8008fdc <__ieee754_sqrt+0x34>
 8008fba:	4622      	mov	r2, r4
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	f7f7 fb1a 	bl	80005f8 <__aeabi_dmul>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	460b      	mov	r3, r1
 8008fc8:	4620      	mov	r0, r4
 8008fca:	4629      	mov	r1, r5
 8008fcc:	f7f7 f95e 	bl	800028c <__adddf3>
 8008fd0:	4604      	mov	r4, r0
 8008fd2:	460d      	mov	r5, r1
 8008fd4:	ec45 4b10 	vmov	d0, r4, r5
 8008fd8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fdc:	2d00      	cmp	r5, #0
 8008fde:	dc0e      	bgt.n	8008ffe <__ieee754_sqrt+0x56>
 8008fe0:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8008fe4:	4322      	orrs	r2, r4
 8008fe6:	d0f5      	beq.n	8008fd4 <__ieee754_sqrt+0x2c>
 8008fe8:	b19d      	cbz	r5, 8009012 <__ieee754_sqrt+0x6a>
 8008fea:	4622      	mov	r2, r4
 8008fec:	4620      	mov	r0, r4
 8008fee:	4629      	mov	r1, r5
 8008ff0:	f7f7 f94a 	bl	8000288 <__aeabi_dsub>
 8008ff4:	4602      	mov	r2, r0
 8008ff6:	460b      	mov	r3, r1
 8008ff8:	f7f7 fc28 	bl	800084c <__aeabi_ddiv>
 8008ffc:	e7e8      	b.n	8008fd0 <__ieee754_sqrt+0x28>
 8008ffe:	152a      	asrs	r2, r5, #20
 8009000:	d115      	bne.n	800902e <__ieee754_sqrt+0x86>
 8009002:	2000      	movs	r0, #0
 8009004:	e009      	b.n	800901a <__ieee754_sqrt+0x72>
 8009006:	0acb      	lsrs	r3, r1, #11
 8009008:	3a15      	subs	r2, #21
 800900a:	0549      	lsls	r1, r1, #21
 800900c:	2b00      	cmp	r3, #0
 800900e:	d0fa      	beq.n	8009006 <__ieee754_sqrt+0x5e>
 8009010:	e7f7      	b.n	8009002 <__ieee754_sqrt+0x5a>
 8009012:	462a      	mov	r2, r5
 8009014:	e7fa      	b.n	800900c <__ieee754_sqrt+0x64>
 8009016:	005b      	lsls	r3, r3, #1
 8009018:	3001      	adds	r0, #1
 800901a:	02dc      	lsls	r4, r3, #11
 800901c:	d5fb      	bpl.n	8009016 <__ieee754_sqrt+0x6e>
 800901e:	1e44      	subs	r4, r0, #1
 8009020:	1b12      	subs	r2, r2, r4
 8009022:	f1c0 0420 	rsb	r4, r0, #32
 8009026:	fa21 f404 	lsr.w	r4, r1, r4
 800902a:	4323      	orrs	r3, r4
 800902c:	4081      	lsls	r1, r0
 800902e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009032:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009036:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800903a:	07d2      	lsls	r2, r2, #31
 800903c:	bf5c      	itt	pl
 800903e:	005b      	lslpl	r3, r3, #1
 8009040:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009044:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009048:	bf58      	it	pl
 800904a:	0049      	lslpl	r1, r1, #1
 800904c:	2600      	movs	r6, #0
 800904e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009052:	106d      	asrs	r5, r5, #1
 8009054:	0049      	lsls	r1, r1, #1
 8009056:	2016      	movs	r0, #22
 8009058:	4632      	mov	r2, r6
 800905a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800905e:	1917      	adds	r7, r2, r4
 8009060:	429f      	cmp	r7, r3
 8009062:	bfde      	ittt	le
 8009064:	193a      	addle	r2, r7, r4
 8009066:	1bdb      	suble	r3, r3, r7
 8009068:	1936      	addle	r6, r6, r4
 800906a:	0fcf      	lsrs	r7, r1, #31
 800906c:	3801      	subs	r0, #1
 800906e:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009072:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009076:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800907a:	d1f0      	bne.n	800905e <__ieee754_sqrt+0xb6>
 800907c:	4604      	mov	r4, r0
 800907e:	2720      	movs	r7, #32
 8009080:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009084:	429a      	cmp	r2, r3
 8009086:	eb00 0e0c 	add.w	lr, r0, ip
 800908a:	db02      	blt.n	8009092 <__ieee754_sqrt+0xea>
 800908c:	d113      	bne.n	80090b6 <__ieee754_sqrt+0x10e>
 800908e:	458e      	cmp	lr, r1
 8009090:	d811      	bhi.n	80090b6 <__ieee754_sqrt+0x10e>
 8009092:	f1be 0f00 	cmp.w	lr, #0
 8009096:	eb0e 000c 	add.w	r0, lr, ip
 800909a:	da42      	bge.n	8009122 <__ieee754_sqrt+0x17a>
 800909c:	2800      	cmp	r0, #0
 800909e:	db40      	blt.n	8009122 <__ieee754_sqrt+0x17a>
 80090a0:	f102 0801 	add.w	r8, r2, #1
 80090a4:	1a9b      	subs	r3, r3, r2
 80090a6:	458e      	cmp	lr, r1
 80090a8:	bf88      	it	hi
 80090aa:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80090ae:	eba1 010e 	sub.w	r1, r1, lr
 80090b2:	4464      	add	r4, ip
 80090b4:	4642      	mov	r2, r8
 80090b6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 80090ba:	3f01      	subs	r7, #1
 80090bc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 80090c0:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80090c4:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 80090c8:	d1dc      	bne.n	8009084 <__ieee754_sqrt+0xdc>
 80090ca:	4319      	orrs	r1, r3
 80090cc:	d01b      	beq.n	8009106 <__ieee754_sqrt+0x15e>
 80090ce:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009154 <__ieee754_sqrt+0x1ac>
 80090d2:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009158 <__ieee754_sqrt+0x1b0>
 80090d6:	e9da 0100 	ldrd	r0, r1, [sl]
 80090da:	e9db 2300 	ldrd	r2, r3, [fp]
 80090de:	f7f7 f8d3 	bl	8000288 <__aeabi_dsub>
 80090e2:	e9da 8900 	ldrd	r8, r9, [sl]
 80090e6:	4602      	mov	r2, r0
 80090e8:	460b      	mov	r3, r1
 80090ea:	4640      	mov	r0, r8
 80090ec:	4649      	mov	r1, r9
 80090ee:	f7f7 fcff 	bl	8000af0 <__aeabi_dcmple>
 80090f2:	b140      	cbz	r0, 8009106 <__ieee754_sqrt+0x15e>
 80090f4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80090f8:	e9da 0100 	ldrd	r0, r1, [sl]
 80090fc:	e9db 2300 	ldrd	r2, r3, [fp]
 8009100:	d111      	bne.n	8009126 <__ieee754_sqrt+0x17e>
 8009102:	3601      	adds	r6, #1
 8009104:	463c      	mov	r4, r7
 8009106:	1072      	asrs	r2, r6, #1
 8009108:	0863      	lsrs	r3, r4, #1
 800910a:	07f1      	lsls	r1, r6, #31
 800910c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009110:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009114:	bf48      	it	mi
 8009116:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800911a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800911e:	4618      	mov	r0, r3
 8009120:	e756      	b.n	8008fd0 <__ieee754_sqrt+0x28>
 8009122:	4690      	mov	r8, r2
 8009124:	e7be      	b.n	80090a4 <__ieee754_sqrt+0xfc>
 8009126:	f7f7 f8b1 	bl	800028c <__adddf3>
 800912a:	e9da 8900 	ldrd	r8, r9, [sl]
 800912e:	4602      	mov	r2, r0
 8009130:	460b      	mov	r3, r1
 8009132:	4640      	mov	r0, r8
 8009134:	4649      	mov	r1, r9
 8009136:	f7f7 fcd1 	bl	8000adc <__aeabi_dcmplt>
 800913a:	b120      	cbz	r0, 8009146 <__ieee754_sqrt+0x19e>
 800913c:	1ca0      	adds	r0, r4, #2
 800913e:	bf08      	it	eq
 8009140:	3601      	addeq	r6, #1
 8009142:	3402      	adds	r4, #2
 8009144:	e7df      	b.n	8009106 <__ieee754_sqrt+0x15e>
 8009146:	1c63      	adds	r3, r4, #1
 8009148:	f023 0401 	bic.w	r4, r3, #1
 800914c:	e7db      	b.n	8009106 <__ieee754_sqrt+0x15e>
 800914e:	bf00      	nop
 8009150:	7ff00000 	.word	0x7ff00000
 8009154:	200001e0 	.word	0x200001e0
 8009158:	200001d8 	.word	0x200001d8

0800915c <_init>:
 800915c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800915e:	bf00      	nop
 8009160:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009162:	bc08      	pop	{r3}
 8009164:	469e      	mov	lr, r3
 8009166:	4770      	bx	lr

08009168 <_fini>:
 8009168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800916a:	bf00      	nop
 800916c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800916e:	bc08      	pop	{r3}
 8009170:	469e      	mov	lr, r3
 8009172:	4770      	bx	lr
