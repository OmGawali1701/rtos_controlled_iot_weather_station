
Normal_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b7c  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bb8  08009d10  08009d10  0000ad10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8c8  0800a8c8  0000c1e8  2**0
                  CONTENTS
  4 .ARM          00000008  0800a8c8  0800a8c8  0000b8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8d0  0800a8d0  0000c1e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8d0  0800a8d0  0000b8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a8d4  0800a8d4  0000b8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e8  20000000  0800a8d8  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c1e8  2**0
                  CONTENTS
 10 .bss          000007ac  200001e8  200001e8  0000c1e8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000994  20000994  0000c1e8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c1e8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f42f  00000000  00000000  0000c218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000240f  00000000  00000000  0001b647  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000df8  00000000  00000000  0001da58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ad8  00000000  00000000  0001e850  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023877  00000000  00000000  0001f328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000123e1  00000000  00000000  00042b9f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d64a6  00000000  00000000  00054f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012b426  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004ef0  00000000  00000000  0012b46c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006a  00000000  00000000  0013035c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e8 	.word	0x200001e8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009cf4 	.word	0x08009cf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001ec 	.word	0x200001ec
 80001cc:	08009cf4 	.word	0x08009cf4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295
 8000c66:	f000 b9b5 	b.w	8000fd4 <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b96a 	b.w	8000fd4 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	460c      	mov	r4, r1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d14e      	bne.n	8000dc2 <__udivmoddi4+0xaa>
 8000d24:	4694      	mov	ip, r2
 8000d26:	458c      	cmp	ip, r1
 8000d28:	4686      	mov	lr, r0
 8000d2a:	fab2 f282 	clz	r2, r2
 8000d2e:	d962      	bls.n	8000df6 <__udivmoddi4+0xde>
 8000d30:	b14a      	cbz	r2, 8000d46 <__udivmoddi4+0x2e>
 8000d32:	f1c2 0320 	rsb	r3, r2, #32
 8000d36:	4091      	lsls	r1, r2
 8000d38:	fa20 f303 	lsr.w	r3, r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	4319      	orrs	r1, r3
 8000d42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4a:	fa1f f68c 	uxth.w	r6, ip
 8000d4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d56:	fb07 1114 	mls	r1, r7, r4, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb04 f106 	mul.w	r1, r4, r6
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x64>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d6e:	f080 8112 	bcs.w	8000f96 <__udivmoddi4+0x27e>
 8000d72:	4299      	cmp	r1, r3
 8000d74:	f240 810f 	bls.w	8000f96 <__udivmoddi4+0x27e>
 8000d78:	3c02      	subs	r4, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	fa1f f38e 	uxth.w	r3, lr
 8000d82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d86:	fb07 1110 	mls	r1, r7, r0, r1
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f606 	mul.w	r6, r0, r6
 8000d92:	429e      	cmp	r6, r3
 8000d94:	d90a      	bls.n	8000dac <__udivmoddi4+0x94>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d9e:	f080 80fc 	bcs.w	8000f9a <__udivmoddi4+0x282>
 8000da2:	429e      	cmp	r6, r3
 8000da4:	f240 80f9 	bls.w	8000f9a <__udivmoddi4+0x282>
 8000da8:	4463      	add	r3, ip
 8000daa:	3802      	subs	r0, #2
 8000dac:	1b9b      	subs	r3, r3, r6
 8000dae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000db2:	2100      	movs	r1, #0
 8000db4:	b11d      	cbz	r5, 8000dbe <__udivmoddi4+0xa6>
 8000db6:	40d3      	lsrs	r3, r2
 8000db8:	2200      	movs	r2, #0
 8000dba:	e9c5 3200 	strd	r3, r2, [r5]
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d905      	bls.n	8000dd2 <__udivmoddi4+0xba>
 8000dc6:	b10d      	cbz	r5, 8000dcc <__udivmoddi4+0xb4>
 8000dc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e7f5      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000dd2:	fab3 f183 	clz	r1, r3
 8000dd6:	2900      	cmp	r1, #0
 8000dd8:	d146      	bne.n	8000e68 <__udivmoddi4+0x150>
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	d302      	bcc.n	8000de4 <__udivmoddi4+0xcc>
 8000dde:	4290      	cmp	r0, r2
 8000de0:	f0c0 80f0 	bcc.w	8000fc4 <__udivmoddi4+0x2ac>
 8000de4:	1a86      	subs	r6, r0, r2
 8000de6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dea:	2001      	movs	r0, #1
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d0e6      	beq.n	8000dbe <__udivmoddi4+0xa6>
 8000df0:	e9c5 6300 	strd	r6, r3, [r5]
 8000df4:	e7e3      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	f040 8090 	bne.w	8000f1c <__udivmoddi4+0x204>
 8000dfc:	eba1 040c 	sub.w	r4, r1, ip
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e12:	fb08 4416 	mls	r4, r8, r6, r4
 8000e16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1a:	fb07 f006 	mul.w	r0, r7, r6
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x11c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x11a>
 8000e2c:	4298      	cmp	r0, r3
 8000e2e:	f200 80cd 	bhi.w	8000fcc <__udivmoddi4+0x2b4>
 8000e32:	4626      	mov	r6, r4
 8000e34:	1a1c      	subs	r4, r3, r0
 8000e36:	fa1f f38e 	uxth.w	r3, lr
 8000e3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb00 f707 	mul.w	r7, r0, r7
 8000e4a:	429f      	cmp	r7, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x148>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x146>
 8000e58:	429f      	cmp	r7, r3
 8000e5a:	f200 80b0 	bhi.w	8000fbe <__udivmoddi4+0x2a6>
 8000e5e:	4620      	mov	r0, r4
 8000e60:	1bdb      	subs	r3, r3, r7
 8000e62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e66:	e7a5      	b.n	8000db4 <__udivmoddi4+0x9c>
 8000e68:	f1c1 0620 	rsb	r6, r1, #32
 8000e6c:	408b      	lsls	r3, r1
 8000e6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e72:	431f      	orrs	r7, r3
 8000e74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e78:	fa04 f301 	lsl.w	r3, r4, r1
 8000e7c:	ea43 030c 	orr.w	r3, r3, ip
 8000e80:	40f4      	lsrs	r4, r6
 8000e82:	fa00 f801 	lsl.w	r8, r0, r1
 8000e86:	0c38      	lsrs	r0, r7, #16
 8000e88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e90:	fa1f fc87 	uxth.w	ip, r7
 8000e94:	fb00 441e 	mls	r4, r0, lr, r4
 8000e98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000ea0:	45a1      	cmp	r9, r4
 8000ea2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea6:	d90a      	bls.n	8000ebe <__udivmoddi4+0x1a6>
 8000ea8:	193c      	adds	r4, r7, r4
 8000eaa:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eae:	f080 8084 	bcs.w	8000fba <__udivmoddi4+0x2a2>
 8000eb2:	45a1      	cmp	r9, r4
 8000eb4:	f240 8081 	bls.w	8000fba <__udivmoddi4+0x2a2>
 8000eb8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	eba4 0409 	sub.w	r4, r4, r9
 8000ec2:	fa1f f983 	uxth.w	r9, r3
 8000ec6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eca:	fb00 4413 	mls	r4, r0, r3, r4
 8000ece:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed6:	45a4      	cmp	ip, r4
 8000ed8:	d907      	bls.n	8000eea <__udivmoddi4+0x1d2>
 8000eda:	193c      	adds	r4, r7, r4
 8000edc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000ee0:	d267      	bcs.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d965      	bls.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee6:	3b02      	subs	r3, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eee:	fba0 9302 	umull	r9, r3, r0, r2
 8000ef2:	eba4 040c 	sub.w	r4, r4, ip
 8000ef6:	429c      	cmp	r4, r3
 8000ef8:	46ce      	mov	lr, r9
 8000efa:	469c      	mov	ip, r3
 8000efc:	d351      	bcc.n	8000fa2 <__udivmoddi4+0x28a>
 8000efe:	d04e      	beq.n	8000f9e <__udivmoddi4+0x286>
 8000f00:	b155      	cbz	r5, 8000f18 <__udivmoddi4+0x200>
 8000f02:	ebb8 030e 	subs.w	r3, r8, lr
 8000f06:	eb64 040c 	sbc.w	r4, r4, ip
 8000f0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0e:	40cb      	lsrs	r3, r1
 8000f10:	431e      	orrs	r6, r3
 8000f12:	40cc      	lsrs	r4, r1
 8000f14:	e9c5 6400 	strd	r6, r4, [r5]
 8000f18:	2100      	movs	r1, #0
 8000f1a:	e750      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000f1c:	f1c2 0320 	rsb	r3, r2, #32
 8000f20:	fa20 f103 	lsr.w	r1, r0, r3
 8000f24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f28:	fa24 f303 	lsr.w	r3, r4, r3
 8000f2c:	4094      	lsls	r4, r2
 8000f2e:	430c      	orrs	r4, r1
 8000f30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f38:	fa1f f78c 	uxth.w	r7, ip
 8000f3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f40:	fb08 3110 	mls	r1, r8, r0, r3
 8000f44:	0c23      	lsrs	r3, r4, #16
 8000f46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f4a:	fb00 f107 	mul.w	r1, r0, r7
 8000f4e:	4299      	cmp	r1, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x24c>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f5a:	d22c      	bcs.n	8000fb6 <__udivmoddi4+0x29e>
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	d92a      	bls.n	8000fb6 <__udivmoddi4+0x29e>
 8000f60:	3802      	subs	r0, #2
 8000f62:	4463      	add	r3, ip
 8000f64:	1a5b      	subs	r3, r3, r1
 8000f66:	b2a4      	uxth	r4, r4
 8000f68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f74:	fb01 f307 	mul.w	r3, r1, r7
 8000f78:	42a3      	cmp	r3, r4
 8000f7a:	d908      	bls.n	8000f8e <__udivmoddi4+0x276>
 8000f7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f80:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f84:	d213      	bcs.n	8000fae <__udivmoddi4+0x296>
 8000f86:	42a3      	cmp	r3, r4
 8000f88:	d911      	bls.n	8000fae <__udivmoddi4+0x296>
 8000f8a:	3902      	subs	r1, #2
 8000f8c:	4464      	add	r4, ip
 8000f8e:	1ae4      	subs	r4, r4, r3
 8000f90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f94:	e739      	b.n	8000e0a <__udivmoddi4+0xf2>
 8000f96:	4604      	mov	r4, r0
 8000f98:	e6f0      	b.n	8000d7c <__udivmoddi4+0x64>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e706      	b.n	8000dac <__udivmoddi4+0x94>
 8000f9e:	45c8      	cmp	r8, r9
 8000fa0:	d2ae      	bcs.n	8000f00 <__udivmoddi4+0x1e8>
 8000fa2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fa6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000faa:	3801      	subs	r0, #1
 8000fac:	e7a8      	b.n	8000f00 <__udivmoddi4+0x1e8>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	e7ed      	b.n	8000f8e <__udivmoddi4+0x276>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	e799      	b.n	8000eea <__udivmoddi4+0x1d2>
 8000fb6:	4630      	mov	r0, r6
 8000fb8:	e7d4      	b.n	8000f64 <__udivmoddi4+0x24c>
 8000fba:	46d6      	mov	lr, sl
 8000fbc:	e77f      	b.n	8000ebe <__udivmoddi4+0x1a6>
 8000fbe:	4463      	add	r3, ip
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	e74d      	b.n	8000e60 <__udivmoddi4+0x148>
 8000fc4:	4606      	mov	r6, r0
 8000fc6:	4623      	mov	r3, r4
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e70f      	b.n	8000dec <__udivmoddi4+0xd4>
 8000fcc:	3e02      	subs	r6, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	e730      	b.n	8000e34 <__udivmoddi4+0x11c>
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b08c      	sub	sp, #48	@ 0x30
 8000fdc:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 8000fde:	f04f 33ff 	mov.w	r3, #4294967295
 8000fe2:	9302      	str	r3, [sp, #8]
 8000fe4:	2319      	movs	r3, #25
 8000fe6:	9301      	str	r3, [sp, #4]
 8000fe8:	463b      	mov	r3, r7
 8000fea:	9300      	str	r3, [sp, #0]
 8000fec:	2301      	movs	r3, #1
 8000fee:	2288      	movs	r2, #136	@ 0x88
 8000ff0:	21ec      	movs	r1, #236	@ 0xec
 8000ff2:	4857      	ldr	r0, [pc, #348]	@ (8001150 <TrimRead+0x178>)
 8000ff4:	f002 ffe2 	bl	8003fbc <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8000ff8:	463b      	mov	r3, r7
 8000ffa:	3319      	adds	r3, #25
 8000ffc:	f04f 32ff 	mov.w	r2, #4294967295
 8001000:	9202      	str	r2, [sp, #8]
 8001002:	2207      	movs	r2, #7
 8001004:	9201      	str	r2, [sp, #4]
 8001006:	9300      	str	r3, [sp, #0]
 8001008:	2301      	movs	r3, #1
 800100a:	22e1      	movs	r2, #225	@ 0xe1
 800100c:	21ec      	movs	r1, #236	@ 0xec
 800100e:	4850      	ldr	r0, [pc, #320]	@ (8001150 <TrimRead+0x178>)
 8001010:	f002 ffd4 	bl	8003fbc <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 8001014:	787b      	ldrb	r3, [r7, #1]
 8001016:	021b      	lsls	r3, r3, #8
 8001018:	b21a      	sxth	r2, r3
 800101a:	783b      	ldrb	r3, [r7, #0]
 800101c:	b21b      	sxth	r3, r3
 800101e:	4313      	orrs	r3, r2
 8001020:	b21b      	sxth	r3, r3
 8001022:	b29a      	uxth	r2, r3
 8001024:	4b4b      	ldr	r3, [pc, #300]	@ (8001154 <TrimRead+0x17c>)
 8001026:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 8001028:	78fb      	ldrb	r3, [r7, #3]
 800102a:	021b      	lsls	r3, r3, #8
 800102c:	b21a      	sxth	r2, r3
 800102e:	78bb      	ldrb	r3, [r7, #2]
 8001030:	b21b      	sxth	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b21a      	sxth	r2, r3
 8001036:	4b48      	ldr	r3, [pc, #288]	@ (8001158 <TrimRead+0x180>)
 8001038:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 800103a:	797b      	ldrb	r3, [r7, #5]
 800103c:	021b      	lsls	r3, r3, #8
 800103e:	b21a      	sxth	r2, r3
 8001040:	793b      	ldrb	r3, [r7, #4]
 8001042:	b21b      	sxth	r3, r3
 8001044:	4313      	orrs	r3, r2
 8001046:	b21a      	sxth	r2, r3
 8001048:	4b44      	ldr	r3, [pc, #272]	@ (800115c <TrimRead+0x184>)
 800104a:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 800104c:	79fb      	ldrb	r3, [r7, #7]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	b21a      	sxth	r2, r3
 8001052:	797b      	ldrb	r3, [r7, #5]
 8001054:	b21b      	sxth	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b21b      	sxth	r3, r3
 800105a:	b29a      	uxth	r2, r3
 800105c:	4b40      	ldr	r3, [pc, #256]	@ (8001160 <TrimRead+0x188>)
 800105e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001060:	7a7b      	ldrb	r3, [r7, #9]
 8001062:	021b      	lsls	r3, r3, #8
 8001064:	b21a      	sxth	r2, r3
 8001066:	79bb      	ldrb	r3, [r7, #6]
 8001068:	b21b      	sxth	r3, r3
 800106a:	4313      	orrs	r3, r2
 800106c:	b21a      	sxth	r2, r3
 800106e:	4b3d      	ldr	r3, [pc, #244]	@ (8001164 <TrimRead+0x18c>)
 8001070:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001072:	7afb      	ldrb	r3, [r7, #11]
 8001074:	021b      	lsls	r3, r3, #8
 8001076:	b21a      	sxth	r2, r3
 8001078:	7abb      	ldrb	r3, [r7, #10]
 800107a:	b21b      	sxth	r3, r3
 800107c:	4313      	orrs	r3, r2
 800107e:	b21a      	sxth	r2, r3
 8001080:	4b39      	ldr	r3, [pc, #228]	@ (8001168 <TrimRead+0x190>)
 8001082:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001084:	7b7b      	ldrb	r3, [r7, #13]
 8001086:	021b      	lsls	r3, r3, #8
 8001088:	b21a      	sxth	r2, r3
 800108a:	7b3b      	ldrb	r3, [r7, #12]
 800108c:	b21b      	sxth	r3, r3
 800108e:	4313      	orrs	r3, r2
 8001090:	b21a      	sxth	r2, r3
 8001092:	4b36      	ldr	r3, [pc, #216]	@ (800116c <TrimRead+0x194>)
 8001094:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001096:	7bfb      	ldrb	r3, [r7, #15]
 8001098:	021b      	lsls	r3, r3, #8
 800109a:	b21a      	sxth	r2, r3
 800109c:	7bbb      	ldrb	r3, [r7, #14]
 800109e:	b21b      	sxth	r3, r3
 80010a0:	4313      	orrs	r3, r2
 80010a2:	b21a      	sxth	r2, r3
 80010a4:	4b32      	ldr	r3, [pc, #200]	@ (8001170 <TrimRead+0x198>)
 80010a6:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 80010a8:	7c7b      	ldrb	r3, [r7, #17]
 80010aa:	021b      	lsls	r3, r3, #8
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	7c3b      	ldrb	r3, [r7, #16]
 80010b0:	b21b      	sxth	r3, r3
 80010b2:	4313      	orrs	r3, r2
 80010b4:	b21a      	sxth	r2, r3
 80010b6:	4b2f      	ldr	r3, [pc, #188]	@ (8001174 <TrimRead+0x19c>)
 80010b8:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 80010ba:	7cfb      	ldrb	r3, [r7, #19]
 80010bc:	021b      	lsls	r3, r3, #8
 80010be:	b21a      	sxth	r2, r3
 80010c0:	7cbb      	ldrb	r3, [r7, #18]
 80010c2:	b21b      	sxth	r3, r3
 80010c4:	4313      	orrs	r3, r2
 80010c6:	b21a      	sxth	r2, r3
 80010c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001178 <TrimRead+0x1a0>)
 80010ca:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 80010cc:	7d7b      	ldrb	r3, [r7, #21]
 80010ce:	021b      	lsls	r3, r3, #8
 80010d0:	b21a      	sxth	r2, r3
 80010d2:	7d3b      	ldrb	r3, [r7, #20]
 80010d4:	b21b      	sxth	r3, r3
 80010d6:	4313      	orrs	r3, r2
 80010d8:	b21a      	sxth	r2, r3
 80010da:	4b28      	ldr	r3, [pc, #160]	@ (800117c <TrimRead+0x1a4>)
 80010dc:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 80010de:	7dfb      	ldrb	r3, [r7, #23]
 80010e0:	021b      	lsls	r3, r3, #8
 80010e2:	b21a      	sxth	r2, r3
 80010e4:	7dbb      	ldrb	r3, [r7, #22]
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	4b24      	ldr	r3, [pc, #144]	@ (8001180 <TrimRead+0x1a8>)
 80010ee:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80010f0:	7e3b      	ldrb	r3, [r7, #24]
 80010f2:	461a      	mov	r2, r3
 80010f4:	4b23      	ldr	r3, [pc, #140]	@ (8001184 <TrimRead+0x1ac>)
 80010f6:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80010f8:	7ebb      	ldrb	r3, [r7, #26]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	7e7b      	ldrb	r3, [r7, #25]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21a      	sxth	r2, r3
 8001106:	4b20      	ldr	r3, [pc, #128]	@ (8001188 <TrimRead+0x1b0>)
 8001108:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 800110a:	7efb      	ldrb	r3, [r7, #27]
 800110c:	461a      	mov	r2, r3
 800110e:	4b1f      	ldr	r3, [pc, #124]	@ (800118c <TrimRead+0x1b4>)
 8001110:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 8001112:	7f3b      	ldrb	r3, [r7, #28]
 8001114:	011b      	lsls	r3, r3, #4
 8001116:	b21a      	sxth	r2, r3
 8001118:	7f7b      	ldrb	r3, [r7, #29]
 800111a:	b21b      	sxth	r3, r3
 800111c:	f003 030f 	and.w	r3, r3, #15
 8001120:	b21b      	sxth	r3, r3
 8001122:	4313      	orrs	r3, r2
 8001124:	b21a      	sxth	r2, r3
 8001126:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <TrimRead+0x1b8>)
 8001128:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 800112a:	7fbb      	ldrb	r3, [r7, #30]
 800112c:	011b      	lsls	r3, r3, #4
 800112e:	b21a      	sxth	r2, r3
 8001130:	7f7b      	ldrb	r3, [r7, #29]
 8001132:	091b      	lsrs	r3, r3, #4
 8001134:	b2db      	uxtb	r3, r3
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b21a      	sxth	r2, r3
 800113c:	4b15      	ldr	r3, [pc, #84]	@ (8001194 <TrimRead+0x1bc>)
 800113e:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 8001140:	7ffb      	ldrb	r3, [r7, #31]
 8001142:	b21a      	sxth	r2, r3
 8001144:	4b14      	ldr	r3, [pc, #80]	@ (8001198 <TrimRead+0x1c0>)
 8001146:	801a      	strh	r2, [r3, #0]
}
 8001148:	bf00      	nop
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200002ac 	.word	0x200002ac
 8001154:	2000023c 	.word	0x2000023c
 8001158:	20000244 	.word	0x20000244
 800115c:	20000246 	.word	0x20000246
 8001160:	2000023e 	.word	0x2000023e
 8001164:	20000248 	.word	0x20000248
 8001168:	2000024a 	.word	0x2000024a
 800116c:	2000024c 	.word	0x2000024c
 8001170:	2000024e 	.word	0x2000024e
 8001174:	20000250 	.word	0x20000250
 8001178:	20000252 	.word	0x20000252
 800117c:	20000254 	.word	0x20000254
 8001180:	20000256 	.word	0x20000256
 8001184:	20000240 	.word	0x20000240
 8001188:	20000258 	.word	0x20000258
 800118c:	20000242 	.word	0x20000242
 8001190:	2000025a 	.word	0x2000025a
 8001194:	2000025c 	.word	0x2000025c
 8001198:	2000025e 	.word	0x2000025e

0800119c <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 800119c:	b590      	push	{r4, r7, lr}
 800119e:	b089      	sub	sp, #36	@ 0x24
 80011a0:	af04      	add	r7, sp, #16
 80011a2:	4604      	mov	r4, r0
 80011a4:	4608      	mov	r0, r1
 80011a6:	4611      	mov	r1, r2
 80011a8:	461a      	mov	r2, r3
 80011aa:	4623      	mov	r3, r4
 80011ac:	71fb      	strb	r3, [r7, #7]
 80011ae:	4603      	mov	r3, r0
 80011b0:	71bb      	strb	r3, [r7, #6]
 80011b2:	460b      	mov	r3, r1
 80011b4:	717b      	strb	r3, [r7, #5]
 80011b6:	4613      	mov	r3, r2
 80011b8:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 80011ba:	f7ff ff0d 	bl	8000fd8 <TrimRead>


	uint8_t datatowrite = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 80011c6:	23b6      	movs	r3, #182	@ 0xb6
 80011c8:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011ce:	9302      	str	r3, [sp, #8]
 80011d0:	2301      	movs	r3, #1
 80011d2:	9301      	str	r3, [sp, #4]
 80011d4:	f107 030f 	add.w	r3, r7, #15
 80011d8:	9300      	str	r3, [sp, #0]
 80011da:	2301      	movs	r3, #1
 80011dc:	22e0      	movs	r2, #224	@ 0xe0
 80011de:	21ec      	movs	r1, #236	@ 0xec
 80011e0:	4858      	ldr	r0, [pc, #352]	@ (8001344 <BME280_Config+0x1a8>)
 80011e2:	f002 fdf1 	bl	8003dc8 <HAL_I2C_Mem_Write>
 80011e6:	4603      	mov	r3, r0
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d002      	beq.n	80011f2 <BME280_Config+0x56>
	{
		return -1;
 80011ec:	f04f 33ff 	mov.w	r3, #4294967295
 80011f0:	e0a3      	b.n	800133a <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 80011f2:	2064      	movs	r0, #100	@ 0x64
 80011f4:	f001 fe18 	bl	8002e28 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80011f8:	797b      	ldrb	r3, [r7, #5]
 80011fa:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80011fc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001200:	9302      	str	r3, [sp, #8]
 8001202:	2301      	movs	r3, #1
 8001204:	9301      	str	r3, [sp, #4]
 8001206:	f107 030f 	add.w	r3, r7, #15
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	2301      	movs	r3, #1
 800120e:	22f2      	movs	r2, #242	@ 0xf2
 8001210:	21ec      	movs	r1, #236	@ 0xec
 8001212:	484c      	ldr	r0, [pc, #304]	@ (8001344 <BME280_Config+0x1a8>)
 8001214:	f002 fdd8 	bl	8003dc8 <HAL_I2C_Mem_Write>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d002      	beq.n	8001224 <BME280_Config+0x88>
	{
		return -1;
 800121e:	f04f 33ff 	mov.w	r3, #4294967295
 8001222:	e08a      	b.n	800133a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001224:	2064      	movs	r0, #100	@ 0x64
 8001226:	f001 fdff 	bl	8002e28 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 800122a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800122e:	9302      	str	r3, [sp, #8]
 8001230:	2301      	movs	r3, #1
 8001232:	9301      	str	r3, [sp, #4]
 8001234:	f107 030e 	add.w	r3, r7, #14
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	2301      	movs	r3, #1
 800123c:	22f2      	movs	r2, #242	@ 0xf2
 800123e:	21ec      	movs	r1, #236	@ 0xec
 8001240:	4840      	ldr	r0, [pc, #256]	@ (8001344 <BME280_Config+0x1a8>)
 8001242:	f002 febb 	bl	8003fbc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001246:	7bba      	ldrb	r2, [r7, #14]
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	429a      	cmp	r2, r3
 800124c:	d002      	beq.n	8001254 <BME280_Config+0xb8>
	{
		return -1;
 800124e:	f04f 33ff 	mov.w	r3, #4294967295
 8001252:	e072      	b.n	800133a <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001254:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001258:	015b      	lsls	r3, r3, #5
 800125a:	b25a      	sxtb	r2, r3
 800125c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	b25b      	sxtb	r3, r3
 8001264:	4313      	orrs	r3, r2
 8001266:	b25b      	sxtb	r3, r3
 8001268:	b2db      	uxtb	r3, r3
 800126a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800126c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001270:	9302      	str	r3, [sp, #8]
 8001272:	2301      	movs	r3, #1
 8001274:	9301      	str	r3, [sp, #4]
 8001276:	f107 030f 	add.w	r3, r7, #15
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2301      	movs	r3, #1
 800127e:	22f5      	movs	r2, #245	@ 0xf5
 8001280:	21ec      	movs	r1, #236	@ 0xec
 8001282:	4830      	ldr	r0, [pc, #192]	@ (8001344 <BME280_Config+0x1a8>)
 8001284:	f002 fda0 	bl	8003dc8 <HAL_I2C_Mem_Write>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d002      	beq.n	8001294 <BME280_Config+0xf8>
	{
		return -1;
 800128e:	f04f 33ff 	mov.w	r3, #4294967295
 8001292:	e052      	b.n	800133a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001294:	2064      	movs	r0, #100	@ 0x64
 8001296:	f001 fdc7 	bl	8002e28 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800129a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800129e:	9302      	str	r3, [sp, #8]
 80012a0:	2301      	movs	r3, #1
 80012a2:	9301      	str	r3, [sp, #4]
 80012a4:	f107 030e 	add.w	r3, r7, #14
 80012a8:	9300      	str	r3, [sp, #0]
 80012aa:	2301      	movs	r3, #1
 80012ac:	22f5      	movs	r2, #245	@ 0xf5
 80012ae:	21ec      	movs	r1, #236	@ 0xec
 80012b0:	4824      	ldr	r0, [pc, #144]	@ (8001344 <BME280_Config+0x1a8>)
 80012b2:	f002 fe83 	bl	8003fbc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012b6:	7bba      	ldrb	r2, [r7, #14]
 80012b8:	7bfb      	ldrb	r3, [r7, #15]
 80012ba:	429a      	cmp	r2, r3
 80012bc:	d002      	beq.n	80012c4 <BME280_Config+0x128>
	{
		return -1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	e03a      	b.n	800133a <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	015b      	lsls	r3, r3, #5
 80012c8:	b25a      	sxtb	r2, r3
 80012ca:	79bb      	ldrb	r3, [r7, #6]
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	b25b      	sxtb	r3, r3
 80012d0:	4313      	orrs	r3, r2
 80012d2:	b25a      	sxtb	r2, r3
 80012d4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80012d8:	4313      	orrs	r3, r2
 80012da:	b25b      	sxtb	r3, r3
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012e0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012e4:	9302      	str	r3, [sp, #8]
 80012e6:	2301      	movs	r3, #1
 80012e8:	9301      	str	r3, [sp, #4]
 80012ea:	f107 030f 	add.w	r3, r7, #15
 80012ee:	9300      	str	r3, [sp, #0]
 80012f0:	2301      	movs	r3, #1
 80012f2:	22f4      	movs	r2, #244	@ 0xf4
 80012f4:	21ec      	movs	r1, #236	@ 0xec
 80012f6:	4813      	ldr	r0, [pc, #76]	@ (8001344 <BME280_Config+0x1a8>)
 80012f8:	f002 fd66 	bl	8003dc8 <HAL_I2C_Mem_Write>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <BME280_Config+0x16c>
	{
		return -1;
 8001302:	f04f 33ff 	mov.w	r3, #4294967295
 8001306:	e018      	b.n	800133a <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001308:	2064      	movs	r0, #100	@ 0x64
 800130a:	f001 fd8d 	bl	8002e28 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 800130e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001312:	9302      	str	r3, [sp, #8]
 8001314:	2301      	movs	r3, #1
 8001316:	9301      	str	r3, [sp, #4]
 8001318:	f107 030e 	add.w	r3, r7, #14
 800131c:	9300      	str	r3, [sp, #0]
 800131e:	2301      	movs	r3, #1
 8001320:	22f4      	movs	r2, #244	@ 0xf4
 8001322:	21ec      	movs	r1, #236	@ 0xec
 8001324:	4807      	ldr	r0, [pc, #28]	@ (8001344 <BME280_Config+0x1a8>)
 8001326:	f002 fe49 	bl	8003fbc <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 800132a:	7bba      	ldrb	r2, [r7, #14]
 800132c:	7bfb      	ldrb	r3, [r7, #15]
 800132e:	429a      	cmp	r2, r3
 8001330:	d002      	beq.n	8001338 <BME280_Config+0x19c>
	{
		return -1;
 8001332:	f04f 33ff 	mov.w	r3, #4294967295
 8001336:	e000      	b.n	800133a <BME280_Config+0x19e>
	}

	return 0;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3714      	adds	r7, #20
 800133e:	46bd      	mov	sp, r7
 8001340:	bd90      	pop	{r4, r7, pc}
 8001342:	bf00      	nop
 8001344:	200002ac 	.word	0x200002ac

08001348 <BMEReadRaw>:


int BMEReadRaw(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 800134e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001352:	9302      	str	r3, [sp, #8]
 8001354:	2301      	movs	r3, #1
 8001356:	9301      	str	r3, [sp, #4]
 8001358:	4b1e      	ldr	r3, [pc, #120]	@ (80013d4 <BMEReadRaw+0x8c>)
 800135a:	9300      	str	r3, [sp, #0]
 800135c:	2301      	movs	r3, #1
 800135e:	22d0      	movs	r2, #208	@ 0xd0
 8001360:	21ec      	movs	r1, #236	@ 0xec
 8001362:	481d      	ldr	r0, [pc, #116]	@ (80013d8 <BMEReadRaw+0x90>)
 8001364:	f002 fe2a 	bl	8003fbc <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001368:	4b1a      	ldr	r3, [pc, #104]	@ (80013d4 <BMEReadRaw+0x8c>)
 800136a:	781b      	ldrb	r3, [r3, #0]
 800136c:	2b60      	cmp	r3, #96	@ 0x60
 800136e:	d12a      	bne.n	80013c6 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001370:	f04f 33ff 	mov.w	r3, #4294967295
 8001374:	9302      	str	r3, [sp, #8]
 8001376:	2308      	movs	r3, #8
 8001378:	9301      	str	r3, [sp, #4]
 800137a:	463b      	mov	r3, r7
 800137c:	9300      	str	r3, [sp, #0]
 800137e:	2301      	movs	r3, #1
 8001380:	22f7      	movs	r2, #247	@ 0xf7
 8001382:	21ec      	movs	r1, #236	@ 0xec
 8001384:	4814      	ldr	r0, [pc, #80]	@ (80013d8 <BMEReadRaw+0x90>)
 8001386:	f002 fe19 	bl	8003fbc <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800138a:	783b      	ldrb	r3, [r7, #0]
 800138c:	031a      	lsls	r2, r3, #12
 800138e:	787b      	ldrb	r3, [r7, #1]
 8001390:	011b      	lsls	r3, r3, #4
 8001392:	4313      	orrs	r3, r2
 8001394:	78ba      	ldrb	r2, [r7, #2]
 8001396:	0912      	lsrs	r2, r2, #4
 8001398:	b2d2      	uxtb	r2, r2
 800139a:	4313      	orrs	r3, r2
 800139c:	4a0f      	ldr	r2, [pc, #60]	@ (80013dc <BMEReadRaw+0x94>)
 800139e:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 80013a0:	78fb      	ldrb	r3, [r7, #3]
 80013a2:	031a      	lsls	r2, r3, #12
 80013a4:	793b      	ldrb	r3, [r7, #4]
 80013a6:	011b      	lsls	r3, r3, #4
 80013a8:	4313      	orrs	r3, r2
 80013aa:	797a      	ldrb	r2, [r7, #5]
 80013ac:	0912      	lsrs	r2, r2, #4
 80013ae:	b2d2      	uxtb	r2, r2
 80013b0:	4313      	orrs	r3, r2
 80013b2:	4a0b      	ldr	r2, [pc, #44]	@ (80013e0 <BMEReadRaw+0x98>)
 80013b4:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 80013b6:	79bb      	ldrb	r3, [r7, #6]
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	79fa      	ldrb	r2, [r7, #7]
 80013bc:	4313      	orrs	r3, r2
 80013be:	4a09      	ldr	r2, [pc, #36]	@ (80013e4 <BMEReadRaw+0x9c>)
 80013c0:	6013      	str	r3, [r2, #0]

		return 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	e001      	b.n	80013ca <BMEReadRaw+0x82>
	}

	else return -1;
 80013c6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	2000022c 	.word	0x2000022c
 80013d8:	200002ac 	.word	0x200002ac
 80013dc:	20000234 	.word	0x20000234
 80013e0:	20000230 	.word	0x20000230
 80013e4:	20000238 	.word	0x20000238

080013e8 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 80013e8:	b480      	push	{r7}
 80013ea:	b087      	sub	sp, #28
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	10da      	asrs	r2, r3, #3
 80013f4:	4b19      	ldr	r3, [pc, #100]	@ (800145c <BME280_compensate_T_int32+0x74>)
 80013f6:	881b      	ldrh	r3, [r3, #0]
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	1ad3      	subs	r3, r2, r3
 80013fc:	4a18      	ldr	r2, [pc, #96]	@ (8001460 <BME280_compensate_T_int32+0x78>)
 80013fe:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	12db      	asrs	r3, r3, #11
 8001408:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	111b      	asrs	r3, r3, #4
 800140e:	4a13      	ldr	r2, [pc, #76]	@ (800145c <BME280_compensate_T_int32+0x74>)
 8001410:	8812      	ldrh	r2, [r2, #0]
 8001412:	1a9b      	subs	r3, r3, r2
 8001414:	687a      	ldr	r2, [r7, #4]
 8001416:	1112      	asrs	r2, r2, #4
 8001418:	4910      	ldr	r1, [pc, #64]	@ (800145c <BME280_compensate_T_int32+0x74>)
 800141a:	8809      	ldrh	r1, [r1, #0]
 800141c:	1a52      	subs	r2, r2, r1
 800141e:	fb02 f303 	mul.w	r3, r2, r3
 8001422:	131b      	asrs	r3, r3, #12
 8001424:	4a0f      	ldr	r2, [pc, #60]	@ (8001464 <BME280_compensate_T_int32+0x7c>)
 8001426:	f9b2 2000 	ldrsh.w	r2, [r2]
 800142a:	fb02 f303 	mul.w	r3, r2, r3
 800142e:	139b      	asrs	r3, r3, #14
 8001430:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4413      	add	r3, r2
 8001438:	4a0b      	ldr	r2, [pc, #44]	@ (8001468 <BME280_compensate_T_int32+0x80>)
 800143a:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 800143c:	4b0a      	ldr	r3, [pc, #40]	@ (8001468 <BME280_compensate_T_int32+0x80>)
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	4613      	mov	r3, r2
 8001442:	009b      	lsls	r3, r3, #2
 8001444:	4413      	add	r3, r2
 8001446:	3380      	adds	r3, #128	@ 0x80
 8001448:	121b      	asrs	r3, r3, #8
 800144a:	60fb      	str	r3, [r7, #12]
	return T;
 800144c:	68fb      	ldr	r3, [r7, #12]
}
 800144e:	4618      	mov	r0, r3
 8001450:	371c      	adds	r7, #28
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr
 800145a:	bf00      	nop
 800145c:	2000023c 	.word	0x2000023c
 8001460:	20000244 	.word	0x20000244
 8001464:	20000246 	.word	0x20000246
 8001468:	20000260 	.word	0x20000260

0800146c <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800146c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001470:	b0ca      	sub	sp, #296	@ 0x128
 8001472:	af00      	add	r7, sp, #0
 8001474:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001478:	4baf      	ldr	r3, [pc, #700]	@ (8001738 <BME280_compensate_P_int64+0x2cc>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	17da      	asrs	r2, r3, #31
 800147e:	461c      	mov	r4, r3
 8001480:	4615      	mov	r5, r2
 8001482:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001486:	f145 3bff 	adc.w	fp, r5, #4294967295
 800148a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800148e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001492:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001496:	fb03 f102 	mul.w	r1, r3, r2
 800149a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800149e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014a2:	fb02 f303 	mul.w	r3, r2, r3
 80014a6:	18ca      	adds	r2, r1, r3
 80014a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80014ac:	fba3 8903 	umull	r8, r9, r3, r3
 80014b0:	eb02 0309 	add.w	r3, r2, r9
 80014b4:	4699      	mov	r9, r3
 80014b6:	4ba1      	ldr	r3, [pc, #644]	@ (800173c <BME280_compensate_P_int64+0x2d0>)
 80014b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80014bc:	b21b      	sxth	r3, r3
 80014be:	17da      	asrs	r2, r3, #31
 80014c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80014c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80014c8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80014cc:	4603      	mov	r3, r0
 80014ce:	fb03 f209 	mul.w	r2, r3, r9
 80014d2:	460b      	mov	r3, r1
 80014d4:	fb08 f303 	mul.w	r3, r8, r3
 80014d8:	4413      	add	r3, r2
 80014da:	4602      	mov	r2, r0
 80014dc:	fba8 1202 	umull	r1, r2, r8, r2
 80014e0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80014e4:	460a      	mov	r2, r1
 80014e6:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80014ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80014ee:	4413      	add	r3, r2
 80014f0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80014f4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80014f8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80014fc:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8001500:	4b8f      	ldr	r3, [pc, #572]	@ (8001740 <BME280_compensate_P_int64+0x2d4>)
 8001502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001506:	b21b      	sxth	r3, r3
 8001508:	17da      	asrs	r2, r3, #31
 800150a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800150e:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8001512:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001516:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 800151a:	462a      	mov	r2, r5
 800151c:	fb02 f203 	mul.w	r2, r2, r3
 8001520:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001524:	4621      	mov	r1, r4
 8001526:	fb01 f303 	mul.w	r3, r1, r3
 800152a:	441a      	add	r2, r3
 800152c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001530:	4621      	mov	r1, r4
 8001532:	fba3 1301 	umull	r1, r3, r3, r1
 8001536:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800153a:	460b      	mov	r3, r1
 800153c:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8001540:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001544:	18d3      	adds	r3, r2, r3
 8001546:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800154a:	f04f 0000 	mov.w	r0, #0
 800154e:	f04f 0100 	mov.w	r1, #0
 8001552:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001556:	462b      	mov	r3, r5
 8001558:	0459      	lsls	r1, r3, #17
 800155a:	4623      	mov	r3, r4
 800155c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001560:	4623      	mov	r3, r4
 8001562:	0458      	lsls	r0, r3, #17
 8001564:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001568:	1814      	adds	r4, r2, r0
 800156a:	643c      	str	r4, [r7, #64]	@ 0x40
 800156c:	414b      	adcs	r3, r1
 800156e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001570:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001574:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001578:	4b72      	ldr	r3, [pc, #456]	@ (8001744 <BME280_compensate_P_int64+0x2d8>)
 800157a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800157e:	b21b      	sxth	r3, r3
 8001580:	17da      	asrs	r2, r3, #31
 8001582:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001586:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800158a:	f04f 0000 	mov.w	r0, #0
 800158e:	f04f 0100 	mov.w	r1, #0
 8001592:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001596:	00d9      	lsls	r1, r3, #3
 8001598:	2000      	movs	r0, #0
 800159a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800159e:	1814      	adds	r4, r2, r0
 80015a0:	63bc      	str	r4, [r7, #56]	@ 0x38
 80015a2:	414b      	adcs	r3, r1
 80015a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015a6:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80015aa:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 80015ae:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015b6:	fb03 f102 	mul.w	r1, r3, r2
 80015ba:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015be:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015c2:	fb02 f303 	mul.w	r3, r2, r3
 80015c6:	18ca      	adds	r2, r1, r3
 80015c8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015cc:	fba3 1303 	umull	r1, r3, r3, r3
 80015d0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015d4:	460b      	mov	r3, r1
 80015d6:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80015da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80015de:	18d3      	adds	r3, r2, r3
 80015e0:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80015e4:	4b58      	ldr	r3, [pc, #352]	@ (8001748 <BME280_compensate_P_int64+0x2dc>)
 80015e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015ea:	b21b      	sxth	r3, r3
 80015ec:	17da      	asrs	r2, r3, #31
 80015ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80015f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80015f6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80015fa:	462b      	mov	r3, r5
 80015fc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001600:	4642      	mov	r2, r8
 8001602:	fb02 f203 	mul.w	r2, r2, r3
 8001606:	464b      	mov	r3, r9
 8001608:	4621      	mov	r1, r4
 800160a:	fb01 f303 	mul.w	r3, r1, r3
 800160e:	4413      	add	r3, r2
 8001610:	4622      	mov	r2, r4
 8001612:	4641      	mov	r1, r8
 8001614:	fba2 1201 	umull	r1, r2, r2, r1
 8001618:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800161c:	460a      	mov	r2, r1
 800161e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001622:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001626:	4413      	add	r3, r2
 8001628:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800162c:	f04f 0000 	mov.w	r0, #0
 8001630:	f04f 0100 	mov.w	r1, #0
 8001634:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001638:	4623      	mov	r3, r4
 800163a:	0a18      	lsrs	r0, r3, #8
 800163c:	462b      	mov	r3, r5
 800163e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001642:	462b      	mov	r3, r5
 8001644:	1219      	asrs	r1, r3, #8
 8001646:	4b41      	ldr	r3, [pc, #260]	@ (800174c <BME280_compensate_P_int64+0x2e0>)
 8001648:	f9b3 3000 	ldrsh.w	r3, [r3]
 800164c:	b21b      	sxth	r3, r3
 800164e:	17da      	asrs	r2, r3, #31
 8001650:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001654:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001658:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800165c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001660:	464a      	mov	r2, r9
 8001662:	fb02 f203 	mul.w	r2, r2, r3
 8001666:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800166a:	4644      	mov	r4, r8
 800166c:	fb04 f303 	mul.w	r3, r4, r3
 8001670:	441a      	add	r2, r3
 8001672:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001676:	4644      	mov	r4, r8
 8001678:	fba3 4304 	umull	r4, r3, r3, r4
 800167c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001680:	4623      	mov	r3, r4
 8001682:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001686:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800168a:	18d3      	adds	r3, r2, r3
 800168c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001690:	f04f 0200 	mov.w	r2, #0
 8001694:	f04f 0300 	mov.w	r3, #0
 8001698:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800169c:	464c      	mov	r4, r9
 800169e:	0323      	lsls	r3, r4, #12
 80016a0:	4644      	mov	r4, r8
 80016a2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80016a6:	4644      	mov	r4, r8
 80016a8:	0322      	lsls	r2, r4, #12
 80016aa:	1884      	adds	r4, r0, r2
 80016ac:	633c      	str	r4, [r7, #48]	@ 0x30
 80016ae:	eb41 0303 	adc.w	r3, r1, r3
 80016b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80016b4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80016b8:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 80016bc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80016c0:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80016c4:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80016c8:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80016cc:	4b20      	ldr	r3, [pc, #128]	@ (8001750 <BME280_compensate_P_int64+0x2e4>)
 80016ce:	881b      	ldrh	r3, [r3, #0]
 80016d0:	b29b      	uxth	r3, r3
 80016d2:	2200      	movs	r2, #0
 80016d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80016d8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80016dc:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80016e0:	462b      	mov	r3, r5
 80016e2:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80016e6:	4642      	mov	r2, r8
 80016e8:	fb02 f203 	mul.w	r2, r2, r3
 80016ec:	464b      	mov	r3, r9
 80016ee:	4621      	mov	r1, r4
 80016f0:	fb01 f303 	mul.w	r3, r1, r3
 80016f4:	4413      	add	r3, r2
 80016f6:	4622      	mov	r2, r4
 80016f8:	4641      	mov	r1, r8
 80016fa:	fba2 1201 	umull	r1, r2, r2, r1
 80016fe:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001702:	460a      	mov	r2, r1
 8001704:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8001708:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800170c:	4413      	add	r3, r2
 800170e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001712:	f04f 0200 	mov.w	r2, #0
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800171e:	4629      	mov	r1, r5
 8001720:	104a      	asrs	r2, r1, #1
 8001722:	4629      	mov	r1, r5
 8001724:	17cb      	asrs	r3, r1, #31
 8001726:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 800172a:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 800172e:	4313      	orrs	r3, r2
 8001730:	d110      	bne.n	8001754 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 8001732:	2300      	movs	r3, #0
 8001734:	e154      	b.n	80019e0 <BME280_compensate_P_int64+0x574>
 8001736:	bf00      	nop
 8001738:	20000260 	.word	0x20000260
 800173c:	20000250 	.word	0x20000250
 8001740:	2000024e 	.word	0x2000024e
 8001744:	2000024c 	.word	0x2000024c
 8001748:	2000024a 	.word	0x2000024a
 800174c:	20000248 	.word	0x20000248
 8001750:	2000023e 	.word	0x2000023e
	}
	p = 1048576-adc_P;
 8001754:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001758:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800175c:	17da      	asrs	r2, r3, #31
 800175e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001760:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001762:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001766:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800176a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800176e:	105b      	asrs	r3, r3, #1
 8001770:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001774:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001778:	07db      	lsls	r3, r3, #31
 800177a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800177e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001782:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001786:	4621      	mov	r1, r4
 8001788:	1a89      	subs	r1, r1, r2
 800178a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800178c:	4629      	mov	r1, r5
 800178e:	eb61 0303 	sbc.w	r3, r1, r3
 8001792:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001794:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001798:	4622      	mov	r2, r4
 800179a:	462b      	mov	r3, r5
 800179c:	1891      	adds	r1, r2, r2
 800179e:	6239      	str	r1, [r7, #32]
 80017a0:	415b      	adcs	r3, r3
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80017a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80017a8:	4621      	mov	r1, r4
 80017aa:	1851      	adds	r1, r2, r1
 80017ac:	61b9      	str	r1, [r7, #24]
 80017ae:	4629      	mov	r1, r5
 80017b0:	414b      	adcs	r3, r1
 80017b2:	61fb      	str	r3, [r7, #28]
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80017c0:	4649      	mov	r1, r9
 80017c2:	018b      	lsls	r3, r1, #6
 80017c4:	4641      	mov	r1, r8
 80017c6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017ca:	4641      	mov	r1, r8
 80017cc:	018a      	lsls	r2, r1, #6
 80017ce:	4641      	mov	r1, r8
 80017d0:	1889      	adds	r1, r1, r2
 80017d2:	6139      	str	r1, [r7, #16]
 80017d4:	4649      	mov	r1, r9
 80017d6:	eb43 0101 	adc.w	r1, r3, r1
 80017da:	6179      	str	r1, [r7, #20]
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	f04f 0300 	mov.w	r3, #0
 80017e4:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80017e8:	4649      	mov	r1, r9
 80017ea:	008b      	lsls	r3, r1, #2
 80017ec:	4641      	mov	r1, r8
 80017ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80017f2:	4641      	mov	r1, r8
 80017f4:	008a      	lsls	r2, r1, #2
 80017f6:	4610      	mov	r0, r2
 80017f8:	4619      	mov	r1, r3
 80017fa:	4603      	mov	r3, r0
 80017fc:	4622      	mov	r2, r4
 80017fe:	189b      	adds	r3, r3, r2
 8001800:	60bb      	str	r3, [r7, #8]
 8001802:	460b      	mov	r3, r1
 8001804:	462a      	mov	r2, r5
 8001806:	eb42 0303 	adc.w	r3, r2, r3
 800180a:	60fb      	str	r3, [r7, #12]
 800180c:	f04f 0200 	mov.w	r2, #0
 8001810:	f04f 0300 	mov.w	r3, #0
 8001814:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001818:	4649      	mov	r1, r9
 800181a:	008b      	lsls	r3, r1, #2
 800181c:	4641      	mov	r1, r8
 800181e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001822:	4641      	mov	r1, r8
 8001824:	008a      	lsls	r2, r1, #2
 8001826:	4610      	mov	r0, r2
 8001828:	4619      	mov	r1, r3
 800182a:	4603      	mov	r3, r0
 800182c:	4622      	mov	r2, r4
 800182e:	189b      	adds	r3, r3, r2
 8001830:	673b      	str	r3, [r7, #112]	@ 0x70
 8001832:	462b      	mov	r3, r5
 8001834:	460a      	mov	r2, r1
 8001836:	eb42 0303 	adc.w	r3, r2, r3
 800183a:	677b      	str	r3, [r7, #116]	@ 0x74
 800183c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001840:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001844:	f7ff fa00 	bl	8000c48 <__aeabi_ldivmod>
 8001848:	4602      	mov	r2, r0
 800184a:	460b      	mov	r3, r1
 800184c:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001850:	4b66      	ldr	r3, [pc, #408]	@ (80019ec <BME280_compensate_P_int64+0x580>)
 8001852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001856:	b21b      	sxth	r3, r3
 8001858:	17da      	asrs	r2, r3, #31
 800185a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800185c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800185e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001862:	f04f 0000 	mov.w	r0, #0
 8001866:	f04f 0100 	mov.w	r1, #0
 800186a:	0b50      	lsrs	r0, r2, #13
 800186c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001870:	1359      	asrs	r1, r3, #13
 8001872:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001876:	462b      	mov	r3, r5
 8001878:	fb00 f203 	mul.w	r2, r0, r3
 800187c:	4623      	mov	r3, r4
 800187e:	fb03 f301 	mul.w	r3, r3, r1
 8001882:	4413      	add	r3, r2
 8001884:	4622      	mov	r2, r4
 8001886:	fba2 1200 	umull	r1, r2, r2, r0
 800188a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800188e:	460a      	mov	r2, r1
 8001890:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001894:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001898:	4413      	add	r3, r2
 800189a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800189e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80018a2:	f04f 0000 	mov.w	r0, #0
 80018a6:	f04f 0100 	mov.w	r1, #0
 80018aa:	0b50      	lsrs	r0, r2, #13
 80018ac:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80018b0:	1359      	asrs	r1, r3, #13
 80018b2:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80018b6:	462b      	mov	r3, r5
 80018b8:	fb00 f203 	mul.w	r2, r0, r3
 80018bc:	4623      	mov	r3, r4
 80018be:	fb03 f301 	mul.w	r3, r3, r1
 80018c2:	4413      	add	r3, r2
 80018c4:	4622      	mov	r2, r4
 80018c6:	fba2 1200 	umull	r1, r2, r2, r0
 80018ca:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80018ce:	460a      	mov	r2, r1
 80018d0:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80018d4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80018d8:	4413      	add	r3, r2
 80018da:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80018de:	f04f 0200 	mov.w	r2, #0
 80018e2:	f04f 0300 	mov.w	r3, #0
 80018e6:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80018ea:	4621      	mov	r1, r4
 80018ec:	0e4a      	lsrs	r2, r1, #25
 80018ee:	4629      	mov	r1, r5
 80018f0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80018f4:	4629      	mov	r1, r5
 80018f6:	164b      	asrs	r3, r1, #25
 80018f8:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80018fc:	4b3c      	ldr	r3, [pc, #240]	@ (80019f0 <BME280_compensate_P_int64+0x584>)
 80018fe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001902:	b21b      	sxth	r3, r3
 8001904:	17da      	asrs	r2, r3, #31
 8001906:	663b      	str	r3, [r7, #96]	@ 0x60
 8001908:	667a      	str	r2, [r7, #100]	@ 0x64
 800190a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800190e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001912:	462a      	mov	r2, r5
 8001914:	fb02 f203 	mul.w	r2, r2, r3
 8001918:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800191c:	4621      	mov	r1, r4
 800191e:	fb01 f303 	mul.w	r3, r1, r3
 8001922:	4413      	add	r3, r2
 8001924:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001928:	4621      	mov	r1, r4
 800192a:	fba2 1201 	umull	r1, r2, r2, r1
 800192e:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001932:	460a      	mov	r2, r1
 8001934:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001938:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800193c:	4413      	add	r3, r2
 800193e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001942:	f04f 0200 	mov.w	r2, #0
 8001946:	f04f 0300 	mov.w	r3, #0
 800194a:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 800194e:	4621      	mov	r1, r4
 8001950:	0cca      	lsrs	r2, r1, #19
 8001952:	4629      	mov	r1, r5
 8001954:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001958:	4629      	mov	r1, r5
 800195a:	14cb      	asrs	r3, r1, #19
 800195c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001960:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001964:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001968:	1884      	adds	r4, r0, r2
 800196a:	65bc      	str	r4, [r7, #88]	@ 0x58
 800196c:	eb41 0303 	adc.w	r3, r1, r3
 8001970:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001972:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001976:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800197a:	4621      	mov	r1, r4
 800197c:	1889      	adds	r1, r1, r2
 800197e:	6539      	str	r1, [r7, #80]	@ 0x50
 8001980:	4629      	mov	r1, r5
 8001982:	eb43 0101 	adc.w	r1, r3, r1
 8001986:	6579      	str	r1, [r7, #84]	@ 0x54
 8001988:	f04f 0000 	mov.w	r0, #0
 800198c:	f04f 0100 	mov.w	r1, #0
 8001990:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001994:	4623      	mov	r3, r4
 8001996:	0a18      	lsrs	r0, r3, #8
 8001998:	462b      	mov	r3, r5
 800199a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800199e:	462b      	mov	r3, r5
 80019a0:	1219      	asrs	r1, r3, #8
 80019a2:	4b14      	ldr	r3, [pc, #80]	@ (80019f4 <BME280_compensate_P_int64+0x588>)
 80019a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a8:	b21b      	sxth	r3, r3
 80019aa:	17da      	asrs	r2, r3, #31
 80019ac:	64bb      	str	r3, [r7, #72]	@ 0x48
 80019ae:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80019b0:	f04f 0200 	mov.w	r2, #0
 80019b4:	f04f 0300 	mov.w	r3, #0
 80019b8:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80019bc:	464c      	mov	r4, r9
 80019be:	0123      	lsls	r3, r4, #4
 80019c0:	4644      	mov	r4, r8
 80019c2:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80019c6:	4644      	mov	r4, r8
 80019c8:	0122      	lsls	r2, r4, #4
 80019ca:	1884      	adds	r4, r0, r2
 80019cc:	603c      	str	r4, [r7, #0]
 80019ce:	eb41 0303 	adc.w	r3, r1, r3
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	e9d7 3400 	ldrd	r3, r4, [r7]
 80019d8:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 80019dc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80019e0:	4618      	mov	r0, r3
 80019e2:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80019e6:	46bd      	mov	sp, r7
 80019e8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80019ec:	20000256 	.word	0x20000256
 80019f0:	20000254 	.word	0x20000254
 80019f4:	20000252 	.word	0x20000252

080019f8 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001a00:	4b2c      	ldr	r3, [pc, #176]	@ (8001ab4 <bme280_compensate_H_int32+0xbc>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001a08:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	039a      	lsls	r2, r3, #14
 8001a0e:	4b2a      	ldr	r3, [pc, #168]	@ (8001ab8 <bme280_compensate_H_int32+0xc0>)
 8001a10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a14:	051b      	lsls	r3, r3, #20
 8001a16:	1ad2      	subs	r2, r2, r3
 8001a18:	4b28      	ldr	r3, [pc, #160]	@ (8001abc <bme280_compensate_H_int32+0xc4>)
 8001a1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a1e:	4619      	mov	r1, r3
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	fb01 f303 	mul.w	r3, r1, r3
 8001a26:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a28:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001a2c:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a2e:	4a24      	ldr	r2, [pc, #144]	@ (8001ac0 <bme280_compensate_H_int32+0xc8>)
 8001a30:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001a34:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001a36:	68fa      	ldr	r2, [r7, #12]
 8001a38:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001a3c:	1292      	asrs	r2, r2, #10
 8001a3e:	4921      	ldr	r1, [pc, #132]	@ (8001ac4 <bme280_compensate_H_int32+0xcc>)
 8001a40:	8809      	ldrh	r1, [r1, #0]
 8001a42:	4608      	mov	r0, r1
 8001a44:	68f9      	ldr	r1, [r7, #12]
 8001a46:	fb00 f101 	mul.w	r1, r0, r1
 8001a4a:	12c9      	asrs	r1, r1, #11
 8001a4c:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001a50:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001a54:	1292      	asrs	r2, r2, #10
 8001a56:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001a5a:	491b      	ldr	r1, [pc, #108]	@ (8001ac8 <bme280_compensate_H_int32+0xd0>)
 8001a5c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001a60:	fb01 f202 	mul.w	r2, r1, r2
 8001a64:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
					8192) >> 14));
 8001a68:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001a6a:	fb02 f303 	mul.w	r3, r2, r3
 8001a6e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	13db      	asrs	r3, r3, #15
 8001a74:	68fa      	ldr	r2, [r7, #12]
 8001a76:	13d2      	asrs	r2, r2, #15
 8001a78:	fb02 f303 	mul.w	r3, r2, r3
 8001a7c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001a7e:	4a13      	ldr	r2, [pc, #76]	@ (8001acc <bme280_compensate_H_int32+0xd4>)
 8001a80:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a82:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001a86:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001a88:	68fa      	ldr	r2, [r7, #12]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001a94:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001a9c:	bfa8      	it	ge
 8001a9e:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001aa2:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	131b      	asrs	r3, r3, #12
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	20000260 	.word	0x20000260
 8001ab8:	2000025a 	.word	0x2000025a
 8001abc:	2000025c 	.word	0x2000025c
 8001ac0:	2000025e 	.word	0x2000025e
 8001ac4:	20000242 	.word	0x20000242
 8001ac8:	20000258 	.word	0x20000258
 8001acc:	20000240 	.word	0x20000240

08001ad0 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001ad4:	f7ff fc38 	bl	8001348 <BMEReadRaw>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d16c      	bne.n	8001bb8 <BME280_Measure+0xe8>
	{
		  if (tRaw == 0x800000) SD.Temperature = 0; // value in case temp measurement was disabled
 8001ade:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd4 <BME280_Measure+0x104>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001ae6:	d104      	bne.n	8001af2 <BME280_Measure+0x22>
 8001ae8:	4b3b      	ldr	r3, [pc, #236]	@ (8001bd8 <BME280_Measure+0x108>)
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	601a      	str	r2, [r3, #0]
 8001af0:	e016      	b.n	8001b20 <BME280_Measure+0x50>
		  else
		  {
			  SD.Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001af2:	4b38      	ldr	r3, [pc, #224]	@ (8001bd4 <BME280_Measure+0x104>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff fc76 	bl	80013e8 <BME280_compensate_T_int32>
 8001afc:	4603      	mov	r3, r0
 8001afe:	4618      	mov	r0, r3
 8001b00:	f7fe fd10 	bl	8000524 <__aeabi_i2d>
 8001b04:	f04f 0200 	mov.w	r2, #0
 8001b08:	4b34      	ldr	r3, [pc, #208]	@ (8001bdc <BME280_Measure+0x10c>)
 8001b0a:	f7fe fe9f 	bl	800084c <__aeabi_ddiv>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	f7ff f847 	bl	8000ba8 <__aeabi_d2f>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4a2e      	ldr	r2, [pc, #184]	@ (8001bd8 <BME280_Measure+0x108>)
 8001b1e:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) SD.Pressure = 0; // value in case temp measurement was disabled
 8001b20:	4b2f      	ldr	r3, [pc, #188]	@ (8001be0 <BME280_Measure+0x110>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b28:	d104      	bne.n	8001b34 <BME280_Measure+0x64>
 8001b2a:	4b2b      	ldr	r3, [pc, #172]	@ (8001bd8 <BME280_Measure+0x108>)
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	605a      	str	r2, [r3, #4]
 8001b32:	e01f      	b.n	8001b74 <BME280_Measure+0xa4>
		  else
		  {
#if SUPPORT_64BIT
			  SD.Pressure = (((BME280_compensate_P_int64 (pRaw))/256.0)/1000);  // as per datasheet, the pressure is x256
 8001b34:	4b2a      	ldr	r3, [pc, #168]	@ (8001be0 <BME280_Measure+0x110>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4618      	mov	r0, r3
 8001b3a:	f7ff fc97 	bl	800146c <BME280_compensate_P_int64>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f7fe fcdf 	bl	8000504 <__aeabi_ui2d>
 8001b46:	f04f 0200 	mov.w	r2, #0
 8001b4a:	4b26      	ldr	r3, [pc, #152]	@ (8001be4 <BME280_Measure+0x114>)
 8001b4c:	f7fe fe7e 	bl	800084c <__aeabi_ddiv>
 8001b50:	4602      	mov	r2, r0
 8001b52:	460b      	mov	r3, r1
 8001b54:	4610      	mov	r0, r2
 8001b56:	4619      	mov	r1, r3
 8001b58:	f04f 0200 	mov.w	r2, #0
 8001b5c:	4b22      	ldr	r3, [pc, #136]	@ (8001be8 <BME280_Measure+0x118>)
 8001b5e:	f7fe fe75 	bl	800084c <__aeabi_ddiv>
 8001b62:	4602      	mov	r2, r0
 8001b64:	460b      	mov	r3, r1
 8001b66:	4610      	mov	r0, r2
 8001b68:	4619      	mov	r1, r3
 8001b6a:	f7ff f81d 	bl	8000ba8 <__aeabi_d2f>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	4a19      	ldr	r2, [pc, #100]	@ (8001bd8 <BME280_Measure+0x108>)
 8001b72:	6053      	str	r3, [r2, #4]
			  SD.Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) SD.Humidity = 0; // value in case temp measurement was disabled
 8001b74:	4b1d      	ldr	r3, [pc, #116]	@ (8001bec <BME280_Measure+0x11c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001b7c:	d104      	bne.n	8001b88 <BME280_Measure+0xb8>
 8001b7e:	4b16      	ldr	r3, [pc, #88]	@ (8001bd8 <BME280_Measure+0x108>)
 8001b80:	f04f 0200 	mov.w	r2, #0
 8001b84:	609a      	str	r2, [r3, #8]
	// if the device is detached
	else
	{
		SD.Temperature = SD.Pressure = SD.Humidity = 0;
	}
}
 8001b86:	e023      	b.n	8001bd0 <BME280_Measure+0x100>
			  SD.Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001b88:	4b18      	ldr	r3, [pc, #96]	@ (8001bec <BME280_Measure+0x11c>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7ff ff33 	bl	80019f8 <bme280_compensate_H_int32>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4618      	mov	r0, r3
 8001b96:	f7fe fcb5 	bl	8000504 <__aeabi_ui2d>
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	4b14      	ldr	r3, [pc, #80]	@ (8001bf0 <BME280_Measure+0x120>)
 8001ba0:	f7fe fe54 	bl	800084c <__aeabi_ddiv>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	460b      	mov	r3, r1
 8001ba8:	4610      	mov	r0, r2
 8001baa:	4619      	mov	r1, r3
 8001bac:	f7fe fffc 	bl	8000ba8 <__aeabi_d2f>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	4a09      	ldr	r2, [pc, #36]	@ (8001bd8 <BME280_Measure+0x108>)
 8001bb4:	6093      	str	r3, [r2, #8]
}
 8001bb6:	e00b      	b.n	8001bd0 <BME280_Measure+0x100>
		SD.Temperature = SD.Pressure = SD.Humidity = 0;
 8001bb8:	4b07      	ldr	r3, [pc, #28]	@ (8001bd8 <BME280_Measure+0x108>)
 8001bba:	f04f 0200 	mov.w	r2, #0
 8001bbe:	609a      	str	r2, [r3, #8]
 8001bc0:	4b05      	ldr	r3, [pc, #20]	@ (8001bd8 <BME280_Measure+0x108>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	4a04      	ldr	r2, [pc, #16]	@ (8001bd8 <BME280_Measure+0x108>)
 8001bc6:	6053      	str	r3, [r2, #4]
 8001bc8:	4b03      	ldr	r3, [pc, #12]	@ (8001bd8 <BME280_Measure+0x108>)
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	4a02      	ldr	r2, [pc, #8]	@ (8001bd8 <BME280_Measure+0x108>)
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	bd80      	pop	{r7, pc}
 8001bd4:	20000230 	.word	0x20000230
 8001bd8:	20000204 	.word	0x20000204
 8001bdc:	40590000 	.word	0x40590000
 8001be0:	20000234 	.word	0x20000234
 8001be4:	40700000 	.word	0x40700000
 8001be8:	408f4000 	.word	0x408f4000
 8001bec:	20000238 	.word	0x20000238
 8001bf0:	40900000 	.word	0x40900000
 8001bf4:	00000000 	.word	0x00000000

08001bf8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001bf8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001bfc:	b092      	sub	sp, #72	@ 0x48
 8001bfe:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c00:	f001 f8a0 	bl	8002d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c04:	f000 f988 	bl	8001f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c08:	f000 fac4 	bl	8002194 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001c0c:	f000 f9e2 	bl	8001fd4 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001c10:	f000 fa32 	bl	8002078 <MX_I2C1_Init>
  MX_UART5_Init();
 8001c14:	f000 fa94 	bl	8002140 <MX_UART5_Init>
  MX_SPI1_Init();
 8001c18:	f000 fa5c 	bl	80020d4 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);//Setting The Modes and Overlasampling in BME280
 8001c1c:	2304      	movs	r3, #4
 8001c1e:	9301      	str	r3, [sp, #4]
 8001c20:	2300      	movs	r3, #0
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	2303      	movs	r3, #3
 8001c26:	2201      	movs	r2, #1
 8001c28:	2105      	movs	r1, #5
 8001c2a:	2002      	movs	r0, #2
 8001c2c:	f7ff fab6 	bl	800119c <BME280_Config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_ADC_Start(&hadc1);
 8001c30:	48a5      	ldr	r0, [pc, #660]	@ (8001ec8 <main+0x2d0>)
 8001c32:	f001 f961 	bl	8002ef8 <HAL_ADC_Start>
	  BME280_Measure();//Measuring (THP-values) from sensor
 8001c36:	f7ff ff4b 	bl	8001ad0 <BME280_Measure>
	  ssd1306_Init();  // Initialize the OLED display
 8001c3a:	f000 fbef 	bl	800241c <ssd1306_Init>
	  ssd1306_Fill(Black);  // Clear the screen
 8001c3e:	2000      	movs	r0, #0
 8001c40:	f000 fc56 	bl	80024f0 <ssd1306_Fill>
	  ssd1306_SetCursor(10, 10);
 8001c44:	210a      	movs	r1, #10
 8001c46:	200a      	movs	r0, #10
 8001c48:	f000 fd9c 	bl	8002784 <ssd1306_SetCursor>
	  ssd1306_WriteString("Hello, STM32!", Font_7x10, White);
 8001c4c:	4b9f      	ldr	r3, [pc, #636]	@ (8001ecc <main+0x2d4>)
 8001c4e:	2201      	movs	r2, #1
 8001c50:	9200      	str	r2, [sp, #0]
 8001c52:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c54:	489e      	ldr	r0, [pc, #632]	@ (8001ed0 <main+0x2d8>)
 8001c56:	f000 fd6f 	bl	8002738 <ssd1306_WriteString>
	  ssd1306_UpdateScreen();  // Refresh display
 8001c5a:	f000 fc61 	bl	8002520 <ssd1306_UpdateScreen>


	 // HAL_ADC_PollForConversion(&hadc1, 10);//waiting for conversion completion (timeout in milliseconds)
	 // SD.ADC_Data=HAL_ADC_GetValue(&hadc1);
	 // Above Poll API Pauses the ADC So we are using it only ones for checking if the value is converted or not
	  if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8001c5e:	210a      	movs	r1, #10
 8001c60:	4899      	ldr	r0, [pc, #612]	@ (8001ec8 <main+0x2d0>)
 8001c62:	f001 fa1b 	bl	800309c <HAL_ADC_PollForConversion>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d107      	bne.n	8001c7c <main+0x84>
	  {
		  SD.ADC_Value = HAL_ADC_GetValue(&hadc1);
 8001c6c:	4896      	ldr	r0, [pc, #600]	@ (8001ec8 <main+0x2d0>)
 8001c6e:	f001 faa0 	bl	80031b2 <HAL_ADC_GetValue>
 8001c72:	4603      	mov	r3, r0
 8001c74:	b29a      	uxth	r2, r3
 8001c76:	4b97      	ldr	r3, [pc, #604]	@ (8001ed4 <main+0x2dc>)
 8001c78:	819a      	strh	r2, [r3, #12]
 8001c7a:	e002      	b.n	8001c82 <main+0x8a>
	  }// Get ADC value
	  else
	  {
		  SD.ADC_Value=0;
 8001c7c:	4b95      	ldr	r3, [pc, #596]	@ (8001ed4 <main+0x2dc>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	819a      	strh	r2, [r3, #12]
	  }
	    // Convert ADC Value to Voltage (for 5V sensor Vcc)
	  SD.mq135_voltage = (SD.ADC_Value * 5.0) / 4095.0;
 8001c82:	4b94      	ldr	r3, [pc, #592]	@ (8001ed4 <main+0x2dc>)
 8001c84:	899b      	ldrh	r3, [r3, #12]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7fe fc4c 	bl	8000524 <__aeabi_i2d>
 8001c8c:	f04f 0200 	mov.w	r2, #0
 8001c90:	4b91      	ldr	r3, [pc, #580]	@ (8001ed8 <main+0x2e0>)
 8001c92:	f7fe fcb1 	bl	80005f8 <__aeabi_dmul>
 8001c96:	4602      	mov	r2, r0
 8001c98:	460b      	mov	r3, r1
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	a388      	add	r3, pc, #544	@ (adr r3, 8001ec0 <main+0x2c8>)
 8001ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca4:	f7fe fdd2 	bl	800084c <__aeabi_ddiv>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	460b      	mov	r3, r1
 8001cac:	4610      	mov	r0, r2
 8001cae:	4619      	mov	r1, r3
 8001cb0:	f7fe ff7a 	bl	8000ba8 <__aeabi_d2f>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	4a87      	ldr	r2, [pc, #540]	@ (8001ed4 <main+0x2dc>)
 8001cb8:	6113      	str	r3, [r2, #16]

	    // Calculate Sensor Resistance (Rs)
	  SD.Rs = ((5.0 - SD.mq135_voltage) / SD.mq135_voltage) * RL;
 8001cba:	4b86      	ldr	r3, [pc, #536]	@ (8001ed4 <main+0x2dc>)
 8001cbc:	691b      	ldr	r3, [r3, #16]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7fe fc42 	bl	8000548 <__aeabi_f2d>
 8001cc4:	4602      	mov	r2, r0
 8001cc6:	460b      	mov	r3, r1
 8001cc8:	f04f 0000 	mov.w	r0, #0
 8001ccc:	4982      	ldr	r1, [pc, #520]	@ (8001ed8 <main+0x2e0>)
 8001cce:	f7fe fadb 	bl	8000288 <__aeabi_dsub>
 8001cd2:	4602      	mov	r2, r0
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	4614      	mov	r4, r2
 8001cd8:	461d      	mov	r5, r3
 8001cda:	4b7e      	ldr	r3, [pc, #504]	@ (8001ed4 <main+0x2dc>)
 8001cdc:	691b      	ldr	r3, [r3, #16]
 8001cde:	4618      	mov	r0, r3
 8001ce0:	f7fe fc32 	bl	8000548 <__aeabi_f2d>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	4620      	mov	r0, r4
 8001cea:	4629      	mov	r1, r5
 8001cec:	f7fe fdae 	bl	800084c <__aeabi_ddiv>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	460b      	mov	r3, r1
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f04f 0200 	mov.w	r2, #0
 8001cfc:	4b77      	ldr	r3, [pc, #476]	@ (8001edc <main+0x2e4>)
 8001cfe:	f7fe fc7b 	bl	80005f8 <__aeabi_dmul>
 8001d02:	4602      	mov	r2, r0
 8001d04:	460b      	mov	r3, r1
 8001d06:	4610      	mov	r0, r2
 8001d08:	4619      	mov	r1, r3
 8001d0a:	f7fe ff4d 	bl	8000ba8 <__aeabi_d2f>
 8001d0e:	4603      	mov	r3, r0
 8001d10:	4a70      	ldr	r2, [pc, #448]	@ (8001ed4 <main+0x2dc>)
 8001d12:	6153      	str	r3, [r2, #20]

	  SD.Co2     = calculate_ppm(SD.Rs, R0_CO2, A_CO2, B_CO2);
 8001d14:	4b6f      	ldr	r3, [pc, #444]	@ (8001ed4 <main+0x2dc>)
 8001d16:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d1a:	eddf 1a71 	vldr	s3, [pc, #452]	@ 8001ee0 <main+0x2e8>
 8001d1e:	ed9f 1a71 	vldr	s2, [pc, #452]	@ 8001ee4 <main+0x2ec>
 8001d22:	eddf 0a71 	vldr	s1, [pc, #452]	@ 8001ee8 <main+0x2f0>
 8001d26:	eeb0 0a67 	vmov.f32	s0, s15
 8001d2a:	f000 facf 	bl	80022cc <calculate_ppm>
 8001d2e:	eef0 7a40 	vmov.f32	s15, s0
 8001d32:	4b68      	ldr	r3, [pc, #416]	@ (8001ed4 <main+0x2dc>)
 8001d34:	edc3 7a06 	vstr	s15, [r3, #24]
	  SD.NH3 = calculate_ppm(SD.Rs, R0_NH3, A_NH3, B_NH3);
 8001d38:	4b66      	ldr	r3, [pc, #408]	@ (8001ed4 <main+0x2dc>)
 8001d3a:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d3e:	eddf 1a6b 	vldr	s3, [pc, #428]	@ 8001eec <main+0x2f4>
 8001d42:	ed9f 1a6b 	vldr	s2, [pc, #428]	@ 8001ef0 <main+0x2f8>
 8001d46:	eddf 0a6b 	vldr	s1, [pc, #428]	@ 8001ef4 <main+0x2fc>
 8001d4a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d4e:	f000 fabd 	bl	80022cc <calculate_ppm>
 8001d52:	eef0 7a40 	vmov.f32	s15, s0
 8001d56:	4b5f      	ldr	r3, [pc, #380]	@ (8001ed4 <main+0x2dc>)
 8001d58:	edc3 7a07 	vstr	s15, [r3, #28]
	  SD.Ethanol = calculate_ppm(SD.Rs, R0_Ethanol, A_Ethanol, B_Ethanol);
 8001d5c:	4b5d      	ldr	r3, [pc, #372]	@ (8001ed4 <main+0x2dc>)
 8001d5e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001d62:	eddf 1a65 	vldr	s3, [pc, #404]	@ 8001ef8 <main+0x300>
 8001d66:	ed9f 1a65 	vldr	s2, [pc, #404]	@ 8001efc <main+0x304>
 8001d6a:	eef0 0a0e 	vmov.f32	s1, #14	@ 0x40700000  3.750
 8001d6e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d72:	f000 faab 	bl	80022cc <calculate_ppm>
 8001d76:	eef0 7a40 	vmov.f32	s15, s0
 8001d7a:	4b56      	ldr	r3, [pc, #344]	@ (8001ed4 <main+0x2dc>)
 8001d7c:	edc3 7a08 	vstr	s15, [r3, #32]
	  SD.AQI = ((SD.Co2 / 10) * 0.5) + ((SD.NH3 * 100) * 0.25) + ((SD.Ethanol * 100) * 0.25);
 8001d80:	4b54      	ldr	r3, [pc, #336]	@ (8001ed4 <main+0x2dc>)
 8001d82:	edd3 7a06 	vldr	s15, [r3, #24]
 8001d86:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8001d8a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d8e:	ee16 0a90 	vmov	r0, s13
 8001d92:	f7fe fbd9 	bl	8000548 <__aeabi_f2d>
 8001d96:	f04f 0200 	mov.w	r2, #0
 8001d9a:	4b59      	ldr	r3, [pc, #356]	@ (8001f00 <main+0x308>)
 8001d9c:	f7fe fc2c 	bl	80005f8 <__aeabi_dmul>
 8001da0:	4602      	mov	r2, r0
 8001da2:	460b      	mov	r3, r1
 8001da4:	4614      	mov	r4, r2
 8001da6:	461d      	mov	r5, r3
 8001da8:	4b4a      	ldr	r3, [pc, #296]	@ (8001ed4 <main+0x2dc>)
 8001daa:	edd3 7a07 	vldr	s15, [r3, #28]
 8001dae:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 8001f04 <main+0x30c>
 8001db2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001db6:	ee17 0a90 	vmov	r0, s15
 8001dba:	f7fe fbc5 	bl	8000548 <__aeabi_f2d>
 8001dbe:	f04f 0200 	mov.w	r2, #0
 8001dc2:	4b51      	ldr	r3, [pc, #324]	@ (8001f08 <main+0x310>)
 8001dc4:	f7fe fc18 	bl	80005f8 <__aeabi_dmul>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	460b      	mov	r3, r1
 8001dcc:	4620      	mov	r0, r4
 8001dce:	4629      	mov	r1, r5
 8001dd0:	f7fe fa5c 	bl	800028c <__adddf3>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	4614      	mov	r4, r2
 8001dda:	461d      	mov	r5, r3
 8001ddc:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed4 <main+0x2dc>)
 8001dde:	edd3 7a08 	vldr	s15, [r3, #32]
 8001de2:	ed9f 7a48 	vldr	s14, [pc, #288]	@ 8001f04 <main+0x30c>
 8001de6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dea:	ee17 0a90 	vmov	r0, s15
 8001dee:	f7fe fbab 	bl	8000548 <__aeabi_f2d>
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	4b44      	ldr	r3, [pc, #272]	@ (8001f08 <main+0x310>)
 8001df8:	f7fe fbfe 	bl	80005f8 <__aeabi_dmul>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4620      	mov	r0, r4
 8001e02:	4629      	mov	r1, r5
 8001e04:	f7fe fa42 	bl	800028c <__adddf3>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	460b      	mov	r3, r1
 8001e0c:	4610      	mov	r0, r2
 8001e0e:	4619      	mov	r1, r3
 8001e10:	f7fe feca 	bl	8000ba8 <__aeabi_d2f>
 8001e14:	4603      	mov	r3, r0
 8001e16:	4a2f      	ldr	r2, [pc, #188]	@ (8001ed4 <main+0x2dc>)
 8001e18:	6253      	str	r3, [r2, #36]	@ 0x24

	  sprintf(buff,"Temperature = %.2f\r\nPressure = %.2f\r\nHumidity = %.2f\r\nCo2 = %.2f\r\nAmonia(NH3) = %.2f\r\nEthanol = %.2f\r\nAQI = %.2f\r\n\n",SD.Temperature,SD.Pressure,SD.Humidity,SD.Co2,SD.NH3,SD.Ethanol,SD.AQI);
 8001e1a:	4b2e      	ldr	r3, [pc, #184]	@ (8001ed4 <main+0x2dc>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fb92 	bl	8000548 <__aeabi_f2d>
 8001e24:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8001e28:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed4 <main+0x2dc>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7fe fb8b 	bl	8000548 <__aeabi_f2d>
 8001e32:	4680      	mov	r8, r0
 8001e34:	4689      	mov	r9, r1
 8001e36:	4b27      	ldr	r3, [pc, #156]	@ (8001ed4 <main+0x2dc>)
 8001e38:	689b      	ldr	r3, [r3, #8]
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fb84 	bl	8000548 <__aeabi_f2d>
 8001e40:	4682      	mov	sl, r0
 8001e42:	468b      	mov	fp, r1
 8001e44:	4b23      	ldr	r3, [pc, #140]	@ (8001ed4 <main+0x2dc>)
 8001e46:	699b      	ldr	r3, [r3, #24]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f7fe fb7d 	bl	8000548 <__aeabi_f2d>
 8001e4e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001e52:	4b20      	ldr	r3, [pc, #128]	@ (8001ed4 <main+0x2dc>)
 8001e54:	69db      	ldr	r3, [r3, #28]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7fe fb76 	bl	8000548 <__aeabi_f2d>
 8001e5c:	e9c7 0100 	strd	r0, r1, [r7]
 8001e60:	4b1c      	ldr	r3, [pc, #112]	@ (8001ed4 <main+0x2dc>)
 8001e62:	6a1b      	ldr	r3, [r3, #32]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7fe fb6f 	bl	8000548 <__aeabi_f2d>
 8001e6a:	4604      	mov	r4, r0
 8001e6c:	460d      	mov	r5, r1
 8001e6e:	4b19      	ldr	r3, [pc, #100]	@ (8001ed4 <main+0x2dc>)
 8001e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e72:	4618      	mov	r0, r3
 8001e74:	f7fe fb68 	bl	8000548 <__aeabi_f2d>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8001e80:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8001e84:	ed97 7b00 	vldr	d7, [r7]
 8001e88:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001e8c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001e90:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001e94:	e9cd ab02 	strd	sl, fp, [sp, #8]
 8001e98:	e9cd 8900 	strd	r8, r9, [sp]
 8001e9c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001ea0:	491a      	ldr	r1, [pc, #104]	@ (8001f0c <main+0x314>)
 8001ea2:	481b      	ldr	r0, [pc, #108]	@ (8001f10 <main+0x318>)
 8001ea4:	f004 fe98 	bl	8006bd8 <siprintf>
	  HAL_UART_Transmit(&huart5, (uint8_t *)buff, strlen(buff), 10);
 8001ea8:	4819      	ldr	r0, [pc, #100]	@ (8001f10 <main+0x318>)
 8001eaa:	f7fe f9e1 	bl	8000270 <strlen>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	b29a      	uxth	r2, r3
 8001eb2:	230a      	movs	r3, #10
 8001eb4:	4916      	ldr	r1, [pc, #88]	@ (8001f10 <main+0x318>)
 8001eb6:	4817      	ldr	r0, [pc, #92]	@ (8001f14 <main+0x31c>)
 8001eb8:	f003 fdb8 	bl	8005a2c <HAL_UART_Transmit>
	  HAL_ADC_Start(&hadc1);
 8001ebc:	e6b8      	b.n	8001c30 <main+0x38>
 8001ebe:	bf00      	nop
 8001ec0:	00000000 	.word	0x00000000
 8001ec4:	40affe00 	.word	0x40affe00
 8001ec8:	20000264 	.word	0x20000264
 8001ecc:	0800a500 	.word	0x0800a500
 8001ed0:	08009d10 	.word	0x08009d10
 8001ed4:	20000204 	.word	0x20000204
 8001ed8:	40140000 	.word	0x40140000
 8001edc:	40240000 	.word	0x40240000
 8001ee0:	c03137de 	.word	0xc03137de
 8001ee4:	42e93442 	.word	0x42e93442
 8001ee8:	423e0000 	.word	0x423e0000
 8001eec:	c01e45a2 	.word	0xc01e45a2
 8001ef0:	42cc6666 	.word	0x42cc6666
 8001ef4:	3fee147b 	.word	0x3fee147b
 8001ef8:	c04b851f 	.word	0xc04b851f
 8001efc:	429a828f 	.word	0x429a828f
 8001f00:	3fe00000 	.word	0x3fe00000
 8001f04:	42c80000 	.word	0x42c80000
 8001f08:	3fd00000 	.word	0x3fd00000
 8001f0c:	08009d20 	.word	0x08009d20
 8001f10:	200003a0 	.word	0x200003a0
 8001f14:	20000358 	.word	0x20000358

08001f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	b094      	sub	sp, #80	@ 0x50
 8001f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001f1e:	f107 0320 	add.w	r3, r7, #32
 8001f22:	2230      	movs	r2, #48	@ 0x30
 8001f24:	2100      	movs	r1, #0
 8001f26:	4618      	mov	r0, r3
 8001f28:	f004 feb9 	bl	8006c9e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001f2c:	f107 030c 	add.w	r3, r7, #12
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f3c:	2300      	movs	r3, #0
 8001f3e:	60bb      	str	r3, [r7, #8]
 8001f40:	4b22      	ldr	r3, [pc, #136]	@ (8001fcc <SystemClock_Config+0xb4>)
 8001f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f44:	4a21      	ldr	r2, [pc, #132]	@ (8001fcc <SystemClock_Config+0xb4>)
 8001f46:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001fcc <SystemClock_Config+0xb4>)
 8001f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f50:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f54:	60bb      	str	r3, [r7, #8]
 8001f56:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f58:	2300      	movs	r3, #0
 8001f5a:	607b      	str	r3, [r7, #4]
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8001fd0 <SystemClock_Config+0xb8>)
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	4a1b      	ldr	r2, [pc, #108]	@ (8001fd0 <SystemClock_Config+0xb8>)
 8001f62:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001f66:	6013      	str	r3, [r2, #0]
 8001f68:	4b19      	ldr	r3, [pc, #100]	@ (8001fd0 <SystemClock_Config+0xb8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f70:	607b      	str	r3, [r7, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001f74:	2302      	movs	r3, #2
 8001f76:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001f78:	2301      	movs	r3, #1
 8001f7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001f7c:	2310      	movs	r3, #16
 8001f7e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001f80:	2300      	movs	r3, #0
 8001f82:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001f84:	f107 0320 	add.w	r3, r7, #32
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f002 fdfd 	bl	8004b88 <HAL_RCC_OscConfig>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001f94:	f000 f9d7 	bl	8002346 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f98:	230f      	movs	r3, #15
 8001f9a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001fa4:	2300      	movs	r3, #0
 8001fa6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001fac:	f107 030c 	add.w	r3, r7, #12
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f003 f860 	bl	8005078 <HAL_RCC_ClockConfig>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d001      	beq.n	8001fc2 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001fbe:	f000 f9c2 	bl	8002346 <Error_Handler>
  }
}
 8001fc2:	bf00      	nop
 8001fc4:	3750      	adds	r7, #80	@ 0x50
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40007000 	.word	0x40007000

08001fd4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b084      	sub	sp, #16
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001fda:	463b      	mov	r3, r7
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001fe6:	4b21      	ldr	r3, [pc, #132]	@ (800206c <MX_ADC1_Init+0x98>)
 8001fe8:	4a21      	ldr	r2, [pc, #132]	@ (8002070 <MX_ADC1_Init+0x9c>)
 8001fea:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001fec:	4b1f      	ldr	r3, [pc, #124]	@ (800206c <MX_ADC1_Init+0x98>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	@ (800206c <MX_ADC1_Init+0x98>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001ff8:	4b1c      	ldr	r3, [pc, #112]	@ (800206c <MX_ADC1_Init+0x98>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001ffe:	4b1b      	ldr	r3, [pc, #108]	@ (800206c <MX_ADC1_Init+0x98>)
 8002000:	2200      	movs	r2, #0
 8002002:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002004:	4b19      	ldr	r3, [pc, #100]	@ (800206c <MX_ADC1_Init+0x98>)
 8002006:	2200      	movs	r2, #0
 8002008:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800200c:	4b17      	ldr	r3, [pc, #92]	@ (800206c <MX_ADC1_Init+0x98>)
 800200e:	2200      	movs	r2, #0
 8002010:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002012:	4b16      	ldr	r3, [pc, #88]	@ (800206c <MX_ADC1_Init+0x98>)
 8002014:	4a17      	ldr	r2, [pc, #92]	@ (8002074 <MX_ADC1_Init+0xa0>)
 8002016:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002018:	4b14      	ldr	r3, [pc, #80]	@ (800206c <MX_ADC1_Init+0x98>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800201e:	4b13      	ldr	r3, [pc, #76]	@ (800206c <MX_ADC1_Init+0x98>)
 8002020:	2201      	movs	r2, #1
 8002022:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002024:	4b11      	ldr	r3, [pc, #68]	@ (800206c <MX_ADC1_Init+0x98>)
 8002026:	2200      	movs	r2, #0
 8002028:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800202c:	4b0f      	ldr	r3, [pc, #60]	@ (800206c <MX_ADC1_Init+0x98>)
 800202e:	2201      	movs	r2, #1
 8002030:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002032:	480e      	ldr	r0, [pc, #56]	@ (800206c <MX_ADC1_Init+0x98>)
 8002034:	f000 ff1c 	bl	8002e70 <HAL_ADC_Init>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d001      	beq.n	8002042 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800203e:	f000 f982 	bl	8002346 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8002042:	2301      	movs	r3, #1
 8002044:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002046:	2301      	movs	r3, #1
 8002048:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800204e:	463b      	mov	r3, r7
 8002050:	4619      	mov	r1, r3
 8002052:	4806      	ldr	r0, [pc, #24]	@ (800206c <MX_ADC1_Init+0x98>)
 8002054:	f001 f8ba 	bl	80031cc <HAL_ADC_ConfigChannel>
 8002058:	4603      	mov	r3, r0
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800205e:	f000 f972 	bl	8002346 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002062:	bf00      	nop
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	20000264 	.word	0x20000264
 8002070:	40012000 	.word	0x40012000
 8002074:	0f000001 	.word	0x0f000001

08002078 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800207c:	4b12      	ldr	r3, [pc, #72]	@ (80020c8 <MX_I2C1_Init+0x50>)
 800207e:	4a13      	ldr	r2, [pc, #76]	@ (80020cc <MX_I2C1_Init+0x54>)
 8002080:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8002082:	4b11      	ldr	r3, [pc, #68]	@ (80020c8 <MX_I2C1_Init+0x50>)
 8002084:	4a12      	ldr	r2, [pc, #72]	@ (80020d0 <MX_I2C1_Init+0x58>)
 8002086:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002088:	4b0f      	ldr	r3, [pc, #60]	@ (80020c8 <MX_I2C1_Init+0x50>)
 800208a:	2200      	movs	r2, #0
 800208c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 236;
 800208e:	4b0e      	ldr	r3, [pc, #56]	@ (80020c8 <MX_I2C1_Init+0x50>)
 8002090:	22ec      	movs	r2, #236	@ 0xec
 8002092:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_10BIT;
 8002094:	4b0c      	ldr	r3, [pc, #48]	@ (80020c8 <MX_I2C1_Init+0x50>)
 8002096:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 800209a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800209c:	4b0a      	ldr	r3, [pc, #40]	@ (80020c8 <MX_I2C1_Init+0x50>)
 800209e:	2200      	movs	r2, #0
 80020a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80020a2:	4b09      	ldr	r3, [pc, #36]	@ (80020c8 <MX_I2C1_Init+0x50>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80020a8:	4b07      	ldr	r3, [pc, #28]	@ (80020c8 <MX_I2C1_Init+0x50>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80020ae:	4b06      	ldr	r3, [pc, #24]	@ (80020c8 <MX_I2C1_Init+0x50>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80020b4:	4804      	ldr	r0, [pc, #16]	@ (80020c8 <MX_I2C1_Init+0x50>)
 80020b6:	f001 fd43 	bl	8003b40 <HAL_I2C_Init>
 80020ba:	4603      	mov	r3, r0
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d001      	beq.n	80020c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80020c0:	f000 f941 	bl	8002346 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80020c4:	bf00      	nop
 80020c6:	bd80      	pop	{r7, pc}
 80020c8:	200002ac 	.word	0x200002ac
 80020cc:	40005400 	.word	0x40005400
 80020d0:	000186a0 	.word	0x000186a0

080020d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80020d8:	4b17      	ldr	r3, [pc, #92]	@ (8002138 <MX_SPI1_Init+0x64>)
 80020da:	4a18      	ldr	r2, [pc, #96]	@ (800213c <MX_SPI1_Init+0x68>)
 80020dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80020de:	4b16      	ldr	r3, [pc, #88]	@ (8002138 <MX_SPI1_Init+0x64>)
 80020e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80020e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80020e6:	4b14      	ldr	r3, [pc, #80]	@ (8002138 <MX_SPI1_Init+0x64>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80020ec:	4b12      	ldr	r3, [pc, #72]	@ (8002138 <MX_SPI1_Init+0x64>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80020f2:	4b11      	ldr	r3, [pc, #68]	@ (8002138 <MX_SPI1_Init+0x64>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80020f8:	4b0f      	ldr	r3, [pc, #60]	@ (8002138 <MX_SPI1_Init+0x64>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80020fe:	4b0e      	ldr	r3, [pc, #56]	@ (8002138 <MX_SPI1_Init+0x64>)
 8002100:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002104:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002106:	4b0c      	ldr	r3, [pc, #48]	@ (8002138 <MX_SPI1_Init+0x64>)
 8002108:	2200      	movs	r2, #0
 800210a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800210c:	4b0a      	ldr	r3, [pc, #40]	@ (8002138 <MX_SPI1_Init+0x64>)
 800210e:	2200      	movs	r2, #0
 8002110:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002112:	4b09      	ldr	r3, [pc, #36]	@ (8002138 <MX_SPI1_Init+0x64>)
 8002114:	2200      	movs	r2, #0
 8002116:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002118:	4b07      	ldr	r3, [pc, #28]	@ (8002138 <MX_SPI1_Init+0x64>)
 800211a:	2200      	movs	r2, #0
 800211c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800211e:	4b06      	ldr	r3, [pc, #24]	@ (8002138 <MX_SPI1_Init+0x64>)
 8002120:	220a      	movs	r2, #10
 8002122:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002124:	4804      	ldr	r0, [pc, #16]	@ (8002138 <MX_SPI1_Init+0x64>)
 8002126:	f003 f987 	bl	8005438 <HAL_SPI_Init>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d001      	beq.n	8002134 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002130:	f000 f909 	bl	8002346 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002134:	bf00      	nop
 8002136:	bd80      	pop	{r7, pc}
 8002138:	20000300 	.word	0x20000300
 800213c:	40013000 	.word	0x40013000

08002140 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002144:	4b11      	ldr	r3, [pc, #68]	@ (800218c <MX_UART5_Init+0x4c>)
 8002146:	4a12      	ldr	r2, [pc, #72]	@ (8002190 <MX_UART5_Init+0x50>)
 8002148:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800214a:	4b10      	ldr	r3, [pc, #64]	@ (800218c <MX_UART5_Init+0x4c>)
 800214c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002150:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002152:	4b0e      	ldr	r3, [pc, #56]	@ (800218c <MX_UART5_Init+0x4c>)
 8002154:	2200      	movs	r2, #0
 8002156:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8002158:	4b0c      	ldr	r3, [pc, #48]	@ (800218c <MX_UART5_Init+0x4c>)
 800215a:	2200      	movs	r2, #0
 800215c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800215e:	4b0b      	ldr	r3, [pc, #44]	@ (800218c <MX_UART5_Init+0x4c>)
 8002160:	2200      	movs	r2, #0
 8002162:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002164:	4b09      	ldr	r3, [pc, #36]	@ (800218c <MX_UART5_Init+0x4c>)
 8002166:	220c      	movs	r2, #12
 8002168:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800216a:	4b08      	ldr	r3, [pc, #32]	@ (800218c <MX_UART5_Init+0x4c>)
 800216c:	2200      	movs	r2, #0
 800216e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002170:	4b06      	ldr	r3, [pc, #24]	@ (800218c <MX_UART5_Init+0x4c>)
 8002172:	2200      	movs	r2, #0
 8002174:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002176:	4805      	ldr	r0, [pc, #20]	@ (800218c <MX_UART5_Init+0x4c>)
 8002178:	f003 fc08 	bl	800598c <HAL_UART_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8002182:	f000 f8e0 	bl	8002346 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000358 	.word	0x20000358
 8002190:	40005000 	.word	0x40005000

08002194 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08a      	sub	sp, #40	@ 0x28
 8002198:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219a:	f107 0314 	add.w	r3, r7, #20
 800219e:	2200      	movs	r2, #0
 80021a0:	601a      	str	r2, [r3, #0]
 80021a2:	605a      	str	r2, [r3, #4]
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	60da      	str	r2, [r3, #12]
 80021a8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	613b      	str	r3, [r7, #16]
 80021ae:	4b43      	ldr	r3, [pc, #268]	@ (80022bc <MX_GPIO_Init+0x128>)
 80021b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021b2:	4a42      	ldr	r2, [pc, #264]	@ (80022bc <MX_GPIO_Init+0x128>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80021ba:	4b40      	ldr	r3, [pc, #256]	@ (80022bc <MX_GPIO_Init+0x128>)
 80021bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	613b      	str	r3, [r7, #16]
 80021c4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	60fb      	str	r3, [r7, #12]
 80021ca:	4b3c      	ldr	r3, [pc, #240]	@ (80022bc <MX_GPIO_Init+0x128>)
 80021cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ce:	4a3b      	ldr	r2, [pc, #236]	@ (80022bc <MX_GPIO_Init+0x128>)
 80021d0:	f043 0302 	orr.w	r3, r3, #2
 80021d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80021d6:	4b39      	ldr	r3, [pc, #228]	@ (80022bc <MX_GPIO_Init+0x128>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021da:	f003 0302 	and.w	r3, r3, #2
 80021de:	60fb      	str	r3, [r7, #12]
 80021e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	60bb      	str	r3, [r7, #8]
 80021e6:	4b35      	ldr	r3, [pc, #212]	@ (80022bc <MX_GPIO_Init+0x128>)
 80021e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021ea:	4a34      	ldr	r2, [pc, #208]	@ (80022bc <MX_GPIO_Init+0x128>)
 80021ec:	f043 0308 	orr.w	r3, r3, #8
 80021f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80021f2:	4b32      	ldr	r3, [pc, #200]	@ (80022bc <MX_GPIO_Init+0x128>)
 80021f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80021f6:	f003 0308 	and.w	r3, r3, #8
 80021fa:	60bb      	str	r3, [r7, #8]
 80021fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80021fe:	2300      	movs	r3, #0
 8002200:	607b      	str	r3, [r7, #4]
 8002202:	4b2e      	ldr	r3, [pc, #184]	@ (80022bc <MX_GPIO_Init+0x128>)
 8002204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002206:	4a2d      	ldr	r2, [pc, #180]	@ (80022bc <MX_GPIO_Init+0x128>)
 8002208:	f043 0304 	orr.w	r3, r3, #4
 800220c:	6313      	str	r3, [r2, #48]	@ 0x30
 800220e:	4b2b      	ldr	r3, [pc, #172]	@ (80022bc <MX_GPIO_Init+0x128>)
 8002210:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002212:	f003 0304 	and.w	r3, r3, #4
 8002216:	607b      	str	r3, [r7, #4]
 8002218:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 800221a:	2200      	movs	r2, #0
 800221c:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8002220:	4827      	ldr	r0, [pc, #156]	@ (80022c0 <MX_GPIO_Init+0x12c>)
 8002222:	f001 fc73 	bl	8003b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002226:	2200      	movs	r2, #0
 8002228:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 800222c:	4825      	ldr	r0, [pc, #148]	@ (80022c4 <MX_GPIO_Init+0x130>)
 800222e:	f001 fc6d 	bl	8003b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, GPIO_PIN_RESET);
 8002232:	2200      	movs	r2, #0
 8002234:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8002238:	4823      	ldr	r0, [pc, #140]	@ (80022c8 <MX_GPIO_Init+0x134>)
 800223a:	f001 fc67 	bl	8003b0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800223e:	2301      	movs	r3, #1
 8002240:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002242:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002246:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002248:	2300      	movs	r3, #0
 800224a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	4619      	mov	r1, r3
 8002252:	481d      	ldr	r0, [pc, #116]	@ (80022c8 <MX_GPIO_Init+0x134>)
 8002254:	f001 fabe 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8002258:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 800225c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800225e:	2301      	movs	r3, #1
 8002260:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002262:	2300      	movs	r3, #0
 8002264:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002266:	2300      	movs	r3, #0
 8002268:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800226a:	f107 0314 	add.w	r3, r7, #20
 800226e:	4619      	mov	r1, r3
 8002270:	4813      	ldr	r0, [pc, #76]	@ (80022c0 <MX_GPIO_Init+0x12c>)
 8002272:	f001 faaf 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002276:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 800227a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800227c:	2301      	movs	r3, #1
 800227e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002280:	2300      	movs	r3, #0
 8002282:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002284:	2300      	movs	r3, #0
 8002286:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002288:	f107 0314 	add.w	r3, r7, #20
 800228c:	4619      	mov	r1, r3
 800228e:	480d      	ldr	r0, [pc, #52]	@ (80022c4 <MX_GPIO_Init+0x130>)
 8002290:	f001 faa0 	bl	80037d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002294:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002298:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800229a:	2301      	movs	r3, #1
 800229c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022a2:	2300      	movs	r3, #0
 80022a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a6:	f107 0314 	add.w	r3, r7, #20
 80022aa:	4619      	mov	r1, r3
 80022ac:	4806      	ldr	r0, [pc, #24]	@ (80022c8 <MX_GPIO_Init+0x134>)
 80022ae:	f001 fa91 	bl	80037d4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80022b2:	bf00      	nop
 80022b4:	3728      	adds	r7, #40	@ 0x28
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40023800 	.word	0x40023800
 80022c0:	40020400 	.word	0x40020400
 80022c4:	40020c00 	.word	0x40020c00
 80022c8:	40020000 	.word	0x40020000

080022cc <calculate_ppm>:

/* USER CODE BEGIN 4 */
float calculate_ppm(float Rs, float R0, float A, float B)
{
 80022cc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80022d0:	b084      	sub	sp, #16
 80022d2:	af00      	add	r7, sp, #0
 80022d4:	ed87 0a03 	vstr	s0, [r7, #12]
 80022d8:	edc7 0a02 	vstr	s1, [r7, #8]
 80022dc:	ed87 1a01 	vstr	s2, [r7, #4]
 80022e0:	edc7 1a00 	vstr	s3, [r7]
    return A * pow((Rs / R0), B);
 80022e4:	6878      	ldr	r0, [r7, #4]
 80022e6:	f7fe f92f 	bl	8000548 <__aeabi_f2d>
 80022ea:	4604      	mov	r4, r0
 80022ec:	460d      	mov	r5, r1
 80022ee:	ed97 7a03 	vldr	s14, [r7, #12]
 80022f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80022f6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80022fa:	ee16 0a90 	vmov	r0, s13
 80022fe:	f7fe f923 	bl	8000548 <__aeabi_f2d>
 8002302:	4680      	mov	r8, r0
 8002304:	4689      	mov	r9, r1
 8002306:	6838      	ldr	r0, [r7, #0]
 8002308:	f7fe f91e 	bl	8000548 <__aeabi_f2d>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	ec43 2b11 	vmov	d1, r2, r3
 8002314:	ec49 8b10 	vmov	d0, r8, r9
 8002318:	f006 fd8c 	bl	8008e34 <pow>
 800231c:	ec53 2b10 	vmov	r2, r3, d0
 8002320:	4620      	mov	r0, r4
 8002322:	4629      	mov	r1, r5
 8002324:	f7fe f968 	bl	80005f8 <__aeabi_dmul>
 8002328:	4602      	mov	r2, r0
 800232a:	460b      	mov	r3, r1
 800232c:	4610      	mov	r0, r2
 800232e:	4619      	mov	r1, r3
 8002330:	f7fe fc3a 	bl	8000ba8 <__aeabi_d2f>
 8002334:	4603      	mov	r3, r0
 8002336:	ee07 3a90 	vmov	s15, r3
}
 800233a:	eeb0 0a67 	vmov.f32	s0, s15
 800233e:	3710      	adds	r7, #16
 8002340:	46bd      	mov	sp, r7
 8002342:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}

08002346 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800234a:	b672      	cpsid	i
}
 800234c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800234e:	bf00      	nop
 8002350:	e7fd      	b.n	800234e <Error_Handler+0x8>
	...

08002354 <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8002358:	2201      	movs	r2, #1
 800235a:	2101      	movs	r1, #1
 800235c:	480a      	ldr	r0, [pc, #40]	@ (8002388 <ssd1306_Reset+0x34>)
 800235e:	f001 fbd5 	bl	8003b0c <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8002362:	2200      	movs	r2, #0
 8002364:	2104      	movs	r1, #4
 8002366:	4808      	ldr	r0, [pc, #32]	@ (8002388 <ssd1306_Reset+0x34>)
 8002368:	f001 fbd0 	bl	8003b0c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800236c:	200a      	movs	r0, #10
 800236e:	f000 fd5b 	bl	8002e28 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8002372:	2201      	movs	r2, #1
 8002374:	2104      	movs	r1, #4
 8002376:	4804      	ldr	r0, [pc, #16]	@ (8002388 <ssd1306_Reset+0x34>)
 8002378:	f001 fbc8 	bl	8003b0c <HAL_GPIO_WritePin>
    HAL_Delay(10);
 800237c:	200a      	movs	r0, #10
 800237e:	f000 fd53 	bl	8002e28 <HAL_Delay>
}
 8002382:	bf00      	nop
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40020400 	.word	0x40020400

0800238c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 800238c:	b580      	push	{r7, lr}
 800238e:	b082      	sub	sp, #8
 8002390:	af00      	add	r7, sp, #0
 8002392:	4603      	mov	r3, r0
 8002394:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8002396:	2200      	movs	r2, #0
 8002398:	2101      	movs	r1, #1
 800239a:	480c      	ldr	r0, [pc, #48]	@ (80023cc <ssd1306_WriteCommand+0x40>)
 800239c:	f001 fbb6 	bl	8003b0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 80023a0:	2200      	movs	r2, #0
 80023a2:	2102      	movs	r1, #2
 80023a4:	4809      	ldr	r0, [pc, #36]	@ (80023cc <ssd1306_WriteCommand+0x40>)
 80023a6:	f001 fbb1 	bl	8003b0c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 80023aa:	1df9      	adds	r1, r7, #7
 80023ac:	f04f 33ff 	mov.w	r3, #4294967295
 80023b0:	2201      	movs	r2, #1
 80023b2:	4807      	ldr	r0, [pc, #28]	@ (80023d0 <ssd1306_WriteCommand+0x44>)
 80023b4:	f003 f8c9 	bl	800554a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 80023b8:	2201      	movs	r2, #1
 80023ba:	2101      	movs	r1, #1
 80023bc:	4803      	ldr	r0, [pc, #12]	@ (80023cc <ssd1306_WriteCommand+0x40>)
 80023be:	f001 fba5 	bl	8003b0c <HAL_GPIO_WritePin>
}
 80023c2:	bf00      	nop
 80023c4:	3708      	adds	r7, #8
 80023c6:	46bd      	mov	sp, r7
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	40020400 	.word	0x40020400
 80023d0:	20000300 	.word	0x20000300

080023d4 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b082      	sub	sp, #8
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 80023de:	2200      	movs	r2, #0
 80023e0:	2101      	movs	r1, #1
 80023e2:	480c      	ldr	r0, [pc, #48]	@ (8002414 <ssd1306_WriteData+0x40>)
 80023e4:	f001 fb92 	bl	8003b0c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 80023e8:	2201      	movs	r2, #1
 80023ea:	2102      	movs	r1, #2
 80023ec:	4809      	ldr	r0, [pc, #36]	@ (8002414 <ssd1306_WriteData+0x40>)
 80023ee:	f001 fb8d 	bl	8003b0c <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	b29a      	uxth	r2, r3
 80023f6:	f04f 33ff 	mov.w	r3, #4294967295
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	4806      	ldr	r0, [pc, #24]	@ (8002418 <ssd1306_WriteData+0x44>)
 80023fe:	f003 f8a4 	bl	800554a <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8002402:	2201      	movs	r2, #1
 8002404:	2101      	movs	r1, #1
 8002406:	4803      	ldr	r0, [pc, #12]	@ (8002414 <ssd1306_WriteData+0x40>)
 8002408:	f001 fb80 	bl	8003b0c <HAL_GPIO_WritePin>
}
 800240c:	bf00      	nop
 800240e:	3708      	adds	r7, #8
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40020400 	.word	0x40020400
 8002418:	20000300 	.word	0x20000300

0800241c <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 800241c:	b580      	push	{r7, lr}
 800241e:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8002420:	f7ff ff98 	bl	8002354 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8002424:	2064      	movs	r0, #100	@ 0x64
 8002426:	f000 fcff 	bl	8002e28 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800242a:	2000      	movs	r0, #0
 800242c:	f000 f9d6 	bl	80027dc <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8002430:	2020      	movs	r0, #32
 8002432:	f7ff ffab 	bl	800238c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8002436:	2000      	movs	r0, #0
 8002438:	f7ff ffa8 	bl	800238c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800243c:	20b0      	movs	r0, #176	@ 0xb0
 800243e:	f7ff ffa5 	bl	800238c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8002442:	20c8      	movs	r0, #200	@ 0xc8
 8002444:	f7ff ffa2 	bl	800238c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8002448:	2000      	movs	r0, #0
 800244a:	f7ff ff9f 	bl	800238c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 800244e:	2010      	movs	r0, #16
 8002450:	f7ff ff9c 	bl	800238c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8002454:	2040      	movs	r0, #64	@ 0x40
 8002456:	f7ff ff99 	bl	800238c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800245a:	20ff      	movs	r0, #255	@ 0xff
 800245c:	f000 f9aa 	bl	80027b4 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8002460:	20a1      	movs	r0, #161	@ 0xa1
 8002462:	f7ff ff93 	bl	800238c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8002466:	20a6      	movs	r0, #166	@ 0xa6
 8002468:	f7ff ff90 	bl	800238c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 800246c:	20a8      	movs	r0, #168	@ 0xa8
 800246e:	f7ff ff8d 	bl	800238c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8002472:	203f      	movs	r0, #63	@ 0x3f
 8002474:	f7ff ff8a 	bl	800238c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8002478:	20a4      	movs	r0, #164	@ 0xa4
 800247a:	f7ff ff87 	bl	800238c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800247e:	20d3      	movs	r0, #211	@ 0xd3
 8002480:	f7ff ff84 	bl	800238c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8002484:	2000      	movs	r0, #0
 8002486:	f7ff ff81 	bl	800238c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800248a:	20d5      	movs	r0, #213	@ 0xd5
 800248c:	f7ff ff7e 	bl	800238c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8002490:	20f0      	movs	r0, #240	@ 0xf0
 8002492:	f7ff ff7b 	bl	800238c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8002496:	20d9      	movs	r0, #217	@ 0xd9
 8002498:	f7ff ff78 	bl	800238c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800249c:	2022      	movs	r0, #34	@ 0x22
 800249e:	f7ff ff75 	bl	800238c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80024a2:	20da      	movs	r0, #218	@ 0xda
 80024a4:	f7ff ff72 	bl	800238c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80024a8:	2012      	movs	r0, #18
 80024aa:	f7ff ff6f 	bl	800238c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80024ae:	20db      	movs	r0, #219	@ 0xdb
 80024b0:	f7ff ff6c 	bl	800238c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80024b4:	2020      	movs	r0, #32
 80024b6:	f7ff ff69 	bl	800238c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80024ba:	208d      	movs	r0, #141	@ 0x8d
 80024bc:	f7ff ff66 	bl	800238c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80024c0:	2014      	movs	r0, #20
 80024c2:	f7ff ff63 	bl	800238c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80024c6:	2001      	movs	r0, #1
 80024c8:	f000 f988 	bl	80027dc <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 80024cc:	2000      	movs	r0, #0
 80024ce:	f000 f80f 	bl	80024f0 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 80024d2:	f000 f825 	bl	8002520 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 80024d6:	4b05      	ldr	r3, [pc, #20]	@ (80024ec <ssd1306_Init+0xd0>)
 80024d8:	2200      	movs	r2, #0
 80024da:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 80024dc:	4b03      	ldr	r3, [pc, #12]	@ (80024ec <ssd1306_Init+0xd0>)
 80024de:	2200      	movs	r2, #0
 80024e0:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 80024e2:	4b02      	ldr	r3, [pc, #8]	@ (80024ec <ssd1306_Init+0xd0>)
 80024e4:	2201      	movs	r2, #1
 80024e6:	711a      	strb	r2, [r3, #4]
}
 80024e8:	bf00      	nop
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000838 	.word	0x20000838

080024f0 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b082      	sub	sp, #8
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	4603      	mov	r3, r0
 80024f8:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d101      	bne.n	8002504 <ssd1306_Fill+0x14>
 8002500:	2300      	movs	r3, #0
 8002502:	e000      	b.n	8002506 <ssd1306_Fill+0x16>
 8002504:	23ff      	movs	r3, #255	@ 0xff
 8002506:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800250a:	4619      	mov	r1, r3
 800250c:	4803      	ldr	r0, [pc, #12]	@ (800251c <ssd1306_Fill+0x2c>)
 800250e:	f004 fbc6 	bl	8006c9e <memset>
}
 8002512:	bf00      	nop
 8002514:	3708      	adds	r7, #8
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000438 	.word	0x20000438

08002520 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002526:	2300      	movs	r3, #0
 8002528:	71fb      	strb	r3, [r7, #7]
 800252a:	e016      	b.n	800255a <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 800252c:	79fb      	ldrb	r3, [r7, #7]
 800252e:	3b50      	subs	r3, #80	@ 0x50
 8002530:	b2db      	uxtb	r3, r3
 8002532:	4618      	mov	r0, r3
 8002534:	f7ff ff2a 	bl	800238c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8002538:	2000      	movs	r0, #0
 800253a:	f7ff ff27 	bl	800238c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 800253e:	2010      	movs	r0, #16
 8002540:	f7ff ff24 	bl	800238c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8002544:	79fb      	ldrb	r3, [r7, #7]
 8002546:	01db      	lsls	r3, r3, #7
 8002548:	4a08      	ldr	r2, [pc, #32]	@ (800256c <ssd1306_UpdateScreen+0x4c>)
 800254a:	4413      	add	r3, r2
 800254c:	2180      	movs	r1, #128	@ 0x80
 800254e:	4618      	mov	r0, r3
 8002550:	f7ff ff40 	bl	80023d4 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	3301      	adds	r3, #1
 8002558:	71fb      	strb	r3, [r7, #7]
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	2b07      	cmp	r3, #7
 800255e:	d9e5      	bls.n	800252c <ssd1306_UpdateScreen+0xc>
    }
}
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	3708      	adds	r7, #8
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000438 	.word	0x20000438

08002570 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8002570:	b480      	push	{r7}
 8002572:	b083      	sub	sp, #12
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
 800257a:	460b      	mov	r3, r1
 800257c:	71bb      	strb	r3, [r7, #6]
 800257e:	4613      	mov	r3, r2
 8002580:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	2b00      	cmp	r3, #0
 8002588:	db3d      	blt.n	8002606 <ssd1306_DrawPixel+0x96>
 800258a:	79bb      	ldrb	r3, [r7, #6]
 800258c:	2b3f      	cmp	r3, #63	@ 0x3f
 800258e:	d83a      	bhi.n	8002606 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8002590:	797b      	ldrb	r3, [r7, #5]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d11a      	bne.n	80025cc <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002596:	79fa      	ldrb	r2, [r7, #7]
 8002598:	79bb      	ldrb	r3, [r7, #6]
 800259a:	08db      	lsrs	r3, r3, #3
 800259c:	b2d8      	uxtb	r0, r3
 800259e:	4603      	mov	r3, r0
 80025a0:	01db      	lsls	r3, r3, #7
 80025a2:	4413      	add	r3, r2
 80025a4:	4a1b      	ldr	r2, [pc, #108]	@ (8002614 <ssd1306_DrawPixel+0xa4>)
 80025a6:	5cd3      	ldrb	r3, [r2, r3]
 80025a8:	b25a      	sxtb	r2, r3
 80025aa:	79bb      	ldrb	r3, [r7, #6]
 80025ac:	f003 0307 	and.w	r3, r3, #7
 80025b0:	2101      	movs	r1, #1
 80025b2:	fa01 f303 	lsl.w	r3, r1, r3
 80025b6:	b25b      	sxtb	r3, r3
 80025b8:	4313      	orrs	r3, r2
 80025ba:	b259      	sxtb	r1, r3
 80025bc:	79fa      	ldrb	r2, [r7, #7]
 80025be:	4603      	mov	r3, r0
 80025c0:	01db      	lsls	r3, r3, #7
 80025c2:	4413      	add	r3, r2
 80025c4:	b2c9      	uxtb	r1, r1
 80025c6:	4a13      	ldr	r2, [pc, #76]	@ (8002614 <ssd1306_DrawPixel+0xa4>)
 80025c8:	54d1      	strb	r1, [r2, r3]
 80025ca:	e01d      	b.n	8002608 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80025cc:	79fa      	ldrb	r2, [r7, #7]
 80025ce:	79bb      	ldrb	r3, [r7, #6]
 80025d0:	08db      	lsrs	r3, r3, #3
 80025d2:	b2d8      	uxtb	r0, r3
 80025d4:	4603      	mov	r3, r0
 80025d6:	01db      	lsls	r3, r3, #7
 80025d8:	4413      	add	r3, r2
 80025da:	4a0e      	ldr	r2, [pc, #56]	@ (8002614 <ssd1306_DrawPixel+0xa4>)
 80025dc:	5cd3      	ldrb	r3, [r2, r3]
 80025de:	b25a      	sxtb	r2, r3
 80025e0:	79bb      	ldrb	r3, [r7, #6]
 80025e2:	f003 0307 	and.w	r3, r3, #7
 80025e6:	2101      	movs	r1, #1
 80025e8:	fa01 f303 	lsl.w	r3, r1, r3
 80025ec:	b25b      	sxtb	r3, r3
 80025ee:	43db      	mvns	r3, r3
 80025f0:	b25b      	sxtb	r3, r3
 80025f2:	4013      	ands	r3, r2
 80025f4:	b259      	sxtb	r1, r3
 80025f6:	79fa      	ldrb	r2, [r7, #7]
 80025f8:	4603      	mov	r3, r0
 80025fa:	01db      	lsls	r3, r3, #7
 80025fc:	4413      	add	r3, r2
 80025fe:	b2c9      	uxtb	r1, r1
 8002600:	4a04      	ldr	r2, [pc, #16]	@ (8002614 <ssd1306_DrawPixel+0xa4>)
 8002602:	54d1      	strb	r1, [r2, r3]
 8002604:	e000      	b.n	8002608 <ssd1306_DrawPixel+0x98>
        return;
 8002606:	bf00      	nop
    }
}
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000438 	.word	0x20000438

08002618 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002618:	b590      	push	{r4, r7, lr}
 800261a:	b089      	sub	sp, #36	@ 0x24
 800261c:	af00      	add	r7, sp, #0
 800261e:	4604      	mov	r4, r0
 8002620:	4638      	mov	r0, r7
 8002622:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8002626:	4623      	mov	r3, r4
 8002628:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 800262a:	7bfb      	ldrb	r3, [r7, #15]
 800262c:	2b1f      	cmp	r3, #31
 800262e:	d902      	bls.n	8002636 <ssd1306_WriteChar+0x1e>
 8002630:	7bfb      	ldrb	r3, [r7, #15]
 8002632:	2b7e      	cmp	r3, #126	@ 0x7e
 8002634:	d901      	bls.n	800263a <ssd1306_WriteChar+0x22>
        return 0;
 8002636:	2300      	movs	r3, #0
 8002638:	e077      	b.n	800272a <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 800263a:	4b3e      	ldr	r3, [pc, #248]	@ (8002734 <ssd1306_WriteChar+0x11c>)
 800263c:	881b      	ldrh	r3, [r3, #0]
 800263e:	461a      	mov	r2, r3
 8002640:	783b      	ldrb	r3, [r7, #0]
 8002642:	4413      	add	r3, r2
 8002644:	2b80      	cmp	r3, #128	@ 0x80
 8002646:	dc06      	bgt.n	8002656 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 8002648:	4b3a      	ldr	r3, [pc, #232]	@ (8002734 <ssd1306_WriteChar+0x11c>)
 800264a:	885b      	ldrh	r3, [r3, #2]
 800264c:	461a      	mov	r2, r3
 800264e:	787b      	ldrb	r3, [r7, #1]
 8002650:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 8002652:	2b40      	cmp	r3, #64	@ 0x40
 8002654:	dd01      	ble.n	800265a <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 8002656:	2300      	movs	r3, #0
 8002658:	e067      	b.n	800272a <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	e04e      	b.n	80026fe <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	3b20      	subs	r3, #32
 8002666:	7879      	ldrb	r1, [r7, #1]
 8002668:	fb01 f303 	mul.w	r3, r1, r3
 800266c:	4619      	mov	r1, r3
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	440b      	add	r3, r1
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4413      	add	r3, r2
 8002676:	881b      	ldrh	r3, [r3, #0]
 8002678:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800267a:	2300      	movs	r3, #0
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	e036      	b.n	80026ee <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8002680:	697a      	ldr	r2, [r7, #20]
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	fa02 f303 	lsl.w	r3, r2, r3
 8002688:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d013      	beq.n	80026b8 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8002690:	4b28      	ldr	r3, [pc, #160]	@ (8002734 <ssd1306_WriteChar+0x11c>)
 8002692:	881b      	ldrh	r3, [r3, #0]
 8002694:	b2da      	uxtb	r2, r3
 8002696:	69bb      	ldr	r3, [r7, #24]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	4413      	add	r3, r2
 800269c:	b2d8      	uxtb	r0, r3
 800269e:	4b25      	ldr	r3, [pc, #148]	@ (8002734 <ssd1306_WriteChar+0x11c>)
 80026a0:	885b      	ldrh	r3, [r3, #2]
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	4413      	add	r3, r2
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 80026b0:	4619      	mov	r1, r3
 80026b2:	f7ff ff5d 	bl	8002570 <ssd1306_DrawPixel>
 80026b6:	e017      	b.n	80026e8 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80026b8:	4b1e      	ldr	r3, [pc, #120]	@ (8002734 <ssd1306_WriteChar+0x11c>)
 80026ba:	881b      	ldrh	r3, [r3, #0]
 80026bc:	b2da      	uxtb	r2, r3
 80026be:	69bb      	ldr	r3, [r7, #24]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	4413      	add	r3, r2
 80026c4:	b2d8      	uxtb	r0, r3
 80026c6:	4b1b      	ldr	r3, [pc, #108]	@ (8002734 <ssd1306_WriteChar+0x11c>)
 80026c8:	885b      	ldrh	r3, [r3, #2]
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	69fb      	ldr	r3, [r7, #28]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	4413      	add	r3, r2
 80026d2:	b2d9      	uxtb	r1, r3
 80026d4:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80026d8:	2b00      	cmp	r3, #0
 80026da:	bf0c      	ite	eq
 80026dc:	2301      	moveq	r3, #1
 80026de:	2300      	movne	r3, #0
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	461a      	mov	r2, r3
 80026e4:	f7ff ff44 	bl	8002570 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 80026e8:	69bb      	ldr	r3, [r7, #24]
 80026ea:	3301      	adds	r3, #1
 80026ec:	61bb      	str	r3, [r7, #24]
 80026ee:	783b      	ldrb	r3, [r7, #0]
 80026f0:	461a      	mov	r2, r3
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	4293      	cmp	r3, r2
 80026f6:	d3c3      	bcc.n	8002680 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 80026f8:	69fb      	ldr	r3, [r7, #28]
 80026fa:	3301      	adds	r3, #1
 80026fc:	61fb      	str	r3, [r7, #28]
 80026fe:	787b      	ldrb	r3, [r7, #1]
 8002700:	461a      	mov	r2, r3
 8002702:	69fb      	ldr	r3, [r7, #28]
 8002704:	4293      	cmp	r3, r2
 8002706:	d3ab      	bcc.n	8002660 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8002708:	4b0a      	ldr	r3, [pc, #40]	@ (8002734 <ssd1306_WriteChar+0x11c>)
 800270a:	881b      	ldrh	r3, [r3, #0]
 800270c:	68ba      	ldr	r2, [r7, #8]
 800270e:	2a00      	cmp	r2, #0
 8002710:	d005      	beq.n	800271e <ssd1306_WriteChar+0x106>
 8002712:	68b9      	ldr	r1, [r7, #8]
 8002714:	7bfa      	ldrb	r2, [r7, #15]
 8002716:	3a20      	subs	r2, #32
 8002718:	440a      	add	r2, r1
 800271a:	7812      	ldrb	r2, [r2, #0]
 800271c:	e000      	b.n	8002720 <ssd1306_WriteChar+0x108>
 800271e:	783a      	ldrb	r2, [r7, #0]
 8002720:	4413      	add	r3, r2
 8002722:	b29a      	uxth	r2, r3
 8002724:	4b03      	ldr	r3, [pc, #12]	@ (8002734 <ssd1306_WriteChar+0x11c>)
 8002726:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8002728:	7bfb      	ldrb	r3, [r7, #15]
}
 800272a:	4618      	mov	r0, r3
 800272c:	3724      	adds	r7, #36	@ 0x24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd90      	pop	{r4, r7, pc}
 8002732:	bf00      	nop
 8002734:	20000838 	.word	0x20000838

08002738 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 8002738:	b580      	push	{r7, lr}
 800273a:	b086      	sub	sp, #24
 800273c:	af02      	add	r7, sp, #8
 800273e:	60f8      	str	r0, [r7, #12]
 8002740:	4638      	mov	r0, r7
 8002742:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 8002746:	e013      	b.n	8002770 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	7818      	ldrb	r0, [r3, #0]
 800274c:	7e3b      	ldrb	r3, [r7, #24]
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	463b      	mov	r3, r7
 8002752:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002754:	f7ff ff60 	bl	8002618 <ssd1306_WriteChar>
 8002758:	4603      	mov	r3, r0
 800275a:	461a      	mov	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	429a      	cmp	r2, r3
 8002762:	d002      	beq.n	800276a <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	e008      	b.n	800277c <ssd1306_WriteString+0x44>
        }
        str++;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	3301      	adds	r3, #1
 800276e:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	d1e7      	bne.n	8002748 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	781b      	ldrb	r3, [r3, #0]
}
 800277c:	4618      	mov	r0, r3
 800277e:	3710      	adds	r7, #16
 8002780:	46bd      	mov	sp, r7
 8002782:	bd80      	pop	{r7, pc}

08002784 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	4603      	mov	r3, r0
 800278c:	460a      	mov	r2, r1
 800278e:	71fb      	strb	r3, [r7, #7]
 8002790:	4613      	mov	r3, r2
 8002792:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	b29a      	uxth	r2, r3
 8002798:	4b05      	ldr	r3, [pc, #20]	@ (80027b0 <ssd1306_SetCursor+0x2c>)
 800279a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800279c:	79bb      	ldrb	r3, [r7, #6]
 800279e:	b29a      	uxth	r2, r3
 80027a0:	4b03      	ldr	r3, [pc, #12]	@ (80027b0 <ssd1306_SetCursor+0x2c>)
 80027a2:	805a      	strh	r2, [r3, #2]
}
 80027a4:	bf00      	nop
 80027a6:	370c      	adds	r7, #12
 80027a8:	46bd      	mov	sp, r7
 80027aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ae:	4770      	bx	lr
 80027b0:	20000838 	.word	0x20000838

080027b4 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	4603      	mov	r3, r0
 80027bc:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 80027be:	2381      	movs	r3, #129	@ 0x81
 80027c0:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 80027c2:	7bfb      	ldrb	r3, [r7, #15]
 80027c4:	4618      	mov	r0, r3
 80027c6:	f7ff fde1 	bl	800238c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80027ca:	79fb      	ldrb	r3, [r7, #7]
 80027cc:	4618      	mov	r0, r3
 80027ce:	f7ff fddd 	bl	800238c <ssd1306_WriteCommand>
}
 80027d2:	bf00      	nop
 80027d4:	3710      	adds	r7, #16
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
	...

080027dc <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	4603      	mov	r3, r0
 80027e4:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80027e6:	79fb      	ldrb	r3, [r7, #7]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d005      	beq.n	80027f8 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80027ec:	23af      	movs	r3, #175	@ 0xaf
 80027ee:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80027f0:	4b08      	ldr	r3, [pc, #32]	@ (8002814 <ssd1306_SetDisplayOn+0x38>)
 80027f2:	2201      	movs	r2, #1
 80027f4:	715a      	strb	r2, [r3, #5]
 80027f6:	e004      	b.n	8002802 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80027f8:	23ae      	movs	r3, #174	@ 0xae
 80027fa:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80027fc:	4b05      	ldr	r3, [pc, #20]	@ (8002814 <ssd1306_SetDisplayOn+0x38>)
 80027fe:	2200      	movs	r2, #0
 8002800:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8002802:	7bfb      	ldrb	r3, [r7, #15]
 8002804:	4618      	mov	r0, r3
 8002806:	f7ff fdc1 	bl	800238c <ssd1306_WriteCommand>
}
 800280a:	bf00      	nop
 800280c:	3710      	adds	r7, #16
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	20000838 	.word	0x20000838

08002818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002818:	b480      	push	{r7}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800281e:	2300      	movs	r3, #0
 8002820:	607b      	str	r3, [r7, #4]
 8002822:	4b10      	ldr	r3, [pc, #64]	@ (8002864 <HAL_MspInit+0x4c>)
 8002824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002826:	4a0f      	ldr	r2, [pc, #60]	@ (8002864 <HAL_MspInit+0x4c>)
 8002828:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800282c:	6453      	str	r3, [r2, #68]	@ 0x44
 800282e:	4b0d      	ldr	r3, [pc, #52]	@ (8002864 <HAL_MspInit+0x4c>)
 8002830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002832:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002836:	607b      	str	r3, [r7, #4]
 8002838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	603b      	str	r3, [r7, #0]
 800283e:	4b09      	ldr	r3, [pc, #36]	@ (8002864 <HAL_MspInit+0x4c>)
 8002840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002842:	4a08      	ldr	r2, [pc, #32]	@ (8002864 <HAL_MspInit+0x4c>)
 8002844:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002848:	6413      	str	r3, [r2, #64]	@ 0x40
 800284a:	4b06      	ldr	r3, [pc, #24]	@ (8002864 <HAL_MspInit+0x4c>)
 800284c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800284e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002856:	bf00      	nop
 8002858:	370c      	adds	r7, #12
 800285a:	46bd      	mov	sp, r7
 800285c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002860:	4770      	bx	lr
 8002862:	bf00      	nop
 8002864:	40023800 	.word	0x40023800

08002868 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b08a      	sub	sp, #40	@ 0x28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002870:	f107 0314 	add.w	r3, r7, #20
 8002874:	2200      	movs	r2, #0
 8002876:	601a      	str	r2, [r3, #0]
 8002878:	605a      	str	r2, [r3, #4]
 800287a:	609a      	str	r2, [r3, #8]
 800287c:	60da      	str	r2, [r3, #12]
 800287e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4a17      	ldr	r2, [pc, #92]	@ (80028e4 <HAL_ADC_MspInit+0x7c>)
 8002886:	4293      	cmp	r3, r2
 8002888:	d127      	bne.n	80028da <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800288a:	2300      	movs	r3, #0
 800288c:	613b      	str	r3, [r7, #16]
 800288e:	4b16      	ldr	r3, [pc, #88]	@ (80028e8 <HAL_ADC_MspInit+0x80>)
 8002890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002892:	4a15      	ldr	r2, [pc, #84]	@ (80028e8 <HAL_ADC_MspInit+0x80>)
 8002894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002898:	6453      	str	r3, [r2, #68]	@ 0x44
 800289a:	4b13      	ldr	r3, [pc, #76]	@ (80028e8 <HAL_ADC_MspInit+0x80>)
 800289c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800289e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028a2:	613b      	str	r3, [r7, #16]
 80028a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028a6:	2300      	movs	r3, #0
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	4b0f      	ldr	r3, [pc, #60]	@ (80028e8 <HAL_ADC_MspInit+0x80>)
 80028ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ae:	4a0e      	ldr	r2, [pc, #56]	@ (80028e8 <HAL_ADC_MspInit+0x80>)
 80028b0:	f043 0301 	orr.w	r3, r3, #1
 80028b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028b6:	4b0c      	ldr	r3, [pc, #48]	@ (80028e8 <HAL_ADC_MspInit+0x80>)
 80028b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	60fb      	str	r3, [r7, #12]
 80028c0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80028c2:	2302      	movs	r3, #2
 80028c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80028c6:	2303      	movs	r3, #3
 80028c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ca:	2300      	movs	r3, #0
 80028cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028ce:	f107 0314 	add.w	r3, r7, #20
 80028d2:	4619      	mov	r1, r3
 80028d4:	4805      	ldr	r0, [pc, #20]	@ (80028ec <HAL_ADC_MspInit+0x84>)
 80028d6:	f000 ff7d 	bl	80037d4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 80028da:	bf00      	nop
 80028dc:	3728      	adds	r7, #40	@ 0x28
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40012000 	.word	0x40012000
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40020000 	.word	0x40020000

080028f0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08a      	sub	sp, #40	@ 0x28
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 0314 	add.w	r3, r7, #20
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a19      	ldr	r2, [pc, #100]	@ (8002974 <HAL_I2C_MspInit+0x84>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d12b      	bne.n	800296a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	613b      	str	r3, [r7, #16]
 8002916:	4b18      	ldr	r3, [pc, #96]	@ (8002978 <HAL_I2C_MspInit+0x88>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291a:	4a17      	ldr	r2, [pc, #92]	@ (8002978 <HAL_I2C_MspInit+0x88>)
 800291c:	f043 0302 	orr.w	r3, r3, #2
 8002920:	6313      	str	r3, [r2, #48]	@ 0x30
 8002922:	4b15      	ldr	r3, [pc, #84]	@ (8002978 <HAL_I2C_MspInit+0x88>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002926:	f003 0302 	and.w	r3, r3, #2
 800292a:	613b      	str	r3, [r7, #16]
 800292c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800292e:	23c0      	movs	r3, #192	@ 0xc0
 8002930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002932:	2312      	movs	r3, #18
 8002934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800293a:	2303      	movs	r3, #3
 800293c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800293e:	2304      	movs	r3, #4
 8002940:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002942:	f107 0314 	add.w	r3, r7, #20
 8002946:	4619      	mov	r1, r3
 8002948:	480c      	ldr	r0, [pc, #48]	@ (800297c <HAL_I2C_MspInit+0x8c>)
 800294a:	f000 ff43 	bl	80037d4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800294e:	2300      	movs	r3, #0
 8002950:	60fb      	str	r3, [r7, #12]
 8002952:	4b09      	ldr	r3, [pc, #36]	@ (8002978 <HAL_I2C_MspInit+0x88>)
 8002954:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002956:	4a08      	ldr	r2, [pc, #32]	@ (8002978 <HAL_I2C_MspInit+0x88>)
 8002958:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800295c:	6413      	str	r3, [r2, #64]	@ 0x40
 800295e:	4b06      	ldr	r3, [pc, #24]	@ (8002978 <HAL_I2C_MspInit+0x88>)
 8002960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002962:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002966:	60fb      	str	r3, [r7, #12]
 8002968:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800296a:	bf00      	nop
 800296c:	3728      	adds	r7, #40	@ 0x28
 800296e:	46bd      	mov	sp, r7
 8002970:	bd80      	pop	{r7, pc}
 8002972:	bf00      	nop
 8002974:	40005400 	.word	0x40005400
 8002978:	40023800 	.word	0x40023800
 800297c:	40020400 	.word	0x40020400

08002980 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	@ 0x28
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002988:	f107 0314 	add.w	r3, r7, #20
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
 8002990:	605a      	str	r2, [r3, #4]
 8002992:	609a      	str	r2, [r3, #8]
 8002994:	60da      	str	r2, [r3, #12]
 8002996:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a19      	ldr	r2, [pc, #100]	@ (8002a04 <HAL_SPI_MspInit+0x84>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d12b      	bne.n	80029fa <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	613b      	str	r3, [r7, #16]
 80029a6:	4b18      	ldr	r3, [pc, #96]	@ (8002a08 <HAL_SPI_MspInit+0x88>)
 80029a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029aa:	4a17      	ldr	r2, [pc, #92]	@ (8002a08 <HAL_SPI_MspInit+0x88>)
 80029ac:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80029b2:	4b15      	ldr	r3, [pc, #84]	@ (8002a08 <HAL_SPI_MspInit+0x88>)
 80029b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029be:	2300      	movs	r3, #0
 80029c0:	60fb      	str	r3, [r7, #12]
 80029c2:	4b11      	ldr	r3, [pc, #68]	@ (8002a08 <HAL_SPI_MspInit+0x88>)
 80029c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029c6:	4a10      	ldr	r2, [pc, #64]	@ (8002a08 <HAL_SPI_MspInit+0x88>)
 80029c8:	f043 0301 	orr.w	r3, r3, #1
 80029cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80029ce:	4b0e      	ldr	r3, [pc, #56]	@ (8002a08 <HAL_SPI_MspInit+0x88>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	f003 0301 	and.w	r3, r3, #1
 80029d6:	60fb      	str	r3, [r7, #12]
 80029d8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80029da:	23e0      	movs	r3, #224	@ 0xe0
 80029dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029de:	2302      	movs	r3, #2
 80029e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029e2:	2300      	movs	r3, #0
 80029e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029e6:	2303      	movs	r3, #3
 80029e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80029ea:	2305      	movs	r3, #5
 80029ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029ee:	f107 0314 	add.w	r3, r7, #20
 80029f2:	4619      	mov	r1, r3
 80029f4:	4805      	ldr	r0, [pc, #20]	@ (8002a0c <HAL_SPI_MspInit+0x8c>)
 80029f6:	f000 feed 	bl	80037d4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80029fa:	bf00      	nop
 80029fc:	3728      	adds	r7, #40	@ 0x28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
 8002a02:	bf00      	nop
 8002a04:	40013000 	.word	0x40013000
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40020000 	.word	0x40020000

08002a10 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b08a      	sub	sp, #40	@ 0x28
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	2200      	movs	r2, #0
 8002a1e:	601a      	str	r2, [r3, #0]
 8002a20:	605a      	str	r2, [r3, #4]
 8002a22:	609a      	str	r2, [r3, #8]
 8002a24:	60da      	str	r2, [r3, #12]
 8002a26:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	4a28      	ldr	r2, [pc, #160]	@ (8002ad0 <HAL_UART_MspInit+0xc0>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d14a      	bne.n	8002ac8 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002a32:	2300      	movs	r3, #0
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	4b27      	ldr	r3, [pc, #156]	@ (8002ad4 <HAL_UART_MspInit+0xc4>)
 8002a38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a3a:	4a26      	ldr	r2, [pc, #152]	@ (8002ad4 <HAL_UART_MspInit+0xc4>)
 8002a3c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a40:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a42:	4b24      	ldr	r3, [pc, #144]	@ (8002ad4 <HAL_UART_MspInit+0xc4>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a46:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002a4a:	613b      	str	r3, [r7, #16]
 8002a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60fb      	str	r3, [r7, #12]
 8002a52:	4b20      	ldr	r3, [pc, #128]	@ (8002ad4 <HAL_UART_MspInit+0xc4>)
 8002a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a56:	4a1f      	ldr	r2, [pc, #124]	@ (8002ad4 <HAL_UART_MspInit+0xc4>)
 8002a58:	f043 0304 	orr.w	r3, r3, #4
 8002a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8002ad4 <HAL_UART_MspInit+0xc4>)
 8002a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a62:	f003 0304 	and.w	r3, r3, #4
 8002a66:	60fb      	str	r3, [r7, #12]
 8002a68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	60bb      	str	r3, [r7, #8]
 8002a6e:	4b19      	ldr	r3, [pc, #100]	@ (8002ad4 <HAL_UART_MspInit+0xc4>)
 8002a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a72:	4a18      	ldr	r2, [pc, #96]	@ (8002ad4 <HAL_UART_MspInit+0xc4>)
 8002a74:	f043 0308 	orr.w	r3, r3, #8
 8002a78:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a7a:	4b16      	ldr	r3, [pc, #88]	@ (8002ad4 <HAL_UART_MspInit+0xc4>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	60bb      	str	r3, [r7, #8]
 8002a84:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a86:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002a8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a90:	2300      	movs	r3, #0
 8002a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a94:	2303      	movs	r3, #3
 8002a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a98:	2308      	movs	r3, #8
 8002a9a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a9c:	f107 0314 	add.w	r3, r7, #20
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	480d      	ldr	r0, [pc, #52]	@ (8002ad8 <HAL_UART_MspInit+0xc8>)
 8002aa4:	f000 fe96 	bl	80037d4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002aa8:	2304      	movs	r3, #4
 8002aaa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aac:	2302      	movs	r3, #2
 8002aae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ab0:	2300      	movs	r3, #0
 8002ab2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ab4:	2303      	movs	r3, #3
 8002ab6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002ab8:	2308      	movs	r3, #8
 8002aba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002abc:	f107 0314 	add.w	r3, r7, #20
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	4806      	ldr	r0, [pc, #24]	@ (8002adc <HAL_UART_MspInit+0xcc>)
 8002ac4:	f000 fe86 	bl	80037d4 <HAL_GPIO_Init>

  /* USER CODE END UART5_MspInit 1 */

  }

}
 8002ac8:	bf00      	nop
 8002aca:	3728      	adds	r7, #40	@ 0x28
 8002acc:	46bd      	mov	sp, r7
 8002ace:	bd80      	pop	{r7, pc}
 8002ad0:	40005000 	.word	0x40005000
 8002ad4:	40023800 	.word	0x40023800
 8002ad8:	40020800 	.word	0x40020800
 8002adc:	40020c00 	.word	0x40020c00

08002ae0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ae4:	bf00      	nop
 8002ae6:	e7fd      	b.n	8002ae4 <NMI_Handler+0x4>

08002ae8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ae8:	b480      	push	{r7}
 8002aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002aec:	bf00      	nop
 8002aee:	e7fd      	b.n	8002aec <HardFault_Handler+0x4>

08002af0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002af0:	b480      	push	{r7}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002af4:	bf00      	nop
 8002af6:	e7fd      	b.n	8002af4 <MemManage_Handler+0x4>

08002af8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002af8:	b480      	push	{r7}
 8002afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002afc:	bf00      	nop
 8002afe:	e7fd      	b.n	8002afc <BusFault_Handler+0x4>

08002b00 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b04:	bf00      	nop
 8002b06:	e7fd      	b.n	8002b04 <UsageFault_Handler+0x4>

08002b08 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b0c:	bf00      	nop
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b14:	4770      	bx	lr

08002b16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b16:	b480      	push	{r7}
 8002b18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b1a:	bf00      	nop
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b24:	b480      	push	{r7}
 8002b26:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b28:	bf00      	nop
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr

08002b32 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002b36:	f000 f957 	bl	8002de8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002b3a:	bf00      	nop
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b3e:	b480      	push	{r7}
 8002b40:	af00      	add	r7, sp, #0
  return 1;
 8002b42:	2301      	movs	r3, #1
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <_kill>:

int _kill(int pid, int sig)
{
 8002b4e:	b580      	push	{r7, lr}
 8002b50:	b082      	sub	sp, #8
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	6078      	str	r0, [r7, #4]
 8002b56:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b58:	f004 f8f4 	bl	8006d44 <__errno>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2216      	movs	r2, #22
 8002b60:	601a      	str	r2, [r3, #0]
  return -1;
 8002b62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b66:	4618      	mov	r0, r3
 8002b68:	3708      	adds	r7, #8
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	bd80      	pop	{r7, pc}

08002b6e <_exit>:

void _exit (int status)
{
 8002b6e:	b580      	push	{r7, lr}
 8002b70:	b082      	sub	sp, #8
 8002b72:	af00      	add	r7, sp, #0
 8002b74:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b76:	f04f 31ff 	mov.w	r1, #4294967295
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f7ff ffe7 	bl	8002b4e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b80:	bf00      	nop
 8002b82:	e7fd      	b.n	8002b80 <_exit+0x12>

08002b84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b086      	sub	sp, #24
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	60f8      	str	r0, [r7, #12]
 8002b8c:	60b9      	str	r1, [r7, #8]
 8002b8e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b90:	2300      	movs	r3, #0
 8002b92:	617b      	str	r3, [r7, #20]
 8002b94:	e00a      	b.n	8002bac <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b96:	f3af 8000 	nop.w
 8002b9a:	4601      	mov	r1, r0
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	1c5a      	adds	r2, r3, #1
 8002ba0:	60ba      	str	r2, [r7, #8]
 8002ba2:	b2ca      	uxtb	r2, r1
 8002ba4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002ba6:	697b      	ldr	r3, [r7, #20]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	697a      	ldr	r2, [r7, #20]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	429a      	cmp	r2, r3
 8002bb2:	dbf0      	blt.n	8002b96 <_read+0x12>
  }

  return len;
 8002bb4:	687b      	ldr	r3, [r7, #4]
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3718      	adds	r7, #24
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b086      	sub	sp, #24
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	60f8      	str	r0, [r7, #12]
 8002bc6:	60b9      	str	r1, [r7, #8]
 8002bc8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bca:	2300      	movs	r3, #0
 8002bcc:	617b      	str	r3, [r7, #20]
 8002bce:	e009      	b.n	8002be4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	1c5a      	adds	r2, r3, #1
 8002bd4:	60ba      	str	r2, [r7, #8]
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	4618      	mov	r0, r3
 8002bda:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	3301      	adds	r3, #1
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	697a      	ldr	r2, [r7, #20]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	dbf1      	blt.n	8002bd0 <_write+0x12>
  }
  return len;
 8002bec:	687b      	ldr	r3, [r7, #4]
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3718      	adds	r7, #24
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <_close>:

int _close(int file)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c02:	4618      	mov	r0, r3
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c1e:	605a      	str	r2, [r3, #4]
  return 0;
 8002c20:	2300      	movs	r3, #0
}
 8002c22:	4618      	mov	r0, r3
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <_isatty>:

int _isatty(int file)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002c36:	2301      	movs	r3, #1
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b085      	sub	sp, #20
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	60f8      	str	r0, [r7, #12]
 8002c4c:	60b9      	str	r1, [r7, #8]
 8002c4e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c50:	2300      	movs	r3, #0
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3714      	adds	r7, #20
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c68:	4a14      	ldr	r2, [pc, #80]	@ (8002cbc <_sbrk+0x5c>)
 8002c6a:	4b15      	ldr	r3, [pc, #84]	@ (8002cc0 <_sbrk+0x60>)
 8002c6c:	1ad3      	subs	r3, r2, r3
 8002c6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c74:	4b13      	ldr	r3, [pc, #76]	@ (8002cc4 <_sbrk+0x64>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d102      	bne.n	8002c82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c7c:	4b11      	ldr	r3, [pc, #68]	@ (8002cc4 <_sbrk+0x64>)
 8002c7e:	4a12      	ldr	r2, [pc, #72]	@ (8002cc8 <_sbrk+0x68>)
 8002c80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c82:	4b10      	ldr	r3, [pc, #64]	@ (8002cc4 <_sbrk+0x64>)
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	4413      	add	r3, r2
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d207      	bcs.n	8002ca0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c90:	f004 f858 	bl	8006d44 <__errno>
 8002c94:	4603      	mov	r3, r0
 8002c96:	220c      	movs	r2, #12
 8002c98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c9a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c9e:	e009      	b.n	8002cb4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002ca0:	4b08      	ldr	r3, [pc, #32]	@ (8002cc4 <_sbrk+0x64>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ca6:	4b07      	ldr	r3, [pc, #28]	@ (8002cc4 <_sbrk+0x64>)
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	4413      	add	r3, r2
 8002cae:	4a05      	ldr	r2, [pc, #20]	@ (8002cc4 <_sbrk+0x64>)
 8002cb0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
}
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	3718      	adds	r7, #24
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}
 8002cbc:	20020000 	.word	0x20020000
 8002cc0:	00000400 	.word	0x00000400
 8002cc4:	20000840 	.word	0x20000840
 8002cc8:	20000998 	.word	0x20000998

08002ccc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cd0:	4b06      	ldr	r3, [pc, #24]	@ (8002cec <SystemInit+0x20>)
 8002cd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd6:	4a05      	ldr	r2, [pc, #20]	@ (8002cec <SystemInit+0x20>)
 8002cd8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002cdc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002cf0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002d28 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002cf4:	f7ff ffea 	bl	8002ccc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cf8:	480c      	ldr	r0, [pc, #48]	@ (8002d2c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002cfa:	490d      	ldr	r1, [pc, #52]	@ (8002d30 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002cfc:	4a0d      	ldr	r2, [pc, #52]	@ (8002d34 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002cfe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d00:	e002      	b.n	8002d08 <LoopCopyDataInit>

08002d02 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d02:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d04:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d06:	3304      	adds	r3, #4

08002d08 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d08:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d0a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d0c:	d3f9      	bcc.n	8002d02 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d0e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d38 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d10:	4c0a      	ldr	r4, [pc, #40]	@ (8002d3c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d12:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d14:	e001      	b.n	8002d1a <LoopFillZerobss>

08002d16 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d16:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d18:	3204      	adds	r2, #4

08002d1a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d1a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d1c:	d3fb      	bcc.n	8002d16 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d1e:	f004 f817 	bl	8006d50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d22:	f7fe ff69 	bl	8001bf8 <main>
  bx  lr    
 8002d26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d28:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d30:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002d34:	0800a8d8 	.word	0x0800a8d8
  ldr r2, =_sbss
 8002d38:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002d3c:	20000994 	.word	0x20000994

08002d40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d40:	e7fe      	b.n	8002d40 <ADC_IRQHandler>
	...

08002d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d48:	4b0e      	ldr	r3, [pc, #56]	@ (8002d84 <HAL_Init+0x40>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a0d      	ldr	r2, [pc, #52]	@ (8002d84 <HAL_Init+0x40>)
 8002d4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002d52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d54:	4b0b      	ldr	r3, [pc, #44]	@ (8002d84 <HAL_Init+0x40>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a0a      	ldr	r2, [pc, #40]	@ (8002d84 <HAL_Init+0x40>)
 8002d5a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002d5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d60:	4b08      	ldr	r3, [pc, #32]	@ (8002d84 <HAL_Init+0x40>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a07      	ldr	r2, [pc, #28]	@ (8002d84 <HAL_Init+0x40>)
 8002d66:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d6c:	2003      	movs	r0, #3
 8002d6e:	f000 fcfd 	bl	800376c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d72:	200f      	movs	r0, #15
 8002d74:	f000 f808 	bl	8002d88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d78:	f7ff fd4e 	bl	8002818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023c00 	.word	0x40023c00

08002d88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d90:	4b12      	ldr	r3, [pc, #72]	@ (8002ddc <HAL_InitTick+0x54>)
 8002d92:	681a      	ldr	r2, [r3, #0]
 8002d94:	4b12      	ldr	r3, [pc, #72]	@ (8002de0 <HAL_InitTick+0x58>)
 8002d96:	781b      	ldrb	r3, [r3, #0]
 8002d98:	4619      	mov	r1, r3
 8002d9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002da6:	4618      	mov	r0, r3
 8002da8:	f000 fd07 	bl	80037ba <HAL_SYSTICK_Config>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e00e      	b.n	8002dd4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	2b0f      	cmp	r3, #15
 8002dba:	d80a      	bhi.n	8002dd2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8002dc4:	f000 fcdd 	bl	8003782 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002dc8:	4a06      	ldr	r2, [pc, #24]	@ (8002de4 <HAL_InitTick+0x5c>)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	e000      	b.n	8002dd4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002dd2:	2301      	movs	r3, #1
}
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	3708      	adds	r7, #8
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bd80      	pop	{r7, pc}
 8002ddc:	20000000 	.word	0x20000000
 8002de0:	20000008 	.word	0x20000008
 8002de4:	20000004 	.word	0x20000004

08002de8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002de8:	b480      	push	{r7}
 8002dea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dec:	4b06      	ldr	r3, [pc, #24]	@ (8002e08 <HAL_IncTick+0x20>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	461a      	mov	r2, r3
 8002df2:	4b06      	ldr	r3, [pc, #24]	@ (8002e0c <HAL_IncTick+0x24>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4413      	add	r3, r2
 8002df8:	4a04      	ldr	r2, [pc, #16]	@ (8002e0c <HAL_IncTick+0x24>)
 8002dfa:	6013      	str	r3, [r2, #0]
}
 8002dfc:	bf00      	nop
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
 8002e06:	bf00      	nop
 8002e08:	20000008 	.word	0x20000008
 8002e0c:	20000844 	.word	0x20000844

08002e10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e10:	b480      	push	{r7}
 8002e12:	af00      	add	r7, sp, #0
  return uwTick;
 8002e14:	4b03      	ldr	r3, [pc, #12]	@ (8002e24 <HAL_GetTick+0x14>)
 8002e16:	681b      	ldr	r3, [r3, #0]
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
 8002e22:	bf00      	nop
 8002e24:	20000844 	.word	0x20000844

08002e28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b084      	sub	sp, #16
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e30:	f7ff ffee 	bl	8002e10 <HAL_GetTick>
 8002e34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e40:	d005      	beq.n	8002e4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e42:	4b0a      	ldr	r3, [pc, #40]	@ (8002e6c <HAL_Delay+0x44>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	461a      	mov	r2, r3
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e4e:	bf00      	nop
 8002e50:	f7ff ffde 	bl	8002e10 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68bb      	ldr	r3, [r7, #8]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d8f7      	bhi.n	8002e50 <HAL_Delay+0x28>
  {
  }
}
 8002e60:	bf00      	nop
 8002e62:	bf00      	nop
 8002e64:	3710      	adds	r7, #16
 8002e66:	46bd      	mov	sp, r7
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000008 	.word	0x20000008

08002e70 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d101      	bne.n	8002e86 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e82:	2301      	movs	r3, #1
 8002e84:	e033      	b.n	8002eee <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d109      	bne.n	8002ea2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	f7ff fcea 	bl	8002868 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2200      	movs	r2, #0
 8002e98:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ea6:	f003 0310 	and.w	r3, r3, #16
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d118      	bne.n	8002ee0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002eb6:	f023 0302 	bic.w	r3, r3, #2
 8002eba:	f043 0202 	orr.w	r2, r3, #2
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f000 faa4 	bl	8003410 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ed2:	f023 0303 	bic.w	r3, r3, #3
 8002ed6:	f043 0201 	orr.w	r2, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	641a      	str	r2, [r3, #64]	@ 0x40
 8002ede:	e001      	b.n	8002ee4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002eec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3710      	adds	r7, #16
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002f00:	2300      	movs	r3, #0
 8002f02:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d101      	bne.n	8002f12 <HAL_ADC_Start+0x1a>
 8002f0e:	2302      	movs	r3, #2
 8002f10:	e0b2      	b.n	8003078 <HAL_ADC_Start+0x180>
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2201      	movs	r2, #1
 8002f16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689b      	ldr	r3, [r3, #8]
 8002f20:	f003 0301 	and.w	r3, r3, #1
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d018      	beq.n	8002f5a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f042 0201 	orr.w	r2, r2, #1
 8002f36:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002f38:	4b52      	ldr	r3, [pc, #328]	@ (8003084 <HAL_ADC_Start+0x18c>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4a52      	ldr	r2, [pc, #328]	@ (8003088 <HAL_ADC_Start+0x190>)
 8002f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f42:	0c9a      	lsrs	r2, r3, #18
 8002f44:	4613      	mov	r3, r2
 8002f46:	005b      	lsls	r3, r3, #1
 8002f48:	4413      	add	r3, r2
 8002f4a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002f4c:	e002      	b.n	8002f54 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002f4e:	68bb      	ldr	r3, [r7, #8]
 8002f50:	3b01      	subs	r3, #1
 8002f52:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d1f9      	bne.n	8002f4e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	2b01      	cmp	r3, #1
 8002f66:	d17a      	bne.n	800305e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002f70:	f023 0301 	bic.w	r3, r3, #1
 8002f74:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d007      	beq.n	8002f9a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f8e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002f92:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f9e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002fa2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002fa6:	d106      	bne.n	8002fb6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fac:	f023 0206 	bic.w	r2, r3, #6
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	645a      	str	r2, [r3, #68]	@ 0x44
 8002fb4:	e002      	b.n	8002fbc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2200      	movs	r2, #0
 8002fba:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fc4:	4b31      	ldr	r3, [pc, #196]	@ (800308c <HAL_ADC_Start+0x194>)
 8002fc6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002fd0:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	f003 031f 	and.w	r3, r3, #31
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d12a      	bne.n	8003034 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a2b      	ldr	r2, [pc, #172]	@ (8003090 <HAL_ADC_Start+0x198>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d015      	beq.n	8003014 <HAL_ADC_Start+0x11c>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a29      	ldr	r2, [pc, #164]	@ (8003094 <HAL_ADC_Start+0x19c>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d105      	bne.n	8002ffe <HAL_ADC_Start+0x106>
 8002ff2:	4b26      	ldr	r3, [pc, #152]	@ (800308c <HAL_ADC_Start+0x194>)
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f003 031f 	and.w	r3, r3, #31
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00a      	beq.n	8003014 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a25      	ldr	r2, [pc, #148]	@ (8003098 <HAL_ADC_Start+0x1a0>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d136      	bne.n	8003076 <HAL_ADC_Start+0x17e>
 8003008:	4b20      	ldr	r3, [pc, #128]	@ (800308c <HAL_ADC_Start+0x194>)
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f003 0310 	and.w	r3, r3, #16
 8003010:	2b00      	cmp	r3, #0
 8003012:	d130      	bne.n	8003076 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800301e:	2b00      	cmp	r3, #0
 8003020:	d129      	bne.n	8003076 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689a      	ldr	r2, [r3, #8]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8003030:	609a      	str	r2, [r3, #8]
 8003032:	e020      	b.n	8003076 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4a15      	ldr	r2, [pc, #84]	@ (8003090 <HAL_ADC_Start+0x198>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d11b      	bne.n	8003076 <HAL_ADC_Start+0x17e>
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003048:	2b00      	cmp	r3, #0
 800304a:	d114      	bne.n	8003076 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	689a      	ldr	r2, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 800305a:	609a      	str	r2, [r3, #8]
 800305c:	e00b      	b.n	8003076 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003062:	f043 0210 	orr.w	r2, r3, #16
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800306e:	f043 0201 	orr.w	r2, r3, #1
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8003076:	2300      	movs	r3, #0
}
 8003078:	4618      	mov	r0, r3
 800307a:	3714      	adds	r7, #20
 800307c:	46bd      	mov	sp, r7
 800307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003082:	4770      	bx	lr
 8003084:	20000000 	.word	0x20000000
 8003088:	431bde83 	.word	0x431bde83
 800308c:	40012300 	.word	0x40012300
 8003090:	40012000 	.word	0x40012000
 8003094:	40012100 	.word	0x40012100
 8003098:	40012200 	.word	0x40012200

0800309c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b084      	sub	sp, #16
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
 80030a4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030a6:	2300      	movs	r3, #0
 80030a8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689b      	ldr	r3, [r3, #8]
 80030b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80030b4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030b8:	d113      	bne.n	80030e2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80030c4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030c8:	d10b      	bne.n	80030e2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ce:	f043 0220 	orr.w	r2, r3, #32
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2200      	movs	r2, #0
 80030da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e063      	b.n	80031aa <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80030e2:	f7ff fe95 	bl	8002e10 <HAL_GetTick>
 80030e6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80030e8:	e021      	b.n	800312e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f0:	d01d      	beq.n	800312e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d007      	beq.n	8003108 <HAL_ADC_PollForConversion+0x6c>
 80030f8:	f7ff fe8a 	bl	8002e10 <HAL_GetTick>
 80030fc:	4602      	mov	r2, r0
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	1ad3      	subs	r3, r2, r3
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d212      	bcs.n	800312e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0302 	and.w	r3, r3, #2
 8003112:	2b02      	cmp	r3, #2
 8003114:	d00b      	beq.n	800312e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800311a:	f043 0204 	orr.w	r2, r3, #4
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2200      	movs	r2, #0
 8003126:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e03d      	b.n	80031aa <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	f003 0302 	and.w	r3, r3, #2
 8003138:	2b02      	cmp	r3, #2
 800313a:	d1d6      	bne.n	80030ea <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f06f 0212 	mvn.w	r2, #18
 8003144:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800314a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	689b      	ldr	r3, [r3, #8]
 8003158:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800315c:	2b00      	cmp	r3, #0
 800315e:	d123      	bne.n	80031a8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003164:	2b00      	cmp	r3, #0
 8003166:	d11f      	bne.n	80031a8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800316e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003172:	2b00      	cmp	r3, #0
 8003174:	d006      	beq.n	8003184 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	689b      	ldr	r3, [r3, #8]
 800317c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003180:	2b00      	cmp	r3, #0
 8003182:	d111      	bne.n	80031a8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003188:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003194:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003198:	2b00      	cmp	r3, #0
 800319a:	d105      	bne.n	80031a8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a0:	f043 0201 	orr.w	r2, r3, #1
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80031a8:	2300      	movs	r3, #0
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3710      	adds	r7, #16
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80031b2:	b480      	push	{r7}
 80031b4:	b083      	sub	sp, #12
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b085      	sub	sp, #20
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80031d6:	2300      	movs	r3, #0
 80031d8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d101      	bne.n	80031e8 <HAL_ADC_ConfigChannel+0x1c>
 80031e4:	2302      	movs	r3, #2
 80031e6:	e105      	b.n	80033f4 <HAL_ADC_ConfigChannel+0x228>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	2201      	movs	r2, #1
 80031ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	2b09      	cmp	r3, #9
 80031f6:	d925      	bls.n	8003244 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68d9      	ldr	r1, [r3, #12]
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	b29b      	uxth	r3, r3
 8003204:	461a      	mov	r2, r3
 8003206:	4613      	mov	r3, r2
 8003208:	005b      	lsls	r3, r3, #1
 800320a:	4413      	add	r3, r2
 800320c:	3b1e      	subs	r3, #30
 800320e:	2207      	movs	r2, #7
 8003210:	fa02 f303 	lsl.w	r3, r2, r3
 8003214:	43da      	mvns	r2, r3
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	400a      	ands	r2, r1
 800321c:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	68d9      	ldr	r1, [r3, #12]
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	b29b      	uxth	r3, r3
 800322e:	4618      	mov	r0, r3
 8003230:	4603      	mov	r3, r0
 8003232:	005b      	lsls	r3, r3, #1
 8003234:	4403      	add	r3, r0
 8003236:	3b1e      	subs	r3, #30
 8003238:	409a      	lsls	r2, r3
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	e022      	b.n	800328a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	6919      	ldr	r1, [r3, #16]
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	b29b      	uxth	r3, r3
 8003250:	461a      	mov	r2, r3
 8003252:	4613      	mov	r3, r2
 8003254:	005b      	lsls	r3, r3, #1
 8003256:	4413      	add	r3, r2
 8003258:	2207      	movs	r2, #7
 800325a:	fa02 f303 	lsl.w	r3, r2, r3
 800325e:	43da      	mvns	r2, r3
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	400a      	ands	r2, r1
 8003266:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	6919      	ldr	r1, [r3, #16]
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	689a      	ldr	r2, [r3, #8]
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	b29b      	uxth	r3, r3
 8003278:	4618      	mov	r0, r3
 800327a:	4603      	mov	r3, r0
 800327c:	005b      	lsls	r3, r3, #1
 800327e:	4403      	add	r3, r0
 8003280:	409a      	lsls	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	430a      	orrs	r2, r1
 8003288:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b06      	cmp	r3, #6
 8003290:	d824      	bhi.n	80032dc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	685a      	ldr	r2, [r3, #4]
 800329c:	4613      	mov	r3, r2
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	4413      	add	r3, r2
 80032a2:	3b05      	subs	r3, #5
 80032a4:	221f      	movs	r2, #31
 80032a6:	fa02 f303 	lsl.w	r3, r2, r3
 80032aa:	43da      	mvns	r2, r3
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	400a      	ands	r2, r1
 80032b2:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80032ba:	683b      	ldr	r3, [r7, #0]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	b29b      	uxth	r3, r3
 80032c0:	4618      	mov	r0, r3
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	685a      	ldr	r2, [r3, #4]
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	3b05      	subs	r3, #5
 80032ce:	fa00 f203 	lsl.w	r2, r0, r3
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	430a      	orrs	r2, r1
 80032d8:	635a      	str	r2, [r3, #52]	@ 0x34
 80032da:	e04c      	b.n	8003376 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	2b0c      	cmp	r3, #12
 80032e2:	d824      	bhi.n	800332e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	685a      	ldr	r2, [r3, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	4413      	add	r3, r2
 80032f4:	3b23      	subs	r3, #35	@ 0x23
 80032f6:	221f      	movs	r2, #31
 80032f8:	fa02 f303 	lsl.w	r3, r2, r3
 80032fc:	43da      	mvns	r2, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	400a      	ands	r2, r1
 8003304:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	b29b      	uxth	r3, r3
 8003312:	4618      	mov	r0, r3
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	685a      	ldr	r2, [r3, #4]
 8003318:	4613      	mov	r3, r2
 800331a:	009b      	lsls	r3, r3, #2
 800331c:	4413      	add	r3, r2
 800331e:	3b23      	subs	r3, #35	@ 0x23
 8003320:	fa00 f203 	lsl.w	r2, r0, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	430a      	orrs	r2, r1
 800332a:	631a      	str	r2, [r3, #48]	@ 0x30
 800332c:	e023      	b.n	8003376 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	685a      	ldr	r2, [r3, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	3b41      	subs	r3, #65	@ 0x41
 8003340:	221f      	movs	r2, #31
 8003342:	fa02 f303 	lsl.w	r3, r2, r3
 8003346:	43da      	mvns	r2, r3
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	400a      	ands	r2, r1
 800334e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	b29b      	uxth	r3, r3
 800335c:	4618      	mov	r0, r3
 800335e:	683b      	ldr	r3, [r7, #0]
 8003360:	685a      	ldr	r2, [r3, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	4413      	add	r3, r2
 8003368:	3b41      	subs	r3, #65	@ 0x41
 800336a:	fa00 f203 	lsl.w	r2, r0, r3
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	430a      	orrs	r2, r1
 8003374:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003376:	4b22      	ldr	r3, [pc, #136]	@ (8003400 <HAL_ADC_ConfigChannel+0x234>)
 8003378:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a21      	ldr	r2, [pc, #132]	@ (8003404 <HAL_ADC_ConfigChannel+0x238>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d109      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x1cc>
 8003384:	683b      	ldr	r3, [r7, #0]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2b12      	cmp	r3, #18
 800338a:	d105      	bne.n	8003398 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a19      	ldr	r2, [pc, #100]	@ (8003404 <HAL_ADC_ConfigChannel+0x238>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d123      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x21e>
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	2b10      	cmp	r3, #16
 80033a8:	d003      	beq.n	80033b2 <HAL_ADC_ConfigChannel+0x1e6>
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	2b11      	cmp	r3, #17
 80033b0:	d11b      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	2b10      	cmp	r3, #16
 80033c4:	d111      	bne.n	80033ea <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80033c6:	4b10      	ldr	r3, [pc, #64]	@ (8003408 <HAL_ADC_ConfigChannel+0x23c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a10      	ldr	r2, [pc, #64]	@ (800340c <HAL_ADC_ConfigChannel+0x240>)
 80033cc:	fba2 2303 	umull	r2, r3, r2, r3
 80033d0:	0c9a      	lsrs	r2, r3, #18
 80033d2:	4613      	mov	r3, r2
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	4413      	add	r3, r2
 80033d8:	005b      	lsls	r3, r3, #1
 80033da:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80033dc:	e002      	b.n	80033e4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	3b01      	subs	r3, #1
 80033e2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d1f9      	bne.n	80033de <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	2200      	movs	r2, #0
 80033ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80033f2:	2300      	movs	r3, #0
}
 80033f4:	4618      	mov	r0, r3
 80033f6:	3714      	adds	r7, #20
 80033f8:	46bd      	mov	sp, r7
 80033fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fe:	4770      	bx	lr
 8003400:	40012300 	.word	0x40012300
 8003404:	40012000 	.word	0x40012000
 8003408:	20000000 	.word	0x20000000
 800340c:	431bde83 	.word	0x431bde83

08003410 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003410:	b480      	push	{r7}
 8003412:	b085      	sub	sp, #20
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003418:	4b79      	ldr	r3, [pc, #484]	@ (8003600 <ADC_Init+0x1f0>)
 800341a:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	685b      	ldr	r3, [r3, #4]
 8003430:	431a      	orrs	r2, r3
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	685a      	ldr	r2, [r3, #4]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003444:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6859      	ldr	r1, [r3, #4]
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	691b      	ldr	r3, [r3, #16]
 8003450:	021a      	lsls	r2, r3, #8
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	430a      	orrs	r2, r1
 8003458:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	685a      	ldr	r2, [r3, #4]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003468:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6859      	ldr	r1, [r3, #4]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	689a      	ldr	r2, [r3, #8]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	430a      	orrs	r2, r1
 800347a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	689a      	ldr	r2, [r3, #8]
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800348a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	6899      	ldr	r1, [r3, #8]
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	68da      	ldr	r2, [r3, #12]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	430a      	orrs	r2, r1
 800349c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034a2:	4a58      	ldr	r2, [pc, #352]	@ (8003604 <ADC_Init+0x1f4>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d022      	beq.n	80034ee <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689a      	ldr	r2, [r3, #8]
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034b6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	6899      	ldr	r1, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	430a      	orrs	r2, r1
 80034c8:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689a      	ldr	r2, [r3, #8]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80034d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6899      	ldr	r1, [r3, #8]
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	430a      	orrs	r2, r1
 80034ea:	609a      	str	r2, [r3, #8]
 80034ec:	e00f      	b.n	800350e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80034fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800350c:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	689a      	ldr	r2, [r3, #8]
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f022 0202 	bic.w	r2, r2, #2
 800351c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6899      	ldr	r1, [r3, #8]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	7e1b      	ldrb	r3, [r3, #24]
 8003528:	005a      	lsls	r2, r3, #1
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	430a      	orrs	r2, r1
 8003530:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d01b      	beq.n	8003574 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	685a      	ldr	r2, [r3, #4]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800354a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800355a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6859      	ldr	r1, [r3, #4]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003566:	3b01      	subs	r3, #1
 8003568:	035a      	lsls	r2, r3, #13
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	430a      	orrs	r2, r1
 8003570:	605a      	str	r2, [r3, #4]
 8003572:	e007      	b.n	8003584 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003582:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003592:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	3b01      	subs	r3, #1
 80035a0:	051a      	lsls	r2, r3, #20
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	689a      	ldr	r2, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80035b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6899      	ldr	r1, [r3, #8]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80035c6:	025a      	lsls	r2, r3, #9
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	689a      	ldr	r2, [r3, #8]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035de:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	6899      	ldr	r1, [r3, #8]
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
 80035ea:	029a      	lsls	r2, r3, #10
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	609a      	str	r2, [r3, #8]
}
 80035f4:	bf00      	nop
 80035f6:	3714      	adds	r7, #20
 80035f8:	46bd      	mov	sp, r7
 80035fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fe:	4770      	bx	lr
 8003600:	40012300 	.word	0x40012300
 8003604:	0f000001 	.word	0x0f000001

08003608 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003608:	b480      	push	{r7}
 800360a:	b085      	sub	sp, #20
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003618:	4b0c      	ldr	r3, [pc, #48]	@ (800364c <__NVIC_SetPriorityGrouping+0x44>)
 800361a:	68db      	ldr	r3, [r3, #12]
 800361c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800361e:	68ba      	ldr	r2, [r7, #8]
 8003620:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003624:	4013      	ands	r3, r2
 8003626:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003630:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003638:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800363a:	4a04      	ldr	r2, [pc, #16]	@ (800364c <__NVIC_SetPriorityGrouping+0x44>)
 800363c:	68bb      	ldr	r3, [r7, #8]
 800363e:	60d3      	str	r3, [r2, #12]
}
 8003640:	bf00      	nop
 8003642:	3714      	adds	r7, #20
 8003644:	46bd      	mov	sp, r7
 8003646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364a:	4770      	bx	lr
 800364c:	e000ed00 	.word	0xe000ed00

08003650 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003654:	4b04      	ldr	r3, [pc, #16]	@ (8003668 <__NVIC_GetPriorityGrouping+0x18>)
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	0a1b      	lsrs	r3, r3, #8
 800365a:	f003 0307 	and.w	r3, r3, #7
}
 800365e:	4618      	mov	r0, r3
 8003660:	46bd      	mov	sp, r7
 8003662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003666:	4770      	bx	lr
 8003668:	e000ed00 	.word	0xe000ed00

0800366c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800366c:	b480      	push	{r7}
 800366e:	b083      	sub	sp, #12
 8003670:	af00      	add	r7, sp, #0
 8003672:	4603      	mov	r3, r0
 8003674:	6039      	str	r1, [r7, #0]
 8003676:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003678:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800367c:	2b00      	cmp	r3, #0
 800367e:	db0a      	blt.n	8003696 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	b2da      	uxtb	r2, r3
 8003684:	490c      	ldr	r1, [pc, #48]	@ (80036b8 <__NVIC_SetPriority+0x4c>)
 8003686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800368a:	0112      	lsls	r2, r2, #4
 800368c:	b2d2      	uxtb	r2, r2
 800368e:	440b      	add	r3, r1
 8003690:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003694:	e00a      	b.n	80036ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	b2da      	uxtb	r2, r3
 800369a:	4908      	ldr	r1, [pc, #32]	@ (80036bc <__NVIC_SetPriority+0x50>)
 800369c:	79fb      	ldrb	r3, [r7, #7]
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	3b04      	subs	r3, #4
 80036a4:	0112      	lsls	r2, r2, #4
 80036a6:	b2d2      	uxtb	r2, r2
 80036a8:	440b      	add	r3, r1
 80036aa:	761a      	strb	r2, [r3, #24]
}
 80036ac:	bf00      	nop
 80036ae:	370c      	adds	r7, #12
 80036b0:	46bd      	mov	sp, r7
 80036b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b6:	4770      	bx	lr
 80036b8:	e000e100 	.word	0xe000e100
 80036bc:	e000ed00 	.word	0xe000ed00

080036c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80036c0:	b480      	push	{r7}
 80036c2:	b089      	sub	sp, #36	@ 0x24
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f003 0307 	and.w	r3, r3, #7
 80036d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f1c3 0307 	rsb	r3, r3, #7
 80036da:	2b04      	cmp	r3, #4
 80036dc:	bf28      	it	cs
 80036de:	2304      	movcs	r3, #4
 80036e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	3304      	adds	r3, #4
 80036e6:	2b06      	cmp	r3, #6
 80036e8:	d902      	bls.n	80036f0 <NVIC_EncodePriority+0x30>
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	3b03      	subs	r3, #3
 80036ee:	e000      	b.n	80036f2 <NVIC_EncodePriority+0x32>
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80036f4:	f04f 32ff 	mov.w	r2, #4294967295
 80036f8:	69bb      	ldr	r3, [r7, #24]
 80036fa:	fa02 f303 	lsl.w	r3, r2, r3
 80036fe:	43da      	mvns	r2, r3
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	401a      	ands	r2, r3
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003708:	f04f 31ff 	mov.w	r1, #4294967295
 800370c:	697b      	ldr	r3, [r7, #20]
 800370e:	fa01 f303 	lsl.w	r3, r1, r3
 8003712:	43d9      	mvns	r1, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003718:	4313      	orrs	r3, r2
         );
}
 800371a:	4618      	mov	r0, r3
 800371c:	3724      	adds	r7, #36	@ 0x24
 800371e:	46bd      	mov	sp, r7
 8003720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003724:	4770      	bx	lr
	...

08003728 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	b082      	sub	sp, #8
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	3b01      	subs	r3, #1
 8003734:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003738:	d301      	bcc.n	800373e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800373a:	2301      	movs	r3, #1
 800373c:	e00f      	b.n	800375e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800373e:	4a0a      	ldr	r2, [pc, #40]	@ (8003768 <SysTick_Config+0x40>)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	3b01      	subs	r3, #1
 8003744:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003746:	210f      	movs	r1, #15
 8003748:	f04f 30ff 	mov.w	r0, #4294967295
 800374c:	f7ff ff8e 	bl	800366c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003750:	4b05      	ldr	r3, [pc, #20]	@ (8003768 <SysTick_Config+0x40>)
 8003752:	2200      	movs	r2, #0
 8003754:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003756:	4b04      	ldr	r3, [pc, #16]	@ (8003768 <SysTick_Config+0x40>)
 8003758:	2207      	movs	r2, #7
 800375a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800375c:	2300      	movs	r3, #0
}
 800375e:	4618      	mov	r0, r3
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	e000e010 	.word	0xe000e010

0800376c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003774:	6878      	ldr	r0, [r7, #4]
 8003776:	f7ff ff47 	bl	8003608 <__NVIC_SetPriorityGrouping>
}
 800377a:	bf00      	nop
 800377c:	3708      	adds	r7, #8
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}

08003782 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003782:	b580      	push	{r7, lr}
 8003784:	b086      	sub	sp, #24
 8003786:	af00      	add	r7, sp, #0
 8003788:	4603      	mov	r3, r0
 800378a:	60b9      	str	r1, [r7, #8]
 800378c:	607a      	str	r2, [r7, #4]
 800378e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003790:	2300      	movs	r3, #0
 8003792:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003794:	f7ff ff5c 	bl	8003650 <__NVIC_GetPriorityGrouping>
 8003798:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	6978      	ldr	r0, [r7, #20]
 80037a0:	f7ff ff8e 	bl	80036c0 <NVIC_EncodePriority>
 80037a4:	4602      	mov	r2, r0
 80037a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80037aa:	4611      	mov	r1, r2
 80037ac:	4618      	mov	r0, r3
 80037ae:	f7ff ff5d 	bl	800366c <__NVIC_SetPriority>
}
 80037b2:	bf00      	nop
 80037b4:	3718      	adds	r7, #24
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}

080037ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80037ba:	b580      	push	{r7, lr}
 80037bc:	b082      	sub	sp, #8
 80037be:	af00      	add	r7, sp, #0
 80037c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff ffb0 	bl	8003728 <SysTick_Config>
 80037c8:	4603      	mov	r3, r0
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3708      	adds	r7, #8
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}
	...

080037d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037d4:	b480      	push	{r7}
 80037d6:	b089      	sub	sp, #36	@ 0x24
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80037de:	2300      	movs	r3, #0
 80037e0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80037e2:	2300      	movs	r3, #0
 80037e4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80037ea:	2300      	movs	r3, #0
 80037ec:	61fb      	str	r3, [r7, #28]
 80037ee:	e16b      	b.n	8003ac8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80037f0:	2201      	movs	r2, #1
 80037f2:	69fb      	ldr	r3, [r7, #28]
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4013      	ands	r3, r2
 8003802:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	429a      	cmp	r2, r3
 800380a:	f040 815a 	bne.w	8003ac2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	f003 0303 	and.w	r3, r3, #3
 8003816:	2b01      	cmp	r3, #1
 8003818:	d005      	beq.n	8003826 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003822:	2b02      	cmp	r3, #2
 8003824:	d130      	bne.n	8003888 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800382c:	69fb      	ldr	r3, [r7, #28]
 800382e:	005b      	lsls	r3, r3, #1
 8003830:	2203      	movs	r2, #3
 8003832:	fa02 f303 	lsl.w	r3, r2, r3
 8003836:	43db      	mvns	r3, r3
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	4013      	ands	r3, r2
 800383c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800383e:	683b      	ldr	r3, [r7, #0]
 8003840:	68da      	ldr	r2, [r3, #12]
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	005b      	lsls	r3, r3, #1
 8003846:	fa02 f303 	lsl.w	r3, r2, r3
 800384a:	69ba      	ldr	r2, [r7, #24]
 800384c:	4313      	orrs	r3, r2
 800384e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	69ba      	ldr	r2, [r7, #24]
 8003854:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800385c:	2201      	movs	r2, #1
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4013      	ands	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	685b      	ldr	r3, [r3, #4]
 8003870:	091b      	lsrs	r3, r3, #4
 8003872:	f003 0201 	and.w	r2, r3, #1
 8003876:	69fb      	ldr	r3, [r7, #28]
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	69ba      	ldr	r2, [r7, #24]
 8003886:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 0303 	and.w	r3, r3, #3
 8003890:	2b03      	cmp	r3, #3
 8003892:	d017      	beq.n	80038c4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	005b      	lsls	r3, r3, #1
 800389e:	2203      	movs	r2, #3
 80038a0:	fa02 f303 	lsl.w	r3, r2, r3
 80038a4:	43db      	mvns	r3, r3
 80038a6:	69ba      	ldr	r2, [r7, #24]
 80038a8:	4013      	ands	r3, r2
 80038aa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f003 0303 	and.w	r3, r3, #3
 80038cc:	2b02      	cmp	r3, #2
 80038ce:	d123      	bne.n	8003918 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038d0:	69fb      	ldr	r3, [r7, #28]
 80038d2:	08da      	lsrs	r2, r3, #3
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	3208      	adds	r2, #8
 80038d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	009b      	lsls	r3, r3, #2
 80038e6:	220f      	movs	r2, #15
 80038e8:	fa02 f303 	lsl.w	r3, r2, r3
 80038ec:	43db      	mvns	r3, r3
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	4013      	ands	r3, r2
 80038f2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	691a      	ldr	r2, [r3, #16]
 80038f8:	69fb      	ldr	r3, [r7, #28]
 80038fa:	f003 0307 	and.w	r3, r3, #7
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	fa02 f303 	lsl.w	r3, r2, r3
 8003904:	69ba      	ldr	r2, [r7, #24]
 8003906:	4313      	orrs	r3, r2
 8003908:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	08da      	lsrs	r2, r3, #3
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	3208      	adds	r2, #8
 8003912:	69b9      	ldr	r1, [r7, #24]
 8003914:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	005b      	lsls	r3, r3, #1
 8003922:	2203      	movs	r2, #3
 8003924:	fa02 f303 	lsl.w	r3, r2, r3
 8003928:	43db      	mvns	r3, r3
 800392a:	69ba      	ldr	r2, [r7, #24]
 800392c:	4013      	ands	r3, r2
 800392e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f003 0203 	and.w	r2, r3, #3
 8003938:	69fb      	ldr	r3, [r7, #28]
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	fa02 f303 	lsl.w	r3, r2, r3
 8003940:	69ba      	ldr	r2, [r7, #24]
 8003942:	4313      	orrs	r3, r2
 8003944:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69ba      	ldr	r2, [r7, #24]
 800394a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	685b      	ldr	r3, [r3, #4]
 8003950:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 80b4 	beq.w	8003ac2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800395a:	2300      	movs	r3, #0
 800395c:	60fb      	str	r3, [r7, #12]
 800395e:	4b60      	ldr	r3, [pc, #384]	@ (8003ae0 <HAL_GPIO_Init+0x30c>)
 8003960:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003962:	4a5f      	ldr	r2, [pc, #380]	@ (8003ae0 <HAL_GPIO_Init+0x30c>)
 8003964:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003968:	6453      	str	r3, [r2, #68]	@ 0x44
 800396a:	4b5d      	ldr	r3, [pc, #372]	@ (8003ae0 <HAL_GPIO_Init+0x30c>)
 800396c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800396e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003972:	60fb      	str	r3, [r7, #12]
 8003974:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003976:	4a5b      	ldr	r2, [pc, #364]	@ (8003ae4 <HAL_GPIO_Init+0x310>)
 8003978:	69fb      	ldr	r3, [r7, #28]
 800397a:	089b      	lsrs	r3, r3, #2
 800397c:	3302      	adds	r3, #2
 800397e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003982:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003984:	69fb      	ldr	r3, [r7, #28]
 8003986:	f003 0303 	and.w	r3, r3, #3
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	220f      	movs	r2, #15
 800398e:	fa02 f303 	lsl.w	r3, r2, r3
 8003992:	43db      	mvns	r3, r3
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	4013      	ands	r3, r2
 8003998:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	4a52      	ldr	r2, [pc, #328]	@ (8003ae8 <HAL_GPIO_Init+0x314>)
 800399e:	4293      	cmp	r3, r2
 80039a0:	d02b      	beq.n	80039fa <HAL_GPIO_Init+0x226>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a51      	ldr	r2, [pc, #324]	@ (8003aec <HAL_GPIO_Init+0x318>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d025      	beq.n	80039f6 <HAL_GPIO_Init+0x222>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a50      	ldr	r2, [pc, #320]	@ (8003af0 <HAL_GPIO_Init+0x31c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d01f      	beq.n	80039f2 <HAL_GPIO_Init+0x21e>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a4f      	ldr	r2, [pc, #316]	@ (8003af4 <HAL_GPIO_Init+0x320>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d019      	beq.n	80039ee <HAL_GPIO_Init+0x21a>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a4e      	ldr	r2, [pc, #312]	@ (8003af8 <HAL_GPIO_Init+0x324>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d013      	beq.n	80039ea <HAL_GPIO_Init+0x216>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a4d      	ldr	r2, [pc, #308]	@ (8003afc <HAL_GPIO_Init+0x328>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d00d      	beq.n	80039e6 <HAL_GPIO_Init+0x212>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a4c      	ldr	r2, [pc, #304]	@ (8003b00 <HAL_GPIO_Init+0x32c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d007      	beq.n	80039e2 <HAL_GPIO_Init+0x20e>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a4b      	ldr	r2, [pc, #300]	@ (8003b04 <HAL_GPIO_Init+0x330>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d101      	bne.n	80039de <HAL_GPIO_Init+0x20a>
 80039da:	2307      	movs	r3, #7
 80039dc:	e00e      	b.n	80039fc <HAL_GPIO_Init+0x228>
 80039de:	2308      	movs	r3, #8
 80039e0:	e00c      	b.n	80039fc <HAL_GPIO_Init+0x228>
 80039e2:	2306      	movs	r3, #6
 80039e4:	e00a      	b.n	80039fc <HAL_GPIO_Init+0x228>
 80039e6:	2305      	movs	r3, #5
 80039e8:	e008      	b.n	80039fc <HAL_GPIO_Init+0x228>
 80039ea:	2304      	movs	r3, #4
 80039ec:	e006      	b.n	80039fc <HAL_GPIO_Init+0x228>
 80039ee:	2303      	movs	r3, #3
 80039f0:	e004      	b.n	80039fc <HAL_GPIO_Init+0x228>
 80039f2:	2302      	movs	r3, #2
 80039f4:	e002      	b.n	80039fc <HAL_GPIO_Init+0x228>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <HAL_GPIO_Init+0x228>
 80039fa:	2300      	movs	r3, #0
 80039fc:	69fa      	ldr	r2, [r7, #28]
 80039fe:	f002 0203 	and.w	r2, r2, #3
 8003a02:	0092      	lsls	r2, r2, #2
 8003a04:	4093      	lsls	r3, r2
 8003a06:	69ba      	ldr	r2, [r7, #24]
 8003a08:	4313      	orrs	r3, r2
 8003a0a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a0c:	4935      	ldr	r1, [pc, #212]	@ (8003ae4 <HAL_GPIO_Init+0x310>)
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	089b      	lsrs	r3, r3, #2
 8003a12:	3302      	adds	r3, #2
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003a1a:	4b3b      	ldr	r3, [pc, #236]	@ (8003b08 <HAL_GPIO_Init+0x334>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	43db      	mvns	r3, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4013      	ands	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	685b      	ldr	r3, [r3, #4]
 8003a2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003a36:	69ba      	ldr	r2, [r7, #24]
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	4313      	orrs	r3, r2
 8003a3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a3e:	4a32      	ldr	r2, [pc, #200]	@ (8003b08 <HAL_GPIO_Init+0x334>)
 8003a40:	69bb      	ldr	r3, [r7, #24]
 8003a42:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a44:	4b30      	ldr	r3, [pc, #192]	@ (8003b08 <HAL_GPIO_Init+0x334>)
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a4a:	693b      	ldr	r3, [r7, #16]
 8003a4c:	43db      	mvns	r3, r3
 8003a4e:	69ba      	ldr	r2, [r7, #24]
 8003a50:	4013      	ands	r3, r2
 8003a52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a54:	683b      	ldr	r3, [r7, #0]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d003      	beq.n	8003a68 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a68:	4a27      	ldr	r2, [pc, #156]	@ (8003b08 <HAL_GPIO_Init+0x334>)
 8003a6a:	69bb      	ldr	r3, [r7, #24]
 8003a6c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003a6e:	4b26      	ldr	r3, [pc, #152]	@ (8003b08 <HAL_GPIO_Init+0x334>)
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	43db      	mvns	r3, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	685b      	ldr	r3, [r3, #4]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003a8a:	69ba      	ldr	r2, [r7, #24]
 8003a8c:	693b      	ldr	r3, [r7, #16]
 8003a8e:	4313      	orrs	r3, r2
 8003a90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003a92:	4a1d      	ldr	r2, [pc, #116]	@ (8003b08 <HAL_GPIO_Init+0x334>)
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003a98:	4b1b      	ldr	r3, [pc, #108]	@ (8003b08 <HAL_GPIO_Init+0x334>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a9e:	693b      	ldr	r3, [r7, #16]
 8003aa0:	43db      	mvns	r3, r3
 8003aa2:	69ba      	ldr	r2, [r7, #24]
 8003aa4:	4013      	ands	r3, r2
 8003aa6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d003      	beq.n	8003abc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	693b      	ldr	r3, [r7, #16]
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003abc:	4a12      	ldr	r2, [pc, #72]	@ (8003b08 <HAL_GPIO_Init+0x334>)
 8003abe:	69bb      	ldr	r3, [r7, #24]
 8003ac0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	61fb      	str	r3, [r7, #28]
 8003ac8:	69fb      	ldr	r3, [r7, #28]
 8003aca:	2b0f      	cmp	r3, #15
 8003acc:	f67f ae90 	bls.w	80037f0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003ad0:	bf00      	nop
 8003ad2:	bf00      	nop
 8003ad4:	3724      	adds	r7, #36	@ 0x24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	40023800 	.word	0x40023800
 8003ae4:	40013800 	.word	0x40013800
 8003ae8:	40020000 	.word	0x40020000
 8003aec:	40020400 	.word	0x40020400
 8003af0:	40020800 	.word	0x40020800
 8003af4:	40020c00 	.word	0x40020c00
 8003af8:	40021000 	.word	0x40021000
 8003afc:	40021400 	.word	0x40021400
 8003b00:	40021800 	.word	0x40021800
 8003b04:	40021c00 	.word	0x40021c00
 8003b08:	40013c00 	.word	0x40013c00

08003b0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
 8003b14:	460b      	mov	r3, r1
 8003b16:	807b      	strh	r3, [r7, #2]
 8003b18:	4613      	mov	r3, r2
 8003b1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003b1c:	787b      	ldrb	r3, [r7, #1]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d003      	beq.n	8003b2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003b22:	887a      	ldrh	r2, [r7, #2]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003b28:	e003      	b.n	8003b32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003b2a:	887b      	ldrh	r3, [r7, #2]
 8003b2c:	041a      	lsls	r2, r3, #16
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	619a      	str	r2, [r3, #24]
}
 8003b32:	bf00      	nop
 8003b34:	370c      	adds	r7, #12
 8003b36:	46bd      	mov	sp, r7
 8003b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3c:	4770      	bx	lr
	...

08003b40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b084      	sub	sp, #16
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e12b      	b.n	8003daa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fe fec2 	bl	80028f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2224      	movs	r2, #36	@ 0x24
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	681a      	ldr	r2, [r3, #0]
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f022 0201 	bic.w	r2, r2, #1
 8003b82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681a      	ldr	r2, [r3, #0]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003ba2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003ba4:	f001 fc20 	bl	80053e8 <HAL_RCC_GetPCLK1Freq>
 8003ba8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	685b      	ldr	r3, [r3, #4]
 8003bae:	4a81      	ldr	r2, [pc, #516]	@ (8003db4 <HAL_I2C_Init+0x274>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d807      	bhi.n	8003bc4 <HAL_I2C_Init+0x84>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4a80      	ldr	r2, [pc, #512]	@ (8003db8 <HAL_I2C_Init+0x278>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	bf94      	ite	ls
 8003bbc:	2301      	movls	r3, #1
 8003bbe:	2300      	movhi	r3, #0
 8003bc0:	b2db      	uxtb	r3, r3
 8003bc2:	e006      	b.n	8003bd2 <HAL_I2C_Init+0x92>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	4a7d      	ldr	r2, [pc, #500]	@ (8003dbc <HAL_I2C_Init+0x27c>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	bf94      	ite	ls
 8003bcc:	2301      	movls	r3, #1
 8003bce:	2300      	movhi	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d001      	beq.n	8003bda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003bd6:	2301      	movs	r3, #1
 8003bd8:	e0e7      	b.n	8003daa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	4a78      	ldr	r2, [pc, #480]	@ (8003dc0 <HAL_I2C_Init+0x280>)
 8003bde:	fba2 2303 	umull	r2, r3, r2, r3
 8003be2:	0c9b      	lsrs	r3, r3, #18
 8003be4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	430a      	orrs	r2, r1
 8003bf8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	685b      	ldr	r3, [r3, #4]
 8003c08:	4a6a      	ldr	r2, [pc, #424]	@ (8003db4 <HAL_I2C_Init+0x274>)
 8003c0a:	4293      	cmp	r3, r2
 8003c0c:	d802      	bhi.n	8003c14 <HAL_I2C_Init+0xd4>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	3301      	adds	r3, #1
 8003c12:	e009      	b.n	8003c28 <HAL_I2C_Init+0xe8>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003c1a:	fb02 f303 	mul.w	r3, r2, r3
 8003c1e:	4a69      	ldr	r2, [pc, #420]	@ (8003dc4 <HAL_I2C_Init+0x284>)
 8003c20:	fba2 2303 	umull	r2, r3, r2, r3
 8003c24:	099b      	lsrs	r3, r3, #6
 8003c26:	3301      	adds	r3, #1
 8003c28:	687a      	ldr	r2, [r7, #4]
 8003c2a:	6812      	ldr	r2, [r2, #0]
 8003c2c:	430b      	orrs	r3, r1
 8003c2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003c3a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	495c      	ldr	r1, [pc, #368]	@ (8003db4 <HAL_I2C_Init+0x274>)
 8003c44:	428b      	cmp	r3, r1
 8003c46:	d819      	bhi.n	8003c7c <HAL_I2C_Init+0x13c>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	1e59      	subs	r1, r3, #1
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c56:	1c59      	adds	r1, r3, #1
 8003c58:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003c5c:	400b      	ands	r3, r1
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d00a      	beq.n	8003c78 <HAL_I2C_Init+0x138>
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	1e59      	subs	r1, r3, #1
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	005b      	lsls	r3, r3, #1
 8003c6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c70:	3301      	adds	r3, #1
 8003c72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c76:	e051      	b.n	8003d1c <HAL_I2C_Init+0x1dc>
 8003c78:	2304      	movs	r3, #4
 8003c7a:	e04f      	b.n	8003d1c <HAL_I2C_Init+0x1dc>
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	689b      	ldr	r3, [r3, #8]
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d111      	bne.n	8003ca8 <HAL_I2C_Init+0x168>
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	1e58      	subs	r0, r3, #1
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6859      	ldr	r1, [r3, #4]
 8003c8c:	460b      	mov	r3, r1
 8003c8e:	005b      	lsls	r3, r3, #1
 8003c90:	440b      	add	r3, r1
 8003c92:	fbb0 f3f3 	udiv	r3, r0, r3
 8003c96:	3301      	adds	r3, #1
 8003c98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	bf0c      	ite	eq
 8003ca0:	2301      	moveq	r3, #1
 8003ca2:	2300      	movne	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	e012      	b.n	8003cce <HAL_I2C_Init+0x18e>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	1e58      	subs	r0, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6859      	ldr	r1, [r3, #4]
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	440b      	add	r3, r1
 8003cb6:	0099      	lsls	r1, r3, #2
 8003cb8:	440b      	add	r3, r1
 8003cba:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cbe:	3301      	adds	r3, #1
 8003cc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	bf0c      	ite	eq
 8003cc8:	2301      	moveq	r3, #1
 8003cca:	2300      	movne	r3, #0
 8003ccc:	b2db      	uxtb	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d001      	beq.n	8003cd6 <HAL_I2C_Init+0x196>
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e022      	b.n	8003d1c <HAL_I2C_Init+0x1dc>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10e      	bne.n	8003cfc <HAL_I2C_Init+0x1bc>
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	1e58      	subs	r0, r3, #1
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6859      	ldr	r1, [r3, #4]
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	005b      	lsls	r3, r3, #1
 8003cea:	440b      	add	r3, r1
 8003cec:	fbb0 f3f3 	udiv	r3, r0, r3
 8003cf0:	3301      	adds	r3, #1
 8003cf2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cf6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003cfa:	e00f      	b.n	8003d1c <HAL_I2C_Init+0x1dc>
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	1e58      	subs	r0, r3, #1
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6859      	ldr	r1, [r3, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	440b      	add	r3, r1
 8003d0a:	0099      	lsls	r1, r3, #2
 8003d0c:	440b      	add	r3, r1
 8003d0e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d12:	3301      	adds	r3, #1
 8003d14:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d18:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003d1c:	6879      	ldr	r1, [r7, #4]
 8003d1e:	6809      	ldr	r1, [r1, #0]
 8003d20:	4313      	orrs	r3, r2
 8003d22:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	69da      	ldr	r2, [r3, #28]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a1b      	ldr	r3, [r3, #32]
 8003d36:	431a      	orrs	r2, r3
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	430a      	orrs	r2, r1
 8003d3e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003d4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003d4e:	687a      	ldr	r2, [r7, #4]
 8003d50:	6911      	ldr	r1, [r2, #16]
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	68d2      	ldr	r2, [r2, #12]
 8003d56:	4311      	orrs	r1, r2
 8003d58:	687a      	ldr	r2, [r7, #4]
 8003d5a:	6812      	ldr	r2, [r2, #0]
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	68db      	ldr	r3, [r3, #12]
 8003d66:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	695a      	ldr	r2, [r3, #20]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	699b      	ldr	r3, [r3, #24]
 8003d72:	431a      	orrs	r2, r3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	430a      	orrs	r2, r1
 8003d7a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2220      	movs	r2, #32
 8003d96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
 8003db2:	bf00      	nop
 8003db4:	000186a0 	.word	0x000186a0
 8003db8:	001e847f 	.word	0x001e847f
 8003dbc:	003d08ff 	.word	0x003d08ff
 8003dc0:	431bde83 	.word	0x431bde83
 8003dc4:	10624dd3 	.word	0x10624dd3

08003dc8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b088      	sub	sp, #32
 8003dcc:	af02      	add	r7, sp, #8
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	4608      	mov	r0, r1
 8003dd2:	4611      	mov	r1, r2
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	817b      	strh	r3, [r7, #10]
 8003dda:	460b      	mov	r3, r1
 8003ddc:	813b      	strh	r3, [r7, #8]
 8003dde:	4613      	mov	r3, r2
 8003de0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003de2:	f7ff f815 	bl	8002e10 <HAL_GetTick>
 8003de6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003dee:	b2db      	uxtb	r3, r3
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	f040 80d9 	bne.w	8003fa8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003df6:	697b      	ldr	r3, [r7, #20]
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	2319      	movs	r3, #25
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	496d      	ldr	r1, [pc, #436]	@ (8003fb4 <HAL_I2C_Mem_Write+0x1ec>)
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 fc8b 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003e0c:	2302      	movs	r3, #2
 8003e0e:	e0cc      	b.n	8003faa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e16:	2b01      	cmp	r3, #1
 8003e18:	d101      	bne.n	8003e1e <HAL_I2C_Mem_Write+0x56>
 8003e1a:	2302      	movs	r3, #2
 8003e1c:	e0c5      	b.n	8003faa <HAL_I2C_Mem_Write+0x1e2>
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2201      	movs	r2, #1
 8003e22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d007      	beq.n	8003e44 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	681a      	ldr	r2, [r3, #0]
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f042 0201 	orr.w	r2, r2, #1
 8003e42:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e52:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2221      	movs	r2, #33	@ 0x21
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2240      	movs	r2, #64	@ 0x40
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	2200      	movs	r2, #0
 8003e68:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a3a      	ldr	r2, [r7, #32]
 8003e6e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003e74:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	4a4d      	ldr	r2, [pc, #308]	@ (8003fb8 <HAL_I2C_Mem_Write+0x1f0>)
 8003e84:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003e86:	88f8      	ldrh	r0, [r7, #6]
 8003e88:	893a      	ldrh	r2, [r7, #8]
 8003e8a:	8979      	ldrh	r1, [r7, #10]
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	9301      	str	r3, [sp, #4]
 8003e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003e92:	9300      	str	r3, [sp, #0]
 8003e94:	4603      	mov	r3, r0
 8003e96:	68f8      	ldr	r0, [r7, #12]
 8003e98:	f000 fac2 	bl	8004420 <I2C_RequestMemoryWrite>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d052      	beq.n	8003f48 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ea2:	2301      	movs	r3, #1
 8003ea4:	e081      	b.n	8003faa <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f000 fd50 	bl	8004950 <I2C_WaitOnTXEFlagUntilTimeout>
 8003eb0:	4603      	mov	r3, r0
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00d      	beq.n	8003ed2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d107      	bne.n	8003ece <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ecc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e06b      	b.n	8003faa <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ed6:	781a      	ldrb	r2, [r3, #0]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	695b      	ldr	r3, [r3, #20]
 8003f08:	f003 0304 	and.w	r3, r3, #4
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d11b      	bne.n	8003f48 <HAL_I2C_Mem_Write+0x180>
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d017      	beq.n	8003f48 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f1c:	781a      	ldrb	r2, [r3, #0]
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f28:	1c5a      	adds	r2, r3, #1
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f32:	3b01      	subs	r3, #1
 8003f34:	b29a      	uxth	r2, r3
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f3e:	b29b      	uxth	r3, r3
 8003f40:	3b01      	subs	r3, #1
 8003f42:	b29a      	uxth	r2, r3
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d1aa      	bne.n	8003ea6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f50:	697a      	ldr	r2, [r7, #20]
 8003f52:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003f54:	68f8      	ldr	r0, [r7, #12]
 8003f56:	f000 fd43 	bl	80049e0 <I2C_WaitOnBTFFlagUntilTimeout>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00d      	beq.n	8003f7c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f64:	2b04      	cmp	r3, #4
 8003f66:	d107      	bne.n	8003f78 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f76:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	e016      	b.n	8003faa <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2220      	movs	r2, #32
 8003f90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	e000      	b.n	8003faa <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003fa8:	2302      	movs	r3, #2
  }
}
 8003faa:	4618      	mov	r0, r3
 8003fac:	3718      	adds	r7, #24
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	00100002 	.word	0x00100002
 8003fb8:	ffff0000 	.word	0xffff0000

08003fbc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b08c      	sub	sp, #48	@ 0x30
 8003fc0:	af02      	add	r7, sp, #8
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	4608      	mov	r0, r1
 8003fc6:	4611      	mov	r1, r2
 8003fc8:	461a      	mov	r2, r3
 8003fca:	4603      	mov	r3, r0
 8003fcc:	817b      	strh	r3, [r7, #10]
 8003fce:	460b      	mov	r3, r1
 8003fd0:	813b      	strh	r3, [r7, #8]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003fd6:	f7fe ff1b 	bl	8002e10 <HAL_GetTick>
 8003fda:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003fe2:	b2db      	uxtb	r3, r3
 8003fe4:	2b20      	cmp	r3, #32
 8003fe6:	f040 8214 	bne.w	8004412 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003fea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fec:	9300      	str	r3, [sp, #0]
 8003fee:	2319      	movs	r3, #25
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	497b      	ldr	r1, [pc, #492]	@ (80041e0 <HAL_I2C_Mem_Read+0x224>)
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f000 fb91 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 8003ffa:	4603      	mov	r3, r0
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d001      	beq.n	8004004 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004000:	2302      	movs	r3, #2
 8004002:	e207      	b.n	8004414 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800400a:	2b01      	cmp	r3, #1
 800400c:	d101      	bne.n	8004012 <HAL_I2C_Mem_Read+0x56>
 800400e:	2302      	movs	r3, #2
 8004010:	e200      	b.n	8004414 <HAL_I2C_Mem_Read+0x458>
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2201      	movs	r2, #1
 8004016:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 0301 	and.w	r3, r3, #1
 8004024:	2b01      	cmp	r3, #1
 8004026:	d007      	beq.n	8004038 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f042 0201 	orr.w	r2, r2, #1
 8004036:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004046:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2222      	movs	r2, #34	@ 0x22
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	2240      	movs	r2, #64	@ 0x40
 8004054:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	2200      	movs	r2, #0
 800405c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004062:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004068:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800406e:	b29a      	uxth	r2, r3
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	4a5b      	ldr	r2, [pc, #364]	@ (80041e4 <HAL_I2C_Mem_Read+0x228>)
 8004078:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800407a:	88f8      	ldrh	r0, [r7, #6]
 800407c:	893a      	ldrh	r2, [r7, #8]
 800407e:	8979      	ldrh	r1, [r7, #10]
 8004080:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004082:	9301      	str	r3, [sp, #4]
 8004084:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	4603      	mov	r3, r0
 800408a:	68f8      	ldr	r0, [r7, #12]
 800408c:	f000 fa5e 	bl	800454c <I2C_RequestMemoryRead>
 8004090:	4603      	mov	r3, r0
 8004092:	2b00      	cmp	r3, #0
 8004094:	d001      	beq.n	800409a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e1bc      	b.n	8004414 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d113      	bne.n	80040ca <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040a2:	2300      	movs	r3, #0
 80040a4:	623b      	str	r3, [r7, #32]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	695b      	ldr	r3, [r3, #20]
 80040ac:	623b      	str	r3, [r7, #32]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	623b      	str	r3, [r7, #32]
 80040b6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80040c6:	601a      	str	r2, [r3, #0]
 80040c8:	e190      	b.n	80043ec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d11b      	bne.n	800410a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681a      	ldr	r2, [r3, #0]
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80040e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040e2:	2300      	movs	r3, #0
 80040e4:	61fb      	str	r3, [r7, #28]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	695b      	ldr	r3, [r3, #20]
 80040ec:	61fb      	str	r3, [r7, #28]
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	699b      	ldr	r3, [r3, #24]
 80040f4:	61fb      	str	r3, [r7, #28]
 80040f6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004106:	601a      	str	r2, [r3, #0]
 8004108:	e170      	b.n	80043ec <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800410e:	2b02      	cmp	r3, #2
 8004110:	d11b      	bne.n	800414a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	681a      	ldr	r2, [r3, #0]
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004120:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004130:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004132:	2300      	movs	r3, #0
 8004134:	61bb      	str	r3, [r7, #24]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	695b      	ldr	r3, [r3, #20]
 800413c:	61bb      	str	r3, [r7, #24]
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	699b      	ldr	r3, [r3, #24]
 8004144:	61bb      	str	r3, [r7, #24]
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	e150      	b.n	80043ec <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800414a:	2300      	movs	r3, #0
 800414c:	617b      	str	r3, [r7, #20]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	617b      	str	r3, [r7, #20]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	699b      	ldr	r3, [r3, #24]
 800415c:	617b      	str	r3, [r7, #20]
 800415e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004160:	e144      	b.n	80043ec <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004166:	2b03      	cmp	r3, #3
 8004168:	f200 80f1 	bhi.w	800434e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004170:	2b01      	cmp	r3, #1
 8004172:	d123      	bne.n	80041bc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004174:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004176:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 fc79 	bl	8004a70 <I2C_WaitOnRXNEFlagUntilTimeout>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d001      	beq.n	8004188 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004184:	2301      	movs	r3, #1
 8004186:	e145      	b.n	8004414 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	691a      	ldr	r2, [r3, #16]
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004192:	b2d2      	uxtb	r2, r2
 8004194:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800419a:	1c5a      	adds	r2, r3, #1
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041a4:	3b01      	subs	r3, #1
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80041ba:	e117      	b.n	80043ec <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c0:	2b02      	cmp	r3, #2
 80041c2:	d14e      	bne.n	8004262 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80041c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80041ca:	2200      	movs	r2, #0
 80041cc:	4906      	ldr	r1, [pc, #24]	@ (80041e8 <HAL_I2C_Mem_Read+0x22c>)
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f000 faa4 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d008      	beq.n	80041ec <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e11a      	b.n	8004414 <HAL_I2C_Mem_Read+0x458>
 80041de:	bf00      	nop
 80041e0:	00100002 	.word	0x00100002
 80041e4:	ffff0000 	.word	0xffff0000
 80041e8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041fa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	691a      	ldr	r2, [r3, #16]
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004206:	b2d2      	uxtb	r2, r2
 8004208:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	691a      	ldr	r2, [r3, #16]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004238:	b2d2      	uxtb	r2, r2
 800423a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004240:	1c5a      	adds	r2, r3, #1
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800424a:	3b01      	subs	r3, #1
 800424c:	b29a      	uxth	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004260:	e0c4      	b.n	80043ec <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004264:	9300      	str	r3, [sp, #0]
 8004266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004268:	2200      	movs	r2, #0
 800426a:	496c      	ldr	r1, [pc, #432]	@ (800441c <HAL_I2C_Mem_Read+0x460>)
 800426c:	68f8      	ldr	r0, [r7, #12]
 800426e:	f000 fa55 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 8004272:	4603      	mov	r3, r0
 8004274:	2b00      	cmp	r3, #0
 8004276:	d001      	beq.n	800427c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004278:	2301      	movs	r3, #1
 800427a:	e0cb      	b.n	8004414 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	681a      	ldr	r2, [r3, #0]
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800428a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	691a      	ldr	r2, [r3, #16]
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004296:	b2d2      	uxtb	r2, r2
 8004298:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800429e:	1c5a      	adds	r2, r3, #1
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042a8:	3b01      	subs	r3, #1
 80042aa:	b29a      	uxth	r2, r3
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042b4:	b29b      	uxth	r3, r3
 80042b6:	3b01      	subs	r3, #1
 80042b8:	b29a      	uxth	r2, r3
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80042c4:	2200      	movs	r2, #0
 80042c6:	4955      	ldr	r1, [pc, #340]	@ (800441c <HAL_I2C_Mem_Read+0x460>)
 80042c8:	68f8      	ldr	r0, [r7, #12]
 80042ca:	f000 fa27 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 80042ce:	4603      	mov	r3, r0
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d001      	beq.n	80042d8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80042d4:	2301      	movs	r3, #1
 80042d6:	e09d      	b.n	8004414 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004310:	b29b      	uxth	r3, r3
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800434c:	e04e      	b.n	80043ec <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800434e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004350:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004352:	68f8      	ldr	r0, [r7, #12]
 8004354:	f000 fb8c 	bl	8004a70 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004358:	4603      	mov	r3, r0
 800435a:	2b00      	cmp	r3, #0
 800435c:	d001      	beq.n	8004362 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800435e:	2301      	movs	r3, #1
 8004360:	e058      	b.n	8004414 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	691a      	ldr	r2, [r3, #16]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800436c:	b2d2      	uxtb	r2, r2
 800436e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004374:	1c5a      	adds	r2, r3, #1
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800437e:	3b01      	subs	r3, #1
 8004380:	b29a      	uxth	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800438a:	b29b      	uxth	r3, r3
 800438c:	3b01      	subs	r3, #1
 800438e:	b29a      	uxth	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	695b      	ldr	r3, [r3, #20]
 800439a:	f003 0304 	and.w	r3, r3, #4
 800439e:	2b04      	cmp	r3, #4
 80043a0:	d124      	bne.n	80043ec <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d107      	bne.n	80043ba <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80043b8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	691a      	ldr	r2, [r3, #16]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043c4:	b2d2      	uxtb	r2, r2
 80043c6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043cc:	1c5a      	adds	r2, r3, #1
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043d6:	3b01      	subs	r3, #1
 80043d8:	b29a      	uxth	r2, r3
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043e2:	b29b      	uxth	r3, r3
 80043e4:	3b01      	subs	r3, #1
 80043e6:	b29a      	uxth	r2, r3
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f47f aeb6 	bne.w	8004162 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2220      	movs	r2, #32
 80043fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800440e:	2300      	movs	r3, #0
 8004410:	e000      	b.n	8004414 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8004412:	2302      	movs	r3, #2
  }
}
 8004414:	4618      	mov	r0, r3
 8004416:	3728      	adds	r7, #40	@ 0x28
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}
 800441c:	00010004 	.word	0x00010004

08004420 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b088      	sub	sp, #32
 8004424:	af02      	add	r7, sp, #8
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	4608      	mov	r0, r1
 800442a:	4611      	mov	r1, r2
 800442c:	461a      	mov	r2, r3
 800442e:	4603      	mov	r3, r0
 8004430:	817b      	strh	r3, [r7, #10]
 8004432:	460b      	mov	r3, r1
 8004434:	813b      	strh	r3, [r7, #8]
 8004436:	4613      	mov	r3, r2
 8004438:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004448:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800444a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800444c:	9300      	str	r3, [sp, #0]
 800444e:	6a3b      	ldr	r3, [r7, #32]
 8004450:	2200      	movs	r2, #0
 8004452:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004456:	68f8      	ldr	r0, [r7, #12]
 8004458:	f000 f960 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 800445c:	4603      	mov	r3, r0
 800445e:	2b00      	cmp	r3, #0
 8004460:	d00d      	beq.n	800447e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800446c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004470:	d103      	bne.n	800447a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004478:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800447a:	2303      	movs	r3, #3
 800447c:	e05f      	b.n	800453e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800447e:	897b      	ldrh	r3, [r7, #10]
 8004480:	b2db      	uxtb	r3, r3
 8004482:	461a      	mov	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800448c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800448e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004490:	6a3a      	ldr	r2, [r7, #32]
 8004492:	492d      	ldr	r1, [pc, #180]	@ (8004548 <I2C_RequestMemoryWrite+0x128>)
 8004494:	68f8      	ldr	r0, [r7, #12]
 8004496:	f000 f9bb 	bl	8004810 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800449a:	4603      	mov	r3, r0
 800449c:	2b00      	cmp	r3, #0
 800449e:	d001      	beq.n	80044a4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80044a0:	2301      	movs	r3, #1
 80044a2:	e04c      	b.n	800453e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a4:	2300      	movs	r3, #0
 80044a6:	617b      	str	r3, [r7, #20]
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	617b      	str	r3, [r7, #20]
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699b      	ldr	r3, [r3, #24]
 80044b6:	617b      	str	r3, [r7, #20]
 80044b8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80044ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044bc:	6a39      	ldr	r1, [r7, #32]
 80044be:	68f8      	ldr	r0, [r7, #12]
 80044c0:	f000 fa46 	bl	8004950 <I2C_WaitOnTXEFlagUntilTimeout>
 80044c4:	4603      	mov	r3, r0
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d00d      	beq.n	80044e6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044ce:	2b04      	cmp	r3, #4
 80044d0:	d107      	bne.n	80044e2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044e0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e02b      	b.n	800453e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80044e6:	88fb      	ldrh	r3, [r7, #6]
 80044e8:	2b01      	cmp	r3, #1
 80044ea:	d105      	bne.n	80044f8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80044ec:	893b      	ldrh	r3, [r7, #8]
 80044ee:	b2da      	uxtb	r2, r3
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	611a      	str	r2, [r3, #16]
 80044f6:	e021      	b.n	800453c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80044f8:	893b      	ldrh	r3, [r7, #8]
 80044fa:	0a1b      	lsrs	r3, r3, #8
 80044fc:	b29b      	uxth	r3, r3
 80044fe:	b2da      	uxtb	r2, r3
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004508:	6a39      	ldr	r1, [r7, #32]
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fa20 	bl	8004950 <I2C_WaitOnTXEFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d00d      	beq.n	8004532 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800451a:	2b04      	cmp	r3, #4
 800451c:	d107      	bne.n	800452e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800452c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e005      	b.n	800453e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004532:	893b      	ldrh	r3, [r7, #8]
 8004534:	b2da      	uxtb	r2, r3
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800453c:	2300      	movs	r3, #0
}
 800453e:	4618      	mov	r0, r3
 8004540:	3718      	adds	r7, #24
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}
 8004546:	bf00      	nop
 8004548:	00010002 	.word	0x00010002

0800454c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b088      	sub	sp, #32
 8004550:	af02      	add	r7, sp, #8
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	4608      	mov	r0, r1
 8004556:	4611      	mov	r1, r2
 8004558:	461a      	mov	r2, r3
 800455a:	4603      	mov	r3, r0
 800455c:	817b      	strh	r3, [r7, #10]
 800455e:	460b      	mov	r3, r1
 8004560:	813b      	strh	r3, [r7, #8]
 8004562:	4613      	mov	r3, r2
 8004564:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004574:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	681a      	ldr	r2, [r3, #0]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004584:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004586:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004588:	9300      	str	r3, [sp, #0]
 800458a:	6a3b      	ldr	r3, [r7, #32]
 800458c:	2200      	movs	r2, #0
 800458e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004592:	68f8      	ldr	r0, [r7, #12]
 8004594:	f000 f8c2 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 8004598:	4603      	mov	r3, r0
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00d      	beq.n	80045ba <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045ac:	d103      	bne.n	80045b6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80045b4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80045b6:	2303      	movs	r3, #3
 80045b8:	e0aa      	b.n	8004710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80045ba:	897b      	ldrh	r3, [r7, #10]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	461a      	mov	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80045c8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045cc:	6a3a      	ldr	r2, [r7, #32]
 80045ce:	4952      	ldr	r1, [pc, #328]	@ (8004718 <I2C_RequestMemoryRead+0x1cc>)
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 f91d 	bl	8004810 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d001      	beq.n	80045e0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e097      	b.n	8004710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80045e0:	2300      	movs	r3, #0
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	695b      	ldr	r3, [r3, #20]
 80045ea:	617b      	str	r3, [r7, #20]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	699b      	ldr	r3, [r3, #24]
 80045f2:	617b      	str	r3, [r7, #20]
 80045f4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80045f6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80045f8:	6a39      	ldr	r1, [r7, #32]
 80045fa:	68f8      	ldr	r0, [r7, #12]
 80045fc:	f000 f9a8 	bl	8004950 <I2C_WaitOnTXEFlagUntilTimeout>
 8004600:	4603      	mov	r3, r0
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00d      	beq.n	8004622 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800460a:	2b04      	cmp	r3, #4
 800460c:	d107      	bne.n	800461e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800461c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e076      	b.n	8004710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004622:	88fb      	ldrh	r3, [r7, #6]
 8004624:	2b01      	cmp	r3, #1
 8004626:	d105      	bne.n	8004634 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004628:	893b      	ldrh	r3, [r7, #8]
 800462a:	b2da      	uxtb	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	611a      	str	r2, [r3, #16]
 8004632:	e021      	b.n	8004678 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004634:	893b      	ldrh	r3, [r7, #8]
 8004636:	0a1b      	lsrs	r3, r3, #8
 8004638:	b29b      	uxth	r3, r3
 800463a:	b2da      	uxtb	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004642:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004644:	6a39      	ldr	r1, [r7, #32]
 8004646:	68f8      	ldr	r0, [r7, #12]
 8004648:	f000 f982 	bl	8004950 <I2C_WaitOnTXEFlagUntilTimeout>
 800464c:	4603      	mov	r3, r0
 800464e:	2b00      	cmp	r3, #0
 8004650:	d00d      	beq.n	800466e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004656:	2b04      	cmp	r3, #4
 8004658:	d107      	bne.n	800466a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	681a      	ldr	r2, [r3, #0]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004668:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800466a:	2301      	movs	r3, #1
 800466c:	e050      	b.n	8004710 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800466e:	893b      	ldrh	r3, [r7, #8]
 8004670:	b2da      	uxtb	r2, r3
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004678:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800467a:	6a39      	ldr	r1, [r7, #32]
 800467c:	68f8      	ldr	r0, [r7, #12]
 800467e:	f000 f967 	bl	8004950 <I2C_WaitOnTXEFlagUntilTimeout>
 8004682:	4603      	mov	r3, r0
 8004684:	2b00      	cmp	r3, #0
 8004686:	d00d      	beq.n	80046a4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800468c:	2b04      	cmp	r3, #4
 800468e:	d107      	bne.n	80046a0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800469e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80046a0:	2301      	movs	r3, #1
 80046a2:	e035      	b.n	8004710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	681a      	ldr	r2, [r3, #0]
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80046b2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80046b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	6a3b      	ldr	r3, [r7, #32]
 80046ba:	2200      	movs	r2, #0
 80046bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80046c0:	68f8      	ldr	r0, [r7, #12]
 80046c2:	f000 f82b 	bl	800471c <I2C_WaitOnFlagUntilTimeout>
 80046c6:	4603      	mov	r3, r0
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d00d      	beq.n	80046e8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046da:	d103      	bne.n	80046e4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80046e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80046e4:	2303      	movs	r3, #3
 80046e6:	e013      	b.n	8004710 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80046e8:	897b      	ldrh	r3, [r7, #10]
 80046ea:	b2db      	uxtb	r3, r3
 80046ec:	f043 0301 	orr.w	r3, r3, #1
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046fa:	6a3a      	ldr	r2, [r7, #32]
 80046fc:	4906      	ldr	r1, [pc, #24]	@ (8004718 <I2C_RequestMemoryRead+0x1cc>)
 80046fe:	68f8      	ldr	r0, [r7, #12]
 8004700:	f000 f886 	bl	8004810 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004704:	4603      	mov	r3, r0
 8004706:	2b00      	cmp	r3, #0
 8004708:	d001      	beq.n	800470e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800470a:	2301      	movs	r3, #1
 800470c:	e000      	b.n	8004710 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3718      	adds	r7, #24
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}
 8004718:	00010002 	.word	0x00010002

0800471c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b084      	sub	sp, #16
 8004720:	af00      	add	r7, sp, #0
 8004722:	60f8      	str	r0, [r7, #12]
 8004724:	60b9      	str	r1, [r7, #8]
 8004726:	603b      	str	r3, [r7, #0]
 8004728:	4613      	mov	r3, r2
 800472a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800472c:	e048      	b.n	80047c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004734:	d044      	beq.n	80047c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004736:	f7fe fb6b 	bl	8002e10 <HAL_GetTick>
 800473a:	4602      	mov	r2, r0
 800473c:	69bb      	ldr	r3, [r7, #24]
 800473e:	1ad3      	subs	r3, r2, r3
 8004740:	683a      	ldr	r2, [r7, #0]
 8004742:	429a      	cmp	r2, r3
 8004744:	d302      	bcc.n	800474c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b00      	cmp	r3, #0
 800474a:	d139      	bne.n	80047c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	0c1b      	lsrs	r3, r3, #16
 8004750:	b2db      	uxtb	r3, r3
 8004752:	2b01      	cmp	r3, #1
 8004754:	d10d      	bne.n	8004772 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	695b      	ldr	r3, [r3, #20]
 800475c:	43da      	mvns	r2, r3
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4013      	ands	r3, r2
 8004762:	b29b      	uxth	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	bf0c      	ite	eq
 8004768:	2301      	moveq	r3, #1
 800476a:	2300      	movne	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	461a      	mov	r2, r3
 8004770:	e00c      	b.n	800478c <I2C_WaitOnFlagUntilTimeout+0x70>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	43da      	mvns	r2, r3
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	4013      	ands	r3, r2
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	bf0c      	ite	eq
 8004784:	2301      	moveq	r3, #1
 8004786:	2300      	movne	r3, #0
 8004788:	b2db      	uxtb	r3, r3
 800478a:	461a      	mov	r2, r3
 800478c:	79fb      	ldrb	r3, [r7, #7]
 800478e:	429a      	cmp	r2, r3
 8004790:	d116      	bne.n	80047c0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	2200      	movs	r2, #0
 8004796:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	2220      	movs	r2, #32
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ac:	f043 0220 	orr.w	r2, r3, #32
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047bc:	2301      	movs	r3, #1
 80047be:	e023      	b.n	8004808 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047c0:	68bb      	ldr	r3, [r7, #8]
 80047c2:	0c1b      	lsrs	r3, r3, #16
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d10d      	bne.n	80047e6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	43da      	mvns	r2, r3
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	4013      	ands	r3, r2
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	bf0c      	ite	eq
 80047dc:	2301      	moveq	r3, #1
 80047de:	2300      	movne	r3, #0
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	e00c      	b.n	8004800 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	699b      	ldr	r3, [r3, #24]
 80047ec:	43da      	mvns	r2, r3
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	4013      	ands	r3, r2
 80047f2:	b29b      	uxth	r3, r3
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	bf0c      	ite	eq
 80047f8:	2301      	moveq	r3, #1
 80047fa:	2300      	movne	r3, #0
 80047fc:	b2db      	uxtb	r3, r3
 80047fe:	461a      	mov	r2, r3
 8004800:	79fb      	ldrb	r3, [r7, #7]
 8004802:	429a      	cmp	r2, r3
 8004804:	d093      	beq.n	800472e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	3710      	adds	r7, #16
 800480c:	46bd      	mov	sp, r7
 800480e:	bd80      	pop	{r7, pc}

08004810 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	60f8      	str	r0, [r7, #12]
 8004818:	60b9      	str	r1, [r7, #8]
 800481a:	607a      	str	r2, [r7, #4]
 800481c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800481e:	e071      	b.n	8004904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800482a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800482e:	d123      	bne.n	8004878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800483e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004848:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2200      	movs	r2, #0
 800484e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2220      	movs	r2, #32
 8004854:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	2200      	movs	r2, #0
 800485c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004864:	f043 0204 	orr.w	r2, r3, #4
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	2200      	movs	r2, #0
 8004870:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e067      	b.n	8004948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800487e:	d041      	beq.n	8004904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004880:	f7fe fac6 	bl	8002e10 <HAL_GetTick>
 8004884:	4602      	mov	r2, r0
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	1ad3      	subs	r3, r2, r3
 800488a:	687a      	ldr	r2, [r7, #4]
 800488c:	429a      	cmp	r2, r3
 800488e:	d302      	bcc.n	8004896 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d136      	bne.n	8004904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004896:	68bb      	ldr	r3, [r7, #8]
 8004898:	0c1b      	lsrs	r3, r3, #16
 800489a:	b2db      	uxtb	r3, r3
 800489c:	2b01      	cmp	r3, #1
 800489e:	d10c      	bne.n	80048ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	43da      	mvns	r2, r3
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	4013      	ands	r3, r2
 80048ac:	b29b      	uxth	r3, r3
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	bf14      	ite	ne
 80048b2:	2301      	movne	r3, #1
 80048b4:	2300      	moveq	r3, #0
 80048b6:	b2db      	uxtb	r3, r3
 80048b8:	e00b      	b.n	80048d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	699b      	ldr	r3, [r3, #24]
 80048c0:	43da      	mvns	r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	4013      	ands	r3, r2
 80048c6:	b29b      	uxth	r3, r3
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	bf14      	ite	ne
 80048cc:	2301      	movne	r3, #1
 80048ce:	2300      	moveq	r3, #0
 80048d0:	b2db      	uxtb	r3, r3
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d016      	beq.n	8004904 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	2220      	movs	r2, #32
 80048e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048f0:	f043 0220 	orr.w	r2, r3, #32
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e021      	b.n	8004948 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	0c1b      	lsrs	r3, r3, #16
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b01      	cmp	r3, #1
 800490c:	d10c      	bne.n	8004928 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	695b      	ldr	r3, [r3, #20]
 8004914:	43da      	mvns	r2, r3
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	4013      	ands	r3, r2
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	bf14      	ite	ne
 8004920:	2301      	movne	r3, #1
 8004922:	2300      	moveq	r3, #0
 8004924:	b2db      	uxtb	r3, r3
 8004926:	e00b      	b.n	8004940 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	43da      	mvns	r2, r3
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	4013      	ands	r3, r2
 8004934:	b29b      	uxth	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	bf14      	ite	ne
 800493a:	2301      	movne	r3, #1
 800493c:	2300      	moveq	r3, #0
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b00      	cmp	r3, #0
 8004942:	f47f af6d 	bne.w	8004820 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004946:	2300      	movs	r3, #0
}
 8004948:	4618      	mov	r0, r3
 800494a:	3710      	adds	r7, #16
 800494c:	46bd      	mov	sp, r7
 800494e:	bd80      	pop	{r7, pc}

08004950 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004950:	b580      	push	{r7, lr}
 8004952:	b084      	sub	sp, #16
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800495c:	e034      	b.n	80049c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800495e:	68f8      	ldr	r0, [r7, #12]
 8004960:	f000 f8e3 	bl	8004b2a <I2C_IsAcknowledgeFailed>
 8004964:	4603      	mov	r3, r0
 8004966:	2b00      	cmp	r3, #0
 8004968:	d001      	beq.n	800496e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e034      	b.n	80049d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004974:	d028      	beq.n	80049c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004976:	f7fe fa4b 	bl	8002e10 <HAL_GetTick>
 800497a:	4602      	mov	r2, r0
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	1ad3      	subs	r3, r2, r3
 8004980:	68ba      	ldr	r2, [r7, #8]
 8004982:	429a      	cmp	r2, r3
 8004984:	d302      	bcc.n	800498c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004986:	68bb      	ldr	r3, [r7, #8]
 8004988:	2b00      	cmp	r3, #0
 800498a:	d11d      	bne.n	80049c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004996:	2b80      	cmp	r3, #128	@ 0x80
 8004998:	d016      	beq.n	80049c8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2220      	movs	r2, #32
 80049a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2200      	movs	r2, #0
 80049ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049b4:	f043 0220 	orr.w	r2, r3, #32
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2200      	movs	r2, #0
 80049c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80049c4:	2301      	movs	r3, #1
 80049c6:	e007      	b.n	80049d8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	695b      	ldr	r3, [r3, #20]
 80049ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80049d2:	2b80      	cmp	r3, #128	@ 0x80
 80049d4:	d1c3      	bne.n	800495e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80049d6:	2300      	movs	r3, #0
}
 80049d8:	4618      	mov	r0, r3
 80049da:	3710      	adds	r7, #16
 80049dc:	46bd      	mov	sp, r7
 80049de:	bd80      	pop	{r7, pc}

080049e0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	60b9      	str	r1, [r7, #8]
 80049ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049ec:	e034      	b.n	8004a58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049ee:	68f8      	ldr	r0, [r7, #12]
 80049f0:	f000 f89b 	bl	8004b2a <I2C_IsAcknowledgeFailed>
 80049f4:	4603      	mov	r3, r0
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d001      	beq.n	80049fe <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049fa:	2301      	movs	r3, #1
 80049fc:	e034      	b.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a04:	d028      	beq.n	8004a58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a06:	f7fe fa03 	bl	8002e10 <HAL_GetTick>
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d302      	bcc.n	8004a1c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004a16:	68bb      	ldr	r3, [r7, #8]
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d11d      	bne.n	8004a58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	695b      	ldr	r3, [r3, #20]
 8004a22:	f003 0304 	and.w	r3, r3, #4
 8004a26:	2b04      	cmp	r3, #4
 8004a28:	d016      	beq.n	8004a58 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a44:	f043 0220 	orr.w	r2, r3, #32
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004a54:	2301      	movs	r3, #1
 8004a56:	e007      	b.n	8004a68 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	695b      	ldr	r3, [r3, #20]
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b04      	cmp	r3, #4
 8004a64:	d1c3      	bne.n	80049ee <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004a66:	2300      	movs	r3, #0
}
 8004a68:	4618      	mov	r0, r3
 8004a6a:	3710      	adds	r7, #16
 8004a6c:	46bd      	mov	sp, r7
 8004a6e:	bd80      	pop	{r7, pc}

08004a70 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b084      	sub	sp, #16
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a7c:	e049      	b.n	8004b12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	695b      	ldr	r3, [r3, #20]
 8004a84:	f003 0310 	and.w	r3, r3, #16
 8004a88:	2b10      	cmp	r3, #16
 8004a8a:	d119      	bne.n	8004ac0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0210 	mvn.w	r2, #16
 8004a94:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	2220      	movs	r2, #32
 8004aa0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	2200      	movs	r2, #0
 8004aa8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004abc:	2301      	movs	r3, #1
 8004abe:	e030      	b.n	8004b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ac0:	f7fe f9a6 	bl	8002e10 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	d302      	bcc.n	8004ad6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d11d      	bne.n	8004b12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	695b      	ldr	r3, [r3, #20]
 8004adc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ae0:	2b40      	cmp	r3, #64	@ 0x40
 8004ae2:	d016      	beq.n	8004b12 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004afe:	f043 0220 	orr.w	r2, r3, #32
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2200      	movs	r2, #0
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004b0e:	2301      	movs	r3, #1
 8004b10:	e007      	b.n	8004b22 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	695b      	ldr	r3, [r3, #20]
 8004b18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b1c:	2b40      	cmp	r3, #64	@ 0x40
 8004b1e:	d1ae      	bne.n	8004a7e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004b20:	2300      	movs	r3, #0
}
 8004b22:	4618      	mov	r0, r3
 8004b24:	3710      	adds	r7, #16
 8004b26:	46bd      	mov	sp, r7
 8004b28:	bd80      	pop	{r7, pc}

08004b2a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004b2a:	b480      	push	{r7}
 8004b2c:	b083      	sub	sp, #12
 8004b2e:	af00      	add	r7, sp, #0
 8004b30:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	695b      	ldr	r3, [r3, #20]
 8004b38:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b3c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b40:	d11b      	bne.n	8004b7a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004b4a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2220      	movs	r2, #32
 8004b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b66:	f043 0204 	orr.w	r2, r3, #4
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	2200      	movs	r2, #0
 8004b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8004b76:	2301      	movs	r3, #1
 8004b78:	e000      	b.n	8004b7c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b7a:	2300      	movs	r3, #0
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d101      	bne.n	8004b9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b96:	2301      	movs	r3, #1
 8004b98:	e267      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f003 0301 	and.w	r3, r3, #1
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d075      	beq.n	8004c92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004ba6:	4b88      	ldr	r3, [pc, #544]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004ba8:	689b      	ldr	r3, [r3, #8]
 8004baa:	f003 030c 	and.w	r3, r3, #12
 8004bae:	2b04      	cmp	r3, #4
 8004bb0:	d00c      	beq.n	8004bcc <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bb2:	4b85      	ldr	r3, [pc, #532]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004bb4:	689b      	ldr	r3, [r3, #8]
 8004bb6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004bba:	2b08      	cmp	r3, #8
 8004bbc:	d112      	bne.n	8004be4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004bbe:	4b82      	ldr	r3, [pc, #520]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004bc6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004bca:	d10b      	bne.n	8004be4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bcc:	4b7e      	ldr	r3, [pc, #504]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d05b      	beq.n	8004c90 <HAL_RCC_OscConfig+0x108>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	685b      	ldr	r3, [r3, #4]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d157      	bne.n	8004c90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e242      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	685b      	ldr	r3, [r3, #4]
 8004be8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004bec:	d106      	bne.n	8004bfc <HAL_RCC_OscConfig+0x74>
 8004bee:	4b76      	ldr	r3, [pc, #472]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	4a75      	ldr	r2, [pc, #468]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004bf4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004bf8:	6013      	str	r3, [r2, #0]
 8004bfa:	e01d      	b.n	8004c38 <HAL_RCC_OscConfig+0xb0>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004c04:	d10c      	bne.n	8004c20 <HAL_RCC_OscConfig+0x98>
 8004c06:	4b70      	ldr	r3, [pc, #448]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4a6f      	ldr	r2, [pc, #444]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004c0c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004c10:	6013      	str	r3, [r2, #0]
 8004c12:	4b6d      	ldr	r3, [pc, #436]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	4a6c      	ldr	r2, [pc, #432]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004c18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c1c:	6013      	str	r3, [r2, #0]
 8004c1e:	e00b      	b.n	8004c38 <HAL_RCC_OscConfig+0xb0>
 8004c20:	4b69      	ldr	r3, [pc, #420]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4a68      	ldr	r2, [pc, #416]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004c26:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	4b66      	ldr	r3, [pc, #408]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a65      	ldr	r2, [pc, #404]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004c32:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004c36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d013      	beq.n	8004c68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c40:	f7fe f8e6 	bl	8002e10 <HAL_GetTick>
 8004c44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c46:	e008      	b.n	8004c5a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c48:	f7fe f8e2 	bl	8002e10 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	2b64      	cmp	r3, #100	@ 0x64
 8004c54:	d901      	bls.n	8004c5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c56:	2303      	movs	r3, #3
 8004c58:	e207      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c5a:	4b5b      	ldr	r3, [pc, #364]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d0f0      	beq.n	8004c48 <HAL_RCC_OscConfig+0xc0>
 8004c66:	e014      	b.n	8004c92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c68:	f7fe f8d2 	bl	8002e10 <HAL_GetTick>
 8004c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c6e:	e008      	b.n	8004c82 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004c70:	f7fe f8ce 	bl	8002e10 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	2b64      	cmp	r3, #100	@ 0x64
 8004c7c:	d901      	bls.n	8004c82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c7e:	2303      	movs	r3, #3
 8004c80:	e1f3      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c82:	4b51      	ldr	r3, [pc, #324]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d1f0      	bne.n	8004c70 <HAL_RCC_OscConfig+0xe8>
 8004c8e:	e000      	b.n	8004c92 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 0302 	and.w	r3, r3, #2
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d063      	beq.n	8004d66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004c9e:	4b4a      	ldr	r3, [pc, #296]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004ca0:	689b      	ldr	r3, [r3, #8]
 8004ca2:	f003 030c 	and.w	r3, r3, #12
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d00b      	beq.n	8004cc2 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004caa:	4b47      	ldr	r3, [pc, #284]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004cac:	689b      	ldr	r3, [r3, #8]
 8004cae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004cb2:	2b08      	cmp	r3, #8
 8004cb4:	d11c      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004cb6:	4b44      	ldr	r3, [pc, #272]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d116      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cc2:	4b41      	ldr	r3, [pc, #260]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	f003 0302 	and.w	r3, r3, #2
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d005      	beq.n	8004cda <HAL_RCC_OscConfig+0x152>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d001      	beq.n	8004cda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e1c7      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cda:	4b3b      	ldr	r3, [pc, #236]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	00db      	lsls	r3, r3, #3
 8004ce8:	4937      	ldr	r1, [pc, #220]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004cea:	4313      	orrs	r3, r2
 8004cec:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cee:	e03a      	b.n	8004d66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d020      	beq.n	8004d3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cf8:	4b34      	ldr	r3, [pc, #208]	@ (8004dcc <HAL_RCC_OscConfig+0x244>)
 8004cfa:	2201      	movs	r2, #1
 8004cfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cfe:	f7fe f887 	bl	8002e10 <HAL_GetTick>
 8004d02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d04:	e008      	b.n	8004d18 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d06:	f7fe f883 	bl	8002e10 <HAL_GetTick>
 8004d0a:	4602      	mov	r2, r0
 8004d0c:	693b      	ldr	r3, [r7, #16]
 8004d0e:	1ad3      	subs	r3, r2, r3
 8004d10:	2b02      	cmp	r3, #2
 8004d12:	d901      	bls.n	8004d18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004d14:	2303      	movs	r3, #3
 8004d16:	e1a8      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004d18:	4b2b      	ldr	r3, [pc, #172]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f003 0302 	and.w	r3, r3, #2
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d0f0      	beq.n	8004d06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004d24:	4b28      	ldr	r3, [pc, #160]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	691b      	ldr	r3, [r3, #16]
 8004d30:	00db      	lsls	r3, r3, #3
 8004d32:	4925      	ldr	r1, [pc, #148]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004d34:	4313      	orrs	r3, r2
 8004d36:	600b      	str	r3, [r1, #0]
 8004d38:	e015      	b.n	8004d66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d3a:	4b24      	ldr	r3, [pc, #144]	@ (8004dcc <HAL_RCC_OscConfig+0x244>)
 8004d3c:	2200      	movs	r2, #0
 8004d3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d40:	f7fe f866 	bl	8002e10 <HAL_GetTick>
 8004d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d46:	e008      	b.n	8004d5a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004d48:	f7fe f862 	bl	8002e10 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d901      	bls.n	8004d5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d56:	2303      	movs	r3, #3
 8004d58:	e187      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d5a:	4b1b      	ldr	r3, [pc, #108]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f003 0302 	and.w	r3, r3, #2
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d1f0      	bne.n	8004d48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 0308 	and.w	r3, r3, #8
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d036      	beq.n	8004de0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d016      	beq.n	8004da8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d7a:	4b15      	ldr	r3, [pc, #84]	@ (8004dd0 <HAL_RCC_OscConfig+0x248>)
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d80:	f7fe f846 	bl	8002e10 <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d88:	f7fe f842 	bl	8002e10 <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b02      	cmp	r3, #2
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e167      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc8 <HAL_RCC_OscConfig+0x240>)
 8004d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004d9e:	f003 0302 	and.w	r3, r3, #2
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0f0      	beq.n	8004d88 <HAL_RCC_OscConfig+0x200>
 8004da6:	e01b      	b.n	8004de0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004da8:	4b09      	ldr	r3, [pc, #36]	@ (8004dd0 <HAL_RCC_OscConfig+0x248>)
 8004daa:	2200      	movs	r2, #0
 8004dac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004dae:	f7fe f82f 	bl	8002e10 <HAL_GetTick>
 8004db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004db4:	e00e      	b.n	8004dd4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004db6:	f7fe f82b 	bl	8002e10 <HAL_GetTick>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	693b      	ldr	r3, [r7, #16]
 8004dbe:	1ad3      	subs	r3, r2, r3
 8004dc0:	2b02      	cmp	r3, #2
 8004dc2:	d907      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004dc4:	2303      	movs	r3, #3
 8004dc6:	e150      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
 8004dc8:	40023800 	.word	0x40023800
 8004dcc:	42470000 	.word	0x42470000
 8004dd0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004dd4:	4b88      	ldr	r3, [pc, #544]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004dd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d1ea      	bne.n	8004db6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f003 0304 	and.w	r3, r3, #4
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f000 8097 	beq.w	8004f1c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004dee:	2300      	movs	r3, #0
 8004df0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004df2:	4b81      	ldr	r3, [pc, #516]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004df4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004df6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d10f      	bne.n	8004e1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dfe:	2300      	movs	r3, #0
 8004e00:	60bb      	str	r3, [r7, #8]
 8004e02:	4b7d      	ldr	r3, [pc, #500]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004e04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e06:	4a7c      	ldr	r2, [pc, #496]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004e08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004e0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8004e0e:	4b7a      	ldr	r3, [pc, #488]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e16:	60bb      	str	r3, [r7, #8]
 8004e18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e1a:	2301      	movs	r3, #1
 8004e1c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e1e:	4b77      	ldr	r3, [pc, #476]	@ (8004ffc <HAL_RCC_OscConfig+0x474>)
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d118      	bne.n	8004e5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e2a:	4b74      	ldr	r3, [pc, #464]	@ (8004ffc <HAL_RCC_OscConfig+0x474>)
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	4a73      	ldr	r2, [pc, #460]	@ (8004ffc <HAL_RCC_OscConfig+0x474>)
 8004e30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004e34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e36:	f7fd ffeb 	bl	8002e10 <HAL_GetTick>
 8004e3a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e3c:	e008      	b.n	8004e50 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e3e:	f7fd ffe7 	bl	8002e10 <HAL_GetTick>
 8004e42:	4602      	mov	r2, r0
 8004e44:	693b      	ldr	r3, [r7, #16]
 8004e46:	1ad3      	subs	r3, r2, r3
 8004e48:	2b02      	cmp	r3, #2
 8004e4a:	d901      	bls.n	8004e50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e4c:	2303      	movs	r3, #3
 8004e4e:	e10c      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e50:	4b6a      	ldr	r3, [pc, #424]	@ (8004ffc <HAL_RCC_OscConfig+0x474>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d0f0      	beq.n	8004e3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d106      	bne.n	8004e72 <HAL_RCC_OscConfig+0x2ea>
 8004e64:	4b64      	ldr	r3, [pc, #400]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004e66:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e68:	4a63      	ldr	r2, [pc, #396]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004e6a:	f043 0301 	orr.w	r3, r3, #1
 8004e6e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e70:	e01c      	b.n	8004eac <HAL_RCC_OscConfig+0x324>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	689b      	ldr	r3, [r3, #8]
 8004e76:	2b05      	cmp	r3, #5
 8004e78:	d10c      	bne.n	8004e94 <HAL_RCC_OscConfig+0x30c>
 8004e7a:	4b5f      	ldr	r3, [pc, #380]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004e7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e7e:	4a5e      	ldr	r2, [pc, #376]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004e80:	f043 0304 	orr.w	r3, r3, #4
 8004e84:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e86:	4b5c      	ldr	r3, [pc, #368]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004e88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e8a:	4a5b      	ldr	r2, [pc, #364]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	6713      	str	r3, [r2, #112]	@ 0x70
 8004e92:	e00b      	b.n	8004eac <HAL_RCC_OscConfig+0x324>
 8004e94:	4b58      	ldr	r3, [pc, #352]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004e96:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004e98:	4a57      	ldr	r2, [pc, #348]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004e9a:	f023 0301 	bic.w	r3, r3, #1
 8004e9e:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ea0:	4b55      	ldr	r3, [pc, #340]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ea4:	4a54      	ldr	r2, [pc, #336]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004ea6:	f023 0304 	bic.w	r3, r3, #4
 8004eaa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d015      	beq.n	8004ee0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eb4:	f7fd ffac 	bl	8002e10 <HAL_GetTick>
 8004eb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004eba:	e00a      	b.n	8004ed2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ebc:	f7fd ffa8 	bl	8002e10 <HAL_GetTick>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	693b      	ldr	r3, [r7, #16]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eca:	4293      	cmp	r3, r2
 8004ecc:	d901      	bls.n	8004ed2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004ece:	2303      	movs	r3, #3
 8004ed0:	e0cb      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ed2:	4b49      	ldr	r3, [pc, #292]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004ed4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d0ee      	beq.n	8004ebc <HAL_RCC_OscConfig+0x334>
 8004ede:	e014      	b.n	8004f0a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ee0:	f7fd ff96 	bl	8002e10 <HAL_GetTick>
 8004ee4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ee6:	e00a      	b.n	8004efe <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ee8:	f7fd ff92 	bl	8002e10 <HAL_GetTick>
 8004eec:	4602      	mov	r2, r0
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	1ad3      	subs	r3, r2, r3
 8004ef2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d901      	bls.n	8004efe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004efa:	2303      	movs	r3, #3
 8004efc:	e0b5      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004efe:	4b3e      	ldr	r3, [pc, #248]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004f00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004f02:	f003 0302 	and.w	r3, r3, #2
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1ee      	bne.n	8004ee8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004f0a:	7dfb      	ldrb	r3, [r7, #23]
 8004f0c:	2b01      	cmp	r3, #1
 8004f0e:	d105      	bne.n	8004f1c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f10:	4b39      	ldr	r3, [pc, #228]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f14:	4a38      	ldr	r2, [pc, #224]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004f16:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004f1a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	699b      	ldr	r3, [r3, #24]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	f000 80a1 	beq.w	8005068 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f26:	4b34      	ldr	r3, [pc, #208]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004f28:	689b      	ldr	r3, [r3, #8]
 8004f2a:	f003 030c 	and.w	r3, r3, #12
 8004f2e:	2b08      	cmp	r3, #8
 8004f30:	d05c      	beq.n	8004fec <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	d141      	bne.n	8004fbe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f3a:	4b31      	ldr	r3, [pc, #196]	@ (8005000 <HAL_RCC_OscConfig+0x478>)
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f40:	f7fd ff66 	bl	8002e10 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f46:	e008      	b.n	8004f5a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f48:	f7fd ff62 	bl	8002e10 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d901      	bls.n	8004f5a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f56:	2303      	movs	r3, #3
 8004f58:	e087      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5a:	4b27      	ldr	r3, [pc, #156]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d1f0      	bne.n	8004f48 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	69da      	ldr	r2, [r3, #28]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	6a1b      	ldr	r3, [r3, #32]
 8004f6e:	431a      	orrs	r2, r3
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f74:	019b      	lsls	r3, r3, #6
 8004f76:	431a      	orrs	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f7c:	085b      	lsrs	r3, r3, #1
 8004f7e:	3b01      	subs	r3, #1
 8004f80:	041b      	lsls	r3, r3, #16
 8004f82:	431a      	orrs	r2, r3
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f88:	061b      	lsls	r3, r3, #24
 8004f8a:	491b      	ldr	r1, [pc, #108]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004f8c:	4313      	orrs	r3, r2
 8004f8e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f90:	4b1b      	ldr	r3, [pc, #108]	@ (8005000 <HAL_RCC_OscConfig+0x478>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f96:	f7fd ff3b 	bl	8002e10 <HAL_GetTick>
 8004f9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f9c:	e008      	b.n	8004fb0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f9e:	f7fd ff37 	bl	8002e10 <HAL_GetTick>
 8004fa2:	4602      	mov	r2, r0
 8004fa4:	693b      	ldr	r3, [r7, #16]
 8004fa6:	1ad3      	subs	r3, r2, r3
 8004fa8:	2b02      	cmp	r3, #2
 8004faa:	d901      	bls.n	8004fb0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e05c      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004fb0:	4b11      	ldr	r3, [pc, #68]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d0f0      	beq.n	8004f9e <HAL_RCC_OscConfig+0x416>
 8004fbc:	e054      	b.n	8005068 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004fbe:	4b10      	ldr	r3, [pc, #64]	@ (8005000 <HAL_RCC_OscConfig+0x478>)
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004fc4:	f7fd ff24 	bl	8002e10 <HAL_GetTick>
 8004fc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fca:	e008      	b.n	8004fde <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004fcc:	f7fd ff20 	bl	8002e10 <HAL_GetTick>
 8004fd0:	4602      	mov	r2, r0
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d901      	bls.n	8004fde <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fda:	2303      	movs	r3, #3
 8004fdc:	e045      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fde:	4b06      	ldr	r3, [pc, #24]	@ (8004ff8 <HAL_RCC_OscConfig+0x470>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d1f0      	bne.n	8004fcc <HAL_RCC_OscConfig+0x444>
 8004fea:	e03d      	b.n	8005068 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	699b      	ldr	r3, [r3, #24]
 8004ff0:	2b01      	cmp	r3, #1
 8004ff2:	d107      	bne.n	8005004 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e038      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
 8004ff8:	40023800 	.word	0x40023800
 8004ffc:	40007000 	.word	0x40007000
 8005000:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005004:	4b1b      	ldr	r3, [pc, #108]	@ (8005074 <HAL_RCC_OscConfig+0x4ec>)
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	699b      	ldr	r3, [r3, #24]
 800500e:	2b01      	cmp	r3, #1
 8005010:	d028      	beq.n	8005064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800501c:	429a      	cmp	r2, r3
 800501e:	d121      	bne.n	8005064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800502a:	429a      	cmp	r2, r3
 800502c:	d11a      	bne.n	8005064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005034:	4013      	ands	r3, r2
 8005036:	687a      	ldr	r2, [r7, #4]
 8005038:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800503a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800503c:	4293      	cmp	r3, r2
 800503e:	d111      	bne.n	8005064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504a:	085b      	lsrs	r3, r3, #1
 800504c:	3b01      	subs	r3, #1
 800504e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005050:	429a      	cmp	r2, r3
 8005052:	d107      	bne.n	8005064 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005060:	429a      	cmp	r2, r3
 8005062:	d001      	beq.n	8005068 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005064:	2301      	movs	r3, #1
 8005066:	e000      	b.n	800506a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3718      	adds	r7, #24
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
 8005072:	bf00      	nop
 8005074:	40023800 	.word	0x40023800

08005078 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b084      	sub	sp, #16
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
 8005080:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d101      	bne.n	800508c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e0cc      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800508c:	4b68      	ldr	r3, [pc, #416]	@ (8005230 <HAL_RCC_ClockConfig+0x1b8>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0307 	and.w	r3, r3, #7
 8005094:	683a      	ldr	r2, [r7, #0]
 8005096:	429a      	cmp	r2, r3
 8005098:	d90c      	bls.n	80050b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800509a:	4b65      	ldr	r3, [pc, #404]	@ (8005230 <HAL_RCC_ClockConfig+0x1b8>)
 800509c:	683a      	ldr	r2, [r7, #0]
 800509e:	b2d2      	uxtb	r2, r2
 80050a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80050a2:	4b63      	ldr	r3, [pc, #396]	@ (8005230 <HAL_RCC_ClockConfig+0x1b8>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f003 0307 	and.w	r3, r3, #7
 80050aa:	683a      	ldr	r2, [r7, #0]
 80050ac:	429a      	cmp	r2, r3
 80050ae:	d001      	beq.n	80050b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80050b0:	2301      	movs	r3, #1
 80050b2:	e0b8      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0302 	and.w	r3, r3, #2
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d020      	beq.n	8005102 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f003 0304 	and.w	r3, r3, #4
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d005      	beq.n	80050d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80050cc:	4b59      	ldr	r3, [pc, #356]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80050ce:	689b      	ldr	r3, [r3, #8]
 80050d0:	4a58      	ldr	r2, [pc, #352]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80050d2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80050d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0308 	and.w	r3, r3, #8
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d005      	beq.n	80050f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050e4:	4b53      	ldr	r3, [pc, #332]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	4a52      	ldr	r2, [pc, #328]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80050ea:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80050ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050f0:	4b50      	ldr	r3, [pc, #320]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80050f2:	689b      	ldr	r3, [r3, #8]
 80050f4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689b      	ldr	r3, [r3, #8]
 80050fc:	494d      	ldr	r1, [pc, #308]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80050fe:	4313      	orrs	r3, r2
 8005100:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f003 0301 	and.w	r3, r3, #1
 800510a:	2b00      	cmp	r3, #0
 800510c:	d044      	beq.n	8005198 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d107      	bne.n	8005126 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005116:	4b47      	ldr	r3, [pc, #284]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800511e:	2b00      	cmp	r3, #0
 8005120:	d119      	bne.n	8005156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e07f      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	2b02      	cmp	r3, #2
 800512c:	d003      	beq.n	8005136 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005132:	2b03      	cmp	r3, #3
 8005134:	d107      	bne.n	8005146 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005136:	4b3f      	ldr	r3, [pc, #252]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d109      	bne.n	8005156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e06f      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005146:	4b3b      	ldr	r3, [pc, #236]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d101      	bne.n	8005156 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e067      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005156:	4b37      	ldr	r3, [pc, #220]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	f023 0203 	bic.w	r2, r3, #3
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	685b      	ldr	r3, [r3, #4]
 8005162:	4934      	ldr	r1, [pc, #208]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 8005164:	4313      	orrs	r3, r2
 8005166:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005168:	f7fd fe52 	bl	8002e10 <HAL_GetTick>
 800516c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800516e:	e00a      	b.n	8005186 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005170:	f7fd fe4e 	bl	8002e10 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800517e:	4293      	cmp	r3, r2
 8005180:	d901      	bls.n	8005186 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e04f      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005186:	4b2b      	ldr	r3, [pc, #172]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f003 020c 	and.w	r2, r3, #12
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	429a      	cmp	r2, r3
 8005196:	d1eb      	bne.n	8005170 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005198:	4b25      	ldr	r3, [pc, #148]	@ (8005230 <HAL_RCC_ClockConfig+0x1b8>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0307 	and.w	r3, r3, #7
 80051a0:	683a      	ldr	r2, [r7, #0]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d20c      	bcs.n	80051c0 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80051a6:	4b22      	ldr	r3, [pc, #136]	@ (8005230 <HAL_RCC_ClockConfig+0x1b8>)
 80051a8:	683a      	ldr	r2, [r7, #0]
 80051aa:	b2d2      	uxtb	r2, r2
 80051ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80051ae:	4b20      	ldr	r3, [pc, #128]	@ (8005230 <HAL_RCC_ClockConfig+0x1b8>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f003 0307 	and.w	r3, r3, #7
 80051b6:	683a      	ldr	r2, [r7, #0]
 80051b8:	429a      	cmp	r2, r3
 80051ba:	d001      	beq.n	80051c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e032      	b.n	8005226 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f003 0304 	and.w	r3, r3, #4
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d008      	beq.n	80051de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80051cc:	4b19      	ldr	r3, [pc, #100]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	68db      	ldr	r3, [r3, #12]
 80051d8:	4916      	ldr	r1, [pc, #88]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f003 0308 	and.w	r3, r3, #8
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d009      	beq.n	80051fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051ea:	4b12      	ldr	r3, [pc, #72]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80051ec:	689b      	ldr	r3, [r3, #8]
 80051ee:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	00db      	lsls	r3, r3, #3
 80051f8:	490e      	ldr	r1, [pc, #56]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 80051fa:	4313      	orrs	r3, r2
 80051fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80051fe:	f000 f821 	bl	8005244 <HAL_RCC_GetSysClockFreq>
 8005202:	4602      	mov	r2, r0
 8005204:	4b0b      	ldr	r3, [pc, #44]	@ (8005234 <HAL_RCC_ClockConfig+0x1bc>)
 8005206:	689b      	ldr	r3, [r3, #8]
 8005208:	091b      	lsrs	r3, r3, #4
 800520a:	f003 030f 	and.w	r3, r3, #15
 800520e:	490a      	ldr	r1, [pc, #40]	@ (8005238 <HAL_RCC_ClockConfig+0x1c0>)
 8005210:	5ccb      	ldrb	r3, [r1, r3]
 8005212:	fa22 f303 	lsr.w	r3, r2, r3
 8005216:	4a09      	ldr	r2, [pc, #36]	@ (800523c <HAL_RCC_ClockConfig+0x1c4>)
 8005218:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800521a:	4b09      	ldr	r3, [pc, #36]	@ (8005240 <HAL_RCC_ClockConfig+0x1c8>)
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	4618      	mov	r0, r3
 8005220:	f7fd fdb2 	bl	8002d88 <HAL_InitTick>

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3710      	adds	r7, #16
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	40023c00 	.word	0x40023c00
 8005234:	40023800 	.word	0x40023800
 8005238:	0800a50c 	.word	0x0800a50c
 800523c:	20000000 	.word	0x20000000
 8005240:	20000004 	.word	0x20000004

08005244 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005244:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005248:	b090      	sub	sp, #64	@ 0x40
 800524a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800524c:	2300      	movs	r3, #0
 800524e:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005250:	2300      	movs	r3, #0
 8005252:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005254:	2300      	movs	r3, #0
 8005256:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005258:	2300      	movs	r3, #0
 800525a:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800525c:	4b59      	ldr	r3, [pc, #356]	@ (80053c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800525e:	689b      	ldr	r3, [r3, #8]
 8005260:	f003 030c 	and.w	r3, r3, #12
 8005264:	2b08      	cmp	r3, #8
 8005266:	d00d      	beq.n	8005284 <HAL_RCC_GetSysClockFreq+0x40>
 8005268:	2b08      	cmp	r3, #8
 800526a:	f200 80a1 	bhi.w	80053b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800526e:	2b00      	cmp	r3, #0
 8005270:	d002      	beq.n	8005278 <HAL_RCC_GetSysClockFreq+0x34>
 8005272:	2b04      	cmp	r3, #4
 8005274:	d003      	beq.n	800527e <HAL_RCC_GetSysClockFreq+0x3a>
 8005276:	e09b      	b.n	80053b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005278:	4b53      	ldr	r3, [pc, #332]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800527a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800527c:	e09b      	b.n	80053b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800527e:	4b53      	ldr	r3, [pc, #332]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x188>)
 8005280:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005282:	e098      	b.n	80053b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005284:	4b4f      	ldr	r3, [pc, #316]	@ (80053c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800528c:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800528e:	4b4d      	ldr	r3, [pc, #308]	@ (80053c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005290:	685b      	ldr	r3, [r3, #4]
 8005292:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d028      	beq.n	80052ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800529a:	4b4a      	ldr	r3, [pc, #296]	@ (80053c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	099b      	lsrs	r3, r3, #6
 80052a0:	2200      	movs	r2, #0
 80052a2:	623b      	str	r3, [r7, #32]
 80052a4:	627a      	str	r2, [r7, #36]	@ 0x24
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80052ac:	2100      	movs	r1, #0
 80052ae:	4b47      	ldr	r3, [pc, #284]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x188>)
 80052b0:	fb03 f201 	mul.w	r2, r3, r1
 80052b4:	2300      	movs	r3, #0
 80052b6:	fb00 f303 	mul.w	r3, r0, r3
 80052ba:	4413      	add	r3, r2
 80052bc:	4a43      	ldr	r2, [pc, #268]	@ (80053cc <HAL_RCC_GetSysClockFreq+0x188>)
 80052be:	fba0 1202 	umull	r1, r2, r0, r2
 80052c2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80052c4:	460a      	mov	r2, r1
 80052c6:	62ba      	str	r2, [r7, #40]	@ 0x28
 80052c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80052ca:	4413      	add	r3, r2
 80052cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80052ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d0:	2200      	movs	r2, #0
 80052d2:	61bb      	str	r3, [r7, #24]
 80052d4:	61fa      	str	r2, [r7, #28]
 80052d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80052de:	f7fb fd03 	bl	8000ce8 <__aeabi_uldivmod>
 80052e2:	4602      	mov	r2, r0
 80052e4:	460b      	mov	r3, r1
 80052e6:	4613      	mov	r3, r2
 80052e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80052ea:	e053      	b.n	8005394 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052ec:	4b35      	ldr	r3, [pc, #212]	@ (80053c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	099b      	lsrs	r3, r3, #6
 80052f2:	2200      	movs	r2, #0
 80052f4:	613b      	str	r3, [r7, #16]
 80052f6:	617a      	str	r2, [r7, #20]
 80052f8:	693b      	ldr	r3, [r7, #16]
 80052fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80052fe:	f04f 0b00 	mov.w	fp, #0
 8005302:	4652      	mov	r2, sl
 8005304:	465b      	mov	r3, fp
 8005306:	f04f 0000 	mov.w	r0, #0
 800530a:	f04f 0100 	mov.w	r1, #0
 800530e:	0159      	lsls	r1, r3, #5
 8005310:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005314:	0150      	lsls	r0, r2, #5
 8005316:	4602      	mov	r2, r0
 8005318:	460b      	mov	r3, r1
 800531a:	ebb2 080a 	subs.w	r8, r2, sl
 800531e:	eb63 090b 	sbc.w	r9, r3, fp
 8005322:	f04f 0200 	mov.w	r2, #0
 8005326:	f04f 0300 	mov.w	r3, #0
 800532a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800532e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005332:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005336:	ebb2 0408 	subs.w	r4, r2, r8
 800533a:	eb63 0509 	sbc.w	r5, r3, r9
 800533e:	f04f 0200 	mov.w	r2, #0
 8005342:	f04f 0300 	mov.w	r3, #0
 8005346:	00eb      	lsls	r3, r5, #3
 8005348:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800534c:	00e2      	lsls	r2, r4, #3
 800534e:	4614      	mov	r4, r2
 8005350:	461d      	mov	r5, r3
 8005352:	eb14 030a 	adds.w	r3, r4, sl
 8005356:	603b      	str	r3, [r7, #0]
 8005358:	eb45 030b 	adc.w	r3, r5, fp
 800535c:	607b      	str	r3, [r7, #4]
 800535e:	f04f 0200 	mov.w	r2, #0
 8005362:	f04f 0300 	mov.w	r3, #0
 8005366:	e9d7 4500 	ldrd	r4, r5, [r7]
 800536a:	4629      	mov	r1, r5
 800536c:	028b      	lsls	r3, r1, #10
 800536e:	4621      	mov	r1, r4
 8005370:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005374:	4621      	mov	r1, r4
 8005376:	028a      	lsls	r2, r1, #10
 8005378:	4610      	mov	r0, r2
 800537a:	4619      	mov	r1, r3
 800537c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800537e:	2200      	movs	r2, #0
 8005380:	60bb      	str	r3, [r7, #8]
 8005382:	60fa      	str	r2, [r7, #12]
 8005384:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005388:	f7fb fcae 	bl	8000ce8 <__aeabi_uldivmod>
 800538c:	4602      	mov	r2, r0
 800538e:	460b      	mov	r3, r1
 8005390:	4613      	mov	r3, r2
 8005392:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005394:	4b0b      	ldr	r3, [pc, #44]	@ (80053c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8005396:	685b      	ldr	r3, [r3, #4]
 8005398:	0c1b      	lsrs	r3, r3, #16
 800539a:	f003 0303 	and.w	r3, r3, #3
 800539e:	3301      	adds	r3, #1
 80053a0:	005b      	lsls	r3, r3, #1
 80053a2:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80053a4:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80053a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80053ac:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80053ae:	e002      	b.n	80053b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053b0:	4b05      	ldr	r3, [pc, #20]	@ (80053c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80053b2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80053b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3740      	adds	r7, #64	@ 0x40
 80053bc:	46bd      	mov	sp, r7
 80053be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053c2:	bf00      	nop
 80053c4:	40023800 	.word	0x40023800
 80053c8:	00f42400 	.word	0x00f42400
 80053cc:	017d7840 	.word	0x017d7840

080053d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053d0:	b480      	push	{r7}
 80053d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053d4:	4b03      	ldr	r3, [pc, #12]	@ (80053e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80053d6:	681b      	ldr	r3, [r3, #0]
}
 80053d8:	4618      	mov	r0, r3
 80053da:	46bd      	mov	sp, r7
 80053dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e0:	4770      	bx	lr
 80053e2:	bf00      	nop
 80053e4:	20000000 	.word	0x20000000

080053e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053e8:	b580      	push	{r7, lr}
 80053ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053ec:	f7ff fff0 	bl	80053d0 <HAL_RCC_GetHCLKFreq>
 80053f0:	4602      	mov	r2, r0
 80053f2:	4b05      	ldr	r3, [pc, #20]	@ (8005408 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	0a9b      	lsrs	r3, r3, #10
 80053f8:	f003 0307 	and.w	r3, r3, #7
 80053fc:	4903      	ldr	r1, [pc, #12]	@ (800540c <HAL_RCC_GetPCLK1Freq+0x24>)
 80053fe:	5ccb      	ldrb	r3, [r1, r3]
 8005400:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005404:	4618      	mov	r0, r3
 8005406:	bd80      	pop	{r7, pc}
 8005408:	40023800 	.word	0x40023800
 800540c:	0800a51c 	.word	0x0800a51c

08005410 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005410:	b580      	push	{r7, lr}
 8005412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005414:	f7ff ffdc 	bl	80053d0 <HAL_RCC_GetHCLKFreq>
 8005418:	4602      	mov	r2, r0
 800541a:	4b05      	ldr	r3, [pc, #20]	@ (8005430 <HAL_RCC_GetPCLK2Freq+0x20>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	0b5b      	lsrs	r3, r3, #13
 8005420:	f003 0307 	and.w	r3, r3, #7
 8005424:	4903      	ldr	r1, [pc, #12]	@ (8005434 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005426:	5ccb      	ldrb	r3, [r1, r3]
 8005428:	fa22 f303 	lsr.w	r3, r2, r3
}
 800542c:	4618      	mov	r0, r3
 800542e:	bd80      	pop	{r7, pc}
 8005430:	40023800 	.word	0x40023800
 8005434:	0800a51c 	.word	0x0800a51c

08005438 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b082      	sub	sp, #8
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d101      	bne.n	800544a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e07b      	b.n	8005542 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544e:	2b00      	cmp	r3, #0
 8005450:	d108      	bne.n	8005464 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800545a:	d009      	beq.n	8005470 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	61da      	str	r2, [r3, #28]
 8005462:	e005      	b.n	8005470 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	2200      	movs	r2, #0
 8005474:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800547c:	b2db      	uxtb	r3, r3
 800547e:	2b00      	cmp	r3, #0
 8005480:	d106      	bne.n	8005490 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fd fa78 	bl	8002980 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2202      	movs	r2, #2
 8005494:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	681b      	ldr	r3, [r3, #0]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80054a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	685b      	ldr	r3, [r3, #4]
 80054ac:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80054b8:	431a      	orrs	r2, r3
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	68db      	ldr	r3, [r3, #12]
 80054be:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80054c2:	431a      	orrs	r2, r3
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	431a      	orrs	r2, r3
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	f003 0301 	and.w	r3, r3, #1
 80054d6:	431a      	orrs	r2, r3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	699b      	ldr	r3, [r3, #24]
 80054dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80054e0:	431a      	orrs	r2, r3
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	69db      	ldr	r3, [r3, #28]
 80054e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a1b      	ldr	r3, [r3, #32]
 80054f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054f4:	ea42 0103 	orr.w	r1, r2, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054fc:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	699b      	ldr	r3, [r3, #24]
 800550c:	0c1b      	lsrs	r3, r3, #16
 800550e:	f003 0104 	and.w	r1, r3, #4
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005516:	f003 0210 	and.w	r2, r3, #16
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	430a      	orrs	r2, r1
 8005520:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	69da      	ldr	r2, [r3, #28]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005530:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2200      	movs	r2, #0
 8005536:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	2201      	movs	r2, #1
 800553c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005540:	2300      	movs	r3, #0
}
 8005542:	4618      	mov	r0, r3
 8005544:	3708      	adds	r7, #8
 8005546:	46bd      	mov	sp, r7
 8005548:	bd80      	pop	{r7, pc}

0800554a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800554a:	b580      	push	{r7, lr}
 800554c:	b088      	sub	sp, #32
 800554e:	af00      	add	r7, sp, #0
 8005550:	60f8      	str	r0, [r7, #12]
 8005552:	60b9      	str	r1, [r7, #8]
 8005554:	603b      	str	r3, [r7, #0]
 8005556:	4613      	mov	r3, r2
 8005558:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800555a:	f7fd fc59 	bl	8002e10 <HAL_GetTick>
 800555e:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8005560:	88fb      	ldrh	r3, [r7, #6]
 8005562:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800556a:	b2db      	uxtb	r3, r3
 800556c:	2b01      	cmp	r3, #1
 800556e:	d001      	beq.n	8005574 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8005570:	2302      	movs	r3, #2
 8005572:	e12a      	b.n	80057ca <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8005574:	68bb      	ldr	r3, [r7, #8]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d002      	beq.n	8005580 <HAL_SPI_Transmit+0x36>
 800557a:	88fb      	ldrh	r3, [r7, #6]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e122      	b.n	80057ca <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800558a:	2b01      	cmp	r3, #1
 800558c:	d101      	bne.n	8005592 <HAL_SPI_Transmit+0x48>
 800558e:	2302      	movs	r3, #2
 8005590:	e11b      	b.n	80057ca <HAL_SPI_Transmit+0x280>
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	2201      	movs	r2, #1
 8005596:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2203      	movs	r2, #3
 800559e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2200      	movs	r2, #0
 80055a6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	88fa      	ldrh	r2, [r7, #6]
 80055b2:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	88fa      	ldrh	r2, [r7, #6]
 80055b8:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	2200      	movs	r2, #0
 80055be:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	2200      	movs	r2, #0
 80055ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	2200      	movs	r2, #0
 80055d0:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	2200      	movs	r2, #0
 80055d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055e0:	d10f      	bne.n	8005602 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055f0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005600:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800560c:	2b40      	cmp	r3, #64	@ 0x40
 800560e:	d007      	beq.n	8005620 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800561e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	68db      	ldr	r3, [r3, #12]
 8005624:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005628:	d152      	bne.n	80056d0 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	685b      	ldr	r3, [r3, #4]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d002      	beq.n	8005638 <HAL_SPI_Transmit+0xee>
 8005632:	8b7b      	ldrh	r3, [r7, #26]
 8005634:	2b01      	cmp	r3, #1
 8005636:	d145      	bne.n	80056c4 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800563c:	881a      	ldrh	r2, [r3, #0]
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005648:	1c9a      	adds	r2, r3, #2
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005652:	b29b      	uxth	r3, r3
 8005654:	3b01      	subs	r3, #1
 8005656:	b29a      	uxth	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800565c:	e032      	b.n	80056c4 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	689b      	ldr	r3, [r3, #8]
 8005664:	f003 0302 	and.w	r3, r3, #2
 8005668:	2b02      	cmp	r3, #2
 800566a:	d112      	bne.n	8005692 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005670:	881a      	ldrh	r2, [r3, #0]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800567c:	1c9a      	adds	r2, r3, #2
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005686:	b29b      	uxth	r3, r3
 8005688:	3b01      	subs	r3, #1
 800568a:	b29a      	uxth	r2, r3
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	86da      	strh	r2, [r3, #54]	@ 0x36
 8005690:	e018      	b.n	80056c4 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005692:	f7fd fbbd 	bl	8002e10 <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	429a      	cmp	r2, r3
 80056a0:	d803      	bhi.n	80056aa <HAL_SPI_Transmit+0x160>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056a8:	d102      	bne.n	80056b0 <HAL_SPI_Transmit+0x166>
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d109      	bne.n	80056c4 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	2200      	movs	r2, #0
 80056bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80056c0:	2303      	movs	r3, #3
 80056c2:	e082      	b.n	80057ca <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056c8:	b29b      	uxth	r3, r3
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d1c7      	bne.n	800565e <HAL_SPI_Transmit+0x114>
 80056ce:	e053      	b.n	8005778 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d002      	beq.n	80056de <HAL_SPI_Transmit+0x194>
 80056d8:	8b7b      	ldrh	r3, [r7, #26]
 80056da:	2b01      	cmp	r3, #1
 80056dc:	d147      	bne.n	800576e <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	330c      	adds	r3, #12
 80056e8:	7812      	ldrb	r2, [r2, #0]
 80056ea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80056f0:	1c5a      	adds	r2, r3, #1
 80056f2:	68fb      	ldr	r3, [r7, #12]
 80056f4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	3b01      	subs	r3, #1
 80056fe:	b29a      	uxth	r2, r3
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005704:	e033      	b.n	800576e <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f003 0302 	and.w	r3, r3, #2
 8005710:	2b02      	cmp	r3, #2
 8005712:	d113      	bne.n	800573c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	330c      	adds	r3, #12
 800571e:	7812      	ldrb	r2, [r2, #0]
 8005720:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005726:	1c5a      	adds	r2, r3, #1
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005730:	b29b      	uxth	r3, r3
 8005732:	3b01      	subs	r3, #1
 8005734:	b29a      	uxth	r2, r3
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	86da      	strh	r2, [r3, #54]	@ 0x36
 800573a:	e018      	b.n	800576e <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800573c:	f7fd fb68 	bl	8002e10 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	69fb      	ldr	r3, [r7, #28]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	683a      	ldr	r2, [r7, #0]
 8005748:	429a      	cmp	r2, r3
 800574a:	d803      	bhi.n	8005754 <HAL_SPI_Transmit+0x20a>
 800574c:	683b      	ldr	r3, [r7, #0]
 800574e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005752:	d102      	bne.n	800575a <HAL_SPI_Transmit+0x210>
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d109      	bne.n	800576e <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	2201      	movs	r2, #1
 800575e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800576a:	2303      	movs	r3, #3
 800576c:	e02d      	b.n	80057ca <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8005772:	b29b      	uxth	r3, r3
 8005774:	2b00      	cmp	r3, #0
 8005776:	d1c6      	bne.n	8005706 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005778:	69fa      	ldr	r2, [r7, #28]
 800577a:	6839      	ldr	r1, [r7, #0]
 800577c:	68f8      	ldr	r0, [r7, #12]
 800577e:	f000 f8b1 	bl	80058e4 <SPI_EndRxTxTransaction>
 8005782:	4603      	mov	r3, r0
 8005784:	2b00      	cmp	r3, #0
 8005786:	d002      	beq.n	800578e <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2220      	movs	r2, #32
 800578c:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	2b00      	cmp	r3, #0
 8005794:	d10a      	bne.n	80057ac <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005796:	2300      	movs	r3, #0
 8005798:	617b      	str	r3, [r7, #20]
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	68db      	ldr	r3, [r3, #12]
 80057a0:	617b      	str	r3, [r7, #20]
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	689b      	ldr	r3, [r3, #8]
 80057a8:	617b      	str	r3, [r7, #20]
 80057aa:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2200      	movs	r2, #0
 80057b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	d001      	beq.n	80057c8 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 80057c4:	2301      	movs	r3, #1
 80057c6:	e000      	b.n	80057ca <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 80057c8:	2300      	movs	r3, #0
  }
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	3720      	adds	r7, #32
 80057ce:	46bd      	mov	sp, r7
 80057d0:	bd80      	pop	{r7, pc}
	...

080057d4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b088      	sub	sp, #32
 80057d8:	af00      	add	r7, sp, #0
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	603b      	str	r3, [r7, #0]
 80057e0:	4613      	mov	r3, r2
 80057e2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80057e4:	f7fd fb14 	bl	8002e10 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ec:	1a9b      	subs	r3, r3, r2
 80057ee:	683a      	ldr	r2, [r7, #0]
 80057f0:	4413      	add	r3, r2
 80057f2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80057f4:	f7fd fb0c 	bl	8002e10 <HAL_GetTick>
 80057f8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80057fa:	4b39      	ldr	r3, [pc, #228]	@ (80058e0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	015b      	lsls	r3, r3, #5
 8005800:	0d1b      	lsrs	r3, r3, #20
 8005802:	69fa      	ldr	r2, [r7, #28]
 8005804:	fb02 f303 	mul.w	r3, r2, r3
 8005808:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800580a:	e054      	b.n	80058b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800580c:	683b      	ldr	r3, [r7, #0]
 800580e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005812:	d050      	beq.n	80058b6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005814:	f7fd fafc 	bl	8002e10 <HAL_GetTick>
 8005818:	4602      	mov	r2, r0
 800581a:	69bb      	ldr	r3, [r7, #24]
 800581c:	1ad3      	subs	r3, r2, r3
 800581e:	69fa      	ldr	r2, [r7, #28]
 8005820:	429a      	cmp	r2, r3
 8005822:	d902      	bls.n	800582a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005824:	69fb      	ldr	r3, [r7, #28]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d13d      	bne.n	80058a6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8005838:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005842:	d111      	bne.n	8005868 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800584c:	d004      	beq.n	8005858 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005856:	d107      	bne.n	8005868 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005866:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800586c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005870:	d10f      	bne.n	8005892 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005880:	601a      	str	r2, [r3, #0]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005890:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	2201      	movs	r2, #1
 8005896:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80058a2:	2303      	movs	r3, #3
 80058a4:	e017      	b.n	80058d6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d101      	bne.n	80058b0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058ac:	2300      	movs	r3, #0
 80058ae:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	3b01      	subs	r3, #1
 80058b4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	689a      	ldr	r2, [r3, #8]
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	4013      	ands	r3, r2
 80058c0:	68ba      	ldr	r2, [r7, #8]
 80058c2:	429a      	cmp	r2, r3
 80058c4:	bf0c      	ite	eq
 80058c6:	2301      	moveq	r3, #1
 80058c8:	2300      	movne	r3, #0
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	461a      	mov	r2, r3
 80058ce:	79fb      	ldrb	r3, [r7, #7]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d19b      	bne.n	800580c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058d4:	2300      	movs	r3, #0
}
 80058d6:	4618      	mov	r0, r3
 80058d8:	3720      	adds	r7, #32
 80058da:	46bd      	mov	sp, r7
 80058dc:	bd80      	pop	{r7, pc}
 80058de:	bf00      	nop
 80058e0:	20000000 	.word	0x20000000

080058e4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b088      	sub	sp, #32
 80058e8:	af02      	add	r7, sp, #8
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	9300      	str	r3, [sp, #0]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	2201      	movs	r2, #1
 80058f8:	2102      	movs	r1, #2
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f7ff ff6a 	bl	80057d4 <SPI_WaitFlagStateUntilTimeout>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d007      	beq.n	8005916 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800590a:	f043 0220 	orr.w	r2, r3, #32
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e032      	b.n	800597c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005916:	4b1b      	ldr	r3, [pc, #108]	@ (8005984 <SPI_EndRxTxTransaction+0xa0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a1b      	ldr	r2, [pc, #108]	@ (8005988 <SPI_EndRxTxTransaction+0xa4>)
 800591c:	fba2 2303 	umull	r2, r3, r2, r3
 8005920:	0d5b      	lsrs	r3, r3, #21
 8005922:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8005926:	fb02 f303 	mul.w	r3, r2, r3
 800592a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005934:	d112      	bne.n	800595c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	9300      	str	r3, [sp, #0]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	2200      	movs	r2, #0
 800593e:	2180      	movs	r1, #128	@ 0x80
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f7ff ff47 	bl	80057d4 <SPI_WaitFlagStateUntilTimeout>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d016      	beq.n	800597a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005950:	f043 0220 	orr.w	r2, r3, #32
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8005958:	2303      	movs	r3, #3
 800595a:	e00f      	b.n	800597c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00a      	beq.n	8005978 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8005962:	697b      	ldr	r3, [r7, #20]
 8005964:	3b01      	subs	r3, #1
 8005966:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	689b      	ldr	r3, [r3, #8]
 800596e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005972:	2b80      	cmp	r3, #128	@ 0x80
 8005974:	d0f2      	beq.n	800595c <SPI_EndRxTxTransaction+0x78>
 8005976:	e000      	b.n	800597a <SPI_EndRxTxTransaction+0x96>
        break;
 8005978:	bf00      	nop
  }

  return HAL_OK;
 800597a:	2300      	movs	r3, #0
}
 800597c:	4618      	mov	r0, r3
 800597e:	3718      	adds	r7, #24
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	20000000 	.word	0x20000000
 8005988:	165e9f81 	.word	0x165e9f81

0800598c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d101      	bne.n	800599e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800599a:	2301      	movs	r3, #1
 800599c:	e042      	b.n	8005a24 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059a4:	b2db      	uxtb	r3, r3
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d106      	bne.n	80059b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7fd f82c 	bl	8002a10 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2224      	movs	r2, #36	@ 0x24
 80059bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	68da      	ldr	r2, [r3, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80059ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f973 	bl	8005cbc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	691a      	ldr	r2, [r3, #16]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	695a      	ldr	r2, [r3, #20]
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80059f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68da      	ldr	r2, [r3, #12]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005a04:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2220      	movs	r2, #32
 8005a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2220      	movs	r2, #32
 8005a18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2200      	movs	r2, #0
 8005a20:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005a22:	2300      	movs	r3, #0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b08a      	sub	sp, #40	@ 0x28
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	603b      	str	r3, [r7, #0]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005a3c:	2300      	movs	r3, #0
 8005a3e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a46:	b2db      	uxtb	r3, r3
 8005a48:	2b20      	cmp	r3, #32
 8005a4a:	d175      	bne.n	8005b38 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d002      	beq.n	8005a58 <HAL_UART_Transmit+0x2c>
 8005a52:	88fb      	ldrh	r3, [r7, #6]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d101      	bne.n	8005a5c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005a58:	2301      	movs	r3, #1
 8005a5a:	e06e      	b.n	8005b3a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2221      	movs	r2, #33	@ 0x21
 8005a66:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a6a:	f7fd f9d1 	bl	8002e10 <HAL_GetTick>
 8005a6e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	88fa      	ldrh	r2, [r7, #6]
 8005a74:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	88fa      	ldrh	r2, [r7, #6]
 8005a7a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a84:	d108      	bne.n	8005a98 <HAL_UART_Transmit+0x6c>
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d104      	bne.n	8005a98 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	61bb      	str	r3, [r7, #24]
 8005a96:	e003      	b.n	8005aa0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005a98:	68bb      	ldr	r3, [r7, #8]
 8005a9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005aa0:	e02e      	b.n	8005b00 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	9300      	str	r3, [sp, #0]
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	2180      	movs	r1, #128	@ 0x80
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f000 f848 	bl	8005b42 <UART_WaitOnFlagUntilTimeout>
 8005ab2:	4603      	mov	r3, r0
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d005      	beq.n	8005ac4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2220      	movs	r2, #32
 8005abc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005ac0:	2303      	movs	r3, #3
 8005ac2:	e03a      	b.n	8005b3a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d10b      	bne.n	8005ae2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	881b      	ldrh	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ad8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	3302      	adds	r3, #2
 8005ade:	61bb      	str	r3, [r7, #24]
 8005ae0:	e007      	b.n	8005af2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005ae2:	69fb      	ldr	r3, [r7, #28]
 8005ae4:	781a      	ldrb	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005aec:	69fb      	ldr	r3, [r7, #28]
 8005aee:	3301      	adds	r3, #1
 8005af0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	3b01      	subs	r3, #1
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1cb      	bne.n	8005aa2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2200      	movs	r2, #0
 8005b12:	2140      	movs	r1, #64	@ 0x40
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f000 f814 	bl	8005b42 <UART_WaitOnFlagUntilTimeout>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d005      	beq.n	8005b2c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005b28:	2303      	movs	r3, #3
 8005b2a:	e006      	b.n	8005b3a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2220      	movs	r2, #32
 8005b30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005b34:	2300      	movs	r3, #0
 8005b36:	e000      	b.n	8005b3a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005b38:	2302      	movs	r3, #2
  }
}
 8005b3a:	4618      	mov	r0, r3
 8005b3c:	3720      	adds	r7, #32
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b086      	sub	sp, #24
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	60f8      	str	r0, [r7, #12]
 8005b4a:	60b9      	str	r1, [r7, #8]
 8005b4c:	603b      	str	r3, [r7, #0]
 8005b4e:	4613      	mov	r3, r2
 8005b50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b52:	e03b      	b.n	8005bcc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b54:	6a3b      	ldr	r3, [r7, #32]
 8005b56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5a:	d037      	beq.n	8005bcc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b5c:	f7fd f958 	bl	8002e10 <HAL_GetTick>
 8005b60:	4602      	mov	r2, r0
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	1ad3      	subs	r3, r2, r3
 8005b66:	6a3a      	ldr	r2, [r7, #32]
 8005b68:	429a      	cmp	r2, r3
 8005b6a:	d302      	bcc.n	8005b72 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b6c:	6a3b      	ldr	r3, [r7, #32]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d101      	bne.n	8005b76 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005b72:	2303      	movs	r3, #3
 8005b74:	e03a      	b.n	8005bec <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	68db      	ldr	r3, [r3, #12]
 8005b7c:	f003 0304 	and.w	r3, r3, #4
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d023      	beq.n	8005bcc <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	2b80      	cmp	r3, #128	@ 0x80
 8005b88:	d020      	beq.n	8005bcc <UART_WaitOnFlagUntilTimeout+0x8a>
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	2b40      	cmp	r3, #64	@ 0x40
 8005b8e:	d01d      	beq.n	8005bcc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f003 0308 	and.w	r3, r3, #8
 8005b9a:	2b08      	cmp	r3, #8
 8005b9c:	d116      	bne.n	8005bcc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	617b      	str	r3, [r7, #20]
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	617b      	str	r3, [r7, #20]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	617b      	str	r3, [r7, #20]
 8005bb2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005bb4:	68f8      	ldr	r0, [r7, #12]
 8005bb6:	f000 f81d 	bl	8005bf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	2208      	movs	r2, #8
 8005bbe:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	2200      	movs	r2, #0
 8005bc4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	e00f      	b.n	8005bec <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	4013      	ands	r3, r2
 8005bd6:	68ba      	ldr	r2, [r7, #8]
 8005bd8:	429a      	cmp	r2, r3
 8005bda:	bf0c      	ite	eq
 8005bdc:	2301      	moveq	r3, #1
 8005bde:	2300      	movne	r3, #0
 8005be0:	b2db      	uxtb	r3, r3
 8005be2:	461a      	mov	r2, r3
 8005be4:	79fb      	ldrb	r3, [r7, #7]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d0b4      	beq.n	8005b54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005bea:	2300      	movs	r3, #0
}
 8005bec:	4618      	mov	r0, r3
 8005bee:	3718      	adds	r7, #24
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	bd80      	pop	{r7, pc}

08005bf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005bf4:	b480      	push	{r7}
 8005bf6:	b095      	sub	sp, #84	@ 0x54
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	330c      	adds	r3, #12
 8005c02:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c06:	e853 3f00 	ldrex	r3, [r3]
 8005c0a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005c0c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c0e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c12:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	330c      	adds	r3, #12
 8005c1a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005c1c:	643a      	str	r2, [r7, #64]	@ 0x40
 8005c1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c20:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005c22:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005c24:	e841 2300 	strex	r3, r2, [r1]
 8005c28:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005c2a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d1e5      	bne.n	8005bfc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	3314      	adds	r3, #20
 8005c36:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c38:	6a3b      	ldr	r3, [r7, #32]
 8005c3a:	e853 3f00 	ldrex	r3, [r3]
 8005c3e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c40:	69fb      	ldr	r3, [r7, #28]
 8005c42:	f023 0301 	bic.w	r3, r3, #1
 8005c46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	3314      	adds	r3, #20
 8005c4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005c50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c58:	e841 2300 	strex	r3, r2, [r1]
 8005c5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1e5      	bne.n	8005c30 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c68:	2b01      	cmp	r3, #1
 8005c6a:	d119      	bne.n	8005ca0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	330c      	adds	r3, #12
 8005c72:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	e853 3f00 	ldrex	r3, [r3]
 8005c7a:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c7c:	68bb      	ldr	r3, [r7, #8]
 8005c7e:	f023 0310 	bic.w	r3, r3, #16
 8005c82:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	330c      	adds	r3, #12
 8005c8a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c8c:	61ba      	str	r2, [r7, #24]
 8005c8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c90:	6979      	ldr	r1, [r7, #20]
 8005c92:	69ba      	ldr	r2, [r7, #24]
 8005c94:	e841 2300 	strex	r3, r2, [r1]
 8005c98:	613b      	str	r3, [r7, #16]
   return(result);
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d1e5      	bne.n	8005c6c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2220      	movs	r2, #32
 8005ca4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2200      	movs	r2, #0
 8005cac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005cae:	bf00      	nop
 8005cb0:	3754      	adds	r7, #84	@ 0x54
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb8:	4770      	bx	lr
	...

08005cbc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005cc0:	b0c0      	sub	sp, #256	@ 0x100
 8005cc2:	af00      	add	r7, sp, #0
 8005cc4:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	691b      	ldr	r3, [r3, #16]
 8005cd0:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd8:	68d9      	ldr	r1, [r3, #12]
 8005cda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	ea40 0301 	orr.w	r3, r0, r1
 8005ce4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ce6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf0:	691b      	ldr	r3, [r3, #16]
 8005cf2:	431a      	orrs	r2, r3
 8005cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf8:	695b      	ldr	r3, [r3, #20]
 8005cfa:	431a      	orrs	r2, r3
 8005cfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d00:	69db      	ldr	r3, [r3, #28]
 8005d02:	4313      	orrs	r3, r2
 8005d04:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005d08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	68db      	ldr	r3, [r3, #12]
 8005d10:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005d14:	f021 010c 	bic.w	r1, r1, #12
 8005d18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d1c:	681a      	ldr	r2, [r3, #0]
 8005d1e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005d22:	430b      	orrs	r3, r1
 8005d24:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005d26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d36:	6999      	ldr	r1, [r3, #24]
 8005d38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d3c:	681a      	ldr	r2, [r3, #0]
 8005d3e:	ea40 0301 	orr.w	r3, r0, r1
 8005d42:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005d44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	4b8f      	ldr	r3, [pc, #572]	@ (8005f88 <UART_SetConfig+0x2cc>)
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d005      	beq.n	8005d5c <UART_SetConfig+0xa0>
 8005d50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d54:	681a      	ldr	r2, [r3, #0]
 8005d56:	4b8d      	ldr	r3, [pc, #564]	@ (8005f8c <UART_SetConfig+0x2d0>)
 8005d58:	429a      	cmp	r2, r3
 8005d5a:	d104      	bne.n	8005d66 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005d5c:	f7ff fb58 	bl	8005410 <HAL_RCC_GetPCLK2Freq>
 8005d60:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005d64:	e003      	b.n	8005d6e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d66:	f7ff fb3f 	bl	80053e8 <HAL_RCC_GetPCLK1Freq>
 8005d6a:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d72:	69db      	ldr	r3, [r3, #28]
 8005d74:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d78:	f040 810c 	bne.w	8005f94 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d7c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d80:	2200      	movs	r2, #0
 8005d82:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d86:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005d8a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005d8e:	4622      	mov	r2, r4
 8005d90:	462b      	mov	r3, r5
 8005d92:	1891      	adds	r1, r2, r2
 8005d94:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005d96:	415b      	adcs	r3, r3
 8005d98:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d9a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d9e:	4621      	mov	r1, r4
 8005da0:	eb12 0801 	adds.w	r8, r2, r1
 8005da4:	4629      	mov	r1, r5
 8005da6:	eb43 0901 	adc.w	r9, r3, r1
 8005daa:	f04f 0200 	mov.w	r2, #0
 8005dae:	f04f 0300 	mov.w	r3, #0
 8005db2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005db6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005dba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005dbe:	4690      	mov	r8, r2
 8005dc0:	4699      	mov	r9, r3
 8005dc2:	4623      	mov	r3, r4
 8005dc4:	eb18 0303 	adds.w	r3, r8, r3
 8005dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005dcc:	462b      	mov	r3, r5
 8005dce:	eb49 0303 	adc.w	r3, r9, r3
 8005dd2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005de2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005de6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005dea:	460b      	mov	r3, r1
 8005dec:	18db      	adds	r3, r3, r3
 8005dee:	653b      	str	r3, [r7, #80]	@ 0x50
 8005df0:	4613      	mov	r3, r2
 8005df2:	eb42 0303 	adc.w	r3, r2, r3
 8005df6:	657b      	str	r3, [r7, #84]	@ 0x54
 8005df8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005dfc:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005e00:	f7fa ff72 	bl	8000ce8 <__aeabi_uldivmod>
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4b61      	ldr	r3, [pc, #388]	@ (8005f90 <UART_SetConfig+0x2d4>)
 8005e0a:	fba3 2302 	umull	r2, r3, r3, r2
 8005e0e:	095b      	lsrs	r3, r3, #5
 8005e10:	011c      	lsls	r4, r3, #4
 8005e12:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e16:	2200      	movs	r2, #0
 8005e18:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005e1c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005e20:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005e24:	4642      	mov	r2, r8
 8005e26:	464b      	mov	r3, r9
 8005e28:	1891      	adds	r1, r2, r2
 8005e2a:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005e2c:	415b      	adcs	r3, r3
 8005e2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005e30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005e34:	4641      	mov	r1, r8
 8005e36:	eb12 0a01 	adds.w	sl, r2, r1
 8005e3a:	4649      	mov	r1, r9
 8005e3c:	eb43 0b01 	adc.w	fp, r3, r1
 8005e40:	f04f 0200 	mov.w	r2, #0
 8005e44:	f04f 0300 	mov.w	r3, #0
 8005e48:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005e4c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005e50:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005e54:	4692      	mov	sl, r2
 8005e56:	469b      	mov	fp, r3
 8005e58:	4643      	mov	r3, r8
 8005e5a:	eb1a 0303 	adds.w	r3, sl, r3
 8005e5e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005e62:	464b      	mov	r3, r9
 8005e64:	eb4b 0303 	adc.w	r3, fp, r3
 8005e68:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e70:	685b      	ldr	r3, [r3, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e78:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005e7c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e80:	460b      	mov	r3, r1
 8005e82:	18db      	adds	r3, r3, r3
 8005e84:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e86:	4613      	mov	r3, r2
 8005e88:	eb42 0303 	adc.w	r3, r2, r3
 8005e8c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e8e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e92:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005e96:	f7fa ff27 	bl	8000ce8 <__aeabi_uldivmod>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4611      	mov	r1, r2
 8005ea0:	4b3b      	ldr	r3, [pc, #236]	@ (8005f90 <UART_SetConfig+0x2d4>)
 8005ea2:	fba3 2301 	umull	r2, r3, r3, r1
 8005ea6:	095b      	lsrs	r3, r3, #5
 8005ea8:	2264      	movs	r2, #100	@ 0x64
 8005eaa:	fb02 f303 	mul.w	r3, r2, r3
 8005eae:	1acb      	subs	r3, r1, r3
 8005eb0:	00db      	lsls	r3, r3, #3
 8005eb2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005eb6:	4b36      	ldr	r3, [pc, #216]	@ (8005f90 <UART_SetConfig+0x2d4>)
 8005eb8:	fba3 2302 	umull	r2, r3, r3, r2
 8005ebc:	095b      	lsrs	r3, r3, #5
 8005ebe:	005b      	lsls	r3, r3, #1
 8005ec0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005ec4:	441c      	add	r4, r3
 8005ec6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005ed0:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005ed4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005ed8:	4642      	mov	r2, r8
 8005eda:	464b      	mov	r3, r9
 8005edc:	1891      	adds	r1, r2, r2
 8005ede:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005ee0:	415b      	adcs	r3, r3
 8005ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005ee4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005ee8:	4641      	mov	r1, r8
 8005eea:	1851      	adds	r1, r2, r1
 8005eec:	6339      	str	r1, [r7, #48]	@ 0x30
 8005eee:	4649      	mov	r1, r9
 8005ef0:	414b      	adcs	r3, r1
 8005ef2:	637b      	str	r3, [r7, #52]	@ 0x34
 8005ef4:	f04f 0200 	mov.w	r2, #0
 8005ef8:	f04f 0300 	mov.w	r3, #0
 8005efc:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005f00:	4659      	mov	r1, fp
 8005f02:	00cb      	lsls	r3, r1, #3
 8005f04:	4651      	mov	r1, sl
 8005f06:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005f0a:	4651      	mov	r1, sl
 8005f0c:	00ca      	lsls	r2, r1, #3
 8005f0e:	4610      	mov	r0, r2
 8005f10:	4619      	mov	r1, r3
 8005f12:	4603      	mov	r3, r0
 8005f14:	4642      	mov	r2, r8
 8005f16:	189b      	adds	r3, r3, r2
 8005f18:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005f1c:	464b      	mov	r3, r9
 8005f1e:	460a      	mov	r2, r1
 8005f20:	eb42 0303 	adc.w	r3, r2, r3
 8005f24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005f28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f2c:	685b      	ldr	r3, [r3, #4]
 8005f2e:	2200      	movs	r2, #0
 8005f30:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005f34:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005f38:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005f3c:	460b      	mov	r3, r1
 8005f3e:	18db      	adds	r3, r3, r3
 8005f40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005f42:	4613      	mov	r3, r2
 8005f44:	eb42 0303 	adc.w	r3, r2, r3
 8005f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005f4a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005f4e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005f52:	f7fa fec9 	bl	8000ce8 <__aeabi_uldivmod>
 8005f56:	4602      	mov	r2, r0
 8005f58:	460b      	mov	r3, r1
 8005f5a:	4b0d      	ldr	r3, [pc, #52]	@ (8005f90 <UART_SetConfig+0x2d4>)
 8005f5c:	fba3 1302 	umull	r1, r3, r3, r2
 8005f60:	095b      	lsrs	r3, r3, #5
 8005f62:	2164      	movs	r1, #100	@ 0x64
 8005f64:	fb01 f303 	mul.w	r3, r1, r3
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	3332      	adds	r3, #50	@ 0x32
 8005f6e:	4a08      	ldr	r2, [pc, #32]	@ (8005f90 <UART_SetConfig+0x2d4>)
 8005f70:	fba2 2303 	umull	r2, r3, r2, r3
 8005f74:	095b      	lsrs	r3, r3, #5
 8005f76:	f003 0207 	and.w	r2, r3, #7
 8005f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	4422      	add	r2, r4
 8005f82:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f84:	e106      	b.n	8006194 <UART_SetConfig+0x4d8>
 8005f86:	bf00      	nop
 8005f88:	40011000 	.word	0x40011000
 8005f8c:	40011400 	.word	0x40011400
 8005f90:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f94:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f98:	2200      	movs	r2, #0
 8005f9a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f9e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005fa2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005fa6:	4642      	mov	r2, r8
 8005fa8:	464b      	mov	r3, r9
 8005faa:	1891      	adds	r1, r2, r2
 8005fac:	6239      	str	r1, [r7, #32]
 8005fae:	415b      	adcs	r3, r3
 8005fb0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005fb2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005fb6:	4641      	mov	r1, r8
 8005fb8:	1854      	adds	r4, r2, r1
 8005fba:	4649      	mov	r1, r9
 8005fbc:	eb43 0501 	adc.w	r5, r3, r1
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	f04f 0300 	mov.w	r3, #0
 8005fc8:	00eb      	lsls	r3, r5, #3
 8005fca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005fce:	00e2      	lsls	r2, r4, #3
 8005fd0:	4614      	mov	r4, r2
 8005fd2:	461d      	mov	r5, r3
 8005fd4:	4643      	mov	r3, r8
 8005fd6:	18e3      	adds	r3, r4, r3
 8005fd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005fdc:	464b      	mov	r3, r9
 8005fde:	eb45 0303 	adc.w	r3, r5, r3
 8005fe2:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005ff2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005ff6:	f04f 0200 	mov.w	r2, #0
 8005ffa:	f04f 0300 	mov.w	r3, #0
 8005ffe:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006002:	4629      	mov	r1, r5
 8006004:	008b      	lsls	r3, r1, #2
 8006006:	4621      	mov	r1, r4
 8006008:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800600c:	4621      	mov	r1, r4
 800600e:	008a      	lsls	r2, r1, #2
 8006010:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006014:	f7fa fe68 	bl	8000ce8 <__aeabi_uldivmod>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4b60      	ldr	r3, [pc, #384]	@ (80061a0 <UART_SetConfig+0x4e4>)
 800601e:	fba3 2302 	umull	r2, r3, r3, r2
 8006022:	095b      	lsrs	r3, r3, #5
 8006024:	011c      	lsls	r4, r3, #4
 8006026:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800602a:	2200      	movs	r2, #0
 800602c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006030:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006034:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006038:	4642      	mov	r2, r8
 800603a:	464b      	mov	r3, r9
 800603c:	1891      	adds	r1, r2, r2
 800603e:	61b9      	str	r1, [r7, #24]
 8006040:	415b      	adcs	r3, r3
 8006042:	61fb      	str	r3, [r7, #28]
 8006044:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006048:	4641      	mov	r1, r8
 800604a:	1851      	adds	r1, r2, r1
 800604c:	6139      	str	r1, [r7, #16]
 800604e:	4649      	mov	r1, r9
 8006050:	414b      	adcs	r3, r1
 8006052:	617b      	str	r3, [r7, #20]
 8006054:	f04f 0200 	mov.w	r2, #0
 8006058:	f04f 0300 	mov.w	r3, #0
 800605c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006060:	4659      	mov	r1, fp
 8006062:	00cb      	lsls	r3, r1, #3
 8006064:	4651      	mov	r1, sl
 8006066:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800606a:	4651      	mov	r1, sl
 800606c:	00ca      	lsls	r2, r1, #3
 800606e:	4610      	mov	r0, r2
 8006070:	4619      	mov	r1, r3
 8006072:	4603      	mov	r3, r0
 8006074:	4642      	mov	r2, r8
 8006076:	189b      	adds	r3, r3, r2
 8006078:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800607c:	464b      	mov	r3, r9
 800607e:	460a      	mov	r2, r1
 8006080:	eb42 0303 	adc.w	r3, r2, r3
 8006084:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006088:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	2200      	movs	r2, #0
 8006090:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006092:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006094:	f04f 0200 	mov.w	r2, #0
 8006098:	f04f 0300 	mov.w	r3, #0
 800609c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80060a0:	4649      	mov	r1, r9
 80060a2:	008b      	lsls	r3, r1, #2
 80060a4:	4641      	mov	r1, r8
 80060a6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060aa:	4641      	mov	r1, r8
 80060ac:	008a      	lsls	r2, r1, #2
 80060ae:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80060b2:	f7fa fe19 	bl	8000ce8 <__aeabi_uldivmod>
 80060b6:	4602      	mov	r2, r0
 80060b8:	460b      	mov	r3, r1
 80060ba:	4611      	mov	r1, r2
 80060bc:	4b38      	ldr	r3, [pc, #224]	@ (80061a0 <UART_SetConfig+0x4e4>)
 80060be:	fba3 2301 	umull	r2, r3, r3, r1
 80060c2:	095b      	lsrs	r3, r3, #5
 80060c4:	2264      	movs	r2, #100	@ 0x64
 80060c6:	fb02 f303 	mul.w	r3, r2, r3
 80060ca:	1acb      	subs	r3, r1, r3
 80060cc:	011b      	lsls	r3, r3, #4
 80060ce:	3332      	adds	r3, #50	@ 0x32
 80060d0:	4a33      	ldr	r2, [pc, #204]	@ (80061a0 <UART_SetConfig+0x4e4>)
 80060d2:	fba2 2303 	umull	r2, r3, r2, r3
 80060d6:	095b      	lsrs	r3, r3, #5
 80060d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80060dc:	441c      	add	r4, r3
 80060de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060e2:	2200      	movs	r2, #0
 80060e4:	673b      	str	r3, [r7, #112]	@ 0x70
 80060e6:	677a      	str	r2, [r7, #116]	@ 0x74
 80060e8:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80060ec:	4642      	mov	r2, r8
 80060ee:	464b      	mov	r3, r9
 80060f0:	1891      	adds	r1, r2, r2
 80060f2:	60b9      	str	r1, [r7, #8]
 80060f4:	415b      	adcs	r3, r3
 80060f6:	60fb      	str	r3, [r7, #12]
 80060f8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80060fc:	4641      	mov	r1, r8
 80060fe:	1851      	adds	r1, r2, r1
 8006100:	6039      	str	r1, [r7, #0]
 8006102:	4649      	mov	r1, r9
 8006104:	414b      	adcs	r3, r1
 8006106:	607b      	str	r3, [r7, #4]
 8006108:	f04f 0200 	mov.w	r2, #0
 800610c:	f04f 0300 	mov.w	r3, #0
 8006110:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006114:	4659      	mov	r1, fp
 8006116:	00cb      	lsls	r3, r1, #3
 8006118:	4651      	mov	r1, sl
 800611a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800611e:	4651      	mov	r1, sl
 8006120:	00ca      	lsls	r2, r1, #3
 8006122:	4610      	mov	r0, r2
 8006124:	4619      	mov	r1, r3
 8006126:	4603      	mov	r3, r0
 8006128:	4642      	mov	r2, r8
 800612a:	189b      	adds	r3, r3, r2
 800612c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800612e:	464b      	mov	r3, r9
 8006130:	460a      	mov	r2, r1
 8006132:	eb42 0303 	adc.w	r3, r2, r3
 8006136:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800613c:	685b      	ldr	r3, [r3, #4]
 800613e:	2200      	movs	r2, #0
 8006140:	663b      	str	r3, [r7, #96]	@ 0x60
 8006142:	667a      	str	r2, [r7, #100]	@ 0x64
 8006144:	f04f 0200 	mov.w	r2, #0
 8006148:	f04f 0300 	mov.w	r3, #0
 800614c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006150:	4649      	mov	r1, r9
 8006152:	008b      	lsls	r3, r1, #2
 8006154:	4641      	mov	r1, r8
 8006156:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800615a:	4641      	mov	r1, r8
 800615c:	008a      	lsls	r2, r1, #2
 800615e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006162:	f7fa fdc1 	bl	8000ce8 <__aeabi_uldivmod>
 8006166:	4602      	mov	r2, r0
 8006168:	460b      	mov	r3, r1
 800616a:	4b0d      	ldr	r3, [pc, #52]	@ (80061a0 <UART_SetConfig+0x4e4>)
 800616c:	fba3 1302 	umull	r1, r3, r3, r2
 8006170:	095b      	lsrs	r3, r3, #5
 8006172:	2164      	movs	r1, #100	@ 0x64
 8006174:	fb01 f303 	mul.w	r3, r1, r3
 8006178:	1ad3      	subs	r3, r2, r3
 800617a:	011b      	lsls	r3, r3, #4
 800617c:	3332      	adds	r3, #50	@ 0x32
 800617e:	4a08      	ldr	r2, [pc, #32]	@ (80061a0 <UART_SetConfig+0x4e4>)
 8006180:	fba2 2303 	umull	r2, r3, r2, r3
 8006184:	095b      	lsrs	r3, r3, #5
 8006186:	f003 020f 	and.w	r2, r3, #15
 800618a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	4422      	add	r2, r4
 8006192:	609a      	str	r2, [r3, #8]
}
 8006194:	bf00      	nop
 8006196:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800619a:	46bd      	mov	sp, r7
 800619c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80061a0:	51eb851f 	.word	0x51eb851f

080061a4 <__cvt>:
 80061a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061a8:	ec57 6b10 	vmov	r6, r7, d0
 80061ac:	2f00      	cmp	r7, #0
 80061ae:	460c      	mov	r4, r1
 80061b0:	4619      	mov	r1, r3
 80061b2:	463b      	mov	r3, r7
 80061b4:	bfbb      	ittet	lt
 80061b6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80061ba:	461f      	movlt	r7, r3
 80061bc:	2300      	movge	r3, #0
 80061be:	232d      	movlt	r3, #45	@ 0x2d
 80061c0:	700b      	strb	r3, [r1, #0]
 80061c2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061c4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80061c8:	4691      	mov	r9, r2
 80061ca:	f023 0820 	bic.w	r8, r3, #32
 80061ce:	bfbc      	itt	lt
 80061d0:	4632      	movlt	r2, r6
 80061d2:	4616      	movlt	r6, r2
 80061d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061d8:	d005      	beq.n	80061e6 <__cvt+0x42>
 80061da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80061de:	d100      	bne.n	80061e2 <__cvt+0x3e>
 80061e0:	3401      	adds	r4, #1
 80061e2:	2102      	movs	r1, #2
 80061e4:	e000      	b.n	80061e8 <__cvt+0x44>
 80061e6:	2103      	movs	r1, #3
 80061e8:	ab03      	add	r3, sp, #12
 80061ea:	9301      	str	r3, [sp, #4]
 80061ec:	ab02      	add	r3, sp, #8
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	ec47 6b10 	vmov	d0, r6, r7
 80061f4:	4653      	mov	r3, sl
 80061f6:	4622      	mov	r2, r4
 80061f8:	f000 fe6a 	bl	8006ed0 <_dtoa_r>
 80061fc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006200:	4605      	mov	r5, r0
 8006202:	d119      	bne.n	8006238 <__cvt+0x94>
 8006204:	f019 0f01 	tst.w	r9, #1
 8006208:	d00e      	beq.n	8006228 <__cvt+0x84>
 800620a:	eb00 0904 	add.w	r9, r0, r4
 800620e:	2200      	movs	r2, #0
 8006210:	2300      	movs	r3, #0
 8006212:	4630      	mov	r0, r6
 8006214:	4639      	mov	r1, r7
 8006216:	f7fa fc57 	bl	8000ac8 <__aeabi_dcmpeq>
 800621a:	b108      	cbz	r0, 8006220 <__cvt+0x7c>
 800621c:	f8cd 900c 	str.w	r9, [sp, #12]
 8006220:	2230      	movs	r2, #48	@ 0x30
 8006222:	9b03      	ldr	r3, [sp, #12]
 8006224:	454b      	cmp	r3, r9
 8006226:	d31e      	bcc.n	8006266 <__cvt+0xc2>
 8006228:	9b03      	ldr	r3, [sp, #12]
 800622a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800622c:	1b5b      	subs	r3, r3, r5
 800622e:	4628      	mov	r0, r5
 8006230:	6013      	str	r3, [r2, #0]
 8006232:	b004      	add	sp, #16
 8006234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006238:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800623c:	eb00 0904 	add.w	r9, r0, r4
 8006240:	d1e5      	bne.n	800620e <__cvt+0x6a>
 8006242:	7803      	ldrb	r3, [r0, #0]
 8006244:	2b30      	cmp	r3, #48	@ 0x30
 8006246:	d10a      	bne.n	800625e <__cvt+0xba>
 8006248:	2200      	movs	r2, #0
 800624a:	2300      	movs	r3, #0
 800624c:	4630      	mov	r0, r6
 800624e:	4639      	mov	r1, r7
 8006250:	f7fa fc3a 	bl	8000ac8 <__aeabi_dcmpeq>
 8006254:	b918      	cbnz	r0, 800625e <__cvt+0xba>
 8006256:	f1c4 0401 	rsb	r4, r4, #1
 800625a:	f8ca 4000 	str.w	r4, [sl]
 800625e:	f8da 3000 	ldr.w	r3, [sl]
 8006262:	4499      	add	r9, r3
 8006264:	e7d3      	b.n	800620e <__cvt+0x6a>
 8006266:	1c59      	adds	r1, r3, #1
 8006268:	9103      	str	r1, [sp, #12]
 800626a:	701a      	strb	r2, [r3, #0]
 800626c:	e7d9      	b.n	8006222 <__cvt+0x7e>

0800626e <__exponent>:
 800626e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006270:	2900      	cmp	r1, #0
 8006272:	bfba      	itte	lt
 8006274:	4249      	neglt	r1, r1
 8006276:	232d      	movlt	r3, #45	@ 0x2d
 8006278:	232b      	movge	r3, #43	@ 0x2b
 800627a:	2909      	cmp	r1, #9
 800627c:	7002      	strb	r2, [r0, #0]
 800627e:	7043      	strb	r3, [r0, #1]
 8006280:	dd29      	ble.n	80062d6 <__exponent+0x68>
 8006282:	f10d 0307 	add.w	r3, sp, #7
 8006286:	461d      	mov	r5, r3
 8006288:	270a      	movs	r7, #10
 800628a:	461a      	mov	r2, r3
 800628c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006290:	fb07 1416 	mls	r4, r7, r6, r1
 8006294:	3430      	adds	r4, #48	@ 0x30
 8006296:	f802 4c01 	strb.w	r4, [r2, #-1]
 800629a:	460c      	mov	r4, r1
 800629c:	2c63      	cmp	r4, #99	@ 0x63
 800629e:	f103 33ff 	add.w	r3, r3, #4294967295
 80062a2:	4631      	mov	r1, r6
 80062a4:	dcf1      	bgt.n	800628a <__exponent+0x1c>
 80062a6:	3130      	adds	r1, #48	@ 0x30
 80062a8:	1e94      	subs	r4, r2, #2
 80062aa:	f803 1c01 	strb.w	r1, [r3, #-1]
 80062ae:	1c41      	adds	r1, r0, #1
 80062b0:	4623      	mov	r3, r4
 80062b2:	42ab      	cmp	r3, r5
 80062b4:	d30a      	bcc.n	80062cc <__exponent+0x5e>
 80062b6:	f10d 0309 	add.w	r3, sp, #9
 80062ba:	1a9b      	subs	r3, r3, r2
 80062bc:	42ac      	cmp	r4, r5
 80062be:	bf88      	it	hi
 80062c0:	2300      	movhi	r3, #0
 80062c2:	3302      	adds	r3, #2
 80062c4:	4403      	add	r3, r0
 80062c6:	1a18      	subs	r0, r3, r0
 80062c8:	b003      	add	sp, #12
 80062ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062cc:	f813 6b01 	ldrb.w	r6, [r3], #1
 80062d0:	f801 6f01 	strb.w	r6, [r1, #1]!
 80062d4:	e7ed      	b.n	80062b2 <__exponent+0x44>
 80062d6:	2330      	movs	r3, #48	@ 0x30
 80062d8:	3130      	adds	r1, #48	@ 0x30
 80062da:	7083      	strb	r3, [r0, #2]
 80062dc:	70c1      	strb	r1, [r0, #3]
 80062de:	1d03      	adds	r3, r0, #4
 80062e0:	e7f1      	b.n	80062c6 <__exponent+0x58>
	...

080062e4 <_printf_float>:
 80062e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062e8:	b08d      	sub	sp, #52	@ 0x34
 80062ea:	460c      	mov	r4, r1
 80062ec:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80062f0:	4616      	mov	r6, r2
 80062f2:	461f      	mov	r7, r3
 80062f4:	4605      	mov	r5, r0
 80062f6:	f000 fcdb 	bl	8006cb0 <_localeconv_r>
 80062fa:	6803      	ldr	r3, [r0, #0]
 80062fc:	9304      	str	r3, [sp, #16]
 80062fe:	4618      	mov	r0, r3
 8006300:	f7f9 ffb6 	bl	8000270 <strlen>
 8006304:	2300      	movs	r3, #0
 8006306:	930a      	str	r3, [sp, #40]	@ 0x28
 8006308:	f8d8 3000 	ldr.w	r3, [r8]
 800630c:	9005      	str	r0, [sp, #20]
 800630e:	3307      	adds	r3, #7
 8006310:	f023 0307 	bic.w	r3, r3, #7
 8006314:	f103 0208 	add.w	r2, r3, #8
 8006318:	f894 a018 	ldrb.w	sl, [r4, #24]
 800631c:	f8d4 b000 	ldr.w	fp, [r4]
 8006320:	f8c8 2000 	str.w	r2, [r8]
 8006324:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006328:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800632c:	9307      	str	r3, [sp, #28]
 800632e:	f8cd 8018 	str.w	r8, [sp, #24]
 8006332:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8006336:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800633a:	4b9c      	ldr	r3, [pc, #624]	@ (80065ac <_printf_float+0x2c8>)
 800633c:	f04f 32ff 	mov.w	r2, #4294967295
 8006340:	f7fa fbf4 	bl	8000b2c <__aeabi_dcmpun>
 8006344:	bb70      	cbnz	r0, 80063a4 <_printf_float+0xc0>
 8006346:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800634a:	4b98      	ldr	r3, [pc, #608]	@ (80065ac <_printf_float+0x2c8>)
 800634c:	f04f 32ff 	mov.w	r2, #4294967295
 8006350:	f7fa fbce 	bl	8000af0 <__aeabi_dcmple>
 8006354:	bb30      	cbnz	r0, 80063a4 <_printf_float+0xc0>
 8006356:	2200      	movs	r2, #0
 8006358:	2300      	movs	r3, #0
 800635a:	4640      	mov	r0, r8
 800635c:	4649      	mov	r1, r9
 800635e:	f7fa fbbd 	bl	8000adc <__aeabi_dcmplt>
 8006362:	b110      	cbz	r0, 800636a <_printf_float+0x86>
 8006364:	232d      	movs	r3, #45	@ 0x2d
 8006366:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800636a:	4a91      	ldr	r2, [pc, #580]	@ (80065b0 <_printf_float+0x2cc>)
 800636c:	4b91      	ldr	r3, [pc, #580]	@ (80065b4 <_printf_float+0x2d0>)
 800636e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006372:	bf94      	ite	ls
 8006374:	4690      	movls	r8, r2
 8006376:	4698      	movhi	r8, r3
 8006378:	2303      	movs	r3, #3
 800637a:	6123      	str	r3, [r4, #16]
 800637c:	f02b 0304 	bic.w	r3, fp, #4
 8006380:	6023      	str	r3, [r4, #0]
 8006382:	f04f 0900 	mov.w	r9, #0
 8006386:	9700      	str	r7, [sp, #0]
 8006388:	4633      	mov	r3, r6
 800638a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800638c:	4621      	mov	r1, r4
 800638e:	4628      	mov	r0, r5
 8006390:	f000 f9d2 	bl	8006738 <_printf_common>
 8006394:	3001      	adds	r0, #1
 8006396:	f040 808d 	bne.w	80064b4 <_printf_float+0x1d0>
 800639a:	f04f 30ff 	mov.w	r0, #4294967295
 800639e:	b00d      	add	sp, #52	@ 0x34
 80063a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063a4:	4642      	mov	r2, r8
 80063a6:	464b      	mov	r3, r9
 80063a8:	4640      	mov	r0, r8
 80063aa:	4649      	mov	r1, r9
 80063ac:	f7fa fbbe 	bl	8000b2c <__aeabi_dcmpun>
 80063b0:	b140      	cbz	r0, 80063c4 <_printf_float+0xe0>
 80063b2:	464b      	mov	r3, r9
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	bfbc      	itt	lt
 80063b8:	232d      	movlt	r3, #45	@ 0x2d
 80063ba:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80063be:	4a7e      	ldr	r2, [pc, #504]	@ (80065b8 <_printf_float+0x2d4>)
 80063c0:	4b7e      	ldr	r3, [pc, #504]	@ (80065bc <_printf_float+0x2d8>)
 80063c2:	e7d4      	b.n	800636e <_printf_float+0x8a>
 80063c4:	6863      	ldr	r3, [r4, #4]
 80063c6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80063ca:	9206      	str	r2, [sp, #24]
 80063cc:	1c5a      	adds	r2, r3, #1
 80063ce:	d13b      	bne.n	8006448 <_printf_float+0x164>
 80063d0:	2306      	movs	r3, #6
 80063d2:	6063      	str	r3, [r4, #4]
 80063d4:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 80063d8:	2300      	movs	r3, #0
 80063da:	6022      	str	r2, [r4, #0]
 80063dc:	9303      	str	r3, [sp, #12]
 80063de:	ab0a      	add	r3, sp, #40	@ 0x28
 80063e0:	e9cd a301 	strd	sl, r3, [sp, #4]
 80063e4:	ab09      	add	r3, sp, #36	@ 0x24
 80063e6:	9300      	str	r3, [sp, #0]
 80063e8:	6861      	ldr	r1, [r4, #4]
 80063ea:	ec49 8b10 	vmov	d0, r8, r9
 80063ee:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80063f2:	4628      	mov	r0, r5
 80063f4:	f7ff fed6 	bl	80061a4 <__cvt>
 80063f8:	9b06      	ldr	r3, [sp, #24]
 80063fa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80063fc:	2b47      	cmp	r3, #71	@ 0x47
 80063fe:	4680      	mov	r8, r0
 8006400:	d129      	bne.n	8006456 <_printf_float+0x172>
 8006402:	1cc8      	adds	r0, r1, #3
 8006404:	db02      	blt.n	800640c <_printf_float+0x128>
 8006406:	6863      	ldr	r3, [r4, #4]
 8006408:	4299      	cmp	r1, r3
 800640a:	dd41      	ble.n	8006490 <_printf_float+0x1ac>
 800640c:	f1aa 0a02 	sub.w	sl, sl, #2
 8006410:	fa5f fa8a 	uxtb.w	sl, sl
 8006414:	3901      	subs	r1, #1
 8006416:	4652      	mov	r2, sl
 8006418:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800641c:	9109      	str	r1, [sp, #36]	@ 0x24
 800641e:	f7ff ff26 	bl	800626e <__exponent>
 8006422:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006424:	1813      	adds	r3, r2, r0
 8006426:	2a01      	cmp	r2, #1
 8006428:	4681      	mov	r9, r0
 800642a:	6123      	str	r3, [r4, #16]
 800642c:	dc02      	bgt.n	8006434 <_printf_float+0x150>
 800642e:	6822      	ldr	r2, [r4, #0]
 8006430:	07d2      	lsls	r2, r2, #31
 8006432:	d501      	bpl.n	8006438 <_printf_float+0x154>
 8006434:	3301      	adds	r3, #1
 8006436:	6123      	str	r3, [r4, #16]
 8006438:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800643c:	2b00      	cmp	r3, #0
 800643e:	d0a2      	beq.n	8006386 <_printf_float+0xa2>
 8006440:	232d      	movs	r3, #45	@ 0x2d
 8006442:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006446:	e79e      	b.n	8006386 <_printf_float+0xa2>
 8006448:	9a06      	ldr	r2, [sp, #24]
 800644a:	2a47      	cmp	r2, #71	@ 0x47
 800644c:	d1c2      	bne.n	80063d4 <_printf_float+0xf0>
 800644e:	2b00      	cmp	r3, #0
 8006450:	d1c0      	bne.n	80063d4 <_printf_float+0xf0>
 8006452:	2301      	movs	r3, #1
 8006454:	e7bd      	b.n	80063d2 <_printf_float+0xee>
 8006456:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800645a:	d9db      	bls.n	8006414 <_printf_float+0x130>
 800645c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006460:	d118      	bne.n	8006494 <_printf_float+0x1b0>
 8006462:	2900      	cmp	r1, #0
 8006464:	6863      	ldr	r3, [r4, #4]
 8006466:	dd0b      	ble.n	8006480 <_printf_float+0x19c>
 8006468:	6121      	str	r1, [r4, #16]
 800646a:	b913      	cbnz	r3, 8006472 <_printf_float+0x18e>
 800646c:	6822      	ldr	r2, [r4, #0]
 800646e:	07d0      	lsls	r0, r2, #31
 8006470:	d502      	bpl.n	8006478 <_printf_float+0x194>
 8006472:	3301      	adds	r3, #1
 8006474:	440b      	add	r3, r1
 8006476:	6123      	str	r3, [r4, #16]
 8006478:	65a1      	str	r1, [r4, #88]	@ 0x58
 800647a:	f04f 0900 	mov.w	r9, #0
 800647e:	e7db      	b.n	8006438 <_printf_float+0x154>
 8006480:	b913      	cbnz	r3, 8006488 <_printf_float+0x1a4>
 8006482:	6822      	ldr	r2, [r4, #0]
 8006484:	07d2      	lsls	r2, r2, #31
 8006486:	d501      	bpl.n	800648c <_printf_float+0x1a8>
 8006488:	3302      	adds	r3, #2
 800648a:	e7f4      	b.n	8006476 <_printf_float+0x192>
 800648c:	2301      	movs	r3, #1
 800648e:	e7f2      	b.n	8006476 <_printf_float+0x192>
 8006490:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006496:	4299      	cmp	r1, r3
 8006498:	db05      	blt.n	80064a6 <_printf_float+0x1c2>
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	6121      	str	r1, [r4, #16]
 800649e:	07d8      	lsls	r0, r3, #31
 80064a0:	d5ea      	bpl.n	8006478 <_printf_float+0x194>
 80064a2:	1c4b      	adds	r3, r1, #1
 80064a4:	e7e7      	b.n	8006476 <_printf_float+0x192>
 80064a6:	2900      	cmp	r1, #0
 80064a8:	bfd4      	ite	le
 80064aa:	f1c1 0202 	rsble	r2, r1, #2
 80064ae:	2201      	movgt	r2, #1
 80064b0:	4413      	add	r3, r2
 80064b2:	e7e0      	b.n	8006476 <_printf_float+0x192>
 80064b4:	6823      	ldr	r3, [r4, #0]
 80064b6:	055a      	lsls	r2, r3, #21
 80064b8:	d407      	bmi.n	80064ca <_printf_float+0x1e6>
 80064ba:	6923      	ldr	r3, [r4, #16]
 80064bc:	4642      	mov	r2, r8
 80064be:	4631      	mov	r1, r6
 80064c0:	4628      	mov	r0, r5
 80064c2:	47b8      	blx	r7
 80064c4:	3001      	adds	r0, #1
 80064c6:	d12b      	bne.n	8006520 <_printf_float+0x23c>
 80064c8:	e767      	b.n	800639a <_printf_float+0xb6>
 80064ca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80064ce:	f240 80dd 	bls.w	800668c <_printf_float+0x3a8>
 80064d2:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80064d6:	2200      	movs	r2, #0
 80064d8:	2300      	movs	r3, #0
 80064da:	f7fa faf5 	bl	8000ac8 <__aeabi_dcmpeq>
 80064de:	2800      	cmp	r0, #0
 80064e0:	d033      	beq.n	800654a <_printf_float+0x266>
 80064e2:	4a37      	ldr	r2, [pc, #220]	@ (80065c0 <_printf_float+0x2dc>)
 80064e4:	2301      	movs	r3, #1
 80064e6:	4631      	mov	r1, r6
 80064e8:	4628      	mov	r0, r5
 80064ea:	47b8      	blx	r7
 80064ec:	3001      	adds	r0, #1
 80064ee:	f43f af54 	beq.w	800639a <_printf_float+0xb6>
 80064f2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80064f6:	4543      	cmp	r3, r8
 80064f8:	db02      	blt.n	8006500 <_printf_float+0x21c>
 80064fa:	6823      	ldr	r3, [r4, #0]
 80064fc:	07d8      	lsls	r0, r3, #31
 80064fe:	d50f      	bpl.n	8006520 <_printf_float+0x23c>
 8006500:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006504:	4631      	mov	r1, r6
 8006506:	4628      	mov	r0, r5
 8006508:	47b8      	blx	r7
 800650a:	3001      	adds	r0, #1
 800650c:	f43f af45 	beq.w	800639a <_printf_float+0xb6>
 8006510:	f04f 0900 	mov.w	r9, #0
 8006514:	f108 38ff 	add.w	r8, r8, #4294967295
 8006518:	f104 0a1a 	add.w	sl, r4, #26
 800651c:	45c8      	cmp	r8, r9
 800651e:	dc09      	bgt.n	8006534 <_printf_float+0x250>
 8006520:	6823      	ldr	r3, [r4, #0]
 8006522:	079b      	lsls	r3, r3, #30
 8006524:	f100 8103 	bmi.w	800672e <_printf_float+0x44a>
 8006528:	68e0      	ldr	r0, [r4, #12]
 800652a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800652c:	4298      	cmp	r0, r3
 800652e:	bfb8      	it	lt
 8006530:	4618      	movlt	r0, r3
 8006532:	e734      	b.n	800639e <_printf_float+0xba>
 8006534:	2301      	movs	r3, #1
 8006536:	4652      	mov	r2, sl
 8006538:	4631      	mov	r1, r6
 800653a:	4628      	mov	r0, r5
 800653c:	47b8      	blx	r7
 800653e:	3001      	adds	r0, #1
 8006540:	f43f af2b 	beq.w	800639a <_printf_float+0xb6>
 8006544:	f109 0901 	add.w	r9, r9, #1
 8006548:	e7e8      	b.n	800651c <_printf_float+0x238>
 800654a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800654c:	2b00      	cmp	r3, #0
 800654e:	dc39      	bgt.n	80065c4 <_printf_float+0x2e0>
 8006550:	4a1b      	ldr	r2, [pc, #108]	@ (80065c0 <_printf_float+0x2dc>)
 8006552:	2301      	movs	r3, #1
 8006554:	4631      	mov	r1, r6
 8006556:	4628      	mov	r0, r5
 8006558:	47b8      	blx	r7
 800655a:	3001      	adds	r0, #1
 800655c:	f43f af1d 	beq.w	800639a <_printf_float+0xb6>
 8006560:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006564:	ea59 0303 	orrs.w	r3, r9, r3
 8006568:	d102      	bne.n	8006570 <_printf_float+0x28c>
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	07d9      	lsls	r1, r3, #31
 800656e:	d5d7      	bpl.n	8006520 <_printf_float+0x23c>
 8006570:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006574:	4631      	mov	r1, r6
 8006576:	4628      	mov	r0, r5
 8006578:	47b8      	blx	r7
 800657a:	3001      	adds	r0, #1
 800657c:	f43f af0d 	beq.w	800639a <_printf_float+0xb6>
 8006580:	f04f 0a00 	mov.w	sl, #0
 8006584:	f104 0b1a 	add.w	fp, r4, #26
 8006588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800658a:	425b      	negs	r3, r3
 800658c:	4553      	cmp	r3, sl
 800658e:	dc01      	bgt.n	8006594 <_printf_float+0x2b0>
 8006590:	464b      	mov	r3, r9
 8006592:	e793      	b.n	80064bc <_printf_float+0x1d8>
 8006594:	2301      	movs	r3, #1
 8006596:	465a      	mov	r2, fp
 8006598:	4631      	mov	r1, r6
 800659a:	4628      	mov	r0, r5
 800659c:	47b8      	blx	r7
 800659e:	3001      	adds	r0, #1
 80065a0:	f43f aefb 	beq.w	800639a <_printf_float+0xb6>
 80065a4:	f10a 0a01 	add.w	sl, sl, #1
 80065a8:	e7ee      	b.n	8006588 <_printf_float+0x2a4>
 80065aa:	bf00      	nop
 80065ac:	7fefffff 	.word	0x7fefffff
 80065b0:	0800a524 	.word	0x0800a524
 80065b4:	0800a528 	.word	0x0800a528
 80065b8:	0800a52c 	.word	0x0800a52c
 80065bc:	0800a530 	.word	0x0800a530
 80065c0:	0800a534 	.word	0x0800a534
 80065c4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065c6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80065ca:	4553      	cmp	r3, sl
 80065cc:	bfa8      	it	ge
 80065ce:	4653      	movge	r3, sl
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	4699      	mov	r9, r3
 80065d4:	dc36      	bgt.n	8006644 <_printf_float+0x360>
 80065d6:	f04f 0b00 	mov.w	fp, #0
 80065da:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065de:	f104 021a 	add.w	r2, r4, #26
 80065e2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80065e4:	9306      	str	r3, [sp, #24]
 80065e6:	eba3 0309 	sub.w	r3, r3, r9
 80065ea:	455b      	cmp	r3, fp
 80065ec:	dc31      	bgt.n	8006652 <_printf_float+0x36e>
 80065ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065f0:	459a      	cmp	sl, r3
 80065f2:	dc3a      	bgt.n	800666a <_printf_float+0x386>
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	07da      	lsls	r2, r3, #31
 80065f8:	d437      	bmi.n	800666a <_printf_float+0x386>
 80065fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065fc:	ebaa 0903 	sub.w	r9, sl, r3
 8006600:	9b06      	ldr	r3, [sp, #24]
 8006602:	ebaa 0303 	sub.w	r3, sl, r3
 8006606:	4599      	cmp	r9, r3
 8006608:	bfa8      	it	ge
 800660a:	4699      	movge	r9, r3
 800660c:	f1b9 0f00 	cmp.w	r9, #0
 8006610:	dc33      	bgt.n	800667a <_printf_float+0x396>
 8006612:	f04f 0800 	mov.w	r8, #0
 8006616:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800661a:	f104 0b1a 	add.w	fp, r4, #26
 800661e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006620:	ebaa 0303 	sub.w	r3, sl, r3
 8006624:	eba3 0309 	sub.w	r3, r3, r9
 8006628:	4543      	cmp	r3, r8
 800662a:	f77f af79 	ble.w	8006520 <_printf_float+0x23c>
 800662e:	2301      	movs	r3, #1
 8006630:	465a      	mov	r2, fp
 8006632:	4631      	mov	r1, r6
 8006634:	4628      	mov	r0, r5
 8006636:	47b8      	blx	r7
 8006638:	3001      	adds	r0, #1
 800663a:	f43f aeae 	beq.w	800639a <_printf_float+0xb6>
 800663e:	f108 0801 	add.w	r8, r8, #1
 8006642:	e7ec      	b.n	800661e <_printf_float+0x33a>
 8006644:	4642      	mov	r2, r8
 8006646:	4631      	mov	r1, r6
 8006648:	4628      	mov	r0, r5
 800664a:	47b8      	blx	r7
 800664c:	3001      	adds	r0, #1
 800664e:	d1c2      	bne.n	80065d6 <_printf_float+0x2f2>
 8006650:	e6a3      	b.n	800639a <_printf_float+0xb6>
 8006652:	2301      	movs	r3, #1
 8006654:	4631      	mov	r1, r6
 8006656:	4628      	mov	r0, r5
 8006658:	9206      	str	r2, [sp, #24]
 800665a:	47b8      	blx	r7
 800665c:	3001      	adds	r0, #1
 800665e:	f43f ae9c 	beq.w	800639a <_printf_float+0xb6>
 8006662:	9a06      	ldr	r2, [sp, #24]
 8006664:	f10b 0b01 	add.w	fp, fp, #1
 8006668:	e7bb      	b.n	80065e2 <_printf_float+0x2fe>
 800666a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800666e:	4631      	mov	r1, r6
 8006670:	4628      	mov	r0, r5
 8006672:	47b8      	blx	r7
 8006674:	3001      	adds	r0, #1
 8006676:	d1c0      	bne.n	80065fa <_printf_float+0x316>
 8006678:	e68f      	b.n	800639a <_printf_float+0xb6>
 800667a:	9a06      	ldr	r2, [sp, #24]
 800667c:	464b      	mov	r3, r9
 800667e:	4442      	add	r2, r8
 8006680:	4631      	mov	r1, r6
 8006682:	4628      	mov	r0, r5
 8006684:	47b8      	blx	r7
 8006686:	3001      	adds	r0, #1
 8006688:	d1c3      	bne.n	8006612 <_printf_float+0x32e>
 800668a:	e686      	b.n	800639a <_printf_float+0xb6>
 800668c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006690:	f1ba 0f01 	cmp.w	sl, #1
 8006694:	dc01      	bgt.n	800669a <_printf_float+0x3b6>
 8006696:	07db      	lsls	r3, r3, #31
 8006698:	d536      	bpl.n	8006708 <_printf_float+0x424>
 800669a:	2301      	movs	r3, #1
 800669c:	4642      	mov	r2, r8
 800669e:	4631      	mov	r1, r6
 80066a0:	4628      	mov	r0, r5
 80066a2:	47b8      	blx	r7
 80066a4:	3001      	adds	r0, #1
 80066a6:	f43f ae78 	beq.w	800639a <_printf_float+0xb6>
 80066aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80066ae:	4631      	mov	r1, r6
 80066b0:	4628      	mov	r0, r5
 80066b2:	47b8      	blx	r7
 80066b4:	3001      	adds	r0, #1
 80066b6:	f43f ae70 	beq.w	800639a <_printf_float+0xb6>
 80066ba:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80066be:	2200      	movs	r2, #0
 80066c0:	2300      	movs	r3, #0
 80066c2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80066c6:	f7fa f9ff 	bl	8000ac8 <__aeabi_dcmpeq>
 80066ca:	b9c0      	cbnz	r0, 80066fe <_printf_float+0x41a>
 80066cc:	4653      	mov	r3, sl
 80066ce:	f108 0201 	add.w	r2, r8, #1
 80066d2:	4631      	mov	r1, r6
 80066d4:	4628      	mov	r0, r5
 80066d6:	47b8      	blx	r7
 80066d8:	3001      	adds	r0, #1
 80066da:	d10c      	bne.n	80066f6 <_printf_float+0x412>
 80066dc:	e65d      	b.n	800639a <_printf_float+0xb6>
 80066de:	2301      	movs	r3, #1
 80066e0:	465a      	mov	r2, fp
 80066e2:	4631      	mov	r1, r6
 80066e4:	4628      	mov	r0, r5
 80066e6:	47b8      	blx	r7
 80066e8:	3001      	adds	r0, #1
 80066ea:	f43f ae56 	beq.w	800639a <_printf_float+0xb6>
 80066ee:	f108 0801 	add.w	r8, r8, #1
 80066f2:	45d0      	cmp	r8, sl
 80066f4:	dbf3      	blt.n	80066de <_printf_float+0x3fa>
 80066f6:	464b      	mov	r3, r9
 80066f8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80066fc:	e6df      	b.n	80064be <_printf_float+0x1da>
 80066fe:	f04f 0800 	mov.w	r8, #0
 8006702:	f104 0b1a 	add.w	fp, r4, #26
 8006706:	e7f4      	b.n	80066f2 <_printf_float+0x40e>
 8006708:	2301      	movs	r3, #1
 800670a:	4642      	mov	r2, r8
 800670c:	e7e1      	b.n	80066d2 <_printf_float+0x3ee>
 800670e:	2301      	movs	r3, #1
 8006710:	464a      	mov	r2, r9
 8006712:	4631      	mov	r1, r6
 8006714:	4628      	mov	r0, r5
 8006716:	47b8      	blx	r7
 8006718:	3001      	adds	r0, #1
 800671a:	f43f ae3e 	beq.w	800639a <_printf_float+0xb6>
 800671e:	f108 0801 	add.w	r8, r8, #1
 8006722:	68e3      	ldr	r3, [r4, #12]
 8006724:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006726:	1a5b      	subs	r3, r3, r1
 8006728:	4543      	cmp	r3, r8
 800672a:	dcf0      	bgt.n	800670e <_printf_float+0x42a>
 800672c:	e6fc      	b.n	8006528 <_printf_float+0x244>
 800672e:	f04f 0800 	mov.w	r8, #0
 8006732:	f104 0919 	add.w	r9, r4, #25
 8006736:	e7f4      	b.n	8006722 <_printf_float+0x43e>

08006738 <_printf_common>:
 8006738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800673c:	4616      	mov	r6, r2
 800673e:	4698      	mov	r8, r3
 8006740:	688a      	ldr	r2, [r1, #8]
 8006742:	690b      	ldr	r3, [r1, #16]
 8006744:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006748:	4293      	cmp	r3, r2
 800674a:	bfb8      	it	lt
 800674c:	4613      	movlt	r3, r2
 800674e:	6033      	str	r3, [r6, #0]
 8006750:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006754:	4607      	mov	r7, r0
 8006756:	460c      	mov	r4, r1
 8006758:	b10a      	cbz	r2, 800675e <_printf_common+0x26>
 800675a:	3301      	adds	r3, #1
 800675c:	6033      	str	r3, [r6, #0]
 800675e:	6823      	ldr	r3, [r4, #0]
 8006760:	0699      	lsls	r1, r3, #26
 8006762:	bf42      	ittt	mi
 8006764:	6833      	ldrmi	r3, [r6, #0]
 8006766:	3302      	addmi	r3, #2
 8006768:	6033      	strmi	r3, [r6, #0]
 800676a:	6825      	ldr	r5, [r4, #0]
 800676c:	f015 0506 	ands.w	r5, r5, #6
 8006770:	d106      	bne.n	8006780 <_printf_common+0x48>
 8006772:	f104 0a19 	add.w	sl, r4, #25
 8006776:	68e3      	ldr	r3, [r4, #12]
 8006778:	6832      	ldr	r2, [r6, #0]
 800677a:	1a9b      	subs	r3, r3, r2
 800677c:	42ab      	cmp	r3, r5
 800677e:	dc26      	bgt.n	80067ce <_printf_common+0x96>
 8006780:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006784:	6822      	ldr	r2, [r4, #0]
 8006786:	3b00      	subs	r3, #0
 8006788:	bf18      	it	ne
 800678a:	2301      	movne	r3, #1
 800678c:	0692      	lsls	r2, r2, #26
 800678e:	d42b      	bmi.n	80067e8 <_printf_common+0xb0>
 8006790:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006794:	4641      	mov	r1, r8
 8006796:	4638      	mov	r0, r7
 8006798:	47c8      	blx	r9
 800679a:	3001      	adds	r0, #1
 800679c:	d01e      	beq.n	80067dc <_printf_common+0xa4>
 800679e:	6823      	ldr	r3, [r4, #0]
 80067a0:	6922      	ldr	r2, [r4, #16]
 80067a2:	f003 0306 	and.w	r3, r3, #6
 80067a6:	2b04      	cmp	r3, #4
 80067a8:	bf02      	ittt	eq
 80067aa:	68e5      	ldreq	r5, [r4, #12]
 80067ac:	6833      	ldreq	r3, [r6, #0]
 80067ae:	1aed      	subeq	r5, r5, r3
 80067b0:	68a3      	ldr	r3, [r4, #8]
 80067b2:	bf0c      	ite	eq
 80067b4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80067b8:	2500      	movne	r5, #0
 80067ba:	4293      	cmp	r3, r2
 80067bc:	bfc4      	itt	gt
 80067be:	1a9b      	subgt	r3, r3, r2
 80067c0:	18ed      	addgt	r5, r5, r3
 80067c2:	2600      	movs	r6, #0
 80067c4:	341a      	adds	r4, #26
 80067c6:	42b5      	cmp	r5, r6
 80067c8:	d11a      	bne.n	8006800 <_printf_common+0xc8>
 80067ca:	2000      	movs	r0, #0
 80067cc:	e008      	b.n	80067e0 <_printf_common+0xa8>
 80067ce:	2301      	movs	r3, #1
 80067d0:	4652      	mov	r2, sl
 80067d2:	4641      	mov	r1, r8
 80067d4:	4638      	mov	r0, r7
 80067d6:	47c8      	blx	r9
 80067d8:	3001      	adds	r0, #1
 80067da:	d103      	bne.n	80067e4 <_printf_common+0xac>
 80067dc:	f04f 30ff 	mov.w	r0, #4294967295
 80067e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80067e4:	3501      	adds	r5, #1
 80067e6:	e7c6      	b.n	8006776 <_printf_common+0x3e>
 80067e8:	18e1      	adds	r1, r4, r3
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	2030      	movs	r0, #48	@ 0x30
 80067ee:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80067f2:	4422      	add	r2, r4
 80067f4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80067f8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80067fc:	3302      	adds	r3, #2
 80067fe:	e7c7      	b.n	8006790 <_printf_common+0x58>
 8006800:	2301      	movs	r3, #1
 8006802:	4622      	mov	r2, r4
 8006804:	4641      	mov	r1, r8
 8006806:	4638      	mov	r0, r7
 8006808:	47c8      	blx	r9
 800680a:	3001      	adds	r0, #1
 800680c:	d0e6      	beq.n	80067dc <_printf_common+0xa4>
 800680e:	3601      	adds	r6, #1
 8006810:	e7d9      	b.n	80067c6 <_printf_common+0x8e>
	...

08006814 <_printf_i>:
 8006814:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006818:	7e0f      	ldrb	r7, [r1, #24]
 800681a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800681c:	2f78      	cmp	r7, #120	@ 0x78
 800681e:	4691      	mov	r9, r2
 8006820:	4680      	mov	r8, r0
 8006822:	460c      	mov	r4, r1
 8006824:	469a      	mov	sl, r3
 8006826:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800682a:	d807      	bhi.n	800683c <_printf_i+0x28>
 800682c:	2f62      	cmp	r7, #98	@ 0x62
 800682e:	d80a      	bhi.n	8006846 <_printf_i+0x32>
 8006830:	2f00      	cmp	r7, #0
 8006832:	f000 80d2 	beq.w	80069da <_printf_i+0x1c6>
 8006836:	2f58      	cmp	r7, #88	@ 0x58
 8006838:	f000 80b9 	beq.w	80069ae <_printf_i+0x19a>
 800683c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006840:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006844:	e03a      	b.n	80068bc <_printf_i+0xa8>
 8006846:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800684a:	2b15      	cmp	r3, #21
 800684c:	d8f6      	bhi.n	800683c <_printf_i+0x28>
 800684e:	a101      	add	r1, pc, #4	@ (adr r1, 8006854 <_printf_i+0x40>)
 8006850:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006854:	080068ad 	.word	0x080068ad
 8006858:	080068c1 	.word	0x080068c1
 800685c:	0800683d 	.word	0x0800683d
 8006860:	0800683d 	.word	0x0800683d
 8006864:	0800683d 	.word	0x0800683d
 8006868:	0800683d 	.word	0x0800683d
 800686c:	080068c1 	.word	0x080068c1
 8006870:	0800683d 	.word	0x0800683d
 8006874:	0800683d 	.word	0x0800683d
 8006878:	0800683d 	.word	0x0800683d
 800687c:	0800683d 	.word	0x0800683d
 8006880:	080069c1 	.word	0x080069c1
 8006884:	080068eb 	.word	0x080068eb
 8006888:	0800697b 	.word	0x0800697b
 800688c:	0800683d 	.word	0x0800683d
 8006890:	0800683d 	.word	0x0800683d
 8006894:	080069e3 	.word	0x080069e3
 8006898:	0800683d 	.word	0x0800683d
 800689c:	080068eb 	.word	0x080068eb
 80068a0:	0800683d 	.word	0x0800683d
 80068a4:	0800683d 	.word	0x0800683d
 80068a8:	08006983 	.word	0x08006983
 80068ac:	6833      	ldr	r3, [r6, #0]
 80068ae:	1d1a      	adds	r2, r3, #4
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	6032      	str	r2, [r6, #0]
 80068b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80068b8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80068bc:	2301      	movs	r3, #1
 80068be:	e09d      	b.n	80069fc <_printf_i+0x1e8>
 80068c0:	6833      	ldr	r3, [r6, #0]
 80068c2:	6820      	ldr	r0, [r4, #0]
 80068c4:	1d19      	adds	r1, r3, #4
 80068c6:	6031      	str	r1, [r6, #0]
 80068c8:	0606      	lsls	r6, r0, #24
 80068ca:	d501      	bpl.n	80068d0 <_printf_i+0xbc>
 80068cc:	681d      	ldr	r5, [r3, #0]
 80068ce:	e003      	b.n	80068d8 <_printf_i+0xc4>
 80068d0:	0645      	lsls	r5, r0, #25
 80068d2:	d5fb      	bpl.n	80068cc <_printf_i+0xb8>
 80068d4:	f9b3 5000 	ldrsh.w	r5, [r3]
 80068d8:	2d00      	cmp	r5, #0
 80068da:	da03      	bge.n	80068e4 <_printf_i+0xd0>
 80068dc:	232d      	movs	r3, #45	@ 0x2d
 80068de:	426d      	negs	r5, r5
 80068e0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068e4:	4859      	ldr	r0, [pc, #356]	@ (8006a4c <_printf_i+0x238>)
 80068e6:	230a      	movs	r3, #10
 80068e8:	e011      	b.n	800690e <_printf_i+0xfa>
 80068ea:	6821      	ldr	r1, [r4, #0]
 80068ec:	6833      	ldr	r3, [r6, #0]
 80068ee:	0608      	lsls	r0, r1, #24
 80068f0:	f853 5b04 	ldr.w	r5, [r3], #4
 80068f4:	d402      	bmi.n	80068fc <_printf_i+0xe8>
 80068f6:	0649      	lsls	r1, r1, #25
 80068f8:	bf48      	it	mi
 80068fa:	b2ad      	uxthmi	r5, r5
 80068fc:	2f6f      	cmp	r7, #111	@ 0x6f
 80068fe:	4853      	ldr	r0, [pc, #332]	@ (8006a4c <_printf_i+0x238>)
 8006900:	6033      	str	r3, [r6, #0]
 8006902:	bf14      	ite	ne
 8006904:	230a      	movne	r3, #10
 8006906:	2308      	moveq	r3, #8
 8006908:	2100      	movs	r1, #0
 800690a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800690e:	6866      	ldr	r6, [r4, #4]
 8006910:	60a6      	str	r6, [r4, #8]
 8006912:	2e00      	cmp	r6, #0
 8006914:	bfa2      	ittt	ge
 8006916:	6821      	ldrge	r1, [r4, #0]
 8006918:	f021 0104 	bicge.w	r1, r1, #4
 800691c:	6021      	strge	r1, [r4, #0]
 800691e:	b90d      	cbnz	r5, 8006924 <_printf_i+0x110>
 8006920:	2e00      	cmp	r6, #0
 8006922:	d04b      	beq.n	80069bc <_printf_i+0x1a8>
 8006924:	4616      	mov	r6, r2
 8006926:	fbb5 f1f3 	udiv	r1, r5, r3
 800692a:	fb03 5711 	mls	r7, r3, r1, r5
 800692e:	5dc7      	ldrb	r7, [r0, r7]
 8006930:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006934:	462f      	mov	r7, r5
 8006936:	42bb      	cmp	r3, r7
 8006938:	460d      	mov	r5, r1
 800693a:	d9f4      	bls.n	8006926 <_printf_i+0x112>
 800693c:	2b08      	cmp	r3, #8
 800693e:	d10b      	bne.n	8006958 <_printf_i+0x144>
 8006940:	6823      	ldr	r3, [r4, #0]
 8006942:	07df      	lsls	r7, r3, #31
 8006944:	d508      	bpl.n	8006958 <_printf_i+0x144>
 8006946:	6923      	ldr	r3, [r4, #16]
 8006948:	6861      	ldr	r1, [r4, #4]
 800694a:	4299      	cmp	r1, r3
 800694c:	bfde      	ittt	le
 800694e:	2330      	movle	r3, #48	@ 0x30
 8006950:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006954:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006958:	1b92      	subs	r2, r2, r6
 800695a:	6122      	str	r2, [r4, #16]
 800695c:	f8cd a000 	str.w	sl, [sp]
 8006960:	464b      	mov	r3, r9
 8006962:	aa03      	add	r2, sp, #12
 8006964:	4621      	mov	r1, r4
 8006966:	4640      	mov	r0, r8
 8006968:	f7ff fee6 	bl	8006738 <_printf_common>
 800696c:	3001      	adds	r0, #1
 800696e:	d14a      	bne.n	8006a06 <_printf_i+0x1f2>
 8006970:	f04f 30ff 	mov.w	r0, #4294967295
 8006974:	b004      	add	sp, #16
 8006976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800697a:	6823      	ldr	r3, [r4, #0]
 800697c:	f043 0320 	orr.w	r3, r3, #32
 8006980:	6023      	str	r3, [r4, #0]
 8006982:	4833      	ldr	r0, [pc, #204]	@ (8006a50 <_printf_i+0x23c>)
 8006984:	2778      	movs	r7, #120	@ 0x78
 8006986:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	6831      	ldr	r1, [r6, #0]
 800698e:	061f      	lsls	r7, r3, #24
 8006990:	f851 5b04 	ldr.w	r5, [r1], #4
 8006994:	d402      	bmi.n	800699c <_printf_i+0x188>
 8006996:	065f      	lsls	r7, r3, #25
 8006998:	bf48      	it	mi
 800699a:	b2ad      	uxthmi	r5, r5
 800699c:	6031      	str	r1, [r6, #0]
 800699e:	07d9      	lsls	r1, r3, #31
 80069a0:	bf44      	itt	mi
 80069a2:	f043 0320 	orrmi.w	r3, r3, #32
 80069a6:	6023      	strmi	r3, [r4, #0]
 80069a8:	b11d      	cbz	r5, 80069b2 <_printf_i+0x19e>
 80069aa:	2310      	movs	r3, #16
 80069ac:	e7ac      	b.n	8006908 <_printf_i+0xf4>
 80069ae:	4827      	ldr	r0, [pc, #156]	@ (8006a4c <_printf_i+0x238>)
 80069b0:	e7e9      	b.n	8006986 <_printf_i+0x172>
 80069b2:	6823      	ldr	r3, [r4, #0]
 80069b4:	f023 0320 	bic.w	r3, r3, #32
 80069b8:	6023      	str	r3, [r4, #0]
 80069ba:	e7f6      	b.n	80069aa <_printf_i+0x196>
 80069bc:	4616      	mov	r6, r2
 80069be:	e7bd      	b.n	800693c <_printf_i+0x128>
 80069c0:	6833      	ldr	r3, [r6, #0]
 80069c2:	6825      	ldr	r5, [r4, #0]
 80069c4:	6961      	ldr	r1, [r4, #20]
 80069c6:	1d18      	adds	r0, r3, #4
 80069c8:	6030      	str	r0, [r6, #0]
 80069ca:	062e      	lsls	r6, r5, #24
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	d501      	bpl.n	80069d4 <_printf_i+0x1c0>
 80069d0:	6019      	str	r1, [r3, #0]
 80069d2:	e002      	b.n	80069da <_printf_i+0x1c6>
 80069d4:	0668      	lsls	r0, r5, #25
 80069d6:	d5fb      	bpl.n	80069d0 <_printf_i+0x1bc>
 80069d8:	8019      	strh	r1, [r3, #0]
 80069da:	2300      	movs	r3, #0
 80069dc:	6123      	str	r3, [r4, #16]
 80069de:	4616      	mov	r6, r2
 80069e0:	e7bc      	b.n	800695c <_printf_i+0x148>
 80069e2:	6833      	ldr	r3, [r6, #0]
 80069e4:	1d1a      	adds	r2, r3, #4
 80069e6:	6032      	str	r2, [r6, #0]
 80069e8:	681e      	ldr	r6, [r3, #0]
 80069ea:	6862      	ldr	r2, [r4, #4]
 80069ec:	2100      	movs	r1, #0
 80069ee:	4630      	mov	r0, r6
 80069f0:	f7f9 fbee 	bl	80001d0 <memchr>
 80069f4:	b108      	cbz	r0, 80069fa <_printf_i+0x1e6>
 80069f6:	1b80      	subs	r0, r0, r6
 80069f8:	6060      	str	r0, [r4, #4]
 80069fa:	6863      	ldr	r3, [r4, #4]
 80069fc:	6123      	str	r3, [r4, #16]
 80069fe:	2300      	movs	r3, #0
 8006a00:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006a04:	e7aa      	b.n	800695c <_printf_i+0x148>
 8006a06:	6923      	ldr	r3, [r4, #16]
 8006a08:	4632      	mov	r2, r6
 8006a0a:	4649      	mov	r1, r9
 8006a0c:	4640      	mov	r0, r8
 8006a0e:	47d0      	blx	sl
 8006a10:	3001      	adds	r0, #1
 8006a12:	d0ad      	beq.n	8006970 <_printf_i+0x15c>
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	079b      	lsls	r3, r3, #30
 8006a18:	d413      	bmi.n	8006a42 <_printf_i+0x22e>
 8006a1a:	68e0      	ldr	r0, [r4, #12]
 8006a1c:	9b03      	ldr	r3, [sp, #12]
 8006a1e:	4298      	cmp	r0, r3
 8006a20:	bfb8      	it	lt
 8006a22:	4618      	movlt	r0, r3
 8006a24:	e7a6      	b.n	8006974 <_printf_i+0x160>
 8006a26:	2301      	movs	r3, #1
 8006a28:	4632      	mov	r2, r6
 8006a2a:	4649      	mov	r1, r9
 8006a2c:	4640      	mov	r0, r8
 8006a2e:	47d0      	blx	sl
 8006a30:	3001      	adds	r0, #1
 8006a32:	d09d      	beq.n	8006970 <_printf_i+0x15c>
 8006a34:	3501      	adds	r5, #1
 8006a36:	68e3      	ldr	r3, [r4, #12]
 8006a38:	9903      	ldr	r1, [sp, #12]
 8006a3a:	1a5b      	subs	r3, r3, r1
 8006a3c:	42ab      	cmp	r3, r5
 8006a3e:	dcf2      	bgt.n	8006a26 <_printf_i+0x212>
 8006a40:	e7eb      	b.n	8006a1a <_printf_i+0x206>
 8006a42:	2500      	movs	r5, #0
 8006a44:	f104 0619 	add.w	r6, r4, #25
 8006a48:	e7f5      	b.n	8006a36 <_printf_i+0x222>
 8006a4a:	bf00      	nop
 8006a4c:	0800a536 	.word	0x0800a536
 8006a50:	0800a547 	.word	0x0800a547

08006a54 <std>:
 8006a54:	2300      	movs	r3, #0
 8006a56:	b510      	push	{r4, lr}
 8006a58:	4604      	mov	r4, r0
 8006a5a:	e9c0 3300 	strd	r3, r3, [r0]
 8006a5e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006a62:	6083      	str	r3, [r0, #8]
 8006a64:	8181      	strh	r1, [r0, #12]
 8006a66:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a68:	81c2      	strh	r2, [r0, #14]
 8006a6a:	6183      	str	r3, [r0, #24]
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	2208      	movs	r2, #8
 8006a70:	305c      	adds	r0, #92	@ 0x5c
 8006a72:	f000 f914 	bl	8006c9e <memset>
 8006a76:	4b0d      	ldr	r3, [pc, #52]	@ (8006aac <std+0x58>)
 8006a78:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a7a:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab0 <std+0x5c>)
 8006a7c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab4 <std+0x60>)
 8006a80:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a82:	4b0d      	ldr	r3, [pc, #52]	@ (8006ab8 <std+0x64>)
 8006a84:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a86:	4b0d      	ldr	r3, [pc, #52]	@ (8006abc <std+0x68>)
 8006a88:	6224      	str	r4, [r4, #32]
 8006a8a:	429c      	cmp	r4, r3
 8006a8c:	d006      	beq.n	8006a9c <std+0x48>
 8006a8e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a92:	4294      	cmp	r4, r2
 8006a94:	d002      	beq.n	8006a9c <std+0x48>
 8006a96:	33d0      	adds	r3, #208	@ 0xd0
 8006a98:	429c      	cmp	r4, r3
 8006a9a:	d105      	bne.n	8006aa8 <std+0x54>
 8006a9c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006aa4:	f000 b978 	b.w	8006d98 <__retarget_lock_init_recursive>
 8006aa8:	bd10      	pop	{r4, pc}
 8006aaa:	bf00      	nop
 8006aac:	08006c19 	.word	0x08006c19
 8006ab0:	08006c3b 	.word	0x08006c3b
 8006ab4:	08006c73 	.word	0x08006c73
 8006ab8:	08006c97 	.word	0x08006c97
 8006abc:	20000848 	.word	0x20000848

08006ac0 <stdio_exit_handler>:
 8006ac0:	4a02      	ldr	r2, [pc, #8]	@ (8006acc <stdio_exit_handler+0xc>)
 8006ac2:	4903      	ldr	r1, [pc, #12]	@ (8006ad0 <stdio_exit_handler+0x10>)
 8006ac4:	4803      	ldr	r0, [pc, #12]	@ (8006ad4 <stdio_exit_handler+0x14>)
 8006ac6:	f000 b869 	b.w	8006b9c <_fwalk_sglue>
 8006aca:	bf00      	nop
 8006acc:	2000000c 	.word	0x2000000c
 8006ad0:	08008715 	.word	0x08008715
 8006ad4:	2000001c 	.word	0x2000001c

08006ad8 <cleanup_stdio>:
 8006ad8:	6841      	ldr	r1, [r0, #4]
 8006ada:	4b0c      	ldr	r3, [pc, #48]	@ (8006b0c <cleanup_stdio+0x34>)
 8006adc:	4299      	cmp	r1, r3
 8006ade:	b510      	push	{r4, lr}
 8006ae0:	4604      	mov	r4, r0
 8006ae2:	d001      	beq.n	8006ae8 <cleanup_stdio+0x10>
 8006ae4:	f001 fe16 	bl	8008714 <_fflush_r>
 8006ae8:	68a1      	ldr	r1, [r4, #8]
 8006aea:	4b09      	ldr	r3, [pc, #36]	@ (8006b10 <cleanup_stdio+0x38>)
 8006aec:	4299      	cmp	r1, r3
 8006aee:	d002      	beq.n	8006af6 <cleanup_stdio+0x1e>
 8006af0:	4620      	mov	r0, r4
 8006af2:	f001 fe0f 	bl	8008714 <_fflush_r>
 8006af6:	68e1      	ldr	r1, [r4, #12]
 8006af8:	4b06      	ldr	r3, [pc, #24]	@ (8006b14 <cleanup_stdio+0x3c>)
 8006afa:	4299      	cmp	r1, r3
 8006afc:	d004      	beq.n	8006b08 <cleanup_stdio+0x30>
 8006afe:	4620      	mov	r0, r4
 8006b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b04:	f001 be06 	b.w	8008714 <_fflush_r>
 8006b08:	bd10      	pop	{r4, pc}
 8006b0a:	bf00      	nop
 8006b0c:	20000848 	.word	0x20000848
 8006b10:	200008b0 	.word	0x200008b0
 8006b14:	20000918 	.word	0x20000918

08006b18 <global_stdio_init.part.0>:
 8006b18:	b510      	push	{r4, lr}
 8006b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8006b48 <global_stdio_init.part.0+0x30>)
 8006b1c:	4c0b      	ldr	r4, [pc, #44]	@ (8006b4c <global_stdio_init.part.0+0x34>)
 8006b1e:	4a0c      	ldr	r2, [pc, #48]	@ (8006b50 <global_stdio_init.part.0+0x38>)
 8006b20:	601a      	str	r2, [r3, #0]
 8006b22:	4620      	mov	r0, r4
 8006b24:	2200      	movs	r2, #0
 8006b26:	2104      	movs	r1, #4
 8006b28:	f7ff ff94 	bl	8006a54 <std>
 8006b2c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006b30:	2201      	movs	r2, #1
 8006b32:	2109      	movs	r1, #9
 8006b34:	f7ff ff8e 	bl	8006a54 <std>
 8006b38:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b42:	2112      	movs	r1, #18
 8006b44:	f7ff bf86 	b.w	8006a54 <std>
 8006b48:	20000980 	.word	0x20000980
 8006b4c:	20000848 	.word	0x20000848
 8006b50:	08006ac1 	.word	0x08006ac1

08006b54 <__sfp_lock_acquire>:
 8006b54:	4801      	ldr	r0, [pc, #4]	@ (8006b5c <__sfp_lock_acquire+0x8>)
 8006b56:	f000 b920 	b.w	8006d9a <__retarget_lock_acquire_recursive>
 8006b5a:	bf00      	nop
 8006b5c:	20000989 	.word	0x20000989

08006b60 <__sfp_lock_release>:
 8006b60:	4801      	ldr	r0, [pc, #4]	@ (8006b68 <__sfp_lock_release+0x8>)
 8006b62:	f000 b91b 	b.w	8006d9c <__retarget_lock_release_recursive>
 8006b66:	bf00      	nop
 8006b68:	20000989 	.word	0x20000989

08006b6c <__sinit>:
 8006b6c:	b510      	push	{r4, lr}
 8006b6e:	4604      	mov	r4, r0
 8006b70:	f7ff fff0 	bl	8006b54 <__sfp_lock_acquire>
 8006b74:	6a23      	ldr	r3, [r4, #32]
 8006b76:	b11b      	cbz	r3, 8006b80 <__sinit+0x14>
 8006b78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b7c:	f7ff bff0 	b.w	8006b60 <__sfp_lock_release>
 8006b80:	4b04      	ldr	r3, [pc, #16]	@ (8006b94 <__sinit+0x28>)
 8006b82:	6223      	str	r3, [r4, #32]
 8006b84:	4b04      	ldr	r3, [pc, #16]	@ (8006b98 <__sinit+0x2c>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	2b00      	cmp	r3, #0
 8006b8a:	d1f5      	bne.n	8006b78 <__sinit+0xc>
 8006b8c:	f7ff ffc4 	bl	8006b18 <global_stdio_init.part.0>
 8006b90:	e7f2      	b.n	8006b78 <__sinit+0xc>
 8006b92:	bf00      	nop
 8006b94:	08006ad9 	.word	0x08006ad9
 8006b98:	20000980 	.word	0x20000980

08006b9c <_fwalk_sglue>:
 8006b9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ba0:	4607      	mov	r7, r0
 8006ba2:	4688      	mov	r8, r1
 8006ba4:	4614      	mov	r4, r2
 8006ba6:	2600      	movs	r6, #0
 8006ba8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006bac:	f1b9 0901 	subs.w	r9, r9, #1
 8006bb0:	d505      	bpl.n	8006bbe <_fwalk_sglue+0x22>
 8006bb2:	6824      	ldr	r4, [r4, #0]
 8006bb4:	2c00      	cmp	r4, #0
 8006bb6:	d1f7      	bne.n	8006ba8 <_fwalk_sglue+0xc>
 8006bb8:	4630      	mov	r0, r6
 8006bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006bbe:	89ab      	ldrh	r3, [r5, #12]
 8006bc0:	2b01      	cmp	r3, #1
 8006bc2:	d907      	bls.n	8006bd4 <_fwalk_sglue+0x38>
 8006bc4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006bc8:	3301      	adds	r3, #1
 8006bca:	d003      	beq.n	8006bd4 <_fwalk_sglue+0x38>
 8006bcc:	4629      	mov	r1, r5
 8006bce:	4638      	mov	r0, r7
 8006bd0:	47c0      	blx	r8
 8006bd2:	4306      	orrs	r6, r0
 8006bd4:	3568      	adds	r5, #104	@ 0x68
 8006bd6:	e7e9      	b.n	8006bac <_fwalk_sglue+0x10>

08006bd8 <siprintf>:
 8006bd8:	b40e      	push	{r1, r2, r3}
 8006bda:	b500      	push	{lr}
 8006bdc:	b09c      	sub	sp, #112	@ 0x70
 8006bde:	ab1d      	add	r3, sp, #116	@ 0x74
 8006be0:	9002      	str	r0, [sp, #8]
 8006be2:	9006      	str	r0, [sp, #24]
 8006be4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006be8:	4809      	ldr	r0, [pc, #36]	@ (8006c10 <siprintf+0x38>)
 8006bea:	9107      	str	r1, [sp, #28]
 8006bec:	9104      	str	r1, [sp, #16]
 8006bee:	4909      	ldr	r1, [pc, #36]	@ (8006c14 <siprintf+0x3c>)
 8006bf0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006bf4:	9105      	str	r1, [sp, #20]
 8006bf6:	6800      	ldr	r0, [r0, #0]
 8006bf8:	9301      	str	r3, [sp, #4]
 8006bfa:	a902      	add	r1, sp, #8
 8006bfc:	f001 fc0a 	bl	8008414 <_svfiprintf_r>
 8006c00:	9b02      	ldr	r3, [sp, #8]
 8006c02:	2200      	movs	r2, #0
 8006c04:	701a      	strb	r2, [r3, #0]
 8006c06:	b01c      	add	sp, #112	@ 0x70
 8006c08:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c0c:	b003      	add	sp, #12
 8006c0e:	4770      	bx	lr
 8006c10:	20000018 	.word	0x20000018
 8006c14:	ffff0208 	.word	0xffff0208

08006c18 <__sread>:
 8006c18:	b510      	push	{r4, lr}
 8006c1a:	460c      	mov	r4, r1
 8006c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c20:	f000 f86c 	bl	8006cfc <_read_r>
 8006c24:	2800      	cmp	r0, #0
 8006c26:	bfab      	itete	ge
 8006c28:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006c2a:	89a3      	ldrhlt	r3, [r4, #12]
 8006c2c:	181b      	addge	r3, r3, r0
 8006c2e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006c32:	bfac      	ite	ge
 8006c34:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006c36:	81a3      	strhlt	r3, [r4, #12]
 8006c38:	bd10      	pop	{r4, pc}

08006c3a <__swrite>:
 8006c3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006c3e:	461f      	mov	r7, r3
 8006c40:	898b      	ldrh	r3, [r1, #12]
 8006c42:	05db      	lsls	r3, r3, #23
 8006c44:	4605      	mov	r5, r0
 8006c46:	460c      	mov	r4, r1
 8006c48:	4616      	mov	r6, r2
 8006c4a:	d505      	bpl.n	8006c58 <__swrite+0x1e>
 8006c4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c50:	2302      	movs	r3, #2
 8006c52:	2200      	movs	r2, #0
 8006c54:	f000 f840 	bl	8006cd8 <_lseek_r>
 8006c58:	89a3      	ldrh	r3, [r4, #12]
 8006c5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006c5e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006c62:	81a3      	strh	r3, [r4, #12]
 8006c64:	4632      	mov	r2, r6
 8006c66:	463b      	mov	r3, r7
 8006c68:	4628      	mov	r0, r5
 8006c6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006c6e:	f000 b857 	b.w	8006d20 <_write_r>

08006c72 <__sseek>:
 8006c72:	b510      	push	{r4, lr}
 8006c74:	460c      	mov	r4, r1
 8006c76:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c7a:	f000 f82d 	bl	8006cd8 <_lseek_r>
 8006c7e:	1c43      	adds	r3, r0, #1
 8006c80:	89a3      	ldrh	r3, [r4, #12]
 8006c82:	bf15      	itete	ne
 8006c84:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006c86:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006c8a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006c8e:	81a3      	strheq	r3, [r4, #12]
 8006c90:	bf18      	it	ne
 8006c92:	81a3      	strhne	r3, [r4, #12]
 8006c94:	bd10      	pop	{r4, pc}

08006c96 <__sclose>:
 8006c96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c9a:	f000 b80d 	b.w	8006cb8 <_close_r>

08006c9e <memset>:
 8006c9e:	4402      	add	r2, r0
 8006ca0:	4603      	mov	r3, r0
 8006ca2:	4293      	cmp	r3, r2
 8006ca4:	d100      	bne.n	8006ca8 <memset+0xa>
 8006ca6:	4770      	bx	lr
 8006ca8:	f803 1b01 	strb.w	r1, [r3], #1
 8006cac:	e7f9      	b.n	8006ca2 <memset+0x4>
	...

08006cb0 <_localeconv_r>:
 8006cb0:	4800      	ldr	r0, [pc, #0]	@ (8006cb4 <_localeconv_r+0x4>)
 8006cb2:	4770      	bx	lr
 8006cb4:	20000158 	.word	0x20000158

08006cb8 <_close_r>:
 8006cb8:	b538      	push	{r3, r4, r5, lr}
 8006cba:	4d06      	ldr	r5, [pc, #24]	@ (8006cd4 <_close_r+0x1c>)
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	4604      	mov	r4, r0
 8006cc0:	4608      	mov	r0, r1
 8006cc2:	602b      	str	r3, [r5, #0]
 8006cc4:	f7fb ff97 	bl	8002bf6 <_close>
 8006cc8:	1c43      	adds	r3, r0, #1
 8006cca:	d102      	bne.n	8006cd2 <_close_r+0x1a>
 8006ccc:	682b      	ldr	r3, [r5, #0]
 8006cce:	b103      	cbz	r3, 8006cd2 <_close_r+0x1a>
 8006cd0:	6023      	str	r3, [r4, #0]
 8006cd2:	bd38      	pop	{r3, r4, r5, pc}
 8006cd4:	20000984 	.word	0x20000984

08006cd8 <_lseek_r>:
 8006cd8:	b538      	push	{r3, r4, r5, lr}
 8006cda:	4d07      	ldr	r5, [pc, #28]	@ (8006cf8 <_lseek_r+0x20>)
 8006cdc:	4604      	mov	r4, r0
 8006cde:	4608      	mov	r0, r1
 8006ce0:	4611      	mov	r1, r2
 8006ce2:	2200      	movs	r2, #0
 8006ce4:	602a      	str	r2, [r5, #0]
 8006ce6:	461a      	mov	r2, r3
 8006ce8:	f7fb ffac 	bl	8002c44 <_lseek>
 8006cec:	1c43      	adds	r3, r0, #1
 8006cee:	d102      	bne.n	8006cf6 <_lseek_r+0x1e>
 8006cf0:	682b      	ldr	r3, [r5, #0]
 8006cf2:	b103      	cbz	r3, 8006cf6 <_lseek_r+0x1e>
 8006cf4:	6023      	str	r3, [r4, #0]
 8006cf6:	bd38      	pop	{r3, r4, r5, pc}
 8006cf8:	20000984 	.word	0x20000984

08006cfc <_read_r>:
 8006cfc:	b538      	push	{r3, r4, r5, lr}
 8006cfe:	4d07      	ldr	r5, [pc, #28]	@ (8006d1c <_read_r+0x20>)
 8006d00:	4604      	mov	r4, r0
 8006d02:	4608      	mov	r0, r1
 8006d04:	4611      	mov	r1, r2
 8006d06:	2200      	movs	r2, #0
 8006d08:	602a      	str	r2, [r5, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	f7fb ff3a 	bl	8002b84 <_read>
 8006d10:	1c43      	adds	r3, r0, #1
 8006d12:	d102      	bne.n	8006d1a <_read_r+0x1e>
 8006d14:	682b      	ldr	r3, [r5, #0]
 8006d16:	b103      	cbz	r3, 8006d1a <_read_r+0x1e>
 8006d18:	6023      	str	r3, [r4, #0]
 8006d1a:	bd38      	pop	{r3, r4, r5, pc}
 8006d1c:	20000984 	.word	0x20000984

08006d20 <_write_r>:
 8006d20:	b538      	push	{r3, r4, r5, lr}
 8006d22:	4d07      	ldr	r5, [pc, #28]	@ (8006d40 <_write_r+0x20>)
 8006d24:	4604      	mov	r4, r0
 8006d26:	4608      	mov	r0, r1
 8006d28:	4611      	mov	r1, r2
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	602a      	str	r2, [r5, #0]
 8006d2e:	461a      	mov	r2, r3
 8006d30:	f7fb ff45 	bl	8002bbe <_write>
 8006d34:	1c43      	adds	r3, r0, #1
 8006d36:	d102      	bne.n	8006d3e <_write_r+0x1e>
 8006d38:	682b      	ldr	r3, [r5, #0]
 8006d3a:	b103      	cbz	r3, 8006d3e <_write_r+0x1e>
 8006d3c:	6023      	str	r3, [r4, #0]
 8006d3e:	bd38      	pop	{r3, r4, r5, pc}
 8006d40:	20000984 	.word	0x20000984

08006d44 <__errno>:
 8006d44:	4b01      	ldr	r3, [pc, #4]	@ (8006d4c <__errno+0x8>)
 8006d46:	6818      	ldr	r0, [r3, #0]
 8006d48:	4770      	bx	lr
 8006d4a:	bf00      	nop
 8006d4c:	20000018 	.word	0x20000018

08006d50 <__libc_init_array>:
 8006d50:	b570      	push	{r4, r5, r6, lr}
 8006d52:	4d0d      	ldr	r5, [pc, #52]	@ (8006d88 <__libc_init_array+0x38>)
 8006d54:	4c0d      	ldr	r4, [pc, #52]	@ (8006d8c <__libc_init_array+0x3c>)
 8006d56:	1b64      	subs	r4, r4, r5
 8006d58:	10a4      	asrs	r4, r4, #2
 8006d5a:	2600      	movs	r6, #0
 8006d5c:	42a6      	cmp	r6, r4
 8006d5e:	d109      	bne.n	8006d74 <__libc_init_array+0x24>
 8006d60:	4d0b      	ldr	r5, [pc, #44]	@ (8006d90 <__libc_init_array+0x40>)
 8006d62:	4c0c      	ldr	r4, [pc, #48]	@ (8006d94 <__libc_init_array+0x44>)
 8006d64:	f002 ffc6 	bl	8009cf4 <_init>
 8006d68:	1b64      	subs	r4, r4, r5
 8006d6a:	10a4      	asrs	r4, r4, #2
 8006d6c:	2600      	movs	r6, #0
 8006d6e:	42a6      	cmp	r6, r4
 8006d70:	d105      	bne.n	8006d7e <__libc_init_array+0x2e>
 8006d72:	bd70      	pop	{r4, r5, r6, pc}
 8006d74:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d78:	4798      	blx	r3
 8006d7a:	3601      	adds	r6, #1
 8006d7c:	e7ee      	b.n	8006d5c <__libc_init_array+0xc>
 8006d7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006d82:	4798      	blx	r3
 8006d84:	3601      	adds	r6, #1
 8006d86:	e7f2      	b.n	8006d6e <__libc_init_array+0x1e>
 8006d88:	0800a8d0 	.word	0x0800a8d0
 8006d8c:	0800a8d0 	.word	0x0800a8d0
 8006d90:	0800a8d0 	.word	0x0800a8d0
 8006d94:	0800a8d4 	.word	0x0800a8d4

08006d98 <__retarget_lock_init_recursive>:
 8006d98:	4770      	bx	lr

08006d9a <__retarget_lock_acquire_recursive>:
 8006d9a:	4770      	bx	lr

08006d9c <__retarget_lock_release_recursive>:
 8006d9c:	4770      	bx	lr

08006d9e <memcpy>:
 8006d9e:	440a      	add	r2, r1
 8006da0:	4291      	cmp	r1, r2
 8006da2:	f100 33ff 	add.w	r3, r0, #4294967295
 8006da6:	d100      	bne.n	8006daa <memcpy+0xc>
 8006da8:	4770      	bx	lr
 8006daa:	b510      	push	{r4, lr}
 8006dac:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006db0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006db4:	4291      	cmp	r1, r2
 8006db6:	d1f9      	bne.n	8006dac <memcpy+0xe>
 8006db8:	bd10      	pop	{r4, pc}

08006dba <quorem>:
 8006dba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006dbe:	6903      	ldr	r3, [r0, #16]
 8006dc0:	690c      	ldr	r4, [r1, #16]
 8006dc2:	42a3      	cmp	r3, r4
 8006dc4:	4607      	mov	r7, r0
 8006dc6:	db7e      	blt.n	8006ec6 <quorem+0x10c>
 8006dc8:	3c01      	subs	r4, #1
 8006dca:	f101 0814 	add.w	r8, r1, #20
 8006dce:	00a3      	lsls	r3, r4, #2
 8006dd0:	f100 0514 	add.w	r5, r0, #20
 8006dd4:	9300      	str	r3, [sp, #0]
 8006dd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006dda:	9301      	str	r3, [sp, #4]
 8006ddc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006de0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006de4:	3301      	adds	r3, #1
 8006de6:	429a      	cmp	r2, r3
 8006de8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006dec:	fbb2 f6f3 	udiv	r6, r2, r3
 8006df0:	d32e      	bcc.n	8006e50 <quorem+0x96>
 8006df2:	f04f 0a00 	mov.w	sl, #0
 8006df6:	46c4      	mov	ip, r8
 8006df8:	46ae      	mov	lr, r5
 8006dfa:	46d3      	mov	fp, sl
 8006dfc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006e00:	b298      	uxth	r0, r3
 8006e02:	fb06 a000 	mla	r0, r6, r0, sl
 8006e06:	0c02      	lsrs	r2, r0, #16
 8006e08:	0c1b      	lsrs	r3, r3, #16
 8006e0a:	fb06 2303 	mla	r3, r6, r3, r2
 8006e0e:	f8de 2000 	ldr.w	r2, [lr]
 8006e12:	b280      	uxth	r0, r0
 8006e14:	b292      	uxth	r2, r2
 8006e16:	1a12      	subs	r2, r2, r0
 8006e18:	445a      	add	r2, fp
 8006e1a:	f8de 0000 	ldr.w	r0, [lr]
 8006e1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006e22:	b29b      	uxth	r3, r3
 8006e24:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006e28:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006e2c:	b292      	uxth	r2, r2
 8006e2e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006e32:	45e1      	cmp	r9, ip
 8006e34:	f84e 2b04 	str.w	r2, [lr], #4
 8006e38:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006e3c:	d2de      	bcs.n	8006dfc <quorem+0x42>
 8006e3e:	9b00      	ldr	r3, [sp, #0]
 8006e40:	58eb      	ldr	r3, [r5, r3]
 8006e42:	b92b      	cbnz	r3, 8006e50 <quorem+0x96>
 8006e44:	9b01      	ldr	r3, [sp, #4]
 8006e46:	3b04      	subs	r3, #4
 8006e48:	429d      	cmp	r5, r3
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	d32f      	bcc.n	8006eae <quorem+0xf4>
 8006e4e:	613c      	str	r4, [r7, #16]
 8006e50:	4638      	mov	r0, r7
 8006e52:	f001 f97b 	bl	800814c <__mcmp>
 8006e56:	2800      	cmp	r0, #0
 8006e58:	db25      	blt.n	8006ea6 <quorem+0xec>
 8006e5a:	4629      	mov	r1, r5
 8006e5c:	2000      	movs	r0, #0
 8006e5e:	f858 2b04 	ldr.w	r2, [r8], #4
 8006e62:	f8d1 c000 	ldr.w	ip, [r1]
 8006e66:	fa1f fe82 	uxth.w	lr, r2
 8006e6a:	fa1f f38c 	uxth.w	r3, ip
 8006e6e:	eba3 030e 	sub.w	r3, r3, lr
 8006e72:	4403      	add	r3, r0
 8006e74:	0c12      	lsrs	r2, r2, #16
 8006e76:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8006e7a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e84:	45c1      	cmp	r9, r8
 8006e86:	f841 3b04 	str.w	r3, [r1], #4
 8006e8a:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006e8e:	d2e6      	bcs.n	8006e5e <quorem+0xa4>
 8006e90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e98:	b922      	cbnz	r2, 8006ea4 <quorem+0xea>
 8006e9a:	3b04      	subs	r3, #4
 8006e9c:	429d      	cmp	r5, r3
 8006e9e:	461a      	mov	r2, r3
 8006ea0:	d30b      	bcc.n	8006eba <quorem+0x100>
 8006ea2:	613c      	str	r4, [r7, #16]
 8006ea4:	3601      	adds	r6, #1
 8006ea6:	4630      	mov	r0, r6
 8006ea8:	b003      	add	sp, #12
 8006eaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006eae:	6812      	ldr	r2, [r2, #0]
 8006eb0:	3b04      	subs	r3, #4
 8006eb2:	2a00      	cmp	r2, #0
 8006eb4:	d1cb      	bne.n	8006e4e <quorem+0x94>
 8006eb6:	3c01      	subs	r4, #1
 8006eb8:	e7c6      	b.n	8006e48 <quorem+0x8e>
 8006eba:	6812      	ldr	r2, [r2, #0]
 8006ebc:	3b04      	subs	r3, #4
 8006ebe:	2a00      	cmp	r2, #0
 8006ec0:	d1ef      	bne.n	8006ea2 <quorem+0xe8>
 8006ec2:	3c01      	subs	r4, #1
 8006ec4:	e7ea      	b.n	8006e9c <quorem+0xe2>
 8006ec6:	2000      	movs	r0, #0
 8006ec8:	e7ee      	b.n	8006ea8 <quorem+0xee>
 8006eca:	0000      	movs	r0, r0
 8006ecc:	0000      	movs	r0, r0
	...

08006ed0 <_dtoa_r>:
 8006ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ed4:	69c7      	ldr	r7, [r0, #28]
 8006ed6:	b099      	sub	sp, #100	@ 0x64
 8006ed8:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006edc:	ec55 4b10 	vmov	r4, r5, d0
 8006ee0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006ee2:	9109      	str	r1, [sp, #36]	@ 0x24
 8006ee4:	4683      	mov	fp, r0
 8006ee6:	920e      	str	r2, [sp, #56]	@ 0x38
 8006ee8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006eea:	b97f      	cbnz	r7, 8006f0c <_dtoa_r+0x3c>
 8006eec:	2010      	movs	r0, #16
 8006eee:	f000 fdfd 	bl	8007aec <malloc>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	f8cb 001c 	str.w	r0, [fp, #28]
 8006ef8:	b920      	cbnz	r0, 8006f04 <_dtoa_r+0x34>
 8006efa:	4ba7      	ldr	r3, [pc, #668]	@ (8007198 <_dtoa_r+0x2c8>)
 8006efc:	21ef      	movs	r1, #239	@ 0xef
 8006efe:	48a7      	ldr	r0, [pc, #668]	@ (800719c <_dtoa_r+0x2cc>)
 8006f00:	f001 fc5a 	bl	80087b8 <__assert_func>
 8006f04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006f08:	6007      	str	r7, [r0, #0]
 8006f0a:	60c7      	str	r7, [r0, #12]
 8006f0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f10:	6819      	ldr	r1, [r3, #0]
 8006f12:	b159      	cbz	r1, 8006f2c <_dtoa_r+0x5c>
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	604a      	str	r2, [r1, #4]
 8006f18:	2301      	movs	r3, #1
 8006f1a:	4093      	lsls	r3, r2
 8006f1c:	608b      	str	r3, [r1, #8]
 8006f1e:	4658      	mov	r0, fp
 8006f20:	f000 feda 	bl	8007cd8 <_Bfree>
 8006f24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006f28:	2200      	movs	r2, #0
 8006f2a:	601a      	str	r2, [r3, #0]
 8006f2c:	1e2b      	subs	r3, r5, #0
 8006f2e:	bfb9      	ittee	lt
 8006f30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006f34:	9303      	strlt	r3, [sp, #12]
 8006f36:	2300      	movge	r3, #0
 8006f38:	6033      	strge	r3, [r6, #0]
 8006f3a:	9f03      	ldr	r7, [sp, #12]
 8006f3c:	4b98      	ldr	r3, [pc, #608]	@ (80071a0 <_dtoa_r+0x2d0>)
 8006f3e:	bfbc      	itt	lt
 8006f40:	2201      	movlt	r2, #1
 8006f42:	6032      	strlt	r2, [r6, #0]
 8006f44:	43bb      	bics	r3, r7
 8006f46:	d112      	bne.n	8006f6e <_dtoa_r+0x9e>
 8006f48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006f4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 8006f4e:	6013      	str	r3, [r2, #0]
 8006f50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006f54:	4323      	orrs	r3, r4
 8006f56:	f000 854d 	beq.w	80079f4 <_dtoa_r+0xb24>
 8006f5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80071b4 <_dtoa_r+0x2e4>
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	f000 854f 	beq.w	8007a04 <_dtoa_r+0xb34>
 8006f66:	f10a 0303 	add.w	r3, sl, #3
 8006f6a:	f000 bd49 	b.w	8007a00 <_dtoa_r+0xb30>
 8006f6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8006f72:	2200      	movs	r2, #0
 8006f74:	ec51 0b17 	vmov	r0, r1, d7
 8006f78:	2300      	movs	r3, #0
 8006f7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8006f7e:	f7f9 fda3 	bl	8000ac8 <__aeabi_dcmpeq>
 8006f82:	4680      	mov	r8, r0
 8006f84:	b158      	cbz	r0, 8006f9e <_dtoa_r+0xce>
 8006f86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006f88:	2301      	movs	r3, #1
 8006f8a:	6013      	str	r3, [r2, #0]
 8006f8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006f8e:	b113      	cbz	r3, 8006f96 <_dtoa_r+0xc6>
 8006f90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006f92:	4b84      	ldr	r3, [pc, #528]	@ (80071a4 <_dtoa_r+0x2d4>)
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80071b8 <_dtoa_r+0x2e8>
 8006f9a:	f000 bd33 	b.w	8007a04 <_dtoa_r+0xb34>
 8006f9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006fa2:	aa16      	add	r2, sp, #88	@ 0x58
 8006fa4:	a917      	add	r1, sp, #92	@ 0x5c
 8006fa6:	4658      	mov	r0, fp
 8006fa8:	f001 f980 	bl	80082ac <__d2b>
 8006fac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006fb0:	4681      	mov	r9, r0
 8006fb2:	2e00      	cmp	r6, #0
 8006fb4:	d077      	beq.n	80070a6 <_dtoa_r+0x1d6>
 8006fb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006fb8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8006fbc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006fc0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006fc4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006fc8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006fcc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	4b74      	ldr	r3, [pc, #464]	@ (80071a8 <_dtoa_r+0x2d8>)
 8006fd6:	f7f9 f957 	bl	8000288 <__aeabi_dsub>
 8006fda:	a369      	add	r3, pc, #420	@ (adr r3, 8007180 <_dtoa_r+0x2b0>)
 8006fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fe0:	f7f9 fb0a 	bl	80005f8 <__aeabi_dmul>
 8006fe4:	a368      	add	r3, pc, #416	@ (adr r3, 8007188 <_dtoa_r+0x2b8>)
 8006fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006fea:	f7f9 f94f 	bl	800028c <__adddf3>
 8006fee:	4604      	mov	r4, r0
 8006ff0:	4630      	mov	r0, r6
 8006ff2:	460d      	mov	r5, r1
 8006ff4:	f7f9 fa96 	bl	8000524 <__aeabi_i2d>
 8006ff8:	a365      	add	r3, pc, #404	@ (adr r3, 8007190 <_dtoa_r+0x2c0>)
 8006ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ffe:	f7f9 fafb 	bl	80005f8 <__aeabi_dmul>
 8007002:	4602      	mov	r2, r0
 8007004:	460b      	mov	r3, r1
 8007006:	4620      	mov	r0, r4
 8007008:	4629      	mov	r1, r5
 800700a:	f7f9 f93f 	bl	800028c <__adddf3>
 800700e:	4604      	mov	r4, r0
 8007010:	460d      	mov	r5, r1
 8007012:	f7f9 fda1 	bl	8000b58 <__aeabi_d2iz>
 8007016:	2200      	movs	r2, #0
 8007018:	4607      	mov	r7, r0
 800701a:	2300      	movs	r3, #0
 800701c:	4620      	mov	r0, r4
 800701e:	4629      	mov	r1, r5
 8007020:	f7f9 fd5c 	bl	8000adc <__aeabi_dcmplt>
 8007024:	b140      	cbz	r0, 8007038 <_dtoa_r+0x168>
 8007026:	4638      	mov	r0, r7
 8007028:	f7f9 fa7c 	bl	8000524 <__aeabi_i2d>
 800702c:	4622      	mov	r2, r4
 800702e:	462b      	mov	r3, r5
 8007030:	f7f9 fd4a 	bl	8000ac8 <__aeabi_dcmpeq>
 8007034:	b900      	cbnz	r0, 8007038 <_dtoa_r+0x168>
 8007036:	3f01      	subs	r7, #1
 8007038:	2f16      	cmp	r7, #22
 800703a:	d851      	bhi.n	80070e0 <_dtoa_r+0x210>
 800703c:	4b5b      	ldr	r3, [pc, #364]	@ (80071ac <_dtoa_r+0x2dc>)
 800703e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007046:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800704a:	f7f9 fd47 	bl	8000adc <__aeabi_dcmplt>
 800704e:	2800      	cmp	r0, #0
 8007050:	d048      	beq.n	80070e4 <_dtoa_r+0x214>
 8007052:	3f01      	subs	r7, #1
 8007054:	2300      	movs	r3, #0
 8007056:	9312      	str	r3, [sp, #72]	@ 0x48
 8007058:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800705a:	1b9b      	subs	r3, r3, r6
 800705c:	1e5a      	subs	r2, r3, #1
 800705e:	bf44      	itt	mi
 8007060:	f1c3 0801 	rsbmi	r8, r3, #1
 8007064:	2300      	movmi	r3, #0
 8007066:	9208      	str	r2, [sp, #32]
 8007068:	bf54      	ite	pl
 800706a:	f04f 0800 	movpl.w	r8, #0
 800706e:	9308      	strmi	r3, [sp, #32]
 8007070:	2f00      	cmp	r7, #0
 8007072:	db39      	blt.n	80070e8 <_dtoa_r+0x218>
 8007074:	9b08      	ldr	r3, [sp, #32]
 8007076:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007078:	443b      	add	r3, r7
 800707a:	9308      	str	r3, [sp, #32]
 800707c:	2300      	movs	r3, #0
 800707e:	930a      	str	r3, [sp, #40]	@ 0x28
 8007080:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007082:	2b09      	cmp	r3, #9
 8007084:	d864      	bhi.n	8007150 <_dtoa_r+0x280>
 8007086:	2b05      	cmp	r3, #5
 8007088:	bfc4      	itt	gt
 800708a:	3b04      	subgt	r3, #4
 800708c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800708e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007090:	f1a3 0302 	sub.w	r3, r3, #2
 8007094:	bfcc      	ite	gt
 8007096:	2400      	movgt	r4, #0
 8007098:	2401      	movle	r4, #1
 800709a:	2b03      	cmp	r3, #3
 800709c:	d863      	bhi.n	8007166 <_dtoa_r+0x296>
 800709e:	e8df f003 	tbb	[pc, r3]
 80070a2:	372a      	.short	0x372a
 80070a4:	5535      	.short	0x5535
 80070a6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80070aa:	441e      	add	r6, r3
 80070ac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80070b0:	2b20      	cmp	r3, #32
 80070b2:	bfc1      	itttt	gt
 80070b4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80070b8:	409f      	lslgt	r7, r3
 80070ba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80070be:	fa24 f303 	lsrgt.w	r3, r4, r3
 80070c2:	bfd6      	itet	le
 80070c4:	f1c3 0320 	rsble	r3, r3, #32
 80070c8:	ea47 0003 	orrgt.w	r0, r7, r3
 80070cc:	fa04 f003 	lslle.w	r0, r4, r3
 80070d0:	f7f9 fa18 	bl	8000504 <__aeabi_ui2d>
 80070d4:	2201      	movs	r2, #1
 80070d6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80070da:	3e01      	subs	r6, #1
 80070dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80070de:	e777      	b.n	8006fd0 <_dtoa_r+0x100>
 80070e0:	2301      	movs	r3, #1
 80070e2:	e7b8      	b.n	8007056 <_dtoa_r+0x186>
 80070e4:	9012      	str	r0, [sp, #72]	@ 0x48
 80070e6:	e7b7      	b.n	8007058 <_dtoa_r+0x188>
 80070e8:	427b      	negs	r3, r7
 80070ea:	930a      	str	r3, [sp, #40]	@ 0x28
 80070ec:	2300      	movs	r3, #0
 80070ee:	eba8 0807 	sub.w	r8, r8, r7
 80070f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80070f4:	e7c4      	b.n	8007080 <_dtoa_r+0x1b0>
 80070f6:	2300      	movs	r3, #0
 80070f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80070fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	dc35      	bgt.n	800716c <_dtoa_r+0x29c>
 8007100:	2301      	movs	r3, #1
 8007102:	9300      	str	r3, [sp, #0]
 8007104:	9307      	str	r3, [sp, #28]
 8007106:	461a      	mov	r2, r3
 8007108:	920e      	str	r2, [sp, #56]	@ 0x38
 800710a:	e00b      	b.n	8007124 <_dtoa_r+0x254>
 800710c:	2301      	movs	r3, #1
 800710e:	e7f3      	b.n	80070f8 <_dtoa_r+0x228>
 8007110:	2300      	movs	r3, #0
 8007112:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007114:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007116:	18fb      	adds	r3, r7, r3
 8007118:	9300      	str	r3, [sp, #0]
 800711a:	3301      	adds	r3, #1
 800711c:	2b01      	cmp	r3, #1
 800711e:	9307      	str	r3, [sp, #28]
 8007120:	bfb8      	it	lt
 8007122:	2301      	movlt	r3, #1
 8007124:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007128:	2100      	movs	r1, #0
 800712a:	2204      	movs	r2, #4
 800712c:	f102 0514 	add.w	r5, r2, #20
 8007130:	429d      	cmp	r5, r3
 8007132:	d91f      	bls.n	8007174 <_dtoa_r+0x2a4>
 8007134:	6041      	str	r1, [r0, #4]
 8007136:	4658      	mov	r0, fp
 8007138:	f000 fd8e 	bl	8007c58 <_Balloc>
 800713c:	4682      	mov	sl, r0
 800713e:	2800      	cmp	r0, #0
 8007140:	d13c      	bne.n	80071bc <_dtoa_r+0x2ec>
 8007142:	4b1b      	ldr	r3, [pc, #108]	@ (80071b0 <_dtoa_r+0x2e0>)
 8007144:	4602      	mov	r2, r0
 8007146:	f240 11af 	movw	r1, #431	@ 0x1af
 800714a:	e6d8      	b.n	8006efe <_dtoa_r+0x2e>
 800714c:	2301      	movs	r3, #1
 800714e:	e7e0      	b.n	8007112 <_dtoa_r+0x242>
 8007150:	2401      	movs	r4, #1
 8007152:	2300      	movs	r3, #0
 8007154:	9309      	str	r3, [sp, #36]	@ 0x24
 8007156:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007158:	f04f 33ff 	mov.w	r3, #4294967295
 800715c:	9300      	str	r3, [sp, #0]
 800715e:	9307      	str	r3, [sp, #28]
 8007160:	2200      	movs	r2, #0
 8007162:	2312      	movs	r3, #18
 8007164:	e7d0      	b.n	8007108 <_dtoa_r+0x238>
 8007166:	2301      	movs	r3, #1
 8007168:	930b      	str	r3, [sp, #44]	@ 0x2c
 800716a:	e7f5      	b.n	8007158 <_dtoa_r+0x288>
 800716c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800716e:	9300      	str	r3, [sp, #0]
 8007170:	9307      	str	r3, [sp, #28]
 8007172:	e7d7      	b.n	8007124 <_dtoa_r+0x254>
 8007174:	3101      	adds	r1, #1
 8007176:	0052      	lsls	r2, r2, #1
 8007178:	e7d8      	b.n	800712c <_dtoa_r+0x25c>
 800717a:	bf00      	nop
 800717c:	f3af 8000 	nop.w
 8007180:	636f4361 	.word	0x636f4361
 8007184:	3fd287a7 	.word	0x3fd287a7
 8007188:	8b60c8b3 	.word	0x8b60c8b3
 800718c:	3fc68a28 	.word	0x3fc68a28
 8007190:	509f79fb 	.word	0x509f79fb
 8007194:	3fd34413 	.word	0x3fd34413
 8007198:	0800a565 	.word	0x0800a565
 800719c:	0800a57c 	.word	0x0800a57c
 80071a0:	7ff00000 	.word	0x7ff00000
 80071a4:	0800a535 	.word	0x0800a535
 80071a8:	3ff80000 	.word	0x3ff80000
 80071ac:	0800a678 	.word	0x0800a678
 80071b0:	0800a5d4 	.word	0x0800a5d4
 80071b4:	0800a561 	.word	0x0800a561
 80071b8:	0800a534 	.word	0x0800a534
 80071bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 80071c0:	6018      	str	r0, [r3, #0]
 80071c2:	9b07      	ldr	r3, [sp, #28]
 80071c4:	2b0e      	cmp	r3, #14
 80071c6:	f200 80a4 	bhi.w	8007312 <_dtoa_r+0x442>
 80071ca:	2c00      	cmp	r4, #0
 80071cc:	f000 80a1 	beq.w	8007312 <_dtoa_r+0x442>
 80071d0:	2f00      	cmp	r7, #0
 80071d2:	dd33      	ble.n	800723c <_dtoa_r+0x36c>
 80071d4:	4bad      	ldr	r3, [pc, #692]	@ (800748c <_dtoa_r+0x5bc>)
 80071d6:	f007 020f 	and.w	r2, r7, #15
 80071da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80071de:	ed93 7b00 	vldr	d7, [r3]
 80071e2:	05f8      	lsls	r0, r7, #23
 80071e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 80071e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80071ec:	d516      	bpl.n	800721c <_dtoa_r+0x34c>
 80071ee:	4ba8      	ldr	r3, [pc, #672]	@ (8007490 <_dtoa_r+0x5c0>)
 80071f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80071f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80071f8:	f7f9 fb28 	bl	800084c <__aeabi_ddiv>
 80071fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007200:	f004 040f 	and.w	r4, r4, #15
 8007204:	2603      	movs	r6, #3
 8007206:	4da2      	ldr	r5, [pc, #648]	@ (8007490 <_dtoa_r+0x5c0>)
 8007208:	b954      	cbnz	r4, 8007220 <_dtoa_r+0x350>
 800720a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800720e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007212:	f7f9 fb1b 	bl	800084c <__aeabi_ddiv>
 8007216:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800721a:	e028      	b.n	800726e <_dtoa_r+0x39e>
 800721c:	2602      	movs	r6, #2
 800721e:	e7f2      	b.n	8007206 <_dtoa_r+0x336>
 8007220:	07e1      	lsls	r1, r4, #31
 8007222:	d508      	bpl.n	8007236 <_dtoa_r+0x366>
 8007224:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007228:	e9d5 2300 	ldrd	r2, r3, [r5]
 800722c:	f7f9 f9e4 	bl	80005f8 <__aeabi_dmul>
 8007230:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007234:	3601      	adds	r6, #1
 8007236:	1064      	asrs	r4, r4, #1
 8007238:	3508      	adds	r5, #8
 800723a:	e7e5      	b.n	8007208 <_dtoa_r+0x338>
 800723c:	f000 80d2 	beq.w	80073e4 <_dtoa_r+0x514>
 8007240:	427c      	negs	r4, r7
 8007242:	4b92      	ldr	r3, [pc, #584]	@ (800748c <_dtoa_r+0x5bc>)
 8007244:	4d92      	ldr	r5, [pc, #584]	@ (8007490 <_dtoa_r+0x5c0>)
 8007246:	f004 020f 	and.w	r2, r4, #15
 800724a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800724e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007252:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007256:	f7f9 f9cf 	bl	80005f8 <__aeabi_dmul>
 800725a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800725e:	1124      	asrs	r4, r4, #4
 8007260:	2300      	movs	r3, #0
 8007262:	2602      	movs	r6, #2
 8007264:	2c00      	cmp	r4, #0
 8007266:	f040 80b2 	bne.w	80073ce <_dtoa_r+0x4fe>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d1d3      	bne.n	8007216 <_dtoa_r+0x346>
 800726e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007270:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007274:	2b00      	cmp	r3, #0
 8007276:	f000 80b7 	beq.w	80073e8 <_dtoa_r+0x518>
 800727a:	4b86      	ldr	r3, [pc, #536]	@ (8007494 <_dtoa_r+0x5c4>)
 800727c:	2200      	movs	r2, #0
 800727e:	4620      	mov	r0, r4
 8007280:	4629      	mov	r1, r5
 8007282:	f7f9 fc2b 	bl	8000adc <__aeabi_dcmplt>
 8007286:	2800      	cmp	r0, #0
 8007288:	f000 80ae 	beq.w	80073e8 <_dtoa_r+0x518>
 800728c:	9b07      	ldr	r3, [sp, #28]
 800728e:	2b00      	cmp	r3, #0
 8007290:	f000 80aa 	beq.w	80073e8 <_dtoa_r+0x518>
 8007294:	9b00      	ldr	r3, [sp, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	dd37      	ble.n	800730a <_dtoa_r+0x43a>
 800729a:	1e7b      	subs	r3, r7, #1
 800729c:	9304      	str	r3, [sp, #16]
 800729e:	4620      	mov	r0, r4
 80072a0:	4b7d      	ldr	r3, [pc, #500]	@ (8007498 <_dtoa_r+0x5c8>)
 80072a2:	2200      	movs	r2, #0
 80072a4:	4629      	mov	r1, r5
 80072a6:	f7f9 f9a7 	bl	80005f8 <__aeabi_dmul>
 80072aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80072ae:	9c00      	ldr	r4, [sp, #0]
 80072b0:	3601      	adds	r6, #1
 80072b2:	4630      	mov	r0, r6
 80072b4:	f7f9 f936 	bl	8000524 <__aeabi_i2d>
 80072b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072bc:	f7f9 f99c 	bl	80005f8 <__aeabi_dmul>
 80072c0:	4b76      	ldr	r3, [pc, #472]	@ (800749c <_dtoa_r+0x5cc>)
 80072c2:	2200      	movs	r2, #0
 80072c4:	f7f8 ffe2 	bl	800028c <__adddf3>
 80072c8:	4605      	mov	r5, r0
 80072ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80072ce:	2c00      	cmp	r4, #0
 80072d0:	f040 808d 	bne.w	80073ee <_dtoa_r+0x51e>
 80072d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072d8:	4b71      	ldr	r3, [pc, #452]	@ (80074a0 <_dtoa_r+0x5d0>)
 80072da:	2200      	movs	r2, #0
 80072dc:	f7f8 ffd4 	bl	8000288 <__aeabi_dsub>
 80072e0:	4602      	mov	r2, r0
 80072e2:	460b      	mov	r3, r1
 80072e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80072e8:	462a      	mov	r2, r5
 80072ea:	4633      	mov	r3, r6
 80072ec:	f7f9 fc14 	bl	8000b18 <__aeabi_dcmpgt>
 80072f0:	2800      	cmp	r0, #0
 80072f2:	f040 828b 	bne.w	800780c <_dtoa_r+0x93c>
 80072f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072fa:	462a      	mov	r2, r5
 80072fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007300:	f7f9 fbec 	bl	8000adc <__aeabi_dcmplt>
 8007304:	2800      	cmp	r0, #0
 8007306:	f040 8128 	bne.w	800755a <_dtoa_r+0x68a>
 800730a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800730e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007312:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007314:	2b00      	cmp	r3, #0
 8007316:	f2c0 815a 	blt.w	80075ce <_dtoa_r+0x6fe>
 800731a:	2f0e      	cmp	r7, #14
 800731c:	f300 8157 	bgt.w	80075ce <_dtoa_r+0x6fe>
 8007320:	4b5a      	ldr	r3, [pc, #360]	@ (800748c <_dtoa_r+0x5bc>)
 8007322:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007326:	ed93 7b00 	vldr	d7, [r3]
 800732a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800732c:	2b00      	cmp	r3, #0
 800732e:	ed8d 7b00 	vstr	d7, [sp]
 8007332:	da03      	bge.n	800733c <_dtoa_r+0x46c>
 8007334:	9b07      	ldr	r3, [sp, #28]
 8007336:	2b00      	cmp	r3, #0
 8007338:	f340 8101 	ble.w	800753e <_dtoa_r+0x66e>
 800733c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007340:	4656      	mov	r6, sl
 8007342:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007346:	4620      	mov	r0, r4
 8007348:	4629      	mov	r1, r5
 800734a:	f7f9 fa7f 	bl	800084c <__aeabi_ddiv>
 800734e:	f7f9 fc03 	bl	8000b58 <__aeabi_d2iz>
 8007352:	4680      	mov	r8, r0
 8007354:	f7f9 f8e6 	bl	8000524 <__aeabi_i2d>
 8007358:	e9dd 2300 	ldrd	r2, r3, [sp]
 800735c:	f7f9 f94c 	bl	80005f8 <__aeabi_dmul>
 8007360:	4602      	mov	r2, r0
 8007362:	460b      	mov	r3, r1
 8007364:	4620      	mov	r0, r4
 8007366:	4629      	mov	r1, r5
 8007368:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800736c:	f7f8 ff8c 	bl	8000288 <__aeabi_dsub>
 8007370:	f806 4b01 	strb.w	r4, [r6], #1
 8007374:	9d07      	ldr	r5, [sp, #28]
 8007376:	eba6 040a 	sub.w	r4, r6, sl
 800737a:	42a5      	cmp	r5, r4
 800737c:	4602      	mov	r2, r0
 800737e:	460b      	mov	r3, r1
 8007380:	f040 8117 	bne.w	80075b2 <_dtoa_r+0x6e2>
 8007384:	f7f8 ff82 	bl	800028c <__adddf3>
 8007388:	e9dd 2300 	ldrd	r2, r3, [sp]
 800738c:	4604      	mov	r4, r0
 800738e:	460d      	mov	r5, r1
 8007390:	f7f9 fbc2 	bl	8000b18 <__aeabi_dcmpgt>
 8007394:	2800      	cmp	r0, #0
 8007396:	f040 80f9 	bne.w	800758c <_dtoa_r+0x6bc>
 800739a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800739e:	4620      	mov	r0, r4
 80073a0:	4629      	mov	r1, r5
 80073a2:	f7f9 fb91 	bl	8000ac8 <__aeabi_dcmpeq>
 80073a6:	b118      	cbz	r0, 80073b0 <_dtoa_r+0x4e0>
 80073a8:	f018 0f01 	tst.w	r8, #1
 80073ac:	f040 80ee 	bne.w	800758c <_dtoa_r+0x6bc>
 80073b0:	4649      	mov	r1, r9
 80073b2:	4658      	mov	r0, fp
 80073b4:	f000 fc90 	bl	8007cd8 <_Bfree>
 80073b8:	2300      	movs	r3, #0
 80073ba:	7033      	strb	r3, [r6, #0]
 80073bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80073be:	3701      	adds	r7, #1
 80073c0:	601f      	str	r7, [r3, #0]
 80073c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80073c4:	2b00      	cmp	r3, #0
 80073c6:	f000 831d 	beq.w	8007a04 <_dtoa_r+0xb34>
 80073ca:	601e      	str	r6, [r3, #0]
 80073cc:	e31a      	b.n	8007a04 <_dtoa_r+0xb34>
 80073ce:	07e2      	lsls	r2, r4, #31
 80073d0:	d505      	bpl.n	80073de <_dtoa_r+0x50e>
 80073d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 80073d6:	f7f9 f90f 	bl	80005f8 <__aeabi_dmul>
 80073da:	3601      	adds	r6, #1
 80073dc:	2301      	movs	r3, #1
 80073de:	1064      	asrs	r4, r4, #1
 80073e0:	3508      	adds	r5, #8
 80073e2:	e73f      	b.n	8007264 <_dtoa_r+0x394>
 80073e4:	2602      	movs	r6, #2
 80073e6:	e742      	b.n	800726e <_dtoa_r+0x39e>
 80073e8:	9c07      	ldr	r4, [sp, #28]
 80073ea:	9704      	str	r7, [sp, #16]
 80073ec:	e761      	b.n	80072b2 <_dtoa_r+0x3e2>
 80073ee:	4b27      	ldr	r3, [pc, #156]	@ (800748c <_dtoa_r+0x5bc>)
 80073f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80073f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80073fa:	4454      	add	r4, sl
 80073fc:	2900      	cmp	r1, #0
 80073fe:	d053      	beq.n	80074a8 <_dtoa_r+0x5d8>
 8007400:	4928      	ldr	r1, [pc, #160]	@ (80074a4 <_dtoa_r+0x5d4>)
 8007402:	2000      	movs	r0, #0
 8007404:	f7f9 fa22 	bl	800084c <__aeabi_ddiv>
 8007408:	4633      	mov	r3, r6
 800740a:	462a      	mov	r2, r5
 800740c:	f7f8 ff3c 	bl	8000288 <__aeabi_dsub>
 8007410:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007414:	4656      	mov	r6, sl
 8007416:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800741a:	f7f9 fb9d 	bl	8000b58 <__aeabi_d2iz>
 800741e:	4605      	mov	r5, r0
 8007420:	f7f9 f880 	bl	8000524 <__aeabi_i2d>
 8007424:	4602      	mov	r2, r0
 8007426:	460b      	mov	r3, r1
 8007428:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800742c:	f7f8 ff2c 	bl	8000288 <__aeabi_dsub>
 8007430:	3530      	adds	r5, #48	@ 0x30
 8007432:	4602      	mov	r2, r0
 8007434:	460b      	mov	r3, r1
 8007436:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800743a:	f806 5b01 	strb.w	r5, [r6], #1
 800743e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007442:	f7f9 fb4b 	bl	8000adc <__aeabi_dcmplt>
 8007446:	2800      	cmp	r0, #0
 8007448:	d171      	bne.n	800752e <_dtoa_r+0x65e>
 800744a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800744e:	4911      	ldr	r1, [pc, #68]	@ (8007494 <_dtoa_r+0x5c4>)
 8007450:	2000      	movs	r0, #0
 8007452:	f7f8 ff19 	bl	8000288 <__aeabi_dsub>
 8007456:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800745a:	f7f9 fb3f 	bl	8000adc <__aeabi_dcmplt>
 800745e:	2800      	cmp	r0, #0
 8007460:	f040 8095 	bne.w	800758e <_dtoa_r+0x6be>
 8007464:	42a6      	cmp	r6, r4
 8007466:	f43f af50 	beq.w	800730a <_dtoa_r+0x43a>
 800746a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800746e:	4b0a      	ldr	r3, [pc, #40]	@ (8007498 <_dtoa_r+0x5c8>)
 8007470:	2200      	movs	r2, #0
 8007472:	f7f9 f8c1 	bl	80005f8 <__aeabi_dmul>
 8007476:	4b08      	ldr	r3, [pc, #32]	@ (8007498 <_dtoa_r+0x5c8>)
 8007478:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800747c:	2200      	movs	r2, #0
 800747e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007482:	f7f9 f8b9 	bl	80005f8 <__aeabi_dmul>
 8007486:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800748a:	e7c4      	b.n	8007416 <_dtoa_r+0x546>
 800748c:	0800a678 	.word	0x0800a678
 8007490:	0800a650 	.word	0x0800a650
 8007494:	3ff00000 	.word	0x3ff00000
 8007498:	40240000 	.word	0x40240000
 800749c:	401c0000 	.word	0x401c0000
 80074a0:	40140000 	.word	0x40140000
 80074a4:	3fe00000 	.word	0x3fe00000
 80074a8:	4631      	mov	r1, r6
 80074aa:	4628      	mov	r0, r5
 80074ac:	f7f9 f8a4 	bl	80005f8 <__aeabi_dmul>
 80074b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80074b4:	9415      	str	r4, [sp, #84]	@ 0x54
 80074b6:	4656      	mov	r6, sl
 80074b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074bc:	f7f9 fb4c 	bl	8000b58 <__aeabi_d2iz>
 80074c0:	4605      	mov	r5, r0
 80074c2:	f7f9 f82f 	bl	8000524 <__aeabi_i2d>
 80074c6:	4602      	mov	r2, r0
 80074c8:	460b      	mov	r3, r1
 80074ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074ce:	f7f8 fedb 	bl	8000288 <__aeabi_dsub>
 80074d2:	3530      	adds	r5, #48	@ 0x30
 80074d4:	f806 5b01 	strb.w	r5, [r6], #1
 80074d8:	4602      	mov	r2, r0
 80074da:	460b      	mov	r3, r1
 80074dc:	42a6      	cmp	r6, r4
 80074de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80074e2:	f04f 0200 	mov.w	r2, #0
 80074e6:	d124      	bne.n	8007532 <_dtoa_r+0x662>
 80074e8:	4bac      	ldr	r3, [pc, #688]	@ (800779c <_dtoa_r+0x8cc>)
 80074ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80074ee:	f7f8 fecd 	bl	800028c <__adddf3>
 80074f2:	4602      	mov	r2, r0
 80074f4:	460b      	mov	r3, r1
 80074f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074fa:	f7f9 fb0d 	bl	8000b18 <__aeabi_dcmpgt>
 80074fe:	2800      	cmp	r0, #0
 8007500:	d145      	bne.n	800758e <_dtoa_r+0x6be>
 8007502:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007506:	49a5      	ldr	r1, [pc, #660]	@ (800779c <_dtoa_r+0x8cc>)
 8007508:	2000      	movs	r0, #0
 800750a:	f7f8 febd 	bl	8000288 <__aeabi_dsub>
 800750e:	4602      	mov	r2, r0
 8007510:	460b      	mov	r3, r1
 8007512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007516:	f7f9 fae1 	bl	8000adc <__aeabi_dcmplt>
 800751a:	2800      	cmp	r0, #0
 800751c:	f43f aef5 	beq.w	800730a <_dtoa_r+0x43a>
 8007520:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007522:	1e73      	subs	r3, r6, #1
 8007524:	9315      	str	r3, [sp, #84]	@ 0x54
 8007526:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800752a:	2b30      	cmp	r3, #48	@ 0x30
 800752c:	d0f8      	beq.n	8007520 <_dtoa_r+0x650>
 800752e:	9f04      	ldr	r7, [sp, #16]
 8007530:	e73e      	b.n	80073b0 <_dtoa_r+0x4e0>
 8007532:	4b9b      	ldr	r3, [pc, #620]	@ (80077a0 <_dtoa_r+0x8d0>)
 8007534:	f7f9 f860 	bl	80005f8 <__aeabi_dmul>
 8007538:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800753c:	e7bc      	b.n	80074b8 <_dtoa_r+0x5e8>
 800753e:	d10c      	bne.n	800755a <_dtoa_r+0x68a>
 8007540:	4b98      	ldr	r3, [pc, #608]	@ (80077a4 <_dtoa_r+0x8d4>)
 8007542:	2200      	movs	r2, #0
 8007544:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007548:	f7f9 f856 	bl	80005f8 <__aeabi_dmul>
 800754c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007550:	f7f9 fad8 	bl	8000b04 <__aeabi_dcmpge>
 8007554:	2800      	cmp	r0, #0
 8007556:	f000 8157 	beq.w	8007808 <_dtoa_r+0x938>
 800755a:	2400      	movs	r4, #0
 800755c:	4625      	mov	r5, r4
 800755e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007560:	43db      	mvns	r3, r3
 8007562:	9304      	str	r3, [sp, #16]
 8007564:	4656      	mov	r6, sl
 8007566:	2700      	movs	r7, #0
 8007568:	4621      	mov	r1, r4
 800756a:	4658      	mov	r0, fp
 800756c:	f000 fbb4 	bl	8007cd8 <_Bfree>
 8007570:	2d00      	cmp	r5, #0
 8007572:	d0dc      	beq.n	800752e <_dtoa_r+0x65e>
 8007574:	b12f      	cbz	r7, 8007582 <_dtoa_r+0x6b2>
 8007576:	42af      	cmp	r7, r5
 8007578:	d003      	beq.n	8007582 <_dtoa_r+0x6b2>
 800757a:	4639      	mov	r1, r7
 800757c:	4658      	mov	r0, fp
 800757e:	f000 fbab 	bl	8007cd8 <_Bfree>
 8007582:	4629      	mov	r1, r5
 8007584:	4658      	mov	r0, fp
 8007586:	f000 fba7 	bl	8007cd8 <_Bfree>
 800758a:	e7d0      	b.n	800752e <_dtoa_r+0x65e>
 800758c:	9704      	str	r7, [sp, #16]
 800758e:	4633      	mov	r3, r6
 8007590:	461e      	mov	r6, r3
 8007592:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007596:	2a39      	cmp	r2, #57	@ 0x39
 8007598:	d107      	bne.n	80075aa <_dtoa_r+0x6da>
 800759a:	459a      	cmp	sl, r3
 800759c:	d1f8      	bne.n	8007590 <_dtoa_r+0x6c0>
 800759e:	9a04      	ldr	r2, [sp, #16]
 80075a0:	3201      	adds	r2, #1
 80075a2:	9204      	str	r2, [sp, #16]
 80075a4:	2230      	movs	r2, #48	@ 0x30
 80075a6:	f88a 2000 	strb.w	r2, [sl]
 80075aa:	781a      	ldrb	r2, [r3, #0]
 80075ac:	3201      	adds	r2, #1
 80075ae:	701a      	strb	r2, [r3, #0]
 80075b0:	e7bd      	b.n	800752e <_dtoa_r+0x65e>
 80075b2:	4b7b      	ldr	r3, [pc, #492]	@ (80077a0 <_dtoa_r+0x8d0>)
 80075b4:	2200      	movs	r2, #0
 80075b6:	f7f9 f81f 	bl	80005f8 <__aeabi_dmul>
 80075ba:	2200      	movs	r2, #0
 80075bc:	2300      	movs	r3, #0
 80075be:	4604      	mov	r4, r0
 80075c0:	460d      	mov	r5, r1
 80075c2:	f7f9 fa81 	bl	8000ac8 <__aeabi_dcmpeq>
 80075c6:	2800      	cmp	r0, #0
 80075c8:	f43f aebb 	beq.w	8007342 <_dtoa_r+0x472>
 80075cc:	e6f0      	b.n	80073b0 <_dtoa_r+0x4e0>
 80075ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80075d0:	2a00      	cmp	r2, #0
 80075d2:	f000 80db 	beq.w	800778c <_dtoa_r+0x8bc>
 80075d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075d8:	2a01      	cmp	r2, #1
 80075da:	f300 80bf 	bgt.w	800775c <_dtoa_r+0x88c>
 80075de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80075e0:	2a00      	cmp	r2, #0
 80075e2:	f000 80b7 	beq.w	8007754 <_dtoa_r+0x884>
 80075e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80075ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80075ec:	4646      	mov	r6, r8
 80075ee:	9a08      	ldr	r2, [sp, #32]
 80075f0:	2101      	movs	r1, #1
 80075f2:	441a      	add	r2, r3
 80075f4:	4658      	mov	r0, fp
 80075f6:	4498      	add	r8, r3
 80075f8:	9208      	str	r2, [sp, #32]
 80075fa:	f000 fc21 	bl	8007e40 <__i2b>
 80075fe:	4605      	mov	r5, r0
 8007600:	b15e      	cbz	r6, 800761a <_dtoa_r+0x74a>
 8007602:	9b08      	ldr	r3, [sp, #32]
 8007604:	2b00      	cmp	r3, #0
 8007606:	dd08      	ble.n	800761a <_dtoa_r+0x74a>
 8007608:	42b3      	cmp	r3, r6
 800760a:	9a08      	ldr	r2, [sp, #32]
 800760c:	bfa8      	it	ge
 800760e:	4633      	movge	r3, r6
 8007610:	eba8 0803 	sub.w	r8, r8, r3
 8007614:	1af6      	subs	r6, r6, r3
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	9308      	str	r3, [sp, #32]
 800761a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800761c:	b1f3      	cbz	r3, 800765c <_dtoa_r+0x78c>
 800761e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 80b7 	beq.w	8007794 <_dtoa_r+0x8c4>
 8007626:	b18c      	cbz	r4, 800764c <_dtoa_r+0x77c>
 8007628:	4629      	mov	r1, r5
 800762a:	4622      	mov	r2, r4
 800762c:	4658      	mov	r0, fp
 800762e:	f000 fcc7 	bl	8007fc0 <__pow5mult>
 8007632:	464a      	mov	r2, r9
 8007634:	4601      	mov	r1, r0
 8007636:	4605      	mov	r5, r0
 8007638:	4658      	mov	r0, fp
 800763a:	f000 fc17 	bl	8007e6c <__multiply>
 800763e:	4649      	mov	r1, r9
 8007640:	9004      	str	r0, [sp, #16]
 8007642:	4658      	mov	r0, fp
 8007644:	f000 fb48 	bl	8007cd8 <_Bfree>
 8007648:	9b04      	ldr	r3, [sp, #16]
 800764a:	4699      	mov	r9, r3
 800764c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800764e:	1b1a      	subs	r2, r3, r4
 8007650:	d004      	beq.n	800765c <_dtoa_r+0x78c>
 8007652:	4649      	mov	r1, r9
 8007654:	4658      	mov	r0, fp
 8007656:	f000 fcb3 	bl	8007fc0 <__pow5mult>
 800765a:	4681      	mov	r9, r0
 800765c:	2101      	movs	r1, #1
 800765e:	4658      	mov	r0, fp
 8007660:	f000 fbee 	bl	8007e40 <__i2b>
 8007664:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007666:	4604      	mov	r4, r0
 8007668:	2b00      	cmp	r3, #0
 800766a:	f000 81cf 	beq.w	8007a0c <_dtoa_r+0xb3c>
 800766e:	461a      	mov	r2, r3
 8007670:	4601      	mov	r1, r0
 8007672:	4658      	mov	r0, fp
 8007674:	f000 fca4 	bl	8007fc0 <__pow5mult>
 8007678:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800767a:	2b01      	cmp	r3, #1
 800767c:	4604      	mov	r4, r0
 800767e:	f300 8095 	bgt.w	80077ac <_dtoa_r+0x8dc>
 8007682:	9b02      	ldr	r3, [sp, #8]
 8007684:	2b00      	cmp	r3, #0
 8007686:	f040 8087 	bne.w	8007798 <_dtoa_r+0x8c8>
 800768a:	9b03      	ldr	r3, [sp, #12]
 800768c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007690:	2b00      	cmp	r3, #0
 8007692:	f040 8089 	bne.w	80077a8 <_dtoa_r+0x8d8>
 8007696:	9b03      	ldr	r3, [sp, #12]
 8007698:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800769c:	0d1b      	lsrs	r3, r3, #20
 800769e:	051b      	lsls	r3, r3, #20
 80076a0:	b12b      	cbz	r3, 80076ae <_dtoa_r+0x7de>
 80076a2:	9b08      	ldr	r3, [sp, #32]
 80076a4:	3301      	adds	r3, #1
 80076a6:	9308      	str	r3, [sp, #32]
 80076a8:	f108 0801 	add.w	r8, r8, #1
 80076ac:	2301      	movs	r3, #1
 80076ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80076b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	f000 81b0 	beq.w	8007a18 <_dtoa_r+0xb48>
 80076b8:	6923      	ldr	r3, [r4, #16]
 80076ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80076be:	6918      	ldr	r0, [r3, #16]
 80076c0:	f000 fb72 	bl	8007da8 <__hi0bits>
 80076c4:	f1c0 0020 	rsb	r0, r0, #32
 80076c8:	9b08      	ldr	r3, [sp, #32]
 80076ca:	4418      	add	r0, r3
 80076cc:	f010 001f 	ands.w	r0, r0, #31
 80076d0:	d077      	beq.n	80077c2 <_dtoa_r+0x8f2>
 80076d2:	f1c0 0320 	rsb	r3, r0, #32
 80076d6:	2b04      	cmp	r3, #4
 80076d8:	dd6b      	ble.n	80077b2 <_dtoa_r+0x8e2>
 80076da:	9b08      	ldr	r3, [sp, #32]
 80076dc:	f1c0 001c 	rsb	r0, r0, #28
 80076e0:	4403      	add	r3, r0
 80076e2:	4480      	add	r8, r0
 80076e4:	4406      	add	r6, r0
 80076e6:	9308      	str	r3, [sp, #32]
 80076e8:	f1b8 0f00 	cmp.w	r8, #0
 80076ec:	dd05      	ble.n	80076fa <_dtoa_r+0x82a>
 80076ee:	4649      	mov	r1, r9
 80076f0:	4642      	mov	r2, r8
 80076f2:	4658      	mov	r0, fp
 80076f4:	f000 fcbe 	bl	8008074 <__lshift>
 80076f8:	4681      	mov	r9, r0
 80076fa:	9b08      	ldr	r3, [sp, #32]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	dd05      	ble.n	800770c <_dtoa_r+0x83c>
 8007700:	4621      	mov	r1, r4
 8007702:	461a      	mov	r2, r3
 8007704:	4658      	mov	r0, fp
 8007706:	f000 fcb5 	bl	8008074 <__lshift>
 800770a:	4604      	mov	r4, r0
 800770c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800770e:	2b00      	cmp	r3, #0
 8007710:	d059      	beq.n	80077c6 <_dtoa_r+0x8f6>
 8007712:	4621      	mov	r1, r4
 8007714:	4648      	mov	r0, r9
 8007716:	f000 fd19 	bl	800814c <__mcmp>
 800771a:	2800      	cmp	r0, #0
 800771c:	da53      	bge.n	80077c6 <_dtoa_r+0x8f6>
 800771e:	1e7b      	subs	r3, r7, #1
 8007720:	9304      	str	r3, [sp, #16]
 8007722:	4649      	mov	r1, r9
 8007724:	2300      	movs	r3, #0
 8007726:	220a      	movs	r2, #10
 8007728:	4658      	mov	r0, fp
 800772a:	f000 faf7 	bl	8007d1c <__multadd>
 800772e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007730:	4681      	mov	r9, r0
 8007732:	2b00      	cmp	r3, #0
 8007734:	f000 8172 	beq.w	8007a1c <_dtoa_r+0xb4c>
 8007738:	2300      	movs	r3, #0
 800773a:	4629      	mov	r1, r5
 800773c:	220a      	movs	r2, #10
 800773e:	4658      	mov	r0, fp
 8007740:	f000 faec 	bl	8007d1c <__multadd>
 8007744:	9b00      	ldr	r3, [sp, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	4605      	mov	r5, r0
 800774a:	dc67      	bgt.n	800781c <_dtoa_r+0x94c>
 800774c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800774e:	2b02      	cmp	r3, #2
 8007750:	dc41      	bgt.n	80077d6 <_dtoa_r+0x906>
 8007752:	e063      	b.n	800781c <_dtoa_r+0x94c>
 8007754:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007756:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800775a:	e746      	b.n	80075ea <_dtoa_r+0x71a>
 800775c:	9b07      	ldr	r3, [sp, #28]
 800775e:	1e5c      	subs	r4, r3, #1
 8007760:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007762:	42a3      	cmp	r3, r4
 8007764:	bfbf      	itttt	lt
 8007766:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8007768:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800776a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800776c:	1ae3      	sublt	r3, r4, r3
 800776e:	bfb4      	ite	lt
 8007770:	18d2      	addlt	r2, r2, r3
 8007772:	1b1c      	subge	r4, r3, r4
 8007774:	9b07      	ldr	r3, [sp, #28]
 8007776:	bfbc      	itt	lt
 8007778:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800777a:	2400      	movlt	r4, #0
 800777c:	2b00      	cmp	r3, #0
 800777e:	bfb5      	itete	lt
 8007780:	eba8 0603 	sublt.w	r6, r8, r3
 8007784:	9b07      	ldrge	r3, [sp, #28]
 8007786:	2300      	movlt	r3, #0
 8007788:	4646      	movge	r6, r8
 800778a:	e730      	b.n	80075ee <_dtoa_r+0x71e>
 800778c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800778e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8007790:	4646      	mov	r6, r8
 8007792:	e735      	b.n	8007600 <_dtoa_r+0x730>
 8007794:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007796:	e75c      	b.n	8007652 <_dtoa_r+0x782>
 8007798:	2300      	movs	r3, #0
 800779a:	e788      	b.n	80076ae <_dtoa_r+0x7de>
 800779c:	3fe00000 	.word	0x3fe00000
 80077a0:	40240000 	.word	0x40240000
 80077a4:	40140000 	.word	0x40140000
 80077a8:	9b02      	ldr	r3, [sp, #8]
 80077aa:	e780      	b.n	80076ae <_dtoa_r+0x7de>
 80077ac:	2300      	movs	r3, #0
 80077ae:	930a      	str	r3, [sp, #40]	@ 0x28
 80077b0:	e782      	b.n	80076b8 <_dtoa_r+0x7e8>
 80077b2:	d099      	beq.n	80076e8 <_dtoa_r+0x818>
 80077b4:	9a08      	ldr	r2, [sp, #32]
 80077b6:	331c      	adds	r3, #28
 80077b8:	441a      	add	r2, r3
 80077ba:	4498      	add	r8, r3
 80077bc:	441e      	add	r6, r3
 80077be:	9208      	str	r2, [sp, #32]
 80077c0:	e792      	b.n	80076e8 <_dtoa_r+0x818>
 80077c2:	4603      	mov	r3, r0
 80077c4:	e7f6      	b.n	80077b4 <_dtoa_r+0x8e4>
 80077c6:	9b07      	ldr	r3, [sp, #28]
 80077c8:	9704      	str	r7, [sp, #16]
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	dc20      	bgt.n	8007810 <_dtoa_r+0x940>
 80077ce:	9300      	str	r3, [sp, #0]
 80077d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077d2:	2b02      	cmp	r3, #2
 80077d4:	dd1e      	ble.n	8007814 <_dtoa_r+0x944>
 80077d6:	9b00      	ldr	r3, [sp, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f47f aec0 	bne.w	800755e <_dtoa_r+0x68e>
 80077de:	4621      	mov	r1, r4
 80077e0:	2205      	movs	r2, #5
 80077e2:	4658      	mov	r0, fp
 80077e4:	f000 fa9a 	bl	8007d1c <__multadd>
 80077e8:	4601      	mov	r1, r0
 80077ea:	4604      	mov	r4, r0
 80077ec:	4648      	mov	r0, r9
 80077ee:	f000 fcad 	bl	800814c <__mcmp>
 80077f2:	2800      	cmp	r0, #0
 80077f4:	f77f aeb3 	ble.w	800755e <_dtoa_r+0x68e>
 80077f8:	4656      	mov	r6, sl
 80077fa:	2331      	movs	r3, #49	@ 0x31
 80077fc:	f806 3b01 	strb.w	r3, [r6], #1
 8007800:	9b04      	ldr	r3, [sp, #16]
 8007802:	3301      	adds	r3, #1
 8007804:	9304      	str	r3, [sp, #16]
 8007806:	e6ae      	b.n	8007566 <_dtoa_r+0x696>
 8007808:	9c07      	ldr	r4, [sp, #28]
 800780a:	9704      	str	r7, [sp, #16]
 800780c:	4625      	mov	r5, r4
 800780e:	e7f3      	b.n	80077f8 <_dtoa_r+0x928>
 8007810:	9b07      	ldr	r3, [sp, #28]
 8007812:	9300      	str	r3, [sp, #0]
 8007814:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007816:	2b00      	cmp	r3, #0
 8007818:	f000 8104 	beq.w	8007a24 <_dtoa_r+0xb54>
 800781c:	2e00      	cmp	r6, #0
 800781e:	dd05      	ble.n	800782c <_dtoa_r+0x95c>
 8007820:	4629      	mov	r1, r5
 8007822:	4632      	mov	r2, r6
 8007824:	4658      	mov	r0, fp
 8007826:	f000 fc25 	bl	8008074 <__lshift>
 800782a:	4605      	mov	r5, r0
 800782c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800782e:	2b00      	cmp	r3, #0
 8007830:	d05a      	beq.n	80078e8 <_dtoa_r+0xa18>
 8007832:	6869      	ldr	r1, [r5, #4]
 8007834:	4658      	mov	r0, fp
 8007836:	f000 fa0f 	bl	8007c58 <_Balloc>
 800783a:	4606      	mov	r6, r0
 800783c:	b928      	cbnz	r0, 800784a <_dtoa_r+0x97a>
 800783e:	4b84      	ldr	r3, [pc, #528]	@ (8007a50 <_dtoa_r+0xb80>)
 8007840:	4602      	mov	r2, r0
 8007842:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007846:	f7ff bb5a 	b.w	8006efe <_dtoa_r+0x2e>
 800784a:	692a      	ldr	r2, [r5, #16]
 800784c:	3202      	adds	r2, #2
 800784e:	0092      	lsls	r2, r2, #2
 8007850:	f105 010c 	add.w	r1, r5, #12
 8007854:	300c      	adds	r0, #12
 8007856:	f7ff faa2 	bl	8006d9e <memcpy>
 800785a:	2201      	movs	r2, #1
 800785c:	4631      	mov	r1, r6
 800785e:	4658      	mov	r0, fp
 8007860:	f000 fc08 	bl	8008074 <__lshift>
 8007864:	f10a 0301 	add.w	r3, sl, #1
 8007868:	9307      	str	r3, [sp, #28]
 800786a:	9b00      	ldr	r3, [sp, #0]
 800786c:	4453      	add	r3, sl
 800786e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007870:	9b02      	ldr	r3, [sp, #8]
 8007872:	f003 0301 	and.w	r3, r3, #1
 8007876:	462f      	mov	r7, r5
 8007878:	930a      	str	r3, [sp, #40]	@ 0x28
 800787a:	4605      	mov	r5, r0
 800787c:	9b07      	ldr	r3, [sp, #28]
 800787e:	4621      	mov	r1, r4
 8007880:	3b01      	subs	r3, #1
 8007882:	4648      	mov	r0, r9
 8007884:	9300      	str	r3, [sp, #0]
 8007886:	f7ff fa98 	bl	8006dba <quorem>
 800788a:	4639      	mov	r1, r7
 800788c:	9002      	str	r0, [sp, #8]
 800788e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007892:	4648      	mov	r0, r9
 8007894:	f000 fc5a 	bl	800814c <__mcmp>
 8007898:	462a      	mov	r2, r5
 800789a:	9008      	str	r0, [sp, #32]
 800789c:	4621      	mov	r1, r4
 800789e:	4658      	mov	r0, fp
 80078a0:	f000 fc70 	bl	8008184 <__mdiff>
 80078a4:	68c2      	ldr	r2, [r0, #12]
 80078a6:	4606      	mov	r6, r0
 80078a8:	bb02      	cbnz	r2, 80078ec <_dtoa_r+0xa1c>
 80078aa:	4601      	mov	r1, r0
 80078ac:	4648      	mov	r0, r9
 80078ae:	f000 fc4d 	bl	800814c <__mcmp>
 80078b2:	4602      	mov	r2, r0
 80078b4:	4631      	mov	r1, r6
 80078b6:	4658      	mov	r0, fp
 80078b8:	920e      	str	r2, [sp, #56]	@ 0x38
 80078ba:	f000 fa0d 	bl	8007cd8 <_Bfree>
 80078be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80078c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80078c2:	9e07      	ldr	r6, [sp, #28]
 80078c4:	ea43 0102 	orr.w	r1, r3, r2
 80078c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078ca:	4319      	orrs	r1, r3
 80078cc:	d110      	bne.n	80078f0 <_dtoa_r+0xa20>
 80078ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80078d2:	d029      	beq.n	8007928 <_dtoa_r+0xa58>
 80078d4:	9b08      	ldr	r3, [sp, #32]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	dd02      	ble.n	80078e0 <_dtoa_r+0xa10>
 80078da:	9b02      	ldr	r3, [sp, #8]
 80078dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80078e0:	9b00      	ldr	r3, [sp, #0]
 80078e2:	f883 8000 	strb.w	r8, [r3]
 80078e6:	e63f      	b.n	8007568 <_dtoa_r+0x698>
 80078e8:	4628      	mov	r0, r5
 80078ea:	e7bb      	b.n	8007864 <_dtoa_r+0x994>
 80078ec:	2201      	movs	r2, #1
 80078ee:	e7e1      	b.n	80078b4 <_dtoa_r+0x9e4>
 80078f0:	9b08      	ldr	r3, [sp, #32]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	db04      	blt.n	8007900 <_dtoa_r+0xa30>
 80078f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80078f8:	430b      	orrs	r3, r1
 80078fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80078fc:	430b      	orrs	r3, r1
 80078fe:	d120      	bne.n	8007942 <_dtoa_r+0xa72>
 8007900:	2a00      	cmp	r2, #0
 8007902:	dded      	ble.n	80078e0 <_dtoa_r+0xa10>
 8007904:	4649      	mov	r1, r9
 8007906:	2201      	movs	r2, #1
 8007908:	4658      	mov	r0, fp
 800790a:	f000 fbb3 	bl	8008074 <__lshift>
 800790e:	4621      	mov	r1, r4
 8007910:	4681      	mov	r9, r0
 8007912:	f000 fc1b 	bl	800814c <__mcmp>
 8007916:	2800      	cmp	r0, #0
 8007918:	dc03      	bgt.n	8007922 <_dtoa_r+0xa52>
 800791a:	d1e1      	bne.n	80078e0 <_dtoa_r+0xa10>
 800791c:	f018 0f01 	tst.w	r8, #1
 8007920:	d0de      	beq.n	80078e0 <_dtoa_r+0xa10>
 8007922:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007926:	d1d8      	bne.n	80078da <_dtoa_r+0xa0a>
 8007928:	9a00      	ldr	r2, [sp, #0]
 800792a:	2339      	movs	r3, #57	@ 0x39
 800792c:	7013      	strb	r3, [r2, #0]
 800792e:	4633      	mov	r3, r6
 8007930:	461e      	mov	r6, r3
 8007932:	3b01      	subs	r3, #1
 8007934:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007938:	2a39      	cmp	r2, #57	@ 0x39
 800793a:	d052      	beq.n	80079e2 <_dtoa_r+0xb12>
 800793c:	3201      	adds	r2, #1
 800793e:	701a      	strb	r2, [r3, #0]
 8007940:	e612      	b.n	8007568 <_dtoa_r+0x698>
 8007942:	2a00      	cmp	r2, #0
 8007944:	dd07      	ble.n	8007956 <_dtoa_r+0xa86>
 8007946:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800794a:	d0ed      	beq.n	8007928 <_dtoa_r+0xa58>
 800794c:	9a00      	ldr	r2, [sp, #0]
 800794e:	f108 0301 	add.w	r3, r8, #1
 8007952:	7013      	strb	r3, [r2, #0]
 8007954:	e608      	b.n	8007568 <_dtoa_r+0x698>
 8007956:	9b07      	ldr	r3, [sp, #28]
 8007958:	9a07      	ldr	r2, [sp, #28]
 800795a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800795e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007960:	4293      	cmp	r3, r2
 8007962:	d028      	beq.n	80079b6 <_dtoa_r+0xae6>
 8007964:	4649      	mov	r1, r9
 8007966:	2300      	movs	r3, #0
 8007968:	220a      	movs	r2, #10
 800796a:	4658      	mov	r0, fp
 800796c:	f000 f9d6 	bl	8007d1c <__multadd>
 8007970:	42af      	cmp	r7, r5
 8007972:	4681      	mov	r9, r0
 8007974:	f04f 0300 	mov.w	r3, #0
 8007978:	f04f 020a 	mov.w	r2, #10
 800797c:	4639      	mov	r1, r7
 800797e:	4658      	mov	r0, fp
 8007980:	d107      	bne.n	8007992 <_dtoa_r+0xac2>
 8007982:	f000 f9cb 	bl	8007d1c <__multadd>
 8007986:	4607      	mov	r7, r0
 8007988:	4605      	mov	r5, r0
 800798a:	9b07      	ldr	r3, [sp, #28]
 800798c:	3301      	adds	r3, #1
 800798e:	9307      	str	r3, [sp, #28]
 8007990:	e774      	b.n	800787c <_dtoa_r+0x9ac>
 8007992:	f000 f9c3 	bl	8007d1c <__multadd>
 8007996:	4629      	mov	r1, r5
 8007998:	4607      	mov	r7, r0
 800799a:	2300      	movs	r3, #0
 800799c:	220a      	movs	r2, #10
 800799e:	4658      	mov	r0, fp
 80079a0:	f000 f9bc 	bl	8007d1c <__multadd>
 80079a4:	4605      	mov	r5, r0
 80079a6:	e7f0      	b.n	800798a <_dtoa_r+0xaba>
 80079a8:	9b00      	ldr	r3, [sp, #0]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	bfcc      	ite	gt
 80079ae:	461e      	movgt	r6, r3
 80079b0:	2601      	movle	r6, #1
 80079b2:	4456      	add	r6, sl
 80079b4:	2700      	movs	r7, #0
 80079b6:	4649      	mov	r1, r9
 80079b8:	2201      	movs	r2, #1
 80079ba:	4658      	mov	r0, fp
 80079bc:	f000 fb5a 	bl	8008074 <__lshift>
 80079c0:	4621      	mov	r1, r4
 80079c2:	4681      	mov	r9, r0
 80079c4:	f000 fbc2 	bl	800814c <__mcmp>
 80079c8:	2800      	cmp	r0, #0
 80079ca:	dcb0      	bgt.n	800792e <_dtoa_r+0xa5e>
 80079cc:	d102      	bne.n	80079d4 <_dtoa_r+0xb04>
 80079ce:	f018 0f01 	tst.w	r8, #1
 80079d2:	d1ac      	bne.n	800792e <_dtoa_r+0xa5e>
 80079d4:	4633      	mov	r3, r6
 80079d6:	461e      	mov	r6, r3
 80079d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079dc:	2a30      	cmp	r2, #48	@ 0x30
 80079de:	d0fa      	beq.n	80079d6 <_dtoa_r+0xb06>
 80079e0:	e5c2      	b.n	8007568 <_dtoa_r+0x698>
 80079e2:	459a      	cmp	sl, r3
 80079e4:	d1a4      	bne.n	8007930 <_dtoa_r+0xa60>
 80079e6:	9b04      	ldr	r3, [sp, #16]
 80079e8:	3301      	adds	r3, #1
 80079ea:	9304      	str	r3, [sp, #16]
 80079ec:	2331      	movs	r3, #49	@ 0x31
 80079ee:	f88a 3000 	strb.w	r3, [sl]
 80079f2:	e5b9      	b.n	8007568 <_dtoa_r+0x698>
 80079f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8007a54 <_dtoa_r+0xb84>
 80079fa:	b11b      	cbz	r3, 8007a04 <_dtoa_r+0xb34>
 80079fc:	f10a 0308 	add.w	r3, sl, #8
 8007a00:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007a02:	6013      	str	r3, [r2, #0]
 8007a04:	4650      	mov	r0, sl
 8007a06:	b019      	add	sp, #100	@ 0x64
 8007a08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007a0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a0e:	2b01      	cmp	r3, #1
 8007a10:	f77f ae37 	ble.w	8007682 <_dtoa_r+0x7b2>
 8007a14:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a16:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a18:	2001      	movs	r0, #1
 8007a1a:	e655      	b.n	80076c8 <_dtoa_r+0x7f8>
 8007a1c:	9b00      	ldr	r3, [sp, #0]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	f77f aed6 	ble.w	80077d0 <_dtoa_r+0x900>
 8007a24:	4656      	mov	r6, sl
 8007a26:	4621      	mov	r1, r4
 8007a28:	4648      	mov	r0, r9
 8007a2a:	f7ff f9c6 	bl	8006dba <quorem>
 8007a2e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007a32:	f806 8b01 	strb.w	r8, [r6], #1
 8007a36:	9b00      	ldr	r3, [sp, #0]
 8007a38:	eba6 020a 	sub.w	r2, r6, sl
 8007a3c:	4293      	cmp	r3, r2
 8007a3e:	ddb3      	ble.n	80079a8 <_dtoa_r+0xad8>
 8007a40:	4649      	mov	r1, r9
 8007a42:	2300      	movs	r3, #0
 8007a44:	220a      	movs	r2, #10
 8007a46:	4658      	mov	r0, fp
 8007a48:	f000 f968 	bl	8007d1c <__multadd>
 8007a4c:	4681      	mov	r9, r0
 8007a4e:	e7ea      	b.n	8007a26 <_dtoa_r+0xb56>
 8007a50:	0800a5d4 	.word	0x0800a5d4
 8007a54:	0800a558 	.word	0x0800a558

08007a58 <_free_r>:
 8007a58:	b538      	push	{r3, r4, r5, lr}
 8007a5a:	4605      	mov	r5, r0
 8007a5c:	2900      	cmp	r1, #0
 8007a5e:	d041      	beq.n	8007ae4 <_free_r+0x8c>
 8007a60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a64:	1f0c      	subs	r4, r1, #4
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	bfb8      	it	lt
 8007a6a:	18e4      	addlt	r4, r4, r3
 8007a6c:	f000 f8e8 	bl	8007c40 <__malloc_lock>
 8007a70:	4a1d      	ldr	r2, [pc, #116]	@ (8007ae8 <_free_r+0x90>)
 8007a72:	6813      	ldr	r3, [r2, #0]
 8007a74:	b933      	cbnz	r3, 8007a84 <_free_r+0x2c>
 8007a76:	6063      	str	r3, [r4, #4]
 8007a78:	6014      	str	r4, [r2, #0]
 8007a7a:	4628      	mov	r0, r5
 8007a7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a80:	f000 b8e4 	b.w	8007c4c <__malloc_unlock>
 8007a84:	42a3      	cmp	r3, r4
 8007a86:	d908      	bls.n	8007a9a <_free_r+0x42>
 8007a88:	6820      	ldr	r0, [r4, #0]
 8007a8a:	1821      	adds	r1, r4, r0
 8007a8c:	428b      	cmp	r3, r1
 8007a8e:	bf01      	itttt	eq
 8007a90:	6819      	ldreq	r1, [r3, #0]
 8007a92:	685b      	ldreq	r3, [r3, #4]
 8007a94:	1809      	addeq	r1, r1, r0
 8007a96:	6021      	streq	r1, [r4, #0]
 8007a98:	e7ed      	b.n	8007a76 <_free_r+0x1e>
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	685b      	ldr	r3, [r3, #4]
 8007a9e:	b10b      	cbz	r3, 8007aa4 <_free_r+0x4c>
 8007aa0:	42a3      	cmp	r3, r4
 8007aa2:	d9fa      	bls.n	8007a9a <_free_r+0x42>
 8007aa4:	6811      	ldr	r1, [r2, #0]
 8007aa6:	1850      	adds	r0, r2, r1
 8007aa8:	42a0      	cmp	r0, r4
 8007aaa:	d10b      	bne.n	8007ac4 <_free_r+0x6c>
 8007aac:	6820      	ldr	r0, [r4, #0]
 8007aae:	4401      	add	r1, r0
 8007ab0:	1850      	adds	r0, r2, r1
 8007ab2:	4283      	cmp	r3, r0
 8007ab4:	6011      	str	r1, [r2, #0]
 8007ab6:	d1e0      	bne.n	8007a7a <_free_r+0x22>
 8007ab8:	6818      	ldr	r0, [r3, #0]
 8007aba:	685b      	ldr	r3, [r3, #4]
 8007abc:	6053      	str	r3, [r2, #4]
 8007abe:	4408      	add	r0, r1
 8007ac0:	6010      	str	r0, [r2, #0]
 8007ac2:	e7da      	b.n	8007a7a <_free_r+0x22>
 8007ac4:	d902      	bls.n	8007acc <_free_r+0x74>
 8007ac6:	230c      	movs	r3, #12
 8007ac8:	602b      	str	r3, [r5, #0]
 8007aca:	e7d6      	b.n	8007a7a <_free_r+0x22>
 8007acc:	6820      	ldr	r0, [r4, #0]
 8007ace:	1821      	adds	r1, r4, r0
 8007ad0:	428b      	cmp	r3, r1
 8007ad2:	bf04      	itt	eq
 8007ad4:	6819      	ldreq	r1, [r3, #0]
 8007ad6:	685b      	ldreq	r3, [r3, #4]
 8007ad8:	6063      	str	r3, [r4, #4]
 8007ada:	bf04      	itt	eq
 8007adc:	1809      	addeq	r1, r1, r0
 8007ade:	6021      	streq	r1, [r4, #0]
 8007ae0:	6054      	str	r4, [r2, #4]
 8007ae2:	e7ca      	b.n	8007a7a <_free_r+0x22>
 8007ae4:	bd38      	pop	{r3, r4, r5, pc}
 8007ae6:	bf00      	nop
 8007ae8:	20000990 	.word	0x20000990

08007aec <malloc>:
 8007aec:	4b02      	ldr	r3, [pc, #8]	@ (8007af8 <malloc+0xc>)
 8007aee:	4601      	mov	r1, r0
 8007af0:	6818      	ldr	r0, [r3, #0]
 8007af2:	f000 b825 	b.w	8007b40 <_malloc_r>
 8007af6:	bf00      	nop
 8007af8:	20000018 	.word	0x20000018

08007afc <sbrk_aligned>:
 8007afc:	b570      	push	{r4, r5, r6, lr}
 8007afe:	4e0f      	ldr	r6, [pc, #60]	@ (8007b3c <sbrk_aligned+0x40>)
 8007b00:	460c      	mov	r4, r1
 8007b02:	6831      	ldr	r1, [r6, #0]
 8007b04:	4605      	mov	r5, r0
 8007b06:	b911      	cbnz	r1, 8007b0e <sbrk_aligned+0x12>
 8007b08:	f000 fe46 	bl	8008798 <_sbrk_r>
 8007b0c:	6030      	str	r0, [r6, #0]
 8007b0e:	4621      	mov	r1, r4
 8007b10:	4628      	mov	r0, r5
 8007b12:	f000 fe41 	bl	8008798 <_sbrk_r>
 8007b16:	1c43      	adds	r3, r0, #1
 8007b18:	d103      	bne.n	8007b22 <sbrk_aligned+0x26>
 8007b1a:	f04f 34ff 	mov.w	r4, #4294967295
 8007b1e:	4620      	mov	r0, r4
 8007b20:	bd70      	pop	{r4, r5, r6, pc}
 8007b22:	1cc4      	adds	r4, r0, #3
 8007b24:	f024 0403 	bic.w	r4, r4, #3
 8007b28:	42a0      	cmp	r0, r4
 8007b2a:	d0f8      	beq.n	8007b1e <sbrk_aligned+0x22>
 8007b2c:	1a21      	subs	r1, r4, r0
 8007b2e:	4628      	mov	r0, r5
 8007b30:	f000 fe32 	bl	8008798 <_sbrk_r>
 8007b34:	3001      	adds	r0, #1
 8007b36:	d1f2      	bne.n	8007b1e <sbrk_aligned+0x22>
 8007b38:	e7ef      	b.n	8007b1a <sbrk_aligned+0x1e>
 8007b3a:	bf00      	nop
 8007b3c:	2000098c 	.word	0x2000098c

08007b40 <_malloc_r>:
 8007b40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b44:	1ccd      	adds	r5, r1, #3
 8007b46:	f025 0503 	bic.w	r5, r5, #3
 8007b4a:	3508      	adds	r5, #8
 8007b4c:	2d0c      	cmp	r5, #12
 8007b4e:	bf38      	it	cc
 8007b50:	250c      	movcc	r5, #12
 8007b52:	2d00      	cmp	r5, #0
 8007b54:	4606      	mov	r6, r0
 8007b56:	db01      	blt.n	8007b5c <_malloc_r+0x1c>
 8007b58:	42a9      	cmp	r1, r5
 8007b5a:	d904      	bls.n	8007b66 <_malloc_r+0x26>
 8007b5c:	230c      	movs	r3, #12
 8007b5e:	6033      	str	r3, [r6, #0]
 8007b60:	2000      	movs	r0, #0
 8007b62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007b66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007c3c <_malloc_r+0xfc>
 8007b6a:	f000 f869 	bl	8007c40 <__malloc_lock>
 8007b6e:	f8d8 3000 	ldr.w	r3, [r8]
 8007b72:	461c      	mov	r4, r3
 8007b74:	bb44      	cbnz	r4, 8007bc8 <_malloc_r+0x88>
 8007b76:	4629      	mov	r1, r5
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f7ff ffbf 	bl	8007afc <sbrk_aligned>
 8007b7e:	1c43      	adds	r3, r0, #1
 8007b80:	4604      	mov	r4, r0
 8007b82:	d158      	bne.n	8007c36 <_malloc_r+0xf6>
 8007b84:	f8d8 4000 	ldr.w	r4, [r8]
 8007b88:	4627      	mov	r7, r4
 8007b8a:	2f00      	cmp	r7, #0
 8007b8c:	d143      	bne.n	8007c16 <_malloc_r+0xd6>
 8007b8e:	2c00      	cmp	r4, #0
 8007b90:	d04b      	beq.n	8007c2a <_malloc_r+0xea>
 8007b92:	6823      	ldr	r3, [r4, #0]
 8007b94:	4639      	mov	r1, r7
 8007b96:	4630      	mov	r0, r6
 8007b98:	eb04 0903 	add.w	r9, r4, r3
 8007b9c:	f000 fdfc 	bl	8008798 <_sbrk_r>
 8007ba0:	4581      	cmp	r9, r0
 8007ba2:	d142      	bne.n	8007c2a <_malloc_r+0xea>
 8007ba4:	6821      	ldr	r1, [r4, #0]
 8007ba6:	1a6d      	subs	r5, r5, r1
 8007ba8:	4629      	mov	r1, r5
 8007baa:	4630      	mov	r0, r6
 8007bac:	f7ff ffa6 	bl	8007afc <sbrk_aligned>
 8007bb0:	3001      	adds	r0, #1
 8007bb2:	d03a      	beq.n	8007c2a <_malloc_r+0xea>
 8007bb4:	6823      	ldr	r3, [r4, #0]
 8007bb6:	442b      	add	r3, r5
 8007bb8:	6023      	str	r3, [r4, #0]
 8007bba:	f8d8 3000 	ldr.w	r3, [r8]
 8007bbe:	685a      	ldr	r2, [r3, #4]
 8007bc0:	bb62      	cbnz	r2, 8007c1c <_malloc_r+0xdc>
 8007bc2:	f8c8 7000 	str.w	r7, [r8]
 8007bc6:	e00f      	b.n	8007be8 <_malloc_r+0xa8>
 8007bc8:	6822      	ldr	r2, [r4, #0]
 8007bca:	1b52      	subs	r2, r2, r5
 8007bcc:	d420      	bmi.n	8007c10 <_malloc_r+0xd0>
 8007bce:	2a0b      	cmp	r2, #11
 8007bd0:	d917      	bls.n	8007c02 <_malloc_r+0xc2>
 8007bd2:	1961      	adds	r1, r4, r5
 8007bd4:	42a3      	cmp	r3, r4
 8007bd6:	6025      	str	r5, [r4, #0]
 8007bd8:	bf18      	it	ne
 8007bda:	6059      	strne	r1, [r3, #4]
 8007bdc:	6863      	ldr	r3, [r4, #4]
 8007bde:	bf08      	it	eq
 8007be0:	f8c8 1000 	streq.w	r1, [r8]
 8007be4:	5162      	str	r2, [r4, r5]
 8007be6:	604b      	str	r3, [r1, #4]
 8007be8:	4630      	mov	r0, r6
 8007bea:	f000 f82f 	bl	8007c4c <__malloc_unlock>
 8007bee:	f104 000b 	add.w	r0, r4, #11
 8007bf2:	1d23      	adds	r3, r4, #4
 8007bf4:	f020 0007 	bic.w	r0, r0, #7
 8007bf8:	1ac2      	subs	r2, r0, r3
 8007bfa:	bf1c      	itt	ne
 8007bfc:	1a1b      	subne	r3, r3, r0
 8007bfe:	50a3      	strne	r3, [r4, r2]
 8007c00:	e7af      	b.n	8007b62 <_malloc_r+0x22>
 8007c02:	6862      	ldr	r2, [r4, #4]
 8007c04:	42a3      	cmp	r3, r4
 8007c06:	bf0c      	ite	eq
 8007c08:	f8c8 2000 	streq.w	r2, [r8]
 8007c0c:	605a      	strne	r2, [r3, #4]
 8007c0e:	e7eb      	b.n	8007be8 <_malloc_r+0xa8>
 8007c10:	4623      	mov	r3, r4
 8007c12:	6864      	ldr	r4, [r4, #4]
 8007c14:	e7ae      	b.n	8007b74 <_malloc_r+0x34>
 8007c16:	463c      	mov	r4, r7
 8007c18:	687f      	ldr	r7, [r7, #4]
 8007c1a:	e7b6      	b.n	8007b8a <_malloc_r+0x4a>
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	685b      	ldr	r3, [r3, #4]
 8007c20:	42a3      	cmp	r3, r4
 8007c22:	d1fb      	bne.n	8007c1c <_malloc_r+0xdc>
 8007c24:	2300      	movs	r3, #0
 8007c26:	6053      	str	r3, [r2, #4]
 8007c28:	e7de      	b.n	8007be8 <_malloc_r+0xa8>
 8007c2a:	230c      	movs	r3, #12
 8007c2c:	6033      	str	r3, [r6, #0]
 8007c2e:	4630      	mov	r0, r6
 8007c30:	f000 f80c 	bl	8007c4c <__malloc_unlock>
 8007c34:	e794      	b.n	8007b60 <_malloc_r+0x20>
 8007c36:	6005      	str	r5, [r0, #0]
 8007c38:	e7d6      	b.n	8007be8 <_malloc_r+0xa8>
 8007c3a:	bf00      	nop
 8007c3c:	20000990 	.word	0x20000990

08007c40 <__malloc_lock>:
 8007c40:	4801      	ldr	r0, [pc, #4]	@ (8007c48 <__malloc_lock+0x8>)
 8007c42:	f7ff b8aa 	b.w	8006d9a <__retarget_lock_acquire_recursive>
 8007c46:	bf00      	nop
 8007c48:	20000988 	.word	0x20000988

08007c4c <__malloc_unlock>:
 8007c4c:	4801      	ldr	r0, [pc, #4]	@ (8007c54 <__malloc_unlock+0x8>)
 8007c4e:	f7ff b8a5 	b.w	8006d9c <__retarget_lock_release_recursive>
 8007c52:	bf00      	nop
 8007c54:	20000988 	.word	0x20000988

08007c58 <_Balloc>:
 8007c58:	b570      	push	{r4, r5, r6, lr}
 8007c5a:	69c6      	ldr	r6, [r0, #28]
 8007c5c:	4604      	mov	r4, r0
 8007c5e:	460d      	mov	r5, r1
 8007c60:	b976      	cbnz	r6, 8007c80 <_Balloc+0x28>
 8007c62:	2010      	movs	r0, #16
 8007c64:	f7ff ff42 	bl	8007aec <malloc>
 8007c68:	4602      	mov	r2, r0
 8007c6a:	61e0      	str	r0, [r4, #28]
 8007c6c:	b920      	cbnz	r0, 8007c78 <_Balloc+0x20>
 8007c6e:	4b18      	ldr	r3, [pc, #96]	@ (8007cd0 <_Balloc+0x78>)
 8007c70:	4818      	ldr	r0, [pc, #96]	@ (8007cd4 <_Balloc+0x7c>)
 8007c72:	216b      	movs	r1, #107	@ 0x6b
 8007c74:	f000 fda0 	bl	80087b8 <__assert_func>
 8007c78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007c7c:	6006      	str	r6, [r0, #0]
 8007c7e:	60c6      	str	r6, [r0, #12]
 8007c80:	69e6      	ldr	r6, [r4, #28]
 8007c82:	68f3      	ldr	r3, [r6, #12]
 8007c84:	b183      	cbz	r3, 8007ca8 <_Balloc+0x50>
 8007c86:	69e3      	ldr	r3, [r4, #28]
 8007c88:	68db      	ldr	r3, [r3, #12]
 8007c8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007c8e:	b9b8      	cbnz	r0, 8007cc0 <_Balloc+0x68>
 8007c90:	2101      	movs	r1, #1
 8007c92:	fa01 f605 	lsl.w	r6, r1, r5
 8007c96:	1d72      	adds	r2, r6, #5
 8007c98:	0092      	lsls	r2, r2, #2
 8007c9a:	4620      	mov	r0, r4
 8007c9c:	f000 fdaa 	bl	80087f4 <_calloc_r>
 8007ca0:	b160      	cbz	r0, 8007cbc <_Balloc+0x64>
 8007ca2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007ca6:	e00e      	b.n	8007cc6 <_Balloc+0x6e>
 8007ca8:	2221      	movs	r2, #33	@ 0x21
 8007caa:	2104      	movs	r1, #4
 8007cac:	4620      	mov	r0, r4
 8007cae:	f000 fda1 	bl	80087f4 <_calloc_r>
 8007cb2:	69e3      	ldr	r3, [r4, #28]
 8007cb4:	60f0      	str	r0, [r6, #12]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d1e4      	bne.n	8007c86 <_Balloc+0x2e>
 8007cbc:	2000      	movs	r0, #0
 8007cbe:	bd70      	pop	{r4, r5, r6, pc}
 8007cc0:	6802      	ldr	r2, [r0, #0]
 8007cc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007ccc:	e7f7      	b.n	8007cbe <_Balloc+0x66>
 8007cce:	bf00      	nop
 8007cd0:	0800a565 	.word	0x0800a565
 8007cd4:	0800a5e5 	.word	0x0800a5e5

08007cd8 <_Bfree>:
 8007cd8:	b570      	push	{r4, r5, r6, lr}
 8007cda:	69c6      	ldr	r6, [r0, #28]
 8007cdc:	4605      	mov	r5, r0
 8007cde:	460c      	mov	r4, r1
 8007ce0:	b976      	cbnz	r6, 8007d00 <_Bfree+0x28>
 8007ce2:	2010      	movs	r0, #16
 8007ce4:	f7ff ff02 	bl	8007aec <malloc>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	61e8      	str	r0, [r5, #28]
 8007cec:	b920      	cbnz	r0, 8007cf8 <_Bfree+0x20>
 8007cee:	4b09      	ldr	r3, [pc, #36]	@ (8007d14 <_Bfree+0x3c>)
 8007cf0:	4809      	ldr	r0, [pc, #36]	@ (8007d18 <_Bfree+0x40>)
 8007cf2:	218f      	movs	r1, #143	@ 0x8f
 8007cf4:	f000 fd60 	bl	80087b8 <__assert_func>
 8007cf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007cfc:	6006      	str	r6, [r0, #0]
 8007cfe:	60c6      	str	r6, [r0, #12]
 8007d00:	b13c      	cbz	r4, 8007d12 <_Bfree+0x3a>
 8007d02:	69eb      	ldr	r3, [r5, #28]
 8007d04:	6862      	ldr	r2, [r4, #4]
 8007d06:	68db      	ldr	r3, [r3, #12]
 8007d08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007d0c:	6021      	str	r1, [r4, #0]
 8007d0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007d12:	bd70      	pop	{r4, r5, r6, pc}
 8007d14:	0800a565 	.word	0x0800a565
 8007d18:	0800a5e5 	.word	0x0800a5e5

08007d1c <__multadd>:
 8007d1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007d20:	690d      	ldr	r5, [r1, #16]
 8007d22:	4607      	mov	r7, r0
 8007d24:	460c      	mov	r4, r1
 8007d26:	461e      	mov	r6, r3
 8007d28:	f101 0c14 	add.w	ip, r1, #20
 8007d2c:	2000      	movs	r0, #0
 8007d2e:	f8dc 3000 	ldr.w	r3, [ip]
 8007d32:	b299      	uxth	r1, r3
 8007d34:	fb02 6101 	mla	r1, r2, r1, r6
 8007d38:	0c1e      	lsrs	r6, r3, #16
 8007d3a:	0c0b      	lsrs	r3, r1, #16
 8007d3c:	fb02 3306 	mla	r3, r2, r6, r3
 8007d40:	b289      	uxth	r1, r1
 8007d42:	3001      	adds	r0, #1
 8007d44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007d48:	4285      	cmp	r5, r0
 8007d4a:	f84c 1b04 	str.w	r1, [ip], #4
 8007d4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007d52:	dcec      	bgt.n	8007d2e <__multadd+0x12>
 8007d54:	b30e      	cbz	r6, 8007d9a <__multadd+0x7e>
 8007d56:	68a3      	ldr	r3, [r4, #8]
 8007d58:	42ab      	cmp	r3, r5
 8007d5a:	dc19      	bgt.n	8007d90 <__multadd+0x74>
 8007d5c:	6861      	ldr	r1, [r4, #4]
 8007d5e:	4638      	mov	r0, r7
 8007d60:	3101      	adds	r1, #1
 8007d62:	f7ff ff79 	bl	8007c58 <_Balloc>
 8007d66:	4680      	mov	r8, r0
 8007d68:	b928      	cbnz	r0, 8007d76 <__multadd+0x5a>
 8007d6a:	4602      	mov	r2, r0
 8007d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8007da0 <__multadd+0x84>)
 8007d6e:	480d      	ldr	r0, [pc, #52]	@ (8007da4 <__multadd+0x88>)
 8007d70:	21ba      	movs	r1, #186	@ 0xba
 8007d72:	f000 fd21 	bl	80087b8 <__assert_func>
 8007d76:	6922      	ldr	r2, [r4, #16]
 8007d78:	3202      	adds	r2, #2
 8007d7a:	f104 010c 	add.w	r1, r4, #12
 8007d7e:	0092      	lsls	r2, r2, #2
 8007d80:	300c      	adds	r0, #12
 8007d82:	f7ff f80c 	bl	8006d9e <memcpy>
 8007d86:	4621      	mov	r1, r4
 8007d88:	4638      	mov	r0, r7
 8007d8a:	f7ff ffa5 	bl	8007cd8 <_Bfree>
 8007d8e:	4644      	mov	r4, r8
 8007d90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007d94:	3501      	adds	r5, #1
 8007d96:	615e      	str	r6, [r3, #20]
 8007d98:	6125      	str	r5, [r4, #16]
 8007d9a:	4620      	mov	r0, r4
 8007d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007da0:	0800a5d4 	.word	0x0800a5d4
 8007da4:	0800a5e5 	.word	0x0800a5e5

08007da8 <__hi0bits>:
 8007da8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007dac:	4603      	mov	r3, r0
 8007dae:	bf36      	itet	cc
 8007db0:	0403      	lslcc	r3, r0, #16
 8007db2:	2000      	movcs	r0, #0
 8007db4:	2010      	movcc	r0, #16
 8007db6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007dba:	bf3c      	itt	cc
 8007dbc:	021b      	lslcc	r3, r3, #8
 8007dbe:	3008      	addcc	r0, #8
 8007dc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007dc4:	bf3c      	itt	cc
 8007dc6:	011b      	lslcc	r3, r3, #4
 8007dc8:	3004      	addcc	r0, #4
 8007dca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007dce:	bf3c      	itt	cc
 8007dd0:	009b      	lslcc	r3, r3, #2
 8007dd2:	3002      	addcc	r0, #2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	db05      	blt.n	8007de4 <__hi0bits+0x3c>
 8007dd8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007ddc:	f100 0001 	add.w	r0, r0, #1
 8007de0:	bf08      	it	eq
 8007de2:	2020      	moveq	r0, #32
 8007de4:	4770      	bx	lr

08007de6 <__lo0bits>:
 8007de6:	6803      	ldr	r3, [r0, #0]
 8007de8:	4602      	mov	r2, r0
 8007dea:	f013 0007 	ands.w	r0, r3, #7
 8007dee:	d00b      	beq.n	8007e08 <__lo0bits+0x22>
 8007df0:	07d9      	lsls	r1, r3, #31
 8007df2:	d421      	bmi.n	8007e38 <__lo0bits+0x52>
 8007df4:	0798      	lsls	r0, r3, #30
 8007df6:	bf49      	itett	mi
 8007df8:	085b      	lsrmi	r3, r3, #1
 8007dfa:	089b      	lsrpl	r3, r3, #2
 8007dfc:	2001      	movmi	r0, #1
 8007dfe:	6013      	strmi	r3, [r2, #0]
 8007e00:	bf5c      	itt	pl
 8007e02:	6013      	strpl	r3, [r2, #0]
 8007e04:	2002      	movpl	r0, #2
 8007e06:	4770      	bx	lr
 8007e08:	b299      	uxth	r1, r3
 8007e0a:	b909      	cbnz	r1, 8007e10 <__lo0bits+0x2a>
 8007e0c:	0c1b      	lsrs	r3, r3, #16
 8007e0e:	2010      	movs	r0, #16
 8007e10:	b2d9      	uxtb	r1, r3
 8007e12:	b909      	cbnz	r1, 8007e18 <__lo0bits+0x32>
 8007e14:	3008      	adds	r0, #8
 8007e16:	0a1b      	lsrs	r3, r3, #8
 8007e18:	0719      	lsls	r1, r3, #28
 8007e1a:	bf04      	itt	eq
 8007e1c:	091b      	lsreq	r3, r3, #4
 8007e1e:	3004      	addeq	r0, #4
 8007e20:	0799      	lsls	r1, r3, #30
 8007e22:	bf04      	itt	eq
 8007e24:	089b      	lsreq	r3, r3, #2
 8007e26:	3002      	addeq	r0, #2
 8007e28:	07d9      	lsls	r1, r3, #31
 8007e2a:	d403      	bmi.n	8007e34 <__lo0bits+0x4e>
 8007e2c:	085b      	lsrs	r3, r3, #1
 8007e2e:	f100 0001 	add.w	r0, r0, #1
 8007e32:	d003      	beq.n	8007e3c <__lo0bits+0x56>
 8007e34:	6013      	str	r3, [r2, #0]
 8007e36:	4770      	bx	lr
 8007e38:	2000      	movs	r0, #0
 8007e3a:	4770      	bx	lr
 8007e3c:	2020      	movs	r0, #32
 8007e3e:	4770      	bx	lr

08007e40 <__i2b>:
 8007e40:	b510      	push	{r4, lr}
 8007e42:	460c      	mov	r4, r1
 8007e44:	2101      	movs	r1, #1
 8007e46:	f7ff ff07 	bl	8007c58 <_Balloc>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	b928      	cbnz	r0, 8007e5a <__i2b+0x1a>
 8007e4e:	4b05      	ldr	r3, [pc, #20]	@ (8007e64 <__i2b+0x24>)
 8007e50:	4805      	ldr	r0, [pc, #20]	@ (8007e68 <__i2b+0x28>)
 8007e52:	f240 1145 	movw	r1, #325	@ 0x145
 8007e56:	f000 fcaf 	bl	80087b8 <__assert_func>
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	6144      	str	r4, [r0, #20]
 8007e5e:	6103      	str	r3, [r0, #16]
 8007e60:	bd10      	pop	{r4, pc}
 8007e62:	bf00      	nop
 8007e64:	0800a5d4 	.word	0x0800a5d4
 8007e68:	0800a5e5 	.word	0x0800a5e5

08007e6c <__multiply>:
 8007e6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e70:	4614      	mov	r4, r2
 8007e72:	690a      	ldr	r2, [r1, #16]
 8007e74:	6923      	ldr	r3, [r4, #16]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	bfa8      	it	ge
 8007e7a:	4623      	movge	r3, r4
 8007e7c:	460f      	mov	r7, r1
 8007e7e:	bfa4      	itt	ge
 8007e80:	460c      	movge	r4, r1
 8007e82:	461f      	movge	r7, r3
 8007e84:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8007e88:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8007e8c:	68a3      	ldr	r3, [r4, #8]
 8007e8e:	6861      	ldr	r1, [r4, #4]
 8007e90:	eb0a 0609 	add.w	r6, sl, r9
 8007e94:	42b3      	cmp	r3, r6
 8007e96:	b085      	sub	sp, #20
 8007e98:	bfb8      	it	lt
 8007e9a:	3101      	addlt	r1, #1
 8007e9c:	f7ff fedc 	bl	8007c58 <_Balloc>
 8007ea0:	b930      	cbnz	r0, 8007eb0 <__multiply+0x44>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	4b44      	ldr	r3, [pc, #272]	@ (8007fb8 <__multiply+0x14c>)
 8007ea6:	4845      	ldr	r0, [pc, #276]	@ (8007fbc <__multiply+0x150>)
 8007ea8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8007eac:	f000 fc84 	bl	80087b8 <__assert_func>
 8007eb0:	f100 0514 	add.w	r5, r0, #20
 8007eb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007eb8:	462b      	mov	r3, r5
 8007eba:	2200      	movs	r2, #0
 8007ebc:	4543      	cmp	r3, r8
 8007ebe:	d321      	bcc.n	8007f04 <__multiply+0x98>
 8007ec0:	f107 0114 	add.w	r1, r7, #20
 8007ec4:	f104 0214 	add.w	r2, r4, #20
 8007ec8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8007ecc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007ed0:	9302      	str	r3, [sp, #8]
 8007ed2:	1b13      	subs	r3, r2, r4
 8007ed4:	3b15      	subs	r3, #21
 8007ed6:	f023 0303 	bic.w	r3, r3, #3
 8007eda:	3304      	adds	r3, #4
 8007edc:	f104 0715 	add.w	r7, r4, #21
 8007ee0:	42ba      	cmp	r2, r7
 8007ee2:	bf38      	it	cc
 8007ee4:	2304      	movcc	r3, #4
 8007ee6:	9301      	str	r3, [sp, #4]
 8007ee8:	9b02      	ldr	r3, [sp, #8]
 8007eea:	9103      	str	r1, [sp, #12]
 8007eec:	428b      	cmp	r3, r1
 8007eee:	d80c      	bhi.n	8007f0a <__multiply+0x9e>
 8007ef0:	2e00      	cmp	r6, #0
 8007ef2:	dd03      	ble.n	8007efc <__multiply+0x90>
 8007ef4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	d05b      	beq.n	8007fb4 <__multiply+0x148>
 8007efc:	6106      	str	r6, [r0, #16]
 8007efe:	b005      	add	sp, #20
 8007f00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f04:	f843 2b04 	str.w	r2, [r3], #4
 8007f08:	e7d8      	b.n	8007ebc <__multiply+0x50>
 8007f0a:	f8b1 a000 	ldrh.w	sl, [r1]
 8007f0e:	f1ba 0f00 	cmp.w	sl, #0
 8007f12:	d024      	beq.n	8007f5e <__multiply+0xf2>
 8007f14:	f104 0e14 	add.w	lr, r4, #20
 8007f18:	46a9      	mov	r9, r5
 8007f1a:	f04f 0c00 	mov.w	ip, #0
 8007f1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007f22:	f8d9 3000 	ldr.w	r3, [r9]
 8007f26:	fa1f fb87 	uxth.w	fp, r7
 8007f2a:	b29b      	uxth	r3, r3
 8007f2c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007f30:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007f34:	f8d9 7000 	ldr.w	r7, [r9]
 8007f38:	4463      	add	r3, ip
 8007f3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f3e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007f42:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007f46:	b29b      	uxth	r3, r3
 8007f48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f4c:	4572      	cmp	r2, lr
 8007f4e:	f849 3b04 	str.w	r3, [r9], #4
 8007f52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007f56:	d8e2      	bhi.n	8007f1e <__multiply+0xb2>
 8007f58:	9b01      	ldr	r3, [sp, #4]
 8007f5a:	f845 c003 	str.w	ip, [r5, r3]
 8007f5e:	9b03      	ldr	r3, [sp, #12]
 8007f60:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8007f64:	3104      	adds	r1, #4
 8007f66:	f1b9 0f00 	cmp.w	r9, #0
 8007f6a:	d021      	beq.n	8007fb0 <__multiply+0x144>
 8007f6c:	682b      	ldr	r3, [r5, #0]
 8007f6e:	f104 0c14 	add.w	ip, r4, #20
 8007f72:	46ae      	mov	lr, r5
 8007f74:	f04f 0a00 	mov.w	sl, #0
 8007f78:	f8bc b000 	ldrh.w	fp, [ip]
 8007f7c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007f80:	fb09 770b 	mla	r7, r9, fp, r7
 8007f84:	4457      	add	r7, sl
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8007f8c:	f84e 3b04 	str.w	r3, [lr], #4
 8007f90:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007f94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007f98:	f8be 3000 	ldrh.w	r3, [lr]
 8007f9c:	fb09 330a 	mla	r3, r9, sl, r3
 8007fa0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007fa4:	4562      	cmp	r2, ip
 8007fa6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007faa:	d8e5      	bhi.n	8007f78 <__multiply+0x10c>
 8007fac:	9f01      	ldr	r7, [sp, #4]
 8007fae:	51eb      	str	r3, [r5, r7]
 8007fb0:	3504      	adds	r5, #4
 8007fb2:	e799      	b.n	8007ee8 <__multiply+0x7c>
 8007fb4:	3e01      	subs	r6, #1
 8007fb6:	e79b      	b.n	8007ef0 <__multiply+0x84>
 8007fb8:	0800a5d4 	.word	0x0800a5d4
 8007fbc:	0800a5e5 	.word	0x0800a5e5

08007fc0 <__pow5mult>:
 8007fc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fc4:	4615      	mov	r5, r2
 8007fc6:	f012 0203 	ands.w	r2, r2, #3
 8007fca:	4607      	mov	r7, r0
 8007fcc:	460e      	mov	r6, r1
 8007fce:	d007      	beq.n	8007fe0 <__pow5mult+0x20>
 8007fd0:	4c25      	ldr	r4, [pc, #148]	@ (8008068 <__pow5mult+0xa8>)
 8007fd2:	3a01      	subs	r2, #1
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007fda:	f7ff fe9f 	bl	8007d1c <__multadd>
 8007fde:	4606      	mov	r6, r0
 8007fe0:	10ad      	asrs	r5, r5, #2
 8007fe2:	d03d      	beq.n	8008060 <__pow5mult+0xa0>
 8007fe4:	69fc      	ldr	r4, [r7, #28]
 8007fe6:	b97c      	cbnz	r4, 8008008 <__pow5mult+0x48>
 8007fe8:	2010      	movs	r0, #16
 8007fea:	f7ff fd7f 	bl	8007aec <malloc>
 8007fee:	4602      	mov	r2, r0
 8007ff0:	61f8      	str	r0, [r7, #28]
 8007ff2:	b928      	cbnz	r0, 8008000 <__pow5mult+0x40>
 8007ff4:	4b1d      	ldr	r3, [pc, #116]	@ (800806c <__pow5mult+0xac>)
 8007ff6:	481e      	ldr	r0, [pc, #120]	@ (8008070 <__pow5mult+0xb0>)
 8007ff8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007ffc:	f000 fbdc 	bl	80087b8 <__assert_func>
 8008000:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008004:	6004      	str	r4, [r0, #0]
 8008006:	60c4      	str	r4, [r0, #12]
 8008008:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800800c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008010:	b94c      	cbnz	r4, 8008026 <__pow5mult+0x66>
 8008012:	f240 2171 	movw	r1, #625	@ 0x271
 8008016:	4638      	mov	r0, r7
 8008018:	f7ff ff12 	bl	8007e40 <__i2b>
 800801c:	2300      	movs	r3, #0
 800801e:	f8c8 0008 	str.w	r0, [r8, #8]
 8008022:	4604      	mov	r4, r0
 8008024:	6003      	str	r3, [r0, #0]
 8008026:	f04f 0900 	mov.w	r9, #0
 800802a:	07eb      	lsls	r3, r5, #31
 800802c:	d50a      	bpl.n	8008044 <__pow5mult+0x84>
 800802e:	4631      	mov	r1, r6
 8008030:	4622      	mov	r2, r4
 8008032:	4638      	mov	r0, r7
 8008034:	f7ff ff1a 	bl	8007e6c <__multiply>
 8008038:	4631      	mov	r1, r6
 800803a:	4680      	mov	r8, r0
 800803c:	4638      	mov	r0, r7
 800803e:	f7ff fe4b 	bl	8007cd8 <_Bfree>
 8008042:	4646      	mov	r6, r8
 8008044:	106d      	asrs	r5, r5, #1
 8008046:	d00b      	beq.n	8008060 <__pow5mult+0xa0>
 8008048:	6820      	ldr	r0, [r4, #0]
 800804a:	b938      	cbnz	r0, 800805c <__pow5mult+0x9c>
 800804c:	4622      	mov	r2, r4
 800804e:	4621      	mov	r1, r4
 8008050:	4638      	mov	r0, r7
 8008052:	f7ff ff0b 	bl	8007e6c <__multiply>
 8008056:	6020      	str	r0, [r4, #0]
 8008058:	f8c0 9000 	str.w	r9, [r0]
 800805c:	4604      	mov	r4, r0
 800805e:	e7e4      	b.n	800802a <__pow5mult+0x6a>
 8008060:	4630      	mov	r0, r6
 8008062:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008066:	bf00      	nop
 8008068:	0800a640 	.word	0x0800a640
 800806c:	0800a565 	.word	0x0800a565
 8008070:	0800a5e5 	.word	0x0800a5e5

08008074 <__lshift>:
 8008074:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008078:	460c      	mov	r4, r1
 800807a:	6849      	ldr	r1, [r1, #4]
 800807c:	6923      	ldr	r3, [r4, #16]
 800807e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008082:	68a3      	ldr	r3, [r4, #8]
 8008084:	4607      	mov	r7, r0
 8008086:	4691      	mov	r9, r2
 8008088:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800808c:	f108 0601 	add.w	r6, r8, #1
 8008090:	42b3      	cmp	r3, r6
 8008092:	db0b      	blt.n	80080ac <__lshift+0x38>
 8008094:	4638      	mov	r0, r7
 8008096:	f7ff fddf 	bl	8007c58 <_Balloc>
 800809a:	4605      	mov	r5, r0
 800809c:	b948      	cbnz	r0, 80080b2 <__lshift+0x3e>
 800809e:	4602      	mov	r2, r0
 80080a0:	4b28      	ldr	r3, [pc, #160]	@ (8008144 <__lshift+0xd0>)
 80080a2:	4829      	ldr	r0, [pc, #164]	@ (8008148 <__lshift+0xd4>)
 80080a4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80080a8:	f000 fb86 	bl	80087b8 <__assert_func>
 80080ac:	3101      	adds	r1, #1
 80080ae:	005b      	lsls	r3, r3, #1
 80080b0:	e7ee      	b.n	8008090 <__lshift+0x1c>
 80080b2:	2300      	movs	r3, #0
 80080b4:	f100 0114 	add.w	r1, r0, #20
 80080b8:	f100 0210 	add.w	r2, r0, #16
 80080bc:	4618      	mov	r0, r3
 80080be:	4553      	cmp	r3, sl
 80080c0:	db33      	blt.n	800812a <__lshift+0xb6>
 80080c2:	6920      	ldr	r0, [r4, #16]
 80080c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80080c8:	f104 0314 	add.w	r3, r4, #20
 80080cc:	f019 091f 	ands.w	r9, r9, #31
 80080d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80080d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80080d8:	d02b      	beq.n	8008132 <__lshift+0xbe>
 80080da:	f1c9 0e20 	rsb	lr, r9, #32
 80080de:	468a      	mov	sl, r1
 80080e0:	2200      	movs	r2, #0
 80080e2:	6818      	ldr	r0, [r3, #0]
 80080e4:	fa00 f009 	lsl.w	r0, r0, r9
 80080e8:	4310      	orrs	r0, r2
 80080ea:	f84a 0b04 	str.w	r0, [sl], #4
 80080ee:	f853 2b04 	ldr.w	r2, [r3], #4
 80080f2:	459c      	cmp	ip, r3
 80080f4:	fa22 f20e 	lsr.w	r2, r2, lr
 80080f8:	d8f3      	bhi.n	80080e2 <__lshift+0x6e>
 80080fa:	ebac 0304 	sub.w	r3, ip, r4
 80080fe:	3b15      	subs	r3, #21
 8008100:	f023 0303 	bic.w	r3, r3, #3
 8008104:	3304      	adds	r3, #4
 8008106:	f104 0015 	add.w	r0, r4, #21
 800810a:	4584      	cmp	ip, r0
 800810c:	bf38      	it	cc
 800810e:	2304      	movcc	r3, #4
 8008110:	50ca      	str	r2, [r1, r3]
 8008112:	b10a      	cbz	r2, 8008118 <__lshift+0xa4>
 8008114:	f108 0602 	add.w	r6, r8, #2
 8008118:	3e01      	subs	r6, #1
 800811a:	4638      	mov	r0, r7
 800811c:	612e      	str	r6, [r5, #16]
 800811e:	4621      	mov	r1, r4
 8008120:	f7ff fdda 	bl	8007cd8 <_Bfree>
 8008124:	4628      	mov	r0, r5
 8008126:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800812a:	f842 0f04 	str.w	r0, [r2, #4]!
 800812e:	3301      	adds	r3, #1
 8008130:	e7c5      	b.n	80080be <__lshift+0x4a>
 8008132:	3904      	subs	r1, #4
 8008134:	f853 2b04 	ldr.w	r2, [r3], #4
 8008138:	f841 2f04 	str.w	r2, [r1, #4]!
 800813c:	459c      	cmp	ip, r3
 800813e:	d8f9      	bhi.n	8008134 <__lshift+0xc0>
 8008140:	e7ea      	b.n	8008118 <__lshift+0xa4>
 8008142:	bf00      	nop
 8008144:	0800a5d4 	.word	0x0800a5d4
 8008148:	0800a5e5 	.word	0x0800a5e5

0800814c <__mcmp>:
 800814c:	690a      	ldr	r2, [r1, #16]
 800814e:	4603      	mov	r3, r0
 8008150:	6900      	ldr	r0, [r0, #16]
 8008152:	1a80      	subs	r0, r0, r2
 8008154:	b530      	push	{r4, r5, lr}
 8008156:	d10e      	bne.n	8008176 <__mcmp+0x2a>
 8008158:	3314      	adds	r3, #20
 800815a:	3114      	adds	r1, #20
 800815c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008160:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008164:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008168:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800816c:	4295      	cmp	r5, r2
 800816e:	d003      	beq.n	8008178 <__mcmp+0x2c>
 8008170:	d205      	bcs.n	800817e <__mcmp+0x32>
 8008172:	f04f 30ff 	mov.w	r0, #4294967295
 8008176:	bd30      	pop	{r4, r5, pc}
 8008178:	42a3      	cmp	r3, r4
 800817a:	d3f3      	bcc.n	8008164 <__mcmp+0x18>
 800817c:	e7fb      	b.n	8008176 <__mcmp+0x2a>
 800817e:	2001      	movs	r0, #1
 8008180:	e7f9      	b.n	8008176 <__mcmp+0x2a>
	...

08008184 <__mdiff>:
 8008184:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008188:	4689      	mov	r9, r1
 800818a:	4606      	mov	r6, r0
 800818c:	4611      	mov	r1, r2
 800818e:	4648      	mov	r0, r9
 8008190:	4614      	mov	r4, r2
 8008192:	f7ff ffdb 	bl	800814c <__mcmp>
 8008196:	1e05      	subs	r5, r0, #0
 8008198:	d112      	bne.n	80081c0 <__mdiff+0x3c>
 800819a:	4629      	mov	r1, r5
 800819c:	4630      	mov	r0, r6
 800819e:	f7ff fd5b 	bl	8007c58 <_Balloc>
 80081a2:	4602      	mov	r2, r0
 80081a4:	b928      	cbnz	r0, 80081b2 <__mdiff+0x2e>
 80081a6:	4b3f      	ldr	r3, [pc, #252]	@ (80082a4 <__mdiff+0x120>)
 80081a8:	f240 2137 	movw	r1, #567	@ 0x237
 80081ac:	483e      	ldr	r0, [pc, #248]	@ (80082a8 <__mdiff+0x124>)
 80081ae:	f000 fb03 	bl	80087b8 <__assert_func>
 80081b2:	2301      	movs	r3, #1
 80081b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80081b8:	4610      	mov	r0, r2
 80081ba:	b003      	add	sp, #12
 80081bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c0:	bfbc      	itt	lt
 80081c2:	464b      	movlt	r3, r9
 80081c4:	46a1      	movlt	r9, r4
 80081c6:	4630      	mov	r0, r6
 80081c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80081cc:	bfba      	itte	lt
 80081ce:	461c      	movlt	r4, r3
 80081d0:	2501      	movlt	r5, #1
 80081d2:	2500      	movge	r5, #0
 80081d4:	f7ff fd40 	bl	8007c58 <_Balloc>
 80081d8:	4602      	mov	r2, r0
 80081da:	b918      	cbnz	r0, 80081e4 <__mdiff+0x60>
 80081dc:	4b31      	ldr	r3, [pc, #196]	@ (80082a4 <__mdiff+0x120>)
 80081de:	f240 2145 	movw	r1, #581	@ 0x245
 80081e2:	e7e3      	b.n	80081ac <__mdiff+0x28>
 80081e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80081e8:	6926      	ldr	r6, [r4, #16]
 80081ea:	60c5      	str	r5, [r0, #12]
 80081ec:	f109 0310 	add.w	r3, r9, #16
 80081f0:	f109 0514 	add.w	r5, r9, #20
 80081f4:	f104 0e14 	add.w	lr, r4, #20
 80081f8:	f100 0b14 	add.w	fp, r0, #20
 80081fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008200:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008204:	9301      	str	r3, [sp, #4]
 8008206:	46d9      	mov	r9, fp
 8008208:	f04f 0c00 	mov.w	ip, #0
 800820c:	9b01      	ldr	r3, [sp, #4]
 800820e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008212:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008216:	9301      	str	r3, [sp, #4]
 8008218:	fa1f f38a 	uxth.w	r3, sl
 800821c:	4619      	mov	r1, r3
 800821e:	b283      	uxth	r3, r0
 8008220:	1acb      	subs	r3, r1, r3
 8008222:	0c00      	lsrs	r0, r0, #16
 8008224:	4463      	add	r3, ip
 8008226:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800822a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800822e:	b29b      	uxth	r3, r3
 8008230:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008234:	4576      	cmp	r6, lr
 8008236:	f849 3b04 	str.w	r3, [r9], #4
 800823a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800823e:	d8e5      	bhi.n	800820c <__mdiff+0x88>
 8008240:	1b33      	subs	r3, r6, r4
 8008242:	3b15      	subs	r3, #21
 8008244:	f023 0303 	bic.w	r3, r3, #3
 8008248:	3415      	adds	r4, #21
 800824a:	3304      	adds	r3, #4
 800824c:	42a6      	cmp	r6, r4
 800824e:	bf38      	it	cc
 8008250:	2304      	movcc	r3, #4
 8008252:	441d      	add	r5, r3
 8008254:	445b      	add	r3, fp
 8008256:	461e      	mov	r6, r3
 8008258:	462c      	mov	r4, r5
 800825a:	4544      	cmp	r4, r8
 800825c:	d30e      	bcc.n	800827c <__mdiff+0xf8>
 800825e:	f108 0103 	add.w	r1, r8, #3
 8008262:	1b49      	subs	r1, r1, r5
 8008264:	f021 0103 	bic.w	r1, r1, #3
 8008268:	3d03      	subs	r5, #3
 800826a:	45a8      	cmp	r8, r5
 800826c:	bf38      	it	cc
 800826e:	2100      	movcc	r1, #0
 8008270:	440b      	add	r3, r1
 8008272:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008276:	b191      	cbz	r1, 800829e <__mdiff+0x11a>
 8008278:	6117      	str	r7, [r2, #16]
 800827a:	e79d      	b.n	80081b8 <__mdiff+0x34>
 800827c:	f854 1b04 	ldr.w	r1, [r4], #4
 8008280:	46e6      	mov	lr, ip
 8008282:	0c08      	lsrs	r0, r1, #16
 8008284:	fa1c fc81 	uxtah	ip, ip, r1
 8008288:	4471      	add	r1, lr
 800828a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800828e:	b289      	uxth	r1, r1
 8008290:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008294:	f846 1b04 	str.w	r1, [r6], #4
 8008298:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800829c:	e7dd      	b.n	800825a <__mdiff+0xd6>
 800829e:	3f01      	subs	r7, #1
 80082a0:	e7e7      	b.n	8008272 <__mdiff+0xee>
 80082a2:	bf00      	nop
 80082a4:	0800a5d4 	.word	0x0800a5d4
 80082a8:	0800a5e5 	.word	0x0800a5e5

080082ac <__d2b>:
 80082ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80082b0:	460f      	mov	r7, r1
 80082b2:	2101      	movs	r1, #1
 80082b4:	ec59 8b10 	vmov	r8, r9, d0
 80082b8:	4616      	mov	r6, r2
 80082ba:	f7ff fccd 	bl	8007c58 <_Balloc>
 80082be:	4604      	mov	r4, r0
 80082c0:	b930      	cbnz	r0, 80082d0 <__d2b+0x24>
 80082c2:	4602      	mov	r2, r0
 80082c4:	4b23      	ldr	r3, [pc, #140]	@ (8008354 <__d2b+0xa8>)
 80082c6:	4824      	ldr	r0, [pc, #144]	@ (8008358 <__d2b+0xac>)
 80082c8:	f240 310f 	movw	r1, #783	@ 0x30f
 80082cc:	f000 fa74 	bl	80087b8 <__assert_func>
 80082d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80082d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80082d8:	b10d      	cbz	r5, 80082de <__d2b+0x32>
 80082da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80082de:	9301      	str	r3, [sp, #4]
 80082e0:	f1b8 0300 	subs.w	r3, r8, #0
 80082e4:	d023      	beq.n	800832e <__d2b+0x82>
 80082e6:	4668      	mov	r0, sp
 80082e8:	9300      	str	r3, [sp, #0]
 80082ea:	f7ff fd7c 	bl	8007de6 <__lo0bits>
 80082ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 80082f2:	b1d0      	cbz	r0, 800832a <__d2b+0x7e>
 80082f4:	f1c0 0320 	rsb	r3, r0, #32
 80082f8:	fa02 f303 	lsl.w	r3, r2, r3
 80082fc:	430b      	orrs	r3, r1
 80082fe:	40c2      	lsrs	r2, r0
 8008300:	6163      	str	r3, [r4, #20]
 8008302:	9201      	str	r2, [sp, #4]
 8008304:	9b01      	ldr	r3, [sp, #4]
 8008306:	61a3      	str	r3, [r4, #24]
 8008308:	2b00      	cmp	r3, #0
 800830a:	bf0c      	ite	eq
 800830c:	2201      	moveq	r2, #1
 800830e:	2202      	movne	r2, #2
 8008310:	6122      	str	r2, [r4, #16]
 8008312:	b1a5      	cbz	r5, 800833e <__d2b+0x92>
 8008314:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008318:	4405      	add	r5, r0
 800831a:	603d      	str	r5, [r7, #0]
 800831c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008320:	6030      	str	r0, [r6, #0]
 8008322:	4620      	mov	r0, r4
 8008324:	b003      	add	sp, #12
 8008326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800832a:	6161      	str	r1, [r4, #20]
 800832c:	e7ea      	b.n	8008304 <__d2b+0x58>
 800832e:	a801      	add	r0, sp, #4
 8008330:	f7ff fd59 	bl	8007de6 <__lo0bits>
 8008334:	9b01      	ldr	r3, [sp, #4]
 8008336:	6163      	str	r3, [r4, #20]
 8008338:	3020      	adds	r0, #32
 800833a:	2201      	movs	r2, #1
 800833c:	e7e8      	b.n	8008310 <__d2b+0x64>
 800833e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008342:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008346:	6038      	str	r0, [r7, #0]
 8008348:	6918      	ldr	r0, [r3, #16]
 800834a:	f7ff fd2d 	bl	8007da8 <__hi0bits>
 800834e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008352:	e7e5      	b.n	8008320 <__d2b+0x74>
 8008354:	0800a5d4 	.word	0x0800a5d4
 8008358:	0800a5e5 	.word	0x0800a5e5

0800835c <__ssputs_r>:
 800835c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008360:	688e      	ldr	r6, [r1, #8]
 8008362:	461f      	mov	r7, r3
 8008364:	42be      	cmp	r6, r7
 8008366:	680b      	ldr	r3, [r1, #0]
 8008368:	4682      	mov	sl, r0
 800836a:	460c      	mov	r4, r1
 800836c:	4690      	mov	r8, r2
 800836e:	d82d      	bhi.n	80083cc <__ssputs_r+0x70>
 8008370:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008374:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008378:	d026      	beq.n	80083c8 <__ssputs_r+0x6c>
 800837a:	6965      	ldr	r5, [r4, #20]
 800837c:	6909      	ldr	r1, [r1, #16]
 800837e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008382:	eba3 0901 	sub.w	r9, r3, r1
 8008386:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800838a:	1c7b      	adds	r3, r7, #1
 800838c:	444b      	add	r3, r9
 800838e:	106d      	asrs	r5, r5, #1
 8008390:	429d      	cmp	r5, r3
 8008392:	bf38      	it	cc
 8008394:	461d      	movcc	r5, r3
 8008396:	0553      	lsls	r3, r2, #21
 8008398:	d527      	bpl.n	80083ea <__ssputs_r+0x8e>
 800839a:	4629      	mov	r1, r5
 800839c:	f7ff fbd0 	bl	8007b40 <_malloc_r>
 80083a0:	4606      	mov	r6, r0
 80083a2:	b360      	cbz	r0, 80083fe <__ssputs_r+0xa2>
 80083a4:	6921      	ldr	r1, [r4, #16]
 80083a6:	464a      	mov	r2, r9
 80083a8:	f7fe fcf9 	bl	8006d9e <memcpy>
 80083ac:	89a3      	ldrh	r3, [r4, #12]
 80083ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80083b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80083b6:	81a3      	strh	r3, [r4, #12]
 80083b8:	6126      	str	r6, [r4, #16]
 80083ba:	6165      	str	r5, [r4, #20]
 80083bc:	444e      	add	r6, r9
 80083be:	eba5 0509 	sub.w	r5, r5, r9
 80083c2:	6026      	str	r6, [r4, #0]
 80083c4:	60a5      	str	r5, [r4, #8]
 80083c6:	463e      	mov	r6, r7
 80083c8:	42be      	cmp	r6, r7
 80083ca:	d900      	bls.n	80083ce <__ssputs_r+0x72>
 80083cc:	463e      	mov	r6, r7
 80083ce:	6820      	ldr	r0, [r4, #0]
 80083d0:	4632      	mov	r2, r6
 80083d2:	4641      	mov	r1, r8
 80083d4:	f000 f9c6 	bl	8008764 <memmove>
 80083d8:	68a3      	ldr	r3, [r4, #8]
 80083da:	1b9b      	subs	r3, r3, r6
 80083dc:	60a3      	str	r3, [r4, #8]
 80083de:	6823      	ldr	r3, [r4, #0]
 80083e0:	4433      	add	r3, r6
 80083e2:	6023      	str	r3, [r4, #0]
 80083e4:	2000      	movs	r0, #0
 80083e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083ea:	462a      	mov	r2, r5
 80083ec:	f000 fa28 	bl	8008840 <_realloc_r>
 80083f0:	4606      	mov	r6, r0
 80083f2:	2800      	cmp	r0, #0
 80083f4:	d1e0      	bne.n	80083b8 <__ssputs_r+0x5c>
 80083f6:	6921      	ldr	r1, [r4, #16]
 80083f8:	4650      	mov	r0, sl
 80083fa:	f7ff fb2d 	bl	8007a58 <_free_r>
 80083fe:	230c      	movs	r3, #12
 8008400:	f8ca 3000 	str.w	r3, [sl]
 8008404:	89a3      	ldrh	r3, [r4, #12]
 8008406:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800840a:	81a3      	strh	r3, [r4, #12]
 800840c:	f04f 30ff 	mov.w	r0, #4294967295
 8008410:	e7e9      	b.n	80083e6 <__ssputs_r+0x8a>
	...

08008414 <_svfiprintf_r>:
 8008414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008418:	4698      	mov	r8, r3
 800841a:	898b      	ldrh	r3, [r1, #12]
 800841c:	061b      	lsls	r3, r3, #24
 800841e:	b09d      	sub	sp, #116	@ 0x74
 8008420:	4607      	mov	r7, r0
 8008422:	460d      	mov	r5, r1
 8008424:	4614      	mov	r4, r2
 8008426:	d510      	bpl.n	800844a <_svfiprintf_r+0x36>
 8008428:	690b      	ldr	r3, [r1, #16]
 800842a:	b973      	cbnz	r3, 800844a <_svfiprintf_r+0x36>
 800842c:	2140      	movs	r1, #64	@ 0x40
 800842e:	f7ff fb87 	bl	8007b40 <_malloc_r>
 8008432:	6028      	str	r0, [r5, #0]
 8008434:	6128      	str	r0, [r5, #16]
 8008436:	b930      	cbnz	r0, 8008446 <_svfiprintf_r+0x32>
 8008438:	230c      	movs	r3, #12
 800843a:	603b      	str	r3, [r7, #0]
 800843c:	f04f 30ff 	mov.w	r0, #4294967295
 8008440:	b01d      	add	sp, #116	@ 0x74
 8008442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008446:	2340      	movs	r3, #64	@ 0x40
 8008448:	616b      	str	r3, [r5, #20]
 800844a:	2300      	movs	r3, #0
 800844c:	9309      	str	r3, [sp, #36]	@ 0x24
 800844e:	2320      	movs	r3, #32
 8008450:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008454:	f8cd 800c 	str.w	r8, [sp, #12]
 8008458:	2330      	movs	r3, #48	@ 0x30
 800845a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80085f8 <_svfiprintf_r+0x1e4>
 800845e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008462:	f04f 0901 	mov.w	r9, #1
 8008466:	4623      	mov	r3, r4
 8008468:	469a      	mov	sl, r3
 800846a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800846e:	b10a      	cbz	r2, 8008474 <_svfiprintf_r+0x60>
 8008470:	2a25      	cmp	r2, #37	@ 0x25
 8008472:	d1f9      	bne.n	8008468 <_svfiprintf_r+0x54>
 8008474:	ebba 0b04 	subs.w	fp, sl, r4
 8008478:	d00b      	beq.n	8008492 <_svfiprintf_r+0x7e>
 800847a:	465b      	mov	r3, fp
 800847c:	4622      	mov	r2, r4
 800847e:	4629      	mov	r1, r5
 8008480:	4638      	mov	r0, r7
 8008482:	f7ff ff6b 	bl	800835c <__ssputs_r>
 8008486:	3001      	adds	r0, #1
 8008488:	f000 80a7 	beq.w	80085da <_svfiprintf_r+0x1c6>
 800848c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800848e:	445a      	add	r2, fp
 8008490:	9209      	str	r2, [sp, #36]	@ 0x24
 8008492:	f89a 3000 	ldrb.w	r3, [sl]
 8008496:	2b00      	cmp	r3, #0
 8008498:	f000 809f 	beq.w	80085da <_svfiprintf_r+0x1c6>
 800849c:	2300      	movs	r3, #0
 800849e:	f04f 32ff 	mov.w	r2, #4294967295
 80084a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80084a6:	f10a 0a01 	add.w	sl, sl, #1
 80084aa:	9304      	str	r3, [sp, #16]
 80084ac:	9307      	str	r3, [sp, #28]
 80084ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80084b2:	931a      	str	r3, [sp, #104]	@ 0x68
 80084b4:	4654      	mov	r4, sl
 80084b6:	2205      	movs	r2, #5
 80084b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80084bc:	484e      	ldr	r0, [pc, #312]	@ (80085f8 <_svfiprintf_r+0x1e4>)
 80084be:	f7f7 fe87 	bl	80001d0 <memchr>
 80084c2:	9a04      	ldr	r2, [sp, #16]
 80084c4:	b9d8      	cbnz	r0, 80084fe <_svfiprintf_r+0xea>
 80084c6:	06d0      	lsls	r0, r2, #27
 80084c8:	bf44      	itt	mi
 80084ca:	2320      	movmi	r3, #32
 80084cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084d0:	0711      	lsls	r1, r2, #28
 80084d2:	bf44      	itt	mi
 80084d4:	232b      	movmi	r3, #43	@ 0x2b
 80084d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80084da:	f89a 3000 	ldrb.w	r3, [sl]
 80084de:	2b2a      	cmp	r3, #42	@ 0x2a
 80084e0:	d015      	beq.n	800850e <_svfiprintf_r+0xfa>
 80084e2:	9a07      	ldr	r2, [sp, #28]
 80084e4:	4654      	mov	r4, sl
 80084e6:	2000      	movs	r0, #0
 80084e8:	f04f 0c0a 	mov.w	ip, #10
 80084ec:	4621      	mov	r1, r4
 80084ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084f2:	3b30      	subs	r3, #48	@ 0x30
 80084f4:	2b09      	cmp	r3, #9
 80084f6:	d94b      	bls.n	8008590 <_svfiprintf_r+0x17c>
 80084f8:	b1b0      	cbz	r0, 8008528 <_svfiprintf_r+0x114>
 80084fa:	9207      	str	r2, [sp, #28]
 80084fc:	e014      	b.n	8008528 <_svfiprintf_r+0x114>
 80084fe:	eba0 0308 	sub.w	r3, r0, r8
 8008502:	fa09 f303 	lsl.w	r3, r9, r3
 8008506:	4313      	orrs	r3, r2
 8008508:	9304      	str	r3, [sp, #16]
 800850a:	46a2      	mov	sl, r4
 800850c:	e7d2      	b.n	80084b4 <_svfiprintf_r+0xa0>
 800850e:	9b03      	ldr	r3, [sp, #12]
 8008510:	1d19      	adds	r1, r3, #4
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	9103      	str	r1, [sp, #12]
 8008516:	2b00      	cmp	r3, #0
 8008518:	bfbb      	ittet	lt
 800851a:	425b      	neglt	r3, r3
 800851c:	f042 0202 	orrlt.w	r2, r2, #2
 8008520:	9307      	strge	r3, [sp, #28]
 8008522:	9307      	strlt	r3, [sp, #28]
 8008524:	bfb8      	it	lt
 8008526:	9204      	strlt	r2, [sp, #16]
 8008528:	7823      	ldrb	r3, [r4, #0]
 800852a:	2b2e      	cmp	r3, #46	@ 0x2e
 800852c:	d10a      	bne.n	8008544 <_svfiprintf_r+0x130>
 800852e:	7863      	ldrb	r3, [r4, #1]
 8008530:	2b2a      	cmp	r3, #42	@ 0x2a
 8008532:	d132      	bne.n	800859a <_svfiprintf_r+0x186>
 8008534:	9b03      	ldr	r3, [sp, #12]
 8008536:	1d1a      	adds	r2, r3, #4
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	9203      	str	r2, [sp, #12]
 800853c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008540:	3402      	adds	r4, #2
 8008542:	9305      	str	r3, [sp, #20]
 8008544:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8008608 <_svfiprintf_r+0x1f4>
 8008548:	7821      	ldrb	r1, [r4, #0]
 800854a:	2203      	movs	r2, #3
 800854c:	4650      	mov	r0, sl
 800854e:	f7f7 fe3f 	bl	80001d0 <memchr>
 8008552:	b138      	cbz	r0, 8008564 <_svfiprintf_r+0x150>
 8008554:	9b04      	ldr	r3, [sp, #16]
 8008556:	eba0 000a 	sub.w	r0, r0, sl
 800855a:	2240      	movs	r2, #64	@ 0x40
 800855c:	4082      	lsls	r2, r0
 800855e:	4313      	orrs	r3, r2
 8008560:	3401      	adds	r4, #1
 8008562:	9304      	str	r3, [sp, #16]
 8008564:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008568:	4824      	ldr	r0, [pc, #144]	@ (80085fc <_svfiprintf_r+0x1e8>)
 800856a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800856e:	2206      	movs	r2, #6
 8008570:	f7f7 fe2e 	bl	80001d0 <memchr>
 8008574:	2800      	cmp	r0, #0
 8008576:	d036      	beq.n	80085e6 <_svfiprintf_r+0x1d2>
 8008578:	4b21      	ldr	r3, [pc, #132]	@ (8008600 <_svfiprintf_r+0x1ec>)
 800857a:	bb1b      	cbnz	r3, 80085c4 <_svfiprintf_r+0x1b0>
 800857c:	9b03      	ldr	r3, [sp, #12]
 800857e:	3307      	adds	r3, #7
 8008580:	f023 0307 	bic.w	r3, r3, #7
 8008584:	3308      	adds	r3, #8
 8008586:	9303      	str	r3, [sp, #12]
 8008588:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800858a:	4433      	add	r3, r6
 800858c:	9309      	str	r3, [sp, #36]	@ 0x24
 800858e:	e76a      	b.n	8008466 <_svfiprintf_r+0x52>
 8008590:	fb0c 3202 	mla	r2, ip, r2, r3
 8008594:	460c      	mov	r4, r1
 8008596:	2001      	movs	r0, #1
 8008598:	e7a8      	b.n	80084ec <_svfiprintf_r+0xd8>
 800859a:	2300      	movs	r3, #0
 800859c:	3401      	adds	r4, #1
 800859e:	9305      	str	r3, [sp, #20]
 80085a0:	4619      	mov	r1, r3
 80085a2:	f04f 0c0a 	mov.w	ip, #10
 80085a6:	4620      	mov	r0, r4
 80085a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085ac:	3a30      	subs	r2, #48	@ 0x30
 80085ae:	2a09      	cmp	r2, #9
 80085b0:	d903      	bls.n	80085ba <_svfiprintf_r+0x1a6>
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d0c6      	beq.n	8008544 <_svfiprintf_r+0x130>
 80085b6:	9105      	str	r1, [sp, #20]
 80085b8:	e7c4      	b.n	8008544 <_svfiprintf_r+0x130>
 80085ba:	fb0c 2101 	mla	r1, ip, r1, r2
 80085be:	4604      	mov	r4, r0
 80085c0:	2301      	movs	r3, #1
 80085c2:	e7f0      	b.n	80085a6 <_svfiprintf_r+0x192>
 80085c4:	ab03      	add	r3, sp, #12
 80085c6:	9300      	str	r3, [sp, #0]
 80085c8:	462a      	mov	r2, r5
 80085ca:	4b0e      	ldr	r3, [pc, #56]	@ (8008604 <_svfiprintf_r+0x1f0>)
 80085cc:	a904      	add	r1, sp, #16
 80085ce:	4638      	mov	r0, r7
 80085d0:	f7fd fe88 	bl	80062e4 <_printf_float>
 80085d4:	1c42      	adds	r2, r0, #1
 80085d6:	4606      	mov	r6, r0
 80085d8:	d1d6      	bne.n	8008588 <_svfiprintf_r+0x174>
 80085da:	89ab      	ldrh	r3, [r5, #12]
 80085dc:	065b      	lsls	r3, r3, #25
 80085de:	f53f af2d 	bmi.w	800843c <_svfiprintf_r+0x28>
 80085e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80085e4:	e72c      	b.n	8008440 <_svfiprintf_r+0x2c>
 80085e6:	ab03      	add	r3, sp, #12
 80085e8:	9300      	str	r3, [sp, #0]
 80085ea:	462a      	mov	r2, r5
 80085ec:	4b05      	ldr	r3, [pc, #20]	@ (8008604 <_svfiprintf_r+0x1f0>)
 80085ee:	a904      	add	r1, sp, #16
 80085f0:	4638      	mov	r0, r7
 80085f2:	f7fe f90f 	bl	8006814 <_printf_i>
 80085f6:	e7ed      	b.n	80085d4 <_svfiprintf_r+0x1c0>
 80085f8:	0800a740 	.word	0x0800a740
 80085fc:	0800a74a 	.word	0x0800a74a
 8008600:	080062e5 	.word	0x080062e5
 8008604:	0800835d 	.word	0x0800835d
 8008608:	0800a746 	.word	0x0800a746

0800860c <__sflush_r>:
 800860c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008614:	0716      	lsls	r6, r2, #28
 8008616:	4605      	mov	r5, r0
 8008618:	460c      	mov	r4, r1
 800861a:	d454      	bmi.n	80086c6 <__sflush_r+0xba>
 800861c:	684b      	ldr	r3, [r1, #4]
 800861e:	2b00      	cmp	r3, #0
 8008620:	dc02      	bgt.n	8008628 <__sflush_r+0x1c>
 8008622:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008624:	2b00      	cmp	r3, #0
 8008626:	dd48      	ble.n	80086ba <__sflush_r+0xae>
 8008628:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800862a:	2e00      	cmp	r6, #0
 800862c:	d045      	beq.n	80086ba <__sflush_r+0xae>
 800862e:	2300      	movs	r3, #0
 8008630:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008634:	682f      	ldr	r7, [r5, #0]
 8008636:	6a21      	ldr	r1, [r4, #32]
 8008638:	602b      	str	r3, [r5, #0]
 800863a:	d030      	beq.n	800869e <__sflush_r+0x92>
 800863c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800863e:	89a3      	ldrh	r3, [r4, #12]
 8008640:	0759      	lsls	r1, r3, #29
 8008642:	d505      	bpl.n	8008650 <__sflush_r+0x44>
 8008644:	6863      	ldr	r3, [r4, #4]
 8008646:	1ad2      	subs	r2, r2, r3
 8008648:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800864a:	b10b      	cbz	r3, 8008650 <__sflush_r+0x44>
 800864c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800864e:	1ad2      	subs	r2, r2, r3
 8008650:	2300      	movs	r3, #0
 8008652:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008654:	6a21      	ldr	r1, [r4, #32]
 8008656:	4628      	mov	r0, r5
 8008658:	47b0      	blx	r6
 800865a:	1c43      	adds	r3, r0, #1
 800865c:	89a3      	ldrh	r3, [r4, #12]
 800865e:	d106      	bne.n	800866e <__sflush_r+0x62>
 8008660:	6829      	ldr	r1, [r5, #0]
 8008662:	291d      	cmp	r1, #29
 8008664:	d82b      	bhi.n	80086be <__sflush_r+0xb2>
 8008666:	4a2a      	ldr	r2, [pc, #168]	@ (8008710 <__sflush_r+0x104>)
 8008668:	410a      	asrs	r2, r1
 800866a:	07d6      	lsls	r6, r2, #31
 800866c:	d427      	bmi.n	80086be <__sflush_r+0xb2>
 800866e:	2200      	movs	r2, #0
 8008670:	6062      	str	r2, [r4, #4]
 8008672:	04d9      	lsls	r1, r3, #19
 8008674:	6922      	ldr	r2, [r4, #16]
 8008676:	6022      	str	r2, [r4, #0]
 8008678:	d504      	bpl.n	8008684 <__sflush_r+0x78>
 800867a:	1c42      	adds	r2, r0, #1
 800867c:	d101      	bne.n	8008682 <__sflush_r+0x76>
 800867e:	682b      	ldr	r3, [r5, #0]
 8008680:	b903      	cbnz	r3, 8008684 <__sflush_r+0x78>
 8008682:	6560      	str	r0, [r4, #84]	@ 0x54
 8008684:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008686:	602f      	str	r7, [r5, #0]
 8008688:	b1b9      	cbz	r1, 80086ba <__sflush_r+0xae>
 800868a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800868e:	4299      	cmp	r1, r3
 8008690:	d002      	beq.n	8008698 <__sflush_r+0x8c>
 8008692:	4628      	mov	r0, r5
 8008694:	f7ff f9e0 	bl	8007a58 <_free_r>
 8008698:	2300      	movs	r3, #0
 800869a:	6363      	str	r3, [r4, #52]	@ 0x34
 800869c:	e00d      	b.n	80086ba <__sflush_r+0xae>
 800869e:	2301      	movs	r3, #1
 80086a0:	4628      	mov	r0, r5
 80086a2:	47b0      	blx	r6
 80086a4:	4602      	mov	r2, r0
 80086a6:	1c50      	adds	r0, r2, #1
 80086a8:	d1c9      	bne.n	800863e <__sflush_r+0x32>
 80086aa:	682b      	ldr	r3, [r5, #0]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d0c6      	beq.n	800863e <__sflush_r+0x32>
 80086b0:	2b1d      	cmp	r3, #29
 80086b2:	d001      	beq.n	80086b8 <__sflush_r+0xac>
 80086b4:	2b16      	cmp	r3, #22
 80086b6:	d11e      	bne.n	80086f6 <__sflush_r+0xea>
 80086b8:	602f      	str	r7, [r5, #0]
 80086ba:	2000      	movs	r0, #0
 80086bc:	e022      	b.n	8008704 <__sflush_r+0xf8>
 80086be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086c2:	b21b      	sxth	r3, r3
 80086c4:	e01b      	b.n	80086fe <__sflush_r+0xf2>
 80086c6:	690f      	ldr	r7, [r1, #16]
 80086c8:	2f00      	cmp	r7, #0
 80086ca:	d0f6      	beq.n	80086ba <__sflush_r+0xae>
 80086cc:	0793      	lsls	r3, r2, #30
 80086ce:	680e      	ldr	r6, [r1, #0]
 80086d0:	bf08      	it	eq
 80086d2:	694b      	ldreq	r3, [r1, #20]
 80086d4:	600f      	str	r7, [r1, #0]
 80086d6:	bf18      	it	ne
 80086d8:	2300      	movne	r3, #0
 80086da:	eba6 0807 	sub.w	r8, r6, r7
 80086de:	608b      	str	r3, [r1, #8]
 80086e0:	f1b8 0f00 	cmp.w	r8, #0
 80086e4:	dde9      	ble.n	80086ba <__sflush_r+0xae>
 80086e6:	6a21      	ldr	r1, [r4, #32]
 80086e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80086ea:	4643      	mov	r3, r8
 80086ec:	463a      	mov	r2, r7
 80086ee:	4628      	mov	r0, r5
 80086f0:	47b0      	blx	r6
 80086f2:	2800      	cmp	r0, #0
 80086f4:	dc08      	bgt.n	8008708 <__sflush_r+0xfc>
 80086f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80086fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80086fe:	81a3      	strh	r3, [r4, #12]
 8008700:	f04f 30ff 	mov.w	r0, #4294967295
 8008704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008708:	4407      	add	r7, r0
 800870a:	eba8 0800 	sub.w	r8, r8, r0
 800870e:	e7e7      	b.n	80086e0 <__sflush_r+0xd4>
 8008710:	dfbffffe 	.word	0xdfbffffe

08008714 <_fflush_r>:
 8008714:	b538      	push	{r3, r4, r5, lr}
 8008716:	690b      	ldr	r3, [r1, #16]
 8008718:	4605      	mov	r5, r0
 800871a:	460c      	mov	r4, r1
 800871c:	b913      	cbnz	r3, 8008724 <_fflush_r+0x10>
 800871e:	2500      	movs	r5, #0
 8008720:	4628      	mov	r0, r5
 8008722:	bd38      	pop	{r3, r4, r5, pc}
 8008724:	b118      	cbz	r0, 800872e <_fflush_r+0x1a>
 8008726:	6a03      	ldr	r3, [r0, #32]
 8008728:	b90b      	cbnz	r3, 800872e <_fflush_r+0x1a>
 800872a:	f7fe fa1f 	bl	8006b6c <__sinit>
 800872e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0f3      	beq.n	800871e <_fflush_r+0xa>
 8008736:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008738:	07d0      	lsls	r0, r2, #31
 800873a:	d404      	bmi.n	8008746 <_fflush_r+0x32>
 800873c:	0599      	lsls	r1, r3, #22
 800873e:	d402      	bmi.n	8008746 <_fflush_r+0x32>
 8008740:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008742:	f7fe fb2a 	bl	8006d9a <__retarget_lock_acquire_recursive>
 8008746:	4628      	mov	r0, r5
 8008748:	4621      	mov	r1, r4
 800874a:	f7ff ff5f 	bl	800860c <__sflush_r>
 800874e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008750:	07da      	lsls	r2, r3, #31
 8008752:	4605      	mov	r5, r0
 8008754:	d4e4      	bmi.n	8008720 <_fflush_r+0xc>
 8008756:	89a3      	ldrh	r3, [r4, #12]
 8008758:	059b      	lsls	r3, r3, #22
 800875a:	d4e1      	bmi.n	8008720 <_fflush_r+0xc>
 800875c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800875e:	f7fe fb1d 	bl	8006d9c <__retarget_lock_release_recursive>
 8008762:	e7dd      	b.n	8008720 <_fflush_r+0xc>

08008764 <memmove>:
 8008764:	4288      	cmp	r0, r1
 8008766:	b510      	push	{r4, lr}
 8008768:	eb01 0402 	add.w	r4, r1, r2
 800876c:	d902      	bls.n	8008774 <memmove+0x10>
 800876e:	4284      	cmp	r4, r0
 8008770:	4623      	mov	r3, r4
 8008772:	d807      	bhi.n	8008784 <memmove+0x20>
 8008774:	1e43      	subs	r3, r0, #1
 8008776:	42a1      	cmp	r1, r4
 8008778:	d008      	beq.n	800878c <memmove+0x28>
 800877a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800877e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008782:	e7f8      	b.n	8008776 <memmove+0x12>
 8008784:	4402      	add	r2, r0
 8008786:	4601      	mov	r1, r0
 8008788:	428a      	cmp	r2, r1
 800878a:	d100      	bne.n	800878e <memmove+0x2a>
 800878c:	bd10      	pop	{r4, pc}
 800878e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008792:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008796:	e7f7      	b.n	8008788 <memmove+0x24>

08008798 <_sbrk_r>:
 8008798:	b538      	push	{r3, r4, r5, lr}
 800879a:	4d06      	ldr	r5, [pc, #24]	@ (80087b4 <_sbrk_r+0x1c>)
 800879c:	2300      	movs	r3, #0
 800879e:	4604      	mov	r4, r0
 80087a0:	4608      	mov	r0, r1
 80087a2:	602b      	str	r3, [r5, #0]
 80087a4:	f7fa fa5c 	bl	8002c60 <_sbrk>
 80087a8:	1c43      	adds	r3, r0, #1
 80087aa:	d102      	bne.n	80087b2 <_sbrk_r+0x1a>
 80087ac:	682b      	ldr	r3, [r5, #0]
 80087ae:	b103      	cbz	r3, 80087b2 <_sbrk_r+0x1a>
 80087b0:	6023      	str	r3, [r4, #0]
 80087b2:	bd38      	pop	{r3, r4, r5, pc}
 80087b4:	20000984 	.word	0x20000984

080087b8 <__assert_func>:
 80087b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80087ba:	4614      	mov	r4, r2
 80087bc:	461a      	mov	r2, r3
 80087be:	4b09      	ldr	r3, [pc, #36]	@ (80087e4 <__assert_func+0x2c>)
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4605      	mov	r5, r0
 80087c4:	68d8      	ldr	r0, [r3, #12]
 80087c6:	b954      	cbnz	r4, 80087de <__assert_func+0x26>
 80087c8:	4b07      	ldr	r3, [pc, #28]	@ (80087e8 <__assert_func+0x30>)
 80087ca:	461c      	mov	r4, r3
 80087cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80087d0:	9100      	str	r1, [sp, #0]
 80087d2:	462b      	mov	r3, r5
 80087d4:	4905      	ldr	r1, [pc, #20]	@ (80087ec <__assert_func+0x34>)
 80087d6:	f000 f86f 	bl	80088b8 <fiprintf>
 80087da:	f000 f87f 	bl	80088dc <abort>
 80087de:	4b04      	ldr	r3, [pc, #16]	@ (80087f0 <__assert_func+0x38>)
 80087e0:	e7f4      	b.n	80087cc <__assert_func+0x14>
 80087e2:	bf00      	nop
 80087e4:	20000018 	.word	0x20000018
 80087e8:	0800a796 	.word	0x0800a796
 80087ec:	0800a768 	.word	0x0800a768
 80087f0:	0800a75b 	.word	0x0800a75b

080087f4 <_calloc_r>:
 80087f4:	b570      	push	{r4, r5, r6, lr}
 80087f6:	fba1 5402 	umull	r5, r4, r1, r2
 80087fa:	b93c      	cbnz	r4, 800880c <_calloc_r+0x18>
 80087fc:	4629      	mov	r1, r5
 80087fe:	f7ff f99f 	bl	8007b40 <_malloc_r>
 8008802:	4606      	mov	r6, r0
 8008804:	b928      	cbnz	r0, 8008812 <_calloc_r+0x1e>
 8008806:	2600      	movs	r6, #0
 8008808:	4630      	mov	r0, r6
 800880a:	bd70      	pop	{r4, r5, r6, pc}
 800880c:	220c      	movs	r2, #12
 800880e:	6002      	str	r2, [r0, #0]
 8008810:	e7f9      	b.n	8008806 <_calloc_r+0x12>
 8008812:	462a      	mov	r2, r5
 8008814:	4621      	mov	r1, r4
 8008816:	f7fe fa42 	bl	8006c9e <memset>
 800881a:	e7f5      	b.n	8008808 <_calloc_r+0x14>

0800881c <__ascii_mbtowc>:
 800881c:	b082      	sub	sp, #8
 800881e:	b901      	cbnz	r1, 8008822 <__ascii_mbtowc+0x6>
 8008820:	a901      	add	r1, sp, #4
 8008822:	b142      	cbz	r2, 8008836 <__ascii_mbtowc+0x1a>
 8008824:	b14b      	cbz	r3, 800883a <__ascii_mbtowc+0x1e>
 8008826:	7813      	ldrb	r3, [r2, #0]
 8008828:	600b      	str	r3, [r1, #0]
 800882a:	7812      	ldrb	r2, [r2, #0]
 800882c:	1e10      	subs	r0, r2, #0
 800882e:	bf18      	it	ne
 8008830:	2001      	movne	r0, #1
 8008832:	b002      	add	sp, #8
 8008834:	4770      	bx	lr
 8008836:	4610      	mov	r0, r2
 8008838:	e7fb      	b.n	8008832 <__ascii_mbtowc+0x16>
 800883a:	f06f 0001 	mvn.w	r0, #1
 800883e:	e7f8      	b.n	8008832 <__ascii_mbtowc+0x16>

08008840 <_realloc_r>:
 8008840:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008844:	4680      	mov	r8, r0
 8008846:	4615      	mov	r5, r2
 8008848:	460c      	mov	r4, r1
 800884a:	b921      	cbnz	r1, 8008856 <_realloc_r+0x16>
 800884c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008850:	4611      	mov	r1, r2
 8008852:	f7ff b975 	b.w	8007b40 <_malloc_r>
 8008856:	b92a      	cbnz	r2, 8008864 <_realloc_r+0x24>
 8008858:	f7ff f8fe 	bl	8007a58 <_free_r>
 800885c:	2400      	movs	r4, #0
 800885e:	4620      	mov	r0, r4
 8008860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008864:	f000 f841 	bl	80088ea <_malloc_usable_size_r>
 8008868:	4285      	cmp	r5, r0
 800886a:	4606      	mov	r6, r0
 800886c:	d802      	bhi.n	8008874 <_realloc_r+0x34>
 800886e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8008872:	d8f4      	bhi.n	800885e <_realloc_r+0x1e>
 8008874:	4629      	mov	r1, r5
 8008876:	4640      	mov	r0, r8
 8008878:	f7ff f962 	bl	8007b40 <_malloc_r>
 800887c:	4607      	mov	r7, r0
 800887e:	2800      	cmp	r0, #0
 8008880:	d0ec      	beq.n	800885c <_realloc_r+0x1c>
 8008882:	42b5      	cmp	r5, r6
 8008884:	462a      	mov	r2, r5
 8008886:	4621      	mov	r1, r4
 8008888:	bf28      	it	cs
 800888a:	4632      	movcs	r2, r6
 800888c:	f7fe fa87 	bl	8006d9e <memcpy>
 8008890:	4621      	mov	r1, r4
 8008892:	4640      	mov	r0, r8
 8008894:	f7ff f8e0 	bl	8007a58 <_free_r>
 8008898:	463c      	mov	r4, r7
 800889a:	e7e0      	b.n	800885e <_realloc_r+0x1e>

0800889c <__ascii_wctomb>:
 800889c:	4603      	mov	r3, r0
 800889e:	4608      	mov	r0, r1
 80088a0:	b141      	cbz	r1, 80088b4 <__ascii_wctomb+0x18>
 80088a2:	2aff      	cmp	r2, #255	@ 0xff
 80088a4:	d904      	bls.n	80088b0 <__ascii_wctomb+0x14>
 80088a6:	228a      	movs	r2, #138	@ 0x8a
 80088a8:	601a      	str	r2, [r3, #0]
 80088aa:	f04f 30ff 	mov.w	r0, #4294967295
 80088ae:	4770      	bx	lr
 80088b0:	700a      	strb	r2, [r1, #0]
 80088b2:	2001      	movs	r0, #1
 80088b4:	4770      	bx	lr
	...

080088b8 <fiprintf>:
 80088b8:	b40e      	push	{r1, r2, r3}
 80088ba:	b503      	push	{r0, r1, lr}
 80088bc:	4601      	mov	r1, r0
 80088be:	ab03      	add	r3, sp, #12
 80088c0:	4805      	ldr	r0, [pc, #20]	@ (80088d8 <fiprintf+0x20>)
 80088c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80088c6:	6800      	ldr	r0, [r0, #0]
 80088c8:	9301      	str	r3, [sp, #4]
 80088ca:	f000 f83f 	bl	800894c <_vfiprintf_r>
 80088ce:	b002      	add	sp, #8
 80088d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80088d4:	b003      	add	sp, #12
 80088d6:	4770      	bx	lr
 80088d8:	20000018 	.word	0x20000018

080088dc <abort>:
 80088dc:	b508      	push	{r3, lr}
 80088de:	2006      	movs	r0, #6
 80088e0:	f000 fa08 	bl	8008cf4 <raise>
 80088e4:	2001      	movs	r0, #1
 80088e6:	f7fa f942 	bl	8002b6e <_exit>

080088ea <_malloc_usable_size_r>:
 80088ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80088ee:	1f18      	subs	r0, r3, #4
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	bfbc      	itt	lt
 80088f4:	580b      	ldrlt	r3, [r1, r0]
 80088f6:	18c0      	addlt	r0, r0, r3
 80088f8:	4770      	bx	lr

080088fa <__sfputc_r>:
 80088fa:	6893      	ldr	r3, [r2, #8]
 80088fc:	3b01      	subs	r3, #1
 80088fe:	2b00      	cmp	r3, #0
 8008900:	b410      	push	{r4}
 8008902:	6093      	str	r3, [r2, #8]
 8008904:	da08      	bge.n	8008918 <__sfputc_r+0x1e>
 8008906:	6994      	ldr	r4, [r2, #24]
 8008908:	42a3      	cmp	r3, r4
 800890a:	db01      	blt.n	8008910 <__sfputc_r+0x16>
 800890c:	290a      	cmp	r1, #10
 800890e:	d103      	bne.n	8008918 <__sfputc_r+0x1e>
 8008910:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008914:	f000 b932 	b.w	8008b7c <__swbuf_r>
 8008918:	6813      	ldr	r3, [r2, #0]
 800891a:	1c58      	adds	r0, r3, #1
 800891c:	6010      	str	r0, [r2, #0]
 800891e:	7019      	strb	r1, [r3, #0]
 8008920:	4608      	mov	r0, r1
 8008922:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008926:	4770      	bx	lr

08008928 <__sfputs_r>:
 8008928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800892a:	4606      	mov	r6, r0
 800892c:	460f      	mov	r7, r1
 800892e:	4614      	mov	r4, r2
 8008930:	18d5      	adds	r5, r2, r3
 8008932:	42ac      	cmp	r4, r5
 8008934:	d101      	bne.n	800893a <__sfputs_r+0x12>
 8008936:	2000      	movs	r0, #0
 8008938:	e007      	b.n	800894a <__sfputs_r+0x22>
 800893a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800893e:	463a      	mov	r2, r7
 8008940:	4630      	mov	r0, r6
 8008942:	f7ff ffda 	bl	80088fa <__sfputc_r>
 8008946:	1c43      	adds	r3, r0, #1
 8008948:	d1f3      	bne.n	8008932 <__sfputs_r+0xa>
 800894a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800894c <_vfiprintf_r>:
 800894c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008950:	460d      	mov	r5, r1
 8008952:	b09d      	sub	sp, #116	@ 0x74
 8008954:	4614      	mov	r4, r2
 8008956:	4698      	mov	r8, r3
 8008958:	4606      	mov	r6, r0
 800895a:	b118      	cbz	r0, 8008964 <_vfiprintf_r+0x18>
 800895c:	6a03      	ldr	r3, [r0, #32]
 800895e:	b90b      	cbnz	r3, 8008964 <_vfiprintf_r+0x18>
 8008960:	f7fe f904 	bl	8006b6c <__sinit>
 8008964:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008966:	07d9      	lsls	r1, r3, #31
 8008968:	d405      	bmi.n	8008976 <_vfiprintf_r+0x2a>
 800896a:	89ab      	ldrh	r3, [r5, #12]
 800896c:	059a      	lsls	r2, r3, #22
 800896e:	d402      	bmi.n	8008976 <_vfiprintf_r+0x2a>
 8008970:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008972:	f7fe fa12 	bl	8006d9a <__retarget_lock_acquire_recursive>
 8008976:	89ab      	ldrh	r3, [r5, #12]
 8008978:	071b      	lsls	r3, r3, #28
 800897a:	d501      	bpl.n	8008980 <_vfiprintf_r+0x34>
 800897c:	692b      	ldr	r3, [r5, #16]
 800897e:	b99b      	cbnz	r3, 80089a8 <_vfiprintf_r+0x5c>
 8008980:	4629      	mov	r1, r5
 8008982:	4630      	mov	r0, r6
 8008984:	f000 f938 	bl	8008bf8 <__swsetup_r>
 8008988:	b170      	cbz	r0, 80089a8 <_vfiprintf_r+0x5c>
 800898a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800898c:	07dc      	lsls	r4, r3, #31
 800898e:	d504      	bpl.n	800899a <_vfiprintf_r+0x4e>
 8008990:	f04f 30ff 	mov.w	r0, #4294967295
 8008994:	b01d      	add	sp, #116	@ 0x74
 8008996:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800899a:	89ab      	ldrh	r3, [r5, #12]
 800899c:	0598      	lsls	r0, r3, #22
 800899e:	d4f7      	bmi.n	8008990 <_vfiprintf_r+0x44>
 80089a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80089a2:	f7fe f9fb 	bl	8006d9c <__retarget_lock_release_recursive>
 80089a6:	e7f3      	b.n	8008990 <_vfiprintf_r+0x44>
 80089a8:	2300      	movs	r3, #0
 80089aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80089ac:	2320      	movs	r3, #32
 80089ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80089b2:	f8cd 800c 	str.w	r8, [sp, #12]
 80089b6:	2330      	movs	r3, #48	@ 0x30
 80089b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008b68 <_vfiprintf_r+0x21c>
 80089bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80089c0:	f04f 0901 	mov.w	r9, #1
 80089c4:	4623      	mov	r3, r4
 80089c6:	469a      	mov	sl, r3
 80089c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089cc:	b10a      	cbz	r2, 80089d2 <_vfiprintf_r+0x86>
 80089ce:	2a25      	cmp	r2, #37	@ 0x25
 80089d0:	d1f9      	bne.n	80089c6 <_vfiprintf_r+0x7a>
 80089d2:	ebba 0b04 	subs.w	fp, sl, r4
 80089d6:	d00b      	beq.n	80089f0 <_vfiprintf_r+0xa4>
 80089d8:	465b      	mov	r3, fp
 80089da:	4622      	mov	r2, r4
 80089dc:	4629      	mov	r1, r5
 80089de:	4630      	mov	r0, r6
 80089e0:	f7ff ffa2 	bl	8008928 <__sfputs_r>
 80089e4:	3001      	adds	r0, #1
 80089e6:	f000 80a7 	beq.w	8008b38 <_vfiprintf_r+0x1ec>
 80089ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089ec:	445a      	add	r2, fp
 80089ee:	9209      	str	r2, [sp, #36]	@ 0x24
 80089f0:	f89a 3000 	ldrb.w	r3, [sl]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f000 809f 	beq.w	8008b38 <_vfiprintf_r+0x1ec>
 80089fa:	2300      	movs	r3, #0
 80089fc:	f04f 32ff 	mov.w	r2, #4294967295
 8008a00:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a04:	f10a 0a01 	add.w	sl, sl, #1
 8008a08:	9304      	str	r3, [sp, #16]
 8008a0a:	9307      	str	r3, [sp, #28]
 8008a0c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008a10:	931a      	str	r3, [sp, #104]	@ 0x68
 8008a12:	4654      	mov	r4, sl
 8008a14:	2205      	movs	r2, #5
 8008a16:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a1a:	4853      	ldr	r0, [pc, #332]	@ (8008b68 <_vfiprintf_r+0x21c>)
 8008a1c:	f7f7 fbd8 	bl	80001d0 <memchr>
 8008a20:	9a04      	ldr	r2, [sp, #16]
 8008a22:	b9d8      	cbnz	r0, 8008a5c <_vfiprintf_r+0x110>
 8008a24:	06d1      	lsls	r1, r2, #27
 8008a26:	bf44      	itt	mi
 8008a28:	2320      	movmi	r3, #32
 8008a2a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a2e:	0713      	lsls	r3, r2, #28
 8008a30:	bf44      	itt	mi
 8008a32:	232b      	movmi	r3, #43	@ 0x2b
 8008a34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008a38:	f89a 3000 	ldrb.w	r3, [sl]
 8008a3c:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a3e:	d015      	beq.n	8008a6c <_vfiprintf_r+0x120>
 8008a40:	9a07      	ldr	r2, [sp, #28]
 8008a42:	4654      	mov	r4, sl
 8008a44:	2000      	movs	r0, #0
 8008a46:	f04f 0c0a 	mov.w	ip, #10
 8008a4a:	4621      	mov	r1, r4
 8008a4c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a50:	3b30      	subs	r3, #48	@ 0x30
 8008a52:	2b09      	cmp	r3, #9
 8008a54:	d94b      	bls.n	8008aee <_vfiprintf_r+0x1a2>
 8008a56:	b1b0      	cbz	r0, 8008a86 <_vfiprintf_r+0x13a>
 8008a58:	9207      	str	r2, [sp, #28]
 8008a5a:	e014      	b.n	8008a86 <_vfiprintf_r+0x13a>
 8008a5c:	eba0 0308 	sub.w	r3, r0, r8
 8008a60:	fa09 f303 	lsl.w	r3, r9, r3
 8008a64:	4313      	orrs	r3, r2
 8008a66:	9304      	str	r3, [sp, #16]
 8008a68:	46a2      	mov	sl, r4
 8008a6a:	e7d2      	b.n	8008a12 <_vfiprintf_r+0xc6>
 8008a6c:	9b03      	ldr	r3, [sp, #12]
 8008a6e:	1d19      	adds	r1, r3, #4
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	9103      	str	r1, [sp, #12]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	bfbb      	ittet	lt
 8008a78:	425b      	neglt	r3, r3
 8008a7a:	f042 0202 	orrlt.w	r2, r2, #2
 8008a7e:	9307      	strge	r3, [sp, #28]
 8008a80:	9307      	strlt	r3, [sp, #28]
 8008a82:	bfb8      	it	lt
 8008a84:	9204      	strlt	r2, [sp, #16]
 8008a86:	7823      	ldrb	r3, [r4, #0]
 8008a88:	2b2e      	cmp	r3, #46	@ 0x2e
 8008a8a:	d10a      	bne.n	8008aa2 <_vfiprintf_r+0x156>
 8008a8c:	7863      	ldrb	r3, [r4, #1]
 8008a8e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008a90:	d132      	bne.n	8008af8 <_vfiprintf_r+0x1ac>
 8008a92:	9b03      	ldr	r3, [sp, #12]
 8008a94:	1d1a      	adds	r2, r3, #4
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	9203      	str	r2, [sp, #12]
 8008a9a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008a9e:	3402      	adds	r4, #2
 8008aa0:	9305      	str	r3, [sp, #20]
 8008aa2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008b78 <_vfiprintf_r+0x22c>
 8008aa6:	7821      	ldrb	r1, [r4, #0]
 8008aa8:	2203      	movs	r2, #3
 8008aaa:	4650      	mov	r0, sl
 8008aac:	f7f7 fb90 	bl	80001d0 <memchr>
 8008ab0:	b138      	cbz	r0, 8008ac2 <_vfiprintf_r+0x176>
 8008ab2:	9b04      	ldr	r3, [sp, #16]
 8008ab4:	eba0 000a 	sub.w	r0, r0, sl
 8008ab8:	2240      	movs	r2, #64	@ 0x40
 8008aba:	4082      	lsls	r2, r0
 8008abc:	4313      	orrs	r3, r2
 8008abe:	3401      	adds	r4, #1
 8008ac0:	9304      	str	r3, [sp, #16]
 8008ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ac6:	4829      	ldr	r0, [pc, #164]	@ (8008b6c <_vfiprintf_r+0x220>)
 8008ac8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008acc:	2206      	movs	r2, #6
 8008ace:	f7f7 fb7f 	bl	80001d0 <memchr>
 8008ad2:	2800      	cmp	r0, #0
 8008ad4:	d03f      	beq.n	8008b56 <_vfiprintf_r+0x20a>
 8008ad6:	4b26      	ldr	r3, [pc, #152]	@ (8008b70 <_vfiprintf_r+0x224>)
 8008ad8:	bb1b      	cbnz	r3, 8008b22 <_vfiprintf_r+0x1d6>
 8008ada:	9b03      	ldr	r3, [sp, #12]
 8008adc:	3307      	adds	r3, #7
 8008ade:	f023 0307 	bic.w	r3, r3, #7
 8008ae2:	3308      	adds	r3, #8
 8008ae4:	9303      	str	r3, [sp, #12]
 8008ae6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ae8:	443b      	add	r3, r7
 8008aea:	9309      	str	r3, [sp, #36]	@ 0x24
 8008aec:	e76a      	b.n	80089c4 <_vfiprintf_r+0x78>
 8008aee:	fb0c 3202 	mla	r2, ip, r2, r3
 8008af2:	460c      	mov	r4, r1
 8008af4:	2001      	movs	r0, #1
 8008af6:	e7a8      	b.n	8008a4a <_vfiprintf_r+0xfe>
 8008af8:	2300      	movs	r3, #0
 8008afa:	3401      	adds	r4, #1
 8008afc:	9305      	str	r3, [sp, #20]
 8008afe:	4619      	mov	r1, r3
 8008b00:	f04f 0c0a 	mov.w	ip, #10
 8008b04:	4620      	mov	r0, r4
 8008b06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b0a:	3a30      	subs	r2, #48	@ 0x30
 8008b0c:	2a09      	cmp	r2, #9
 8008b0e:	d903      	bls.n	8008b18 <_vfiprintf_r+0x1cc>
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d0c6      	beq.n	8008aa2 <_vfiprintf_r+0x156>
 8008b14:	9105      	str	r1, [sp, #20]
 8008b16:	e7c4      	b.n	8008aa2 <_vfiprintf_r+0x156>
 8008b18:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b1c:	4604      	mov	r4, r0
 8008b1e:	2301      	movs	r3, #1
 8008b20:	e7f0      	b.n	8008b04 <_vfiprintf_r+0x1b8>
 8008b22:	ab03      	add	r3, sp, #12
 8008b24:	9300      	str	r3, [sp, #0]
 8008b26:	462a      	mov	r2, r5
 8008b28:	4b12      	ldr	r3, [pc, #72]	@ (8008b74 <_vfiprintf_r+0x228>)
 8008b2a:	a904      	add	r1, sp, #16
 8008b2c:	4630      	mov	r0, r6
 8008b2e:	f7fd fbd9 	bl	80062e4 <_printf_float>
 8008b32:	4607      	mov	r7, r0
 8008b34:	1c78      	adds	r0, r7, #1
 8008b36:	d1d6      	bne.n	8008ae6 <_vfiprintf_r+0x19a>
 8008b38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008b3a:	07d9      	lsls	r1, r3, #31
 8008b3c:	d405      	bmi.n	8008b4a <_vfiprintf_r+0x1fe>
 8008b3e:	89ab      	ldrh	r3, [r5, #12]
 8008b40:	059a      	lsls	r2, r3, #22
 8008b42:	d402      	bmi.n	8008b4a <_vfiprintf_r+0x1fe>
 8008b44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008b46:	f7fe f929 	bl	8006d9c <__retarget_lock_release_recursive>
 8008b4a:	89ab      	ldrh	r3, [r5, #12]
 8008b4c:	065b      	lsls	r3, r3, #25
 8008b4e:	f53f af1f 	bmi.w	8008990 <_vfiprintf_r+0x44>
 8008b52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008b54:	e71e      	b.n	8008994 <_vfiprintf_r+0x48>
 8008b56:	ab03      	add	r3, sp, #12
 8008b58:	9300      	str	r3, [sp, #0]
 8008b5a:	462a      	mov	r2, r5
 8008b5c:	4b05      	ldr	r3, [pc, #20]	@ (8008b74 <_vfiprintf_r+0x228>)
 8008b5e:	a904      	add	r1, sp, #16
 8008b60:	4630      	mov	r0, r6
 8008b62:	f7fd fe57 	bl	8006814 <_printf_i>
 8008b66:	e7e4      	b.n	8008b32 <_vfiprintf_r+0x1e6>
 8008b68:	0800a740 	.word	0x0800a740
 8008b6c:	0800a74a 	.word	0x0800a74a
 8008b70:	080062e5 	.word	0x080062e5
 8008b74:	08008929 	.word	0x08008929
 8008b78:	0800a746 	.word	0x0800a746

08008b7c <__swbuf_r>:
 8008b7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b7e:	460e      	mov	r6, r1
 8008b80:	4614      	mov	r4, r2
 8008b82:	4605      	mov	r5, r0
 8008b84:	b118      	cbz	r0, 8008b8e <__swbuf_r+0x12>
 8008b86:	6a03      	ldr	r3, [r0, #32]
 8008b88:	b90b      	cbnz	r3, 8008b8e <__swbuf_r+0x12>
 8008b8a:	f7fd ffef 	bl	8006b6c <__sinit>
 8008b8e:	69a3      	ldr	r3, [r4, #24]
 8008b90:	60a3      	str	r3, [r4, #8]
 8008b92:	89a3      	ldrh	r3, [r4, #12]
 8008b94:	071a      	lsls	r2, r3, #28
 8008b96:	d501      	bpl.n	8008b9c <__swbuf_r+0x20>
 8008b98:	6923      	ldr	r3, [r4, #16]
 8008b9a:	b943      	cbnz	r3, 8008bae <__swbuf_r+0x32>
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	f000 f82a 	bl	8008bf8 <__swsetup_r>
 8008ba4:	b118      	cbz	r0, 8008bae <__swbuf_r+0x32>
 8008ba6:	f04f 37ff 	mov.w	r7, #4294967295
 8008baa:	4638      	mov	r0, r7
 8008bac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bae:	6823      	ldr	r3, [r4, #0]
 8008bb0:	6922      	ldr	r2, [r4, #16]
 8008bb2:	1a98      	subs	r0, r3, r2
 8008bb4:	6963      	ldr	r3, [r4, #20]
 8008bb6:	b2f6      	uxtb	r6, r6
 8008bb8:	4283      	cmp	r3, r0
 8008bba:	4637      	mov	r7, r6
 8008bbc:	dc05      	bgt.n	8008bca <__swbuf_r+0x4e>
 8008bbe:	4621      	mov	r1, r4
 8008bc0:	4628      	mov	r0, r5
 8008bc2:	f7ff fda7 	bl	8008714 <_fflush_r>
 8008bc6:	2800      	cmp	r0, #0
 8008bc8:	d1ed      	bne.n	8008ba6 <__swbuf_r+0x2a>
 8008bca:	68a3      	ldr	r3, [r4, #8]
 8008bcc:	3b01      	subs	r3, #1
 8008bce:	60a3      	str	r3, [r4, #8]
 8008bd0:	6823      	ldr	r3, [r4, #0]
 8008bd2:	1c5a      	adds	r2, r3, #1
 8008bd4:	6022      	str	r2, [r4, #0]
 8008bd6:	701e      	strb	r6, [r3, #0]
 8008bd8:	6962      	ldr	r2, [r4, #20]
 8008bda:	1c43      	adds	r3, r0, #1
 8008bdc:	429a      	cmp	r2, r3
 8008bde:	d004      	beq.n	8008bea <__swbuf_r+0x6e>
 8008be0:	89a3      	ldrh	r3, [r4, #12]
 8008be2:	07db      	lsls	r3, r3, #31
 8008be4:	d5e1      	bpl.n	8008baa <__swbuf_r+0x2e>
 8008be6:	2e0a      	cmp	r6, #10
 8008be8:	d1df      	bne.n	8008baa <__swbuf_r+0x2e>
 8008bea:	4621      	mov	r1, r4
 8008bec:	4628      	mov	r0, r5
 8008bee:	f7ff fd91 	bl	8008714 <_fflush_r>
 8008bf2:	2800      	cmp	r0, #0
 8008bf4:	d0d9      	beq.n	8008baa <__swbuf_r+0x2e>
 8008bf6:	e7d6      	b.n	8008ba6 <__swbuf_r+0x2a>

08008bf8 <__swsetup_r>:
 8008bf8:	b538      	push	{r3, r4, r5, lr}
 8008bfa:	4b29      	ldr	r3, [pc, #164]	@ (8008ca0 <__swsetup_r+0xa8>)
 8008bfc:	4605      	mov	r5, r0
 8008bfe:	6818      	ldr	r0, [r3, #0]
 8008c00:	460c      	mov	r4, r1
 8008c02:	b118      	cbz	r0, 8008c0c <__swsetup_r+0x14>
 8008c04:	6a03      	ldr	r3, [r0, #32]
 8008c06:	b90b      	cbnz	r3, 8008c0c <__swsetup_r+0x14>
 8008c08:	f7fd ffb0 	bl	8006b6c <__sinit>
 8008c0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c10:	0719      	lsls	r1, r3, #28
 8008c12:	d422      	bmi.n	8008c5a <__swsetup_r+0x62>
 8008c14:	06da      	lsls	r2, r3, #27
 8008c16:	d407      	bmi.n	8008c28 <__swsetup_r+0x30>
 8008c18:	2209      	movs	r2, #9
 8008c1a:	602a      	str	r2, [r5, #0]
 8008c1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008c20:	81a3      	strh	r3, [r4, #12]
 8008c22:	f04f 30ff 	mov.w	r0, #4294967295
 8008c26:	e033      	b.n	8008c90 <__swsetup_r+0x98>
 8008c28:	0758      	lsls	r0, r3, #29
 8008c2a:	d512      	bpl.n	8008c52 <__swsetup_r+0x5a>
 8008c2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008c2e:	b141      	cbz	r1, 8008c42 <__swsetup_r+0x4a>
 8008c30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008c34:	4299      	cmp	r1, r3
 8008c36:	d002      	beq.n	8008c3e <__swsetup_r+0x46>
 8008c38:	4628      	mov	r0, r5
 8008c3a:	f7fe ff0d 	bl	8007a58 <_free_r>
 8008c3e:	2300      	movs	r3, #0
 8008c40:	6363      	str	r3, [r4, #52]	@ 0x34
 8008c42:	89a3      	ldrh	r3, [r4, #12]
 8008c44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008c48:	81a3      	strh	r3, [r4, #12]
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	6063      	str	r3, [r4, #4]
 8008c4e:	6923      	ldr	r3, [r4, #16]
 8008c50:	6023      	str	r3, [r4, #0]
 8008c52:	89a3      	ldrh	r3, [r4, #12]
 8008c54:	f043 0308 	orr.w	r3, r3, #8
 8008c58:	81a3      	strh	r3, [r4, #12]
 8008c5a:	6923      	ldr	r3, [r4, #16]
 8008c5c:	b94b      	cbnz	r3, 8008c72 <__swsetup_r+0x7a>
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008c64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008c68:	d003      	beq.n	8008c72 <__swsetup_r+0x7a>
 8008c6a:	4621      	mov	r1, r4
 8008c6c:	4628      	mov	r0, r5
 8008c6e:	f000 f883 	bl	8008d78 <__smakebuf_r>
 8008c72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008c76:	f013 0201 	ands.w	r2, r3, #1
 8008c7a:	d00a      	beq.n	8008c92 <__swsetup_r+0x9a>
 8008c7c:	2200      	movs	r2, #0
 8008c7e:	60a2      	str	r2, [r4, #8]
 8008c80:	6962      	ldr	r2, [r4, #20]
 8008c82:	4252      	negs	r2, r2
 8008c84:	61a2      	str	r2, [r4, #24]
 8008c86:	6922      	ldr	r2, [r4, #16]
 8008c88:	b942      	cbnz	r2, 8008c9c <__swsetup_r+0xa4>
 8008c8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008c8e:	d1c5      	bne.n	8008c1c <__swsetup_r+0x24>
 8008c90:	bd38      	pop	{r3, r4, r5, pc}
 8008c92:	0799      	lsls	r1, r3, #30
 8008c94:	bf58      	it	pl
 8008c96:	6962      	ldrpl	r2, [r4, #20]
 8008c98:	60a2      	str	r2, [r4, #8]
 8008c9a:	e7f4      	b.n	8008c86 <__swsetup_r+0x8e>
 8008c9c:	2000      	movs	r0, #0
 8008c9e:	e7f7      	b.n	8008c90 <__swsetup_r+0x98>
 8008ca0:	20000018 	.word	0x20000018

08008ca4 <_raise_r>:
 8008ca4:	291f      	cmp	r1, #31
 8008ca6:	b538      	push	{r3, r4, r5, lr}
 8008ca8:	4605      	mov	r5, r0
 8008caa:	460c      	mov	r4, r1
 8008cac:	d904      	bls.n	8008cb8 <_raise_r+0x14>
 8008cae:	2316      	movs	r3, #22
 8008cb0:	6003      	str	r3, [r0, #0]
 8008cb2:	f04f 30ff 	mov.w	r0, #4294967295
 8008cb6:	bd38      	pop	{r3, r4, r5, pc}
 8008cb8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008cba:	b112      	cbz	r2, 8008cc2 <_raise_r+0x1e>
 8008cbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008cc0:	b94b      	cbnz	r3, 8008cd6 <_raise_r+0x32>
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	f000 f830 	bl	8008d28 <_getpid_r>
 8008cc8:	4622      	mov	r2, r4
 8008cca:	4601      	mov	r1, r0
 8008ccc:	4628      	mov	r0, r5
 8008cce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008cd2:	f000 b817 	b.w	8008d04 <_kill_r>
 8008cd6:	2b01      	cmp	r3, #1
 8008cd8:	d00a      	beq.n	8008cf0 <_raise_r+0x4c>
 8008cda:	1c59      	adds	r1, r3, #1
 8008cdc:	d103      	bne.n	8008ce6 <_raise_r+0x42>
 8008cde:	2316      	movs	r3, #22
 8008ce0:	6003      	str	r3, [r0, #0]
 8008ce2:	2001      	movs	r0, #1
 8008ce4:	e7e7      	b.n	8008cb6 <_raise_r+0x12>
 8008ce6:	2100      	movs	r1, #0
 8008ce8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008cec:	4620      	mov	r0, r4
 8008cee:	4798      	blx	r3
 8008cf0:	2000      	movs	r0, #0
 8008cf2:	e7e0      	b.n	8008cb6 <_raise_r+0x12>

08008cf4 <raise>:
 8008cf4:	4b02      	ldr	r3, [pc, #8]	@ (8008d00 <raise+0xc>)
 8008cf6:	4601      	mov	r1, r0
 8008cf8:	6818      	ldr	r0, [r3, #0]
 8008cfa:	f7ff bfd3 	b.w	8008ca4 <_raise_r>
 8008cfe:	bf00      	nop
 8008d00:	20000018 	.word	0x20000018

08008d04 <_kill_r>:
 8008d04:	b538      	push	{r3, r4, r5, lr}
 8008d06:	4d07      	ldr	r5, [pc, #28]	@ (8008d24 <_kill_r+0x20>)
 8008d08:	2300      	movs	r3, #0
 8008d0a:	4604      	mov	r4, r0
 8008d0c:	4608      	mov	r0, r1
 8008d0e:	4611      	mov	r1, r2
 8008d10:	602b      	str	r3, [r5, #0]
 8008d12:	f7f9 ff1c 	bl	8002b4e <_kill>
 8008d16:	1c43      	adds	r3, r0, #1
 8008d18:	d102      	bne.n	8008d20 <_kill_r+0x1c>
 8008d1a:	682b      	ldr	r3, [r5, #0]
 8008d1c:	b103      	cbz	r3, 8008d20 <_kill_r+0x1c>
 8008d1e:	6023      	str	r3, [r4, #0]
 8008d20:	bd38      	pop	{r3, r4, r5, pc}
 8008d22:	bf00      	nop
 8008d24:	20000984 	.word	0x20000984

08008d28 <_getpid_r>:
 8008d28:	f7f9 bf09 	b.w	8002b3e <_getpid>

08008d2c <__swhatbuf_r>:
 8008d2c:	b570      	push	{r4, r5, r6, lr}
 8008d2e:	460c      	mov	r4, r1
 8008d30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d34:	2900      	cmp	r1, #0
 8008d36:	b096      	sub	sp, #88	@ 0x58
 8008d38:	4615      	mov	r5, r2
 8008d3a:	461e      	mov	r6, r3
 8008d3c:	da0d      	bge.n	8008d5a <__swhatbuf_r+0x2e>
 8008d3e:	89a3      	ldrh	r3, [r4, #12]
 8008d40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008d44:	f04f 0100 	mov.w	r1, #0
 8008d48:	bf14      	ite	ne
 8008d4a:	2340      	movne	r3, #64	@ 0x40
 8008d4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008d50:	2000      	movs	r0, #0
 8008d52:	6031      	str	r1, [r6, #0]
 8008d54:	602b      	str	r3, [r5, #0]
 8008d56:	b016      	add	sp, #88	@ 0x58
 8008d58:	bd70      	pop	{r4, r5, r6, pc}
 8008d5a:	466a      	mov	r2, sp
 8008d5c:	f000 f848 	bl	8008df0 <_fstat_r>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	dbec      	blt.n	8008d3e <__swhatbuf_r+0x12>
 8008d64:	9901      	ldr	r1, [sp, #4]
 8008d66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008d6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008d6e:	4259      	negs	r1, r3
 8008d70:	4159      	adcs	r1, r3
 8008d72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008d76:	e7eb      	b.n	8008d50 <__swhatbuf_r+0x24>

08008d78 <__smakebuf_r>:
 8008d78:	898b      	ldrh	r3, [r1, #12]
 8008d7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008d7c:	079d      	lsls	r5, r3, #30
 8008d7e:	4606      	mov	r6, r0
 8008d80:	460c      	mov	r4, r1
 8008d82:	d507      	bpl.n	8008d94 <__smakebuf_r+0x1c>
 8008d84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008d88:	6023      	str	r3, [r4, #0]
 8008d8a:	6123      	str	r3, [r4, #16]
 8008d8c:	2301      	movs	r3, #1
 8008d8e:	6163      	str	r3, [r4, #20]
 8008d90:	b003      	add	sp, #12
 8008d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008d94:	ab01      	add	r3, sp, #4
 8008d96:	466a      	mov	r2, sp
 8008d98:	f7ff ffc8 	bl	8008d2c <__swhatbuf_r>
 8008d9c:	9f00      	ldr	r7, [sp, #0]
 8008d9e:	4605      	mov	r5, r0
 8008da0:	4639      	mov	r1, r7
 8008da2:	4630      	mov	r0, r6
 8008da4:	f7fe fecc 	bl	8007b40 <_malloc_r>
 8008da8:	b948      	cbnz	r0, 8008dbe <__smakebuf_r+0x46>
 8008daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dae:	059a      	lsls	r2, r3, #22
 8008db0:	d4ee      	bmi.n	8008d90 <__smakebuf_r+0x18>
 8008db2:	f023 0303 	bic.w	r3, r3, #3
 8008db6:	f043 0302 	orr.w	r3, r3, #2
 8008dba:	81a3      	strh	r3, [r4, #12]
 8008dbc:	e7e2      	b.n	8008d84 <__smakebuf_r+0xc>
 8008dbe:	89a3      	ldrh	r3, [r4, #12]
 8008dc0:	6020      	str	r0, [r4, #0]
 8008dc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008dc6:	81a3      	strh	r3, [r4, #12]
 8008dc8:	9b01      	ldr	r3, [sp, #4]
 8008dca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008dce:	b15b      	cbz	r3, 8008de8 <__smakebuf_r+0x70>
 8008dd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008dd4:	4630      	mov	r0, r6
 8008dd6:	f000 f81d 	bl	8008e14 <_isatty_r>
 8008dda:	b128      	cbz	r0, 8008de8 <__smakebuf_r+0x70>
 8008ddc:	89a3      	ldrh	r3, [r4, #12]
 8008dde:	f023 0303 	bic.w	r3, r3, #3
 8008de2:	f043 0301 	orr.w	r3, r3, #1
 8008de6:	81a3      	strh	r3, [r4, #12]
 8008de8:	89a3      	ldrh	r3, [r4, #12]
 8008dea:	431d      	orrs	r5, r3
 8008dec:	81a5      	strh	r5, [r4, #12]
 8008dee:	e7cf      	b.n	8008d90 <__smakebuf_r+0x18>

08008df0 <_fstat_r>:
 8008df0:	b538      	push	{r3, r4, r5, lr}
 8008df2:	4d07      	ldr	r5, [pc, #28]	@ (8008e10 <_fstat_r+0x20>)
 8008df4:	2300      	movs	r3, #0
 8008df6:	4604      	mov	r4, r0
 8008df8:	4608      	mov	r0, r1
 8008dfa:	4611      	mov	r1, r2
 8008dfc:	602b      	str	r3, [r5, #0]
 8008dfe:	f7f9 ff06 	bl	8002c0e <_fstat>
 8008e02:	1c43      	adds	r3, r0, #1
 8008e04:	d102      	bne.n	8008e0c <_fstat_r+0x1c>
 8008e06:	682b      	ldr	r3, [r5, #0]
 8008e08:	b103      	cbz	r3, 8008e0c <_fstat_r+0x1c>
 8008e0a:	6023      	str	r3, [r4, #0]
 8008e0c:	bd38      	pop	{r3, r4, r5, pc}
 8008e0e:	bf00      	nop
 8008e10:	20000984 	.word	0x20000984

08008e14 <_isatty_r>:
 8008e14:	b538      	push	{r3, r4, r5, lr}
 8008e16:	4d06      	ldr	r5, [pc, #24]	@ (8008e30 <_isatty_r+0x1c>)
 8008e18:	2300      	movs	r3, #0
 8008e1a:	4604      	mov	r4, r0
 8008e1c:	4608      	mov	r0, r1
 8008e1e:	602b      	str	r3, [r5, #0]
 8008e20:	f7f9 ff05 	bl	8002c2e <_isatty>
 8008e24:	1c43      	adds	r3, r0, #1
 8008e26:	d102      	bne.n	8008e2e <_isatty_r+0x1a>
 8008e28:	682b      	ldr	r3, [r5, #0]
 8008e2a:	b103      	cbz	r3, 8008e2e <_isatty_r+0x1a>
 8008e2c:	6023      	str	r3, [r4, #0]
 8008e2e:	bd38      	pop	{r3, r4, r5, pc}
 8008e30:	20000984 	.word	0x20000984

08008e34 <pow>:
 8008e34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e36:	ed2d 8b02 	vpush	{d8}
 8008e3a:	eeb0 8a40 	vmov.f32	s16, s0
 8008e3e:	eef0 8a60 	vmov.f32	s17, s1
 8008e42:	ec55 4b11 	vmov	r4, r5, d1
 8008e46:	f000 f873 	bl	8008f30 <__ieee754_pow>
 8008e4a:	4622      	mov	r2, r4
 8008e4c:	462b      	mov	r3, r5
 8008e4e:	4620      	mov	r0, r4
 8008e50:	4629      	mov	r1, r5
 8008e52:	ec57 6b10 	vmov	r6, r7, d0
 8008e56:	f7f7 fe69 	bl	8000b2c <__aeabi_dcmpun>
 8008e5a:	2800      	cmp	r0, #0
 8008e5c:	d13b      	bne.n	8008ed6 <pow+0xa2>
 8008e5e:	ec51 0b18 	vmov	r0, r1, d8
 8008e62:	2200      	movs	r2, #0
 8008e64:	2300      	movs	r3, #0
 8008e66:	f7f7 fe2f 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e6a:	b1b8      	cbz	r0, 8008e9c <pow+0x68>
 8008e6c:	2200      	movs	r2, #0
 8008e6e:	2300      	movs	r3, #0
 8008e70:	4620      	mov	r0, r4
 8008e72:	4629      	mov	r1, r5
 8008e74:	f7f7 fe28 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e78:	2800      	cmp	r0, #0
 8008e7a:	d146      	bne.n	8008f0a <pow+0xd6>
 8008e7c:	ec45 4b10 	vmov	d0, r4, r5
 8008e80:	f000 f848 	bl	8008f14 <finite>
 8008e84:	b338      	cbz	r0, 8008ed6 <pow+0xa2>
 8008e86:	2200      	movs	r2, #0
 8008e88:	2300      	movs	r3, #0
 8008e8a:	4620      	mov	r0, r4
 8008e8c:	4629      	mov	r1, r5
 8008e8e:	f7f7 fe25 	bl	8000adc <__aeabi_dcmplt>
 8008e92:	b300      	cbz	r0, 8008ed6 <pow+0xa2>
 8008e94:	f7fd ff56 	bl	8006d44 <__errno>
 8008e98:	2322      	movs	r3, #34	@ 0x22
 8008e9a:	e01b      	b.n	8008ed4 <pow+0xa0>
 8008e9c:	ec47 6b10 	vmov	d0, r6, r7
 8008ea0:	f000 f838 	bl	8008f14 <finite>
 8008ea4:	b9e0      	cbnz	r0, 8008ee0 <pow+0xac>
 8008ea6:	eeb0 0a48 	vmov.f32	s0, s16
 8008eaa:	eef0 0a68 	vmov.f32	s1, s17
 8008eae:	f000 f831 	bl	8008f14 <finite>
 8008eb2:	b1a8      	cbz	r0, 8008ee0 <pow+0xac>
 8008eb4:	ec45 4b10 	vmov	d0, r4, r5
 8008eb8:	f000 f82c 	bl	8008f14 <finite>
 8008ebc:	b180      	cbz	r0, 8008ee0 <pow+0xac>
 8008ebe:	4632      	mov	r2, r6
 8008ec0:	463b      	mov	r3, r7
 8008ec2:	4630      	mov	r0, r6
 8008ec4:	4639      	mov	r1, r7
 8008ec6:	f7f7 fe31 	bl	8000b2c <__aeabi_dcmpun>
 8008eca:	2800      	cmp	r0, #0
 8008ecc:	d0e2      	beq.n	8008e94 <pow+0x60>
 8008ece:	f7fd ff39 	bl	8006d44 <__errno>
 8008ed2:	2321      	movs	r3, #33	@ 0x21
 8008ed4:	6003      	str	r3, [r0, #0]
 8008ed6:	ecbd 8b02 	vpop	{d8}
 8008eda:	ec47 6b10 	vmov	d0, r6, r7
 8008ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	4639      	mov	r1, r7
 8008ee8:	f7f7 fdee 	bl	8000ac8 <__aeabi_dcmpeq>
 8008eec:	2800      	cmp	r0, #0
 8008eee:	d0f2      	beq.n	8008ed6 <pow+0xa2>
 8008ef0:	eeb0 0a48 	vmov.f32	s0, s16
 8008ef4:	eef0 0a68 	vmov.f32	s1, s17
 8008ef8:	f000 f80c 	bl	8008f14 <finite>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	d0ea      	beq.n	8008ed6 <pow+0xa2>
 8008f00:	ec45 4b10 	vmov	d0, r4, r5
 8008f04:	f000 f806 	bl	8008f14 <finite>
 8008f08:	e7c3      	b.n	8008e92 <pow+0x5e>
 8008f0a:	4f01      	ldr	r7, [pc, #4]	@ (8008f10 <pow+0xdc>)
 8008f0c:	2600      	movs	r6, #0
 8008f0e:	e7e2      	b.n	8008ed6 <pow+0xa2>
 8008f10:	3ff00000 	.word	0x3ff00000

08008f14 <finite>:
 8008f14:	b082      	sub	sp, #8
 8008f16:	ed8d 0b00 	vstr	d0, [sp]
 8008f1a:	9801      	ldr	r0, [sp, #4]
 8008f1c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8008f20:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8008f24:	0fc0      	lsrs	r0, r0, #31
 8008f26:	b002      	add	sp, #8
 8008f28:	4770      	bx	lr
 8008f2a:	0000      	movs	r0, r0
 8008f2c:	0000      	movs	r0, r0
	...

08008f30 <__ieee754_pow>:
 8008f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f34:	b091      	sub	sp, #68	@ 0x44
 8008f36:	ed8d 1b00 	vstr	d1, [sp]
 8008f3a:	e9dd 1900 	ldrd	r1, r9, [sp]
 8008f3e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 8008f42:	ea5a 0001 	orrs.w	r0, sl, r1
 8008f46:	ec57 6b10 	vmov	r6, r7, d0
 8008f4a:	d113      	bne.n	8008f74 <__ieee754_pow+0x44>
 8008f4c:	19b3      	adds	r3, r6, r6
 8008f4e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 8008f52:	4152      	adcs	r2, r2
 8008f54:	4298      	cmp	r0, r3
 8008f56:	4b98      	ldr	r3, [pc, #608]	@ (80091b8 <__ieee754_pow+0x288>)
 8008f58:	4193      	sbcs	r3, r2
 8008f5a:	f080 84ea 	bcs.w	8009932 <__ieee754_pow+0xa02>
 8008f5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008f62:	4630      	mov	r0, r6
 8008f64:	4639      	mov	r1, r7
 8008f66:	f7f7 f991 	bl	800028c <__adddf3>
 8008f6a:	ec41 0b10 	vmov	d0, r0, r1
 8008f6e:	b011      	add	sp, #68	@ 0x44
 8008f70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f74:	4a91      	ldr	r2, [pc, #580]	@ (80091bc <__ieee754_pow+0x28c>)
 8008f76:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 8008f7a:	4590      	cmp	r8, r2
 8008f7c:	463d      	mov	r5, r7
 8008f7e:	4633      	mov	r3, r6
 8008f80:	d806      	bhi.n	8008f90 <__ieee754_pow+0x60>
 8008f82:	d101      	bne.n	8008f88 <__ieee754_pow+0x58>
 8008f84:	2e00      	cmp	r6, #0
 8008f86:	d1ea      	bne.n	8008f5e <__ieee754_pow+0x2e>
 8008f88:	4592      	cmp	sl, r2
 8008f8a:	d801      	bhi.n	8008f90 <__ieee754_pow+0x60>
 8008f8c:	d10e      	bne.n	8008fac <__ieee754_pow+0x7c>
 8008f8e:	b169      	cbz	r1, 8008fac <__ieee754_pow+0x7c>
 8008f90:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 8008f94:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 8008f98:	431d      	orrs	r5, r3
 8008f9a:	d1e0      	bne.n	8008f5e <__ieee754_pow+0x2e>
 8008f9c:	e9dd 3200 	ldrd	r3, r2, [sp]
 8008fa0:	18db      	adds	r3, r3, r3
 8008fa2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 8008fa6:	4152      	adcs	r2, r2
 8008fa8:	429d      	cmp	r5, r3
 8008faa:	e7d4      	b.n	8008f56 <__ieee754_pow+0x26>
 8008fac:	2d00      	cmp	r5, #0
 8008fae:	46c3      	mov	fp, r8
 8008fb0:	da3a      	bge.n	8009028 <__ieee754_pow+0xf8>
 8008fb2:	4a83      	ldr	r2, [pc, #524]	@ (80091c0 <__ieee754_pow+0x290>)
 8008fb4:	4592      	cmp	sl, r2
 8008fb6:	d84d      	bhi.n	8009054 <__ieee754_pow+0x124>
 8008fb8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 8008fbc:	4592      	cmp	sl, r2
 8008fbe:	f240 84c7 	bls.w	8009950 <__ieee754_pow+0xa20>
 8008fc2:	ea4f 522a 	mov.w	r2, sl, asr #20
 8008fc6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 8008fca:	2a14      	cmp	r2, #20
 8008fcc:	dd0f      	ble.n	8008fee <__ieee754_pow+0xbe>
 8008fce:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 8008fd2:	fa21 f402 	lsr.w	r4, r1, r2
 8008fd6:	fa04 f202 	lsl.w	r2, r4, r2
 8008fda:	428a      	cmp	r2, r1
 8008fdc:	f040 84b8 	bne.w	8009950 <__ieee754_pow+0xa20>
 8008fe0:	f004 0401 	and.w	r4, r4, #1
 8008fe4:	f1c4 0402 	rsb	r4, r4, #2
 8008fe8:	2900      	cmp	r1, #0
 8008fea:	d158      	bne.n	800909e <__ieee754_pow+0x16e>
 8008fec:	e00e      	b.n	800900c <__ieee754_pow+0xdc>
 8008fee:	2900      	cmp	r1, #0
 8008ff0:	d154      	bne.n	800909c <__ieee754_pow+0x16c>
 8008ff2:	f1c2 0214 	rsb	r2, r2, #20
 8008ff6:	fa4a f402 	asr.w	r4, sl, r2
 8008ffa:	fa04 f202 	lsl.w	r2, r4, r2
 8008ffe:	4552      	cmp	r2, sl
 8009000:	f040 84a3 	bne.w	800994a <__ieee754_pow+0xa1a>
 8009004:	f004 0401 	and.w	r4, r4, #1
 8009008:	f1c4 0402 	rsb	r4, r4, #2
 800900c:	4a6d      	ldr	r2, [pc, #436]	@ (80091c4 <__ieee754_pow+0x294>)
 800900e:	4592      	cmp	sl, r2
 8009010:	d12e      	bne.n	8009070 <__ieee754_pow+0x140>
 8009012:	f1b9 0f00 	cmp.w	r9, #0
 8009016:	f280 8494 	bge.w	8009942 <__ieee754_pow+0xa12>
 800901a:	496a      	ldr	r1, [pc, #424]	@ (80091c4 <__ieee754_pow+0x294>)
 800901c:	4632      	mov	r2, r6
 800901e:	463b      	mov	r3, r7
 8009020:	2000      	movs	r0, #0
 8009022:	f7f7 fc13 	bl	800084c <__aeabi_ddiv>
 8009026:	e7a0      	b.n	8008f6a <__ieee754_pow+0x3a>
 8009028:	2400      	movs	r4, #0
 800902a:	bbc1      	cbnz	r1, 800909e <__ieee754_pow+0x16e>
 800902c:	4a63      	ldr	r2, [pc, #396]	@ (80091bc <__ieee754_pow+0x28c>)
 800902e:	4592      	cmp	sl, r2
 8009030:	d1ec      	bne.n	800900c <__ieee754_pow+0xdc>
 8009032:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 8009036:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800903a:	431a      	orrs	r2, r3
 800903c:	f000 8479 	beq.w	8009932 <__ieee754_pow+0xa02>
 8009040:	4b61      	ldr	r3, [pc, #388]	@ (80091c8 <__ieee754_pow+0x298>)
 8009042:	4598      	cmp	r8, r3
 8009044:	d908      	bls.n	8009058 <__ieee754_pow+0x128>
 8009046:	f1b9 0f00 	cmp.w	r9, #0
 800904a:	f2c0 8476 	blt.w	800993a <__ieee754_pow+0xa0a>
 800904e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009052:	e78a      	b.n	8008f6a <__ieee754_pow+0x3a>
 8009054:	2402      	movs	r4, #2
 8009056:	e7e8      	b.n	800902a <__ieee754_pow+0xfa>
 8009058:	f1b9 0f00 	cmp.w	r9, #0
 800905c:	f04f 0000 	mov.w	r0, #0
 8009060:	f04f 0100 	mov.w	r1, #0
 8009064:	da81      	bge.n	8008f6a <__ieee754_pow+0x3a>
 8009066:	e9dd 0300 	ldrd	r0, r3, [sp]
 800906a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800906e:	e77c      	b.n	8008f6a <__ieee754_pow+0x3a>
 8009070:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 8009074:	d106      	bne.n	8009084 <__ieee754_pow+0x154>
 8009076:	4632      	mov	r2, r6
 8009078:	463b      	mov	r3, r7
 800907a:	4630      	mov	r0, r6
 800907c:	4639      	mov	r1, r7
 800907e:	f7f7 fabb 	bl	80005f8 <__aeabi_dmul>
 8009082:	e772      	b.n	8008f6a <__ieee754_pow+0x3a>
 8009084:	4a51      	ldr	r2, [pc, #324]	@ (80091cc <__ieee754_pow+0x29c>)
 8009086:	4591      	cmp	r9, r2
 8009088:	d109      	bne.n	800909e <__ieee754_pow+0x16e>
 800908a:	2d00      	cmp	r5, #0
 800908c:	db07      	blt.n	800909e <__ieee754_pow+0x16e>
 800908e:	ec47 6b10 	vmov	d0, r6, r7
 8009092:	b011      	add	sp, #68	@ 0x44
 8009094:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009098:	f000 bd52 	b.w	8009b40 <__ieee754_sqrt>
 800909c:	2400      	movs	r4, #0
 800909e:	ec47 6b10 	vmov	d0, r6, r7
 80090a2:	9302      	str	r3, [sp, #8]
 80090a4:	f000 fc88 	bl	80099b8 <fabs>
 80090a8:	9b02      	ldr	r3, [sp, #8]
 80090aa:	ec51 0b10 	vmov	r0, r1, d0
 80090ae:	bb53      	cbnz	r3, 8009106 <__ieee754_pow+0x1d6>
 80090b0:	4b44      	ldr	r3, [pc, #272]	@ (80091c4 <__ieee754_pow+0x294>)
 80090b2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 80090b6:	429a      	cmp	r2, r3
 80090b8:	d002      	beq.n	80090c0 <__ieee754_pow+0x190>
 80090ba:	f1b8 0f00 	cmp.w	r8, #0
 80090be:	d122      	bne.n	8009106 <__ieee754_pow+0x1d6>
 80090c0:	f1b9 0f00 	cmp.w	r9, #0
 80090c4:	da05      	bge.n	80090d2 <__ieee754_pow+0x1a2>
 80090c6:	4602      	mov	r2, r0
 80090c8:	460b      	mov	r3, r1
 80090ca:	2000      	movs	r0, #0
 80090cc:	493d      	ldr	r1, [pc, #244]	@ (80091c4 <__ieee754_pow+0x294>)
 80090ce:	f7f7 fbbd 	bl	800084c <__aeabi_ddiv>
 80090d2:	2d00      	cmp	r5, #0
 80090d4:	f6bf af49 	bge.w	8008f6a <__ieee754_pow+0x3a>
 80090d8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 80090dc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 80090e0:	ea58 0804 	orrs.w	r8, r8, r4
 80090e4:	d108      	bne.n	80090f8 <__ieee754_pow+0x1c8>
 80090e6:	4602      	mov	r2, r0
 80090e8:	460b      	mov	r3, r1
 80090ea:	4610      	mov	r0, r2
 80090ec:	4619      	mov	r1, r3
 80090ee:	f7f7 f8cb 	bl	8000288 <__aeabi_dsub>
 80090f2:	4602      	mov	r2, r0
 80090f4:	460b      	mov	r3, r1
 80090f6:	e794      	b.n	8009022 <__ieee754_pow+0xf2>
 80090f8:	2c01      	cmp	r4, #1
 80090fa:	f47f af36 	bne.w	8008f6a <__ieee754_pow+0x3a>
 80090fe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009102:	4619      	mov	r1, r3
 8009104:	e731      	b.n	8008f6a <__ieee754_pow+0x3a>
 8009106:	0feb      	lsrs	r3, r5, #31
 8009108:	3b01      	subs	r3, #1
 800910a:	ea53 0204 	orrs.w	r2, r3, r4
 800910e:	d102      	bne.n	8009116 <__ieee754_pow+0x1e6>
 8009110:	4632      	mov	r2, r6
 8009112:	463b      	mov	r3, r7
 8009114:	e7e9      	b.n	80090ea <__ieee754_pow+0x1ba>
 8009116:	3c01      	subs	r4, #1
 8009118:	431c      	orrs	r4, r3
 800911a:	d016      	beq.n	800914a <__ieee754_pow+0x21a>
 800911c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 80091a8 <__ieee754_pow+0x278>
 8009120:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 8009124:	ed8d 7b02 	vstr	d7, [sp, #8]
 8009128:	f240 8112 	bls.w	8009350 <__ieee754_pow+0x420>
 800912c:	4b28      	ldr	r3, [pc, #160]	@ (80091d0 <__ieee754_pow+0x2a0>)
 800912e:	459a      	cmp	sl, r3
 8009130:	4b25      	ldr	r3, [pc, #148]	@ (80091c8 <__ieee754_pow+0x298>)
 8009132:	d916      	bls.n	8009162 <__ieee754_pow+0x232>
 8009134:	4598      	cmp	r8, r3
 8009136:	d80b      	bhi.n	8009150 <__ieee754_pow+0x220>
 8009138:	f1b9 0f00 	cmp.w	r9, #0
 800913c:	da0b      	bge.n	8009156 <__ieee754_pow+0x226>
 800913e:	2000      	movs	r0, #0
 8009140:	b011      	add	sp, #68	@ 0x44
 8009142:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009146:	f000 bcf3 	b.w	8009b30 <__math_oflow>
 800914a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 80091b0 <__ieee754_pow+0x280>
 800914e:	e7e7      	b.n	8009120 <__ieee754_pow+0x1f0>
 8009150:	f1b9 0f00 	cmp.w	r9, #0
 8009154:	dcf3      	bgt.n	800913e <__ieee754_pow+0x20e>
 8009156:	2000      	movs	r0, #0
 8009158:	b011      	add	sp, #68	@ 0x44
 800915a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800915e:	f000 bcdf 	b.w	8009b20 <__math_uflow>
 8009162:	4598      	cmp	r8, r3
 8009164:	d20c      	bcs.n	8009180 <__ieee754_pow+0x250>
 8009166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800916a:	2200      	movs	r2, #0
 800916c:	2300      	movs	r3, #0
 800916e:	f7f7 fcb5 	bl	8000adc <__aeabi_dcmplt>
 8009172:	3800      	subs	r0, #0
 8009174:	bf18      	it	ne
 8009176:	2001      	movne	r0, #1
 8009178:	f1b9 0f00 	cmp.w	r9, #0
 800917c:	daec      	bge.n	8009158 <__ieee754_pow+0x228>
 800917e:	e7df      	b.n	8009140 <__ieee754_pow+0x210>
 8009180:	4b10      	ldr	r3, [pc, #64]	@ (80091c4 <__ieee754_pow+0x294>)
 8009182:	4598      	cmp	r8, r3
 8009184:	f04f 0200 	mov.w	r2, #0
 8009188:	d924      	bls.n	80091d4 <__ieee754_pow+0x2a4>
 800918a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800918e:	2300      	movs	r3, #0
 8009190:	f7f7 fca4 	bl	8000adc <__aeabi_dcmplt>
 8009194:	3800      	subs	r0, #0
 8009196:	bf18      	it	ne
 8009198:	2001      	movne	r0, #1
 800919a:	f1b9 0f00 	cmp.w	r9, #0
 800919e:	dccf      	bgt.n	8009140 <__ieee754_pow+0x210>
 80091a0:	e7da      	b.n	8009158 <__ieee754_pow+0x228>
 80091a2:	bf00      	nop
 80091a4:	f3af 8000 	nop.w
 80091a8:	00000000 	.word	0x00000000
 80091ac:	3ff00000 	.word	0x3ff00000
 80091b0:	00000000 	.word	0x00000000
 80091b4:	bff00000 	.word	0xbff00000
 80091b8:	fff00000 	.word	0xfff00000
 80091bc:	7ff00000 	.word	0x7ff00000
 80091c0:	433fffff 	.word	0x433fffff
 80091c4:	3ff00000 	.word	0x3ff00000
 80091c8:	3fefffff 	.word	0x3fefffff
 80091cc:	3fe00000 	.word	0x3fe00000
 80091d0:	43f00000 	.word	0x43f00000
 80091d4:	4b5a      	ldr	r3, [pc, #360]	@ (8009340 <__ieee754_pow+0x410>)
 80091d6:	f7f7 f857 	bl	8000288 <__aeabi_dsub>
 80091da:	a351      	add	r3, pc, #324	@ (adr r3, 8009320 <__ieee754_pow+0x3f0>)
 80091dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091e0:	4604      	mov	r4, r0
 80091e2:	460d      	mov	r5, r1
 80091e4:	f7f7 fa08 	bl	80005f8 <__aeabi_dmul>
 80091e8:	a34f      	add	r3, pc, #316	@ (adr r3, 8009328 <__ieee754_pow+0x3f8>)
 80091ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ee:	4606      	mov	r6, r0
 80091f0:	460f      	mov	r7, r1
 80091f2:	4620      	mov	r0, r4
 80091f4:	4629      	mov	r1, r5
 80091f6:	f7f7 f9ff 	bl	80005f8 <__aeabi_dmul>
 80091fa:	4b52      	ldr	r3, [pc, #328]	@ (8009344 <__ieee754_pow+0x414>)
 80091fc:	4682      	mov	sl, r0
 80091fe:	468b      	mov	fp, r1
 8009200:	2200      	movs	r2, #0
 8009202:	4620      	mov	r0, r4
 8009204:	4629      	mov	r1, r5
 8009206:	f7f7 f9f7 	bl	80005f8 <__aeabi_dmul>
 800920a:	4602      	mov	r2, r0
 800920c:	460b      	mov	r3, r1
 800920e:	a148      	add	r1, pc, #288	@ (adr r1, 8009330 <__ieee754_pow+0x400>)
 8009210:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009214:	f7f7 f838 	bl	8000288 <__aeabi_dsub>
 8009218:	4622      	mov	r2, r4
 800921a:	462b      	mov	r3, r5
 800921c:	f7f7 f9ec 	bl	80005f8 <__aeabi_dmul>
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	2000      	movs	r0, #0
 8009226:	4948      	ldr	r1, [pc, #288]	@ (8009348 <__ieee754_pow+0x418>)
 8009228:	f7f7 f82e 	bl	8000288 <__aeabi_dsub>
 800922c:	4622      	mov	r2, r4
 800922e:	4680      	mov	r8, r0
 8009230:	4689      	mov	r9, r1
 8009232:	462b      	mov	r3, r5
 8009234:	4620      	mov	r0, r4
 8009236:	4629      	mov	r1, r5
 8009238:	f7f7 f9de 	bl	80005f8 <__aeabi_dmul>
 800923c:	4602      	mov	r2, r0
 800923e:	460b      	mov	r3, r1
 8009240:	4640      	mov	r0, r8
 8009242:	4649      	mov	r1, r9
 8009244:	f7f7 f9d8 	bl	80005f8 <__aeabi_dmul>
 8009248:	a33b      	add	r3, pc, #236	@ (adr r3, 8009338 <__ieee754_pow+0x408>)
 800924a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800924e:	f7f7 f9d3 	bl	80005f8 <__aeabi_dmul>
 8009252:	4602      	mov	r2, r0
 8009254:	460b      	mov	r3, r1
 8009256:	4650      	mov	r0, sl
 8009258:	4659      	mov	r1, fp
 800925a:	f7f7 f815 	bl	8000288 <__aeabi_dsub>
 800925e:	4602      	mov	r2, r0
 8009260:	460b      	mov	r3, r1
 8009262:	4680      	mov	r8, r0
 8009264:	4689      	mov	r9, r1
 8009266:	4630      	mov	r0, r6
 8009268:	4639      	mov	r1, r7
 800926a:	f7f7 f80f 	bl	800028c <__adddf3>
 800926e:	2400      	movs	r4, #0
 8009270:	4632      	mov	r2, r6
 8009272:	463b      	mov	r3, r7
 8009274:	4620      	mov	r0, r4
 8009276:	460d      	mov	r5, r1
 8009278:	f7f7 f806 	bl	8000288 <__aeabi_dsub>
 800927c:	4602      	mov	r2, r0
 800927e:	460b      	mov	r3, r1
 8009280:	4640      	mov	r0, r8
 8009282:	4649      	mov	r1, r9
 8009284:	f7f7 f800 	bl	8000288 <__aeabi_dsub>
 8009288:	e9dd 2300 	ldrd	r2, r3, [sp]
 800928c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009290:	2300      	movs	r3, #0
 8009292:	9304      	str	r3, [sp, #16]
 8009294:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8009298:	4606      	mov	r6, r0
 800929a:	460f      	mov	r7, r1
 800929c:	4652      	mov	r2, sl
 800929e:	465b      	mov	r3, fp
 80092a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80092a4:	f7f6 fff0 	bl	8000288 <__aeabi_dsub>
 80092a8:	4622      	mov	r2, r4
 80092aa:	462b      	mov	r3, r5
 80092ac:	f7f7 f9a4 	bl	80005f8 <__aeabi_dmul>
 80092b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80092b4:	4680      	mov	r8, r0
 80092b6:	4689      	mov	r9, r1
 80092b8:	4630      	mov	r0, r6
 80092ba:	4639      	mov	r1, r7
 80092bc:	f7f7 f99c 	bl	80005f8 <__aeabi_dmul>
 80092c0:	4602      	mov	r2, r0
 80092c2:	460b      	mov	r3, r1
 80092c4:	4640      	mov	r0, r8
 80092c6:	4649      	mov	r1, r9
 80092c8:	f7f6 ffe0 	bl	800028c <__adddf3>
 80092cc:	4652      	mov	r2, sl
 80092ce:	465b      	mov	r3, fp
 80092d0:	4606      	mov	r6, r0
 80092d2:	460f      	mov	r7, r1
 80092d4:	4620      	mov	r0, r4
 80092d6:	4629      	mov	r1, r5
 80092d8:	f7f7 f98e 	bl	80005f8 <__aeabi_dmul>
 80092dc:	460b      	mov	r3, r1
 80092de:	4602      	mov	r2, r0
 80092e0:	4680      	mov	r8, r0
 80092e2:	4689      	mov	r9, r1
 80092e4:	4630      	mov	r0, r6
 80092e6:	4639      	mov	r1, r7
 80092e8:	f7f6 ffd0 	bl	800028c <__adddf3>
 80092ec:	4b17      	ldr	r3, [pc, #92]	@ (800934c <__ieee754_pow+0x41c>)
 80092ee:	4299      	cmp	r1, r3
 80092f0:	4604      	mov	r4, r0
 80092f2:	460d      	mov	r5, r1
 80092f4:	468a      	mov	sl, r1
 80092f6:	468b      	mov	fp, r1
 80092f8:	f340 82ef 	ble.w	80098da <__ieee754_pow+0x9aa>
 80092fc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 8009300:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 8009304:	4303      	orrs	r3, r0
 8009306:	f000 81e8 	beq.w	80096da <__ieee754_pow+0x7aa>
 800930a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800930e:	2200      	movs	r2, #0
 8009310:	2300      	movs	r3, #0
 8009312:	f7f7 fbe3 	bl	8000adc <__aeabi_dcmplt>
 8009316:	3800      	subs	r0, #0
 8009318:	bf18      	it	ne
 800931a:	2001      	movne	r0, #1
 800931c:	e710      	b.n	8009140 <__ieee754_pow+0x210>
 800931e:	bf00      	nop
 8009320:	60000000 	.word	0x60000000
 8009324:	3ff71547 	.word	0x3ff71547
 8009328:	f85ddf44 	.word	0xf85ddf44
 800932c:	3e54ae0b 	.word	0x3e54ae0b
 8009330:	55555555 	.word	0x55555555
 8009334:	3fd55555 	.word	0x3fd55555
 8009338:	652b82fe 	.word	0x652b82fe
 800933c:	3ff71547 	.word	0x3ff71547
 8009340:	3ff00000 	.word	0x3ff00000
 8009344:	3fd00000 	.word	0x3fd00000
 8009348:	3fe00000 	.word	0x3fe00000
 800934c:	408fffff 	.word	0x408fffff
 8009350:	4bd5      	ldr	r3, [pc, #852]	@ (80096a8 <__ieee754_pow+0x778>)
 8009352:	402b      	ands	r3, r5
 8009354:	2200      	movs	r2, #0
 8009356:	b92b      	cbnz	r3, 8009364 <__ieee754_pow+0x434>
 8009358:	4bd4      	ldr	r3, [pc, #848]	@ (80096ac <__ieee754_pow+0x77c>)
 800935a:	f7f7 f94d 	bl	80005f8 <__aeabi_dmul>
 800935e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 8009362:	468b      	mov	fp, r1
 8009364:	ea4f 532b 	mov.w	r3, fp, asr #20
 8009368:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800936c:	4413      	add	r3, r2
 800936e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009370:	4bcf      	ldr	r3, [pc, #828]	@ (80096b0 <__ieee754_pow+0x780>)
 8009372:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 8009376:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800937a:	459b      	cmp	fp, r3
 800937c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009380:	dd08      	ble.n	8009394 <__ieee754_pow+0x464>
 8009382:	4bcc      	ldr	r3, [pc, #816]	@ (80096b4 <__ieee754_pow+0x784>)
 8009384:	459b      	cmp	fp, r3
 8009386:	f340 81a5 	ble.w	80096d4 <__ieee754_pow+0x7a4>
 800938a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800938c:	3301      	adds	r3, #1
 800938e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009390:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 8009394:	f04f 0a00 	mov.w	sl, #0
 8009398:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800939c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800939e:	4bc6      	ldr	r3, [pc, #792]	@ (80096b8 <__ieee754_pow+0x788>)
 80093a0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 80093a4:	ed93 7b00 	vldr	d7, [r3]
 80093a8:	4629      	mov	r1, r5
 80093aa:	ec53 2b17 	vmov	r2, r3, d7
 80093ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 80093b2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80093b6:	f7f6 ff67 	bl	8000288 <__aeabi_dsub>
 80093ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80093be:	4606      	mov	r6, r0
 80093c0:	460f      	mov	r7, r1
 80093c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80093c6:	f7f6 ff61 	bl	800028c <__adddf3>
 80093ca:	4602      	mov	r2, r0
 80093cc:	460b      	mov	r3, r1
 80093ce:	2000      	movs	r0, #0
 80093d0:	49ba      	ldr	r1, [pc, #744]	@ (80096bc <__ieee754_pow+0x78c>)
 80093d2:	f7f7 fa3b 	bl	800084c <__aeabi_ddiv>
 80093d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 80093da:	4602      	mov	r2, r0
 80093dc:	460b      	mov	r3, r1
 80093de:	4630      	mov	r0, r6
 80093e0:	4639      	mov	r1, r7
 80093e2:	f7f7 f909 	bl	80005f8 <__aeabi_dmul>
 80093e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80093ea:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 80093ee:	106d      	asrs	r5, r5, #1
 80093f0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 80093f4:	f04f 0b00 	mov.w	fp, #0
 80093f8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 80093fc:	4661      	mov	r1, ip
 80093fe:	2200      	movs	r2, #0
 8009400:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8009404:	4658      	mov	r0, fp
 8009406:	46e1      	mov	r9, ip
 8009408:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800940c:	4614      	mov	r4, r2
 800940e:	461d      	mov	r5, r3
 8009410:	f7f7 f8f2 	bl	80005f8 <__aeabi_dmul>
 8009414:	4602      	mov	r2, r0
 8009416:	460b      	mov	r3, r1
 8009418:	4630      	mov	r0, r6
 800941a:	4639      	mov	r1, r7
 800941c:	f7f6 ff34 	bl	8000288 <__aeabi_dsub>
 8009420:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009424:	4606      	mov	r6, r0
 8009426:	460f      	mov	r7, r1
 8009428:	4620      	mov	r0, r4
 800942a:	4629      	mov	r1, r5
 800942c:	f7f6 ff2c 	bl	8000288 <__aeabi_dsub>
 8009430:	4602      	mov	r2, r0
 8009432:	460b      	mov	r3, r1
 8009434:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009438:	f7f6 ff26 	bl	8000288 <__aeabi_dsub>
 800943c:	465a      	mov	r2, fp
 800943e:	464b      	mov	r3, r9
 8009440:	f7f7 f8da 	bl	80005f8 <__aeabi_dmul>
 8009444:	4602      	mov	r2, r0
 8009446:	460b      	mov	r3, r1
 8009448:	4630      	mov	r0, r6
 800944a:	4639      	mov	r1, r7
 800944c:	f7f6 ff1c 	bl	8000288 <__aeabi_dsub>
 8009450:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009454:	f7f7 f8d0 	bl	80005f8 <__aeabi_dmul>
 8009458:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800945c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009460:	4610      	mov	r0, r2
 8009462:	4619      	mov	r1, r3
 8009464:	f7f7 f8c8 	bl	80005f8 <__aeabi_dmul>
 8009468:	a37d      	add	r3, pc, #500	@ (adr r3, 8009660 <__ieee754_pow+0x730>)
 800946a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800946e:	4604      	mov	r4, r0
 8009470:	460d      	mov	r5, r1
 8009472:	f7f7 f8c1 	bl	80005f8 <__aeabi_dmul>
 8009476:	a37c      	add	r3, pc, #496	@ (adr r3, 8009668 <__ieee754_pow+0x738>)
 8009478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800947c:	f7f6 ff06 	bl	800028c <__adddf3>
 8009480:	4622      	mov	r2, r4
 8009482:	462b      	mov	r3, r5
 8009484:	f7f7 f8b8 	bl	80005f8 <__aeabi_dmul>
 8009488:	a379      	add	r3, pc, #484	@ (adr r3, 8009670 <__ieee754_pow+0x740>)
 800948a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800948e:	f7f6 fefd 	bl	800028c <__adddf3>
 8009492:	4622      	mov	r2, r4
 8009494:	462b      	mov	r3, r5
 8009496:	f7f7 f8af 	bl	80005f8 <__aeabi_dmul>
 800949a:	a377      	add	r3, pc, #476	@ (adr r3, 8009678 <__ieee754_pow+0x748>)
 800949c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094a0:	f7f6 fef4 	bl	800028c <__adddf3>
 80094a4:	4622      	mov	r2, r4
 80094a6:	462b      	mov	r3, r5
 80094a8:	f7f7 f8a6 	bl	80005f8 <__aeabi_dmul>
 80094ac:	a374      	add	r3, pc, #464	@ (adr r3, 8009680 <__ieee754_pow+0x750>)
 80094ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094b2:	f7f6 feeb 	bl	800028c <__adddf3>
 80094b6:	4622      	mov	r2, r4
 80094b8:	462b      	mov	r3, r5
 80094ba:	f7f7 f89d 	bl	80005f8 <__aeabi_dmul>
 80094be:	a372      	add	r3, pc, #456	@ (adr r3, 8009688 <__ieee754_pow+0x758>)
 80094c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094c4:	f7f6 fee2 	bl	800028c <__adddf3>
 80094c8:	4622      	mov	r2, r4
 80094ca:	4606      	mov	r6, r0
 80094cc:	460f      	mov	r7, r1
 80094ce:	462b      	mov	r3, r5
 80094d0:	4620      	mov	r0, r4
 80094d2:	4629      	mov	r1, r5
 80094d4:	f7f7 f890 	bl	80005f8 <__aeabi_dmul>
 80094d8:	4602      	mov	r2, r0
 80094da:	460b      	mov	r3, r1
 80094dc:	4630      	mov	r0, r6
 80094de:	4639      	mov	r1, r7
 80094e0:	f7f7 f88a 	bl	80005f8 <__aeabi_dmul>
 80094e4:	465a      	mov	r2, fp
 80094e6:	4604      	mov	r4, r0
 80094e8:	460d      	mov	r5, r1
 80094ea:	464b      	mov	r3, r9
 80094ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80094f0:	f7f6 fecc 	bl	800028c <__adddf3>
 80094f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80094f8:	f7f7 f87e 	bl	80005f8 <__aeabi_dmul>
 80094fc:	4622      	mov	r2, r4
 80094fe:	462b      	mov	r3, r5
 8009500:	f7f6 fec4 	bl	800028c <__adddf3>
 8009504:	465a      	mov	r2, fp
 8009506:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800950a:	464b      	mov	r3, r9
 800950c:	4658      	mov	r0, fp
 800950e:	4649      	mov	r1, r9
 8009510:	f7f7 f872 	bl	80005f8 <__aeabi_dmul>
 8009514:	4b6a      	ldr	r3, [pc, #424]	@ (80096c0 <__ieee754_pow+0x790>)
 8009516:	2200      	movs	r2, #0
 8009518:	4606      	mov	r6, r0
 800951a:	460f      	mov	r7, r1
 800951c:	f7f6 feb6 	bl	800028c <__adddf3>
 8009520:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009524:	f7f6 feb2 	bl	800028c <__adddf3>
 8009528:	46d8      	mov	r8, fp
 800952a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800952e:	460d      	mov	r5, r1
 8009530:	465a      	mov	r2, fp
 8009532:	460b      	mov	r3, r1
 8009534:	4640      	mov	r0, r8
 8009536:	4649      	mov	r1, r9
 8009538:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800953c:	f7f7 f85c 	bl	80005f8 <__aeabi_dmul>
 8009540:	465c      	mov	r4, fp
 8009542:	4680      	mov	r8, r0
 8009544:	4689      	mov	r9, r1
 8009546:	4b5e      	ldr	r3, [pc, #376]	@ (80096c0 <__ieee754_pow+0x790>)
 8009548:	2200      	movs	r2, #0
 800954a:	4620      	mov	r0, r4
 800954c:	4629      	mov	r1, r5
 800954e:	f7f6 fe9b 	bl	8000288 <__aeabi_dsub>
 8009552:	4632      	mov	r2, r6
 8009554:	463b      	mov	r3, r7
 8009556:	f7f6 fe97 	bl	8000288 <__aeabi_dsub>
 800955a:	4602      	mov	r2, r0
 800955c:	460b      	mov	r3, r1
 800955e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009562:	f7f6 fe91 	bl	8000288 <__aeabi_dsub>
 8009566:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800956a:	f7f7 f845 	bl	80005f8 <__aeabi_dmul>
 800956e:	4622      	mov	r2, r4
 8009570:	4606      	mov	r6, r0
 8009572:	460f      	mov	r7, r1
 8009574:	462b      	mov	r3, r5
 8009576:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800957a:	f7f7 f83d 	bl	80005f8 <__aeabi_dmul>
 800957e:	4602      	mov	r2, r0
 8009580:	460b      	mov	r3, r1
 8009582:	4630      	mov	r0, r6
 8009584:	4639      	mov	r1, r7
 8009586:	f7f6 fe81 	bl	800028c <__adddf3>
 800958a:	4606      	mov	r6, r0
 800958c:	460f      	mov	r7, r1
 800958e:	4602      	mov	r2, r0
 8009590:	460b      	mov	r3, r1
 8009592:	4640      	mov	r0, r8
 8009594:	4649      	mov	r1, r9
 8009596:	f7f6 fe79 	bl	800028c <__adddf3>
 800959a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800959e:	a33c      	add	r3, pc, #240	@ (adr r3, 8009690 <__ieee754_pow+0x760>)
 80095a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095a4:	4658      	mov	r0, fp
 80095a6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 80095aa:	460d      	mov	r5, r1
 80095ac:	f7f7 f824 	bl	80005f8 <__aeabi_dmul>
 80095b0:	465c      	mov	r4, fp
 80095b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095b6:	4642      	mov	r2, r8
 80095b8:	464b      	mov	r3, r9
 80095ba:	4620      	mov	r0, r4
 80095bc:	4629      	mov	r1, r5
 80095be:	f7f6 fe63 	bl	8000288 <__aeabi_dsub>
 80095c2:	4602      	mov	r2, r0
 80095c4:	460b      	mov	r3, r1
 80095c6:	4630      	mov	r0, r6
 80095c8:	4639      	mov	r1, r7
 80095ca:	f7f6 fe5d 	bl	8000288 <__aeabi_dsub>
 80095ce:	a332      	add	r3, pc, #200	@ (adr r3, 8009698 <__ieee754_pow+0x768>)
 80095d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095d4:	f7f7 f810 	bl	80005f8 <__aeabi_dmul>
 80095d8:	a331      	add	r3, pc, #196	@ (adr r3, 80096a0 <__ieee754_pow+0x770>)
 80095da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095de:	4606      	mov	r6, r0
 80095e0:	460f      	mov	r7, r1
 80095e2:	4620      	mov	r0, r4
 80095e4:	4629      	mov	r1, r5
 80095e6:	f7f7 f807 	bl	80005f8 <__aeabi_dmul>
 80095ea:	4602      	mov	r2, r0
 80095ec:	460b      	mov	r3, r1
 80095ee:	4630      	mov	r0, r6
 80095f0:	4639      	mov	r1, r7
 80095f2:	f7f6 fe4b 	bl	800028c <__adddf3>
 80095f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80095f8:	4b32      	ldr	r3, [pc, #200]	@ (80096c4 <__ieee754_pow+0x794>)
 80095fa:	4413      	add	r3, r2
 80095fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009600:	f7f6 fe44 	bl	800028c <__adddf3>
 8009604:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009608:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800960a:	f7f6 ff8b 	bl	8000524 <__aeabi_i2d>
 800960e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009610:	4b2d      	ldr	r3, [pc, #180]	@ (80096c8 <__ieee754_pow+0x798>)
 8009612:	4413      	add	r3, r2
 8009614:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009618:	4606      	mov	r6, r0
 800961a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800961e:	460f      	mov	r7, r1
 8009620:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009624:	f7f6 fe32 	bl	800028c <__adddf3>
 8009628:	4642      	mov	r2, r8
 800962a:	464b      	mov	r3, r9
 800962c:	f7f6 fe2e 	bl	800028c <__adddf3>
 8009630:	4632      	mov	r2, r6
 8009632:	463b      	mov	r3, r7
 8009634:	f7f6 fe2a 	bl	800028c <__adddf3>
 8009638:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800963c:	4632      	mov	r2, r6
 800963e:	463b      	mov	r3, r7
 8009640:	4658      	mov	r0, fp
 8009642:	460d      	mov	r5, r1
 8009644:	f7f6 fe20 	bl	8000288 <__aeabi_dsub>
 8009648:	4642      	mov	r2, r8
 800964a:	464b      	mov	r3, r9
 800964c:	f7f6 fe1c 	bl	8000288 <__aeabi_dsub>
 8009650:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009654:	f7f6 fe18 	bl	8000288 <__aeabi_dsub>
 8009658:	465c      	mov	r4, fp
 800965a:	4602      	mov	r2, r0
 800965c:	e036      	b.n	80096cc <__ieee754_pow+0x79c>
 800965e:	bf00      	nop
 8009660:	4a454eef 	.word	0x4a454eef
 8009664:	3fca7e28 	.word	0x3fca7e28
 8009668:	93c9db65 	.word	0x93c9db65
 800966c:	3fcd864a 	.word	0x3fcd864a
 8009670:	a91d4101 	.word	0xa91d4101
 8009674:	3fd17460 	.word	0x3fd17460
 8009678:	518f264d 	.word	0x518f264d
 800967c:	3fd55555 	.word	0x3fd55555
 8009680:	db6fabff 	.word	0xdb6fabff
 8009684:	3fdb6db6 	.word	0x3fdb6db6
 8009688:	33333303 	.word	0x33333303
 800968c:	3fe33333 	.word	0x3fe33333
 8009690:	e0000000 	.word	0xe0000000
 8009694:	3feec709 	.word	0x3feec709
 8009698:	dc3a03fd 	.word	0xdc3a03fd
 800969c:	3feec709 	.word	0x3feec709
 80096a0:	145b01f5 	.word	0x145b01f5
 80096a4:	be3e2fe0 	.word	0xbe3e2fe0
 80096a8:	7ff00000 	.word	0x7ff00000
 80096ac:	43400000 	.word	0x43400000
 80096b0:	0003988e 	.word	0x0003988e
 80096b4:	000bb679 	.word	0x000bb679
 80096b8:	0800a8b8 	.word	0x0800a8b8
 80096bc:	3ff00000 	.word	0x3ff00000
 80096c0:	40080000 	.word	0x40080000
 80096c4:	0800a898 	.word	0x0800a898
 80096c8:	0800a8a8 	.word	0x0800a8a8
 80096cc:	460b      	mov	r3, r1
 80096ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80096d2:	e5d7      	b.n	8009284 <__ieee754_pow+0x354>
 80096d4:	f04f 0a01 	mov.w	sl, #1
 80096d8:	e65e      	b.n	8009398 <__ieee754_pow+0x468>
 80096da:	a3b4      	add	r3, pc, #720	@ (adr r3, 80099ac <__ieee754_pow+0xa7c>)
 80096dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096e0:	4630      	mov	r0, r6
 80096e2:	4639      	mov	r1, r7
 80096e4:	f7f6 fdd2 	bl	800028c <__adddf3>
 80096e8:	4642      	mov	r2, r8
 80096ea:	e9cd 0100 	strd	r0, r1, [sp]
 80096ee:	464b      	mov	r3, r9
 80096f0:	4620      	mov	r0, r4
 80096f2:	4629      	mov	r1, r5
 80096f4:	f7f6 fdc8 	bl	8000288 <__aeabi_dsub>
 80096f8:	4602      	mov	r2, r0
 80096fa:	460b      	mov	r3, r1
 80096fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009700:	f7f7 fa0a 	bl	8000b18 <__aeabi_dcmpgt>
 8009704:	2800      	cmp	r0, #0
 8009706:	f47f ae00 	bne.w	800930a <__ieee754_pow+0x3da>
 800970a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800970e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8009712:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 8009716:	fa43 fa0a 	asr.w	sl, r3, sl
 800971a:	44da      	add	sl, fp
 800971c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8009720:	489d      	ldr	r0, [pc, #628]	@ (8009998 <__ieee754_pow+0xa68>)
 8009722:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 8009726:	4108      	asrs	r0, r1
 8009728:	ea00 030a 	and.w	r3, r0, sl
 800972c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8009730:	f1c1 0114 	rsb	r1, r1, #20
 8009734:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 8009738:	fa4a fa01 	asr.w	sl, sl, r1
 800973c:	f1bb 0f00 	cmp.w	fp, #0
 8009740:	4640      	mov	r0, r8
 8009742:	4649      	mov	r1, r9
 8009744:	f04f 0200 	mov.w	r2, #0
 8009748:	bfb8      	it	lt
 800974a:	f1ca 0a00 	rsblt	sl, sl, #0
 800974e:	f7f6 fd9b 	bl	8000288 <__aeabi_dsub>
 8009752:	4680      	mov	r8, r0
 8009754:	4689      	mov	r9, r1
 8009756:	4632      	mov	r2, r6
 8009758:	463b      	mov	r3, r7
 800975a:	4640      	mov	r0, r8
 800975c:	4649      	mov	r1, r9
 800975e:	f7f6 fd95 	bl	800028c <__adddf3>
 8009762:	2400      	movs	r4, #0
 8009764:	a37c      	add	r3, pc, #496	@ (adr r3, 8009958 <__ieee754_pow+0xa28>)
 8009766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800976a:	4620      	mov	r0, r4
 800976c:	460d      	mov	r5, r1
 800976e:	f7f6 ff43 	bl	80005f8 <__aeabi_dmul>
 8009772:	4642      	mov	r2, r8
 8009774:	e9cd 0100 	strd	r0, r1, [sp]
 8009778:	464b      	mov	r3, r9
 800977a:	4620      	mov	r0, r4
 800977c:	4629      	mov	r1, r5
 800977e:	f7f6 fd83 	bl	8000288 <__aeabi_dsub>
 8009782:	4602      	mov	r2, r0
 8009784:	460b      	mov	r3, r1
 8009786:	4630      	mov	r0, r6
 8009788:	4639      	mov	r1, r7
 800978a:	f7f6 fd7d 	bl	8000288 <__aeabi_dsub>
 800978e:	a374      	add	r3, pc, #464	@ (adr r3, 8009960 <__ieee754_pow+0xa30>)
 8009790:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009794:	f7f6 ff30 	bl	80005f8 <__aeabi_dmul>
 8009798:	a373      	add	r3, pc, #460	@ (adr r3, 8009968 <__ieee754_pow+0xa38>)
 800979a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800979e:	4680      	mov	r8, r0
 80097a0:	4689      	mov	r9, r1
 80097a2:	4620      	mov	r0, r4
 80097a4:	4629      	mov	r1, r5
 80097a6:	f7f6 ff27 	bl	80005f8 <__aeabi_dmul>
 80097aa:	4602      	mov	r2, r0
 80097ac:	460b      	mov	r3, r1
 80097ae:	4640      	mov	r0, r8
 80097b0:	4649      	mov	r1, r9
 80097b2:	f7f6 fd6b 	bl	800028c <__adddf3>
 80097b6:	4604      	mov	r4, r0
 80097b8:	460d      	mov	r5, r1
 80097ba:	4602      	mov	r2, r0
 80097bc:	460b      	mov	r3, r1
 80097be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80097c2:	f7f6 fd63 	bl	800028c <__adddf3>
 80097c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80097ca:	4680      	mov	r8, r0
 80097cc:	4689      	mov	r9, r1
 80097ce:	f7f6 fd5b 	bl	8000288 <__aeabi_dsub>
 80097d2:	4602      	mov	r2, r0
 80097d4:	460b      	mov	r3, r1
 80097d6:	4620      	mov	r0, r4
 80097d8:	4629      	mov	r1, r5
 80097da:	f7f6 fd55 	bl	8000288 <__aeabi_dsub>
 80097de:	4642      	mov	r2, r8
 80097e0:	4606      	mov	r6, r0
 80097e2:	460f      	mov	r7, r1
 80097e4:	464b      	mov	r3, r9
 80097e6:	4640      	mov	r0, r8
 80097e8:	4649      	mov	r1, r9
 80097ea:	f7f6 ff05 	bl	80005f8 <__aeabi_dmul>
 80097ee:	a360      	add	r3, pc, #384	@ (adr r3, 8009970 <__ieee754_pow+0xa40>)
 80097f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097f4:	4604      	mov	r4, r0
 80097f6:	460d      	mov	r5, r1
 80097f8:	f7f6 fefe 	bl	80005f8 <__aeabi_dmul>
 80097fc:	a35e      	add	r3, pc, #376	@ (adr r3, 8009978 <__ieee754_pow+0xa48>)
 80097fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009802:	f7f6 fd41 	bl	8000288 <__aeabi_dsub>
 8009806:	4622      	mov	r2, r4
 8009808:	462b      	mov	r3, r5
 800980a:	f7f6 fef5 	bl	80005f8 <__aeabi_dmul>
 800980e:	a35c      	add	r3, pc, #368	@ (adr r3, 8009980 <__ieee754_pow+0xa50>)
 8009810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009814:	f7f6 fd3a 	bl	800028c <__adddf3>
 8009818:	4622      	mov	r2, r4
 800981a:	462b      	mov	r3, r5
 800981c:	f7f6 feec 	bl	80005f8 <__aeabi_dmul>
 8009820:	a359      	add	r3, pc, #356	@ (adr r3, 8009988 <__ieee754_pow+0xa58>)
 8009822:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009826:	f7f6 fd2f 	bl	8000288 <__aeabi_dsub>
 800982a:	4622      	mov	r2, r4
 800982c:	462b      	mov	r3, r5
 800982e:	f7f6 fee3 	bl	80005f8 <__aeabi_dmul>
 8009832:	a357      	add	r3, pc, #348	@ (adr r3, 8009990 <__ieee754_pow+0xa60>)
 8009834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009838:	f7f6 fd28 	bl	800028c <__adddf3>
 800983c:	4622      	mov	r2, r4
 800983e:	462b      	mov	r3, r5
 8009840:	f7f6 feda 	bl	80005f8 <__aeabi_dmul>
 8009844:	4602      	mov	r2, r0
 8009846:	460b      	mov	r3, r1
 8009848:	4640      	mov	r0, r8
 800984a:	4649      	mov	r1, r9
 800984c:	f7f6 fd1c 	bl	8000288 <__aeabi_dsub>
 8009850:	4604      	mov	r4, r0
 8009852:	460d      	mov	r5, r1
 8009854:	4602      	mov	r2, r0
 8009856:	460b      	mov	r3, r1
 8009858:	4640      	mov	r0, r8
 800985a:	4649      	mov	r1, r9
 800985c:	f7f6 fecc 	bl	80005f8 <__aeabi_dmul>
 8009860:	2200      	movs	r2, #0
 8009862:	e9cd 0100 	strd	r0, r1, [sp]
 8009866:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800986a:	4620      	mov	r0, r4
 800986c:	4629      	mov	r1, r5
 800986e:	f7f6 fd0b 	bl	8000288 <__aeabi_dsub>
 8009872:	4602      	mov	r2, r0
 8009874:	460b      	mov	r3, r1
 8009876:	e9dd 0100 	ldrd	r0, r1, [sp]
 800987a:	f7f6 ffe7 	bl	800084c <__aeabi_ddiv>
 800987e:	4632      	mov	r2, r6
 8009880:	4604      	mov	r4, r0
 8009882:	460d      	mov	r5, r1
 8009884:	463b      	mov	r3, r7
 8009886:	4640      	mov	r0, r8
 8009888:	4649      	mov	r1, r9
 800988a:	f7f6 feb5 	bl	80005f8 <__aeabi_dmul>
 800988e:	4632      	mov	r2, r6
 8009890:	463b      	mov	r3, r7
 8009892:	f7f6 fcfb 	bl	800028c <__adddf3>
 8009896:	4602      	mov	r2, r0
 8009898:	460b      	mov	r3, r1
 800989a:	4620      	mov	r0, r4
 800989c:	4629      	mov	r1, r5
 800989e:	f7f6 fcf3 	bl	8000288 <__aeabi_dsub>
 80098a2:	4642      	mov	r2, r8
 80098a4:	464b      	mov	r3, r9
 80098a6:	f7f6 fcef 	bl	8000288 <__aeabi_dsub>
 80098aa:	460b      	mov	r3, r1
 80098ac:	4602      	mov	r2, r0
 80098ae:	493b      	ldr	r1, [pc, #236]	@ (800999c <__ieee754_pow+0xa6c>)
 80098b0:	2000      	movs	r0, #0
 80098b2:	f7f6 fce9 	bl	8000288 <__aeabi_dsub>
 80098b6:	ec41 0b10 	vmov	d0, r0, r1
 80098ba:	ee10 3a90 	vmov	r3, s1
 80098be:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80098c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80098c6:	da30      	bge.n	800992a <__ieee754_pow+0x9fa>
 80098c8:	4650      	mov	r0, sl
 80098ca:	f000 f87d 	bl	80099c8 <scalbn>
 80098ce:	ec51 0b10 	vmov	r0, r1, d0
 80098d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098d6:	f7ff bbd2 	b.w	800907e <__ieee754_pow+0x14e>
 80098da:	4c31      	ldr	r4, [pc, #196]	@ (80099a0 <__ieee754_pow+0xa70>)
 80098dc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80098e0:	42a3      	cmp	r3, r4
 80098e2:	d91a      	bls.n	800991a <__ieee754_pow+0x9ea>
 80098e4:	4b2f      	ldr	r3, [pc, #188]	@ (80099a4 <__ieee754_pow+0xa74>)
 80098e6:	440b      	add	r3, r1
 80098e8:	4303      	orrs	r3, r0
 80098ea:	d009      	beq.n	8009900 <__ieee754_pow+0x9d0>
 80098ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098f0:	2200      	movs	r2, #0
 80098f2:	2300      	movs	r3, #0
 80098f4:	f7f7 f8f2 	bl	8000adc <__aeabi_dcmplt>
 80098f8:	3800      	subs	r0, #0
 80098fa:	bf18      	it	ne
 80098fc:	2001      	movne	r0, #1
 80098fe:	e42b      	b.n	8009158 <__ieee754_pow+0x228>
 8009900:	4642      	mov	r2, r8
 8009902:	464b      	mov	r3, r9
 8009904:	f7f6 fcc0 	bl	8000288 <__aeabi_dsub>
 8009908:	4632      	mov	r2, r6
 800990a:	463b      	mov	r3, r7
 800990c:	f7f7 f8fa 	bl	8000b04 <__aeabi_dcmpge>
 8009910:	2800      	cmp	r0, #0
 8009912:	d1eb      	bne.n	80098ec <__ieee754_pow+0x9bc>
 8009914:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 80099b4 <__ieee754_pow+0xa84>
 8009918:	e6f7      	b.n	800970a <__ieee754_pow+0x7da>
 800991a:	469a      	mov	sl, r3
 800991c:	4b22      	ldr	r3, [pc, #136]	@ (80099a8 <__ieee754_pow+0xa78>)
 800991e:	459a      	cmp	sl, r3
 8009920:	f63f aef3 	bhi.w	800970a <__ieee754_pow+0x7da>
 8009924:	f8dd a010 	ldr.w	sl, [sp, #16]
 8009928:	e715      	b.n	8009756 <__ieee754_pow+0x826>
 800992a:	ec51 0b10 	vmov	r0, r1, d0
 800992e:	4619      	mov	r1, r3
 8009930:	e7cf      	b.n	80098d2 <__ieee754_pow+0x9a2>
 8009932:	491a      	ldr	r1, [pc, #104]	@ (800999c <__ieee754_pow+0xa6c>)
 8009934:	2000      	movs	r0, #0
 8009936:	f7ff bb18 	b.w	8008f6a <__ieee754_pow+0x3a>
 800993a:	2000      	movs	r0, #0
 800993c:	2100      	movs	r1, #0
 800993e:	f7ff bb14 	b.w	8008f6a <__ieee754_pow+0x3a>
 8009942:	4630      	mov	r0, r6
 8009944:	4639      	mov	r1, r7
 8009946:	f7ff bb10 	b.w	8008f6a <__ieee754_pow+0x3a>
 800994a:	460c      	mov	r4, r1
 800994c:	f7ff bb5e 	b.w	800900c <__ieee754_pow+0xdc>
 8009950:	2400      	movs	r4, #0
 8009952:	f7ff bb49 	b.w	8008fe8 <__ieee754_pow+0xb8>
 8009956:	bf00      	nop
 8009958:	00000000 	.word	0x00000000
 800995c:	3fe62e43 	.word	0x3fe62e43
 8009960:	fefa39ef 	.word	0xfefa39ef
 8009964:	3fe62e42 	.word	0x3fe62e42
 8009968:	0ca86c39 	.word	0x0ca86c39
 800996c:	be205c61 	.word	0xbe205c61
 8009970:	72bea4d0 	.word	0x72bea4d0
 8009974:	3e663769 	.word	0x3e663769
 8009978:	c5d26bf1 	.word	0xc5d26bf1
 800997c:	3ebbbd41 	.word	0x3ebbbd41
 8009980:	af25de2c 	.word	0xaf25de2c
 8009984:	3f11566a 	.word	0x3f11566a
 8009988:	16bebd93 	.word	0x16bebd93
 800998c:	3f66c16c 	.word	0x3f66c16c
 8009990:	5555553e 	.word	0x5555553e
 8009994:	3fc55555 	.word	0x3fc55555
 8009998:	fff00000 	.word	0xfff00000
 800999c:	3ff00000 	.word	0x3ff00000
 80099a0:	4090cbff 	.word	0x4090cbff
 80099a4:	3f6f3400 	.word	0x3f6f3400
 80099a8:	3fe00000 	.word	0x3fe00000
 80099ac:	652b82fe 	.word	0x652b82fe
 80099b0:	3c971547 	.word	0x3c971547
 80099b4:	4090cc00 	.word	0x4090cc00

080099b8 <fabs>:
 80099b8:	ec51 0b10 	vmov	r0, r1, d0
 80099bc:	4602      	mov	r2, r0
 80099be:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80099c2:	ec43 2b10 	vmov	d0, r2, r3
 80099c6:	4770      	bx	lr

080099c8 <scalbn>:
 80099c8:	b570      	push	{r4, r5, r6, lr}
 80099ca:	ec55 4b10 	vmov	r4, r5, d0
 80099ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 80099d2:	4606      	mov	r6, r0
 80099d4:	462b      	mov	r3, r5
 80099d6:	b991      	cbnz	r1, 80099fe <scalbn+0x36>
 80099d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 80099dc:	4323      	orrs	r3, r4
 80099de:	d03d      	beq.n	8009a5c <scalbn+0x94>
 80099e0:	4b35      	ldr	r3, [pc, #212]	@ (8009ab8 <scalbn+0xf0>)
 80099e2:	4620      	mov	r0, r4
 80099e4:	4629      	mov	r1, r5
 80099e6:	2200      	movs	r2, #0
 80099e8:	f7f6 fe06 	bl	80005f8 <__aeabi_dmul>
 80099ec:	4b33      	ldr	r3, [pc, #204]	@ (8009abc <scalbn+0xf4>)
 80099ee:	429e      	cmp	r6, r3
 80099f0:	4604      	mov	r4, r0
 80099f2:	460d      	mov	r5, r1
 80099f4:	da0f      	bge.n	8009a16 <scalbn+0x4e>
 80099f6:	a328      	add	r3, pc, #160	@ (adr r3, 8009a98 <scalbn+0xd0>)
 80099f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fc:	e01e      	b.n	8009a3c <scalbn+0x74>
 80099fe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8009a02:	4291      	cmp	r1, r2
 8009a04:	d10b      	bne.n	8009a1e <scalbn+0x56>
 8009a06:	4622      	mov	r2, r4
 8009a08:	4620      	mov	r0, r4
 8009a0a:	4629      	mov	r1, r5
 8009a0c:	f7f6 fc3e 	bl	800028c <__adddf3>
 8009a10:	4604      	mov	r4, r0
 8009a12:	460d      	mov	r5, r1
 8009a14:	e022      	b.n	8009a5c <scalbn+0x94>
 8009a16:	460b      	mov	r3, r1
 8009a18:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8009a1c:	3936      	subs	r1, #54	@ 0x36
 8009a1e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8009a22:	4296      	cmp	r6, r2
 8009a24:	dd0d      	ble.n	8009a42 <scalbn+0x7a>
 8009a26:	2d00      	cmp	r5, #0
 8009a28:	a11d      	add	r1, pc, #116	@ (adr r1, 8009aa0 <scalbn+0xd8>)
 8009a2a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a2e:	da02      	bge.n	8009a36 <scalbn+0x6e>
 8009a30:	a11d      	add	r1, pc, #116	@ (adr r1, 8009aa8 <scalbn+0xe0>)
 8009a32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a36:	a31a      	add	r3, pc, #104	@ (adr r3, 8009aa0 <scalbn+0xd8>)
 8009a38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a3c:	f7f6 fddc 	bl	80005f8 <__aeabi_dmul>
 8009a40:	e7e6      	b.n	8009a10 <scalbn+0x48>
 8009a42:	1872      	adds	r2, r6, r1
 8009a44:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8009a48:	428a      	cmp	r2, r1
 8009a4a:	dcec      	bgt.n	8009a26 <scalbn+0x5e>
 8009a4c:	2a00      	cmp	r2, #0
 8009a4e:	dd08      	ble.n	8009a62 <scalbn+0x9a>
 8009a50:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009a54:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009a58:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009a5c:	ec45 4b10 	vmov	d0, r4, r5
 8009a60:	bd70      	pop	{r4, r5, r6, pc}
 8009a62:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009a66:	da08      	bge.n	8009a7a <scalbn+0xb2>
 8009a68:	2d00      	cmp	r5, #0
 8009a6a:	a10b      	add	r1, pc, #44	@ (adr r1, 8009a98 <scalbn+0xd0>)
 8009a6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a70:	dac1      	bge.n	80099f6 <scalbn+0x2e>
 8009a72:	a10f      	add	r1, pc, #60	@ (adr r1, 8009ab0 <scalbn+0xe8>)
 8009a74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009a78:	e7bd      	b.n	80099f6 <scalbn+0x2e>
 8009a7a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8009a7e:	3236      	adds	r2, #54	@ 0x36
 8009a80:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009a84:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009a88:	4620      	mov	r0, r4
 8009a8a:	4b0d      	ldr	r3, [pc, #52]	@ (8009ac0 <scalbn+0xf8>)
 8009a8c:	4629      	mov	r1, r5
 8009a8e:	2200      	movs	r2, #0
 8009a90:	e7d4      	b.n	8009a3c <scalbn+0x74>
 8009a92:	bf00      	nop
 8009a94:	f3af 8000 	nop.w
 8009a98:	c2f8f359 	.word	0xc2f8f359
 8009a9c:	01a56e1f 	.word	0x01a56e1f
 8009aa0:	8800759c 	.word	0x8800759c
 8009aa4:	7e37e43c 	.word	0x7e37e43c
 8009aa8:	8800759c 	.word	0x8800759c
 8009aac:	fe37e43c 	.word	0xfe37e43c
 8009ab0:	c2f8f359 	.word	0xc2f8f359
 8009ab4:	81a56e1f 	.word	0x81a56e1f
 8009ab8:	43500000 	.word	0x43500000
 8009abc:	ffff3cb0 	.word	0xffff3cb0
 8009ac0:	3c900000 	.word	0x3c900000

08009ac4 <with_errno>:
 8009ac4:	b510      	push	{r4, lr}
 8009ac6:	ed2d 8b02 	vpush	{d8}
 8009aca:	eeb0 8a40 	vmov.f32	s16, s0
 8009ace:	eef0 8a60 	vmov.f32	s17, s1
 8009ad2:	4604      	mov	r4, r0
 8009ad4:	f7fd f936 	bl	8006d44 <__errno>
 8009ad8:	eeb0 0a48 	vmov.f32	s0, s16
 8009adc:	eef0 0a68 	vmov.f32	s1, s17
 8009ae0:	ecbd 8b02 	vpop	{d8}
 8009ae4:	6004      	str	r4, [r0, #0]
 8009ae6:	bd10      	pop	{r4, pc}

08009ae8 <xflow>:
 8009ae8:	4603      	mov	r3, r0
 8009aea:	b507      	push	{r0, r1, r2, lr}
 8009aec:	ec51 0b10 	vmov	r0, r1, d0
 8009af0:	b183      	cbz	r3, 8009b14 <xflow+0x2c>
 8009af2:	4602      	mov	r2, r0
 8009af4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009af8:	e9cd 2300 	strd	r2, r3, [sp]
 8009afc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009b00:	f7f6 fd7a 	bl	80005f8 <__aeabi_dmul>
 8009b04:	ec41 0b10 	vmov	d0, r0, r1
 8009b08:	2022      	movs	r0, #34	@ 0x22
 8009b0a:	b003      	add	sp, #12
 8009b0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009b10:	f7ff bfd8 	b.w	8009ac4 <with_errno>
 8009b14:	4602      	mov	r2, r0
 8009b16:	460b      	mov	r3, r1
 8009b18:	e7ee      	b.n	8009af8 <xflow+0x10>
 8009b1a:	0000      	movs	r0, r0
 8009b1c:	0000      	movs	r0, r0
	...

08009b20 <__math_uflow>:
 8009b20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009b28 <__math_uflow+0x8>
 8009b24:	f7ff bfe0 	b.w	8009ae8 <xflow>
 8009b28:	00000000 	.word	0x00000000
 8009b2c:	10000000 	.word	0x10000000

08009b30 <__math_oflow>:
 8009b30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8009b38 <__math_oflow+0x8>
 8009b34:	f7ff bfd8 	b.w	8009ae8 <xflow>
 8009b38:	00000000 	.word	0x00000000
 8009b3c:	70000000 	.word	0x70000000

08009b40 <__ieee754_sqrt>:
 8009b40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b44:	4a68      	ldr	r2, [pc, #416]	@ (8009ce8 <__ieee754_sqrt+0x1a8>)
 8009b46:	ec55 4b10 	vmov	r4, r5, d0
 8009b4a:	43aa      	bics	r2, r5
 8009b4c:	462b      	mov	r3, r5
 8009b4e:	4621      	mov	r1, r4
 8009b50:	d110      	bne.n	8009b74 <__ieee754_sqrt+0x34>
 8009b52:	4622      	mov	r2, r4
 8009b54:	4620      	mov	r0, r4
 8009b56:	4629      	mov	r1, r5
 8009b58:	f7f6 fd4e 	bl	80005f8 <__aeabi_dmul>
 8009b5c:	4602      	mov	r2, r0
 8009b5e:	460b      	mov	r3, r1
 8009b60:	4620      	mov	r0, r4
 8009b62:	4629      	mov	r1, r5
 8009b64:	f7f6 fb92 	bl	800028c <__adddf3>
 8009b68:	4604      	mov	r4, r0
 8009b6a:	460d      	mov	r5, r1
 8009b6c:	ec45 4b10 	vmov	d0, r4, r5
 8009b70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b74:	2d00      	cmp	r5, #0
 8009b76:	dc0e      	bgt.n	8009b96 <__ieee754_sqrt+0x56>
 8009b78:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8009b7c:	4322      	orrs	r2, r4
 8009b7e:	d0f5      	beq.n	8009b6c <__ieee754_sqrt+0x2c>
 8009b80:	b19d      	cbz	r5, 8009baa <__ieee754_sqrt+0x6a>
 8009b82:	4622      	mov	r2, r4
 8009b84:	4620      	mov	r0, r4
 8009b86:	4629      	mov	r1, r5
 8009b88:	f7f6 fb7e 	bl	8000288 <__aeabi_dsub>
 8009b8c:	4602      	mov	r2, r0
 8009b8e:	460b      	mov	r3, r1
 8009b90:	f7f6 fe5c 	bl	800084c <__aeabi_ddiv>
 8009b94:	e7e8      	b.n	8009b68 <__ieee754_sqrt+0x28>
 8009b96:	152a      	asrs	r2, r5, #20
 8009b98:	d115      	bne.n	8009bc6 <__ieee754_sqrt+0x86>
 8009b9a:	2000      	movs	r0, #0
 8009b9c:	e009      	b.n	8009bb2 <__ieee754_sqrt+0x72>
 8009b9e:	0acb      	lsrs	r3, r1, #11
 8009ba0:	3a15      	subs	r2, #21
 8009ba2:	0549      	lsls	r1, r1, #21
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d0fa      	beq.n	8009b9e <__ieee754_sqrt+0x5e>
 8009ba8:	e7f7      	b.n	8009b9a <__ieee754_sqrt+0x5a>
 8009baa:	462a      	mov	r2, r5
 8009bac:	e7fa      	b.n	8009ba4 <__ieee754_sqrt+0x64>
 8009bae:	005b      	lsls	r3, r3, #1
 8009bb0:	3001      	adds	r0, #1
 8009bb2:	02dc      	lsls	r4, r3, #11
 8009bb4:	d5fb      	bpl.n	8009bae <__ieee754_sqrt+0x6e>
 8009bb6:	1e44      	subs	r4, r0, #1
 8009bb8:	1b12      	subs	r2, r2, r4
 8009bba:	f1c0 0420 	rsb	r4, r0, #32
 8009bbe:	fa21 f404 	lsr.w	r4, r1, r4
 8009bc2:	4323      	orrs	r3, r4
 8009bc4:	4081      	lsls	r1, r0
 8009bc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009bca:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 8009bce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009bd2:	07d2      	lsls	r2, r2, #31
 8009bd4:	bf5c      	itt	pl
 8009bd6:	005b      	lslpl	r3, r3, #1
 8009bd8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 8009bdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009be0:	bf58      	it	pl
 8009be2:	0049      	lslpl	r1, r1, #1
 8009be4:	2600      	movs	r6, #0
 8009be6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 8009bea:	106d      	asrs	r5, r5, #1
 8009bec:	0049      	lsls	r1, r1, #1
 8009bee:	2016      	movs	r0, #22
 8009bf0:	4632      	mov	r2, r6
 8009bf2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 8009bf6:	1917      	adds	r7, r2, r4
 8009bf8:	429f      	cmp	r7, r3
 8009bfa:	bfde      	ittt	le
 8009bfc:	193a      	addle	r2, r7, r4
 8009bfe:	1bdb      	suble	r3, r3, r7
 8009c00:	1936      	addle	r6, r6, r4
 8009c02:	0fcf      	lsrs	r7, r1, #31
 8009c04:	3801      	subs	r0, #1
 8009c06:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 8009c0a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009c0e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009c12:	d1f0      	bne.n	8009bf6 <__ieee754_sqrt+0xb6>
 8009c14:	4604      	mov	r4, r0
 8009c16:	2720      	movs	r7, #32
 8009c18:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8009c1c:	429a      	cmp	r2, r3
 8009c1e:	eb00 0e0c 	add.w	lr, r0, ip
 8009c22:	db02      	blt.n	8009c2a <__ieee754_sqrt+0xea>
 8009c24:	d113      	bne.n	8009c4e <__ieee754_sqrt+0x10e>
 8009c26:	458e      	cmp	lr, r1
 8009c28:	d811      	bhi.n	8009c4e <__ieee754_sqrt+0x10e>
 8009c2a:	f1be 0f00 	cmp.w	lr, #0
 8009c2e:	eb0e 000c 	add.w	r0, lr, ip
 8009c32:	da42      	bge.n	8009cba <__ieee754_sqrt+0x17a>
 8009c34:	2800      	cmp	r0, #0
 8009c36:	db40      	blt.n	8009cba <__ieee754_sqrt+0x17a>
 8009c38:	f102 0801 	add.w	r8, r2, #1
 8009c3c:	1a9b      	subs	r3, r3, r2
 8009c3e:	458e      	cmp	lr, r1
 8009c40:	bf88      	it	hi
 8009c42:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8009c46:	eba1 010e 	sub.w	r1, r1, lr
 8009c4a:	4464      	add	r4, ip
 8009c4c:	4642      	mov	r2, r8
 8009c4e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 8009c52:	3f01      	subs	r7, #1
 8009c54:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 8009c58:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8009c5c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8009c60:	d1dc      	bne.n	8009c1c <__ieee754_sqrt+0xdc>
 8009c62:	4319      	orrs	r1, r3
 8009c64:	d01b      	beq.n	8009c9e <__ieee754_sqrt+0x15e>
 8009c66:	f8df a084 	ldr.w	sl, [pc, #132]	@ 8009cec <__ieee754_sqrt+0x1ac>
 8009c6a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 8009cf0 <__ieee754_sqrt+0x1b0>
 8009c6e:	e9da 0100 	ldrd	r0, r1, [sl]
 8009c72:	e9db 2300 	ldrd	r2, r3, [fp]
 8009c76:	f7f6 fb07 	bl	8000288 <__aeabi_dsub>
 8009c7a:	e9da 8900 	ldrd	r8, r9, [sl]
 8009c7e:	4602      	mov	r2, r0
 8009c80:	460b      	mov	r3, r1
 8009c82:	4640      	mov	r0, r8
 8009c84:	4649      	mov	r1, r9
 8009c86:	f7f6 ff33 	bl	8000af0 <__aeabi_dcmple>
 8009c8a:	b140      	cbz	r0, 8009c9e <__ieee754_sqrt+0x15e>
 8009c8c:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009c90:	e9da 0100 	ldrd	r0, r1, [sl]
 8009c94:	e9db 2300 	ldrd	r2, r3, [fp]
 8009c98:	d111      	bne.n	8009cbe <__ieee754_sqrt+0x17e>
 8009c9a:	3601      	adds	r6, #1
 8009c9c:	463c      	mov	r4, r7
 8009c9e:	1072      	asrs	r2, r6, #1
 8009ca0:	0863      	lsrs	r3, r4, #1
 8009ca2:	07f1      	lsls	r1, r6, #31
 8009ca4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 8009ca8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8009cac:	bf48      	it	mi
 8009cae:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8009cb2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	e756      	b.n	8009b68 <__ieee754_sqrt+0x28>
 8009cba:	4690      	mov	r8, r2
 8009cbc:	e7be      	b.n	8009c3c <__ieee754_sqrt+0xfc>
 8009cbe:	f7f6 fae5 	bl	800028c <__adddf3>
 8009cc2:	e9da 8900 	ldrd	r8, r9, [sl]
 8009cc6:	4602      	mov	r2, r0
 8009cc8:	460b      	mov	r3, r1
 8009cca:	4640      	mov	r0, r8
 8009ccc:	4649      	mov	r1, r9
 8009cce:	f7f6 ff05 	bl	8000adc <__aeabi_dcmplt>
 8009cd2:	b120      	cbz	r0, 8009cde <__ieee754_sqrt+0x19e>
 8009cd4:	1ca0      	adds	r0, r4, #2
 8009cd6:	bf08      	it	eq
 8009cd8:	3601      	addeq	r6, #1
 8009cda:	3402      	adds	r4, #2
 8009cdc:	e7df      	b.n	8009c9e <__ieee754_sqrt+0x15e>
 8009cde:	1c63      	adds	r3, r4, #1
 8009ce0:	f023 0401 	bic.w	r4, r3, #1
 8009ce4:	e7db      	b.n	8009c9e <__ieee754_sqrt+0x15e>
 8009ce6:	bf00      	nop
 8009ce8:	7ff00000 	.word	0x7ff00000
 8009cec:	200001e0 	.word	0x200001e0
 8009cf0:	200001d8 	.word	0x200001d8

08009cf4 <_init>:
 8009cf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cf6:	bf00      	nop
 8009cf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cfa:	bc08      	pop	{r3}
 8009cfc:	469e      	mov	lr, r3
 8009cfe:	4770      	bx	lr

08009d00 <_fini>:
 8009d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009d02:	bf00      	nop
 8009d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009d06:	bc08      	pop	{r3}
 8009d08:	469e      	mov	lr, r3
 8009d0a:	4770      	bx	lr
