
RTOS_Controlled_IoT_Weather_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f640  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000728  0800f7d0  0800f7d0  000107d0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fef8  0800fef8  000111f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800fef8  0800fef8  00010ef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ff00  0800ff00  000111f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ff00  0800ff00  00010f00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800ff04  0800ff04  00010f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800ff08  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000111f0  2**0
                  CONTENTS
 10 .bss          00013b9c  200001f0  200001f0  000111f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20013d8c  20013d8c  000111f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000111f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001cdf5  00000000  00000000  00011220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e71  00000000  00000000  0002e015  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001a38  00000000  00000000  00031e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001498  00000000  00000000  000338c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000276b4  00000000  00000000  00034d58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023c30  00000000  00000000  0005c40c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f9150  00000000  00000000  0008003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0017918c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000083c4  00000000  00000000  001791d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000b3  00000000  00000000  00181594  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f7b8 	.word	0x0800f7b8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800f7b8 	.word	0x0800f7b8

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20013268 	.word	0x20013268
	...

08000270 <memchr>:
 8000270:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000274:	2a10      	cmp	r2, #16
 8000276:	db2b      	blt.n	80002d0 <memchr+0x60>
 8000278:	f010 0f07 	tst.w	r0, #7
 800027c:	d008      	beq.n	8000290 <memchr+0x20>
 800027e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000282:	3a01      	subs	r2, #1
 8000284:	428b      	cmp	r3, r1
 8000286:	d02d      	beq.n	80002e4 <memchr+0x74>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	b342      	cbz	r2, 80002e0 <memchr+0x70>
 800028e:	d1f6      	bne.n	800027e <memchr+0xe>
 8000290:	b4f0      	push	{r4, r5, r6, r7}
 8000292:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000296:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800029a:	f022 0407 	bic.w	r4, r2, #7
 800029e:	f07f 0700 	mvns.w	r7, #0
 80002a2:	2300      	movs	r3, #0
 80002a4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002a8:	3c08      	subs	r4, #8
 80002aa:	ea85 0501 	eor.w	r5, r5, r1
 80002ae:	ea86 0601 	eor.w	r6, r6, r1
 80002b2:	fa85 f547 	uadd8	r5, r5, r7
 80002b6:	faa3 f587 	sel	r5, r3, r7
 80002ba:	fa86 f647 	uadd8	r6, r6, r7
 80002be:	faa5 f687 	sel	r6, r5, r7
 80002c2:	b98e      	cbnz	r6, 80002e8 <memchr+0x78>
 80002c4:	d1ee      	bne.n	80002a4 <memchr+0x34>
 80002c6:	bcf0      	pop	{r4, r5, r6, r7}
 80002c8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002cc:	f002 0207 	and.w	r2, r2, #7
 80002d0:	b132      	cbz	r2, 80002e0 <memchr+0x70>
 80002d2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002d6:	3a01      	subs	r2, #1
 80002d8:	ea83 0301 	eor.w	r3, r3, r1
 80002dc:	b113      	cbz	r3, 80002e4 <memchr+0x74>
 80002de:	d1f8      	bne.n	80002d2 <memchr+0x62>
 80002e0:	2000      	movs	r0, #0
 80002e2:	4770      	bx	lr
 80002e4:	3801      	subs	r0, #1
 80002e6:	4770      	bx	lr
 80002e8:	2d00      	cmp	r5, #0
 80002ea:	bf06      	itte	eq
 80002ec:	4635      	moveq	r5, r6
 80002ee:	3803      	subeq	r0, #3
 80002f0:	3807      	subne	r0, #7
 80002f2:	f015 0f01 	tst.w	r5, #1
 80002f6:	d107      	bne.n	8000308 <memchr+0x98>
 80002f8:	3001      	adds	r0, #1
 80002fa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002fe:	bf02      	ittt	eq
 8000300:	3001      	addeq	r0, #1
 8000302:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000306:	3001      	addeq	r0, #1
 8000308:	bcf0      	pop	{r4, r5, r6, r7}
 800030a:	3801      	subs	r0, #1
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop

08000310 <strlen>:
 8000310:	4603      	mov	r3, r0
 8000312:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000316:	2a00      	cmp	r2, #0
 8000318:	d1fb      	bne.n	8000312 <strlen+0x2>
 800031a:	1a18      	subs	r0, r3, r0
 800031c:	3801      	subs	r0, #1
 800031e:	4770      	bx	lr

08000320 <__aeabi_drsub>:
 8000320:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000324:	e002      	b.n	800032c <__adddf3>
 8000326:	bf00      	nop

08000328 <__aeabi_dsub>:
 8000328:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800032c <__adddf3>:
 800032c:	b530      	push	{r4, r5, lr}
 800032e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000332:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000336:	ea94 0f05 	teq	r4, r5
 800033a:	bf08      	it	eq
 800033c:	ea90 0f02 	teqeq	r0, r2
 8000340:	bf1f      	itttt	ne
 8000342:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000346:	ea55 0c02 	orrsne.w	ip, r5, r2
 800034a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800034e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000352:	f000 80e2 	beq.w	800051a <__adddf3+0x1ee>
 8000356:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800035a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800035e:	bfb8      	it	lt
 8000360:	426d      	neglt	r5, r5
 8000362:	dd0c      	ble.n	800037e <__adddf3+0x52>
 8000364:	442c      	add	r4, r5
 8000366:	ea80 0202 	eor.w	r2, r0, r2
 800036a:	ea81 0303 	eor.w	r3, r1, r3
 800036e:	ea82 0000 	eor.w	r0, r2, r0
 8000372:	ea83 0101 	eor.w	r1, r3, r1
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	2d36      	cmp	r5, #54	@ 0x36
 8000380:	bf88      	it	hi
 8000382:	bd30      	pophi	{r4, r5, pc}
 8000384:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000388:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800038c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000390:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000394:	d002      	beq.n	800039c <__adddf3+0x70>
 8000396:	4240      	negs	r0, r0
 8000398:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800039c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003a8:	d002      	beq.n	80003b0 <__adddf3+0x84>
 80003aa:	4252      	negs	r2, r2
 80003ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003b0:	ea94 0f05 	teq	r4, r5
 80003b4:	f000 80a7 	beq.w	8000506 <__adddf3+0x1da>
 80003b8:	f1a4 0401 	sub.w	r4, r4, #1
 80003bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003c0:	db0d      	blt.n	80003de <__adddf3+0xb2>
 80003c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003c6:	fa22 f205 	lsr.w	r2, r2, r5
 80003ca:	1880      	adds	r0, r0, r2
 80003cc:	f141 0100 	adc.w	r1, r1, #0
 80003d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003d4:	1880      	adds	r0, r0, r2
 80003d6:	fa43 f305 	asr.w	r3, r3, r5
 80003da:	4159      	adcs	r1, r3
 80003dc:	e00e      	b.n	80003fc <__adddf3+0xd0>
 80003de:	f1a5 0520 	sub.w	r5, r5, #32
 80003e2:	f10e 0e20 	add.w	lr, lr, #32
 80003e6:	2a01      	cmp	r2, #1
 80003e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ec:	bf28      	it	cs
 80003ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003f2:	fa43 f305 	asr.w	r3, r3, r5
 80003f6:	18c0      	adds	r0, r0, r3
 80003f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003fc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000400:	d507      	bpl.n	8000412 <__adddf3+0xe6>
 8000402:	f04f 0e00 	mov.w	lr, #0
 8000406:	f1dc 0c00 	rsbs	ip, ip, #0
 800040a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800040e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000412:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000416:	d31b      	bcc.n	8000450 <__adddf3+0x124>
 8000418:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800041c:	d30c      	bcc.n	8000438 <__adddf3+0x10c>
 800041e:	0849      	lsrs	r1, r1, #1
 8000420:	ea5f 0030 	movs.w	r0, r0, rrx
 8000424:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000428:	f104 0401 	add.w	r4, r4, #1
 800042c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000430:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000434:	f080 809a 	bcs.w	800056c <__adddf3+0x240>
 8000438:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800043c:	bf08      	it	eq
 800043e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000442:	f150 0000 	adcs.w	r0, r0, #0
 8000446:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800044a:	ea41 0105 	orr.w	r1, r1, r5
 800044e:	bd30      	pop	{r4, r5, pc}
 8000450:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000454:	4140      	adcs	r0, r0
 8000456:	eb41 0101 	adc.w	r1, r1, r1
 800045a:	3c01      	subs	r4, #1
 800045c:	bf28      	it	cs
 800045e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000462:	d2e9      	bcs.n	8000438 <__adddf3+0x10c>
 8000464:	f091 0f00 	teq	r1, #0
 8000468:	bf04      	itt	eq
 800046a:	4601      	moveq	r1, r0
 800046c:	2000      	moveq	r0, #0
 800046e:	fab1 f381 	clz	r3, r1
 8000472:	bf08      	it	eq
 8000474:	3320      	addeq	r3, #32
 8000476:	f1a3 030b 	sub.w	r3, r3, #11
 800047a:	f1b3 0220 	subs.w	r2, r3, #32
 800047e:	da0c      	bge.n	800049a <__adddf3+0x16e>
 8000480:	320c      	adds	r2, #12
 8000482:	dd08      	ble.n	8000496 <__adddf3+0x16a>
 8000484:	f102 0c14 	add.w	ip, r2, #20
 8000488:	f1c2 020c 	rsb	r2, r2, #12
 800048c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000490:	fa21 f102 	lsr.w	r1, r1, r2
 8000494:	e00c      	b.n	80004b0 <__adddf3+0x184>
 8000496:	f102 0214 	add.w	r2, r2, #20
 800049a:	bfd8      	it	le
 800049c:	f1c2 0c20 	rsble	ip, r2, #32
 80004a0:	fa01 f102 	lsl.w	r1, r1, r2
 80004a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004a8:	bfdc      	itt	le
 80004aa:	ea41 010c 	orrle.w	r1, r1, ip
 80004ae:	4090      	lslle	r0, r2
 80004b0:	1ae4      	subs	r4, r4, r3
 80004b2:	bfa2      	ittt	ge
 80004b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004b8:	4329      	orrge	r1, r5
 80004ba:	bd30      	popge	{r4, r5, pc}
 80004bc:	ea6f 0404 	mvn.w	r4, r4
 80004c0:	3c1f      	subs	r4, #31
 80004c2:	da1c      	bge.n	80004fe <__adddf3+0x1d2>
 80004c4:	340c      	adds	r4, #12
 80004c6:	dc0e      	bgt.n	80004e6 <__adddf3+0x1ba>
 80004c8:	f104 0414 	add.w	r4, r4, #20
 80004cc:	f1c4 0220 	rsb	r2, r4, #32
 80004d0:	fa20 f004 	lsr.w	r0, r0, r4
 80004d4:	fa01 f302 	lsl.w	r3, r1, r2
 80004d8:	ea40 0003 	orr.w	r0, r0, r3
 80004dc:	fa21 f304 	lsr.w	r3, r1, r4
 80004e0:	ea45 0103 	orr.w	r1, r5, r3
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	f1c4 040c 	rsb	r4, r4, #12
 80004ea:	f1c4 0220 	rsb	r2, r4, #32
 80004ee:	fa20 f002 	lsr.w	r0, r0, r2
 80004f2:	fa01 f304 	lsl.w	r3, r1, r4
 80004f6:	ea40 0003 	orr.w	r0, r0, r3
 80004fa:	4629      	mov	r1, r5
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000502:	4629      	mov	r1, r5
 8000504:	bd30      	pop	{r4, r5, pc}
 8000506:	f094 0f00 	teq	r4, #0
 800050a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800050e:	bf06      	itte	eq
 8000510:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000514:	3401      	addeq	r4, #1
 8000516:	3d01      	subne	r5, #1
 8000518:	e74e      	b.n	80003b8 <__adddf3+0x8c>
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf18      	it	ne
 8000520:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000524:	d029      	beq.n	800057a <__adddf3+0x24e>
 8000526:	ea94 0f05 	teq	r4, r5
 800052a:	bf08      	it	eq
 800052c:	ea90 0f02 	teqeq	r0, r2
 8000530:	d005      	beq.n	800053e <__adddf3+0x212>
 8000532:	ea54 0c00 	orrs.w	ip, r4, r0
 8000536:	bf04      	itt	eq
 8000538:	4619      	moveq	r1, r3
 800053a:	4610      	moveq	r0, r2
 800053c:	bd30      	pop	{r4, r5, pc}
 800053e:	ea91 0f03 	teq	r1, r3
 8000542:	bf1e      	ittt	ne
 8000544:	2100      	movne	r1, #0
 8000546:	2000      	movne	r0, #0
 8000548:	bd30      	popne	{r4, r5, pc}
 800054a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800054e:	d105      	bne.n	800055c <__adddf3+0x230>
 8000550:	0040      	lsls	r0, r0, #1
 8000552:	4149      	adcs	r1, r1
 8000554:	bf28      	it	cs
 8000556:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000560:	bf3c      	itt	cc
 8000562:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000566:	bd30      	popcc	{r4, r5, pc}
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800056c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000570:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000574:	f04f 0000 	mov.w	r0, #0
 8000578:	bd30      	pop	{r4, r5, pc}
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf1a      	itte	ne
 8000580:	4619      	movne	r1, r3
 8000582:	4610      	movne	r0, r2
 8000584:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000588:	bf1c      	itt	ne
 800058a:	460b      	movne	r3, r1
 800058c:	4602      	movne	r2, r0
 800058e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000592:	bf06      	itte	eq
 8000594:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000598:	ea91 0f03 	teqeq	r1, r3
 800059c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005a0:	bd30      	pop	{r4, r5, pc}
 80005a2:	bf00      	nop

080005a4 <__aeabi_ui2d>:
 80005a4:	f090 0f00 	teq	r0, #0
 80005a8:	bf04      	itt	eq
 80005aa:	2100      	moveq	r1, #0
 80005ac:	4770      	bxeq	lr
 80005ae:	b530      	push	{r4, r5, lr}
 80005b0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005b8:	f04f 0500 	mov.w	r5, #0
 80005bc:	f04f 0100 	mov.w	r1, #0
 80005c0:	e750      	b.n	8000464 <__adddf3+0x138>
 80005c2:	bf00      	nop

080005c4 <__aeabi_i2d>:
 80005c4:	f090 0f00 	teq	r0, #0
 80005c8:	bf04      	itt	eq
 80005ca:	2100      	moveq	r1, #0
 80005cc:	4770      	bxeq	lr
 80005ce:	b530      	push	{r4, r5, lr}
 80005d0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005d8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005dc:	bf48      	it	mi
 80005de:	4240      	negmi	r0, r0
 80005e0:	f04f 0100 	mov.w	r1, #0
 80005e4:	e73e      	b.n	8000464 <__adddf3+0x138>
 80005e6:	bf00      	nop

080005e8 <__aeabi_f2d>:
 80005e8:	0042      	lsls	r2, r0, #1
 80005ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80005f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005f6:	bf1f      	itttt	ne
 80005f8:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80005fc:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000600:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000604:	4770      	bxne	lr
 8000606:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800060a:	bf08      	it	eq
 800060c:	4770      	bxeq	lr
 800060e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000612:	bf04      	itt	eq
 8000614:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000618:	4770      	bxeq	lr
 800061a:	b530      	push	{r4, r5, lr}
 800061c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000620:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000624:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	e71c      	b.n	8000464 <__adddf3+0x138>
 800062a:	bf00      	nop

0800062c <__aeabi_ul2d>:
 800062c:	ea50 0201 	orrs.w	r2, r0, r1
 8000630:	bf08      	it	eq
 8000632:	4770      	bxeq	lr
 8000634:	b530      	push	{r4, r5, lr}
 8000636:	f04f 0500 	mov.w	r5, #0
 800063a:	e00a      	b.n	8000652 <__aeabi_l2d+0x16>

0800063c <__aeabi_l2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800064a:	d502      	bpl.n	8000652 <__aeabi_l2d+0x16>
 800064c:	4240      	negs	r0, r0
 800064e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000652:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000656:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800065a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800065e:	f43f aed8 	beq.w	8000412 <__adddf3+0xe6>
 8000662:	f04f 0203 	mov.w	r2, #3
 8000666:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800066a:	bf18      	it	ne
 800066c:	3203      	addne	r2, #3
 800066e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000672:	bf18      	it	ne
 8000674:	3203      	addne	r2, #3
 8000676:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800067a:	f1c2 0320 	rsb	r3, r2, #32
 800067e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000682:	fa20 f002 	lsr.w	r0, r0, r2
 8000686:	fa01 fe03 	lsl.w	lr, r1, r3
 800068a:	ea40 000e 	orr.w	r0, r0, lr
 800068e:	fa21 f102 	lsr.w	r1, r1, r2
 8000692:	4414      	add	r4, r2
 8000694:	e6bd      	b.n	8000412 <__adddf3+0xe6>
 8000696:	bf00      	nop

08000698 <__aeabi_dmul>:
 8000698:	b570      	push	{r4, r5, r6, lr}
 800069a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800069e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006a6:	bf1d      	ittte	ne
 80006a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006ac:	ea94 0f0c 	teqne	r4, ip
 80006b0:	ea95 0f0c 	teqne	r5, ip
 80006b4:	f000 f8de 	bleq	8000874 <__aeabi_dmul+0x1dc>
 80006b8:	442c      	add	r4, r5
 80006ba:	ea81 0603 	eor.w	r6, r1, r3
 80006be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006ca:	bf18      	it	ne
 80006cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006d0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006d8:	d038      	beq.n	800074c <__aeabi_dmul+0xb4>
 80006da:	fba0 ce02 	umull	ip, lr, r0, r2
 80006de:	f04f 0500 	mov.w	r5, #0
 80006e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006e6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ee:	f04f 0600 	mov.w	r6, #0
 80006f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006f6:	f09c 0f00 	teq	ip, #0
 80006fa:	bf18      	it	ne
 80006fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000700:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000704:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000708:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800070c:	d204      	bcs.n	8000718 <__aeabi_dmul+0x80>
 800070e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000712:	416d      	adcs	r5, r5
 8000714:	eb46 0606 	adc.w	r6, r6, r6
 8000718:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800071c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000720:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000724:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000728:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800072c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000730:	bf88      	it	hi
 8000732:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000736:	d81e      	bhi.n	8000776 <__aeabi_dmul+0xde>
 8000738:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800073c:	bf08      	it	eq
 800073e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000742:	f150 0000 	adcs.w	r0, r0, #0
 8000746:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000750:	ea46 0101 	orr.w	r1, r6, r1
 8000754:	ea40 0002 	orr.w	r0, r0, r2
 8000758:	ea81 0103 	eor.w	r1, r1, r3
 800075c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000760:	bfc2      	ittt	gt
 8000762:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000766:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800076a:	bd70      	popgt	{r4, r5, r6, pc}
 800076c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000770:	f04f 0e00 	mov.w	lr, #0
 8000774:	3c01      	subs	r4, #1
 8000776:	f300 80ab 	bgt.w	80008d0 <__aeabi_dmul+0x238>
 800077a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800077e:	bfde      	ittt	le
 8000780:	2000      	movle	r0, #0
 8000782:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000786:	bd70      	pople	{r4, r5, r6, pc}
 8000788:	f1c4 0400 	rsb	r4, r4, #0
 800078c:	3c20      	subs	r4, #32
 800078e:	da35      	bge.n	80007fc <__aeabi_dmul+0x164>
 8000790:	340c      	adds	r4, #12
 8000792:	dc1b      	bgt.n	80007cc <__aeabi_dmul+0x134>
 8000794:	f104 0414 	add.w	r4, r4, #20
 8000798:	f1c4 0520 	rsb	r5, r4, #32
 800079c:	fa00 f305 	lsl.w	r3, r0, r5
 80007a0:	fa20 f004 	lsr.w	r0, r0, r4
 80007a4:	fa01 f205 	lsl.w	r2, r1, r5
 80007a8:	ea40 0002 	orr.w	r0, r0, r2
 80007ac:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007b0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007b8:	fa21 f604 	lsr.w	r6, r1, r4
 80007bc:	eb42 0106 	adc.w	r1, r2, r6
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 040c 	rsb	r4, r4, #12
 80007d0:	f1c4 0520 	rsb	r5, r4, #32
 80007d4:	fa00 f304 	lsl.w	r3, r0, r4
 80007d8:	fa20 f005 	lsr.w	r0, r0, r5
 80007dc:	fa01 f204 	lsl.w	r2, r1, r4
 80007e0:	ea40 0002 	orr.w	r0, r0, r2
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ec:	f141 0100 	adc.w	r1, r1, #0
 80007f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007f4:	bf08      	it	eq
 80007f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007fa:	bd70      	pop	{r4, r5, r6, pc}
 80007fc:	f1c4 0520 	rsb	r5, r4, #32
 8000800:	fa00 f205 	lsl.w	r2, r0, r5
 8000804:	ea4e 0e02 	orr.w	lr, lr, r2
 8000808:	fa20 f304 	lsr.w	r3, r0, r4
 800080c:	fa01 f205 	lsl.w	r2, r1, r5
 8000810:	ea43 0302 	orr.w	r3, r3, r2
 8000814:	fa21 f004 	lsr.w	r0, r1, r4
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800081c:	fa21 f204 	lsr.w	r2, r1, r4
 8000820:	ea20 0002 	bic.w	r0, r0, r2
 8000824:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000828:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800082c:	bf08      	it	eq
 800082e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000832:	bd70      	pop	{r4, r5, r6, pc}
 8000834:	f094 0f00 	teq	r4, #0
 8000838:	d10f      	bne.n	800085a <__aeabi_dmul+0x1c2>
 800083a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800083e:	0040      	lsls	r0, r0, #1
 8000840:	eb41 0101 	adc.w	r1, r1, r1
 8000844:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000848:	bf08      	it	eq
 800084a:	3c01      	subeq	r4, #1
 800084c:	d0f7      	beq.n	800083e <__aeabi_dmul+0x1a6>
 800084e:	ea41 0106 	orr.w	r1, r1, r6
 8000852:	f095 0f00 	teq	r5, #0
 8000856:	bf18      	it	ne
 8000858:	4770      	bxne	lr
 800085a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800085e:	0052      	lsls	r2, r2, #1
 8000860:	eb43 0303 	adc.w	r3, r3, r3
 8000864:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000868:	bf08      	it	eq
 800086a:	3d01      	subeq	r5, #1
 800086c:	d0f7      	beq.n	800085e <__aeabi_dmul+0x1c6>
 800086e:	ea43 0306 	orr.w	r3, r3, r6
 8000872:	4770      	bx	lr
 8000874:	ea94 0f0c 	teq	r4, ip
 8000878:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800087c:	bf18      	it	ne
 800087e:	ea95 0f0c 	teqne	r5, ip
 8000882:	d00c      	beq.n	800089e <__aeabi_dmul+0x206>
 8000884:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000888:	bf18      	it	ne
 800088a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800088e:	d1d1      	bne.n	8000834 <__aeabi_dmul+0x19c>
 8000890:	ea81 0103 	eor.w	r1, r1, r3
 8000894:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000898:	f04f 0000 	mov.w	r0, #0
 800089c:	bd70      	pop	{r4, r5, r6, pc}
 800089e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008a2:	bf06      	itte	eq
 80008a4:	4610      	moveq	r0, r2
 80008a6:	4619      	moveq	r1, r3
 80008a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008ac:	d019      	beq.n	80008e2 <__aeabi_dmul+0x24a>
 80008ae:	ea94 0f0c 	teq	r4, ip
 80008b2:	d102      	bne.n	80008ba <__aeabi_dmul+0x222>
 80008b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008b8:	d113      	bne.n	80008e2 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	d105      	bne.n	80008cc <__aeabi_dmul+0x234>
 80008c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008c4:	bf1c      	itt	ne
 80008c6:	4610      	movne	r0, r2
 80008c8:	4619      	movne	r1, r3
 80008ca:	d10a      	bne.n	80008e2 <__aeabi_dmul+0x24a>
 80008cc:	ea81 0103 	eor.w	r1, r1, r3
 80008d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008d4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008d8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008dc:	f04f 0000 	mov.w	r0, #0
 80008e0:	bd70      	pop	{r4, r5, r6, pc}
 80008e2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008e6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008ea:	bd70      	pop	{r4, r5, r6, pc}

080008ec <__aeabi_ddiv>:
 80008ec:	b570      	push	{r4, r5, r6, lr}
 80008ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80008f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80008f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008fa:	bf1d      	ittte	ne
 80008fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000900:	ea94 0f0c 	teqne	r4, ip
 8000904:	ea95 0f0c 	teqne	r5, ip
 8000908:	f000 f8a7 	bleq	8000a5a <__aeabi_ddiv+0x16e>
 800090c:	eba4 0405 	sub.w	r4, r4, r5
 8000910:	ea81 0e03 	eor.w	lr, r1, r3
 8000914:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000918:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800091c:	f000 8088 	beq.w	8000a30 <__aeabi_ddiv+0x144>
 8000920:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000924:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000928:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800092c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000930:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000934:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000938:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800093c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000940:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000944:	429d      	cmp	r5, r3
 8000946:	bf08      	it	eq
 8000948:	4296      	cmpeq	r6, r2
 800094a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800094e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000952:	d202      	bcs.n	800095a <__aeabi_ddiv+0x6e>
 8000954:	085b      	lsrs	r3, r3, #1
 8000956:	ea4f 0232 	mov.w	r2, r2, rrx
 800095a:	1ab6      	subs	r6, r6, r2
 800095c:	eb65 0503 	sbc.w	r5, r5, r3
 8000960:	085b      	lsrs	r3, r3, #1
 8000962:	ea4f 0232 	mov.w	r2, r2, rrx
 8000966:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800096a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000998:	085b      	lsrs	r3, r3, #1
 800099a:	ea4f 0232 	mov.w	r2, r2, rrx
 800099e:	ebb6 0e02 	subs.w	lr, r6, r2
 80009a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009a6:	bf22      	ittt	cs
 80009a8:	1ab6      	subcs	r6, r6, r2
 80009aa:	4675      	movcs	r5, lr
 80009ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009b0:	085b      	lsrs	r3, r3, #1
 80009b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009be:	bf22      	ittt	cs
 80009c0:	1ab6      	subcs	r6, r6, r2
 80009c2:	4675      	movcs	r5, lr
 80009c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009cc:	d018      	beq.n	8000a00 <__aeabi_ddiv+0x114>
 80009ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ea:	d1c0      	bne.n	800096e <__aeabi_ddiv+0x82>
 80009ec:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80009f0:	d10b      	bne.n	8000a0a <__aeabi_ddiv+0x11e>
 80009f2:	ea41 0100 	orr.w	r1, r1, r0
 80009f6:	f04f 0000 	mov.w	r0, #0
 80009fa:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80009fe:	e7b6      	b.n	800096e <__aeabi_ddiv+0x82>
 8000a00:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a04:	bf04      	itt	eq
 8000a06:	4301      	orreq	r1, r0
 8000a08:	2000      	moveq	r0, #0
 8000a0a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a0e:	bf88      	it	hi
 8000a10:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a14:	f63f aeaf 	bhi.w	8000776 <__aeabi_dmul+0xde>
 8000a18:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a1c:	bf04      	itt	eq
 8000a1e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a22:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a26:	f150 0000 	adcs.w	r0, r0, #0
 8000a2a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a2e:	bd70      	pop	{r4, r5, r6, pc}
 8000a30:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a34:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a38:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a3c:	bfc2      	ittt	gt
 8000a3e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a42:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a46:	bd70      	popgt	{r4, r5, r6, pc}
 8000a48:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a4c:	f04f 0e00 	mov.w	lr, #0
 8000a50:	3c01      	subs	r4, #1
 8000a52:	e690      	b.n	8000776 <__aeabi_dmul+0xde>
 8000a54:	ea45 0e06 	orr.w	lr, r5, r6
 8000a58:	e68d      	b.n	8000776 <__aeabi_dmul+0xde>
 8000a5a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a5e:	ea94 0f0c 	teq	r4, ip
 8000a62:	bf08      	it	eq
 8000a64:	ea95 0f0c 	teqeq	r5, ip
 8000a68:	f43f af3b 	beq.w	80008e2 <__aeabi_dmul+0x24a>
 8000a6c:	ea94 0f0c 	teq	r4, ip
 8000a70:	d10a      	bne.n	8000a88 <__aeabi_ddiv+0x19c>
 8000a72:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a76:	f47f af34 	bne.w	80008e2 <__aeabi_dmul+0x24a>
 8000a7a:	ea95 0f0c 	teq	r5, ip
 8000a7e:	f47f af25 	bne.w	80008cc <__aeabi_dmul+0x234>
 8000a82:	4610      	mov	r0, r2
 8000a84:	4619      	mov	r1, r3
 8000a86:	e72c      	b.n	80008e2 <__aeabi_dmul+0x24a>
 8000a88:	ea95 0f0c 	teq	r5, ip
 8000a8c:	d106      	bne.n	8000a9c <__aeabi_ddiv+0x1b0>
 8000a8e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a92:	f43f aefd 	beq.w	8000890 <__aeabi_dmul+0x1f8>
 8000a96:	4610      	mov	r0, r2
 8000a98:	4619      	mov	r1, r3
 8000a9a:	e722      	b.n	80008e2 <__aeabi_dmul+0x24a>
 8000a9c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000aa6:	f47f aec5 	bne.w	8000834 <__aeabi_dmul+0x19c>
 8000aaa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000aae:	f47f af0d 	bne.w	80008cc <__aeabi_dmul+0x234>
 8000ab2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ab6:	f47f aeeb 	bne.w	8000890 <__aeabi_dmul+0x1f8>
 8000aba:	e712      	b.n	80008e2 <__aeabi_dmul+0x24a>

08000abc <__gedf2>:
 8000abc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ac0:	e006      	b.n	8000ad0 <__cmpdf2+0x4>
 8000ac2:	bf00      	nop

08000ac4 <__ledf2>:
 8000ac4:	f04f 0c01 	mov.w	ip, #1
 8000ac8:	e002      	b.n	8000ad0 <__cmpdf2+0x4>
 8000aca:	bf00      	nop

08000acc <__cmpdf2>:
 8000acc:	f04f 0c01 	mov.w	ip, #1
 8000ad0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ad4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ad8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000adc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ae0:	bf18      	it	ne
 8000ae2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ae6:	d01b      	beq.n	8000b20 <__cmpdf2+0x54>
 8000ae8:	b001      	add	sp, #4
 8000aea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aee:	bf0c      	ite	eq
 8000af0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000af4:	ea91 0f03 	teqne	r1, r3
 8000af8:	bf02      	ittt	eq
 8000afa:	ea90 0f02 	teqeq	r0, r2
 8000afe:	2000      	moveq	r0, #0
 8000b00:	4770      	bxeq	lr
 8000b02:	f110 0f00 	cmn.w	r0, #0
 8000b06:	ea91 0f03 	teq	r1, r3
 8000b0a:	bf58      	it	pl
 8000b0c:	4299      	cmppl	r1, r3
 8000b0e:	bf08      	it	eq
 8000b10:	4290      	cmpeq	r0, r2
 8000b12:	bf2c      	ite	cs
 8000b14:	17d8      	asrcs	r0, r3, #31
 8000b16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b1a:	f040 0001 	orr.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b28:	d102      	bne.n	8000b30 <__cmpdf2+0x64>
 8000b2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2e:	d107      	bne.n	8000b40 <__cmpdf2+0x74>
 8000b30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d1d6      	bne.n	8000ae8 <__cmpdf2+0x1c>
 8000b3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3e:	d0d3      	beq.n	8000ae8 <__cmpdf2+0x1c>
 8000b40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop

08000b48 <__aeabi_cdrcmple>:
 8000b48:	4684      	mov	ip, r0
 8000b4a:	4610      	mov	r0, r2
 8000b4c:	4662      	mov	r2, ip
 8000b4e:	468c      	mov	ip, r1
 8000b50:	4619      	mov	r1, r3
 8000b52:	4663      	mov	r3, ip
 8000b54:	e000      	b.n	8000b58 <__aeabi_cdcmpeq>
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdcmpeq>:
 8000b58:	b501      	push	{r0, lr}
 8000b5a:	f7ff ffb7 	bl	8000acc <__cmpdf2>
 8000b5e:	2800      	cmp	r0, #0
 8000b60:	bf48      	it	mi
 8000b62:	f110 0f00 	cmnmi.w	r0, #0
 8000b66:	bd01      	pop	{r0, pc}

08000b68 <__aeabi_dcmpeq>:
 8000b68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b6c:	f7ff fff4 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b70:	bf0c      	ite	eq
 8000b72:	2001      	moveq	r0, #1
 8000b74:	2000      	movne	r0, #0
 8000b76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b7a:	bf00      	nop

08000b7c <__aeabi_dcmplt>:
 8000b7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b80:	f7ff ffea 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b84:	bf34      	ite	cc
 8000b86:	2001      	movcc	r0, #1
 8000b88:	2000      	movcs	r0, #0
 8000b8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8e:	bf00      	nop

08000b90 <__aeabi_dcmple>:
 8000b90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b94:	f7ff ffe0 	bl	8000b58 <__aeabi_cdcmpeq>
 8000b98:	bf94      	ite	ls
 8000b9a:	2001      	movls	r0, #1
 8000b9c:	2000      	movhi	r0, #0
 8000b9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ba2:	bf00      	nop

08000ba4 <__aeabi_dcmpge>:
 8000ba4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba8:	f7ff ffce 	bl	8000b48 <__aeabi_cdrcmple>
 8000bac:	bf94      	ite	ls
 8000bae:	2001      	movls	r0, #1
 8000bb0:	2000      	movhi	r0, #0
 8000bb2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_dcmpgt>:
 8000bb8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bbc:	f7ff ffc4 	bl	8000b48 <__aeabi_cdrcmple>
 8000bc0:	bf34      	ite	cc
 8000bc2:	2001      	movcc	r0, #1
 8000bc4:	2000      	movcs	r0, #0
 8000bc6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bca:	bf00      	nop

08000bcc <__aeabi_dcmpun>:
 8000bcc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000bd0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bd4:	d102      	bne.n	8000bdc <__aeabi_dcmpun+0x10>
 8000bd6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bda:	d10a      	bne.n	8000bf2 <__aeabi_dcmpun+0x26>
 8000bdc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x20>
 8000be6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_dcmpun+0x26>
 8000bec:	f04f 0000 	mov.w	r0, #0
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0001 	mov.w	r0, #1
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2iz>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c00:	d215      	bcs.n	8000c2e <__aeabi_d2iz+0x36>
 8000c02:	d511      	bpl.n	8000c28 <__aeabi_d2iz+0x30>
 8000c04:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c08:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c0c:	d912      	bls.n	8000c34 <__aeabi_d2iz+0x3c>
 8000c0e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c12:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c16:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c1a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c1e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c22:	bf18      	it	ne
 8000c24:	4240      	negne	r0, r0
 8000c26:	4770      	bx	lr
 8000c28:	f04f 0000 	mov.w	r0, #0
 8000c2c:	4770      	bx	lr
 8000c2e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c32:	d105      	bne.n	8000c40 <__aeabi_d2iz+0x48>
 8000c34:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	bf08      	it	eq
 8000c3a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c3e:	4770      	bx	lr
 8000c40:	f04f 0000 	mov.w	r0, #0
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_ldivmod>:
 8000ce8:	b97b      	cbnz	r3, 8000d0a <__aeabi_ldivmod+0x22>
 8000cea:	b972      	cbnz	r2, 8000d0a <__aeabi_ldivmod+0x22>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bfbe      	ittt	lt
 8000cf0:	2000      	movlt	r0, #0
 8000cf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000cf6:	e006      	blt.n	8000d06 <__aeabi_ldivmod+0x1e>
 8000cf8:	bf08      	it	eq
 8000cfa:	2800      	cmpeq	r0, #0
 8000cfc:	bf1c      	itt	ne
 8000cfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000d02:	f04f 30ff 	movne.w	r0, #4294967295
 8000d06:	f000 b9b5 	b.w	8001074 <__aeabi_idiv0>
 8000d0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d12:	2900      	cmp	r1, #0
 8000d14:	db09      	blt.n	8000d2a <__aeabi_ldivmod+0x42>
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db1a      	blt.n	8000d50 <__aeabi_ldivmod+0x68>
 8000d1a:	f000 f84d 	bl	8000db8 <__udivmoddi4>
 8000d1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d26:	b004      	add	sp, #16
 8000d28:	4770      	bx	lr
 8000d2a:	4240      	negs	r0, r0
 8000d2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d30:	2b00      	cmp	r3, #0
 8000d32:	db1b      	blt.n	8000d6c <__aeabi_ldivmod+0x84>
 8000d34:	f000 f840 	bl	8000db8 <__udivmoddi4>
 8000d38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d40:	b004      	add	sp, #16
 8000d42:	4240      	negs	r0, r0
 8000d44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d48:	4252      	negs	r2, r2
 8000d4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d4e:	4770      	bx	lr
 8000d50:	4252      	negs	r2, r2
 8000d52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d56:	f000 f82f 	bl	8000db8 <__udivmoddi4>
 8000d5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d62:	b004      	add	sp, #16
 8000d64:	4240      	negs	r0, r0
 8000d66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d6a:	4770      	bx	lr
 8000d6c:	4252      	negs	r2, r2
 8000d6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d72:	f000 f821 	bl	8000db8 <__udivmoddi4>
 8000d76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d7e:	b004      	add	sp, #16
 8000d80:	4252      	negs	r2, r2
 8000d82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d86:	4770      	bx	lr

08000d88 <__aeabi_uldivmod>:
 8000d88:	b953      	cbnz	r3, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8a:	b94a      	cbnz	r2, 8000da0 <__aeabi_uldivmod+0x18>
 8000d8c:	2900      	cmp	r1, #0
 8000d8e:	bf08      	it	eq
 8000d90:	2800      	cmpeq	r0, #0
 8000d92:	bf1c      	itt	ne
 8000d94:	f04f 31ff 	movne.w	r1, #4294967295
 8000d98:	f04f 30ff 	movne.w	r0, #4294967295
 8000d9c:	f000 b96a 	b.w	8001074 <__aeabi_idiv0>
 8000da0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000da4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000da8:	f000 f806 	bl	8000db8 <__udivmoddi4>
 8000dac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000db0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000db4:	b004      	add	sp, #16
 8000db6:	4770      	bx	lr

08000db8 <__udivmoddi4>:
 8000db8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dbc:	9d08      	ldr	r5, [sp, #32]
 8000dbe:	460c      	mov	r4, r1
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d14e      	bne.n	8000e62 <__udivmoddi4+0xaa>
 8000dc4:	4694      	mov	ip, r2
 8000dc6:	458c      	cmp	ip, r1
 8000dc8:	4686      	mov	lr, r0
 8000dca:	fab2 f282 	clz	r2, r2
 8000dce:	d962      	bls.n	8000e96 <__udivmoddi4+0xde>
 8000dd0:	b14a      	cbz	r2, 8000de6 <__udivmoddi4+0x2e>
 8000dd2:	f1c2 0320 	rsb	r3, r2, #32
 8000dd6:	4091      	lsls	r1, r2
 8000dd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000ddc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000de0:	4319      	orrs	r1, r3
 8000de2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000de6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dea:	fa1f f68c 	uxth.w	r6, ip
 8000dee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000df2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000df6:	fb07 1114 	mls	r1, r7, r4, r1
 8000dfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000dfe:	fb04 f106 	mul.w	r1, r4, r6
 8000e02:	4299      	cmp	r1, r3
 8000e04:	d90a      	bls.n	8000e1c <__udivmoddi4+0x64>
 8000e06:	eb1c 0303 	adds.w	r3, ip, r3
 8000e0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e0e:	f080 8112 	bcs.w	8001036 <__udivmoddi4+0x27e>
 8000e12:	4299      	cmp	r1, r3
 8000e14:	f240 810f 	bls.w	8001036 <__udivmoddi4+0x27e>
 8000e18:	3c02      	subs	r4, #2
 8000e1a:	4463      	add	r3, ip
 8000e1c:	1a59      	subs	r1, r3, r1
 8000e1e:	fa1f f38e 	uxth.w	r3, lr
 8000e22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e26:	fb07 1110 	mls	r1, r7, r0, r1
 8000e2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e2e:	fb00 f606 	mul.w	r6, r0, r6
 8000e32:	429e      	cmp	r6, r3
 8000e34:	d90a      	bls.n	8000e4c <__udivmoddi4+0x94>
 8000e36:	eb1c 0303 	adds.w	r3, ip, r3
 8000e3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e3e:	f080 80fc 	bcs.w	800103a <__udivmoddi4+0x282>
 8000e42:	429e      	cmp	r6, r3
 8000e44:	f240 80f9 	bls.w	800103a <__udivmoddi4+0x282>
 8000e48:	4463      	add	r3, ip
 8000e4a:	3802      	subs	r0, #2
 8000e4c:	1b9b      	subs	r3, r3, r6
 8000e4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e52:	2100      	movs	r1, #0
 8000e54:	b11d      	cbz	r5, 8000e5e <__udivmoddi4+0xa6>
 8000e56:	40d3      	lsrs	r3, r2
 8000e58:	2200      	movs	r2, #0
 8000e5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000e5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e62:	428b      	cmp	r3, r1
 8000e64:	d905      	bls.n	8000e72 <__udivmoddi4+0xba>
 8000e66:	b10d      	cbz	r5, 8000e6c <__udivmoddi4+0xb4>
 8000e68:	e9c5 0100 	strd	r0, r1, [r5]
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4608      	mov	r0, r1
 8000e70:	e7f5      	b.n	8000e5e <__udivmoddi4+0xa6>
 8000e72:	fab3 f183 	clz	r1, r3
 8000e76:	2900      	cmp	r1, #0
 8000e78:	d146      	bne.n	8000f08 <__udivmoddi4+0x150>
 8000e7a:	42a3      	cmp	r3, r4
 8000e7c:	d302      	bcc.n	8000e84 <__udivmoddi4+0xcc>
 8000e7e:	4290      	cmp	r0, r2
 8000e80:	f0c0 80f0 	bcc.w	8001064 <__udivmoddi4+0x2ac>
 8000e84:	1a86      	subs	r6, r0, r2
 8000e86:	eb64 0303 	sbc.w	r3, r4, r3
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	2d00      	cmp	r5, #0
 8000e8e:	d0e6      	beq.n	8000e5e <__udivmoddi4+0xa6>
 8000e90:	e9c5 6300 	strd	r6, r3, [r5]
 8000e94:	e7e3      	b.n	8000e5e <__udivmoddi4+0xa6>
 8000e96:	2a00      	cmp	r2, #0
 8000e98:	f040 8090 	bne.w	8000fbc <__udivmoddi4+0x204>
 8000e9c:	eba1 040c 	sub.w	r4, r1, ip
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa1f f78c 	uxth.w	r7, ip
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000eae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000eb2:	fb08 4416 	mls	r4, r8, r6, r4
 8000eb6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eba:	fb07 f006 	mul.w	r0, r7, r6
 8000ebe:	4298      	cmp	r0, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x11c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000eca:	d202      	bcs.n	8000ed2 <__udivmoddi4+0x11a>
 8000ecc:	4298      	cmp	r0, r3
 8000ece:	f200 80cd 	bhi.w	800106c <__udivmoddi4+0x2b4>
 8000ed2:	4626      	mov	r6, r4
 8000ed4:	1a1c      	subs	r4, r3, r0
 8000ed6:	fa1f f38e 	uxth.w	r3, lr
 8000eda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ede:	fb08 4410 	mls	r4, r8, r0, r4
 8000ee2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ee6:	fb00 f707 	mul.w	r7, r0, r7
 8000eea:	429f      	cmp	r7, r3
 8000eec:	d908      	bls.n	8000f00 <__udivmoddi4+0x148>
 8000eee:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000ef6:	d202      	bcs.n	8000efe <__udivmoddi4+0x146>
 8000ef8:	429f      	cmp	r7, r3
 8000efa:	f200 80b0 	bhi.w	800105e <__udivmoddi4+0x2a6>
 8000efe:	4620      	mov	r0, r4
 8000f00:	1bdb      	subs	r3, r3, r7
 8000f02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f06:	e7a5      	b.n	8000e54 <__udivmoddi4+0x9c>
 8000f08:	f1c1 0620 	rsb	r6, r1, #32
 8000f0c:	408b      	lsls	r3, r1
 8000f0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000f12:	431f      	orrs	r7, r3
 8000f14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f18:	fa04 f301 	lsl.w	r3, r4, r1
 8000f1c:	ea43 030c 	orr.w	r3, r3, ip
 8000f20:	40f4      	lsrs	r4, r6
 8000f22:	fa00 f801 	lsl.w	r8, r0, r1
 8000f26:	0c38      	lsrs	r0, r7, #16
 8000f28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000f30:	fa1f fc87 	uxth.w	ip, r7
 8000f34:	fb00 441e 	mls	r4, r0, lr, r4
 8000f38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000f40:	45a1      	cmp	r9, r4
 8000f42:	fa02 f201 	lsl.w	r2, r2, r1
 8000f46:	d90a      	bls.n	8000f5e <__udivmoddi4+0x1a6>
 8000f48:	193c      	adds	r4, r7, r4
 8000f4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f4e:	f080 8084 	bcs.w	800105a <__udivmoddi4+0x2a2>
 8000f52:	45a1      	cmp	r9, r4
 8000f54:	f240 8081 	bls.w	800105a <__udivmoddi4+0x2a2>
 8000f58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f5c:	443c      	add	r4, r7
 8000f5e:	eba4 0409 	sub.w	r4, r4, r9
 8000f62:	fa1f f983 	uxth.w	r9, r3
 8000f66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f76:	45a4      	cmp	ip, r4
 8000f78:	d907      	bls.n	8000f8a <__udivmoddi4+0x1d2>
 8000f7a:	193c      	adds	r4, r7, r4
 8000f7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f80:	d267      	bcs.n	8001052 <__udivmoddi4+0x29a>
 8000f82:	45a4      	cmp	ip, r4
 8000f84:	d965      	bls.n	8001052 <__udivmoddi4+0x29a>
 8000f86:	3b02      	subs	r3, #2
 8000f88:	443c      	add	r4, r7
 8000f8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000f92:	eba4 040c 	sub.w	r4, r4, ip
 8000f96:	429c      	cmp	r4, r3
 8000f98:	46ce      	mov	lr, r9
 8000f9a:	469c      	mov	ip, r3
 8000f9c:	d351      	bcc.n	8001042 <__udivmoddi4+0x28a>
 8000f9e:	d04e      	beq.n	800103e <__udivmoddi4+0x286>
 8000fa0:	b155      	cbz	r5, 8000fb8 <__udivmoddi4+0x200>
 8000fa2:	ebb8 030e 	subs.w	r3, r8, lr
 8000fa6:	eb64 040c 	sbc.w	r4, r4, ip
 8000faa:	fa04 f606 	lsl.w	r6, r4, r6
 8000fae:	40cb      	lsrs	r3, r1
 8000fb0:	431e      	orrs	r6, r3
 8000fb2:	40cc      	lsrs	r4, r1
 8000fb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000fb8:	2100      	movs	r1, #0
 8000fba:	e750      	b.n	8000e5e <__udivmoddi4+0xa6>
 8000fbc:	f1c2 0320 	rsb	r3, r2, #32
 8000fc0:	fa20 f103 	lsr.w	r1, r0, r3
 8000fc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fc8:	fa24 f303 	lsr.w	r3, r4, r3
 8000fcc:	4094      	lsls	r4, r2
 8000fce:	430c      	orrs	r4, r1
 8000fd0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fd4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fd8:	fa1f f78c 	uxth.w	r7, ip
 8000fdc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000fe0:	fb08 3110 	mls	r1, r8, r0, r3
 8000fe4:	0c23      	lsrs	r3, r4, #16
 8000fe6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000fea:	fb00 f107 	mul.w	r1, r0, r7
 8000fee:	4299      	cmp	r1, r3
 8000ff0:	d908      	bls.n	8001004 <__udivmoddi4+0x24c>
 8000ff2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ff6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000ffa:	d22c      	bcs.n	8001056 <__udivmoddi4+0x29e>
 8000ffc:	4299      	cmp	r1, r3
 8000ffe:	d92a      	bls.n	8001056 <__udivmoddi4+0x29e>
 8001000:	3802      	subs	r0, #2
 8001002:	4463      	add	r3, ip
 8001004:	1a5b      	subs	r3, r3, r1
 8001006:	b2a4      	uxth	r4, r4
 8001008:	fbb3 f1f8 	udiv	r1, r3, r8
 800100c:	fb08 3311 	mls	r3, r8, r1, r3
 8001010:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001014:	fb01 f307 	mul.w	r3, r1, r7
 8001018:	42a3      	cmp	r3, r4
 800101a:	d908      	bls.n	800102e <__udivmoddi4+0x276>
 800101c:	eb1c 0404 	adds.w	r4, ip, r4
 8001020:	f101 36ff 	add.w	r6, r1, #4294967295
 8001024:	d213      	bcs.n	800104e <__udivmoddi4+0x296>
 8001026:	42a3      	cmp	r3, r4
 8001028:	d911      	bls.n	800104e <__udivmoddi4+0x296>
 800102a:	3902      	subs	r1, #2
 800102c:	4464      	add	r4, ip
 800102e:	1ae4      	subs	r4, r4, r3
 8001030:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001034:	e739      	b.n	8000eaa <__udivmoddi4+0xf2>
 8001036:	4604      	mov	r4, r0
 8001038:	e6f0      	b.n	8000e1c <__udivmoddi4+0x64>
 800103a:	4608      	mov	r0, r1
 800103c:	e706      	b.n	8000e4c <__udivmoddi4+0x94>
 800103e:	45c8      	cmp	r8, r9
 8001040:	d2ae      	bcs.n	8000fa0 <__udivmoddi4+0x1e8>
 8001042:	ebb9 0e02 	subs.w	lr, r9, r2
 8001046:	eb63 0c07 	sbc.w	ip, r3, r7
 800104a:	3801      	subs	r0, #1
 800104c:	e7a8      	b.n	8000fa0 <__udivmoddi4+0x1e8>
 800104e:	4631      	mov	r1, r6
 8001050:	e7ed      	b.n	800102e <__udivmoddi4+0x276>
 8001052:	4603      	mov	r3, r0
 8001054:	e799      	b.n	8000f8a <__udivmoddi4+0x1d2>
 8001056:	4630      	mov	r0, r6
 8001058:	e7d4      	b.n	8001004 <__udivmoddi4+0x24c>
 800105a:	46d6      	mov	lr, sl
 800105c:	e77f      	b.n	8000f5e <__udivmoddi4+0x1a6>
 800105e:	4463      	add	r3, ip
 8001060:	3802      	subs	r0, #2
 8001062:	e74d      	b.n	8000f00 <__udivmoddi4+0x148>
 8001064:	4606      	mov	r6, r0
 8001066:	4623      	mov	r3, r4
 8001068:	4608      	mov	r0, r1
 800106a:	e70f      	b.n	8000e8c <__udivmoddi4+0xd4>
 800106c:	3e02      	subs	r6, #2
 800106e:	4463      	add	r3, ip
 8001070:	e730      	b.n	8000ed4 <__udivmoddi4+0x11c>
 8001072:	bf00      	nop

08001074 <__aeabi_idiv0>:
 8001074:	4770      	bx	lr
 8001076:	bf00      	nop

08001078 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b08c      	sub	sp, #48	@ 0x30
 800107c:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 800107e:	f04f 33ff 	mov.w	r3, #4294967295
 8001082:	9302      	str	r3, [sp, #8]
 8001084:	2319      	movs	r3, #25
 8001086:	9301      	str	r3, [sp, #4]
 8001088:	463b      	mov	r3, r7
 800108a:	9300      	str	r3, [sp, #0]
 800108c:	2301      	movs	r3, #1
 800108e:	2288      	movs	r2, #136	@ 0x88
 8001090:	21ec      	movs	r1, #236	@ 0xec
 8001092:	4857      	ldr	r0, [pc, #348]	@ (80011f0 <TrimRead+0x178>)
 8001094:	f004 f800 	bl	8005098 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 8001098:	463b      	mov	r3, r7
 800109a:	3319      	adds	r3, #25
 800109c:	f04f 32ff 	mov.w	r2, #4294967295
 80010a0:	9202      	str	r2, [sp, #8]
 80010a2:	2207      	movs	r2, #7
 80010a4:	9201      	str	r2, [sp, #4]
 80010a6:	9300      	str	r3, [sp, #0]
 80010a8:	2301      	movs	r3, #1
 80010aa:	22e1      	movs	r2, #225	@ 0xe1
 80010ac:	21ec      	movs	r1, #236	@ 0xec
 80010ae:	4850      	ldr	r0, [pc, #320]	@ (80011f0 <TrimRead+0x178>)
 80010b0:	f003 fff2 	bl	8005098 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80010b4:	787b      	ldrb	r3, [r7, #1]
 80010b6:	021b      	lsls	r3, r3, #8
 80010b8:	b21a      	sxth	r2, r3
 80010ba:	783b      	ldrb	r3, [r7, #0]
 80010bc:	b21b      	sxth	r3, r3
 80010be:	4313      	orrs	r3, r2
 80010c0:	b21b      	sxth	r3, r3
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	4b4b      	ldr	r3, [pc, #300]	@ (80011f4 <TrimRead+0x17c>)
 80010c6:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80010c8:	78fb      	ldrb	r3, [r7, #3]
 80010ca:	021b      	lsls	r3, r3, #8
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	78bb      	ldrb	r3, [r7, #2]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	4b48      	ldr	r3, [pc, #288]	@ (80011f8 <TrimRead+0x180>)
 80010d8:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 80010da:	797b      	ldrb	r3, [r7, #5]
 80010dc:	021b      	lsls	r3, r3, #8
 80010de:	b21a      	sxth	r2, r3
 80010e0:	793b      	ldrb	r3, [r7, #4]
 80010e2:	b21b      	sxth	r3, r3
 80010e4:	4313      	orrs	r3, r2
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	4b44      	ldr	r3, [pc, #272]	@ (80011fc <TrimRead+0x184>)
 80010ea:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 80010ec:	79fb      	ldrb	r3, [r7, #7]
 80010ee:	021b      	lsls	r3, r3, #8
 80010f0:	b21a      	sxth	r2, r3
 80010f2:	797b      	ldrb	r3, [r7, #5]
 80010f4:	b21b      	sxth	r3, r3
 80010f6:	4313      	orrs	r3, r2
 80010f8:	b21b      	sxth	r3, r3
 80010fa:	b29a      	uxth	r2, r3
 80010fc:	4b40      	ldr	r3, [pc, #256]	@ (8001200 <TrimRead+0x188>)
 80010fe:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001100:	7a7b      	ldrb	r3, [r7, #9]
 8001102:	021b      	lsls	r3, r3, #8
 8001104:	b21a      	sxth	r2, r3
 8001106:	79bb      	ldrb	r3, [r7, #6]
 8001108:	b21b      	sxth	r3, r3
 800110a:	4313      	orrs	r3, r2
 800110c:	b21a      	sxth	r2, r3
 800110e:	4b3d      	ldr	r3, [pc, #244]	@ (8001204 <TrimRead+0x18c>)
 8001110:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001112:	7afb      	ldrb	r3, [r7, #11]
 8001114:	021b      	lsls	r3, r3, #8
 8001116:	b21a      	sxth	r2, r3
 8001118:	7abb      	ldrb	r3, [r7, #10]
 800111a:	b21b      	sxth	r3, r3
 800111c:	4313      	orrs	r3, r2
 800111e:	b21a      	sxth	r2, r3
 8001120:	4b39      	ldr	r3, [pc, #228]	@ (8001208 <TrimRead+0x190>)
 8001122:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001124:	7b7b      	ldrb	r3, [r7, #13]
 8001126:	021b      	lsls	r3, r3, #8
 8001128:	b21a      	sxth	r2, r3
 800112a:	7b3b      	ldrb	r3, [r7, #12]
 800112c:	b21b      	sxth	r3, r3
 800112e:	4313      	orrs	r3, r2
 8001130:	b21a      	sxth	r2, r3
 8001132:	4b36      	ldr	r3, [pc, #216]	@ (800120c <TrimRead+0x194>)
 8001134:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001136:	7bfb      	ldrb	r3, [r7, #15]
 8001138:	021b      	lsls	r3, r3, #8
 800113a:	b21a      	sxth	r2, r3
 800113c:	7bbb      	ldrb	r3, [r7, #14]
 800113e:	b21b      	sxth	r3, r3
 8001140:	4313      	orrs	r3, r2
 8001142:	b21a      	sxth	r2, r3
 8001144:	4b32      	ldr	r3, [pc, #200]	@ (8001210 <TrimRead+0x198>)
 8001146:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001148:	7c7b      	ldrb	r3, [r7, #17]
 800114a:	021b      	lsls	r3, r3, #8
 800114c:	b21a      	sxth	r2, r3
 800114e:	7c3b      	ldrb	r3, [r7, #16]
 8001150:	b21b      	sxth	r3, r3
 8001152:	4313      	orrs	r3, r2
 8001154:	b21a      	sxth	r2, r3
 8001156:	4b2f      	ldr	r3, [pc, #188]	@ (8001214 <TrimRead+0x19c>)
 8001158:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 800115a:	7cfb      	ldrb	r3, [r7, #19]
 800115c:	021b      	lsls	r3, r3, #8
 800115e:	b21a      	sxth	r2, r3
 8001160:	7cbb      	ldrb	r3, [r7, #18]
 8001162:	b21b      	sxth	r3, r3
 8001164:	4313      	orrs	r3, r2
 8001166:	b21a      	sxth	r2, r3
 8001168:	4b2b      	ldr	r3, [pc, #172]	@ (8001218 <TrimRead+0x1a0>)
 800116a:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 800116c:	7d7b      	ldrb	r3, [r7, #21]
 800116e:	021b      	lsls	r3, r3, #8
 8001170:	b21a      	sxth	r2, r3
 8001172:	7d3b      	ldrb	r3, [r7, #20]
 8001174:	b21b      	sxth	r3, r3
 8001176:	4313      	orrs	r3, r2
 8001178:	b21a      	sxth	r2, r3
 800117a:	4b28      	ldr	r3, [pc, #160]	@ (800121c <TrimRead+0x1a4>)
 800117c:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 800117e:	7dfb      	ldrb	r3, [r7, #23]
 8001180:	021b      	lsls	r3, r3, #8
 8001182:	b21a      	sxth	r2, r3
 8001184:	7dbb      	ldrb	r3, [r7, #22]
 8001186:	b21b      	sxth	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b21a      	sxth	r2, r3
 800118c:	4b24      	ldr	r3, [pc, #144]	@ (8001220 <TrimRead+0x1a8>)
 800118e:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 8001190:	7e3b      	ldrb	r3, [r7, #24]
 8001192:	461a      	mov	r2, r3
 8001194:	4b23      	ldr	r3, [pc, #140]	@ (8001224 <TrimRead+0x1ac>)
 8001196:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 8001198:	7ebb      	ldrb	r3, [r7, #26]
 800119a:	021b      	lsls	r3, r3, #8
 800119c:	b21a      	sxth	r2, r3
 800119e:	7e7b      	ldrb	r3, [r7, #25]
 80011a0:	b21b      	sxth	r3, r3
 80011a2:	4313      	orrs	r3, r2
 80011a4:	b21a      	sxth	r2, r3
 80011a6:	4b20      	ldr	r3, [pc, #128]	@ (8001228 <TrimRead+0x1b0>)
 80011a8:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 80011aa:	7efb      	ldrb	r3, [r7, #27]
 80011ac:	461a      	mov	r2, r3
 80011ae:	4b1f      	ldr	r3, [pc, #124]	@ (800122c <TrimRead+0x1b4>)
 80011b0:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80011b2:	7f3b      	ldrb	r3, [r7, #28]
 80011b4:	011b      	lsls	r3, r3, #4
 80011b6:	b21a      	sxth	r2, r3
 80011b8:	7f7b      	ldrb	r3, [r7, #29]
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	f003 030f 	and.w	r3, r3, #15
 80011c0:	b21b      	sxth	r3, r3
 80011c2:	4313      	orrs	r3, r2
 80011c4:	b21a      	sxth	r2, r3
 80011c6:	4b1a      	ldr	r3, [pc, #104]	@ (8001230 <TrimRead+0x1b8>)
 80011c8:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 80011ca:	7fbb      	ldrb	r3, [r7, #30]
 80011cc:	011b      	lsls	r3, r3, #4
 80011ce:	b21a      	sxth	r2, r3
 80011d0:	7f7b      	ldrb	r3, [r7, #29]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	b2db      	uxtb	r3, r3
 80011d6:	b21b      	sxth	r3, r3
 80011d8:	4313      	orrs	r3, r2
 80011da:	b21a      	sxth	r2, r3
 80011dc:	4b15      	ldr	r3, [pc, #84]	@ (8001234 <TrimRead+0x1bc>)
 80011de:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 80011e0:	7ffb      	ldrb	r3, [r7, #31]
 80011e2:	b21a      	sxth	r2, r3
 80011e4:	4b14      	ldr	r3, [pc, #80]	@ (8001238 <TrimRead+0x1c0>)
 80011e6:	801a      	strh	r2, [r3, #0]
}
 80011e8:	bf00      	nop
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200002b4 	.word	0x200002b4
 80011f4:	20000244 	.word	0x20000244
 80011f8:	2000024c 	.word	0x2000024c
 80011fc:	2000024e 	.word	0x2000024e
 8001200:	20000246 	.word	0x20000246
 8001204:	20000250 	.word	0x20000250
 8001208:	20000252 	.word	0x20000252
 800120c:	20000254 	.word	0x20000254
 8001210:	20000256 	.word	0x20000256
 8001214:	20000258 	.word	0x20000258
 8001218:	2000025a 	.word	0x2000025a
 800121c:	2000025c 	.word	0x2000025c
 8001220:	2000025e 	.word	0x2000025e
 8001224:	20000248 	.word	0x20000248
 8001228:	20000260 	.word	0x20000260
 800122c:	2000024a 	.word	0x2000024a
 8001230:	20000262 	.word	0x20000262
 8001234:	20000264 	.word	0x20000264
 8001238:	20000266 	.word	0x20000266

0800123c <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 800123c:	b590      	push	{r4, r7, lr}
 800123e:	b089      	sub	sp, #36	@ 0x24
 8001240:	af04      	add	r7, sp, #16
 8001242:	4604      	mov	r4, r0
 8001244:	4608      	mov	r0, r1
 8001246:	4611      	mov	r1, r2
 8001248:	461a      	mov	r2, r3
 800124a:	4623      	mov	r3, r4
 800124c:	71fb      	strb	r3, [r7, #7]
 800124e:	4603      	mov	r3, r0
 8001250:	71bb      	strb	r3, [r7, #6]
 8001252:	460b      	mov	r3, r1
 8001254:	717b      	strb	r3, [r7, #5]
 8001256:	4613      	mov	r3, r2
 8001258:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 800125a:	f7ff ff0d 	bl	8001078 <TrimRead>


	uint8_t datatowrite = 0;
 800125e:	2300      	movs	r3, #0
 8001260:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8001266:	23b6      	movs	r3, #182	@ 0xb6
 8001268:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800126a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800126e:	9302      	str	r3, [sp, #8]
 8001270:	2301      	movs	r3, #1
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	f107 030f 	add.w	r3, r7, #15
 8001278:	9300      	str	r3, [sp, #0]
 800127a:	2301      	movs	r3, #1
 800127c:	22e0      	movs	r2, #224	@ 0xe0
 800127e:	21ec      	movs	r1, #236	@ 0xec
 8001280:	4858      	ldr	r0, [pc, #352]	@ (80013e4 <BME280_Config+0x1a8>)
 8001282:	f003 fe03 	bl	8004e8c <HAL_I2C_Mem_Write>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d002      	beq.n	8001292 <BME280_Config+0x56>
	{
		return -1;
 800128c:	f04f 33ff 	mov.w	r3, #4294967295
 8001290:	e0a3      	b.n	80013da <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 8001292:	2064      	movs	r0, #100	@ 0x64
 8001294:	f001 fd3c 	bl	8002d10 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 8001298:	797b      	ldrb	r3, [r7, #5]
 800129a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800129c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012a0:	9302      	str	r3, [sp, #8]
 80012a2:	2301      	movs	r3, #1
 80012a4:	9301      	str	r3, [sp, #4]
 80012a6:	f107 030f 	add.w	r3, r7, #15
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	2301      	movs	r3, #1
 80012ae:	22f2      	movs	r2, #242	@ 0xf2
 80012b0:	21ec      	movs	r1, #236	@ 0xec
 80012b2:	484c      	ldr	r0, [pc, #304]	@ (80013e4 <BME280_Config+0x1a8>)
 80012b4:	f003 fdea 	bl	8004e8c <HAL_I2C_Mem_Write>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d002      	beq.n	80012c4 <BME280_Config+0x88>
	{
		return -1;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295
 80012c2:	e08a      	b.n	80013da <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80012c4:	2064      	movs	r0, #100	@ 0x64
 80012c6:	f001 fd23 	bl	8002d10 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 80012ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ce:	9302      	str	r3, [sp, #8]
 80012d0:	2301      	movs	r3, #1
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	f107 030e 	add.w	r3, r7, #14
 80012d8:	9300      	str	r3, [sp, #0]
 80012da:	2301      	movs	r3, #1
 80012dc:	22f2      	movs	r2, #242	@ 0xf2
 80012de:	21ec      	movs	r1, #236	@ 0xec
 80012e0:	4840      	ldr	r0, [pc, #256]	@ (80013e4 <BME280_Config+0x1a8>)
 80012e2:	f003 fed9 	bl	8005098 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012e6:	7bba      	ldrb	r2, [r7, #14]
 80012e8:	7bfb      	ldrb	r3, [r7, #15]
 80012ea:	429a      	cmp	r2, r3
 80012ec:	d002      	beq.n	80012f4 <BME280_Config+0xb8>
	{
		return -1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
 80012f2:	e072      	b.n	80013da <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 80012f4:	f897 3020 	ldrb.w	r3, [r7, #32]
 80012f8:	015b      	lsls	r3, r3, #5
 80012fa:	b25a      	sxtb	r2, r3
 80012fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	b25b      	sxtb	r3, r3
 8001304:	4313      	orrs	r3, r2
 8001306:	b25b      	sxtb	r3, r3
 8001308:	b2db      	uxtb	r3, r3
 800130a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800130c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001310:	9302      	str	r3, [sp, #8]
 8001312:	2301      	movs	r3, #1
 8001314:	9301      	str	r3, [sp, #4]
 8001316:	f107 030f 	add.w	r3, r7, #15
 800131a:	9300      	str	r3, [sp, #0]
 800131c:	2301      	movs	r3, #1
 800131e:	22f5      	movs	r2, #245	@ 0xf5
 8001320:	21ec      	movs	r1, #236	@ 0xec
 8001322:	4830      	ldr	r0, [pc, #192]	@ (80013e4 <BME280_Config+0x1a8>)
 8001324:	f003 fdb2 	bl	8004e8c <HAL_I2C_Mem_Write>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d002      	beq.n	8001334 <BME280_Config+0xf8>
	{
		return -1;
 800132e:	f04f 33ff 	mov.w	r3, #4294967295
 8001332:	e052      	b.n	80013da <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001334:	2064      	movs	r0, #100	@ 0x64
 8001336:	f001 fceb 	bl	8002d10 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800133a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800133e:	9302      	str	r3, [sp, #8]
 8001340:	2301      	movs	r3, #1
 8001342:	9301      	str	r3, [sp, #4]
 8001344:	f107 030e 	add.w	r3, r7, #14
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	2301      	movs	r3, #1
 800134c:	22f5      	movs	r2, #245	@ 0xf5
 800134e:	21ec      	movs	r1, #236	@ 0xec
 8001350:	4824      	ldr	r0, [pc, #144]	@ (80013e4 <BME280_Config+0x1a8>)
 8001352:	f003 fea1 	bl	8005098 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001356:	7bba      	ldrb	r2, [r7, #14]
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	429a      	cmp	r2, r3
 800135c:	d002      	beq.n	8001364 <BME280_Config+0x128>
	{
		return -1;
 800135e:	f04f 33ff 	mov.w	r3, #4294967295
 8001362:	e03a      	b.n	80013da <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001364:	79fb      	ldrb	r3, [r7, #7]
 8001366:	015b      	lsls	r3, r3, #5
 8001368:	b25a      	sxtb	r2, r3
 800136a:	79bb      	ldrb	r3, [r7, #6]
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	b25b      	sxtb	r3, r3
 8001370:	4313      	orrs	r3, r2
 8001372:	b25a      	sxtb	r2, r3
 8001374:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001378:	4313      	orrs	r3, r2
 800137a:	b25b      	sxtb	r3, r3
 800137c:	b2db      	uxtb	r3, r3
 800137e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001380:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001384:	9302      	str	r3, [sp, #8]
 8001386:	2301      	movs	r3, #1
 8001388:	9301      	str	r3, [sp, #4]
 800138a:	f107 030f 	add.w	r3, r7, #15
 800138e:	9300      	str	r3, [sp, #0]
 8001390:	2301      	movs	r3, #1
 8001392:	22f4      	movs	r2, #244	@ 0xf4
 8001394:	21ec      	movs	r1, #236	@ 0xec
 8001396:	4813      	ldr	r0, [pc, #76]	@ (80013e4 <BME280_Config+0x1a8>)
 8001398:	f003 fd78 	bl	8004e8c <HAL_I2C_Mem_Write>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d002      	beq.n	80013a8 <BME280_Config+0x16c>
	{
		return -1;
 80013a2:	f04f 33ff 	mov.w	r3, #4294967295
 80013a6:	e018      	b.n	80013da <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80013a8:	2064      	movs	r0, #100	@ 0x64
 80013aa:	f001 fcb1 	bl	8002d10 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80013ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013b2:	9302      	str	r3, [sp, #8]
 80013b4:	2301      	movs	r3, #1
 80013b6:	9301      	str	r3, [sp, #4]
 80013b8:	f107 030e 	add.w	r3, r7, #14
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2301      	movs	r3, #1
 80013c0:	22f4      	movs	r2, #244	@ 0xf4
 80013c2:	21ec      	movs	r1, #236	@ 0xec
 80013c4:	4807      	ldr	r0, [pc, #28]	@ (80013e4 <BME280_Config+0x1a8>)
 80013c6:	f003 fe67 	bl	8005098 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013ca:	7bba      	ldrb	r2, [r7, #14]
 80013cc:	7bfb      	ldrb	r3, [r7, #15]
 80013ce:	429a      	cmp	r2, r3
 80013d0:	d002      	beq.n	80013d8 <BME280_Config+0x19c>
	{
		return -1;
 80013d2:	f04f 33ff 	mov.w	r3, #4294967295
 80013d6:	e000      	b.n	80013da <BME280_Config+0x19e>
	}

	return 0;
 80013d8:	2300      	movs	r3, #0
}
 80013da:	4618      	mov	r0, r3
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd90      	pop	{r4, r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200002b4 	.word	0x200002b4

080013e8 <BMEReadRaw>:


int BMEReadRaw(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 80013ee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013f2:	9302      	str	r3, [sp, #8]
 80013f4:	2301      	movs	r3, #1
 80013f6:	9301      	str	r3, [sp, #4]
 80013f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001474 <BMEReadRaw+0x8c>)
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	2301      	movs	r3, #1
 80013fe:	22d0      	movs	r2, #208	@ 0xd0
 8001400:	21ec      	movs	r1, #236	@ 0xec
 8001402:	481d      	ldr	r0, [pc, #116]	@ (8001478 <BMEReadRaw+0x90>)
 8001404:	f003 fe48 	bl	8005098 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001408:	4b1a      	ldr	r3, [pc, #104]	@ (8001474 <BMEReadRaw+0x8c>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	2b60      	cmp	r3, #96	@ 0x60
 800140e:	d12a      	bne.n	8001466 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001410:	f04f 33ff 	mov.w	r3, #4294967295
 8001414:	9302      	str	r3, [sp, #8]
 8001416:	2308      	movs	r3, #8
 8001418:	9301      	str	r3, [sp, #4]
 800141a:	463b      	mov	r3, r7
 800141c:	9300      	str	r3, [sp, #0]
 800141e:	2301      	movs	r3, #1
 8001420:	22f7      	movs	r2, #247	@ 0xf7
 8001422:	21ec      	movs	r1, #236	@ 0xec
 8001424:	4814      	ldr	r0, [pc, #80]	@ (8001478 <BMEReadRaw+0x90>)
 8001426:	f003 fe37 	bl	8005098 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800142a:	783b      	ldrb	r3, [r7, #0]
 800142c:	031a      	lsls	r2, r3, #12
 800142e:	787b      	ldrb	r3, [r7, #1]
 8001430:	011b      	lsls	r3, r3, #4
 8001432:	4313      	orrs	r3, r2
 8001434:	78ba      	ldrb	r2, [r7, #2]
 8001436:	0912      	lsrs	r2, r2, #4
 8001438:	b2d2      	uxtb	r2, r2
 800143a:	4313      	orrs	r3, r2
 800143c:	4a0f      	ldr	r2, [pc, #60]	@ (800147c <BMEReadRaw+0x94>)
 800143e:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001440:	78fb      	ldrb	r3, [r7, #3]
 8001442:	031a      	lsls	r2, r3, #12
 8001444:	793b      	ldrb	r3, [r7, #4]
 8001446:	011b      	lsls	r3, r3, #4
 8001448:	4313      	orrs	r3, r2
 800144a:	797a      	ldrb	r2, [r7, #5]
 800144c:	0912      	lsrs	r2, r2, #4
 800144e:	b2d2      	uxtb	r2, r2
 8001450:	4313      	orrs	r3, r2
 8001452:	4a0b      	ldr	r2, [pc, #44]	@ (8001480 <BMEReadRaw+0x98>)
 8001454:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001456:	79bb      	ldrb	r3, [r7, #6]
 8001458:	021b      	lsls	r3, r3, #8
 800145a:	79fa      	ldrb	r2, [r7, #7]
 800145c:	4313      	orrs	r3, r2
 800145e:	4a09      	ldr	r2, [pc, #36]	@ (8001484 <BMEReadRaw+0x9c>)
 8001460:	6013      	str	r3, [r2, #0]

		return 0;
 8001462:	2300      	movs	r3, #0
 8001464:	e001      	b.n	800146a <BMEReadRaw+0x82>
	}

	else return -1;
 8001466:	f04f 33ff 	mov.w	r3, #4294967295
}
 800146a:	4618      	mov	r0, r3
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000234 	.word	0x20000234
 8001478:	200002b4 	.word	0x200002b4
 800147c:	2000023c 	.word	0x2000023c
 8001480:	20000238 	.word	0x20000238
 8001484:	20000240 	.word	0x20000240

08001488 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001488:	b480      	push	{r7}
 800148a:	b087      	sub	sp, #28
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	10da      	asrs	r2, r3, #3
 8001494:	4b19      	ldr	r3, [pc, #100]	@ (80014fc <BME280_compensate_T_int32+0x74>)
 8001496:	881b      	ldrh	r3, [r3, #0]
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	4a18      	ldr	r2, [pc, #96]	@ (8001500 <BME280_compensate_T_int32+0x78>)
 800149e:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014a2:	fb02 f303 	mul.w	r3, r2, r3
 80014a6:	12db      	asrs	r3, r3, #11
 80014a8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	111b      	asrs	r3, r3, #4
 80014ae:	4a13      	ldr	r2, [pc, #76]	@ (80014fc <BME280_compensate_T_int32+0x74>)
 80014b0:	8812      	ldrh	r2, [r2, #0]
 80014b2:	1a9b      	subs	r3, r3, r2
 80014b4:	687a      	ldr	r2, [r7, #4]
 80014b6:	1112      	asrs	r2, r2, #4
 80014b8:	4910      	ldr	r1, [pc, #64]	@ (80014fc <BME280_compensate_T_int32+0x74>)
 80014ba:	8809      	ldrh	r1, [r1, #0]
 80014bc:	1a52      	subs	r2, r2, r1
 80014be:	fb02 f303 	mul.w	r3, r2, r3
 80014c2:	131b      	asrs	r3, r3, #12
 80014c4:	4a0f      	ldr	r2, [pc, #60]	@ (8001504 <BME280_compensate_T_int32+0x7c>)
 80014c6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014ca:	fb02 f303 	mul.w	r3, r2, r3
 80014ce:	139b      	asrs	r3, r3, #14
 80014d0:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4413      	add	r3, r2
 80014d8:	4a0b      	ldr	r2, [pc, #44]	@ (8001508 <BME280_compensate_T_int32+0x80>)
 80014da:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80014dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001508 <BME280_compensate_T_int32+0x80>)
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	4613      	mov	r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	4413      	add	r3, r2
 80014e6:	3380      	adds	r3, #128	@ 0x80
 80014e8:	121b      	asrs	r3, r3, #8
 80014ea:	60fb      	str	r3, [r7, #12]
	return T;
 80014ec:	68fb      	ldr	r3, [r7, #12]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	371c      	adds	r7, #28
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000244 	.word	0x20000244
 8001500:	2000024c 	.word	0x2000024c
 8001504:	2000024e 	.word	0x2000024e
 8001508:	20000268 	.word	0x20000268

0800150c <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800150c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001510:	b0ca      	sub	sp, #296	@ 0x128
 8001512:	af00      	add	r7, sp, #0
 8001514:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001518:	4baf      	ldr	r3, [pc, #700]	@ (80017d8 <BME280_compensate_P_int64+0x2cc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	17da      	asrs	r2, r3, #31
 800151e:	461c      	mov	r4, r3
 8001520:	4615      	mov	r5, r2
 8001522:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001526:	f145 3bff 	adc.w	fp, r5, #4294967295
 800152a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800152e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001532:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001536:	fb03 f102 	mul.w	r1, r3, r2
 800153a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800153e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001542:	fb02 f303 	mul.w	r3, r2, r3
 8001546:	18ca      	adds	r2, r1, r3
 8001548:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800154c:	fba3 8903 	umull	r8, r9, r3, r3
 8001550:	eb02 0309 	add.w	r3, r2, r9
 8001554:	4699      	mov	r9, r3
 8001556:	4ba1      	ldr	r3, [pc, #644]	@ (80017dc <BME280_compensate_P_int64+0x2d0>)
 8001558:	f9b3 3000 	ldrsh.w	r3, [r3]
 800155c:	b21b      	sxth	r3, r3
 800155e:	17da      	asrs	r2, r3, #31
 8001560:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001564:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001568:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800156c:	4603      	mov	r3, r0
 800156e:	fb03 f209 	mul.w	r2, r3, r9
 8001572:	460b      	mov	r3, r1
 8001574:	fb08 f303 	mul.w	r3, r8, r3
 8001578:	4413      	add	r3, r2
 800157a:	4602      	mov	r2, r0
 800157c:	fba8 1202 	umull	r1, r2, r8, r2
 8001580:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001584:	460a      	mov	r2, r1
 8001586:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 800158a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800158e:	4413      	add	r3, r2
 8001590:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8001594:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001598:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 800159c:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80015a0:	4b8f      	ldr	r3, [pc, #572]	@ (80017e0 <BME280_compensate_P_int64+0x2d4>)
 80015a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015a6:	b21b      	sxth	r3, r3
 80015a8:	17da      	asrs	r2, r3, #31
 80015aa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80015ae:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80015b2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015b6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80015ba:	462a      	mov	r2, r5
 80015bc:	fb02 f203 	mul.w	r2, r2, r3
 80015c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015c4:	4621      	mov	r1, r4
 80015c6:	fb01 f303 	mul.w	r3, r1, r3
 80015ca:	441a      	add	r2, r3
 80015cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015d0:	4621      	mov	r1, r4
 80015d2:	fba3 1301 	umull	r1, r3, r3, r1
 80015d6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80015da:	460b      	mov	r3, r1
 80015dc:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80015e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80015e4:	18d3      	adds	r3, r2, r3
 80015e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80015ea:	f04f 0000 	mov.w	r0, #0
 80015ee:	f04f 0100 	mov.w	r1, #0
 80015f2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80015f6:	462b      	mov	r3, r5
 80015f8:	0459      	lsls	r1, r3, #17
 80015fa:	4623      	mov	r3, r4
 80015fc:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001600:	4623      	mov	r3, r4
 8001602:	0458      	lsls	r0, r3, #17
 8001604:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001608:	1814      	adds	r4, r2, r0
 800160a:	643c      	str	r4, [r7, #64]	@ 0x40
 800160c:	414b      	adcs	r3, r1
 800160e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001610:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001614:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001618:	4b72      	ldr	r3, [pc, #456]	@ (80017e4 <BME280_compensate_P_int64+0x2d8>)
 800161a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800161e:	b21b      	sxth	r3, r3
 8001620:	17da      	asrs	r2, r3, #31
 8001622:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001626:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800162a:	f04f 0000 	mov.w	r0, #0
 800162e:	f04f 0100 	mov.w	r1, #0
 8001632:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001636:	00d9      	lsls	r1, r3, #3
 8001638:	2000      	movs	r0, #0
 800163a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800163e:	1814      	adds	r4, r2, r0
 8001640:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001642:	414b      	adcs	r3, r1
 8001644:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001646:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800164a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800164e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001652:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001656:	fb03 f102 	mul.w	r1, r3, r2
 800165a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800165e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001662:	fb02 f303 	mul.w	r3, r2, r3
 8001666:	18ca      	adds	r2, r1, r3
 8001668:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800166c:	fba3 1303 	umull	r1, r3, r3, r3
 8001670:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001674:	460b      	mov	r3, r1
 8001676:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800167a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800167e:	18d3      	adds	r3, r2, r3
 8001680:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001684:	4b58      	ldr	r3, [pc, #352]	@ (80017e8 <BME280_compensate_P_int64+0x2dc>)
 8001686:	f9b3 3000 	ldrsh.w	r3, [r3]
 800168a:	b21b      	sxth	r3, r3
 800168c:	17da      	asrs	r2, r3, #31
 800168e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001692:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001696:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800169a:	462b      	mov	r3, r5
 800169c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80016a0:	4642      	mov	r2, r8
 80016a2:	fb02 f203 	mul.w	r2, r2, r3
 80016a6:	464b      	mov	r3, r9
 80016a8:	4621      	mov	r1, r4
 80016aa:	fb01 f303 	mul.w	r3, r1, r3
 80016ae:	4413      	add	r3, r2
 80016b0:	4622      	mov	r2, r4
 80016b2:	4641      	mov	r1, r8
 80016b4:	fba2 1201 	umull	r1, r2, r2, r1
 80016b8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80016bc:	460a      	mov	r2, r1
 80016be:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80016c2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80016c6:	4413      	add	r3, r2
 80016c8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80016cc:	f04f 0000 	mov.w	r0, #0
 80016d0:	f04f 0100 	mov.w	r1, #0
 80016d4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80016d8:	4623      	mov	r3, r4
 80016da:	0a18      	lsrs	r0, r3, #8
 80016dc:	462b      	mov	r3, r5
 80016de:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80016e2:	462b      	mov	r3, r5
 80016e4:	1219      	asrs	r1, r3, #8
 80016e6:	4b41      	ldr	r3, [pc, #260]	@ (80017ec <BME280_compensate_P_int64+0x2e0>)
 80016e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016ec:	b21b      	sxth	r3, r3
 80016ee:	17da      	asrs	r2, r3, #31
 80016f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80016f4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80016f8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80016fc:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001700:	464a      	mov	r2, r9
 8001702:	fb02 f203 	mul.w	r2, r2, r3
 8001706:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800170a:	4644      	mov	r4, r8
 800170c:	fb04 f303 	mul.w	r3, r4, r3
 8001710:	441a      	add	r2, r3
 8001712:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001716:	4644      	mov	r4, r8
 8001718:	fba3 4304 	umull	r4, r3, r3, r4
 800171c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001720:	4623      	mov	r3, r4
 8001722:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001726:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800172a:	18d3      	adds	r3, r2, r3
 800172c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001730:	f04f 0200 	mov.w	r2, #0
 8001734:	f04f 0300 	mov.w	r3, #0
 8001738:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800173c:	464c      	mov	r4, r9
 800173e:	0323      	lsls	r3, r4, #12
 8001740:	4644      	mov	r4, r8
 8001742:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001746:	4644      	mov	r4, r8
 8001748:	0322      	lsls	r2, r4, #12
 800174a:	1884      	adds	r4, r0, r2
 800174c:	633c      	str	r4, [r7, #48]	@ 0x30
 800174e:	eb41 0303 	adc.w	r3, r1, r3
 8001752:	637b      	str	r3, [r7, #52]	@ 0x34
 8001754:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001758:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800175c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001760:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001764:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001768:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800176c:	4b20      	ldr	r3, [pc, #128]	@ (80017f0 <BME280_compensate_P_int64+0x2e4>)
 800176e:	881b      	ldrh	r3, [r3, #0]
 8001770:	b29b      	uxth	r3, r3
 8001772:	2200      	movs	r2, #0
 8001774:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001778:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800177c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001780:	462b      	mov	r3, r5
 8001782:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001786:	4642      	mov	r2, r8
 8001788:	fb02 f203 	mul.w	r2, r2, r3
 800178c:	464b      	mov	r3, r9
 800178e:	4621      	mov	r1, r4
 8001790:	fb01 f303 	mul.w	r3, r1, r3
 8001794:	4413      	add	r3, r2
 8001796:	4622      	mov	r2, r4
 8001798:	4641      	mov	r1, r8
 800179a:	fba2 1201 	umull	r1, r2, r2, r1
 800179e:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80017a2:	460a      	mov	r2, r1
 80017a4:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80017a8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80017ac:	4413      	add	r3, r2
 80017ae:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80017b2:	f04f 0200 	mov.w	r2, #0
 80017b6:	f04f 0300 	mov.w	r3, #0
 80017ba:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80017be:	4629      	mov	r1, r5
 80017c0:	104a      	asrs	r2, r1, #1
 80017c2:	4629      	mov	r1, r5
 80017c4:	17cb      	asrs	r3, r1, #31
 80017c6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 80017ca:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017ce:	4313      	orrs	r3, r2
 80017d0:	d110      	bne.n	80017f4 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 80017d2:	2300      	movs	r3, #0
 80017d4:	e154      	b.n	8001a80 <BME280_compensate_P_int64+0x574>
 80017d6:	bf00      	nop
 80017d8:	20000268 	.word	0x20000268
 80017dc:	20000258 	.word	0x20000258
 80017e0:	20000256 	.word	0x20000256
 80017e4:	20000254 	.word	0x20000254
 80017e8:	20000252 	.word	0x20000252
 80017ec:	20000250 	.word	0x20000250
 80017f0:	20000246 	.word	0x20000246
	}
	p = 1048576-adc_P;
 80017f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80017f8:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80017fc:	17da      	asrs	r2, r3, #31
 80017fe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001800:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001802:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001806:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800180a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800180e:	105b      	asrs	r3, r3, #1
 8001810:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001814:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001818:	07db      	lsls	r3, r3, #31
 800181a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800181e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001822:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001826:	4621      	mov	r1, r4
 8001828:	1a89      	subs	r1, r1, r2
 800182a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800182c:	4629      	mov	r1, r5
 800182e:	eb61 0303 	sbc.w	r3, r1, r3
 8001832:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001834:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001838:	4622      	mov	r2, r4
 800183a:	462b      	mov	r3, r5
 800183c:	1891      	adds	r1, r2, r2
 800183e:	6239      	str	r1, [r7, #32]
 8001840:	415b      	adcs	r3, r3
 8001842:	627b      	str	r3, [r7, #36]	@ 0x24
 8001844:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001848:	4621      	mov	r1, r4
 800184a:	1851      	adds	r1, r2, r1
 800184c:	61b9      	str	r1, [r7, #24]
 800184e:	4629      	mov	r1, r5
 8001850:	414b      	adcs	r3, r1
 8001852:	61fb      	str	r3, [r7, #28]
 8001854:	f04f 0200 	mov.w	r2, #0
 8001858:	f04f 0300 	mov.w	r3, #0
 800185c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001860:	4649      	mov	r1, r9
 8001862:	018b      	lsls	r3, r1, #6
 8001864:	4641      	mov	r1, r8
 8001866:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800186a:	4641      	mov	r1, r8
 800186c:	018a      	lsls	r2, r1, #6
 800186e:	4641      	mov	r1, r8
 8001870:	1889      	adds	r1, r1, r2
 8001872:	6139      	str	r1, [r7, #16]
 8001874:	4649      	mov	r1, r9
 8001876:	eb43 0101 	adc.w	r1, r3, r1
 800187a:	6179      	str	r1, [r7, #20]
 800187c:	f04f 0200 	mov.w	r2, #0
 8001880:	f04f 0300 	mov.w	r3, #0
 8001884:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001888:	4649      	mov	r1, r9
 800188a:	008b      	lsls	r3, r1, #2
 800188c:	4641      	mov	r1, r8
 800188e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001892:	4641      	mov	r1, r8
 8001894:	008a      	lsls	r2, r1, #2
 8001896:	4610      	mov	r0, r2
 8001898:	4619      	mov	r1, r3
 800189a:	4603      	mov	r3, r0
 800189c:	4622      	mov	r2, r4
 800189e:	189b      	adds	r3, r3, r2
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	460b      	mov	r3, r1
 80018a4:	462a      	mov	r2, r5
 80018a6:	eb42 0303 	adc.w	r3, r2, r3
 80018aa:	60fb      	str	r3, [r7, #12]
 80018ac:	f04f 0200 	mov.w	r2, #0
 80018b0:	f04f 0300 	mov.w	r3, #0
 80018b4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80018b8:	4649      	mov	r1, r9
 80018ba:	008b      	lsls	r3, r1, #2
 80018bc:	4641      	mov	r1, r8
 80018be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018c2:	4641      	mov	r1, r8
 80018c4:	008a      	lsls	r2, r1, #2
 80018c6:	4610      	mov	r0, r2
 80018c8:	4619      	mov	r1, r3
 80018ca:	4603      	mov	r3, r0
 80018cc:	4622      	mov	r2, r4
 80018ce:	189b      	adds	r3, r3, r2
 80018d0:	673b      	str	r3, [r7, #112]	@ 0x70
 80018d2:	462b      	mov	r3, r5
 80018d4:	460a      	mov	r2, r1
 80018d6:	eb42 0303 	adc.w	r3, r2, r3
 80018da:	677b      	str	r3, [r7, #116]	@ 0x74
 80018dc:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80018e0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80018e4:	f7ff fa00 	bl	8000ce8 <__aeabi_ldivmod>
 80018e8:	4602      	mov	r2, r0
 80018ea:	460b      	mov	r3, r1
 80018ec:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 80018f0:	4b66      	ldr	r3, [pc, #408]	@ (8001a8c <BME280_compensate_P_int64+0x580>)
 80018f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80018f6:	b21b      	sxth	r3, r3
 80018f8:	17da      	asrs	r2, r3, #31
 80018fa:	66bb      	str	r3, [r7, #104]	@ 0x68
 80018fc:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80018fe:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001902:	f04f 0000 	mov.w	r0, #0
 8001906:	f04f 0100 	mov.w	r1, #0
 800190a:	0b50      	lsrs	r0, r2, #13
 800190c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001910:	1359      	asrs	r1, r3, #13
 8001912:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001916:	462b      	mov	r3, r5
 8001918:	fb00 f203 	mul.w	r2, r0, r3
 800191c:	4623      	mov	r3, r4
 800191e:	fb03 f301 	mul.w	r3, r3, r1
 8001922:	4413      	add	r3, r2
 8001924:	4622      	mov	r2, r4
 8001926:	fba2 1200 	umull	r1, r2, r2, r0
 800192a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800192e:	460a      	mov	r2, r1
 8001930:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001934:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001938:	4413      	add	r3, r2
 800193a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800193e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001942:	f04f 0000 	mov.w	r0, #0
 8001946:	f04f 0100 	mov.w	r1, #0
 800194a:	0b50      	lsrs	r0, r2, #13
 800194c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001950:	1359      	asrs	r1, r3, #13
 8001952:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001956:	462b      	mov	r3, r5
 8001958:	fb00 f203 	mul.w	r2, r0, r3
 800195c:	4623      	mov	r3, r4
 800195e:	fb03 f301 	mul.w	r3, r3, r1
 8001962:	4413      	add	r3, r2
 8001964:	4622      	mov	r2, r4
 8001966:	fba2 1200 	umull	r1, r2, r2, r0
 800196a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800196e:	460a      	mov	r2, r1
 8001970:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001974:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001978:	4413      	add	r3, r2
 800197a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800197e:	f04f 0200 	mov.w	r2, #0
 8001982:	f04f 0300 	mov.w	r3, #0
 8001986:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800198a:	4621      	mov	r1, r4
 800198c:	0e4a      	lsrs	r2, r1, #25
 800198e:	4629      	mov	r1, r5
 8001990:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001994:	4629      	mov	r1, r5
 8001996:	164b      	asrs	r3, r1, #25
 8001998:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 800199c:	4b3c      	ldr	r3, [pc, #240]	@ (8001a90 <BME280_compensate_P_int64+0x584>)
 800199e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019a2:	b21b      	sxth	r3, r3
 80019a4:	17da      	asrs	r2, r3, #31
 80019a6:	663b      	str	r3, [r7, #96]	@ 0x60
 80019a8:	667a      	str	r2, [r7, #100]	@ 0x64
 80019aa:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80019ae:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80019b2:	462a      	mov	r2, r5
 80019b4:	fb02 f203 	mul.w	r2, r2, r3
 80019b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80019bc:	4621      	mov	r1, r4
 80019be:	fb01 f303 	mul.w	r3, r1, r3
 80019c2:	4413      	add	r3, r2
 80019c4:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80019c8:	4621      	mov	r1, r4
 80019ca:	fba2 1201 	umull	r1, r2, r2, r1
 80019ce:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80019d2:	460a      	mov	r2, r1
 80019d4:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80019d8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80019dc:	4413      	add	r3, r2
 80019de:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80019e2:	f04f 0200 	mov.w	r2, #0
 80019e6:	f04f 0300 	mov.w	r3, #0
 80019ea:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80019ee:	4621      	mov	r1, r4
 80019f0:	0cca      	lsrs	r2, r1, #19
 80019f2:	4629      	mov	r1, r5
 80019f4:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80019f8:	4629      	mov	r1, r5
 80019fa:	14cb      	asrs	r3, r1, #19
 80019fc:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a00:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001a04:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001a08:	1884      	adds	r4, r0, r2
 8001a0a:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001a0c:	eb41 0303 	adc.w	r3, r1, r3
 8001a10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001a12:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a16:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001a1a:	4621      	mov	r1, r4
 8001a1c:	1889      	adds	r1, r1, r2
 8001a1e:	6539      	str	r1, [r7, #80]	@ 0x50
 8001a20:	4629      	mov	r1, r5
 8001a22:	eb43 0101 	adc.w	r1, r3, r1
 8001a26:	6579      	str	r1, [r7, #84]	@ 0x54
 8001a28:	f04f 0000 	mov.w	r0, #0
 8001a2c:	f04f 0100 	mov.w	r1, #0
 8001a30:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001a34:	4623      	mov	r3, r4
 8001a36:	0a18      	lsrs	r0, r3, #8
 8001a38:	462b      	mov	r3, r5
 8001a3a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a3e:	462b      	mov	r3, r5
 8001a40:	1219      	asrs	r1, r3, #8
 8001a42:	4b14      	ldr	r3, [pc, #80]	@ (8001a94 <BME280_compensate_P_int64+0x588>)
 8001a44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a48:	b21b      	sxth	r3, r3
 8001a4a:	17da      	asrs	r2, r3, #31
 8001a4c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a4e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001a50:	f04f 0200 	mov.w	r2, #0
 8001a54:	f04f 0300 	mov.w	r3, #0
 8001a58:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001a5c:	464c      	mov	r4, r9
 8001a5e:	0123      	lsls	r3, r4, #4
 8001a60:	4644      	mov	r4, r8
 8001a62:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a66:	4644      	mov	r4, r8
 8001a68:	0122      	lsls	r2, r4, #4
 8001a6a:	1884      	adds	r4, r0, r2
 8001a6c:	603c      	str	r4, [r7, #0]
 8001a6e:	eb41 0303 	adc.w	r3, r1, r3
 8001a72:	607b      	str	r3, [r7, #4]
 8001a74:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a78:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8001a7c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001a86:	46bd      	mov	sp, r7
 8001a88:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a8c:	2000025e 	.word	0x2000025e
 8001a90:	2000025c 	.word	0x2000025c
 8001a94:	2000025a 	.word	0x2000025a

08001a98 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001aa0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b54 <bme280_compensate_H_int32+0xbc>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001aa8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	039a      	lsls	r2, r3, #14
 8001aae:	4b2a      	ldr	r3, [pc, #168]	@ (8001b58 <bme280_compensate_H_int32+0xc0>)
 8001ab0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ab4:	051b      	lsls	r3, r3, #20
 8001ab6:	1ad2      	subs	r2, r2, r3
 8001ab8:	4b28      	ldr	r3, [pc, #160]	@ (8001b5c <bme280_compensate_H_int32+0xc4>)
 8001aba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001abe:	4619      	mov	r1, r3
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	fb01 f303 	mul.w	r3, r1, r3
 8001ac6:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001ac8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001acc:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001ace:	4a24      	ldr	r2, [pc, #144]	@ (8001b60 <bme280_compensate_H_int32+0xc8>)
 8001ad0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001ad4:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001ad6:	68fa      	ldr	r2, [r7, #12]
 8001ad8:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001adc:	1292      	asrs	r2, r2, #10
 8001ade:	4921      	ldr	r1, [pc, #132]	@ (8001b64 <bme280_compensate_H_int32+0xcc>)
 8001ae0:	8809      	ldrh	r1, [r1, #0]
 8001ae2:	4608      	mov	r0, r1
 8001ae4:	68f9      	ldr	r1, [r7, #12]
 8001ae6:	fb00 f101 	mul.w	r1, r0, r1
 8001aea:	12c9      	asrs	r1, r1, #11
 8001aec:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001af0:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001af4:	1292      	asrs	r2, r2, #10
 8001af6:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001afa:	491b      	ldr	r1, [pc, #108]	@ (8001b68 <bme280_compensate_H_int32+0xd0>)
 8001afc:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b00:	fb01 f202 	mul.w	r2, r1, r2
 8001b04:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
					8192) >> 14));
 8001b08:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b0a:	fb02 f303 	mul.w	r3, r2, r3
 8001b0e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	13db      	asrs	r3, r3, #15
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	13d2      	asrs	r2, r2, #15
 8001b18:	fb02 f303 	mul.w	r3, r2, r3
 8001b1c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001b1e:	4a13      	ldr	r2, [pc, #76]	@ (8001b6c <bme280_compensate_H_int32+0xd4>)
 8001b20:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b22:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001b26:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b28:	68fa      	ldr	r2, [r7, #12]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b34:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001b3c:	bfa8      	it	ge
 8001b3e:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001b42:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	131b      	asrs	r3, r3, #12
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	3714      	adds	r7, #20
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr
 8001b54:	20000268 	.word	0x20000268
 8001b58:	20000262 	.word	0x20000262
 8001b5c:	20000264 	.word	0x20000264
 8001b60:	20000266 	.word	0x20000266
 8001b64:	2000024a 	.word	0x2000024a
 8001b68:	20000260 	.word	0x20000260
 8001b6c:	20000248 	.word	0x20000248

08001b70 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001b74:	f7ff fc38 	bl	80013e8 <BMEReadRaw>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d16c      	bne.n	8001c58 <BME280_Measure+0xe8>
	{
		  if (tRaw == 0x800000) SD.Temperature = 0; // value in case temp measurement was disabled
 8001b7e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c74 <BME280_Measure+0x104>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b86:	d104      	bne.n	8001b92 <BME280_Measure+0x22>
 8001b88:	4b3b      	ldr	r3, [pc, #236]	@ (8001c78 <BME280_Measure+0x108>)
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
 8001b90:	e016      	b.n	8001bc0 <BME280_Measure+0x50>
		  else
		  {
			  SD.Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001b92:	4b38      	ldr	r3, [pc, #224]	@ (8001c74 <BME280_Measure+0x104>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4618      	mov	r0, r3
 8001b98:	f7ff fc76 	bl	8001488 <BME280_compensate_T_int32>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7fe fd10 	bl	80005c4 <__aeabi_i2d>
 8001ba4:	f04f 0200 	mov.w	r2, #0
 8001ba8:	4b34      	ldr	r3, [pc, #208]	@ (8001c7c <BME280_Measure+0x10c>)
 8001baa:	f7fe fe9f 	bl	80008ec <__aeabi_ddiv>
 8001bae:	4602      	mov	r2, r0
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	4610      	mov	r0, r2
 8001bb4:	4619      	mov	r1, r3
 8001bb6:	f7ff f847 	bl	8000c48 <__aeabi_d2f>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	4a2e      	ldr	r2, [pc, #184]	@ (8001c78 <BME280_Measure+0x108>)
 8001bbe:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) SD.Pressure = 0; // value in case temp measurement was disabled
 8001bc0:	4b2f      	ldr	r3, [pc, #188]	@ (8001c80 <BME280_Measure+0x110>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001bc8:	d104      	bne.n	8001bd4 <BME280_Measure+0x64>
 8001bca:	4b2b      	ldr	r3, [pc, #172]	@ (8001c78 <BME280_Measure+0x108>)
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	e01f      	b.n	8001c14 <BME280_Measure+0xa4>
		  else
		  {
#if SUPPORT_64BIT
			  SD.Pressure = (((BME280_compensate_P_int64 (pRaw))/256.0)/1000);  // as per datasheet, the pressure is x256
 8001bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c80 <BME280_Measure+0x110>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f7ff fc97 	bl	800150c <BME280_compensate_P_int64>
 8001bde:	4603      	mov	r3, r0
 8001be0:	4618      	mov	r0, r3
 8001be2:	f7fe fcdf 	bl	80005a4 <__aeabi_ui2d>
 8001be6:	f04f 0200 	mov.w	r2, #0
 8001bea:	4b26      	ldr	r3, [pc, #152]	@ (8001c84 <BME280_Measure+0x114>)
 8001bec:	f7fe fe7e 	bl	80008ec <__aeabi_ddiv>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	460b      	mov	r3, r1
 8001bf4:	4610      	mov	r0, r2
 8001bf6:	4619      	mov	r1, r3
 8001bf8:	f04f 0200 	mov.w	r2, #0
 8001bfc:	4b22      	ldr	r3, [pc, #136]	@ (8001c88 <BME280_Measure+0x118>)
 8001bfe:	f7fe fe75 	bl	80008ec <__aeabi_ddiv>
 8001c02:	4602      	mov	r2, r0
 8001c04:	460b      	mov	r3, r1
 8001c06:	4610      	mov	r0, r2
 8001c08:	4619      	mov	r1, r3
 8001c0a:	f7ff f81d 	bl	8000c48 <__aeabi_d2f>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4a19      	ldr	r2, [pc, #100]	@ (8001c78 <BME280_Measure+0x108>)
 8001c12:	6053      	str	r3, [r2, #4]
			  SD.Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) SD.Humidity = 0; // value in case temp measurement was disabled
 8001c14:	4b1d      	ldr	r3, [pc, #116]	@ (8001c8c <BME280_Measure+0x11c>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c1c:	d104      	bne.n	8001c28 <BME280_Measure+0xb8>
 8001c1e:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <BME280_Measure+0x108>)
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	609a      	str	r2, [r3, #8]
	// if the device is detached
	else
	{
		SD.Temperature = SD.Pressure = SD.Humidity = 0;
	}
}
 8001c26:	e023      	b.n	8001c70 <BME280_Measure+0x100>
			  SD.Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001c28:	4b18      	ldr	r3, [pc, #96]	@ (8001c8c <BME280_Measure+0x11c>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff33 	bl	8001a98 <bme280_compensate_H_int32>
 8001c32:	4603      	mov	r3, r0
 8001c34:	4618      	mov	r0, r3
 8001c36:	f7fe fcb5 	bl	80005a4 <__aeabi_ui2d>
 8001c3a:	f04f 0200 	mov.w	r2, #0
 8001c3e:	4b14      	ldr	r3, [pc, #80]	@ (8001c90 <BME280_Measure+0x120>)
 8001c40:	f7fe fe54 	bl	80008ec <__aeabi_ddiv>
 8001c44:	4602      	mov	r2, r0
 8001c46:	460b      	mov	r3, r1
 8001c48:	4610      	mov	r0, r2
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	f7fe fffc 	bl	8000c48 <__aeabi_d2f>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4a09      	ldr	r2, [pc, #36]	@ (8001c78 <BME280_Measure+0x108>)
 8001c54:	6093      	str	r3, [r2, #8]
}
 8001c56:	e00b      	b.n	8001c70 <BME280_Measure+0x100>
		SD.Temperature = SD.Pressure = SD.Humidity = 0;
 8001c58:	4b07      	ldr	r3, [pc, #28]	@ (8001c78 <BME280_Measure+0x108>)
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	609a      	str	r2, [r3, #8]
 8001c60:	4b05      	ldr	r3, [pc, #20]	@ (8001c78 <BME280_Measure+0x108>)
 8001c62:	689b      	ldr	r3, [r3, #8]
 8001c64:	4a04      	ldr	r2, [pc, #16]	@ (8001c78 <BME280_Measure+0x108>)
 8001c66:	6053      	str	r3, [r2, #4]
 8001c68:	4b03      	ldr	r3, [pc, #12]	@ (8001c78 <BME280_Measure+0x108>)
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	4a02      	ldr	r2, [pc, #8]	@ (8001c78 <BME280_Measure+0x108>)
 8001c6e:	6013      	str	r3, [r2, #0]
}
 8001c70:	bf00      	nop
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	20000238 	.word	0x20000238
 8001c78:	2000020c 	.word	0x2000020c
 8001c7c:	40590000 	.word	0x40590000
 8001c80:	2000023c 	.word	0x2000023c
 8001c84:	40700000 	.word	0x40700000
 8001c88:	408f4000 	.word	0x408f4000
 8001c8c:	20000240 	.word	0x20000240
 8001c90:	40900000 	.word	0x40900000

08001c94 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001c9a:	f000 fff7 	bl	8002c8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c9e:	f000 f87d 	bl	8001d9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ca2:	f000 f9ab 	bl	8001ffc <MX_GPIO_Init>
  MX_DMA_Init();
 8001ca6:	f000 f981 	bl	8001fac <MX_DMA_Init>
  MX_ADC1_Init();
 8001caa:	f000 f8d5 	bl	8001e58 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001cae:	f000 f925 	bl	8001efc <MX_I2C1_Init>
  MX_UART5_Init();
 8001cb2:	f000 f951 	bl	8001f58 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_SYSVIEW_Conf();
 8001cb6:	f008 fa51 	bl	800a15c <SEGGER_SYSVIEW_Conf>
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);	//ensure proper priority grouping for freeRTOS//?
 8001cba:	2003      	movs	r0, #3
 8001cbc:	f001 feac 	bl	8003a18 <HAL_NVIC_SetPriorityGrouping>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);//?
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	210f      	movs	r1, #15
 8001cc4:	f04f 30ff 	mov.w	r0, #4294967295
 8001cc8:	f001 fec6 	bl	8003a58 <HAL_NVIC_SetPriority>


  // Initialize BME280
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001ccc:	2304      	movs	r3, #4
 8001cce:	9301      	str	r3, [sp, #4]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	9300      	str	r3, [sp, #0]
 8001cd4:	2303      	movs	r3, #3
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	2105      	movs	r1, #5
 8001cda:	2002      	movs	r0, #2
 8001cdc:	f7ff faae 	bl	800123c <BME280_Config>

  // Create RTOS Queue & Semaphore
  SensorDataMutex = xSemaphoreCreateMutex();
 8001ce0:	2001      	movs	r0, #1
 8001ce2:	f006 f951 	bl	8007f88 <xQueueCreateMutex>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	4a21      	ldr	r2, [pc, #132]	@ (8001d70 <main+0xdc>)
 8001cea:	6013      	str	r3, [r2, #0]
  assert_param(SensorDataMutex!=NULL);
 8001cec:	4b20      	ldr	r3, [pc, #128]	@ (8001d70 <main+0xdc>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d103      	bne.n	8001cfc <main+0x68>
 8001cf4:	21a8      	movs	r1, #168	@ 0xa8
 8001cf6:	481f      	ldr	r0, [pc, #124]	@ (8001d74 <main+0xe0>)
 8001cf8:	f000 fcd6 	bl	80026a8 <assert_failed>

  /* Create RTOS Tasks */
  assert_param(xTaskCreate(Task_SensorRead, "SensorTask", 1024, NULL, 3, &SensorTaskHandle) == pdPASS);
 8001cfc:	4b1e      	ldr	r3, [pc, #120]	@ (8001d78 <main+0xe4>)
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	2303      	movs	r3, #3
 8001d02:	9300      	str	r3, [sp, #0]
 8001d04:	2300      	movs	r3, #0
 8001d06:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d0a:	491c      	ldr	r1, [pc, #112]	@ (8001d7c <main+0xe8>)
 8001d0c:	481c      	ldr	r0, [pc, #112]	@ (8001d80 <main+0xec>)
 8001d0e:	f006 fc27 	bl	8008560 <xTaskCreate>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d003      	beq.n	8001d20 <main+0x8c>
 8001d18:	21ab      	movs	r1, #171	@ 0xab
 8001d1a:	4816      	ldr	r0, [pc, #88]	@ (8001d74 <main+0xe0>)
 8001d1c:	f000 fcc4 	bl	80026a8 <assert_failed>
  assert_param(xTaskCreate(Task_DisplayUpdate, "DisplayTask", 1024, NULL, 2, &DisplayTaskHandle) == pdPASS);
 8001d20:	4b18      	ldr	r3, [pc, #96]	@ (8001d84 <main+0xf0>)
 8001d22:	9301      	str	r3, [sp, #4]
 8001d24:	2302      	movs	r3, #2
 8001d26:	9300      	str	r3, [sp, #0]
 8001d28:	2300      	movs	r3, #0
 8001d2a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d2e:	4916      	ldr	r1, [pc, #88]	@ (8001d88 <main+0xf4>)
 8001d30:	4816      	ldr	r0, [pc, #88]	@ (8001d8c <main+0xf8>)
 8001d32:	f006 fc15 	bl	8008560 <xTaskCreate>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d003      	beq.n	8001d44 <main+0xb0>
 8001d3c:	21ac      	movs	r1, #172	@ 0xac
 8001d3e:	480d      	ldr	r0, [pc, #52]	@ (8001d74 <main+0xe0>)
 8001d40:	f000 fcb2 	bl	80026a8 <assert_failed>
  assert_param(xTaskCreate(Task_UARTSend, "UartTask", 1024, NULL, 1, &UartTaskHandle) == pdPASS);
 8001d44:	4b12      	ldr	r3, [pc, #72]	@ (8001d90 <main+0xfc>)
 8001d46:	9301      	str	r3, [sp, #4]
 8001d48:	2301      	movs	r3, #1
 8001d4a:	9300      	str	r3, [sp, #0]
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d52:	4910      	ldr	r1, [pc, #64]	@ (8001d94 <main+0x100>)
 8001d54:	4810      	ldr	r0, [pc, #64]	@ (8001d98 <main+0x104>)
 8001d56:	f006 fc03 	bl	8008560 <xTaskCreate>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b01      	cmp	r3, #1
 8001d5e:	d003      	beq.n	8001d68 <main+0xd4>
 8001d60:	21ad      	movs	r1, #173	@ 0xad
 8001d62:	4804      	ldr	r0, [pc, #16]	@ (8001d74 <main+0xe0>)
 8001d64:	f000 fca0 	bl	80026a8 <assert_failed>

  /* Start Scheduler */
  vTaskStartScheduler();
 8001d68:	f006 fdba 	bl	80088e0 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d6c:	bf00      	nop
 8001d6e:	e7fd      	b.n	8001d6c <main+0xd8>
 8001d70:	20000438 	.word	0x20000438
 8001d74:	0800f7d0 	.word	0x0800f7d0
 8001d78:	2000043c 	.word	0x2000043c
 8001d7c:	0800f7e4 	.word	0x0800f7e4
 8001d80:	080020f1 	.word	0x080020f1
 8001d84:	20000440 	.word	0x20000440
 8001d88:	0800f7f0 	.word	0x0800f7f0
 8001d8c:	08002361 	.word	0x08002361
 8001d90:	20000444 	.word	0x20000444
 8001d94:	0800f7fc 	.word	0x0800f7fc
 8001d98:	080023d1 	.word	0x080023d1

08001d9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b094      	sub	sp, #80	@ 0x50
 8001da0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001da2:	f107 0320 	add.w	r3, r7, #32
 8001da6:	2230      	movs	r2, #48	@ 0x30
 8001da8:	2100      	movs	r1, #0
 8001daa:	4618      	mov	r0, r3
 8001dac:	f00a fcdd 	bl	800c76a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db0:	f107 030c 	add.w	r3, r7, #12
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	60bb      	str	r3, [r7, #8]
 8001dc4:	4b22      	ldr	r3, [pc, #136]	@ (8001e50 <SystemClock_Config+0xb4>)
 8001dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dc8:	4a21      	ldr	r2, [pc, #132]	@ (8001e50 <SystemClock_Config+0xb4>)
 8001dca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001dce:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dd0:	4b1f      	ldr	r3, [pc, #124]	@ (8001e50 <SystemClock_Config+0xb4>)
 8001dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001dd4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ddc:	2300      	movs	r3, #0
 8001dde:	607b      	str	r3, [r7, #4]
 8001de0:	4b1c      	ldr	r3, [pc, #112]	@ (8001e54 <SystemClock_Config+0xb8>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	4a1b      	ldr	r2, [pc, #108]	@ (8001e54 <SystemClock_Config+0xb8>)
 8001de6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dea:	6013      	str	r3, [r2, #0]
 8001dec:	4b19      	ldr	r3, [pc, #100]	@ (8001e54 <SystemClock_Config+0xb8>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001df4:	607b      	str	r3, [r7, #4]
 8001df6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e00:	2310      	movs	r3, #16
 8001e02:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001e04:	2300      	movs	r3, #0
 8001e06:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e08:	f107 0320 	add.w	r3, r7, #32
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f003 ff35 	bl	8005c7c <HAL_RCC_OscConfig>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001e18:	f000 fc40 	bl	800269c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e1c:	230f      	movs	r3, #15
 8001e1e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001e20:	2300      	movs	r3, #0
 8001e22:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e24:	2300      	movs	r3, #0
 8001e26:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e30:	f107 030c 	add.w	r3, r7, #12
 8001e34:	2100      	movs	r1, #0
 8001e36:	4618      	mov	r0, r3
 8001e38:	f004 fa4c 	bl	80062d4 <HAL_RCC_ClockConfig>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d001      	beq.n	8001e46 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001e42:	f000 fc2b 	bl	800269c <Error_Handler>
  }
}
 8001e46:	bf00      	nop
 8001e48:	3750      	adds	r7, #80	@ 0x50
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	40023800 	.word	0x40023800
 8001e54:	40007000 	.word	0x40007000

08001e58 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b084      	sub	sp, #16
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e5e:	463b      	mov	r3, r7
 8001e60:	2200      	movs	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	605a      	str	r2, [r3, #4]
 8001e66:	609a      	str	r2, [r3, #8]
 8001e68:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e6a:	4b21      	ldr	r3, [pc, #132]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001e6c:	4a21      	ldr	r2, [pc, #132]	@ (8001ef4 <MX_ADC1_Init+0x9c>)
 8001e6e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e70:	4b1f      	ldr	r3, [pc, #124]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e76:	4b1e      	ldr	r3, [pc, #120]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e82:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e88:	4b19      	ldr	r3, [pc, #100]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e90:	4b17      	ldr	r3, [pc, #92]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e96:	4b16      	ldr	r3, [pc, #88]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001e98:	4a17      	ldr	r2, [pc, #92]	@ (8001ef8 <MX_ADC1_Init+0xa0>)
 8001e9a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e9c:	4b14      	ldr	r3, [pc, #80]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001ea2:	4b13      	ldr	r3, [pc, #76]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001ea8:	4b11      	ldr	r3, [pc, #68]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001eb6:	480e      	ldr	r0, [pc, #56]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001eb8:	f000 ff4e 	bl	8002d58 <HAL_ADC_Init>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d001      	beq.n	8001ec6 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001ec2:	f000 fbeb 	bl	800269c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001eca:	2301      	movs	r3, #1
 8001ecc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001ece:	2300      	movs	r3, #0
 8001ed0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ed2:	463b      	mov	r3, r7
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	4806      	ldr	r0, [pc, #24]	@ (8001ef0 <MX_ADC1_Init+0x98>)
 8001ed8:	f001 fa88 	bl	80033ec <HAL_ADC_ConfigChannel>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001ee2:	f000 fbdb 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ee6:	bf00      	nop
 8001ee8:	3710      	adds	r7, #16
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop
 8001ef0:	2000026c 	.word	0x2000026c
 8001ef4:	40012000 	.word	0x40012000
 8001ef8:	0f000001 	.word	0x0f000001

08001efc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001f00:	4b12      	ldr	r3, [pc, #72]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f02:	4a13      	ldr	r2, [pc, #76]	@ (8001f50 <MX_I2C1_Init+0x54>)
 8001f04:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001f06:	4b11      	ldr	r3, [pc, #68]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f08:	4a12      	ldr	r2, [pc, #72]	@ (8001f54 <MX_I2C1_Init+0x58>)
 8001f0a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 236;
 8001f12:	4b0e      	ldr	r3, [pc, #56]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f14:	22ec      	movs	r2, #236	@ 0xec
 8001f16:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_10BIT;
 8001f18:	4b0c      	ldr	r3, [pc, #48]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f1a:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8001f1e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001f20:	4b0a      	ldr	r3, [pc, #40]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f22:	2200      	movs	r2, #0
 8001f24:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f26:	4b09      	ldr	r3, [pc, #36]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f28:	2200      	movs	r2, #0
 8001f2a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f2c:	4b07      	ldr	r3, [pc, #28]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f2e:	2200      	movs	r2, #0
 8001f30:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f32:	4b06      	ldr	r3, [pc, #24]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f38:	4804      	ldr	r0, [pc, #16]	@ (8001f4c <MX_I2C1_Init+0x50>)
 8001f3a:	f002 fddf 	bl	8004afc <HAL_I2C_Init>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d001      	beq.n	8001f48 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f44:	f000 fbaa 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f48:	bf00      	nop
 8001f4a:	bd80      	pop	{r7, pc}
 8001f4c:	200002b4 	.word	0x200002b4
 8001f50:	40005400 	.word	0x40005400
 8001f54:	000186a0 	.word	0x000186a0

08001f58 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001f5c:	4b11      	ldr	r3, [pc, #68]	@ (8001fa4 <MX_UART5_Init+0x4c>)
 8001f5e:	4a12      	ldr	r2, [pc, #72]	@ (8001fa8 <MX_UART5_Init+0x50>)
 8001f60:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001f62:	4b10      	ldr	r3, [pc, #64]	@ (8001fa4 <MX_UART5_Init+0x4c>)
 8001f64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f68:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001fa4 <MX_UART5_Init+0x4c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001f70:	4b0c      	ldr	r3, [pc, #48]	@ (8001fa4 <MX_UART5_Init+0x4c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001f76:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa4 <MX_UART5_Init+0x4c>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001f7c:	4b09      	ldr	r3, [pc, #36]	@ (8001fa4 <MX_UART5_Init+0x4c>)
 8001f7e:	220c      	movs	r2, #12
 8001f80:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f82:	4b08      	ldr	r3, [pc, #32]	@ (8001fa4 <MX_UART5_Init+0x4c>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f88:	4b06      	ldr	r3, [pc, #24]	@ (8001fa4 <MX_UART5_Init+0x4c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f8e:	4805      	ldr	r0, [pc, #20]	@ (8001fa4 <MX_UART5_Init+0x4c>)
 8001f90:	f005 f81a 	bl	8006fc8 <HAL_UART_Init>
 8001f94:	4603      	mov	r3, r0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d001      	beq.n	8001f9e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001f9a:	f000 fb7f 	bl	800269c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001f9e:	bf00      	nop
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	20000308 	.word	0x20000308
 8001fa8:	40005000 	.word	0x40005000

08001fac <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	607b      	str	r3, [r7, #4]
 8001fb6:	4b10      	ldr	r3, [pc, #64]	@ (8001ff8 <MX_DMA_Init+0x4c>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fba:	4a0f      	ldr	r2, [pc, #60]	@ (8001ff8 <MX_DMA_Init+0x4c>)
 8001fbc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001fc0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8001ff8 <MX_DMA_Init+0x4c>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001fca:	607b      	str	r3, [r7, #4]
 8001fcc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001fce:	2200      	movs	r2, #0
 8001fd0:	2100      	movs	r1, #0
 8001fd2:	200b      	movs	r0, #11
 8001fd4:	f001 fd40 	bl	8003a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001fd8:	200b      	movs	r0, #11
 8001fda:	f001 fd69 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 0, 0);
 8001fde:	2200      	movs	r2, #0
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	202f      	movs	r0, #47	@ 0x2f
 8001fe4:	f001 fd38 	bl	8003a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8001fe8:	202f      	movs	r0, #47	@ 0x2f
 8001fea:	f001 fd61 	bl	8003ab0 <HAL_NVIC_EnableIRQ>

}
 8001fee:	bf00      	nop
 8001ff0:	3708      	adds	r7, #8
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	40023800 	.word	0x40023800

08001ffc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b08a      	sub	sp, #40	@ 0x28
 8002000:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002002:	f107 0314 	add.w	r3, r7, #20
 8002006:	2200      	movs	r2, #0
 8002008:	601a      	str	r2, [r3, #0]
 800200a:	605a      	str	r2, [r3, #4]
 800200c:	609a      	str	r2, [r3, #8]
 800200e:	60da      	str	r2, [r3, #12]
 8002010:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	613b      	str	r3, [r7, #16]
 8002016:	4b32      	ldr	r3, [pc, #200]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800201a:	4a31      	ldr	r2, [pc, #196]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 800201c:	f043 0301 	orr.w	r3, r3, #1
 8002020:	6313      	str	r3, [r2, #48]	@ 0x30
 8002022:	4b2f      	ldr	r3, [pc, #188]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002026:	f003 0301 	and.w	r3, r3, #1
 800202a:	613b      	str	r3, [r7, #16]
 800202c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	60fb      	str	r3, [r7, #12]
 8002032:	4b2b      	ldr	r3, [pc, #172]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002036:	4a2a      	ldr	r2, [pc, #168]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 8002038:	f043 0308 	orr.w	r3, r3, #8
 800203c:	6313      	str	r3, [r2, #48]	@ 0x30
 800203e:	4b28      	ldr	r3, [pc, #160]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002042:	f003 0308 	and.w	r3, r3, #8
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60bb      	str	r3, [r7, #8]
 800204e:	4b24      	ldr	r3, [pc, #144]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	4a23      	ldr	r2, [pc, #140]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 8002054:	f043 0304 	orr.w	r3, r3, #4
 8002058:	6313      	str	r3, [r2, #48]	@ 0x30
 800205a:	4b21      	ldr	r3, [pc, #132]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	f003 0304 	and.w	r3, r3, #4
 8002062:	60bb      	str	r3, [r7, #8]
 8002064:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	607b      	str	r3, [r7, #4]
 800206a:	4b1d      	ldr	r3, [pc, #116]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 800206c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800206e:	4a1c      	ldr	r2, [pc, #112]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 8002070:	f043 0302 	orr.w	r3, r3, #2
 8002074:	6313      	str	r3, [r2, #48]	@ 0x30
 8002076:	4b1a      	ldr	r3, [pc, #104]	@ (80020e0 <MX_GPIO_Init+0xe4>)
 8002078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800207a:	f003 0302 	and.w	r3, r3, #2
 800207e:	607b      	str	r3, [r7, #4]
 8002080:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8002082:	2200      	movs	r2, #0
 8002084:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8002088:	4816      	ldr	r0, [pc, #88]	@ (80020e4 <MX_GPIO_Init+0xe8>)
 800208a:	f002 fcf3 	bl	8004a74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800208e:	2301      	movs	r3, #1
 8002090:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002092:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002096:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002098:	2300      	movs	r3, #0
 800209a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800209c:	f107 0314 	add.w	r3, r7, #20
 80020a0:	4619      	mov	r1, r3
 80020a2:	4811      	ldr	r0, [pc, #68]	@ (80020e8 <MX_GPIO_Init+0xec>)
 80020a4:	f002 fa06 	bl	80044b4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80020a8:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 80020ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020ae:	2301      	movs	r3, #1
 80020b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b6:	2300      	movs	r3, #0
 80020b8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020ba:	f107 0314 	add.w	r3, r7, #20
 80020be:	4619      	mov	r1, r3
 80020c0:	4808      	ldr	r0, [pc, #32]	@ (80020e4 <MX_GPIO_Init+0xe8>)
 80020c2:	f002 f9f7 	bl	80044b4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80020c6:	2200      	movs	r2, #0
 80020c8:	2100      	movs	r1, #0
 80020ca:	2006      	movs	r0, #6
 80020cc:	f001 fcc4 	bl	8003a58 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80020d0:	2006      	movs	r0, #6
 80020d2:	f001 fced 	bl	8003ab0 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80020d6:	bf00      	nop
 80020d8:	3728      	adds	r7, #40	@ 0x28
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}
 80020de:	bf00      	nop
 80020e0:	40023800 	.word	0x40023800
 80020e4:	40020c00 	.word	0x40020c00
 80020e8:	40020000 	.word	0x40020000
 80020ec:	00000000 	.word	0x00000000

080020f0 <Task_SensorRead>:

/* USER CODE BEGIN 4 */
void Task_SensorRead(void *pvParameters)
{
 80020f0:	b5b0      	push	{r4, r5, r7, lr}
 80020f2:	b082      	sub	sp, #8
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]
    while (1)
    {
    	SEGGER_SYSVIEW_PrintfHost("Task %s is running", pcTaskGetName(NULL));
 80020f8:	2000      	movs	r0, #0
 80020fa:	f006 fd6d 	bl	8008bd8 <pcTaskGetName>
 80020fe:	4603      	mov	r3, r0
 8002100:	4619      	mov	r1, r3
 8002102:	4885      	ldr	r0, [pc, #532]	@ (8002318 <Task_SensorRead+0x228>)
 8002104:	f009 fd24 	bl	800bb50 <SEGGER_SYSVIEW_PrintfHost>

        BME280_Measure();
 8002108:	f7ff fd32 	bl	8001b70 <BME280_Measure>
        HAL_ADC_Start(&hadc1);
 800210c:	4883      	ldr	r0, [pc, #524]	@ (800231c <Task_SensorRead+0x22c>)
 800210e:	f000 ff8f 	bl	8003030 <HAL_ADC_Start>

        if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 8002112:	210a      	movs	r1, #10
 8002114:	4881      	ldr	r0, [pc, #516]	@ (800231c <Task_SensorRead+0x22c>)
 8002116:	f001 f8d1 	bl	80032bc <HAL_ADC_PollForConversion>
 800211a:	4603      	mov	r3, r0
 800211c:	2b00      	cmp	r3, #0
 800211e:	d106      	bne.n	800212e <Task_SensorRead+0x3e>
        {
            SD.ADC_Value = HAL_ADC_GetValue(&hadc1);
 8002120:	487e      	ldr	r0, [pc, #504]	@ (800231c <Task_SensorRead+0x22c>)
 8002122:	f001 f956 	bl	80033d2 <HAL_ADC_GetValue>
 8002126:	4603      	mov	r3, r0
 8002128:	b29a      	uxth	r2, r3
 800212a:	4b7d      	ldr	r3, [pc, #500]	@ (8002320 <Task_SensorRead+0x230>)
 800212c:	819a      	strh	r2, [r3, #12]
        }

        SD.mq135_voltage = (SD.ADC_Value * 5.0) / 4095.0;
 800212e:	4b7c      	ldr	r3, [pc, #496]	@ (8002320 <Task_SensorRead+0x230>)
 8002130:	899b      	ldrh	r3, [r3, #12]
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe fa46 	bl	80005c4 <__aeabi_i2d>
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	4b79      	ldr	r3, [pc, #484]	@ (8002324 <Task_SensorRead+0x234>)
 800213e:	f7fe faab 	bl	8000698 <__aeabi_dmul>
 8002142:	4602      	mov	r2, r0
 8002144:	460b      	mov	r3, r1
 8002146:	4610      	mov	r0, r2
 8002148:	4619      	mov	r1, r3
 800214a:	a371      	add	r3, pc, #452	@ (adr r3, 8002310 <Task_SensorRead+0x220>)
 800214c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002150:	f7fe fbcc 	bl	80008ec <__aeabi_ddiv>
 8002154:	4602      	mov	r2, r0
 8002156:	460b      	mov	r3, r1
 8002158:	4610      	mov	r0, r2
 800215a:	4619      	mov	r1, r3
 800215c:	f7fe fd74 	bl	8000c48 <__aeabi_d2f>
 8002160:	4603      	mov	r3, r0
 8002162:	4a6f      	ldr	r2, [pc, #444]	@ (8002320 <Task_SensorRead+0x230>)
 8002164:	6113      	str	r3, [r2, #16]
        SD.Rs = ((5.0 - SD.mq135_voltage) / SD.mq135_voltage) * RL;
 8002166:	4b6e      	ldr	r3, [pc, #440]	@ (8002320 <Task_SensorRead+0x230>)
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fa3c 	bl	80005e8 <__aeabi_f2d>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	f04f 0000 	mov.w	r0, #0
 8002178:	496a      	ldr	r1, [pc, #424]	@ (8002324 <Task_SensorRead+0x234>)
 800217a:	f7fe f8d5 	bl	8000328 <__aeabi_dsub>
 800217e:	4602      	mov	r2, r0
 8002180:	460b      	mov	r3, r1
 8002182:	4614      	mov	r4, r2
 8002184:	461d      	mov	r5, r3
 8002186:	4b66      	ldr	r3, [pc, #408]	@ (8002320 <Task_SensorRead+0x230>)
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	4618      	mov	r0, r3
 800218c:	f7fe fa2c 	bl	80005e8 <__aeabi_f2d>
 8002190:	4602      	mov	r2, r0
 8002192:	460b      	mov	r3, r1
 8002194:	4620      	mov	r0, r4
 8002196:	4629      	mov	r1, r5
 8002198:	f7fe fba8 	bl	80008ec <__aeabi_ddiv>
 800219c:	4602      	mov	r2, r0
 800219e:	460b      	mov	r3, r1
 80021a0:	4610      	mov	r0, r2
 80021a2:	4619      	mov	r1, r3
 80021a4:	f04f 0200 	mov.w	r2, #0
 80021a8:	4b5f      	ldr	r3, [pc, #380]	@ (8002328 <Task_SensorRead+0x238>)
 80021aa:	f7fe fa75 	bl	8000698 <__aeabi_dmul>
 80021ae:	4602      	mov	r2, r0
 80021b0:	460b      	mov	r3, r1
 80021b2:	4610      	mov	r0, r2
 80021b4:	4619      	mov	r1, r3
 80021b6:	f7fe fd47 	bl	8000c48 <__aeabi_d2f>
 80021ba:	4603      	mov	r3, r0
 80021bc:	4a58      	ldr	r2, [pc, #352]	@ (8002320 <Task_SensorRead+0x230>)
 80021be:	6153      	str	r3, [r2, #20]

        SD.Co2     = calculate_ppm(SD.Rs, R0_CO2, A_CO2, B_CO2);
 80021c0:	4b57      	ldr	r3, [pc, #348]	@ (8002320 <Task_SensorRead+0x230>)
 80021c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80021c6:	eddf 1a59 	vldr	s3, [pc, #356]	@ 800232c <Task_SensorRead+0x23c>
 80021ca:	ed9f 1a59 	vldr	s2, [pc, #356]	@ 8002330 <Task_SensorRead+0x240>
 80021ce:	eddf 0a59 	vldr	s1, [pc, #356]	@ 8002334 <Task_SensorRead+0x244>
 80021d2:	eeb0 0a67 	vmov.f32	s0, s15
 80021d6:	f000 fa11 	bl	80025fc <calculate_ppm>
 80021da:	eef0 7a40 	vmov.f32	s15, s0
 80021de:	4b50      	ldr	r3, [pc, #320]	@ (8002320 <Task_SensorRead+0x230>)
 80021e0:	edc3 7a06 	vstr	s15, [r3, #24]
        SD.NH3     = calculate_ppm(SD.Rs, R0_NH3, A_NH3, B_NH3);
 80021e4:	4b4e      	ldr	r3, [pc, #312]	@ (8002320 <Task_SensorRead+0x230>)
 80021e6:	edd3 7a05 	vldr	s15, [r3, #20]
 80021ea:	eddf 1a53 	vldr	s3, [pc, #332]	@ 8002338 <Task_SensorRead+0x248>
 80021ee:	ed9f 1a53 	vldr	s2, [pc, #332]	@ 800233c <Task_SensorRead+0x24c>
 80021f2:	eddf 0a53 	vldr	s1, [pc, #332]	@ 8002340 <Task_SensorRead+0x250>
 80021f6:	eeb0 0a67 	vmov.f32	s0, s15
 80021fa:	f000 f9ff 	bl	80025fc <calculate_ppm>
 80021fe:	eef0 7a40 	vmov.f32	s15, s0
 8002202:	4b47      	ldr	r3, [pc, #284]	@ (8002320 <Task_SensorRead+0x230>)
 8002204:	edc3 7a07 	vstr	s15, [r3, #28]
        SD.Ethanol = calculate_ppm(SD.Rs, R0_Ethanol, A_Ethanol, B_Ethanol);
 8002208:	4b45      	ldr	r3, [pc, #276]	@ (8002320 <Task_SensorRead+0x230>)
 800220a:	edd3 7a05 	vldr	s15, [r3, #20]
 800220e:	eddf 1a4d 	vldr	s3, [pc, #308]	@ 8002344 <Task_SensorRead+0x254>
 8002212:	ed9f 1a4d 	vldr	s2, [pc, #308]	@ 8002348 <Task_SensorRead+0x258>
 8002216:	eef0 0a0e 	vmov.f32	s1, #14	@ 0x40700000  3.750
 800221a:	eeb0 0a67 	vmov.f32	s0, s15
 800221e:	f000 f9ed 	bl	80025fc <calculate_ppm>
 8002222:	eef0 7a40 	vmov.f32	s15, s0
 8002226:	4b3e      	ldr	r3, [pc, #248]	@ (8002320 <Task_SensorRead+0x230>)
 8002228:	edc3 7a08 	vstr	s15, [r3, #32]
        SD.AQI = ((SD.Co2 / 10) * 0.5) + ((SD.NH3 * 100) * 0.25) + ((SD.Ethanol * 100) * 0.25);
 800222c:	4b3c      	ldr	r3, [pc, #240]	@ (8002320 <Task_SensorRead+0x230>)
 800222e:	edd3 7a06 	vldr	s15, [r3, #24]
 8002232:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8002236:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800223a:	ee16 0a90 	vmov	r0, s13
 800223e:	f7fe f9d3 	bl	80005e8 <__aeabi_f2d>
 8002242:	f04f 0200 	mov.w	r2, #0
 8002246:	4b41      	ldr	r3, [pc, #260]	@ (800234c <Task_SensorRead+0x25c>)
 8002248:	f7fe fa26 	bl	8000698 <__aeabi_dmul>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4614      	mov	r4, r2
 8002252:	461d      	mov	r5, r3
 8002254:	4b32      	ldr	r3, [pc, #200]	@ (8002320 <Task_SensorRead+0x230>)
 8002256:	edd3 7a07 	vldr	s15, [r3, #28]
 800225a:	ed9f 7a3d 	vldr	s14, [pc, #244]	@ 8002350 <Task_SensorRead+0x260>
 800225e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002262:	ee17 0a90 	vmov	r0, s15
 8002266:	f7fe f9bf 	bl	80005e8 <__aeabi_f2d>
 800226a:	f04f 0200 	mov.w	r2, #0
 800226e:	4b39      	ldr	r3, [pc, #228]	@ (8002354 <Task_SensorRead+0x264>)
 8002270:	f7fe fa12 	bl	8000698 <__aeabi_dmul>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4620      	mov	r0, r4
 800227a:	4629      	mov	r1, r5
 800227c:	f7fe f856 	bl	800032c <__adddf3>
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4614      	mov	r4, r2
 8002286:	461d      	mov	r5, r3
 8002288:	4b25      	ldr	r3, [pc, #148]	@ (8002320 <Task_SensorRead+0x230>)
 800228a:	edd3 7a08 	vldr	s15, [r3, #32]
 800228e:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8002350 <Task_SensorRead+0x260>
 8002292:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002296:	ee17 0a90 	vmov	r0, s15
 800229a:	f7fe f9a5 	bl	80005e8 <__aeabi_f2d>
 800229e:	f04f 0200 	mov.w	r2, #0
 80022a2:	4b2c      	ldr	r3, [pc, #176]	@ (8002354 <Task_SensorRead+0x264>)
 80022a4:	f7fe f9f8 	bl	8000698 <__aeabi_dmul>
 80022a8:	4602      	mov	r2, r0
 80022aa:	460b      	mov	r3, r1
 80022ac:	4620      	mov	r0, r4
 80022ae:	4629      	mov	r1, r5
 80022b0:	f7fe f83c 	bl	800032c <__adddf3>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4610      	mov	r0, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	f7fe fcc4 	bl	8000c48 <__aeabi_d2f>
 80022c0:	4603      	mov	r3, r0
 80022c2:	4a17      	ldr	r2, [pc, #92]	@ (8002320 <Task_SensorRead+0x230>)
 80022c4:	6253      	str	r3, [r2, #36]	@ 0x24

        HAL_ADC_Stop(&hadc1);
 80022c6:	4815      	ldr	r0, [pc, #84]	@ (800231c <Task_SensorRead+0x22c>)
 80022c8:	f000 ffaa 	bl	8003220 <HAL_ADC_Stop>

    	xSemaphoreTake(SensorDataMutex, portMAX_DELAY);
 80022cc:	4b22      	ldr	r3, [pc, #136]	@ (8002358 <Task_SensorRead+0x268>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f04f 31ff 	mov.w	r1, #4294967295
 80022d4:	4618      	mov	r0, r3
 80022d6:	f005 ff59 	bl	800818c <xQueueSemaphoreTake>

    	SensorData= SD;
 80022da:	4a20      	ldr	r2, [pc, #128]	@ (800235c <Task_SensorRead+0x26c>)
 80022dc:	4b10      	ldr	r3, [pc, #64]	@ (8002320 <Task_SensorRead+0x230>)
 80022de:	4614      	mov	r4, r2
 80022e0:	461d      	mov	r5, r3
 80022e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022ea:	e895 0003 	ldmia.w	r5, {r0, r1}
 80022ee:	e884 0003 	stmia.w	r4, {r0, r1}

    	xSemaphoreGive(SensorDataMutex);
 80022f2:	4b19      	ldr	r3, [pc, #100]	@ (8002358 <Task_SensorRead+0x268>)
 80022f4:	6818      	ldr	r0, [r3, #0]
 80022f6:	2300      	movs	r3, #0
 80022f8:	2200      	movs	r2, #0
 80022fa:	2100      	movs	r1, #0
 80022fc:	f005 fe5c 	bl	8007fb8 <xQueueGenericSend>

        vTaskDelay(500);
 8002300:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002304:	f006 fab6 	bl	8008874 <vTaskDelay>
    	SEGGER_SYSVIEW_PrintfHost("Task %s is running", pcTaskGetName(NULL));
 8002308:	e6f6      	b.n	80020f8 <Task_SensorRead+0x8>
 800230a:	bf00      	nop
 800230c:	f3af 8000 	nop.w
 8002310:	00000000 	.word	0x00000000
 8002314:	40affe00 	.word	0x40affe00
 8002318:	0800f808 	.word	0x0800f808
 800231c:	2000026c 	.word	0x2000026c
 8002320:	2000020c 	.word	0x2000020c
 8002324:	40140000 	.word	0x40140000
 8002328:	40240000 	.word	0x40240000
 800232c:	c03137de 	.word	0xc03137de
 8002330:	42e93442 	.word	0x42e93442
 8002334:	423e0000 	.word	0x423e0000
 8002338:	c01e45a2 	.word	0xc01e45a2
 800233c:	42cc6666 	.word	0x42cc6666
 8002340:	3fee147b 	.word	0x3fee147b
 8002344:	c04b851f 	.word	0xc04b851f
 8002348:	429a828f 	.word	0x429a828f
 800234c:	3fe00000 	.word	0x3fe00000
 8002350:	42c80000 	.word	0x42c80000
 8002354:	3fd00000 	.word	0x3fd00000
 8002358:	20000438 	.word	0x20000438
 800235c:	20000410 	.word	0x20000410

08002360 <Task_DisplayUpdate>:
    }
}


void Task_DisplayUpdate(void *pvParameters)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b088      	sub	sp, #32
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]

    while (1)
    {
    	SEGGER_SYSVIEW_PrintfHost("Task %s is running", pcTaskGetName(NULL));
 8002368:	2000      	movs	r0, #0
 800236a:	f006 fc35 	bl	8008bd8 <pcTaskGetName>
 800236e:	4603      	mov	r3, r0
 8002370:	4619      	mov	r1, r3
 8002372:	4813      	ldr	r0, [pc, #76]	@ (80023c0 <Task_DisplayUpdate+0x60>)
 8002374:	f009 fbec 	bl	800bb50 <SEGGER_SYSVIEW_PrintfHost>

    	if (buttonPressed)
 8002378:	4b12      	ldr	r3, [pc, #72]	@ (80023c4 <Task_DisplayUpdate+0x64>)
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	b2db      	uxtb	r3, r3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d019      	beq.n	80023b6 <Task_DisplayUpdate+0x56>
        {
    		 // Send button press event to ESP32
    		 char displayBuff[20];
    		 sprintf(displayBuff, "Button_Pressed:%d", buttonPressed);
 8002382:	4b10      	ldr	r3, [pc, #64]	@ (80023c4 <Task_DisplayUpdate+0x64>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	b2db      	uxtb	r3, r3
 8002388:	461a      	mov	r2, r3
 800238a:	f107 030c 	add.w	r3, r7, #12
 800238e:	490e      	ldr	r1, [pc, #56]	@ (80023c8 <Task_DisplayUpdate+0x68>)
 8002390:	4618      	mov	r0, r3
 8002392:	f00a f977 	bl	800c684 <siprintf>
    		 HAL_UART_Transmit(&huart5, (uint8_t *)displayBuff, strlen(displayBuff), 10);
 8002396:	f107 030c 	add.w	r3, r7, #12
 800239a:	4618      	mov	r0, r3
 800239c:	f7fd ffb8 	bl	8000310 <strlen>
 80023a0:	4603      	mov	r3, r0
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	f107 010c 	add.w	r1, r7, #12
 80023a8:	230a      	movs	r3, #10
 80023aa:	4808      	ldr	r0, [pc, #32]	@ (80023cc <Task_DisplayUpdate+0x6c>)
 80023ac:	f004 fee0 	bl	8007170 <HAL_UART_Transmit>

    		 buttonPressed = 0;  // Reset button flag
 80023b0:	4b04      	ldr	r3, [pc, #16]	@ (80023c4 <Task_DisplayUpdate+0x64>)
 80023b2:	2200      	movs	r2, #0
 80023b4:	701a      	strb	r2, [r3, #0]
        }

        vTaskDelay(100);
 80023b6:	2064      	movs	r0, #100	@ 0x64
 80023b8:	f006 fa5c 	bl	8008874 <vTaskDelay>
    	SEGGER_SYSVIEW_PrintfHost("Task %s is running", pcTaskGetName(NULL));
 80023bc:	e7d4      	b.n	8002368 <Task_DisplayUpdate+0x8>
 80023be:	bf00      	nop
 80023c0:	0800f808 	.word	0x0800f808
 80023c4:	20000448 	.word	0x20000448
 80023c8:	0800f81c 	.word	0x0800f81c
 80023cc:	20000308 	.word	0x20000308

080023d0 <Task_UARTSend>:
    }
}

void Task_UARTSend(void *pvParameters)
{
 80023d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d4:	b0be      	sub	sp, #248	@ 0xf8
 80023d6:	af0c      	add	r7, sp, #48	@ 0x30
 80023d8:	61f8      	str	r0, [r7, #28]

    while (1)
    {
    	SEGGER_SYSVIEW_PrintfHost("Task %s is running", pcTaskGetName(NULL));
 80023da:	2000      	movs	r0, #0
 80023dc:	f006 fbfc 	bl	8008bd8 <pcTaskGetName>
 80023e0:	4603      	mov	r3, r0
 80023e2:	4619      	mov	r1, r3
 80023e4:	484b      	ldr	r0, [pc, #300]	@ (8002514 <Task_UARTSend+0x144>)
 80023e6:	f009 fbb3 	bl	800bb50 <SEGGER_SYSVIEW_PrintfHost>

    	char uartBuff[100];
    	uint8_t dataToSend[60];

    	xSemaphoreTake(SensorDataMutex, portMAX_DELAY);
 80023ea:	4b4b      	ldr	r3, [pc, #300]	@ (8002518 <Task_UARTSend+0x148>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f04f 31ff 	mov.w	r1, #4294967295
 80023f2:	4618      	mov	r0, r3
 80023f4:	f005 feca 	bl	800818c <xQueueSemaphoreTake>

        // Format sensor data as CSV
        sprintf(uartBuff, "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
                SensorData.Temperature, SensorData.Pressure, SensorData.Humidity,
 80023f8:	4b48      	ldr	r3, [pc, #288]	@ (800251c <Task_UARTSend+0x14c>)
 80023fa:	681b      	ldr	r3, [r3, #0]
        sprintf(uartBuff, "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7fe f8f3 	bl	80005e8 <__aeabi_f2d>
 8002402:	e9c7 0104 	strd	r0, r1, [r7, #16]
                SensorData.Temperature, SensorData.Pressure, SensorData.Humidity,
 8002406:	4b45      	ldr	r3, [pc, #276]	@ (800251c <Task_UARTSend+0x14c>)
 8002408:	685b      	ldr	r3, [r3, #4]
        sprintf(uartBuff, "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe f8ec 	bl	80005e8 <__aeabi_f2d>
 8002410:	4680      	mov	r8, r0
 8002412:	4689      	mov	r9, r1
                SensorData.Temperature, SensorData.Pressure, SensorData.Humidity,
 8002414:	4b41      	ldr	r3, [pc, #260]	@ (800251c <Task_UARTSend+0x14c>)
 8002416:	689b      	ldr	r3, [r3, #8]
        sprintf(uartBuff, "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe f8e5 	bl	80005e8 <__aeabi_f2d>
 800241e:	4682      	mov	sl, r0
 8002420:	468b      	mov	fp, r1
                SensorData.Co2, SensorData.NH3, SensorData.Ethanol, SensorData.AQI);
 8002422:	4b3e      	ldr	r3, [pc, #248]	@ (800251c <Task_UARTSend+0x14c>)
 8002424:	699b      	ldr	r3, [r3, #24]
        sprintf(uartBuff, "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8002426:	4618      	mov	r0, r3
 8002428:	f7fe f8de 	bl	80005e8 <__aeabi_f2d>
 800242c:	e9c7 0102 	strd	r0, r1, [r7, #8]
                SensorData.Co2, SensorData.NH3, SensorData.Ethanol, SensorData.AQI);
 8002430:	4b3a      	ldr	r3, [pc, #232]	@ (800251c <Task_UARTSend+0x14c>)
 8002432:	69db      	ldr	r3, [r3, #28]
        sprintf(uartBuff, "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8002434:	4618      	mov	r0, r3
 8002436:	f7fe f8d7 	bl	80005e8 <__aeabi_f2d>
 800243a:	e9c7 0100 	strd	r0, r1, [r7]
                SensorData.Co2, SensorData.NH3, SensorData.Ethanol, SensorData.AQI);
 800243e:	4b37      	ldr	r3, [pc, #220]	@ (800251c <Task_UARTSend+0x14c>)
 8002440:	6a1b      	ldr	r3, [r3, #32]
        sprintf(uartBuff, "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe f8d0 	bl	80005e8 <__aeabi_f2d>
 8002448:	4604      	mov	r4, r0
 800244a:	460d      	mov	r5, r1
                SensorData.Co2, SensorData.NH3, SensorData.Ethanol, SensorData.AQI);
 800244c:	4b33      	ldr	r3, [pc, #204]	@ (800251c <Task_UARTSend+0x14c>)
 800244e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        sprintf(uartBuff, "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8002450:	4618      	mov	r0, r3
 8002452:	f7fe f8c9 	bl	80005e8 <__aeabi_f2d>
 8002456:	4602      	mov	r2, r0
 8002458:	460b      	mov	r3, r1
 800245a:	f107 0060 	add.w	r0, r7, #96	@ 0x60
 800245e:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 8002462:	e9cd 4508 	strd	r4, r5, [sp, #32]
 8002466:	ed97 7b00 	vldr	d7, [r7]
 800246a:	ed8d 7b06 	vstr	d7, [sp, #24]
 800246e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002472:	ed8d 7b04 	vstr	d7, [sp, #16]
 8002476:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800247a:	e9cd 8900 	strd	r8, r9, [sp]
 800247e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002482:	4927      	ldr	r1, [pc, #156]	@ (8002520 <Task_UARTSend+0x150>)
 8002484:	f00a f8fe 	bl	800c684 <siprintf>

        xSemaphoreGive(SensorDataMutex);
 8002488:	4b23      	ldr	r3, [pc, #140]	@ (8002518 <Task_UARTSend+0x148>)
 800248a:	6818      	ldr	r0, [r3, #0]
 800248c:	2300      	movs	r3, #0
 800248e:	2200      	movs	r2, #0
 8002490:	2100      	movs	r1, #0
 8002492:	f005 fd91 	bl	8007fb8 <xQueueGenericSend>

        uint8_t crc = Calculate_CRC8((uint8_t *)uartBuff, strlen(uartBuff)); // Compute CRC
 8002496:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800249a:	4618      	mov	r0, r3
 800249c:	f7fd ff38 	bl	8000310 <strlen>
 80024a0:	4603      	mov	r3, r0
 80024a2:	b2da      	uxtb	r2, r3
 80024a4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80024a8:	4611      	mov	r1, r2
 80024aa:	4618      	mov	r0, r3
 80024ac:	f000 f86e 	bl	800258c <Calculate_CRC8>
 80024b0:	4603      	mov	r3, r0
 80024b2:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7

        sprintf(uartBuff + strlen(uartBuff), ",%02X,@", crc); // Append CRC & End Bits
 80024b6:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fd ff28 	bl	8000310 <strlen>
 80024c0:	4602      	mov	r2, r0
 80024c2:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80024c6:	4413      	add	r3, r2
 80024c8:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 80024cc:	4915      	ldr	r1, [pc, #84]	@ (8002524 <Task_UARTSend+0x154>)
 80024ce:	4618      	mov	r0, r3
 80024d0:	f00a f8d8 	bl	800c684 <siprintf>

        memcpy(dataToSend, uartBuff, strlen(uartBuff)); // Copy to send buffer
 80024d4:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fd ff19 	bl	8000310 <strlen>
 80024de:	4602      	mov	r2, r0
 80024e0:	f107 0160 	add.w	r1, r7, #96	@ 0x60
 80024e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024e8:	4618      	mov	r0, r3
 80024ea:	f00a f9ac 	bl	800c846 <memcpy>

        HAL_UART_Transmit_DMA(&huart5, dataToSend, strlen((char *)dataToSend)); // Send over UART DMA
 80024ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80024f2:	4618      	mov	r0, r3
 80024f4:	f7fd ff0c 	bl	8000310 <strlen>
 80024f8:	4603      	mov	r3, r0
 80024fa:	b29a      	uxth	r2, r3
 80024fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002500:	4619      	mov	r1, r3
 8002502:	4809      	ldr	r0, [pc, #36]	@ (8002528 <Task_UARTSend+0x158>)
 8002504:	f004 fec0 	bl	8007288 <HAL_UART_Transmit_DMA>


        vTaskDelay(1000);  // Direct value instead of pdMS_TO_TICKS(1000)
 8002508:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800250c:	f006 f9b2 	bl	8008874 <vTaskDelay>
    {
 8002510:	bf00      	nop
 8002512:	e762      	b.n	80023da <Task_UARTSend+0xa>
 8002514:	0800f808 	.word	0x0800f808
 8002518:	20000438 	.word	0x20000438
 800251c:	20000410 	.word	0x20000410
 8002520:	0800f830 	.word	0x0800f830
 8002524:	0800f854 	.word	0x0800f854
 8002528:	20000308 	.word	0x20000308

0800252c <HAL_GPIO_EXTI_Callback>:
    }
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	4603      	mov	r3, r0
 8002534:	80fb      	strh	r3, [r7, #6]
    static uint32_t lastPressTime = 0;

    if (GPIO_Pin == GPIO_PIN_0)  // Button on PA0
 8002536:	88fb      	ldrh	r3, [r7, #6]
 8002538:	2b01      	cmp	r3, #1
 800253a:	d11e      	bne.n	800257a <HAL_GPIO_EXTI_Callback+0x4e>
    {
        if (HAL_GetTick() - lastPressTime > 100)  // Debounce check
 800253c:	f000 fbdc 	bl	8002cf8 <HAL_GetTick>
 8002540:	4602      	mov	r2, r0
 8002542:	4b10      	ldr	r3, [pc, #64]	@ (8002584 <HAL_GPIO_EXTI_Callback+0x58>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	1ad3      	subs	r3, r2, r3
 8002548:	2b64      	cmp	r3, #100	@ 0x64
 800254a:	d911      	bls.n	8002570 <HAL_GPIO_EXTI_Callback+0x44>
        {
            buttonPressed++;
 800254c:	4b0e      	ldr	r3, [pc, #56]	@ (8002588 <HAL_GPIO_EXTI_Callback+0x5c>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	b2db      	uxtb	r3, r3
 8002552:	3301      	adds	r3, #1
 8002554:	b2da      	uxtb	r2, r3
 8002556:	4b0c      	ldr	r3, [pc, #48]	@ (8002588 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002558:	701a      	strb	r2, [r3, #0]
            if (buttonPressed > 5) buttonPressed = 1;
 800255a:	4b0b      	ldr	r3, [pc, #44]	@ (8002588 <HAL_GPIO_EXTI_Callback+0x5c>)
 800255c:	781b      	ldrb	r3, [r3, #0]
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2b05      	cmp	r3, #5
 8002562:	d902      	bls.n	800256a <HAL_GPIO_EXTI_Callback+0x3e>
 8002564:	4b08      	ldr	r3, [pc, #32]	@ (8002588 <HAL_GPIO_EXTI_Callback+0x5c>)
 8002566:	2201      	movs	r2, #1
 8002568:	701a      	strb	r2, [r3, #0]

            HAL_Delay(50);  // Extra debounce delay
 800256a:	2032      	movs	r0, #50	@ 0x32
 800256c:	f000 fbd0 	bl	8002d10 <HAL_Delay>
        }
        lastPressTime = HAL_GetTick();
 8002570:	f000 fbc2 	bl	8002cf8 <HAL_GetTick>
 8002574:	4603      	mov	r3, r0
 8002576:	4a03      	ldr	r2, [pc, #12]	@ (8002584 <HAL_GPIO_EXTI_Callback+0x58>)
 8002578:	6013      	str	r3, [r2, #0]
    }
}
 800257a:	bf00      	nop
 800257c:	3708      	adds	r7, #8
 800257e:	46bd      	mov	sp, r7
 8002580:	bd80      	pop	{r7, pc}
 8002582:	bf00      	nop
 8002584:	2000044c 	.word	0x2000044c
 8002588:	20000448 	.word	0x20000448

0800258c <Calculate_CRC8>:

uint8_t Calculate_CRC8(const uint8_t *data, uint8_t len) {
 800258c:	b480      	push	{r7}
 800258e:	b085      	sub	sp, #20
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	460b      	mov	r3, r1
 8002596:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = CRC8_INIT;
 8002598:	23ff      	movs	r3, #255	@ 0xff
 800259a:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < len; i++) {
 800259c:	2300      	movs	r3, #0
 800259e:	73bb      	strb	r3, [r7, #14]
 80025a0:	e021      	b.n	80025e6 <Calculate_CRC8+0x5a>
        crc ^= data[i];  // XOR with input byte
 80025a2:	7bbb      	ldrb	r3, [r7, #14]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	4413      	add	r3, r2
 80025a8:	781a      	ldrb	r2, [r3, #0]
 80025aa:	7bfb      	ldrb	r3, [r7, #15]
 80025ac:	4053      	eors	r3, r2
 80025ae:	73fb      	strb	r3, [r7, #15]

        for (uint8_t j = 0; j < 8; j++) {  // Process each bit
 80025b0:	2300      	movs	r3, #0
 80025b2:	737b      	strb	r3, [r7, #13]
 80025b4:	e011      	b.n	80025da <Calculate_CRC8+0x4e>
            if (crc & 0x80)  // If MSB is 1
 80025b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	da07      	bge.n	80025ce <Calculate_CRC8+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 80025be:	7bfb      	ldrb	r3, [r7, #15]
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	b25b      	sxtb	r3, r3
 80025c4:	f083 0307 	eor.w	r3, r3, #7
 80025c8:	b25b      	sxtb	r3, r3
 80025ca:	73fb      	strb	r3, [r7, #15]
 80025cc:	e002      	b.n	80025d4 <Calculate_CRC8+0x48>
            else
                crc = (crc << 1);
 80025ce:	7bfb      	ldrb	r3, [r7, #15]
 80025d0:	005b      	lsls	r3, r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {  // Process each bit
 80025d4:	7b7b      	ldrb	r3, [r7, #13]
 80025d6:	3301      	adds	r3, #1
 80025d8:	737b      	strb	r3, [r7, #13]
 80025da:	7b7b      	ldrb	r3, [r7, #13]
 80025dc:	2b07      	cmp	r3, #7
 80025de:	d9ea      	bls.n	80025b6 <Calculate_CRC8+0x2a>
    for (uint8_t i = 0; i < len; i++) {
 80025e0:	7bbb      	ldrb	r3, [r7, #14]
 80025e2:	3301      	adds	r3, #1
 80025e4:	73bb      	strb	r3, [r7, #14]
 80025e6:	7bba      	ldrb	r2, [r7, #14]
 80025e8:	78fb      	ldrb	r3, [r7, #3]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d3d9      	bcc.n	80025a2 <Calculate_CRC8+0x16>
        }
    }
    return crc;  // Return final CRC
 80025ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f0:	4618      	mov	r0, r3
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fa:	4770      	bx	lr

080025fc <calculate_ppm>:

float calculate_ppm(float Rs, float R0, float A, float B)
{
 80025fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002600:	b084      	sub	sp, #16
 8002602:	af00      	add	r7, sp, #0
 8002604:	ed87 0a03 	vstr	s0, [r7, #12]
 8002608:	edc7 0a02 	vstr	s1, [r7, #8]
 800260c:	ed87 1a01 	vstr	s2, [r7, #4]
 8002610:	edc7 1a00 	vstr	s3, [r7]
    return A * pow((Rs / R0), B);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7fd ffe7 	bl	80005e8 <__aeabi_f2d>
 800261a:	4604      	mov	r4, r0
 800261c:	460d      	mov	r5, r1
 800261e:	ed97 7a03 	vldr	s14, [r7, #12]
 8002622:	edd7 7a02 	vldr	s15, [r7, #8]
 8002626:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800262a:	ee16 0a90 	vmov	r0, s13
 800262e:	f7fd ffdb 	bl	80005e8 <__aeabi_f2d>
 8002632:	4680      	mov	r8, r0
 8002634:	4689      	mov	r9, r1
 8002636:	6838      	ldr	r0, [r7, #0]
 8002638:	f7fd ffd6 	bl	80005e8 <__aeabi_f2d>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	ec43 2b11 	vmov	d1, r2, r3
 8002644:	ec49 8b10 	vmov	d0, r8, r9
 8002648:	f00c f948 	bl	800e8dc <pow>
 800264c:	ec53 2b10 	vmov	r2, r3, d0
 8002650:	4620      	mov	r0, r4
 8002652:	4629      	mov	r1, r5
 8002654:	f7fe f820 	bl	8000698 <__aeabi_dmul>
 8002658:	4602      	mov	r2, r0
 800265a:	460b      	mov	r3, r1
 800265c:	4610      	mov	r0, r2
 800265e:	4619      	mov	r1, r3
 8002660:	f7fe faf2 	bl	8000c48 <__aeabi_d2f>
 8002664:	4603      	mov	r3, r0
 8002666:	ee07 3a90 	vmov	s15, r3
}
 800266a:	eeb0 0a67 	vmov.f32	s0, s15
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

08002678 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b082      	sub	sp, #8
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4a04      	ldr	r2, [pc, #16]	@ (8002698 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d101      	bne.n	800268e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800268a:	f000 fb21 	bl	8002cd0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 800268e:	bf00      	nop
 8002690:	3708      	adds	r7, #8
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	40010000 	.word	0x40010000

0800269c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800269c:	b480      	push	{r7}
 800269e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026a0:	b672      	cpsid	i
}
 80026a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80026a4:	bf00      	nop
 80026a6:	e7fd      	b.n	80026a4 <Error_Handler+0x8>

080026a8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	SEGGER_SYSVIEW_PrintfHost("Assertion Failed:file %s on line %d\r\n", file, line);
 80026b2:	683a      	ldr	r2, [r7, #0]
 80026b4:	6879      	ldr	r1, [r7, #4]
 80026b6:	4802      	ldr	r0, [pc, #8]	@ (80026c0 <assert_failed+0x18>)
 80026b8:	f009 fa4a 	bl	800bb50 <SEGGER_SYSVIEW_PrintfHost>
	while(1);
 80026bc:	bf00      	nop
 80026be:	e7fd      	b.n	80026bc <assert_failed+0x14>
 80026c0:	0800f85c 	.word	0x0800f85c

080026c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	b083      	sub	sp, #12
 80026c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	607b      	str	r3, [r7, #4]
 80026ce:	4b10      	ldr	r3, [pc, #64]	@ (8002710 <HAL_MspInit+0x4c>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026d2:	4a0f      	ldr	r2, [pc, #60]	@ (8002710 <HAL_MspInit+0x4c>)
 80026d4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80026d8:	6453      	str	r3, [r2, #68]	@ 0x44
 80026da:	4b0d      	ldr	r3, [pc, #52]	@ (8002710 <HAL_MspInit+0x4c>)
 80026dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026de:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80026e2:	607b      	str	r3, [r7, #4]
 80026e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	4b09      	ldr	r3, [pc, #36]	@ (8002710 <HAL_MspInit+0x4c>)
 80026ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ee:	4a08      	ldr	r2, [pc, #32]	@ (8002710 <HAL_MspInit+0x4c>)
 80026f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80026f6:	4b06      	ldr	r3, [pc, #24]	@ (8002710 <HAL_MspInit+0x4c>)
 80026f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026fe:	603b      	str	r3, [r7, #0]
 8002700:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002702:	bf00      	nop
 8002704:	370c      	adds	r7, #12
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr
 800270e:	bf00      	nop
 8002710:	40023800 	.word	0x40023800

08002714 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b08a      	sub	sp, #40	@ 0x28
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800271c:	f107 0314 	add.w	r3, r7, #20
 8002720:	2200      	movs	r2, #0
 8002722:	601a      	str	r2, [r3, #0]
 8002724:	605a      	str	r2, [r3, #4]
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	60da      	str	r2, [r3, #12]
 800272a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4a17      	ldr	r2, [pc, #92]	@ (8002790 <HAL_ADC_MspInit+0x7c>)
 8002732:	4293      	cmp	r3, r2
 8002734:	d127      	bne.n	8002786 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	613b      	str	r3, [r7, #16]
 800273a:	4b16      	ldr	r3, [pc, #88]	@ (8002794 <HAL_ADC_MspInit+0x80>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273e:	4a15      	ldr	r2, [pc, #84]	@ (8002794 <HAL_ADC_MspInit+0x80>)
 8002740:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002744:	6453      	str	r3, [r2, #68]	@ 0x44
 8002746:	4b13      	ldr	r3, [pc, #76]	@ (8002794 <HAL_ADC_MspInit+0x80>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	60fb      	str	r3, [r7, #12]
 8002756:	4b0f      	ldr	r3, [pc, #60]	@ (8002794 <HAL_ADC_MspInit+0x80>)
 8002758:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800275a:	4a0e      	ldr	r2, [pc, #56]	@ (8002794 <HAL_ADC_MspInit+0x80>)
 800275c:	f043 0301 	orr.w	r3, r3, #1
 8002760:	6313      	str	r3, [r2, #48]	@ 0x30
 8002762:	4b0c      	ldr	r3, [pc, #48]	@ (8002794 <HAL_ADC_MspInit+0x80>)
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	f003 0301 	and.w	r3, r3, #1
 800276a:	60fb      	str	r3, [r7, #12]
 800276c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800276e:	2302      	movs	r3, #2
 8002770:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002772:	2303      	movs	r3, #3
 8002774:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002776:	2300      	movs	r3, #0
 8002778:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800277a:	f107 0314 	add.w	r3, r7, #20
 800277e:	4619      	mov	r1, r3
 8002780:	4805      	ldr	r0, [pc, #20]	@ (8002798 <HAL_ADC_MspInit+0x84>)
 8002782:	f001 fe97 	bl	80044b4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8002786:	bf00      	nop
 8002788:	3728      	adds	r7, #40	@ 0x28
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	40012000 	.word	0x40012000
 8002794:	40023800 	.word	0x40023800
 8002798:	40020000 	.word	0x40020000

0800279c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b08a      	sub	sp, #40	@ 0x28
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027a4:	f107 0314 	add.w	r3, r7, #20
 80027a8:	2200      	movs	r2, #0
 80027aa:	601a      	str	r2, [r3, #0]
 80027ac:	605a      	str	r2, [r3, #4]
 80027ae:	609a      	str	r2, [r3, #8]
 80027b0:	60da      	str	r2, [r3, #12]
 80027b2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a19      	ldr	r2, [pc, #100]	@ (8002820 <HAL_I2C_MspInit+0x84>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d12b      	bne.n	8002816 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	4b18      	ldr	r3, [pc, #96]	@ (8002824 <HAL_I2C_MspInit+0x88>)
 80027c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c6:	4a17      	ldr	r2, [pc, #92]	@ (8002824 <HAL_I2C_MspInit+0x88>)
 80027c8:	f043 0302 	orr.w	r3, r3, #2
 80027cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80027ce:	4b15      	ldr	r3, [pc, #84]	@ (8002824 <HAL_I2C_MspInit+0x88>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	613b      	str	r3, [r7, #16]
 80027d8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027da:	23c0      	movs	r3, #192	@ 0xc0
 80027dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027de:	2312      	movs	r3, #18
 80027e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027e2:	2300      	movs	r3, #0
 80027e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027e6:	2303      	movs	r3, #3
 80027e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027ea:	2304      	movs	r3, #4
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027ee:	f107 0314 	add.w	r3, r7, #20
 80027f2:	4619      	mov	r1, r3
 80027f4:	480c      	ldr	r0, [pc, #48]	@ (8002828 <HAL_I2C_MspInit+0x8c>)
 80027f6:	f001 fe5d 	bl	80044b4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	60fb      	str	r3, [r7, #12]
 80027fe:	4b09      	ldr	r3, [pc, #36]	@ (8002824 <HAL_I2C_MspInit+0x88>)
 8002800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002802:	4a08      	ldr	r2, [pc, #32]	@ (8002824 <HAL_I2C_MspInit+0x88>)
 8002804:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002808:	6413      	str	r3, [r2, #64]	@ 0x40
 800280a:	4b06      	ldr	r3, [pc, #24]	@ (8002824 <HAL_I2C_MspInit+0x88>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800280e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8002816:	bf00      	nop
 8002818:	3728      	adds	r7, #40	@ 0x28
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40005400 	.word	0x40005400
 8002824:	40023800 	.word	0x40023800
 8002828:	40020400 	.word	0x40020400

0800282c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800282c:	b580      	push	{r7, lr}
 800282e:	b08a      	sub	sp, #40	@ 0x28
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002834:	f107 0314 	add.w	r3, r7, #20
 8002838:	2200      	movs	r2, #0
 800283a:	601a      	str	r2, [r3, #0]
 800283c:	605a      	str	r2, [r3, #4]
 800283e:	609a      	str	r2, [r3, #8]
 8002840:	60da      	str	r2, [r3, #12]
 8002842:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a57      	ldr	r2, [pc, #348]	@ (80029a8 <HAL_UART_MspInit+0x17c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	f040 80a7 	bne.w	800299e <HAL_UART_MspInit+0x172>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002850:	2300      	movs	r3, #0
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	4b55      	ldr	r3, [pc, #340]	@ (80029ac <HAL_UART_MspInit+0x180>)
 8002856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002858:	4a54      	ldr	r2, [pc, #336]	@ (80029ac <HAL_UART_MspInit+0x180>)
 800285a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800285e:	6413      	str	r3, [r2, #64]	@ 0x40
 8002860:	4b52      	ldr	r3, [pc, #328]	@ (80029ac <HAL_UART_MspInit+0x180>)
 8002862:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002864:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002868:	613b      	str	r3, [r7, #16]
 800286a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	4b4e      	ldr	r3, [pc, #312]	@ (80029ac <HAL_UART_MspInit+0x180>)
 8002872:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002874:	4a4d      	ldr	r2, [pc, #308]	@ (80029ac <HAL_UART_MspInit+0x180>)
 8002876:	f043 0304 	orr.w	r3, r3, #4
 800287a:	6313      	str	r3, [r2, #48]	@ 0x30
 800287c:	4b4b      	ldr	r3, [pc, #300]	@ (80029ac <HAL_UART_MspInit+0x180>)
 800287e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002880:	f003 0304 	and.w	r3, r3, #4
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002888:	2300      	movs	r3, #0
 800288a:	60bb      	str	r3, [r7, #8]
 800288c:	4b47      	ldr	r3, [pc, #284]	@ (80029ac <HAL_UART_MspInit+0x180>)
 800288e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002890:	4a46      	ldr	r2, [pc, #280]	@ (80029ac <HAL_UART_MspInit+0x180>)
 8002892:	f043 0308 	orr.w	r3, r3, #8
 8002896:	6313      	str	r3, [r2, #48]	@ 0x30
 8002898:	4b44      	ldr	r3, [pc, #272]	@ (80029ac <HAL_UART_MspInit+0x180>)
 800289a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800289c:	f003 0308 	and.w	r3, r3, #8
 80028a0:	60bb      	str	r3, [r7, #8]
 80028a2:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80028a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028aa:	2302      	movs	r3, #2
 80028ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ae:	2300      	movs	r3, #0
 80028b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b2:	2303      	movs	r3, #3
 80028b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80028b6:	2308      	movs	r3, #8
 80028b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028ba:	f107 0314 	add.w	r3, r7, #20
 80028be:	4619      	mov	r1, r3
 80028c0:	483b      	ldr	r0, [pc, #236]	@ (80029b0 <HAL_UART_MspInit+0x184>)
 80028c2:	f001 fdf7 	bl	80044b4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80028c6:	2304      	movs	r3, #4
 80028c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ca:	2302      	movs	r3, #2
 80028cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ce:	2300      	movs	r3, #0
 80028d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d2:	2303      	movs	r3, #3
 80028d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80028d6:	2308      	movs	r3, #8
 80028d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80028da:	f107 0314 	add.w	r3, r7, #20
 80028de:	4619      	mov	r1, r3
 80028e0:	4834      	ldr	r0, [pc, #208]	@ (80029b4 <HAL_UART_MspInit+0x188>)
 80028e2:	f001 fde7 	bl	80044b4 <HAL_GPIO_Init>

    /* UART5 DMA Init */
    /* UART5_RX Init */
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80028e6:	4b34      	ldr	r3, [pc, #208]	@ (80029b8 <HAL_UART_MspInit+0x18c>)
 80028e8:	4a34      	ldr	r2, [pc, #208]	@ (80029bc <HAL_UART_MspInit+0x190>)
 80028ea:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80028ec:	4b32      	ldr	r3, [pc, #200]	@ (80029b8 <HAL_UART_MspInit+0x18c>)
 80028ee:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80028f2:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028f4:	4b30      	ldr	r3, [pc, #192]	@ (80029b8 <HAL_UART_MspInit+0x18c>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028fa:	4b2f      	ldr	r3, [pc, #188]	@ (80029b8 <HAL_UART_MspInit+0x18c>)
 80028fc:	2200      	movs	r2, #0
 80028fe:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002900:	4b2d      	ldr	r3, [pc, #180]	@ (80029b8 <HAL_UART_MspInit+0x18c>)
 8002902:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002906:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002908:	4b2b      	ldr	r3, [pc, #172]	@ (80029b8 <HAL_UART_MspInit+0x18c>)
 800290a:	2200      	movs	r2, #0
 800290c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800290e:	4b2a      	ldr	r3, [pc, #168]	@ (80029b8 <HAL_UART_MspInit+0x18c>)
 8002910:	2200      	movs	r2, #0
 8002912:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002914:	4b28      	ldr	r3, [pc, #160]	@ (80029b8 <HAL_UART_MspInit+0x18c>)
 8002916:	2200      	movs	r2, #0
 8002918:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800291a:	4b27      	ldr	r3, [pc, #156]	@ (80029b8 <HAL_UART_MspInit+0x18c>)
 800291c:	2200      	movs	r2, #0
 800291e:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002920:	4b25      	ldr	r3, [pc, #148]	@ (80029b8 <HAL_UART_MspInit+0x18c>)
 8002922:	2200      	movs	r2, #0
 8002924:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002926:	4824      	ldr	r0, [pc, #144]	@ (80029b8 <HAL_UART_MspInit+0x18c>)
 8002928:	f001 f8da 	bl	8003ae0 <HAL_DMA_Init>
 800292c:	4603      	mov	r3, r0
 800292e:	2b00      	cmp	r3, #0
 8002930:	d001      	beq.n	8002936 <HAL_UART_MspInit+0x10a>
    {
      Error_Handler();
 8002932:	f7ff feb3 	bl	800269c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	4a1f      	ldr	r2, [pc, #124]	@ (80029b8 <HAL_UART_MspInit+0x18c>)
 800293a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800293c:	4a1e      	ldr	r2, [pc, #120]	@ (80029b8 <HAL_UART_MspInit+0x18c>)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART5_TX Init */
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8002942:	4b1f      	ldr	r3, [pc, #124]	@ (80029c0 <HAL_UART_MspInit+0x194>)
 8002944:	4a1f      	ldr	r2, [pc, #124]	@ (80029c4 <HAL_UART_MspInit+0x198>)
 8002946:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8002948:	4b1d      	ldr	r3, [pc, #116]	@ (80029c0 <HAL_UART_MspInit+0x194>)
 800294a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800294e:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002950:	4b1b      	ldr	r3, [pc, #108]	@ (80029c0 <HAL_UART_MspInit+0x194>)
 8002952:	2240      	movs	r2, #64	@ 0x40
 8002954:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002956:	4b1a      	ldr	r3, [pc, #104]	@ (80029c0 <HAL_UART_MspInit+0x194>)
 8002958:	2200      	movs	r2, #0
 800295a:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800295c:	4b18      	ldr	r3, [pc, #96]	@ (80029c0 <HAL_UART_MspInit+0x194>)
 800295e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002962:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002964:	4b16      	ldr	r3, [pc, #88]	@ (80029c0 <HAL_UART_MspInit+0x194>)
 8002966:	2200      	movs	r2, #0
 8002968:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800296a:	4b15      	ldr	r3, [pc, #84]	@ (80029c0 <HAL_UART_MspInit+0x194>)
 800296c:	2200      	movs	r2, #0
 800296e:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8002970:	4b13      	ldr	r3, [pc, #76]	@ (80029c0 <HAL_UART_MspInit+0x194>)
 8002972:	2200      	movs	r2, #0
 8002974:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002976:	4b12      	ldr	r3, [pc, #72]	@ (80029c0 <HAL_UART_MspInit+0x194>)
 8002978:	2200      	movs	r2, #0
 800297a:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800297c:	4b10      	ldr	r3, [pc, #64]	@ (80029c0 <HAL_UART_MspInit+0x194>)
 800297e:	2200      	movs	r2, #0
 8002980:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002982:	480f      	ldr	r0, [pc, #60]	@ (80029c0 <HAL_UART_MspInit+0x194>)
 8002984:	f001 f8ac 	bl	8003ae0 <HAL_DMA_Init>
 8002988:	4603      	mov	r3, r0
 800298a:	2b00      	cmp	r3, #0
 800298c:	d001      	beq.n	8002992 <HAL_UART_MspInit+0x166>
    {
      Error_Handler();
 800298e:	f7ff fe85 	bl	800269c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart5_tx);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	4a0a      	ldr	r2, [pc, #40]	@ (80029c0 <HAL_UART_MspInit+0x194>)
 8002996:	639a      	str	r2, [r3, #56]	@ 0x38
 8002998:	4a09      	ldr	r2, [pc, #36]	@ (80029c0 <HAL_UART_MspInit+0x194>)
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	6393      	str	r3, [r2, #56]	@ 0x38

  /* USER CODE END UART5_MspInit 1 */

  }

}
 800299e:	bf00      	nop
 80029a0:	3728      	adds	r7, #40	@ 0x28
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	40005000 	.word	0x40005000
 80029ac:	40023800 	.word	0x40023800
 80029b0:	40020800 	.word	0x40020800
 80029b4:	40020c00 	.word	0x40020c00
 80029b8:	20000350 	.word	0x20000350
 80029bc:	40026010 	.word	0x40026010
 80029c0:	200003b0 	.word	0x200003b0
 80029c4:	400260b8 	.word	0x400260b8

080029c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b08c      	sub	sp, #48	@ 0x30
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80029d0:	2300      	movs	r3, #0
 80029d2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80029d4:	2300      	movs	r3, #0
 80029d6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80029d8:	2300      	movs	r3, #0
 80029da:	60bb      	str	r3, [r7, #8]
 80029dc:	4b2e      	ldr	r3, [pc, #184]	@ (8002a98 <HAL_InitTick+0xd0>)
 80029de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029e0:	4a2d      	ldr	r2, [pc, #180]	@ (8002a98 <HAL_InitTick+0xd0>)
 80029e2:	f043 0301 	orr.w	r3, r3, #1
 80029e6:	6453      	str	r3, [r2, #68]	@ 0x44
 80029e8:	4b2b      	ldr	r3, [pc, #172]	@ (8002a98 <HAL_InitTick+0xd0>)
 80029ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ec:	f003 0301 	and.w	r3, r3, #1
 80029f0:	60bb      	str	r3, [r7, #8]
 80029f2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029f4:	f107 020c 	add.w	r2, r7, #12
 80029f8:	f107 0310 	add.w	r3, r7, #16
 80029fc:	4611      	mov	r1, r2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f003 fef0 	bl	80067e4 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002a04:	f003 feda 	bl	80067bc <HAL_RCC_GetPCLK2Freq>
 8002a08:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a0c:	4a23      	ldr	r2, [pc, #140]	@ (8002a9c <HAL_InitTick+0xd4>)
 8002a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a12:	0c9b      	lsrs	r3, r3, #18
 8002a14:	3b01      	subs	r3, #1
 8002a16:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002a18:	4b21      	ldr	r3, [pc, #132]	@ (8002aa0 <HAL_InitTick+0xd8>)
 8002a1a:	4a22      	ldr	r2, [pc, #136]	@ (8002aa4 <HAL_InitTick+0xdc>)
 8002a1c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002a1e:	4b20      	ldr	r3, [pc, #128]	@ (8002aa0 <HAL_InitTick+0xd8>)
 8002a20:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002a24:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002a26:	4a1e      	ldr	r2, [pc, #120]	@ (8002aa0 <HAL_InitTick+0xd8>)
 8002a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a2a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002a2c:	4b1c      	ldr	r3, [pc, #112]	@ (8002aa0 <HAL_InitTick+0xd8>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a32:	4b1b      	ldr	r3, [pc, #108]	@ (8002aa0 <HAL_InitTick+0xd8>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a38:	4b19      	ldr	r3, [pc, #100]	@ (8002aa0 <HAL_InitTick+0xd8>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002a3e:	4818      	ldr	r0, [pc, #96]	@ (8002aa0 <HAL_InitTick+0xd8>)
 8002a40:	f003 ff02 	bl	8006848 <HAL_TIM_Base_Init>
 8002a44:	4603      	mov	r3, r0
 8002a46:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002a4a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d11b      	bne.n	8002a8a <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002a52:	4813      	ldr	r0, [pc, #76]	@ (8002aa0 <HAL_InitTick+0xd8>)
 8002a54:	f004 f81a 	bl	8006a8c <HAL_TIM_Base_Start_IT>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002a5e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d111      	bne.n	8002a8a <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002a66:	2019      	movs	r0, #25
 8002a68:	f001 f822 	bl	8003ab0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	2b0f      	cmp	r3, #15
 8002a70:	d808      	bhi.n	8002a84 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002a72:	2200      	movs	r2, #0
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	2019      	movs	r0, #25
 8002a78:	f000 ffee 	bl	8003a58 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002a7c:	4a0a      	ldr	r2, [pc, #40]	@ (8002aa8 <HAL_InitTick+0xe0>)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	6013      	str	r3, [r2, #0]
 8002a82:	e002      	b.n	8002a8a <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002a84:	2301      	movs	r3, #1
 8002a86:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002a8a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3730      	adds	r7, #48	@ 0x30
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800
 8002a9c:	431bde83 	.word	0x431bde83
 8002aa0:	20000450 	.word	0x20000450
 8002aa4:	40010000 	.word	0x40010000
 8002aa8:	20000004 	.word	0x20000004

08002aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ab0:	bf00      	nop
 8002ab2:	e7fd      	b.n	8002ab0 <NMI_Handler+0x4>

08002ab4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ab8:	bf00      	nop
 8002aba:	e7fd      	b.n	8002ab8 <HardFault_Handler+0x4>

08002abc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002abc:	b480      	push	{r7}
 8002abe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ac0:	bf00      	nop
 8002ac2:	e7fd      	b.n	8002ac0 <MemManage_Handler+0x4>

08002ac4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002ac8:	bf00      	nop
 8002aca:	e7fd      	b.n	8002ac8 <BusFault_Handler+0x4>

08002acc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002acc:	b480      	push	{r7}
 8002ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ad0:	bf00      	nop
 8002ad2:	e7fd      	b.n	8002ad0 <UsageFault_Handler+0x4>

08002ad4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ad8:	bf00      	nop
 8002ada:	46bd      	mov	sp, r7
 8002adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae0:	4770      	bx	lr

08002ae2 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8002ae6:	2001      	movs	r0, #1
 8002ae8:	f001 fff0 	bl	8004acc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8002aec:	bf00      	nop
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002af0:	b580      	push	{r7, lr}
 8002af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002af4:	4802      	ldr	r0, [pc, #8]	@ (8002b00 <DMA1_Stream0_IRQHandler+0x10>)
 8002af6:	f001 fa73 	bl	8003fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002afa:	bf00      	nop
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	20000350 	.word	0x20000350

08002b04 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002b04:	b580      	push	{r7, lr}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b08:	4802      	ldr	r0, [pc, #8]	@ (8002b14 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002b0a:	f004 f885 	bl	8006c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	bd80      	pop	{r7, pc}
 8002b12:	bf00      	nop
 8002b14:	20000450 	.word	0x20000450

08002b18 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8002b1c:	4802      	ldr	r0, [pc, #8]	@ (8002b28 <DMA1_Stream7_IRQHandler+0x10>)
 8002b1e:	f001 fa5f 	bl	8003fe0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8002b22:	bf00      	nop
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	200003b0 	.word	0x200003b0

08002b2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b2c:	b480      	push	{r7}
 8002b2e:	af00      	add	r7, sp, #0
  return 1;
 8002b30:	2301      	movs	r3, #1
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	46bd      	mov	sp, r7
 8002b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3a:	4770      	bx	lr

08002b3c <_kill>:

int _kill(int pid, int sig)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b082      	sub	sp, #8
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b46:	f009 fe51 	bl	800c7ec <__errno>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	2216      	movs	r2, #22
 8002b4e:	601a      	str	r2, [r3, #0]
  return -1;
 8002b50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <_exit>:

void _exit (int status)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b64:	f04f 31ff 	mov.w	r1, #4294967295
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f7ff ffe7 	bl	8002b3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b6e:	bf00      	nop
 8002b70:	e7fd      	b.n	8002b6e <_exit+0x12>

08002b72 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b086      	sub	sp, #24
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	60f8      	str	r0, [r7, #12]
 8002b7a:	60b9      	str	r1, [r7, #8]
 8002b7c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b7e:	2300      	movs	r3, #0
 8002b80:	617b      	str	r3, [r7, #20]
 8002b82:	e00a      	b.n	8002b9a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b84:	f3af 8000 	nop.w
 8002b88:	4601      	mov	r1, r0
 8002b8a:	68bb      	ldr	r3, [r7, #8]
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	60ba      	str	r2, [r7, #8]
 8002b90:	b2ca      	uxtb	r2, r1
 8002b92:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	3301      	adds	r3, #1
 8002b98:	617b      	str	r3, [r7, #20]
 8002b9a:	697a      	ldr	r2, [r7, #20]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	429a      	cmp	r2, r3
 8002ba0:	dbf0      	blt.n	8002b84 <_read+0x12>
  }

  return len;
 8002ba2:	687b      	ldr	r3, [r7, #4]
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3718      	adds	r7, #24
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <_close>:
  }
  return len;
}

int _close(int file)
{
 8002bac:	b480      	push	{r7}
 8002bae:	b083      	sub	sp, #12
 8002bb0:	af00      	add	r7, sp, #0
 8002bb2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bb4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	370c      	adds	r7, #12
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
 8002bcc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bd4:	605a      	str	r2, [r3, #4]
  return 0;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <_isatty>:

int _isatty(int file)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bec:	2301      	movs	r3, #1
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	370c      	adds	r7, #12
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf8:	4770      	bx	lr

08002bfa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bfa:	b480      	push	{r7}
 8002bfc:	b085      	sub	sp, #20
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	60f8      	str	r0, [r7, #12]
 8002c02:	60b9      	str	r1, [r7, #8]
 8002c04:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c06:	2300      	movs	r3, #0
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	3714      	adds	r7, #20
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c18:	4b06      	ldr	r3, [pc, #24]	@ (8002c34 <SystemInit+0x20>)
 8002c1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c1e:	4a05      	ldr	r2, [pc, #20]	@ (8002c34 <SystemInit+0x20>)
 8002c20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c38:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c70 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c3c:	f7ff ffea 	bl	8002c14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c40:	480c      	ldr	r0, [pc, #48]	@ (8002c74 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c42:	490d      	ldr	r1, [pc, #52]	@ (8002c78 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c44:	4a0d      	ldr	r2, [pc, #52]	@ (8002c7c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c48:	e002      	b.n	8002c50 <LoopCopyDataInit>

08002c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c4e:	3304      	adds	r3, #4

08002c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c54:	d3f9      	bcc.n	8002c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c56:	4a0a      	ldr	r2, [pc, #40]	@ (8002c80 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c58:	4c0a      	ldr	r4, [pc, #40]	@ (8002c84 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c5c:	e001      	b.n	8002c62 <LoopFillZerobss>

08002c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c60:	3204      	adds	r2, #4

08002c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c64:	d3fb      	bcc.n	8002c5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c66:	f009 fdc7 	bl	800c7f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c6a:	f7ff f813 	bl	8001c94 <main>
  bx  lr    
 8002c6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c78:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002c7c:	0800ff08 	.word	0x0800ff08
  ldr r2, =_sbss
 8002c80:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002c84:	20013d8c 	.word	0x20013d8c

08002c88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c88:	e7fe      	b.n	8002c88 <ADC_IRQHandler>
	...

08002c8c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c90:	4b0e      	ldr	r3, [pc, #56]	@ (8002ccc <HAL_Init+0x40>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a0d      	ldr	r2, [pc, #52]	@ (8002ccc <HAL_Init+0x40>)
 8002c96:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c9a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8002ccc <HAL_Init+0x40>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	4a0a      	ldr	r2, [pc, #40]	@ (8002ccc <HAL_Init+0x40>)
 8002ca2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002ca6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ca8:	4b08      	ldr	r3, [pc, #32]	@ (8002ccc <HAL_Init+0x40>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a07      	ldr	r2, [pc, #28]	@ (8002ccc <HAL_Init+0x40>)
 8002cae:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb4:	2003      	movs	r0, #3
 8002cb6:	f000 feaf 	bl	8003a18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cba:	200f      	movs	r0, #15
 8002cbc:	f7ff fe84 	bl	80029c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cc0:	f7ff fd00 	bl	80026c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	40023c00 	.word	0x40023c00

08002cd0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cd4:	4b06      	ldr	r3, [pc, #24]	@ (8002cf0 <HAL_IncTick+0x20>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	461a      	mov	r2, r3
 8002cda:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <HAL_IncTick+0x24>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4413      	add	r3, r2
 8002ce0:	4a04      	ldr	r2, [pc, #16]	@ (8002cf4 <HAL_IncTick+0x24>)
 8002ce2:	6013      	str	r3, [r2, #0]
}
 8002ce4:	bf00      	nop
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
 8002cee:	bf00      	nop
 8002cf0:	20000008 	.word	0x20000008
 8002cf4:	20000498 	.word	0x20000498

08002cf8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	af00      	add	r7, sp, #0
  return uwTick;
 8002cfc:	4b03      	ldr	r3, [pc, #12]	@ (8002d0c <HAL_GetTick+0x14>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr
 8002d0a:	bf00      	nop
 8002d0c:	20000498 	.word	0x20000498

08002d10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	b084      	sub	sp, #16
 8002d14:	af00      	add	r7, sp, #0
 8002d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d18:	f7ff ffee 	bl	8002cf8 <HAL_GetTick>
 8002d1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d28:	d005      	beq.n	8002d36 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8002d54 <HAL_Delay+0x44>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	461a      	mov	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	4413      	add	r3, r2
 8002d34:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d36:	bf00      	nop
 8002d38:	f7ff ffde 	bl	8002cf8 <HAL_GetTick>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d8f7      	bhi.n	8002d38 <HAL_Delay+0x28>
  {
  }
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3710      	adds	r7, #16
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	20000008 	.word	0x20000008

08002d58 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b084      	sub	sp, #16
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d60:	2300      	movs	r3, #0
 8002d62:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e15c      	b.n	8003028 <HAL_ADC_Init+0x2d0>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a8e      	ldr	r2, [pc, #568]	@ (8002fac <HAL_ADC_Init+0x254>)
 8002d74:	4293      	cmp	r3, r2
 8002d76:	d00e      	beq.n	8002d96 <HAL_ADC_Init+0x3e>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a8c      	ldr	r2, [pc, #560]	@ (8002fb0 <HAL_ADC_Init+0x258>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d009      	beq.n	8002d96 <HAL_ADC_Init+0x3e>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a8b      	ldr	r2, [pc, #556]	@ (8002fb4 <HAL_ADC_Init+0x25c>)
 8002d88:	4293      	cmp	r3, r2
 8002d8a:	d004      	beq.n	8002d96 <HAL_ADC_Init+0x3e>
 8002d8c:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8002d90:	4889      	ldr	r0, [pc, #548]	@ (8002fb8 <HAL_ADC_Init+0x260>)
 8002d92:	f7ff fc89 	bl	80026a8 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d013      	beq.n	8002dc6 <HAL_ADC_Init+0x6e>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	685b      	ldr	r3, [r3, #4]
 8002da2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002da6:	d00e      	beq.n	8002dc6 <HAL_ADC_Init+0x6e>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002db0:	d009      	beq.n	8002dc6 <HAL_ADC_Init+0x6e>
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002dba:	d004      	beq.n	8002dc6 <HAL_ADC_Init+0x6e>
 8002dbc:	f240 1143 	movw	r1, #323	@ 0x143
 8002dc0:	487d      	ldr	r0, [pc, #500]	@ (8002fb8 <HAL_ADC_Init+0x260>)
 8002dc2:	f7ff fc71 	bl	80026a8 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d013      	beq.n	8002df6 <HAL_ADC_Init+0x9e>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dd6:	d00e      	beq.n	8002df6 <HAL_ADC_Init+0x9e>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	689b      	ldr	r3, [r3, #8]
 8002ddc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002de0:	d009      	beq.n	8002df6 <HAL_ADC_Init+0x9e>
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689b      	ldr	r3, [r3, #8]
 8002de6:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002dea:	d004      	beq.n	8002df6 <HAL_ADC_Init+0x9e>
 8002dec:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8002df0:	4871      	ldr	r0, [pc, #452]	@ (8002fb8 <HAL_ADC_Init+0x260>)
 8002df2:	f7ff fc59 	bl	80026a8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <HAL_ADC_Init+0xb8>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d004      	beq.n	8002e10 <HAL_ADC_Init+0xb8>
 8002e06:	f240 1145 	movw	r1, #325	@ 0x145
 8002e0a:	486b      	ldr	r0, [pc, #428]	@ (8002fb8 <HAL_ADC_Init+0x260>)
 8002e0c:	f7ff fc4c 	bl	80026a8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	7e1b      	ldrb	r3, [r3, #24]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d008      	beq.n	8002e2a <HAL_ADC_Init+0xd2>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	7e1b      	ldrb	r3, [r3, #24]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d004      	beq.n	8002e2a <HAL_ADC_Init+0xd2>
 8002e20:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8002e24:	4864      	ldr	r0, [pc, #400]	@ (8002fb8 <HAL_ADC_Init+0x260>)
 8002e26:	f7ff fc3f 	bl	80026a8 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d054      	beq.n	8002edc <HAL_ADC_Init+0x184>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e3a:	d04f      	beq.n	8002edc <HAL_ADC_Init+0x184>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e40:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e44:	d04a      	beq.n	8002edc <HAL_ADC_Init+0x184>
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e4e:	d045      	beq.n	8002edc <HAL_ADC_Init+0x184>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e58:	d040      	beq.n	8002edc <HAL_ADC_Init+0x184>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e5e:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002e62:	d03b      	beq.n	8002edc <HAL_ADC_Init+0x184>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e68:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8002e6c:	d036      	beq.n	8002edc <HAL_ADC_Init+0x184>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e72:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 8002e76:	d031      	beq.n	8002edc <HAL_ADC_Init+0x184>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e7c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e80:	d02c      	beq.n	8002edc <HAL_ADC_Init+0x184>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e86:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8002e8a:	d027      	beq.n	8002edc <HAL_ADC_Init+0x184>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e90:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 8002e94:	d022      	beq.n	8002edc <HAL_ADC_Init+0x184>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9a:	f1b3 6f30 	cmp.w	r3, #184549376	@ 0xb000000
 8002e9e:	d01d      	beq.n	8002edc <HAL_ADC_Init+0x184>
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea4:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8002ea8:	d018      	beq.n	8002edc <HAL_ADC_Init+0x184>
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eae:	f1b3 6f50 	cmp.w	r3, #218103808	@ 0xd000000
 8002eb2:	d013      	beq.n	8002edc <HAL_ADC_Init+0x184>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb8:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 8002ebc:	d00e      	beq.n	8002edc <HAL_ADC_Init+0x184>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002ec6:	d009      	beq.n	8002edc <HAL_ADC_Init+0x184>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ecc:	4a3b      	ldr	r2, [pc, #236]	@ (8002fbc <HAL_ADC_Init+0x264>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d004      	beq.n	8002edc <HAL_ADC_Init+0x184>
 8002ed2:	f240 1147 	movw	r1, #327	@ 0x147
 8002ed6:	4838      	ldr	r0, [pc, #224]	@ (8002fb8 <HAL_ADC_Init+0x260>)
 8002ed8:	f7ff fbe6 	bl	80026a8 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	68db      	ldr	r3, [r3, #12]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d009      	beq.n	8002ef8 <HAL_ADC_Init+0x1a0>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	68db      	ldr	r3, [r3, #12]
 8002ee8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002eec:	d004      	beq.n	8002ef8 <HAL_ADC_Init+0x1a0>
 8002eee:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8002ef2:	4831      	ldr	r0, [pc, #196]	@ (8002fb8 <HAL_ADC_Init+0x260>)
 8002ef4:	f7ff fbd8 	bl	80026a8 <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	69db      	ldr	r3, [r3, #28]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d003      	beq.n	8002f08 <HAL_ADC_Init+0x1b0>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
 8002f04:	2b10      	cmp	r3, #16
 8002f06:	d904      	bls.n	8002f12 <HAL_ADC_Init+0x1ba>
 8002f08:	f240 1149 	movw	r1, #329	@ 0x149
 8002f0c:	482a      	ldr	r0, [pc, #168]	@ (8002fb8 <HAL_ADC_Init+0x260>)
 8002f0e:	f7ff fbcb 	bl	80026a8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d009      	beq.n	8002f30 <HAL_ADC_Init+0x1d8>
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d004      	beq.n	8002f30 <HAL_ADC_Init+0x1d8>
 8002f26:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8002f2a:	4823      	ldr	r0, [pc, #140]	@ (8002fb8 <HAL_ADC_Init+0x260>)
 8002f2c:	f7ff fbbc 	bl	80026a8 <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	695b      	ldr	r3, [r3, #20]
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d00c      	beq.n	8002f52 <HAL_ADC_Init+0x1fa>
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	695b      	ldr	r3, [r3, #20]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d008      	beq.n	8002f52 <HAL_ADC_Init+0x1fa>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	2b02      	cmp	r3, #2
 8002f46:	d004      	beq.n	8002f52 <HAL_ADC_Init+0x1fa>
 8002f48:	f240 114b 	movw	r1, #331	@ 0x14b
 8002f4c:	481a      	ldr	r0, [pc, #104]	@ (8002fb8 <HAL_ADC_Init+0x260>)
 8002f4e:	f7ff fbab 	bl	80026a8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d009      	beq.n	8002f70 <HAL_ADC_Init+0x218>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d004      	beq.n	8002f70 <HAL_ADC_Init+0x218>
 8002f66:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8002f6a:	4813      	ldr	r0, [pc, #76]	@ (8002fb8 <HAL_ADC_Init+0x260>)
 8002f6c:	f7ff fb9c 	bl	80026a8 <assert_failed>

  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f74:	4a11      	ldr	r2, [pc, #68]	@ (8002fbc <HAL_ADC_Init+0x264>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d022      	beq.n	8002fc0 <HAL_ADC_Init+0x268>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d01e      	beq.n	8002fc0 <HAL_ADC_Init+0x268>
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f86:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f8a:	d019      	beq.n	8002fc0 <HAL_ADC_Init+0x268>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f90:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f94:	d014      	beq.n	8002fc0 <HAL_ADC_Init+0x268>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002f9e:	d00f      	beq.n	8002fc0 <HAL_ADC_Init+0x268>
 8002fa0:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8002fa4:	4804      	ldr	r0, [pc, #16]	@ (8002fb8 <HAL_ADC_Init+0x260>)
 8002fa6:	f7ff fb7f 	bl	80026a8 <assert_failed>
 8002faa:	e009      	b.n	8002fc0 <HAL_ADC_Init+0x268>
 8002fac:	40012000 	.word	0x40012000
 8002fb0:	40012100 	.word	0x40012100
 8002fb4:	40012200 	.word	0x40012200
 8002fb8:	0800f884 	.word	0x0800f884
 8002fbc:	0f000001 	.word	0x0f000001
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d109      	bne.n	8002fdc <HAL_ADC_Init+0x284>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f7ff fba3 	bl	8002714 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe0:	f003 0310 	and.w	r3, r3, #16
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d118      	bne.n	800301a <HAL_ADC_Init+0x2c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fec:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ff0:	f023 0302 	bic.w	r3, r3, #2
 8002ff4:	f043 0202 	orr.w	r2, r3, #2
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 fb53 	bl	80036a8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300c:	f023 0303 	bic.w	r3, r3, #3
 8003010:	f043 0201 	orr.w	r2, r3, #1
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	641a      	str	r2, [r3, #64]	@ 0x40
 8003018:	e001      	b.n	800301e <HAL_ADC_Init+0x2c6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	2200      	movs	r2, #0
 8003022:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003026:	7bfb      	ldrb	r3, [r7, #15]
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8003038:	2300      	movs	r3, #0
 800303a:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	7e1b      	ldrb	r3, [r3, #24]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d008      	beq.n	8003056 <HAL_ADC_Start+0x26>
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	7e1b      	ldrb	r3, [r3, #24]
 8003048:	2b01      	cmp	r3, #1
 800304a:	d004      	beq.n	8003056 <HAL_ADC_Start+0x26>
 800304c:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8003050:	486c      	ldr	r0, [pc, #432]	@ (8003204 <HAL_ADC_Start+0x1d4>)
 8003052:	f7ff fb29 	bl	80026a8 <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305a:	2b00      	cmp	r3, #0
 800305c:	d013      	beq.n	8003086 <HAL_ADC_Start+0x56>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003062:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003066:	d00e      	beq.n	8003086 <HAL_ADC_Start+0x56>
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800306c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003070:	d009      	beq.n	8003086 <HAL_ADC_Start+0x56>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003076:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800307a:	d004      	beq.n	8003086 <HAL_ADC_Start+0x56>
 800307c:	f240 21d3 	movw	r1, #723	@ 0x2d3
 8003080:	4860      	ldr	r0, [pc, #384]	@ (8003204 <HAL_ADC_Start+0x1d4>)
 8003082:	f7ff fb11 	bl	80026a8 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800308c:	2b01      	cmp	r3, #1
 800308e:	d101      	bne.n	8003094 <HAL_ADC_Start+0x64>
 8003090:	2302      	movs	r3, #2
 8003092:	e0b2      	b.n	80031fa <HAL_ADC_Start+0x1ca>
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d018      	beq.n	80030dc <HAL_ADC_Start+0xac>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	689a      	ldr	r2, [r3, #8]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f042 0201 	orr.w	r2, r2, #1
 80030b8:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030ba:	4b53      	ldr	r3, [pc, #332]	@ (8003208 <HAL_ADC_Start+0x1d8>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4a53      	ldr	r2, [pc, #332]	@ (800320c <HAL_ADC_Start+0x1dc>)
 80030c0:	fba2 2303 	umull	r2, r3, r2, r3
 80030c4:	0c9a      	lsrs	r2, r3, #18
 80030c6:	4613      	mov	r3, r2
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	4413      	add	r3, r2
 80030cc:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80030ce:	e002      	b.n	80030d6 <HAL_ADC_Start+0xa6>
    {
      counter--;
 80030d0:	68bb      	ldr	r3, [r7, #8]
 80030d2:	3b01      	subs	r3, #1
 80030d4:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d1f9      	bne.n	80030d0 <HAL_ADC_Start+0xa0>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	689b      	ldr	r3, [r3, #8]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	2b01      	cmp	r3, #1
 80030e8:	d17a      	bne.n	80031e0 <HAL_ADC_Start+0x1b0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030ee:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80030f2:	f023 0301 	bic.w	r3, r3, #1
 80030f6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003108:	2b00      	cmp	r3, #0
 800310a:	d007      	beq.n	800311c <HAL_ADC_Start+0xec>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003110:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003114:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003120:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003128:	d106      	bne.n	8003138 <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800312e:	f023 0206 	bic.w	r2, r3, #6
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	645a      	str	r2, [r3, #68]	@ 0x44
 8003136:	e002      	b.n	800313e <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	2200      	movs	r2, #0
 800313c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003146:	4b32      	ldr	r3, [pc, #200]	@ (8003210 <HAL_ADC_Start+0x1e0>)
 8003148:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003152:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f003 031f 	and.w	r3, r3, #31
 800315c:	2b00      	cmp	r3, #0
 800315e:	d12a      	bne.n	80031b6 <HAL_ADC_Start+0x186>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a2b      	ldr	r2, [pc, #172]	@ (8003214 <HAL_ADC_Start+0x1e4>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d015      	beq.n	8003196 <HAL_ADC_Start+0x166>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	4a2a      	ldr	r2, [pc, #168]	@ (8003218 <HAL_ADC_Start+0x1e8>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d105      	bne.n	8003180 <HAL_ADC_Start+0x150>
 8003174:	4b26      	ldr	r3, [pc, #152]	@ (8003210 <HAL_ADC_Start+0x1e0>)
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f003 031f 	and.w	r3, r3, #31
 800317c:	2b00      	cmp	r3, #0
 800317e:	d00a      	beq.n	8003196 <HAL_ADC_Start+0x166>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a25      	ldr	r2, [pc, #148]	@ (800321c <HAL_ADC_Start+0x1ec>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d136      	bne.n	80031f8 <HAL_ADC_Start+0x1c8>
 800318a:	4b21      	ldr	r3, [pc, #132]	@ (8003210 <HAL_ADC_Start+0x1e0>)
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	f003 0310 	and.w	r3, r3, #16
 8003192:	2b00      	cmp	r3, #0
 8003194:	d130      	bne.n	80031f8 <HAL_ADC_Start+0x1c8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d129      	bne.n	80031f8 <HAL_ADC_Start+0x1c8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80031b2:	609a      	str	r2, [r3, #8]
 80031b4:	e020      	b.n	80031f8 <HAL_ADC_Start+0x1c8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	4a16      	ldr	r2, [pc, #88]	@ (8003214 <HAL_ADC_Start+0x1e4>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d11b      	bne.n	80031f8 <HAL_ADC_Start+0x1c8>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d114      	bne.n	80031f8 <HAL_ADC_Start+0x1c8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80031dc:	609a      	str	r2, [r3, #8]
 80031de:	e00b      	b.n	80031f8 <HAL_ADC_Start+0x1c8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e4:	f043 0210 	orr.w	r2, r3, #16
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f0:	f043 0201 	orr.w	r2, r3, #1
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80031f8:	2300      	movs	r3, #0
}
 80031fa:	4618      	mov	r0, r3
 80031fc:	3710      	adds	r7, #16
 80031fe:	46bd      	mov	sp, r7
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	0800f884 	.word	0x0800f884
 8003208:	20000000 	.word	0x20000000
 800320c:	431bde83 	.word	0x431bde83
 8003210:	40012300 	.word	0x40012300
 8003214:	40012000 	.word	0x40012000
 8003218:	40012100 	.word	0x40012100
 800321c:	40012200 	.word	0x40012200

08003220 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a1f      	ldr	r2, [pc, #124]	@ (80032ac <HAL_ADC_Stop+0x8c>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d00e      	beq.n	8003250 <HAL_ADC_Stop+0x30>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a1e      	ldr	r2, [pc, #120]	@ (80032b0 <HAL_ADC_Stop+0x90>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d009      	beq.n	8003250 <HAL_ADC_Stop+0x30>
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	4a1c      	ldr	r2, [pc, #112]	@ (80032b4 <HAL_ADC_Stop+0x94>)
 8003242:	4293      	cmp	r3, r2
 8003244:	d004      	beq.n	8003250 <HAL_ADC_Stop+0x30>
 8003246:	f240 314a 	movw	r1, #842	@ 0x34a
 800324a:	481b      	ldr	r0, [pc, #108]	@ (80032b8 <HAL_ADC_Stop+0x98>)
 800324c:	f7ff fa2c 	bl	80026a8 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003256:	2b01      	cmp	r3, #1
 8003258:	d101      	bne.n	800325e <HAL_ADC_Stop+0x3e>
 800325a:	2302      	movs	r3, #2
 800325c:	e021      	b.n	80032a2 <HAL_ADC_Stop+0x82>
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2201      	movs	r2, #1
 8003262:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689a      	ldr	r2, [r3, #8]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f022 0201 	bic.w	r2, r2, #1
 8003274:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f003 0301 	and.w	r3, r3, #1
 8003280:	2b00      	cmp	r3, #0
 8003282:	d109      	bne.n	8003298 <HAL_ADC_Stop+0x78>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003288:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800328c:	f023 0301 	bic.w	r3, r3, #1
 8003290:	f043 0201 	orr.w	r2, r3, #1
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2200      	movs	r2, #0
 800329c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80032a0:	2300      	movs	r3, #0
}
 80032a2:	4618      	mov	r0, r3
 80032a4:	3708      	adds	r7, #8
 80032a6:	46bd      	mov	sp, r7
 80032a8:	bd80      	pop	{r7, pc}
 80032aa:	bf00      	nop
 80032ac:	40012000 	.word	0x40012000
 80032b0:	40012100 	.word	0x40012100
 80032b4:	40012200 	.word	0x40012200
 80032b8:	0800f884 	.word	0x0800f884

080032bc <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b084      	sub	sp, #16
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
 80032c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032d8:	d113      	bne.n	8003302 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80032e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032e8:	d10b      	bne.n	8003302 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ee:	f043 0220 	orr.w	r2, r3, #32
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e063      	b.n	80033ca <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003302:	f7ff fcf9 	bl	8002cf8 <HAL_GetTick>
 8003306:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003308:	e021      	b.n	800334e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003310:	d01d      	beq.n	800334e <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d007      	beq.n	8003328 <HAL_ADC_PollForConversion+0x6c>
 8003318:	f7ff fcee 	bl	8002cf8 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	683a      	ldr	r2, [r7, #0]
 8003324:	429a      	cmp	r2, r3
 8003326:	d212      	bcs.n	800334e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0302 	and.w	r3, r3, #2
 8003332:	2b02      	cmp	r3, #2
 8003334:	d00b      	beq.n	800334e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333a:	f043 0204 	orr.w	r2, r3, #4
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	2200      	movs	r2, #0
 8003346:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e03d      	b.n	80033ca <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b02      	cmp	r3, #2
 800335a:	d1d6      	bne.n	800330a <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f06f 0212 	mvn.w	r2, #18
 8003364:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800337c:	2b00      	cmp	r3, #0
 800337e:	d123      	bne.n	80033c8 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003384:	2b00      	cmp	r3, #0
 8003386:	d11f      	bne.n	80033c8 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800338e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003392:	2b00      	cmp	r3, #0
 8003394:	d006      	beq.n	80033a4 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d111      	bne.n	80033c8 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033a8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d105      	bne.n	80033c8 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c0:	f043 0201 	orr.w	r2, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80033c8:	2300      	movs	r3, #0
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80033d2:	b480      	push	{r7}
 80033d4:	b083      	sub	sp, #12
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80033e0:	4618      	mov	r0, r3
 80033e2:	370c      	adds	r7, #12
 80033e4:	46bd      	mov	sp, r7
 80033e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ea:	4770      	bx	lr

080033ec <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	2b12      	cmp	r3, #18
 8003400:	d904      	bls.n	800340c <HAL_ADC_ConfigChannel+0x20>
 8003402:	f240 618b 	movw	r1, #1675	@ 0x68b
 8003406:	486f      	ldr	r0, [pc, #444]	@ (80035c4 <HAL_ADC_ConfigChannel+0x1d8>)
 8003408:	f7ff f94e 	bl	80026a8 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d003      	beq.n	800341c <HAL_ADC_ConfigChannel+0x30>
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b10      	cmp	r3, #16
 800341a:	d904      	bls.n	8003426 <HAL_ADC_ConfigChannel+0x3a>
 800341c:	f240 618c 	movw	r1, #1676	@ 0x68c
 8003420:	4868      	ldr	r0, [pc, #416]	@ (80035c4 <HAL_ADC_ConfigChannel+0x1d8>)
 8003422:	f7ff f941 	bl	80026a8 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	689b      	ldr	r3, [r3, #8]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d020      	beq.n	8003470 <HAL_ADC_ConfigChannel+0x84>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	689b      	ldr	r3, [r3, #8]
 8003432:	2b01      	cmp	r3, #1
 8003434:	d01c      	beq.n	8003470 <HAL_ADC_ConfigChannel+0x84>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	2b02      	cmp	r3, #2
 800343c:	d018      	beq.n	8003470 <HAL_ADC_ConfigChannel+0x84>
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2b03      	cmp	r3, #3
 8003444:	d014      	beq.n	8003470 <HAL_ADC_ConfigChannel+0x84>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	689b      	ldr	r3, [r3, #8]
 800344a:	2b04      	cmp	r3, #4
 800344c:	d010      	beq.n	8003470 <HAL_ADC_ConfigChannel+0x84>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b05      	cmp	r3, #5
 8003454:	d00c      	beq.n	8003470 <HAL_ADC_ConfigChannel+0x84>
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	2b06      	cmp	r3, #6
 800345c:	d008      	beq.n	8003470 <HAL_ADC_ConfigChannel+0x84>
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	689b      	ldr	r3, [r3, #8]
 8003462:	2b07      	cmp	r3, #7
 8003464:	d004      	beq.n	8003470 <HAL_ADC_ConfigChannel+0x84>
 8003466:	f240 618d 	movw	r1, #1677	@ 0x68d
 800346a:	4856      	ldr	r0, [pc, #344]	@ (80035c4 <HAL_ADC_ConfigChannel+0x1d8>)
 800346c:	f7ff f91c 	bl	80026a8 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003476:	2b01      	cmp	r3, #1
 8003478:	d101      	bne.n	800347e <HAL_ADC_ConfigChannel+0x92>
 800347a:	2302      	movs	r3, #2
 800347c:	e107      	b.n	800368e <HAL_ADC_ConfigChannel+0x2a2>
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2201      	movs	r2, #1
 8003482:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b09      	cmp	r3, #9
 800348c:	d925      	bls.n	80034da <HAL_ADC_ConfigChannel+0xee>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	68d9      	ldr	r1, [r3, #12]
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	b29b      	uxth	r3, r3
 800349a:	461a      	mov	r2, r3
 800349c:	4613      	mov	r3, r2
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	4413      	add	r3, r2
 80034a2:	3b1e      	subs	r3, #30
 80034a4:	2207      	movs	r2, #7
 80034a6:	fa02 f303 	lsl.w	r3, r2, r3
 80034aa:	43da      	mvns	r2, r3
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	400a      	ands	r2, r1
 80034b2:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	68d9      	ldr	r1, [r3, #12]
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	4618      	mov	r0, r3
 80034c6:	4603      	mov	r3, r0
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	4403      	add	r3, r0
 80034cc:	3b1e      	subs	r3, #30
 80034ce:	409a      	lsls	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	430a      	orrs	r2, r1
 80034d6:	60da      	str	r2, [r3, #12]
 80034d8:	e022      	b.n	8003520 <HAL_ADC_ConfigChannel+0x134>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	6919      	ldr	r1, [r3, #16]
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	461a      	mov	r2, r3
 80034e8:	4613      	mov	r3, r2
 80034ea:	005b      	lsls	r3, r3, #1
 80034ec:	4413      	add	r3, r2
 80034ee:	2207      	movs	r2, #7
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	43da      	mvns	r2, r3
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	400a      	ands	r2, r1
 80034fc:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	6919      	ldr	r1, [r3, #16]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	b29b      	uxth	r3, r3
 800350e:	4618      	mov	r0, r3
 8003510:	4603      	mov	r3, r0
 8003512:	005b      	lsls	r3, r3, #1
 8003514:	4403      	add	r3, r0
 8003516:	409a      	lsls	r2, r3
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	430a      	orrs	r2, r1
 800351e:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	2b06      	cmp	r3, #6
 8003526:	d824      	bhi.n	8003572 <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	685a      	ldr	r2, [r3, #4]
 8003532:	4613      	mov	r3, r2
 8003534:	009b      	lsls	r3, r3, #2
 8003536:	4413      	add	r3, r2
 8003538:	3b05      	subs	r3, #5
 800353a:	221f      	movs	r2, #31
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43da      	mvns	r2, r3
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	400a      	ands	r2, r1
 8003548:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003550:	683b      	ldr	r3, [r7, #0]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	b29b      	uxth	r3, r3
 8003556:	4618      	mov	r0, r3
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	685a      	ldr	r2, [r3, #4]
 800355c:	4613      	mov	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	4413      	add	r3, r2
 8003562:	3b05      	subs	r3, #5
 8003564:	fa00 f203 	lsl.w	r2, r0, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	635a      	str	r2, [r3, #52]	@ 0x34
 8003570:	e04e      	b.n	8003610 <HAL_ADC_ConfigChannel+0x224>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	2b0c      	cmp	r3, #12
 8003578:	d826      	bhi.n	80035c8 <HAL_ADC_ConfigChannel+0x1dc>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	4613      	mov	r3, r2
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	3b23      	subs	r3, #35	@ 0x23
 800358c:	221f      	movs	r2, #31
 800358e:	fa02 f303 	lsl.w	r3, r2, r3
 8003592:	43da      	mvns	r2, r3
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	400a      	ands	r2, r1
 800359a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	4618      	mov	r0, r3
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	685a      	ldr	r2, [r3, #4]
 80035ae:	4613      	mov	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4413      	add	r3, r2
 80035b4:	3b23      	subs	r3, #35	@ 0x23
 80035b6:	fa00 f203 	lsl.w	r2, r0, r3
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80035c2:	e025      	b.n	8003610 <HAL_ADC_ConfigChannel+0x224>
 80035c4:	0800f884 	.word	0x0800f884
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	685a      	ldr	r2, [r3, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	009b      	lsls	r3, r3, #2
 80035d6:	4413      	add	r3, r2
 80035d8:	3b41      	subs	r3, #65	@ 0x41
 80035da:	221f      	movs	r2, #31
 80035dc:	fa02 f303 	lsl.w	r3, r2, r3
 80035e0:	43da      	mvns	r2, r3
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	400a      	ands	r2, r1
 80035e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	4618      	mov	r0, r3
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	685a      	ldr	r2, [r3, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	009b      	lsls	r3, r3, #2
 8003600:	4413      	add	r3, r2
 8003602:	3b41      	subs	r3, #65	@ 0x41
 8003604:	fa00 f203 	lsl.w	r2, r0, r3
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003610:	4b21      	ldr	r3, [pc, #132]	@ (8003698 <HAL_ADC_ConfigChannel+0x2ac>)
 8003612:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a20      	ldr	r2, [pc, #128]	@ (800369c <HAL_ADC_ConfigChannel+0x2b0>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d109      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x246>
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	2b12      	cmp	r3, #18
 8003624:	d105      	bne.n	8003632 <HAL_ADC_ConfigChannel+0x246>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4a19      	ldr	r2, [pc, #100]	@ (800369c <HAL_ADC_ConfigChannel+0x2b0>)
 8003638:	4293      	cmp	r3, r2
 800363a:	d123      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x298>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	2b10      	cmp	r3, #16
 8003642:	d003      	beq.n	800364c <HAL_ADC_ConfigChannel+0x260>
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	2b11      	cmp	r3, #17
 800364a:	d11b      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x298>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	2b10      	cmp	r3, #16
 800365e:	d111      	bne.n	8003684 <HAL_ADC_ConfigChannel+0x298>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003660:	4b0f      	ldr	r3, [pc, #60]	@ (80036a0 <HAL_ADC_ConfigChannel+0x2b4>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a0f      	ldr	r2, [pc, #60]	@ (80036a4 <HAL_ADC_ConfigChannel+0x2b8>)
 8003666:	fba2 2303 	umull	r2, r3, r2, r3
 800366a:	0c9a      	lsrs	r2, r3, #18
 800366c:	4613      	mov	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	4413      	add	r3, r2
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003676:	e002      	b.n	800367e <HAL_ADC_ConfigChannel+0x292>
      {
        counter--;
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	3b01      	subs	r3, #1
 800367c:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800367e:	68bb      	ldr	r3, [r7, #8]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d1f9      	bne.n	8003678 <HAL_ADC_ConfigChannel+0x28c>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40012300 	.word	0x40012300
 800369c:	40012000 	.word	0x40012000
 80036a0:	20000000 	.word	0x20000000
 80036a4:	431bde83 	.word	0x431bde83

080036a8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b084      	sub	sp, #16
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036b0:	4b7f      	ldr	r3, [pc, #508]	@ (80038b0 <ADC_Init+0x208>)
 80036b2:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	685b      	ldr	r3, [r3, #4]
 80036b8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	685a      	ldr	r2, [r3, #4]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	431a      	orrs	r2, r3
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	685a      	ldr	r2, [r3, #4]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6859      	ldr	r1, [r3, #4]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	691b      	ldr	r3, [r3, #16]
 80036e8:	021a      	lsls	r2, r3, #8
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	685a      	ldr	r2, [r3, #4]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003700:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6859      	ldr	r1, [r3, #4]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	689a      	ldr	r2, [r3, #8]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	430a      	orrs	r2, r1
 8003712:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	689a      	ldr	r2, [r3, #8]
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003722:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6899      	ldr	r1, [r3, #8]
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	68da      	ldr	r2, [r3, #12]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	430a      	orrs	r2, r1
 8003734:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373a:	4a5e      	ldr	r2, [pc, #376]	@ (80038b4 <ADC_Init+0x20c>)
 800373c:	4293      	cmp	r3, r2
 800373e:	d022      	beq.n	8003786 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	689a      	ldr	r2, [r3, #8]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800374e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	6899      	ldr	r1, [r3, #8]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	430a      	orrs	r2, r1
 8003760:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	689a      	ldr	r2, [r3, #8]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003770:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6899      	ldr	r1, [r3, #8]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	430a      	orrs	r2, r1
 8003782:	609a      	str	r2, [r3, #8]
 8003784:	e00f      	b.n	80037a6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	689a      	ldr	r2, [r3, #8]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003794:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	689a      	ldr	r2, [r3, #8]
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80037a4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	689a      	ldr	r2, [r3, #8]
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f022 0202 	bic.w	r2, r2, #2
 80037b4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6899      	ldr	r1, [r3, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	7e1b      	ldrb	r3, [r3, #24]
 80037c0:	005a      	lsls	r2, r3, #1
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	430a      	orrs	r2, r1
 80037c8:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d028      	beq.n	8003826 <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d003      	beq.n	80037e4 <ADC_Init+0x13c>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e0:	2b08      	cmp	r3, #8
 80037e2:	d904      	bls.n	80037ee <ADC_Init+0x146>
 80037e4:	f44f 61f5 	mov.w	r1, #1960	@ 0x7a8
 80037e8:	4833      	ldr	r0, [pc, #204]	@ (80038b8 <ADC_Init+0x210>)
 80037ea:	f7fe ff5d 	bl	80026a8 <assert_failed>

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685a      	ldr	r2, [r3, #4]
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037fc:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800380c:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6859      	ldr	r1, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003818:	3b01      	subs	r3, #1
 800381a:	035a      	lsls	r2, r3, #13
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	605a      	str	r2, [r3, #4]
 8003824:	e007      	b.n	8003836 <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003834:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003844:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	69db      	ldr	r3, [r3, #28]
 8003850:	3b01      	subs	r3, #1
 8003852:	051a      	lsls	r2, r3, #20
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	430a      	orrs	r2, r1
 800385a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800386a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	6899      	ldr	r1, [r3, #8]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003878:	025a      	lsls	r2, r3, #9
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	430a      	orrs	r2, r1
 8003880:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	689a      	ldr	r2, [r3, #8]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003890:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	6899      	ldr	r1, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	029a      	lsls	r2, r3, #10
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	609a      	str	r2, [r3, #8]
}
 80038a6:	bf00      	nop
 80038a8:	3710      	adds	r7, #16
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}
 80038ae:	bf00      	nop
 80038b0:	40012300 	.word	0x40012300
 80038b4:	0f000001 	.word	0x0f000001
 80038b8:	0800f884 	.word	0x0800f884

080038bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038bc:	b480      	push	{r7}
 80038be:	b085      	sub	sp, #20
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	f003 0307 	and.w	r3, r3, #7
 80038ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003900 <__NVIC_SetPriorityGrouping+0x44>)
 80038ce:	68db      	ldr	r3, [r3, #12]
 80038d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038d8:	4013      	ands	r3, r2
 80038da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038ee:	4a04      	ldr	r2, [pc, #16]	@ (8003900 <__NVIC_SetPriorityGrouping+0x44>)
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	60d3      	str	r3, [r2, #12]
}
 80038f4:	bf00      	nop
 80038f6:	3714      	adds	r7, #20
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000ed00 	.word	0xe000ed00

08003904 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003908:	4b04      	ldr	r3, [pc, #16]	@ (800391c <__NVIC_GetPriorityGrouping+0x18>)
 800390a:	68db      	ldr	r3, [r3, #12]
 800390c:	0a1b      	lsrs	r3, r3, #8
 800390e:	f003 0307 	and.w	r3, r3, #7
}
 8003912:	4618      	mov	r0, r3
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr
 800391c:	e000ed00 	.word	0xe000ed00

08003920 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	4603      	mov	r3, r0
 8003928:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800392a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800392e:	2b00      	cmp	r3, #0
 8003930:	db0b      	blt.n	800394a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003932:	79fb      	ldrb	r3, [r7, #7]
 8003934:	f003 021f 	and.w	r2, r3, #31
 8003938:	4907      	ldr	r1, [pc, #28]	@ (8003958 <__NVIC_EnableIRQ+0x38>)
 800393a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800393e:	095b      	lsrs	r3, r3, #5
 8003940:	2001      	movs	r0, #1
 8003942:	fa00 f202 	lsl.w	r2, r0, r2
 8003946:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800394a:	bf00      	nop
 800394c:	370c      	adds	r7, #12
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	e000e100 	.word	0xe000e100

0800395c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800395c:	b480      	push	{r7}
 800395e:	b083      	sub	sp, #12
 8003960:	af00      	add	r7, sp, #0
 8003962:	4603      	mov	r3, r0
 8003964:	6039      	str	r1, [r7, #0]
 8003966:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003968:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800396c:	2b00      	cmp	r3, #0
 800396e:	db0a      	blt.n	8003986 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	b2da      	uxtb	r2, r3
 8003974:	490c      	ldr	r1, [pc, #48]	@ (80039a8 <__NVIC_SetPriority+0x4c>)
 8003976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397a:	0112      	lsls	r2, r2, #4
 800397c:	b2d2      	uxtb	r2, r2
 800397e:	440b      	add	r3, r1
 8003980:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003984:	e00a      	b.n	800399c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	b2da      	uxtb	r2, r3
 800398a:	4908      	ldr	r1, [pc, #32]	@ (80039ac <__NVIC_SetPriority+0x50>)
 800398c:	79fb      	ldrb	r3, [r7, #7]
 800398e:	f003 030f 	and.w	r3, r3, #15
 8003992:	3b04      	subs	r3, #4
 8003994:	0112      	lsls	r2, r2, #4
 8003996:	b2d2      	uxtb	r2, r2
 8003998:	440b      	add	r3, r1
 800399a:	761a      	strb	r2, [r3, #24]
}
 800399c:	bf00      	nop
 800399e:	370c      	adds	r7, #12
 80039a0:	46bd      	mov	sp, r7
 80039a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a6:	4770      	bx	lr
 80039a8:	e000e100 	.word	0xe000e100
 80039ac:	e000ed00 	.word	0xe000ed00

080039b0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	@ 0x24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	60f8      	str	r0, [r7, #12]
 80039b8:	60b9      	str	r1, [r7, #8]
 80039ba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 0307 	and.w	r3, r3, #7
 80039c2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c4:	69fb      	ldr	r3, [r7, #28]
 80039c6:	f1c3 0307 	rsb	r3, r3, #7
 80039ca:	2b04      	cmp	r3, #4
 80039cc:	bf28      	it	cs
 80039ce:	2304      	movcs	r3, #4
 80039d0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	3304      	adds	r3, #4
 80039d6:	2b06      	cmp	r3, #6
 80039d8:	d902      	bls.n	80039e0 <NVIC_EncodePriority+0x30>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	3b03      	subs	r3, #3
 80039de:	e000      	b.n	80039e2 <NVIC_EncodePriority+0x32>
 80039e0:	2300      	movs	r3, #0
 80039e2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e4:	f04f 32ff 	mov.w	r2, #4294967295
 80039e8:	69bb      	ldr	r3, [r7, #24]
 80039ea:	fa02 f303 	lsl.w	r3, r2, r3
 80039ee:	43da      	mvns	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	401a      	ands	r2, r3
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f8:	f04f 31ff 	mov.w	r1, #4294967295
 80039fc:	697b      	ldr	r3, [r7, #20]
 80039fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003a02:	43d9      	mvns	r1, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a08:	4313      	orrs	r3, r2
         );
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3724      	adds	r7, #36	@ 0x24
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
	...

08003a18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b07      	cmp	r3, #7
 8003a24:	d00f      	beq.n	8003a46 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2b06      	cmp	r3, #6
 8003a2a:	d00c      	beq.n	8003a46 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2b05      	cmp	r3, #5
 8003a30:	d009      	beq.n	8003a46 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	2b04      	cmp	r3, #4
 8003a36:	d006      	beq.n	8003a46 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2b03      	cmp	r3, #3
 8003a3c:	d003      	beq.n	8003a46 <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a3e:	2190      	movs	r1, #144	@ 0x90
 8003a40:	4804      	ldr	r0, [pc, #16]	@ (8003a54 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003a42:	f7fe fe31 	bl	80026a8 <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a46:	6878      	ldr	r0, [r7, #4]
 8003a48:	f7ff ff38 	bl	80038bc <__NVIC_SetPriorityGrouping>
}
 8003a4c:	bf00      	nop
 8003a4e:	3708      	adds	r7, #8
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bd80      	pop	{r7, pc}
 8003a54:	0800f8bc 	.word	0x0800f8bc

08003a58 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b086      	sub	sp, #24
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	4603      	mov	r3, r0
 8003a60:	60b9      	str	r1, [r7, #8]
 8003a62:	607a      	str	r2, [r7, #4]
 8003a64:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a66:	2300      	movs	r3, #0
 8003a68:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2b0f      	cmp	r3, #15
 8003a6e:	d903      	bls.n	8003a78 <HAL_NVIC_SetPriority+0x20>
 8003a70:	21a8      	movs	r1, #168	@ 0xa8
 8003a72:	480e      	ldr	r0, [pc, #56]	@ (8003aac <HAL_NVIC_SetPriority+0x54>)
 8003a74:	f7fe fe18 	bl	80026a8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	2b0f      	cmp	r3, #15
 8003a7c:	d903      	bls.n	8003a86 <HAL_NVIC_SetPriority+0x2e>
 8003a7e:	21a9      	movs	r1, #169	@ 0xa9
 8003a80:	480a      	ldr	r0, [pc, #40]	@ (8003aac <HAL_NVIC_SetPriority+0x54>)
 8003a82:	f7fe fe11 	bl	80026a8 <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a86:	f7ff ff3d 	bl	8003904 <__NVIC_GetPriorityGrouping>
 8003a8a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	68b9      	ldr	r1, [r7, #8]
 8003a90:	6978      	ldr	r0, [r7, #20]
 8003a92:	f7ff ff8d 	bl	80039b0 <NVIC_EncodePriority>
 8003a96:	4602      	mov	r2, r0
 8003a98:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003a9c:	4611      	mov	r1, r2
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	f7ff ff5c 	bl	800395c <__NVIC_SetPriority>
}
 8003aa4:	bf00      	nop
 8003aa6:	3718      	adds	r7, #24
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}
 8003aac:	0800f8bc 	.word	0x0800f8bc

08003ab0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	da03      	bge.n	8003aca <HAL_NVIC_EnableIRQ+0x1a>
 8003ac2:	21bc      	movs	r1, #188	@ 0xbc
 8003ac4:	4805      	ldr	r0, [pc, #20]	@ (8003adc <HAL_NVIC_EnableIRQ+0x2c>)
 8003ac6:	f7fe fdef 	bl	80026a8 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ace:	4618      	mov	r0, r3
 8003ad0:	f7ff ff26 	bl	8003920 <__NVIC_EnableIRQ>
}
 8003ad4:	bf00      	nop
 8003ad6:	3708      	adds	r7, #8
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	0800f8bc 	.word	0x0800f8bc

08003ae0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b086      	sub	sp, #24
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003aec:	f7ff f904 	bl	8002cf8 <HAL_GetTick>
 8003af0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d101      	bne.n	8003afc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e203      	b.n	8003f04 <HAL_DMA_Init+0x424>
  }

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a8b      	ldr	r2, [pc, #556]	@ (8003d30 <HAL_DMA_Init+0x250>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d04e      	beq.n	8003ba4 <HAL_DMA_Init+0xc4>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a8a      	ldr	r2, [pc, #552]	@ (8003d34 <HAL_DMA_Init+0x254>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d049      	beq.n	8003ba4 <HAL_DMA_Init+0xc4>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a88      	ldr	r2, [pc, #544]	@ (8003d38 <HAL_DMA_Init+0x258>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d044      	beq.n	8003ba4 <HAL_DMA_Init+0xc4>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a87      	ldr	r2, [pc, #540]	@ (8003d3c <HAL_DMA_Init+0x25c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d03f      	beq.n	8003ba4 <HAL_DMA_Init+0xc4>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a85      	ldr	r2, [pc, #532]	@ (8003d40 <HAL_DMA_Init+0x260>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d03a      	beq.n	8003ba4 <HAL_DMA_Init+0xc4>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a84      	ldr	r2, [pc, #528]	@ (8003d44 <HAL_DMA_Init+0x264>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d035      	beq.n	8003ba4 <HAL_DMA_Init+0xc4>
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	4a82      	ldr	r2, [pc, #520]	@ (8003d48 <HAL_DMA_Init+0x268>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d030      	beq.n	8003ba4 <HAL_DMA_Init+0xc4>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4a81      	ldr	r2, [pc, #516]	@ (8003d4c <HAL_DMA_Init+0x26c>)
 8003b48:	4293      	cmp	r3, r2
 8003b4a:	d02b      	beq.n	8003ba4 <HAL_DMA_Init+0xc4>
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4a7f      	ldr	r2, [pc, #508]	@ (8003d50 <HAL_DMA_Init+0x270>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d026      	beq.n	8003ba4 <HAL_DMA_Init+0xc4>
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a7e      	ldr	r2, [pc, #504]	@ (8003d54 <HAL_DMA_Init+0x274>)
 8003b5c:	4293      	cmp	r3, r2
 8003b5e:	d021      	beq.n	8003ba4 <HAL_DMA_Init+0xc4>
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	4a7c      	ldr	r2, [pc, #496]	@ (8003d58 <HAL_DMA_Init+0x278>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d01c      	beq.n	8003ba4 <HAL_DMA_Init+0xc4>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a7b      	ldr	r2, [pc, #492]	@ (8003d5c <HAL_DMA_Init+0x27c>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d017      	beq.n	8003ba4 <HAL_DMA_Init+0xc4>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a79      	ldr	r2, [pc, #484]	@ (8003d60 <HAL_DMA_Init+0x280>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d012      	beq.n	8003ba4 <HAL_DMA_Init+0xc4>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	4a78      	ldr	r2, [pc, #480]	@ (8003d64 <HAL_DMA_Init+0x284>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d00d      	beq.n	8003ba4 <HAL_DMA_Init+0xc4>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	4a76      	ldr	r2, [pc, #472]	@ (8003d68 <HAL_DMA_Init+0x288>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d008      	beq.n	8003ba4 <HAL_DMA_Init+0xc4>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a75      	ldr	r2, [pc, #468]	@ (8003d6c <HAL_DMA_Init+0x28c>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d003      	beq.n	8003ba4 <HAL_DMA_Init+0xc4>
 8003b9c:	21b7      	movs	r1, #183	@ 0xb7
 8003b9e:	4874      	ldr	r0, [pc, #464]	@ (8003d70 <HAL_DMA_Init+0x290>)
 8003ba0:	f7fe fd82 	bl	80026a8 <assert_failed>
  assert_param(IS_DMA_CHANNEL(hdma->Init.Channel));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d026      	beq.n	8003bfa <HAL_DMA_Init+0x11a>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8003bb4:	d021      	beq.n	8003bfa <HAL_DMA_Init+0x11a>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8003bbe:	d01c      	beq.n	8003bfa <HAL_DMA_Init+0x11a>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8003bc8:	d017      	beq.n	8003bfa <HAL_DMA_Init+0x11a>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003bd2:	d012      	beq.n	8003bfa <HAL_DMA_Init+0x11a>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 8003bdc:	d00d      	beq.n	8003bfa <HAL_DMA_Init+0x11a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8003be6:	d008      	beq.n	8003bfa <HAL_DMA_Init+0x11a>
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 8003bf0:	d003      	beq.n	8003bfa <HAL_DMA_Init+0x11a>
 8003bf2:	21b8      	movs	r1, #184	@ 0xb8
 8003bf4:	485e      	ldr	r0, [pc, #376]	@ (8003d70 <HAL_DMA_Init+0x290>)
 8003bf6:	f7fe fd57 	bl	80026a8 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	689b      	ldr	r3, [r3, #8]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d00b      	beq.n	8003c1a <HAL_DMA_Init+0x13a>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	2b40      	cmp	r3, #64	@ 0x40
 8003c08:	d007      	beq.n	8003c1a <HAL_DMA_Init+0x13a>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	689b      	ldr	r3, [r3, #8]
 8003c0e:	2b80      	cmp	r3, #128	@ 0x80
 8003c10:	d003      	beq.n	8003c1a <HAL_DMA_Init+0x13a>
 8003c12:	21b9      	movs	r1, #185	@ 0xb9
 8003c14:	4856      	ldr	r0, [pc, #344]	@ (8003d70 <HAL_DMA_Init+0x290>)
 8003c16:	f7fe fd47 	bl	80026a8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	68db      	ldr	r3, [r3, #12]
 8003c1e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c22:	d007      	beq.n	8003c34 <HAL_DMA_Init+0x154>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_DMA_Init+0x154>
 8003c2c:	21ba      	movs	r1, #186	@ 0xba
 8003c2e:	4850      	ldr	r0, [pc, #320]	@ (8003d70 <HAL_DMA_Init+0x290>)
 8003c30:	f7fe fd3a 	bl	80026a8 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	691b      	ldr	r3, [r3, #16]
 8003c38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c3c:	d007      	beq.n	8003c4e <HAL_DMA_Init+0x16e>
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	691b      	ldr	r3, [r3, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d003      	beq.n	8003c4e <HAL_DMA_Init+0x16e>
 8003c46:	21bb      	movs	r1, #187	@ 0xbb
 8003c48:	4849      	ldr	r0, [pc, #292]	@ (8003d70 <HAL_DMA_Init+0x290>)
 8003c4a:	f7fe fd2d 	bl	80026a8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00d      	beq.n	8003c72 <HAL_DMA_Init+0x192>
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	695b      	ldr	r3, [r3, #20]
 8003c5a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c5e:	d008      	beq.n	8003c72 <HAL_DMA_Init+0x192>
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	695b      	ldr	r3, [r3, #20]
 8003c64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003c68:	d003      	beq.n	8003c72 <HAL_DMA_Init+0x192>
 8003c6a:	21bc      	movs	r1, #188	@ 0xbc
 8003c6c:	4840      	ldr	r0, [pc, #256]	@ (8003d70 <HAL_DMA_Init+0x290>)
 8003c6e:	f7fe fd1b 	bl	80026a8 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d00d      	beq.n	8003c96 <HAL_DMA_Init+0x1b6>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	699b      	ldr	r3, [r3, #24]
 8003c7e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c82:	d008      	beq.n	8003c96 <HAL_DMA_Init+0x1b6>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	699b      	ldr	r3, [r3, #24]
 8003c88:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003c8c:	d003      	beq.n	8003c96 <HAL_DMA_Init+0x1b6>
 8003c8e:	21bd      	movs	r1, #189	@ 0xbd
 8003c90:	4837      	ldr	r0, [pc, #220]	@ (8003d70 <HAL_DMA_Init+0x290>)
 8003c92:	f7fe fd09 	bl	80026a8 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	69db      	ldr	r3, [r3, #28]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d00c      	beq.n	8003cb8 <HAL_DMA_Init+0x1d8>
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	69db      	ldr	r3, [r3, #28]
 8003ca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ca6:	d007      	beq.n	8003cb8 <HAL_DMA_Init+0x1d8>
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	69db      	ldr	r3, [r3, #28]
 8003cac:	2b20      	cmp	r3, #32
 8003cae:	d003      	beq.n	8003cb8 <HAL_DMA_Init+0x1d8>
 8003cb0:	21be      	movs	r1, #190	@ 0xbe
 8003cb2:	482f      	ldr	r0, [pc, #188]	@ (8003d70 <HAL_DMA_Init+0x290>)
 8003cb4:	f7fe fcf8 	bl	80026a8 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a1b      	ldr	r3, [r3, #32]
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d012      	beq.n	8003ce6 <HAL_DMA_Init+0x206>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6a1b      	ldr	r3, [r3, #32]
 8003cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003cc8:	d00d      	beq.n	8003ce6 <HAL_DMA_Init+0x206>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6a1b      	ldr	r3, [r3, #32]
 8003cce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003cd2:	d008      	beq.n	8003ce6 <HAL_DMA_Init+0x206>
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8003cdc:	d003      	beq.n	8003ce6 <HAL_DMA_Init+0x206>
 8003cde:	21bf      	movs	r1, #191	@ 0xbf
 8003ce0:	4823      	ldr	r0, [pc, #140]	@ (8003d70 <HAL_DMA_Init+0x290>)
 8003ce2:	f7fe fce1 	bl	80026a8 <assert_failed>
  assert_param(IS_DMA_FIFO_MODE_STATE(hdma->Init.FIFOMode));
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d007      	beq.n	8003cfe <HAL_DMA_Init+0x21e>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cf2:	2b04      	cmp	r3, #4
 8003cf4:	d003      	beq.n	8003cfe <HAL_DMA_Init+0x21e>
 8003cf6:	21c0      	movs	r1, #192	@ 0xc0
 8003cf8:	481d      	ldr	r0, [pc, #116]	@ (8003d70 <HAL_DMA_Init+0x290>)
 8003cfa:	f7fe fcd5 	bl	80026a8 <assert_failed>
  /* Check the memory burst, peripheral burst and FIFO threshold parameters only
     when FIFO mode is enabled */
  if(hdma->Init.FIFOMode != DMA_FIFOMODE_DISABLE)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d064      	beq.n	8003dd0 <HAL_DMA_Init+0x2f0>
  {
    assert_param(IS_DMA_FIFO_THRESHOLD(hdma->Init.FIFOThreshold));
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d032      	beq.n	8003d74 <HAL_DMA_Init+0x294>
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d02e      	beq.n	8003d74 <HAL_DMA_Init+0x294>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d1a:	2b02      	cmp	r3, #2
 8003d1c:	d02a      	beq.n	8003d74 <HAL_DMA_Init+0x294>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d22:	2b03      	cmp	r3, #3
 8003d24:	d026      	beq.n	8003d74 <HAL_DMA_Init+0x294>
 8003d26:	21c5      	movs	r1, #197	@ 0xc5
 8003d28:	4811      	ldr	r0, [pc, #68]	@ (8003d70 <HAL_DMA_Init+0x290>)
 8003d2a:	f7fe fcbd 	bl	80026a8 <assert_failed>
 8003d2e:	e021      	b.n	8003d74 <HAL_DMA_Init+0x294>
 8003d30:	40026010 	.word	0x40026010
 8003d34:	40026028 	.word	0x40026028
 8003d38:	40026040 	.word	0x40026040
 8003d3c:	40026058 	.word	0x40026058
 8003d40:	40026070 	.word	0x40026070
 8003d44:	40026088 	.word	0x40026088
 8003d48:	400260a0 	.word	0x400260a0
 8003d4c:	400260b8 	.word	0x400260b8
 8003d50:	40026410 	.word	0x40026410
 8003d54:	40026428 	.word	0x40026428
 8003d58:	40026440 	.word	0x40026440
 8003d5c:	40026458 	.word	0x40026458
 8003d60:	40026470 	.word	0x40026470
 8003d64:	40026488 	.word	0x40026488
 8003d68:	400264a0 	.word	0x400264a0
 8003d6c:	400264b8 	.word	0x400264b8
 8003d70:	0800f8f8 	.word	0x0800f8f8
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d012      	beq.n	8003da2 <HAL_DMA_Init+0x2c2>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d80:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003d84:	d00d      	beq.n	8003da2 <HAL_DMA_Init+0x2c2>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003d8e:	d008      	beq.n	8003da2 <HAL_DMA_Init+0x2c2>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d94:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8003d98:	d003      	beq.n	8003da2 <HAL_DMA_Init+0x2c2>
 8003d9a:	21c6      	movs	r1, #198	@ 0xc6
 8003d9c:	485b      	ldr	r0, [pc, #364]	@ (8003f0c <HAL_DMA_Init+0x42c>)
 8003d9e:	f7fe fc83 	bl	80026a8 <assert_failed>
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d012      	beq.n	8003dd0 <HAL_DMA_Init+0x2f0>
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dae:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003db2:	d00d      	beq.n	8003dd0 <HAL_DMA_Init+0x2f0>
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003dbc:	d008      	beq.n	8003dd0 <HAL_DMA_Init+0x2f0>
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc2:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8003dc6:	d003      	beq.n	8003dd0 <HAL_DMA_Init+0x2f0>
 8003dc8:	21c7      	movs	r1, #199	@ 0xc7
 8003dca:	4850      	ldr	r0, [pc, #320]	@ (8003f0c <HAL_DMA_Init+0x42c>)
 8003dcc:	f7fe fc6c 	bl	80026a8 <assert_failed>
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f022 0201 	bic.w	r2, r2, #1
 8003dee:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003df0:	e00f      	b.n	8003e12 <HAL_DMA_Init+0x332>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003df2:	f7fe ff81 	bl	8002cf8 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b05      	cmp	r3, #5
 8003dfe:	d908      	bls.n	8003e12 <HAL_DMA_Init+0x332>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2220      	movs	r2, #32
 8003e04:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2203      	movs	r2, #3
 8003e0a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e078      	b.n	8003f04 <HAL_DMA_Init+0x424>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0301 	and.w	r3, r3, #1
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1e8      	bne.n	8003df2 <HAL_DMA_Init+0x312>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	4b39      	ldr	r3, [pc, #228]	@ (8003f10 <HAL_DMA_Init+0x430>)
 8003e2c:	4013      	ands	r3, r2
 8003e2e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685a      	ldr	r2, [r3, #4]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	689b      	ldr	r3, [r3, #8]
 8003e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	691b      	ldr	r3, [r3, #16]
 8003e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	699b      	ldr	r3, [r3, #24]
 8003e50:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e56:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6a1b      	ldr	r3, [r3, #32]
 8003e5c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e5e:	697a      	ldr	r2, [r7, #20]
 8003e60:	4313      	orrs	r3, r2
 8003e62:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e68:	2b04      	cmp	r3, #4
 8003e6a:	d107      	bne.n	8003e7c <HAL_DMA_Init+0x39c>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e74:	4313      	orrs	r3, r2
 8003e76:	697a      	ldr	r2, [r7, #20]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	697a      	ldr	r2, [r7, #20]
 8003e82:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f023 0307 	bic.w	r3, r3, #7
 8003e92:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea2:	2b04      	cmp	r3, #4
 8003ea4:	d117      	bne.n	8003ed6 <HAL_DMA_Init+0x3f6>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	4313      	orrs	r3, r2
 8003eae:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d00e      	beq.n	8003ed6 <HAL_DMA_Init+0x3f6>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fa7f 	bl	80043bc <DMA_CheckFifoParam>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d008      	beq.n	8003ed6 <HAL_DMA_Init+0x3f6>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2240      	movs	r2, #64	@ 0x40
 8003ec8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2201      	movs	r2, #1
 8003ece:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003ed2:	2301      	movs	r3, #1
 8003ed4:	e016      	b.n	8003f04 <HAL_DMA_Init+0x424>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003ede:	6878      	ldr	r0, [r7, #4]
 8003ee0:	f000 fa36 	bl	8004350 <DMA_CalcBaseAndBitshift>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003eec:	223f      	movs	r2, #63	@ 0x3f
 8003eee:	409a      	lsls	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003f02:	2300      	movs	r3, #0
}
 8003f04:	4618      	mov	r0, r3
 8003f06:	3718      	adds	r7, #24
 8003f08:	46bd      	mov	sp, r7
 8003f0a:	bd80      	pop	{r7, pc}
 8003f0c:	0800f8f8 	.word	0x0800f8f8
 8003f10:	f010803f 	.word	0xf010803f

08003f14 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b086      	sub	sp, #24
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f22:	2300      	movs	r3, #0
 8003f24:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f2a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d003      	beq.n	8003f3a <HAL_DMA_Start_IT+0x26>
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f38:	d304      	bcc.n	8003f44 <HAL_DMA_Start_IT+0x30>
 8003f3a:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8003f3e:	4827      	ldr	r0, [pc, #156]	@ (8003fdc <HAL_DMA_Start_IT+0xc8>)
 8003f40:	f7fe fbb2 	bl	80026a8 <assert_failed>
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003f4a:	2b01      	cmp	r3, #1
 8003f4c:	d101      	bne.n	8003f52 <HAL_DMA_Start_IT+0x3e>
 8003f4e:	2302      	movs	r3, #2
 8003f50:	e040      	b.n	8003fd4 <HAL_DMA_Start_IT+0xc0>
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	2201      	movs	r2, #1
 8003f56:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d12f      	bne.n	8003fc6 <HAL_DMA_Start_IT+0xb2>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2202      	movs	r2, #2
 8003f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	68b9      	ldr	r1, [r7, #8]
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 f9ba 	bl	80042f4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f84:	223f      	movs	r2, #63	@ 0x3f
 8003f86:	409a      	lsls	r2, r3
 8003f88:	693b      	ldr	r3, [r7, #16]
 8003f8a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f042 0216 	orr.w	r2, r2, #22
 8003f9a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d007      	beq.n	8003fb4 <HAL_DMA_Start_IT+0xa0>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f042 0208 	orr.w	r2, r2, #8
 8003fb2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f042 0201 	orr.w	r2, r2, #1
 8003fc2:	601a      	str	r2, [r3, #0]
 8003fc4:	e005      	b.n	8003fd2 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	2200      	movs	r2, #0
 8003fca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003fce:	2302      	movs	r3, #2
 8003fd0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3718      	adds	r7, #24
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}
 8003fdc:	0800f8f8 	.word	0x0800f8f8

08003fe0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003fe8:	2300      	movs	r3, #0
 8003fea:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003fec:	4b8e      	ldr	r3, [pc, #568]	@ (8004228 <HAL_DMA_IRQHandler+0x248>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a8e      	ldr	r2, [pc, #568]	@ (800422c <HAL_DMA_IRQHandler+0x24c>)
 8003ff2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ff6:	0a9b      	lsrs	r3, r3, #10
 8003ff8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003ffe:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004000:	693b      	ldr	r3, [r7, #16]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800400a:	2208      	movs	r2, #8
 800400c:	409a      	lsls	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4013      	ands	r3, r2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d01a      	beq.n	800404c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	d013      	beq.n	800404c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0204 	bic.w	r2, r2, #4
 8004032:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004038:	2208      	movs	r2, #8
 800403a:	409a      	lsls	r2, r3
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004044:	f043 0201 	orr.w	r2, r3, #1
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004050:	2201      	movs	r2, #1
 8004052:	409a      	lsls	r2, r3
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	4013      	ands	r3, r2
 8004058:	2b00      	cmp	r3, #0
 800405a:	d012      	beq.n	8004082 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	695b      	ldr	r3, [r3, #20]
 8004062:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00b      	beq.n	8004082 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800406e:	2201      	movs	r2, #1
 8004070:	409a      	lsls	r2, r3
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407a:	f043 0202 	orr.w	r2, r3, #2
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004086:	2204      	movs	r2, #4
 8004088:	409a      	lsls	r2, r3
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	4013      	ands	r3, r2
 800408e:	2b00      	cmp	r3, #0
 8004090:	d012      	beq.n	80040b8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f003 0302 	and.w	r3, r3, #2
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00b      	beq.n	80040b8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040a4:	2204      	movs	r2, #4
 80040a6:	409a      	lsls	r2, r3
 80040a8:	693b      	ldr	r3, [r7, #16]
 80040aa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b0:	f043 0204 	orr.w	r2, r3, #4
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040bc:	2210      	movs	r2, #16
 80040be:	409a      	lsls	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	4013      	ands	r3, r2
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d043      	beq.n	8004150 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0308 	and.w	r3, r3, #8
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d03c      	beq.n	8004150 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040da:	2210      	movs	r2, #16
 80040dc:	409a      	lsls	r2, r3
 80040de:	693b      	ldr	r3, [r7, #16]
 80040e0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d018      	beq.n	8004122 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d108      	bne.n	8004110 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004102:	2b00      	cmp	r3, #0
 8004104:	d024      	beq.n	8004150 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800410a:	6878      	ldr	r0, [r7, #4]
 800410c:	4798      	blx	r3
 800410e:	e01f      	b.n	8004150 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004114:	2b00      	cmp	r3, #0
 8004116:	d01b      	beq.n	8004150 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	4798      	blx	r3
 8004120:	e016      	b.n	8004150 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800412c:	2b00      	cmp	r3, #0
 800412e:	d107      	bne.n	8004140 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	681a      	ldr	r2, [r3, #0]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0208 	bic.w	r2, r2, #8
 800413e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004144:	2b00      	cmp	r3, #0
 8004146:	d003      	beq.n	8004150 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800414c:	6878      	ldr	r0, [r7, #4]
 800414e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004154:	2220      	movs	r2, #32
 8004156:	409a      	lsls	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	4013      	ands	r3, r2
 800415c:	2b00      	cmp	r3, #0
 800415e:	f000 808f 	beq.w	8004280 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 0310 	and.w	r3, r3, #16
 800416c:	2b00      	cmp	r3, #0
 800416e:	f000 8087 	beq.w	8004280 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004176:	2220      	movs	r2, #32
 8004178:	409a      	lsls	r2, r3
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b05      	cmp	r3, #5
 8004188:	d136      	bne.n	80041f8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0216 	bic.w	r2, r2, #22
 8004198:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	695a      	ldr	r2, [r3, #20]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80041a8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d103      	bne.n	80041ba <HAL_DMA_IRQHandler+0x1da>
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d007      	beq.n	80041ca <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0208 	bic.w	r2, r2, #8
 80041c8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80041ce:	223f      	movs	r2, #63	@ 0x3f
 80041d0:	409a      	lsls	r2, r3
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2201      	movs	r2, #1
 80041da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d07e      	beq.n	80042ec <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80041f2:	6878      	ldr	r0, [r7, #4]
 80041f4:	4798      	blx	r3
        }
        return;
 80041f6:	e079      	b.n	80042ec <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004202:	2b00      	cmp	r3, #0
 8004204:	d01d      	beq.n	8004242 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10d      	bne.n	8004230 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004218:	2b00      	cmp	r3, #0
 800421a:	d031      	beq.n	8004280 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004220:	6878      	ldr	r0, [r7, #4]
 8004222:	4798      	blx	r3
 8004224:	e02c      	b.n	8004280 <HAL_DMA_IRQHandler+0x2a0>
 8004226:	bf00      	nop
 8004228:	20000000 	.word	0x20000000
 800422c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004234:	2b00      	cmp	r3, #0
 8004236:	d023      	beq.n	8004280 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800423c:	6878      	ldr	r0, [r7, #4]
 800423e:	4798      	blx	r3
 8004240:	e01e      	b.n	8004280 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800424c:	2b00      	cmp	r3, #0
 800424e:	d10f      	bne.n	8004270 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f022 0210 	bic.w	r2, r2, #16
 800425e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2200      	movs	r2, #0
 800426c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004274:	2b00      	cmp	r3, #0
 8004276:	d003      	beq.n	8004280 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800427c:	6878      	ldr	r0, [r7, #4]
 800427e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004284:	2b00      	cmp	r3, #0
 8004286:	d032      	beq.n	80042ee <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800428c:	f003 0301 	and.w	r3, r3, #1
 8004290:	2b00      	cmp	r3, #0
 8004292:	d022      	beq.n	80042da <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2205      	movs	r2, #5
 8004298:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	681a      	ldr	r2, [r3, #0]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f022 0201 	bic.w	r2, r2, #1
 80042aa:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	3301      	adds	r3, #1
 80042b0:	60bb      	str	r3, [r7, #8]
 80042b2:	697a      	ldr	r2, [r7, #20]
 80042b4:	429a      	cmp	r2, r3
 80042b6:	d307      	bcc.n	80042c8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0301 	and.w	r3, r3, #1
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d1f2      	bne.n	80042ac <HAL_DMA_IRQHandler+0x2cc>
 80042c6:	e000      	b.n	80042ca <HAL_DMA_IRQHandler+0x2ea>
          break;
 80042c8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d005      	beq.n	80042ee <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	4798      	blx	r3
 80042ea:	e000      	b.n	80042ee <HAL_DMA_IRQHandler+0x30e>
        return;
 80042ec:	bf00      	nop
    }
  }
}
 80042ee:	3718      	adds	r7, #24
 80042f0:	46bd      	mov	sp, r7
 80042f2:	bd80      	pop	{r7, pc}

080042f4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042f4:	b480      	push	{r7}
 80042f6:	b085      	sub	sp, #20
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004310:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	2b40      	cmp	r3, #64	@ 0x40
 8004320:	d108      	bne.n	8004334 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004332:	e007      	b.n	8004344 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	68ba      	ldr	r2, [r7, #8]
 800433a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	60da      	str	r2, [r3, #12]
}
 8004344:	bf00      	nop
 8004346:	3714      	adds	r7, #20
 8004348:	46bd      	mov	sp, r7
 800434a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434e:	4770      	bx	lr

08004350 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004350:	b480      	push	{r7}
 8004352:	b085      	sub	sp, #20
 8004354:	af00      	add	r7, sp, #0
 8004356:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	b2db      	uxtb	r3, r3
 800435e:	3b10      	subs	r3, #16
 8004360:	4a14      	ldr	r2, [pc, #80]	@ (80043b4 <DMA_CalcBaseAndBitshift+0x64>)
 8004362:	fba2 2303 	umull	r2, r3, r2, r3
 8004366:	091b      	lsrs	r3, r3, #4
 8004368:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800436a:	4a13      	ldr	r2, [pc, #76]	@ (80043b8 <DMA_CalcBaseAndBitshift+0x68>)
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	4413      	add	r3, r2
 8004370:	781b      	ldrb	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	2b03      	cmp	r3, #3
 800437c:	d909      	bls.n	8004392 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004386:	f023 0303 	bic.w	r3, r3, #3
 800438a:	1d1a      	adds	r2, r3, #4
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004390:	e007      	b.n	80043a2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800439a:	f023 0303 	bic.w	r3, r3, #3
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80043a6:	4618      	mov	r0, r3
 80043a8:	3714      	adds	r7, #20
 80043aa:	46bd      	mov	sp, r7
 80043ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b0:	4770      	bx	lr
 80043b2:	bf00      	nop
 80043b4:	aaaaaaab 	.word	0xaaaaaaab
 80043b8:	0800fb28 	.word	0x0800fb28

080043bc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80043bc:	b480      	push	{r7}
 80043be:	b085      	sub	sp, #20
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043c4:	2300      	movs	r3, #0
 80043c6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043cc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d11f      	bne.n	8004416 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	2b03      	cmp	r3, #3
 80043da:	d856      	bhi.n	800448a <DMA_CheckFifoParam+0xce>
 80043dc:	a201      	add	r2, pc, #4	@ (adr r2, 80043e4 <DMA_CheckFifoParam+0x28>)
 80043de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043e2:	bf00      	nop
 80043e4:	080043f5 	.word	0x080043f5
 80043e8:	08004407 	.word	0x08004407
 80043ec:	080043f5 	.word	0x080043f5
 80043f0:	0800448b 	.word	0x0800448b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d046      	beq.n	800448e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004404:	e043      	b.n	800448e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800440e:	d140      	bne.n	8004492 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004414:	e03d      	b.n	8004492 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800441e:	d121      	bne.n	8004464 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004420:	68bb      	ldr	r3, [r7, #8]
 8004422:	2b03      	cmp	r3, #3
 8004424:	d837      	bhi.n	8004496 <DMA_CheckFifoParam+0xda>
 8004426:	a201      	add	r2, pc, #4	@ (adr r2, 800442c <DMA_CheckFifoParam+0x70>)
 8004428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442c:	0800443d 	.word	0x0800443d
 8004430:	08004443 	.word	0x08004443
 8004434:	0800443d 	.word	0x0800443d
 8004438:	08004455 	.word	0x08004455
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
      break;
 8004440:	e030      	b.n	80044a4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004446:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800444a:	2b00      	cmp	r3, #0
 800444c:	d025      	beq.n	800449a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800444e:	2301      	movs	r3, #1
 8004450:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004452:	e022      	b.n	800449a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004458:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800445c:	d11f      	bne.n	800449e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004462:	e01c      	b.n	800449e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	2b02      	cmp	r3, #2
 8004468:	d903      	bls.n	8004472 <DMA_CheckFifoParam+0xb6>
 800446a:	68bb      	ldr	r3, [r7, #8]
 800446c:	2b03      	cmp	r3, #3
 800446e:	d003      	beq.n	8004478 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004470:	e018      	b.n	80044a4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	73fb      	strb	r3, [r7, #15]
      break;
 8004476:	e015      	b.n	80044a4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800447c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004480:	2b00      	cmp	r3, #0
 8004482:	d00e      	beq.n	80044a2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004484:	2301      	movs	r3, #1
 8004486:	73fb      	strb	r3, [r7, #15]
      break;
 8004488:	e00b      	b.n	80044a2 <DMA_CheckFifoParam+0xe6>
      break;
 800448a:	bf00      	nop
 800448c:	e00a      	b.n	80044a4 <DMA_CheckFifoParam+0xe8>
      break;
 800448e:	bf00      	nop
 8004490:	e008      	b.n	80044a4 <DMA_CheckFifoParam+0xe8>
      break;
 8004492:	bf00      	nop
 8004494:	e006      	b.n	80044a4 <DMA_CheckFifoParam+0xe8>
      break;
 8004496:	bf00      	nop
 8004498:	e004      	b.n	80044a4 <DMA_CheckFifoParam+0xe8>
      break;
 800449a:	bf00      	nop
 800449c:	e002      	b.n	80044a4 <DMA_CheckFifoParam+0xe8>
      break;   
 800449e:	bf00      	nop
 80044a0:	e000      	b.n	80044a4 <DMA_CheckFifoParam+0xe8>
      break;
 80044a2:	bf00      	nop
    }
  } 
  
  return status; 
 80044a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a6:	4618      	mov	r0, r3
 80044a8:	3714      	adds	r7, #20
 80044aa:	46bd      	mov	sp, r7
 80044ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b0:	4770      	bx	lr
 80044b2:	bf00      	nop

080044b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044b4:	b580      	push	{r7, lr}
 80044b6:	b088      	sub	sp, #32
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	6078      	str	r0, [r7, #4]
 80044bc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80044be:	2300      	movs	r3, #0
 80044c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80044c2:	2300      	movs	r3, #0
 80044c4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80044c6:	2300      	movs	r3, #0
 80044c8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a38      	ldr	r2, [pc, #224]	@ (80045b0 <HAL_GPIO_Init+0xfc>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d023      	beq.n	800451a <HAL_GPIO_Init+0x66>
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a37      	ldr	r2, [pc, #220]	@ (80045b4 <HAL_GPIO_Init+0x100>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d01f      	beq.n	800451a <HAL_GPIO_Init+0x66>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a36      	ldr	r2, [pc, #216]	@ (80045b8 <HAL_GPIO_Init+0x104>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d01b      	beq.n	800451a <HAL_GPIO_Init+0x66>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a35      	ldr	r2, [pc, #212]	@ (80045bc <HAL_GPIO_Init+0x108>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d017      	beq.n	800451a <HAL_GPIO_Init+0x66>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a34      	ldr	r2, [pc, #208]	@ (80045c0 <HAL_GPIO_Init+0x10c>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d013      	beq.n	800451a <HAL_GPIO_Init+0x66>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a33      	ldr	r2, [pc, #204]	@ (80045c4 <HAL_GPIO_Init+0x110>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d00f      	beq.n	800451a <HAL_GPIO_Init+0x66>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a32      	ldr	r2, [pc, #200]	@ (80045c8 <HAL_GPIO_Init+0x114>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d00b      	beq.n	800451a <HAL_GPIO_Init+0x66>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a31      	ldr	r2, [pc, #196]	@ (80045cc <HAL_GPIO_Init+0x118>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d007      	beq.n	800451a <HAL_GPIO_Init+0x66>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a30      	ldr	r2, [pc, #192]	@ (80045d0 <HAL_GPIO_Init+0x11c>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d003      	beq.n	800451a <HAL_GPIO_Init+0x66>
 8004512:	21ac      	movs	r1, #172	@ 0xac
 8004514:	482f      	ldr	r0, [pc, #188]	@ (80045d4 <HAL_GPIO_Init+0x120>)
 8004516:	f7fe f8c7 	bl	80026a8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	b29b      	uxth	r3, r3
 8004520:	2b00      	cmp	r3, #0
 8004522:	d004      	beq.n	800452e <HAL_GPIO_Init+0x7a>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800452c:	d303      	bcc.n	8004536 <HAL_GPIO_Init+0x82>
 800452e:	21ad      	movs	r1, #173	@ 0xad
 8004530:	4828      	ldr	r0, [pc, #160]	@ (80045d4 <HAL_GPIO_Init+0x120>)
 8004532:	f7fe f8b9 	bl	80026a8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d035      	beq.n	80045aa <HAL_GPIO_Init+0xf6>
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	685b      	ldr	r3, [r3, #4]
 8004542:	2b01      	cmp	r3, #1
 8004544:	d031      	beq.n	80045aa <HAL_GPIO_Init+0xf6>
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	2b11      	cmp	r3, #17
 800454c:	d02d      	beq.n	80045aa <HAL_GPIO_Init+0xf6>
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	2b02      	cmp	r3, #2
 8004554:	d029      	beq.n	80045aa <HAL_GPIO_Init+0xf6>
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	2b12      	cmp	r3, #18
 800455c:	d025      	beq.n	80045aa <HAL_GPIO_Init+0xf6>
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8004566:	d020      	beq.n	80045aa <HAL_GPIO_Init+0xf6>
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8004570:	d01b      	beq.n	80045aa <HAL_GPIO_Init+0xf6>
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	685b      	ldr	r3, [r3, #4]
 8004576:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 800457a:	d016      	beq.n	80045aa <HAL_GPIO_Init+0xf6>
 800457c:	683b      	ldr	r3, [r7, #0]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8004584:	d011      	beq.n	80045aa <HAL_GPIO_Init+0xf6>
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 800458e:	d00c      	beq.n	80045aa <HAL_GPIO_Init+0xf6>
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8004598:	d007      	beq.n	80045aa <HAL_GPIO_Init+0xf6>
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d003      	beq.n	80045aa <HAL_GPIO_Init+0xf6>
 80045a2:	21ae      	movs	r1, #174	@ 0xae
 80045a4:	480b      	ldr	r0, [pc, #44]	@ (80045d4 <HAL_GPIO_Init+0x120>)
 80045a6:	f7fe f87f 	bl	80026a8 <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045aa:	2300      	movs	r3, #0
 80045ac:	61fb      	str	r3, [r7, #28]
 80045ae:	e241      	b.n	8004a34 <HAL_GPIO_Init+0x580>
 80045b0:	40020000 	.word	0x40020000
 80045b4:	40020400 	.word	0x40020400
 80045b8:	40020800 	.word	0x40020800
 80045bc:	40020c00 	.word	0x40020c00
 80045c0:	40021000 	.word	0x40021000
 80045c4:	40021400 	.word	0x40021400
 80045c8:	40021800 	.word	0x40021800
 80045cc:	40021c00 	.word	0x40021c00
 80045d0:	40022000 	.word	0x40022000
 80045d4:	0800f930 	.word	0x0800f930
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045d8:	2201      	movs	r2, #1
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	fa02 f303 	lsl.w	r3, r2, r3
 80045e0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4013      	ands	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	697b      	ldr	r3, [r7, #20]
 80045f0:	429a      	cmp	r2, r3
 80045f2:	f040 821c 	bne.w	8004a2e <HAL_GPIO_Init+0x57a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	f003 0303 	and.w	r3, r3, #3
 80045fe:	2b01      	cmp	r3, #1
 8004600:	d005      	beq.n	800460e <HAL_GPIO_Init+0x15a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685b      	ldr	r3, [r3, #4]
 8004606:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800460a:	2b02      	cmp	r3, #2
 800460c:	d144      	bne.n	8004698 <HAL_GPIO_Init+0x1e4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	68db      	ldr	r3, [r3, #12]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00f      	beq.n	8004636 <HAL_GPIO_Init+0x182>
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	68db      	ldr	r3, [r3, #12]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d00b      	beq.n	8004636 <HAL_GPIO_Init+0x182>
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	68db      	ldr	r3, [r3, #12]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d007      	beq.n	8004636 <HAL_GPIO_Init+0x182>
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	68db      	ldr	r3, [r3, #12]
 800462a:	2b03      	cmp	r3, #3
 800462c:	d003      	beq.n	8004636 <HAL_GPIO_Init+0x182>
 800462e:	21c0      	movs	r1, #192	@ 0xc0
 8004630:	4881      	ldr	r0, [pc, #516]	@ (8004838 <HAL_GPIO_Init+0x384>)
 8004632:	f7fe f839 	bl	80026a8 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800463c:	69fb      	ldr	r3, [r7, #28]
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	2203      	movs	r2, #3
 8004642:	fa02 f303 	lsl.w	r3, r2, r3
 8004646:	43db      	mvns	r3, r3
 8004648:	69ba      	ldr	r2, [r7, #24]
 800464a:	4013      	ands	r3, r2
 800464c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	68da      	ldr	r2, [r3, #12]
 8004652:	69fb      	ldr	r3, [r7, #28]
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	69ba      	ldr	r2, [r7, #24]
 800465c:	4313      	orrs	r3, r2
 800465e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800466c:	2201      	movs	r2, #1
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	fa02 f303 	lsl.w	r3, r2, r3
 8004674:	43db      	mvns	r3, r3
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	4013      	ands	r3, r2
 800467a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	091b      	lsrs	r3, r3, #4
 8004682:	f003 0201 	and.w	r2, r3, #1
 8004686:	69fb      	ldr	r3, [r7, #28]
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	4313      	orrs	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	2b03      	cmp	r3, #3
 80046a2:	d027      	beq.n	80046f4 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d00b      	beq.n	80046c4 <HAL_GPIO_Init+0x210>
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	2b01      	cmp	r3, #1
 80046b2:	d007      	beq.n	80046c4 <HAL_GPIO_Init+0x210>
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	689b      	ldr	r3, [r3, #8]
 80046b8:	2b02      	cmp	r3, #2
 80046ba:	d003      	beq.n	80046c4 <HAL_GPIO_Init+0x210>
 80046bc:	21d1      	movs	r1, #209	@ 0xd1
 80046be:	485e      	ldr	r0, [pc, #376]	@ (8004838 <HAL_GPIO_Init+0x384>)
 80046c0:	f7fd fff2 	bl	80026a8 <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046ca:	69fb      	ldr	r3, [r7, #28]
 80046cc:	005b      	lsls	r3, r3, #1
 80046ce:	2203      	movs	r2, #3
 80046d0:	fa02 f303 	lsl.w	r3, r2, r3
 80046d4:	43db      	mvns	r3, r3
 80046d6:	69ba      	ldr	r2, [r7, #24]
 80046d8:	4013      	ands	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	69fb      	ldr	r3, [r7, #28]
 80046e2:	005b      	lsls	r3, r3, #1
 80046e4:	fa02 f303 	lsl.w	r3, r2, r3
 80046e8:	69ba      	ldr	r2, [r7, #24]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	f003 0303 	and.w	r3, r3, #3
 80046fc:	2b02      	cmp	r3, #2
 80046fe:	f040 80c1 	bne.w	8004884 <HAL_GPIO_Init+0x3d0>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8004702:	683b      	ldr	r3, [r7, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	2b00      	cmp	r3, #0
 8004708:	f000 8098 	beq.w	800483c <HAL_GPIO_Init+0x388>
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	691b      	ldr	r3, [r3, #16]
 8004710:	2b09      	cmp	r3, #9
 8004712:	f000 8093 	beq.w	800483c <HAL_GPIO_Init+0x388>
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	691b      	ldr	r3, [r3, #16]
 800471a:	2b00      	cmp	r3, #0
 800471c:	f000 808e 	beq.w	800483c <HAL_GPIO_Init+0x388>
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	2b00      	cmp	r3, #0
 8004726:	f000 8089 	beq.w	800483c <HAL_GPIO_Init+0x388>
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	691b      	ldr	r3, [r3, #16]
 800472e:	2b00      	cmp	r3, #0
 8004730:	f000 8084 	beq.w	800483c <HAL_GPIO_Init+0x388>
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	691b      	ldr	r3, [r3, #16]
 8004738:	2b00      	cmp	r3, #0
 800473a:	d07f      	beq.n	800483c <HAL_GPIO_Init+0x388>
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	2b01      	cmp	r3, #1
 8004742:	d07b      	beq.n	800483c <HAL_GPIO_Init+0x388>
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	691b      	ldr	r3, [r3, #16]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d077      	beq.n	800483c <HAL_GPIO_Init+0x388>
 800474c:	683b      	ldr	r3, [r7, #0]
 800474e:	691b      	ldr	r3, [r3, #16]
 8004750:	2b02      	cmp	r3, #2
 8004752:	d073      	beq.n	800483c <HAL_GPIO_Init+0x388>
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	691b      	ldr	r3, [r3, #16]
 8004758:	2b02      	cmp	r3, #2
 800475a:	d06f      	beq.n	800483c <HAL_GPIO_Init+0x388>
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	691b      	ldr	r3, [r3, #16]
 8004760:	2b02      	cmp	r3, #2
 8004762:	d06b      	beq.n	800483c <HAL_GPIO_Init+0x388>
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b03      	cmp	r3, #3
 800476a:	d067      	beq.n	800483c <HAL_GPIO_Init+0x388>
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	2b04      	cmp	r3, #4
 8004772:	d063      	beq.n	800483c <HAL_GPIO_Init+0x388>
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	2b04      	cmp	r3, #4
 800477a:	d05f      	beq.n	800483c <HAL_GPIO_Init+0x388>
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	691b      	ldr	r3, [r3, #16]
 8004780:	2b04      	cmp	r3, #4
 8004782:	d05b      	beq.n	800483c <HAL_GPIO_Init+0x388>
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	691b      	ldr	r3, [r3, #16]
 8004788:	2b05      	cmp	r3, #5
 800478a:	d057      	beq.n	800483c <HAL_GPIO_Init+0x388>
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	2b05      	cmp	r3, #5
 8004792:	d053      	beq.n	800483c <HAL_GPIO_Init+0x388>
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	691b      	ldr	r3, [r3, #16]
 8004798:	2b09      	cmp	r3, #9
 800479a:	d04f      	beq.n	800483c <HAL_GPIO_Init+0x388>
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	691b      	ldr	r3, [r3, #16]
 80047a0:	2b06      	cmp	r3, #6
 80047a2:	d04b      	beq.n	800483c <HAL_GPIO_Init+0x388>
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	691b      	ldr	r3, [r3, #16]
 80047a8:	2b09      	cmp	r3, #9
 80047aa:	d047      	beq.n	800483c <HAL_GPIO_Init+0x388>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	2b07      	cmp	r3, #7
 80047b2:	d043      	beq.n	800483c <HAL_GPIO_Init+0x388>
 80047b4:	683b      	ldr	r3, [r7, #0]
 80047b6:	691b      	ldr	r3, [r3, #16]
 80047b8:	2b07      	cmp	r3, #7
 80047ba:	d03f      	beq.n	800483c <HAL_GPIO_Init+0x388>
 80047bc:	683b      	ldr	r3, [r7, #0]
 80047be:	691b      	ldr	r3, [r3, #16]
 80047c0:	2b07      	cmp	r3, #7
 80047c2:	d03b      	beq.n	800483c <HAL_GPIO_Init+0x388>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	2b08      	cmp	r3, #8
 80047ca:	d037      	beq.n	800483c <HAL_GPIO_Init+0x388>
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	691b      	ldr	r3, [r3, #16]
 80047d0:	2b08      	cmp	r3, #8
 80047d2:	d033      	beq.n	800483c <HAL_GPIO_Init+0x388>
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	2b08      	cmp	r3, #8
 80047da:	d02f      	beq.n	800483c <HAL_GPIO_Init+0x388>
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	2b09      	cmp	r3, #9
 80047e2:	d02b      	beq.n	800483c <HAL_GPIO_Init+0x388>
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	691b      	ldr	r3, [r3, #16]
 80047e8:	2b09      	cmp	r3, #9
 80047ea:	d027      	beq.n	800483c <HAL_GPIO_Init+0x388>
 80047ec:	683b      	ldr	r3, [r7, #0]
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	2b0a      	cmp	r3, #10
 80047f2:	d023      	beq.n	800483c <HAL_GPIO_Init+0x388>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b0a      	cmp	r3, #10
 80047fa:	d01f      	beq.n	800483c <HAL_GPIO_Init+0x388>
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	691b      	ldr	r3, [r3, #16]
 8004800:	2b0b      	cmp	r3, #11
 8004802:	d01b      	beq.n	800483c <HAL_GPIO_Init+0x388>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	691b      	ldr	r3, [r3, #16]
 8004808:	2b0c      	cmp	r3, #12
 800480a:	d017      	beq.n	800483c <HAL_GPIO_Init+0x388>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2b0c      	cmp	r3, #12
 8004812:	d013      	beq.n	800483c <HAL_GPIO_Init+0x388>
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	2b0d      	cmp	r3, #13
 800481a:	d00f      	beq.n	800483c <HAL_GPIO_Init+0x388>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	691b      	ldr	r3, [r3, #16]
 8004820:	2b0c      	cmp	r3, #12
 8004822:	d00b      	beq.n	800483c <HAL_GPIO_Init+0x388>
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	691b      	ldr	r3, [r3, #16]
 8004828:	2b0f      	cmp	r3, #15
 800482a:	d007      	beq.n	800483c <HAL_GPIO_Init+0x388>
 800482c:	21de      	movs	r1, #222	@ 0xde
 800482e:	4802      	ldr	r0, [pc, #8]	@ (8004838 <HAL_GPIO_Init+0x384>)
 8004830:	f7fd ff3a 	bl	80026a8 <assert_failed>
 8004834:	e002      	b.n	800483c <HAL_GPIO_Init+0x388>
 8004836:	bf00      	nop
 8004838:	0800f930 	.word	0x0800f930
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800483c:	69fb      	ldr	r3, [r7, #28]
 800483e:	08da      	lsrs	r2, r3, #3
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	3208      	adds	r2, #8
 8004844:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004848:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800484a:	69fb      	ldr	r3, [r7, #28]
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	220f      	movs	r2, #15
 8004854:	fa02 f303 	lsl.w	r3, r2, r3
 8004858:	43db      	mvns	r3, r3
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4013      	ands	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	691a      	ldr	r2, [r3, #16]
 8004864:	69fb      	ldr	r3, [r7, #28]
 8004866:	f003 0307 	and.w	r3, r3, #7
 800486a:	009b      	lsls	r3, r3, #2
 800486c:	fa02 f303 	lsl.w	r3, r2, r3
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	4313      	orrs	r3, r2
 8004874:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004876:	69fb      	ldr	r3, [r7, #28]
 8004878:	08da      	lsrs	r2, r3, #3
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	3208      	adds	r2, #8
 800487e:	69b9      	ldr	r1, [r7, #24]
 8004880:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	005b      	lsls	r3, r3, #1
 800488e:	2203      	movs	r2, #3
 8004890:	fa02 f303 	lsl.w	r3, r2, r3
 8004894:	43db      	mvns	r3, r3
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	4013      	ands	r3, r2
 800489a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	f003 0203 	and.w	r2, r3, #3
 80048a4:	69fb      	ldr	r3, [r7, #28]
 80048a6:	005b      	lsls	r3, r3, #1
 80048a8:	fa02 f303 	lsl.w	r3, r2, r3
 80048ac:	69ba      	ldr	r2, [r7, #24]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	f000 80b4 	beq.w	8004a2e <HAL_GPIO_Init+0x57a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048c6:	2300      	movs	r3, #0
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	4b5f      	ldr	r3, [pc, #380]	@ (8004a48 <HAL_GPIO_Init+0x594>)
 80048cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ce:	4a5e      	ldr	r2, [pc, #376]	@ (8004a48 <HAL_GPIO_Init+0x594>)
 80048d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80048d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80048d6:	4b5c      	ldr	r3, [pc, #368]	@ (8004a48 <HAL_GPIO_Init+0x594>)
 80048d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80048de:	60fb      	str	r3, [r7, #12]
 80048e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048e2:	4a5a      	ldr	r2, [pc, #360]	@ (8004a4c <HAL_GPIO_Init+0x598>)
 80048e4:	69fb      	ldr	r3, [r7, #28]
 80048e6:	089b      	lsrs	r3, r3, #2
 80048e8:	3302      	adds	r3, #2
 80048ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	f003 0303 	and.w	r3, r3, #3
 80048f6:	009b      	lsls	r3, r3, #2
 80048f8:	220f      	movs	r2, #15
 80048fa:	fa02 f303 	lsl.w	r3, r2, r3
 80048fe:	43db      	mvns	r3, r3
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	4013      	ands	r3, r2
 8004904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a51      	ldr	r2, [pc, #324]	@ (8004a50 <HAL_GPIO_Init+0x59c>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d02b      	beq.n	8004966 <HAL_GPIO_Init+0x4b2>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a50      	ldr	r2, [pc, #320]	@ (8004a54 <HAL_GPIO_Init+0x5a0>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d025      	beq.n	8004962 <HAL_GPIO_Init+0x4ae>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	4a4f      	ldr	r2, [pc, #316]	@ (8004a58 <HAL_GPIO_Init+0x5a4>)
 800491a:	4293      	cmp	r3, r2
 800491c:	d01f      	beq.n	800495e <HAL_GPIO_Init+0x4aa>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	4a4e      	ldr	r2, [pc, #312]	@ (8004a5c <HAL_GPIO_Init+0x5a8>)
 8004922:	4293      	cmp	r3, r2
 8004924:	d019      	beq.n	800495a <HAL_GPIO_Init+0x4a6>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	4a4d      	ldr	r2, [pc, #308]	@ (8004a60 <HAL_GPIO_Init+0x5ac>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d013      	beq.n	8004956 <HAL_GPIO_Init+0x4a2>
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	4a4c      	ldr	r2, [pc, #304]	@ (8004a64 <HAL_GPIO_Init+0x5b0>)
 8004932:	4293      	cmp	r3, r2
 8004934:	d00d      	beq.n	8004952 <HAL_GPIO_Init+0x49e>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	4a4b      	ldr	r2, [pc, #300]	@ (8004a68 <HAL_GPIO_Init+0x5b4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d007      	beq.n	800494e <HAL_GPIO_Init+0x49a>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	4a4a      	ldr	r2, [pc, #296]	@ (8004a6c <HAL_GPIO_Init+0x5b8>)
 8004942:	4293      	cmp	r3, r2
 8004944:	d101      	bne.n	800494a <HAL_GPIO_Init+0x496>
 8004946:	2307      	movs	r3, #7
 8004948:	e00e      	b.n	8004968 <HAL_GPIO_Init+0x4b4>
 800494a:	2308      	movs	r3, #8
 800494c:	e00c      	b.n	8004968 <HAL_GPIO_Init+0x4b4>
 800494e:	2306      	movs	r3, #6
 8004950:	e00a      	b.n	8004968 <HAL_GPIO_Init+0x4b4>
 8004952:	2305      	movs	r3, #5
 8004954:	e008      	b.n	8004968 <HAL_GPIO_Init+0x4b4>
 8004956:	2304      	movs	r3, #4
 8004958:	e006      	b.n	8004968 <HAL_GPIO_Init+0x4b4>
 800495a:	2303      	movs	r3, #3
 800495c:	e004      	b.n	8004968 <HAL_GPIO_Init+0x4b4>
 800495e:	2302      	movs	r3, #2
 8004960:	e002      	b.n	8004968 <HAL_GPIO_Init+0x4b4>
 8004962:	2301      	movs	r3, #1
 8004964:	e000      	b.n	8004968 <HAL_GPIO_Init+0x4b4>
 8004966:	2300      	movs	r3, #0
 8004968:	69fa      	ldr	r2, [r7, #28]
 800496a:	f002 0203 	and.w	r2, r2, #3
 800496e:	0092      	lsls	r2, r2, #2
 8004970:	4093      	lsls	r3, r2
 8004972:	69ba      	ldr	r2, [r7, #24]
 8004974:	4313      	orrs	r3, r2
 8004976:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004978:	4934      	ldr	r1, [pc, #208]	@ (8004a4c <HAL_GPIO_Init+0x598>)
 800497a:	69fb      	ldr	r3, [r7, #28]
 800497c:	089b      	lsrs	r3, r3, #2
 800497e:	3302      	adds	r3, #2
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004986:	4b3a      	ldr	r3, [pc, #232]	@ (8004a70 <HAL_GPIO_Init+0x5bc>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	43db      	mvns	r3, r3
 8004990:	69ba      	ldr	r2, [r7, #24]
 8004992:	4013      	ands	r3, r2
 8004994:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	685b      	ldr	r3, [r3, #4]
 800499a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d003      	beq.n	80049aa <HAL_GPIO_Init+0x4f6>
        {
          temp |= iocurrent;
 80049a2:	69ba      	ldr	r2, [r7, #24]
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	4313      	orrs	r3, r2
 80049a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049aa:	4a31      	ldr	r2, [pc, #196]	@ (8004a70 <HAL_GPIO_Init+0x5bc>)
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049b0:	4b2f      	ldr	r3, [pc, #188]	@ (8004a70 <HAL_GPIO_Init+0x5bc>)
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	43db      	mvns	r3, r3
 80049ba:	69ba      	ldr	r2, [r7, #24]
 80049bc:	4013      	ands	r3, r2
 80049be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	685b      	ldr	r3, [r3, #4]
 80049c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <HAL_GPIO_Init+0x520>
        {
          temp |= iocurrent;
 80049cc:	69ba      	ldr	r2, [r7, #24]
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	4313      	orrs	r3, r2
 80049d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80049d4:	4a26      	ldr	r2, [pc, #152]	@ (8004a70 <HAL_GPIO_Init+0x5bc>)
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80049da:	4b25      	ldr	r3, [pc, #148]	@ (8004a70 <HAL_GPIO_Init+0x5bc>)
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049e0:	693b      	ldr	r3, [r7, #16]
 80049e2:	43db      	mvns	r3, r3
 80049e4:	69ba      	ldr	r2, [r7, #24]
 80049e6:	4013      	ands	r3, r2
 80049e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d003      	beq.n	80049fe <HAL_GPIO_Init+0x54a>
        {
          temp |= iocurrent;
 80049f6:	69ba      	ldr	r2, [r7, #24]
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049fe:	4a1c      	ldr	r2, [pc, #112]	@ (8004a70 <HAL_GPIO_Init+0x5bc>)
 8004a00:	69bb      	ldr	r3, [r7, #24]
 8004a02:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a04:	4b1a      	ldr	r3, [pc, #104]	@ (8004a70 <HAL_GPIO_Init+0x5bc>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	43db      	mvns	r3, r3
 8004a0e:	69ba      	ldr	r2, [r7, #24]
 8004a10:	4013      	ands	r3, r2
 8004a12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	685b      	ldr	r3, [r3, #4]
 8004a18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d003      	beq.n	8004a28 <HAL_GPIO_Init+0x574>
        {
          temp |= iocurrent;
 8004a20:	69ba      	ldr	r2, [r7, #24]
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a28:	4a11      	ldr	r2, [pc, #68]	@ (8004a70 <HAL_GPIO_Init+0x5bc>)
 8004a2a:	69bb      	ldr	r3, [r7, #24]
 8004a2c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	3301      	adds	r3, #1
 8004a32:	61fb      	str	r3, [r7, #28]
 8004a34:	69fb      	ldr	r3, [r7, #28]
 8004a36:	2b0f      	cmp	r3, #15
 8004a38:	f67f adce 	bls.w	80045d8 <HAL_GPIO_Init+0x124>
      }
    }
  }
}
 8004a3c:	bf00      	nop
 8004a3e:	bf00      	nop
 8004a40:	3720      	adds	r7, #32
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}
 8004a46:	bf00      	nop
 8004a48:	40023800 	.word	0x40023800
 8004a4c:	40013800 	.word	0x40013800
 8004a50:	40020000 	.word	0x40020000
 8004a54:	40020400 	.word	0x40020400
 8004a58:	40020800 	.word	0x40020800
 8004a5c:	40020c00 	.word	0x40020c00
 8004a60:	40021000 	.word	0x40021000
 8004a64:	40021400 	.word	0x40021400
 8004a68:	40021800 	.word	0x40021800
 8004a6c:	40021c00 	.word	0x40021c00
 8004a70:	40013c00 	.word	0x40013c00

08004a74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a74:	b580      	push	{r7, lr}
 8004a76:	b082      	sub	sp, #8
 8004a78:	af00      	add	r7, sp, #0
 8004a7a:	6078      	str	r0, [r7, #4]
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	807b      	strh	r3, [r7, #2]
 8004a80:	4613      	mov	r3, r2
 8004a82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8004a84:	887b      	ldrh	r3, [r7, #2]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d104      	bne.n	8004a94 <HAL_GPIO_WritePin+0x20>
 8004a8a:	f240 119d 	movw	r1, #413	@ 0x19d
 8004a8e:	480e      	ldr	r0, [pc, #56]	@ (8004ac8 <HAL_GPIO_WritePin+0x54>)
 8004a90:	f7fd fe0a 	bl	80026a8 <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 8004a94:	787b      	ldrb	r3, [r7, #1]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d007      	beq.n	8004aaa <HAL_GPIO_WritePin+0x36>
 8004a9a:	787b      	ldrb	r3, [r7, #1]
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d004      	beq.n	8004aaa <HAL_GPIO_WritePin+0x36>
 8004aa0:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 8004aa4:	4808      	ldr	r0, [pc, #32]	@ (8004ac8 <HAL_GPIO_WritePin+0x54>)
 8004aa6:	f7fd fdff 	bl	80026a8 <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 8004aaa:	787b      	ldrb	r3, [r7, #1]
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d003      	beq.n	8004ab8 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004ab0:	887a      	ldrh	r2, [r7, #2]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004ab6:	e003      	b.n	8004ac0 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004ab8:	887b      	ldrh	r3, [r7, #2]
 8004aba:	041a      	lsls	r2, r3, #16
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	619a      	str	r2, [r3, #24]
}
 8004ac0:	bf00      	nop
 8004ac2:	3708      	adds	r7, #8
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bd80      	pop	{r7, pc}
 8004ac8:	0800f930 	.word	0x0800f930

08004acc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b082      	sub	sp, #8
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004ad6:	4b08      	ldr	r3, [pc, #32]	@ (8004af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ad8:	695a      	ldr	r2, [r3, #20]
 8004ada:	88fb      	ldrh	r3, [r7, #6]
 8004adc:	4013      	ands	r3, r2
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d006      	beq.n	8004af0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004ae2:	4a05      	ldr	r2, [pc, #20]	@ (8004af8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ae4:	88fb      	ldrh	r3, [r7, #6]
 8004ae6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ae8:	88fb      	ldrh	r3, [r7, #6]
 8004aea:	4618      	mov	r0, r3
 8004aec:	f7fd fd1e 	bl	800252c <HAL_GPIO_EXTI_Callback>
  }
}
 8004af0:	bf00      	nop
 8004af2:	3708      	adds	r7, #8
 8004af4:	46bd      	mov	sp, r7
 8004af6:	bd80      	pop	{r7, pc}
 8004af8:	40013c00 	.word	0x40013c00

08004afc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e1ba      	b.n	8004e84 <HAL_I2C_Init+0x388>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a9d      	ldr	r2, [pc, #628]	@ (8004d88 <HAL_I2C_Init+0x28c>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d00e      	beq.n	8004b36 <HAL_I2C_Init+0x3a>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a9b      	ldr	r2, [pc, #620]	@ (8004d8c <HAL_I2C_Init+0x290>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d009      	beq.n	8004b36 <HAL_I2C_Init+0x3a>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a9a      	ldr	r2, [pc, #616]	@ (8004d90 <HAL_I2C_Init+0x294>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d004      	beq.n	8004b36 <HAL_I2C_Init+0x3a>
 8004b2c:	f240 11c9 	movw	r1, #457	@ 0x1c9
 8004b30:	4898      	ldr	r0, [pc, #608]	@ (8004d94 <HAL_I2C_Init+0x298>)
 8004b32:	f7fd fdb9 	bl	80026a8 <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d004      	beq.n	8004b48 <HAL_I2C_Init+0x4c>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	4a95      	ldr	r2, [pc, #596]	@ (8004d98 <HAL_I2C_Init+0x29c>)
 8004b44:	4293      	cmp	r3, r2
 8004b46:	d904      	bls.n	8004b52 <HAL_I2C_Init+0x56>
 8004b48:	f44f 71e5 	mov.w	r1, #458	@ 0x1ca
 8004b4c:	4891      	ldr	r0, [pc, #580]	@ (8004d94 <HAL_I2C_Init+0x298>)
 8004b4e:	f7fd fdab 	bl	80026a8 <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d009      	beq.n	8004b6e <HAL_I2C_Init+0x72>
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	689b      	ldr	r3, [r3, #8]
 8004b5e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b62:	d004      	beq.n	8004b6e <HAL_I2C_Init+0x72>
 8004b64:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8004b68:	488a      	ldr	r0, [pc, #552]	@ (8004d94 <HAL_I2C_Init+0x298>)
 8004b6a:	f7fd fd9d 	bl	80026a8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	68db      	ldr	r3, [r3, #12]
 8004b72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b76:	d304      	bcc.n	8004b82 <HAL_I2C_Init+0x86>
 8004b78:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 8004b7c:	4885      	ldr	r0, [pc, #532]	@ (8004d94 <HAL_I2C_Init+0x298>)
 8004b7e:	f7fd fd93 	bl	80026a8 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004b8a:	d009      	beq.n	8004ba0 <HAL_I2C_Init+0xa4>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	691b      	ldr	r3, [r3, #16]
 8004b90:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004b94:	d004      	beq.n	8004ba0 <HAL_I2C_Init+0xa4>
 8004b96:	f240 11cd 	movw	r1, #461	@ 0x1cd
 8004b9a:	487e      	ldr	r0, [pc, #504]	@ (8004d94 <HAL_I2C_Init+0x298>)
 8004b9c:	f7fd fd84 	bl	80026a8 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	695b      	ldr	r3, [r3, #20]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d008      	beq.n	8004bba <HAL_I2C_Init+0xbe>
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	695b      	ldr	r3, [r3, #20]
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d004      	beq.n	8004bba <HAL_I2C_Init+0xbe>
 8004bb0:	f44f 71e7 	mov.w	r1, #462	@ 0x1ce
 8004bb4:	4877      	ldr	r0, [pc, #476]	@ (8004d94 <HAL_I2C_Init+0x298>)
 8004bb6:	f7fd fd77 	bl	80026a8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d004      	beq.n	8004bd0 <HAL_I2C_Init+0xd4>
 8004bc6:	f240 11cf 	movw	r1, #463	@ 0x1cf
 8004bca:	4872      	ldr	r0, [pc, #456]	@ (8004d94 <HAL_I2C_Init+0x298>)
 8004bcc:	f7fd fd6c 	bl	80026a8 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	69db      	ldr	r3, [r3, #28]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d008      	beq.n	8004bea <HAL_I2C_Init+0xee>
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	69db      	ldr	r3, [r3, #28]
 8004bdc:	2b40      	cmp	r3, #64	@ 0x40
 8004bde:	d004      	beq.n	8004bea <HAL_I2C_Init+0xee>
 8004be0:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 8004be4:	486b      	ldr	r0, [pc, #428]	@ (8004d94 <HAL_I2C_Init+0x298>)
 8004be6:	f7fd fd5f 	bl	80026a8 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	6a1b      	ldr	r3, [r3, #32]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d008      	beq.n	8004c04 <HAL_I2C_Init+0x108>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6a1b      	ldr	r3, [r3, #32]
 8004bf6:	2b80      	cmp	r3, #128	@ 0x80
 8004bf8:	d004      	beq.n	8004c04 <HAL_I2C_Init+0x108>
 8004bfa:	f240 11d1 	movw	r1, #465	@ 0x1d1
 8004bfe:	4865      	ldr	r0, [pc, #404]	@ (8004d94 <HAL_I2C_Init+0x298>)
 8004c00:	f7fd fd52 	bl	80026a8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c0a:	b2db      	uxtb	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d106      	bne.n	8004c1e <HAL_I2C_Init+0x122>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004c18:	6878      	ldr	r0, [r7, #4]
 8004c1a:	f7fd fdbf 	bl	800279c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2224      	movs	r2, #36	@ 0x24
 8004c22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f022 0201 	bic.w	r2, r2, #1
 8004c34:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	681a      	ldr	r2, [r3, #0]
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004c44:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004c54:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004c56:	f001 fd9d 	bl	8006794 <HAL_RCC_GetPCLK1Freq>
 8004c5a:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	685b      	ldr	r3, [r3, #4]
 8004c60:	4a4e      	ldr	r2, [pc, #312]	@ (8004d9c <HAL_I2C_Init+0x2a0>)
 8004c62:	4293      	cmp	r3, r2
 8004c64:	d807      	bhi.n	8004c76 <HAL_I2C_Init+0x17a>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	4a4d      	ldr	r2, [pc, #308]	@ (8004da0 <HAL_I2C_Init+0x2a4>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	bf94      	ite	ls
 8004c6e:	2301      	movls	r3, #1
 8004c70:	2300      	movhi	r3, #0
 8004c72:	b2db      	uxtb	r3, r3
 8004c74:	e006      	b.n	8004c84 <HAL_I2C_Init+0x188>
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	4a4a      	ldr	r2, [pc, #296]	@ (8004da4 <HAL_I2C_Init+0x2a8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	bf94      	ite	ls
 8004c7e:	2301      	movls	r3, #1
 8004c80:	2300      	movhi	r3, #0
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d001      	beq.n	8004c8c <HAL_I2C_Init+0x190>
  {
    return HAL_ERROR;
 8004c88:	2301      	movs	r3, #1
 8004c8a:	e0fb      	b.n	8004e84 <HAL_I2C_Init+0x388>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	4a46      	ldr	r2, [pc, #280]	@ (8004da8 <HAL_I2C_Init+0x2ac>)
 8004c90:	fba2 2303 	umull	r2, r3, r2, r3
 8004c94:	0c9b      	lsrs	r3, r3, #18
 8004c96:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	68ba      	ldr	r2, [r7, #8]
 8004ca8:	430a      	orrs	r2, r1
 8004caa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	6a1b      	ldr	r3, [r3, #32]
 8004cb2:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	4a38      	ldr	r2, [pc, #224]	@ (8004d9c <HAL_I2C_Init+0x2a0>)
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d802      	bhi.n	8004cc6 <HAL_I2C_Init+0x1ca>
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	3301      	adds	r3, #1
 8004cc4:	e009      	b.n	8004cda <HAL_I2C_Init+0x1de>
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004ccc:	fb02 f303 	mul.w	r3, r2, r3
 8004cd0:	4a36      	ldr	r2, [pc, #216]	@ (8004dac <HAL_I2C_Init+0x2b0>)
 8004cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd6:	099b      	lsrs	r3, r3, #6
 8004cd8:	3301      	adds	r3, #1
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6812      	ldr	r2, [r2, #0]
 8004cde:	430b      	orrs	r3, r1
 8004ce0:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004cec:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	4929      	ldr	r1, [pc, #164]	@ (8004d9c <HAL_I2C_Init+0x2a0>)
 8004cf6:	428b      	cmp	r3, r1
 8004cf8:	d819      	bhi.n	8004d2e <HAL_I2C_Init+0x232>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	1e59      	subs	r1, r3, #1
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	685b      	ldr	r3, [r3, #4]
 8004d02:	005b      	lsls	r3, r3, #1
 8004d04:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d08:	1c59      	adds	r1, r3, #1
 8004d0a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004d0e:	400b      	ands	r3, r1
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d00a      	beq.n	8004d2a <HAL_I2C_Init+0x22e>
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	1e59      	subs	r1, r3, #1
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004d22:	3301      	adds	r3, #1
 8004d24:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d28:	e065      	b.n	8004df6 <HAL_I2C_Init+0x2fa>
 8004d2a:	2304      	movs	r3, #4
 8004d2c:	e063      	b.n	8004df6 <HAL_I2C_Init+0x2fa>
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d111      	bne.n	8004d5a <HAL_I2C_Init+0x25e>
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	1e58      	subs	r0, r3, #1
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6859      	ldr	r1, [r3, #4]
 8004d3e:	460b      	mov	r3, r1
 8004d40:	005b      	lsls	r3, r3, #1
 8004d42:	440b      	add	r3, r1
 8004d44:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d48:	3301      	adds	r3, #1
 8004d4a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	bf0c      	ite	eq
 8004d52:	2301      	moveq	r3, #1
 8004d54:	2300      	movne	r3, #0
 8004d56:	b2db      	uxtb	r3, r3
 8004d58:	e012      	b.n	8004d80 <HAL_I2C_Init+0x284>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	1e58      	subs	r0, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6859      	ldr	r1, [r3, #4]
 8004d62:	460b      	mov	r3, r1
 8004d64:	009b      	lsls	r3, r3, #2
 8004d66:	440b      	add	r3, r1
 8004d68:	0099      	lsls	r1, r3, #2
 8004d6a:	440b      	add	r3, r1
 8004d6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d70:	3301      	adds	r3, #1
 8004d72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	bf0c      	ite	eq
 8004d7a:	2301      	moveq	r3, #1
 8004d7c:	2300      	movne	r3, #0
 8004d7e:	b2db      	uxtb	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d015      	beq.n	8004db0 <HAL_I2C_Init+0x2b4>
 8004d84:	2301      	movs	r3, #1
 8004d86:	e036      	b.n	8004df6 <HAL_I2C_Init+0x2fa>
 8004d88:	40005400 	.word	0x40005400
 8004d8c:	40005800 	.word	0x40005800
 8004d90:	40005c00 	.word	0x40005c00
 8004d94:	0800f96c 	.word	0x0800f96c
 8004d98:	00061a80 	.word	0x00061a80
 8004d9c:	000186a0 	.word	0x000186a0
 8004da0:	001e847f 	.word	0x001e847f
 8004da4:	003d08ff 	.word	0x003d08ff
 8004da8:	431bde83 	.word	0x431bde83
 8004dac:	10624dd3 	.word	0x10624dd3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	689b      	ldr	r3, [r3, #8]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10e      	bne.n	8004dd6 <HAL_I2C_Init+0x2da>
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	1e58      	subs	r0, r3, #1
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6859      	ldr	r1, [r3, #4]
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	005b      	lsls	r3, r3, #1
 8004dc4:	440b      	add	r3, r1
 8004dc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dca:	3301      	adds	r3, #1
 8004dcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004dd0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004dd4:	e00f      	b.n	8004df6 <HAL_I2C_Init+0x2fa>
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	1e58      	subs	r0, r3, #1
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6859      	ldr	r1, [r3, #4]
 8004dde:	460b      	mov	r3, r1
 8004de0:	009b      	lsls	r3, r3, #2
 8004de2:	440b      	add	r3, r1
 8004de4:	0099      	lsls	r1, r3, #2
 8004de6:	440b      	add	r3, r1
 8004de8:	fbb0 f3f3 	udiv	r3, r0, r3
 8004dec:	3301      	adds	r3, #1
 8004dee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004df2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004df6:	6879      	ldr	r1, [r7, #4]
 8004df8:	6809      	ldr	r1, [r1, #0]
 8004dfa:	4313      	orrs	r3, r2
 8004dfc:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	69da      	ldr	r2, [r3, #28]
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6a1b      	ldr	r3, [r3, #32]
 8004e10:	431a      	orrs	r2, r3
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	430a      	orrs	r2, r1
 8004e18:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004e24:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004e28:	687a      	ldr	r2, [r7, #4]
 8004e2a:	6911      	ldr	r1, [r2, #16]
 8004e2c:	687a      	ldr	r2, [r7, #4]
 8004e2e:	68d2      	ldr	r2, [r2, #12]
 8004e30:	4311      	orrs	r1, r2
 8004e32:	687a      	ldr	r2, [r7, #4]
 8004e34:	6812      	ldr	r2, [r2, #0]
 8004e36:	430b      	orrs	r3, r1
 8004e38:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	695a      	ldr	r2, [r3, #20]
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	699b      	ldr	r3, [r3, #24]
 8004e4c:	431a      	orrs	r2, r3
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 0201 	orr.w	r2, r2, #1
 8004e64:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2220      	movs	r2, #32
 8004e70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2200      	movs	r2, #0
 8004e78:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004e82:	2300      	movs	r3, #0
}
 8004e84:	4618      	mov	r0, r3
 8004e86:	3710      	adds	r7, #16
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bd80      	pop	{r7, pc}

08004e8c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b088      	sub	sp, #32
 8004e90:	af02      	add	r7, sp, #8
 8004e92:	60f8      	str	r0, [r7, #12]
 8004e94:	4608      	mov	r0, r1
 8004e96:	4611      	mov	r1, r2
 8004e98:	461a      	mov	r2, r3
 8004e9a:	4603      	mov	r3, r0
 8004e9c:	817b      	strh	r3, [r7, #10]
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	813b      	strh	r3, [r7, #8]
 8004ea2:	4613      	mov	r3, r2
 8004ea4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004ea6:	f7fd ff27 	bl	8002cf8 <HAL_GetTick>
 8004eaa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 8004eac:	88fb      	ldrh	r3, [r7, #6]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d007      	beq.n	8004ec2 <HAL_I2C_Mem_Write+0x36>
 8004eb2:	88fb      	ldrh	r3, [r7, #6]
 8004eb4:	2b10      	cmp	r3, #16
 8004eb6:	d004      	beq.n	8004ec2 <HAL_I2C_Mem_Write+0x36>
 8004eb8:	f640 11cd 	movw	r1, #2509	@ 0x9cd
 8004ebc:	4873      	ldr	r0, [pc, #460]	@ (800508c <HAL_I2C_Mem_Write+0x200>)
 8004ebe:	f7fd fbf3 	bl	80026a8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004ec8:	b2db      	uxtb	r3, r3
 8004eca:	2b20      	cmp	r3, #32
 8004ecc:	f040 80d9 	bne.w	8005082 <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004ed0:	697b      	ldr	r3, [r7, #20]
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	2319      	movs	r3, #25
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	496d      	ldr	r1, [pc, #436]	@ (8005090 <HAL_I2C_Mem_Write+0x204>)
 8004eda:	68f8      	ldr	r0, [r7, #12]
 8004edc:	f000 fc98 	bl	8005810 <I2C_WaitOnFlagUntilTimeout>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 8004ee6:	2302      	movs	r3, #2
 8004ee8:	e0cc      	b.n	8005084 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d101      	bne.n	8004ef8 <HAL_I2C_Mem_Write+0x6c>
 8004ef4:	2302      	movs	r3, #2
 8004ef6:	e0c5      	b.n	8005084 <HAL_I2C_Mem_Write+0x1f8>
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d007      	beq.n	8004f1e <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f042 0201 	orr.w	r2, r2, #1
 8004f1c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	681a      	ldr	r2, [r3, #0]
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004f2c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2221      	movs	r2, #33	@ 0x21
 8004f32:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	2240      	movs	r2, #64	@ 0x40
 8004f3a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	6a3a      	ldr	r2, [r7, #32]
 8004f48:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004f4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	4a4d      	ldr	r2, [pc, #308]	@ (8005094 <HAL_I2C_Mem_Write+0x208>)
 8004f5e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004f60:	88f8      	ldrh	r0, [r7, #6]
 8004f62:	893a      	ldrh	r2, [r7, #8]
 8004f64:	8979      	ldrh	r1, [r7, #10]
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	9301      	str	r3, [sp, #4]
 8004f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f6c:	9300      	str	r3, [sp, #0]
 8004f6e:	4603      	mov	r3, r0
 8004f70:	68f8      	ldr	r0, [r7, #12]
 8004f72:	f000 facf 	bl	8005514 <I2C_RequestMemoryWrite>
 8004f76:	4603      	mov	r3, r0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d052      	beq.n	8005022 <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 8004f7c:	2301      	movs	r3, #1
 8004f7e:	e081      	b.n	8005084 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004f84:	68f8      	ldr	r0, [r7, #12]
 8004f86:	f000 fd5d 	bl	8005a44 <I2C_WaitOnTXEFlagUntilTimeout>
 8004f8a:	4603      	mov	r3, r0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00d      	beq.n	8004fac <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f94:	2b04      	cmp	r3, #4
 8004f96:	d107      	bne.n	8004fa8 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004fa6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e06b      	b.n	8005084 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb0:	781a      	ldrb	r2, [r3, #0]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbc:	1c5a      	adds	r2, r3, #1
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fc6:	3b01      	subs	r3, #1
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	3b01      	subs	r3, #1
 8004fd6:	b29a      	uxth	r2, r3
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	695b      	ldr	r3, [r3, #20]
 8004fe2:	f003 0304 	and.w	r3, r3, #4
 8004fe6:	2b04      	cmp	r3, #4
 8004fe8:	d11b      	bne.n	8005022 <HAL_I2C_Mem_Write+0x196>
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d017      	beq.n	8005022 <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff6:	781a      	ldrb	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005002:	1c5a      	adds	r2, r3, #1
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800500c:	3b01      	subs	r3, #1
 800500e:	b29a      	uxth	r2, r3
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005018:	b29b      	uxth	r3, r3
 800501a:	3b01      	subs	r3, #1
 800501c:	b29a      	uxth	r2, r3
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1aa      	bne.n	8004f80 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800502e:	68f8      	ldr	r0, [r7, #12]
 8005030:	f000 fd50 	bl	8005ad4 <I2C_WaitOnBTFFlagUntilTimeout>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00d      	beq.n	8005056 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800503e:	2b04      	cmp	r3, #4
 8005040:	d107      	bne.n	8005052 <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681a      	ldr	r2, [r3, #0]
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005050:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005052:	2301      	movs	r3, #1
 8005054:	e016      	b.n	8005084 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005064:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	2220      	movs	r2, #32
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	2200      	movs	r2, #0
 8005072:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	2200      	movs	r2, #0
 800507a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800507e:	2300      	movs	r3, #0
 8005080:	e000      	b.n	8005084 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 8005082:	2302      	movs	r3, #2
  }
}
 8005084:	4618      	mov	r0, r3
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	0800f96c 	.word	0x0800f96c
 8005090:	00100002 	.word	0x00100002
 8005094:	ffff0000 	.word	0xffff0000

08005098 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005098:	b580      	push	{r7, lr}
 800509a:	b08c      	sub	sp, #48	@ 0x30
 800509c:	af02      	add	r7, sp, #8
 800509e:	60f8      	str	r0, [r7, #12]
 80050a0:	4608      	mov	r0, r1
 80050a2:	4611      	mov	r1, r2
 80050a4:	461a      	mov	r2, r3
 80050a6:	4603      	mov	r3, r0
 80050a8:	817b      	strh	r3, [r7, #10]
 80050aa:	460b      	mov	r3, r1
 80050ac:	813b      	strh	r3, [r7, #8]
 80050ae:	4613      	mov	r3, r2
 80050b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80050b2:	f7fd fe21 	bl	8002cf8 <HAL_GetTick>
 80050b6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80050b8:	88fb      	ldrh	r3, [r7, #6]
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d007      	beq.n	80050ce <HAL_I2C_Mem_Read+0x36>
 80050be:	88fb      	ldrh	r3, [r7, #6]
 80050c0:	2b10      	cmp	r3, #16
 80050c2:	d004      	beq.n	80050ce <HAL_I2C_Mem_Read+0x36>
 80050c4:	f640 2148 	movw	r1, #2632	@ 0xa48
 80050c8:	4881      	ldr	r0, [pc, #516]	@ (80052d0 <HAL_I2C_Mem_Read+0x238>)
 80050ca:	f7fd faed 	bl	80026a8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80050d4:	b2db      	uxtb	r3, r3
 80050d6:	2b20      	cmp	r3, #32
 80050d8:	f040 8215 	bne.w	8005506 <HAL_I2C_Mem_Read+0x46e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050de:	9300      	str	r3, [sp, #0]
 80050e0:	2319      	movs	r3, #25
 80050e2:	2201      	movs	r2, #1
 80050e4:	497b      	ldr	r1, [pc, #492]	@ (80052d4 <HAL_I2C_Mem_Read+0x23c>)
 80050e6:	68f8      	ldr	r0, [r7, #12]
 80050e8:	f000 fb92 	bl	8005810 <I2C_WaitOnFlagUntilTimeout>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d001      	beq.n	80050f6 <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 80050f2:	2302      	movs	r3, #2
 80050f4:	e208      	b.n	8005508 <HAL_I2C_Mem_Read+0x470>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050fc:	2b01      	cmp	r3, #1
 80050fe:	d101      	bne.n	8005104 <HAL_I2C_Mem_Read+0x6c>
 8005100:	2302      	movs	r3, #2
 8005102:	e201      	b.n	8005508 <HAL_I2C_Mem_Read+0x470>
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2201      	movs	r2, #1
 8005108:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0301 	and.w	r3, r3, #1
 8005116:	2b01      	cmp	r3, #1
 8005118:	d007      	beq.n	800512a <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f042 0201 	orr.w	r2, r2, #1
 8005128:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005138:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2222      	movs	r2, #34	@ 0x22
 800513e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2240      	movs	r2, #64	@ 0x40
 8005146:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	2200      	movs	r2, #0
 800514e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005154:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800515a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005160:	b29a      	uxth	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4a5b      	ldr	r2, [pc, #364]	@ (80052d8 <HAL_I2C_Mem_Read+0x240>)
 800516a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800516c:	88f8      	ldrh	r0, [r7, #6]
 800516e:	893a      	ldrh	r2, [r7, #8]
 8005170:	8979      	ldrh	r1, [r7, #10]
 8005172:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005174:	9301      	str	r3, [sp, #4]
 8005176:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005178:	9300      	str	r3, [sp, #0]
 800517a:	4603      	mov	r3, r0
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f000 fa5f 	bl	8005640 <I2C_RequestMemoryRead>
 8005182:	4603      	mov	r3, r0
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8005188:	2301      	movs	r3, #1
 800518a:	e1bd      	b.n	8005508 <HAL_I2C_Mem_Read+0x470>
    }

    if (hi2c->XferSize == 0U)
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005190:	2b00      	cmp	r3, #0
 8005192:	d113      	bne.n	80051bc <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005194:	2300      	movs	r3, #0
 8005196:	623b      	str	r3, [r7, #32]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	623b      	str	r3, [r7, #32]
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	623b      	str	r3, [r7, #32]
 80051a8:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051b8:	601a      	str	r2, [r3, #0]
 80051ba:	e191      	b.n	80054e0 <HAL_I2C_Mem_Read+0x448>
    }
    else if (hi2c->XferSize == 1U)
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051c0:	2b01      	cmp	r3, #1
 80051c2:	d11b      	bne.n	80051fc <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80051d2:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051d4:	2300      	movs	r3, #0
 80051d6:	61fb      	str	r3, [r7, #28]
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695b      	ldr	r3, [r3, #20]
 80051de:	61fb      	str	r3, [r7, #28]
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	699b      	ldr	r3, [r3, #24]
 80051e6:	61fb      	str	r3, [r7, #28]
 80051e8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	681a      	ldr	r2, [r3, #0]
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80051f8:	601a      	str	r2, [r3, #0]
 80051fa:	e171      	b.n	80054e0 <HAL_I2C_Mem_Read+0x448>
    }
    else if (hi2c->XferSize == 2U)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005200:	2b02      	cmp	r3, #2
 8005202:	d11b      	bne.n	800523c <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	681a      	ldr	r2, [r3, #0]
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005212:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681a      	ldr	r2, [r3, #0]
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005222:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005224:	2300      	movs	r3, #0
 8005226:	61bb      	str	r3, [r7, #24]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	695b      	ldr	r3, [r3, #20]
 800522e:	61bb      	str	r3, [r7, #24]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	61bb      	str	r3, [r7, #24]
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	e151      	b.n	80054e0 <HAL_I2C_Mem_Read+0x448>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800523c:	2300      	movs	r3, #0
 800523e:	617b      	str	r3, [r7, #20]
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	617b      	str	r3, [r7, #20]
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	699b      	ldr	r3, [r3, #24]
 800524e:	617b      	str	r3, [r7, #20]
 8005250:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005252:	e145      	b.n	80054e0 <HAL_I2C_Mem_Read+0x448>
    {
      if (hi2c->XferSize <= 3U)
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005258:	2b03      	cmp	r3, #3
 800525a:	f200 80f2 	bhi.w	8005442 <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005262:	2b01      	cmp	r3, #1
 8005264:	d123      	bne.n	80052ae <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005266:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005268:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800526a:	68f8      	ldr	r0, [r7, #12]
 800526c:	f000 fc7a 	bl	8005b64 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	d001      	beq.n	800527a <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	e146      	b.n	8005508 <HAL_I2C_Mem_Read+0x470>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	691a      	ldr	r2, [r3, #16]
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005284:	b2d2      	uxtb	r2, r2
 8005286:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528c:	1c5a      	adds	r2, r3, #1
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005296:	3b01      	subs	r3, #1
 8005298:	b29a      	uxth	r2, r3
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80052a2:	b29b      	uxth	r3, r3
 80052a4:	3b01      	subs	r3, #1
 80052a6:	b29a      	uxth	r2, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80052ac:	e118      	b.n	80054e0 <HAL_I2C_Mem_Read+0x448>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d14f      	bne.n	8005356 <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052b8:	9300      	str	r3, [sp, #0]
 80052ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052bc:	2200      	movs	r2, #0
 80052be:	4907      	ldr	r1, [pc, #28]	@ (80052dc <HAL_I2C_Mem_Read+0x244>)
 80052c0:	68f8      	ldr	r0, [r7, #12]
 80052c2:	f000 faa5 	bl	8005810 <I2C_WaitOnFlagUntilTimeout>
 80052c6:	4603      	mov	r3, r0
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d009      	beq.n	80052e0 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e11b      	b.n	8005508 <HAL_I2C_Mem_Read+0x470>
 80052d0:	0800f96c 	.word	0x0800f96c
 80052d4:	00100002 	.word	0x00100002
 80052d8:	ffff0000 	.word	0xffff0000
 80052dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80052ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	691a      	ldr	r2, [r3, #16]
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052fa:	b2d2      	uxtb	r2, r2
 80052fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005302:	1c5a      	adds	r2, r3, #1
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800530c:	3b01      	subs	r3, #1
 800530e:	b29a      	uxth	r2, r3
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005318:	b29b      	uxth	r3, r3
 800531a:	3b01      	subs	r3, #1
 800531c:	b29a      	uxth	r2, r3
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	691a      	ldr	r2, [r3, #16]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800532c:	b2d2      	uxtb	r2, r2
 800532e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005334:	1c5a      	adds	r2, r3, #1
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800533e:	3b01      	subs	r3, #1
 8005340:	b29a      	uxth	r2, r3
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800534a:	b29b      	uxth	r3, r3
 800534c:	3b01      	subs	r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005354:	e0c4      	b.n	80054e0 <HAL_I2C_Mem_Read+0x448>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005358:	9300      	str	r3, [sp, #0]
 800535a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800535c:	2200      	movs	r2, #0
 800535e:	496c      	ldr	r1, [pc, #432]	@ (8005510 <HAL_I2C_Mem_Read+0x478>)
 8005360:	68f8      	ldr	r0, [r7, #12]
 8005362:	f000 fa55 	bl	8005810 <I2C_WaitOnFlagUntilTimeout>
 8005366:	4603      	mov	r3, r0
 8005368:	2b00      	cmp	r3, #0
 800536a:	d001      	beq.n	8005370 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e0cb      	b.n	8005508 <HAL_I2C_Mem_Read+0x470>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	681a      	ldr	r2, [r3, #0]
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800537e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	691a      	ldr	r2, [r3, #16]
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800538a:	b2d2      	uxtb	r2, r2
 800538c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005392:	1c5a      	adds	r2, r3, #1
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800539c:	3b01      	subs	r3, #1
 800539e:	b29a      	uxth	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80053a8:	b29b      	uxth	r3, r3
 80053aa:	3b01      	subs	r3, #1
 80053ac:	b29a      	uxth	r2, r3
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80053b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b4:	9300      	str	r3, [sp, #0]
 80053b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80053b8:	2200      	movs	r2, #0
 80053ba:	4955      	ldr	r1, [pc, #340]	@ (8005510 <HAL_I2C_Mem_Read+0x478>)
 80053bc:	68f8      	ldr	r0, [r7, #12]
 80053be:	f000 fa27 	bl	8005810 <I2C_WaitOnFlagUntilTimeout>
 80053c2:	4603      	mov	r3, r0
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d001      	beq.n	80053cc <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e09d      	b.n	8005508 <HAL_I2C_Mem_Read+0x470>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053cc:	68fb      	ldr	r3, [r7, #12]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	681a      	ldr	r2, [r3, #0]
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691a      	ldr	r2, [r3, #16]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053e6:	b2d2      	uxtb	r2, r2
 80053e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053f8:	3b01      	subs	r3, #1
 80053fa:	b29a      	uxth	r2, r3
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005404:	b29b      	uxth	r3, r3
 8005406:	3b01      	subs	r3, #1
 8005408:	b29a      	uxth	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005418:	b2d2      	uxtb	r2, r2
 800541a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005420:	1c5a      	adds	r2, r3, #1
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800542a:	3b01      	subs	r3, #1
 800542c:	b29a      	uxth	r2, r3
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005436:	b29b      	uxth	r3, r3
 8005438:	3b01      	subs	r3, #1
 800543a:	b29a      	uxth	r2, r3
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005440:	e04e      	b.n	80054e0 <HAL_I2C_Mem_Read+0x448>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005444:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005446:	68f8      	ldr	r0, [r7, #12]
 8005448:	f000 fb8c 	bl	8005b64 <I2C_WaitOnRXNEFlagUntilTimeout>
 800544c:	4603      	mov	r3, r0
 800544e:	2b00      	cmp	r3, #0
 8005450:	d001      	beq.n	8005456 <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	e058      	b.n	8005508 <HAL_I2C_Mem_Read+0x470>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005460:	b2d2      	uxtb	r2, r2
 8005462:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005468:	1c5a      	adds	r2, r3, #1
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005472:	3b01      	subs	r3, #1
 8005474:	b29a      	uxth	r2, r3
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800547e:	b29b      	uxth	r3, r3
 8005480:	3b01      	subs	r3, #1
 8005482:	b29a      	uxth	r2, r3
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	695b      	ldr	r3, [r3, #20]
 800548e:	f003 0304 	and.w	r3, r3, #4
 8005492:	2b04      	cmp	r3, #4
 8005494:	d124      	bne.n	80054e0 <HAL_I2C_Mem_Read+0x448>
        {
          if (hi2c->XferSize == 3U)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800549a:	2b03      	cmp	r3, #3
 800549c:	d107      	bne.n	80054ae <HAL_I2C_Mem_Read+0x416>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	681a      	ldr	r2, [r3, #0]
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	691a      	ldr	r2, [r3, #16]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b8:	b2d2      	uxtb	r2, r2
 80054ba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054c0:	1c5a      	adds	r2, r3, #1
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054ca:	3b01      	subs	r3, #1
 80054cc:	b29a      	uxth	r2, r3
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d6:	b29b      	uxth	r3, r3
 80054d8:	3b01      	subs	r3, #1
 80054da:	b29a      	uxth	r2, r3
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f47f aeb5 	bne.w	8005254 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	2220      	movs	r2, #32
 80054ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	2200      	movs	r2, #0
 80054f6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005502:	2300      	movs	r3, #0
 8005504:	e000      	b.n	8005508 <HAL_I2C_Mem_Read+0x470>
  }
  else
  {
    return HAL_BUSY;
 8005506:	2302      	movs	r3, #2
  }
}
 8005508:	4618      	mov	r0, r3
 800550a:	3728      	adds	r7, #40	@ 0x28
 800550c:	46bd      	mov	sp, r7
 800550e:	bd80      	pop	{r7, pc}
 8005510:	00010004 	.word	0x00010004

08005514 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b088      	sub	sp, #32
 8005518:	af02      	add	r7, sp, #8
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	4608      	mov	r0, r1
 800551e:	4611      	mov	r1, r2
 8005520:	461a      	mov	r2, r3
 8005522:	4603      	mov	r3, r0
 8005524:	817b      	strh	r3, [r7, #10]
 8005526:	460b      	mov	r3, r1
 8005528:	813b      	strh	r3, [r7, #8]
 800552a:	4613      	mov	r3, r2
 800552c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	681a      	ldr	r2, [r3, #0]
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800553c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800553e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005540:	9300      	str	r3, [sp, #0]
 8005542:	6a3b      	ldr	r3, [r7, #32]
 8005544:	2200      	movs	r2, #0
 8005546:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800554a:	68f8      	ldr	r0, [r7, #12]
 800554c:	f000 f960 	bl	8005810 <I2C_WaitOnFlagUntilTimeout>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d00d      	beq.n	8005572 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005560:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005564:	d103      	bne.n	800556e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800556c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800556e:	2303      	movs	r3, #3
 8005570:	e05f      	b.n	8005632 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005572:	897b      	ldrh	r3, [r7, #10]
 8005574:	b2db      	uxtb	r3, r3
 8005576:	461a      	mov	r2, r3
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005580:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005582:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005584:	6a3a      	ldr	r2, [r7, #32]
 8005586:	492d      	ldr	r1, [pc, #180]	@ (800563c <I2C_RequestMemoryWrite+0x128>)
 8005588:	68f8      	ldr	r0, [r7, #12]
 800558a:	f000 f9bb 	bl	8005904 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800558e:	4603      	mov	r3, r0
 8005590:	2b00      	cmp	r3, #0
 8005592:	d001      	beq.n	8005598 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005594:	2301      	movs	r3, #1
 8005596:	e04c      	b.n	8005632 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005598:	2300      	movs	r3, #0
 800559a:	617b      	str	r3, [r7, #20]
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	695b      	ldr	r3, [r3, #20]
 80055a2:	617b      	str	r3, [r7, #20]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	699b      	ldr	r3, [r3, #24]
 80055aa:	617b      	str	r3, [r7, #20]
 80055ac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055b0:	6a39      	ldr	r1, [r7, #32]
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 fa46 	bl	8005a44 <I2C_WaitOnTXEFlagUntilTimeout>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00d      	beq.n	80055da <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055c2:	2b04      	cmp	r3, #4
 80055c4:	d107      	bne.n	80055d6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681a      	ldr	r2, [r3, #0]
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055d4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80055d6:	2301      	movs	r3, #1
 80055d8:	e02b      	b.n	8005632 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80055da:	88fb      	ldrh	r3, [r7, #6]
 80055dc:	2b01      	cmp	r3, #1
 80055de:	d105      	bne.n	80055ec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80055e0:	893b      	ldrh	r3, [r7, #8]
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	611a      	str	r2, [r3, #16]
 80055ea:	e021      	b.n	8005630 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80055ec:	893b      	ldrh	r3, [r7, #8]
 80055ee:	0a1b      	lsrs	r3, r3, #8
 80055f0:	b29b      	uxth	r3, r3
 80055f2:	b2da      	uxtb	r2, r3
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80055fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055fc:	6a39      	ldr	r1, [r7, #32]
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f000 fa20 	bl	8005a44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005604:	4603      	mov	r3, r0
 8005606:	2b00      	cmp	r3, #0
 8005608:	d00d      	beq.n	8005626 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800560e:	2b04      	cmp	r3, #4
 8005610:	d107      	bne.n	8005622 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	681a      	ldr	r2, [r3, #0]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005620:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005622:	2301      	movs	r3, #1
 8005624:	e005      	b.n	8005632 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005626:	893b      	ldrh	r3, [r7, #8]
 8005628:	b2da      	uxtb	r2, r3
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3718      	adds	r7, #24
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
 800563a:	bf00      	nop
 800563c:	00010002 	.word	0x00010002

08005640 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b088      	sub	sp, #32
 8005644:	af02      	add	r7, sp, #8
 8005646:	60f8      	str	r0, [r7, #12]
 8005648:	4608      	mov	r0, r1
 800564a:	4611      	mov	r1, r2
 800564c:	461a      	mov	r2, r3
 800564e:	4603      	mov	r3, r0
 8005650:	817b      	strh	r3, [r7, #10]
 8005652:	460b      	mov	r3, r1
 8005654:	813b      	strh	r3, [r7, #8]
 8005656:	4613      	mov	r3, r2
 8005658:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005668:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681a      	ldr	r2, [r3, #0]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005678:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800567a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800567c:	9300      	str	r3, [sp, #0]
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	2200      	movs	r2, #0
 8005682:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005686:	68f8      	ldr	r0, [r7, #12]
 8005688:	f000 f8c2 	bl	8005810 <I2C_WaitOnFlagUntilTimeout>
 800568c:	4603      	mov	r3, r0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00d      	beq.n	80056ae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800569c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80056a0:	d103      	bne.n	80056aa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80056a8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e0aa      	b.n	8005804 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80056ae:	897b      	ldrh	r3, [r7, #10]
 80056b0:	b2db      	uxtb	r3, r3
 80056b2:	461a      	mov	r2, r3
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80056bc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	6a3a      	ldr	r2, [r7, #32]
 80056c2:	4952      	ldr	r1, [pc, #328]	@ (800580c <I2C_RequestMemoryRead+0x1cc>)
 80056c4:	68f8      	ldr	r0, [r7, #12]
 80056c6:	f000 f91d 	bl	8005904 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80056d0:	2301      	movs	r3, #1
 80056d2:	e097      	b.n	8005804 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056d4:	2300      	movs	r3, #0
 80056d6:	617b      	str	r3, [r7, #20]
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	695b      	ldr	r3, [r3, #20]
 80056de:	617b      	str	r3, [r7, #20]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	699b      	ldr	r3, [r3, #24]
 80056e6:	617b      	str	r3, [r7, #20]
 80056e8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80056ec:	6a39      	ldr	r1, [r7, #32]
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f000 f9a8 	bl	8005a44 <I2C_WaitOnTXEFlagUntilTimeout>
 80056f4:	4603      	mov	r3, r0
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d00d      	beq.n	8005716 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056fe:	2b04      	cmp	r3, #4
 8005700:	d107      	bne.n	8005712 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	681a      	ldr	r2, [r3, #0]
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005710:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005712:	2301      	movs	r3, #1
 8005714:	e076      	b.n	8005804 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005716:	88fb      	ldrh	r3, [r7, #6]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d105      	bne.n	8005728 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800571c:	893b      	ldrh	r3, [r7, #8]
 800571e:	b2da      	uxtb	r2, r3
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	611a      	str	r2, [r3, #16]
 8005726:	e021      	b.n	800576c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005728:	893b      	ldrh	r3, [r7, #8]
 800572a:	0a1b      	lsrs	r3, r3, #8
 800572c:	b29b      	uxth	r3, r3
 800572e:	b2da      	uxtb	r2, r3
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005738:	6a39      	ldr	r1, [r7, #32]
 800573a:	68f8      	ldr	r0, [r7, #12]
 800573c:	f000 f982 	bl	8005a44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005740:	4603      	mov	r3, r0
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00d      	beq.n	8005762 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800574a:	2b04      	cmp	r3, #4
 800574c:	d107      	bne.n	800575e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681a      	ldr	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800575c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800575e:	2301      	movs	r3, #1
 8005760:	e050      	b.n	8005804 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005762:	893b      	ldrh	r3, [r7, #8]
 8005764:	b2da      	uxtb	r2, r3
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800576c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800576e:	6a39      	ldr	r1, [r7, #32]
 8005770:	68f8      	ldr	r0, [r7, #12]
 8005772:	f000 f967 	bl	8005a44 <I2C_WaitOnTXEFlagUntilTimeout>
 8005776:	4603      	mov	r3, r0
 8005778:	2b00      	cmp	r3, #0
 800577a:	d00d      	beq.n	8005798 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005780:	2b04      	cmp	r3, #4
 8005782:	d107      	bne.n	8005794 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005792:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e035      	b.n	8005804 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80057a6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057aa:	9300      	str	r3, [sp, #0]
 80057ac:	6a3b      	ldr	r3, [r7, #32]
 80057ae:	2200      	movs	r2, #0
 80057b0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80057b4:	68f8      	ldr	r0, [r7, #12]
 80057b6:	f000 f82b 	bl	8005810 <I2C_WaitOnFlagUntilTimeout>
 80057ba:	4603      	mov	r3, r0
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00d      	beq.n	80057dc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80057ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057ce:	d103      	bne.n	80057d8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057d6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80057d8:	2303      	movs	r3, #3
 80057da:	e013      	b.n	8005804 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80057dc:	897b      	ldrh	r3, [r7, #10]
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	f043 0301 	orr.w	r3, r3, #1
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057ee:	6a3a      	ldr	r2, [r7, #32]
 80057f0:	4906      	ldr	r1, [pc, #24]	@ (800580c <I2C_RequestMemoryRead+0x1cc>)
 80057f2:	68f8      	ldr	r0, [r7, #12]
 80057f4:	f000 f886 	bl	8005904 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057f8:	4603      	mov	r3, r0
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d001      	beq.n	8005802 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e000      	b.n	8005804 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005802:	2300      	movs	r3, #0
}
 8005804:	4618      	mov	r0, r3
 8005806:	3718      	adds	r7, #24
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}
 800580c:	00010002 	.word	0x00010002

08005810 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b084      	sub	sp, #16
 8005814:	af00      	add	r7, sp, #0
 8005816:	60f8      	str	r0, [r7, #12]
 8005818:	60b9      	str	r1, [r7, #8]
 800581a:	603b      	str	r3, [r7, #0]
 800581c:	4613      	mov	r3, r2
 800581e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005820:	e048      	b.n	80058b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005828:	d044      	beq.n	80058b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800582a:	f7fd fa65 	bl	8002cf8 <HAL_GetTick>
 800582e:	4602      	mov	r2, r0
 8005830:	69bb      	ldr	r3, [r7, #24]
 8005832:	1ad3      	subs	r3, r2, r3
 8005834:	683a      	ldr	r2, [r7, #0]
 8005836:	429a      	cmp	r2, r3
 8005838:	d302      	bcc.n	8005840 <I2C_WaitOnFlagUntilTimeout+0x30>
 800583a:	683b      	ldr	r3, [r7, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d139      	bne.n	80058b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005840:	68bb      	ldr	r3, [r7, #8]
 8005842:	0c1b      	lsrs	r3, r3, #16
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b01      	cmp	r3, #1
 8005848:	d10d      	bne.n	8005866 <I2C_WaitOnFlagUntilTimeout+0x56>
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	43da      	mvns	r2, r3
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	4013      	ands	r3, r2
 8005856:	b29b      	uxth	r3, r3
 8005858:	2b00      	cmp	r3, #0
 800585a:	bf0c      	ite	eq
 800585c:	2301      	moveq	r3, #1
 800585e:	2300      	movne	r3, #0
 8005860:	b2db      	uxtb	r3, r3
 8005862:	461a      	mov	r2, r3
 8005864:	e00c      	b.n	8005880 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	699b      	ldr	r3, [r3, #24]
 800586c:	43da      	mvns	r2, r3
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	4013      	ands	r3, r2
 8005872:	b29b      	uxth	r3, r3
 8005874:	2b00      	cmp	r3, #0
 8005876:	bf0c      	ite	eq
 8005878:	2301      	moveq	r3, #1
 800587a:	2300      	movne	r3, #0
 800587c:	b2db      	uxtb	r3, r3
 800587e:	461a      	mov	r2, r3
 8005880:	79fb      	ldrb	r3, [r7, #7]
 8005882:	429a      	cmp	r2, r3
 8005884:	d116      	bne.n	80058b4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2220      	movs	r2, #32
 8005890:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2200      	movs	r2, #0
 8005898:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800589c:	68fb      	ldr	r3, [r7, #12]
 800589e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058a0:	f043 0220 	orr.w	r2, r3, #32
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	2200      	movs	r2, #0
 80058ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80058b0:	2301      	movs	r3, #1
 80058b2:	e023      	b.n	80058fc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80058b4:	68bb      	ldr	r3, [r7, #8]
 80058b6:	0c1b      	lsrs	r3, r3, #16
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d10d      	bne.n	80058da <I2C_WaitOnFlagUntilTimeout+0xca>
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	695b      	ldr	r3, [r3, #20]
 80058c4:	43da      	mvns	r2, r3
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	4013      	ands	r3, r2
 80058ca:	b29b      	uxth	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	bf0c      	ite	eq
 80058d0:	2301      	moveq	r3, #1
 80058d2:	2300      	movne	r3, #0
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	461a      	mov	r2, r3
 80058d8:	e00c      	b.n	80058f4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80058da:	68fb      	ldr	r3, [r7, #12]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	43da      	mvns	r2, r3
 80058e2:	68bb      	ldr	r3, [r7, #8]
 80058e4:	4013      	ands	r3, r2
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	bf0c      	ite	eq
 80058ec:	2301      	moveq	r3, #1
 80058ee:	2300      	movne	r3, #0
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	461a      	mov	r2, r3
 80058f4:	79fb      	ldrb	r3, [r7, #7]
 80058f6:	429a      	cmp	r2, r3
 80058f8:	d093      	beq.n	8005822 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3710      	adds	r7, #16
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}

08005904 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005904:	b580      	push	{r7, lr}
 8005906:	b084      	sub	sp, #16
 8005908:	af00      	add	r7, sp, #0
 800590a:	60f8      	str	r0, [r7, #12]
 800590c:	60b9      	str	r1, [r7, #8]
 800590e:	607a      	str	r2, [r7, #4]
 8005910:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005912:	e071      	b.n	80059f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	695b      	ldr	r3, [r3, #20]
 800591a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800591e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005922:	d123      	bne.n	800596c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	681a      	ldr	r2, [r3, #0]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005932:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800593c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2200      	movs	r2, #0
 8005942:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2220      	movs	r2, #32
 8005948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	2200      	movs	r2, #0
 8005950:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005958:	f043 0204 	orr.w	r2, r3, #4
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	2200      	movs	r2, #0
 8005964:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005968:	2301      	movs	r3, #1
 800596a:	e067      	b.n	8005a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005972:	d041      	beq.n	80059f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005974:	f7fd f9c0 	bl	8002cf8 <HAL_GetTick>
 8005978:	4602      	mov	r2, r0
 800597a:	683b      	ldr	r3, [r7, #0]
 800597c:	1ad3      	subs	r3, r2, r3
 800597e:	687a      	ldr	r2, [r7, #4]
 8005980:	429a      	cmp	r2, r3
 8005982:	d302      	bcc.n	800598a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2b00      	cmp	r3, #0
 8005988:	d136      	bne.n	80059f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	0c1b      	lsrs	r3, r3, #16
 800598e:	b2db      	uxtb	r3, r3
 8005990:	2b01      	cmp	r3, #1
 8005992:	d10c      	bne.n	80059ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	43da      	mvns	r2, r3
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	4013      	ands	r3, r2
 80059a0:	b29b      	uxth	r3, r3
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	bf14      	ite	ne
 80059a6:	2301      	movne	r3, #1
 80059a8:	2300      	moveq	r3, #0
 80059aa:	b2db      	uxtb	r3, r3
 80059ac:	e00b      	b.n	80059c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	699b      	ldr	r3, [r3, #24]
 80059b4:	43da      	mvns	r2, r3
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	4013      	ands	r3, r2
 80059ba:	b29b      	uxth	r3, r3
 80059bc:	2b00      	cmp	r3, #0
 80059be:	bf14      	ite	ne
 80059c0:	2301      	movne	r3, #1
 80059c2:	2300      	moveq	r3, #0
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d016      	beq.n	80059f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2200      	movs	r2, #0
 80059ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	2200      	movs	r2, #0
 80059dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059e4:	f043 0220 	orr.w	r2, r3, #32
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80059f4:	2301      	movs	r3, #1
 80059f6:	e021      	b.n	8005a3c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	0c1b      	lsrs	r3, r3, #16
 80059fc:	b2db      	uxtb	r3, r3
 80059fe:	2b01      	cmp	r3, #1
 8005a00:	d10c      	bne.n	8005a1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	43da      	mvns	r2, r3
 8005a0a:	68bb      	ldr	r3, [r7, #8]
 8005a0c:	4013      	ands	r3, r2
 8005a0e:	b29b      	uxth	r3, r3
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	bf14      	ite	ne
 8005a14:	2301      	movne	r3, #1
 8005a16:	2300      	moveq	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	e00b      	b.n	8005a34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	43da      	mvns	r2, r3
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	4013      	ands	r3, r2
 8005a28:	b29b      	uxth	r3, r3
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	bf14      	ite	ne
 8005a2e:	2301      	movne	r3, #1
 8005a30:	2300      	moveq	r3, #0
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	f47f af6d 	bne.w	8005914 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8005a3a:	2300      	movs	r3, #0
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	3710      	adds	r7, #16
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd80      	pop	{r7, pc}

08005a44 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	60f8      	str	r0, [r7, #12]
 8005a4c:	60b9      	str	r1, [r7, #8]
 8005a4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005a50:	e034      	b.n	8005abc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f000 f8e3 	bl	8005c1e <I2C_IsAcknowledgeFailed>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d001      	beq.n	8005a62 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005a5e:	2301      	movs	r3, #1
 8005a60:	e034      	b.n	8005acc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a68:	d028      	beq.n	8005abc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a6a:	f7fd f945 	bl	8002cf8 <HAL_GetTick>
 8005a6e:	4602      	mov	r2, r0
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	68ba      	ldr	r2, [r7, #8]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d302      	bcc.n	8005a80 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d11d      	bne.n	8005abc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a8a:	2b80      	cmp	r3, #128	@ 0x80
 8005a8c:	d016      	beq.n	8005abc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	2200      	movs	r2, #0
 8005a92:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	2220      	movs	r2, #32
 8005a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa8:	f043 0220 	orr.w	r2, r3, #32
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e007      	b.n	8005acc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	695b      	ldr	r3, [r3, #20]
 8005ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ac6:	2b80      	cmp	r3, #128	@ 0x80
 8005ac8:	d1c3      	bne.n	8005a52 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005aca:	2300      	movs	r3, #0
}
 8005acc:	4618      	mov	r0, r3
 8005ace:	3710      	adds	r7, #16
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	60f8      	str	r0, [r7, #12]
 8005adc:	60b9      	str	r1, [r7, #8]
 8005ade:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ae0:	e034      	b.n	8005b4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ae2:	68f8      	ldr	r0, [r7, #12]
 8005ae4:	f000 f89b 	bl	8005c1e <I2C_IsAcknowledgeFailed>
 8005ae8:	4603      	mov	r3, r0
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d001      	beq.n	8005af2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e034      	b.n	8005b5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af8:	d028      	beq.n	8005b4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005afa:	f7fd f8fd 	bl	8002cf8 <HAL_GetTick>
 8005afe:	4602      	mov	r2, r0
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	1ad3      	subs	r3, r2, r3
 8005b04:	68ba      	ldr	r2, [r7, #8]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d302      	bcc.n	8005b10 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d11d      	bne.n	8005b4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	f003 0304 	and.w	r3, r3, #4
 8005b1a:	2b04      	cmp	r3, #4
 8005b1c:	d016      	beq.n	8005b4c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	2220      	movs	r2, #32
 8005b28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	2200      	movs	r2, #0
 8005b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b38:	f043 0220 	orr.w	r2, r3, #32
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2200      	movs	r2, #0
 8005b44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	e007      	b.n	8005b5c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	695b      	ldr	r3, [r3, #20]
 8005b52:	f003 0304 	and.w	r3, r3, #4
 8005b56:	2b04      	cmp	r3, #4
 8005b58:	d1c3      	bne.n	8005ae2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005b5a:	2300      	movs	r3, #0
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}

08005b64 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b64:	b580      	push	{r7, lr}
 8005b66:	b084      	sub	sp, #16
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005b70:	e049      	b.n	8005c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	f003 0310 	and.w	r3, r3, #16
 8005b7c:	2b10      	cmp	r3, #16
 8005b7e:	d119      	bne.n	8005bb4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0210 	mvn.w	r2, #16
 8005b88:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2220      	movs	r2, #32
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	2200      	movs	r2, #0
 8005bac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005bb0:	2301      	movs	r3, #1
 8005bb2:	e030      	b.n	8005c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005bb4:	f7fd f8a0 	bl	8002cf8 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	68ba      	ldr	r2, [r7, #8]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d302      	bcc.n	8005bca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005bc4:	68bb      	ldr	r3, [r7, #8]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d11d      	bne.n	8005c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005bd4:	2b40      	cmp	r3, #64	@ 0x40
 8005bd6:	d016      	beq.n	8005c06 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2220      	movs	r2, #32
 8005be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	2200      	movs	r2, #0
 8005bea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bf2:	f043 0220 	orr.w	r2, r3, #32
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005c02:	2301      	movs	r3, #1
 8005c04:	e007      	b.n	8005c16 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	695b      	ldr	r3, [r3, #20]
 8005c0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005c10:	2b40      	cmp	r3, #64	@ 0x40
 8005c12:	d1ae      	bne.n	8005b72 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005c14:	2300      	movs	r3, #0
}
 8005c16:	4618      	mov	r0, r3
 8005c18:	3710      	adds	r7, #16
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	bd80      	pop	{r7, pc}

08005c1e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005c1e:	b480      	push	{r7}
 8005c20:	b083      	sub	sp, #12
 8005c22:	af00      	add	r7, sp, #0
 8005c24:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	695b      	ldr	r3, [r3, #20]
 8005c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005c30:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005c34:	d11b      	bne.n	8005c6e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005c3e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2200      	movs	r2, #0
 8005c44:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2220      	movs	r2, #32
 8005c4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c5a:	f043 0204 	orr.w	r2, r3, #4
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005c6a:	2301      	movs	r3, #1
 8005c6c:	e000      	b.n	8005c70 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c6e:	2300      	movs	r3, #0
}
 8005c70:	4618      	mov	r0, r3
 8005c72:	370c      	adds	r7, #12
 8005c74:	46bd      	mov	sp, r7
 8005c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c7a:	4770      	bx	lr

08005c7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b086      	sub	sp, #24
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d101      	bne.n	8005c8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e318      	b.n	80062c0 <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	2b0f      	cmp	r3, #15
 8005c94:	d903      	bls.n	8005c9e <HAL_RCC_OscConfig+0x22>
 8005c96:	21e6      	movs	r1, #230	@ 0xe6
 8005c98:	4897      	ldr	r0, [pc, #604]	@ (8005ef8 <HAL_RCC_OscConfig+0x27c>)
 8005c9a:	f7fc fd05 	bl	80026a8 <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f003 0301 	and.w	r3, r3, #1
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f000 8088 	beq.w	8005dbc <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d00d      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x54>
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	685b      	ldr	r3, [r3, #4]
 8005cb8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cbc:	d008      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x54>
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005cc6:	d003      	beq.n	8005cd0 <HAL_RCC_OscConfig+0x54>
 8005cc8:	21eb      	movs	r1, #235	@ 0xeb
 8005cca:	488b      	ldr	r0, [pc, #556]	@ (8005ef8 <HAL_RCC_OscConfig+0x27c>)
 8005ccc:	f7fc fcec 	bl	80026a8 <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005cd0:	4b8a      	ldr	r3, [pc, #552]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005cd2:	689b      	ldr	r3, [r3, #8]
 8005cd4:	f003 030c 	and.w	r3, r3, #12
 8005cd8:	2b04      	cmp	r3, #4
 8005cda:	d00c      	beq.n	8005cf6 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cdc:	4b87      	ldr	r3, [pc, #540]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005ce4:	2b08      	cmp	r3, #8
 8005ce6:	d112      	bne.n	8005d0e <HAL_RCC_OscConfig+0x92>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ce8:	4b84      	ldr	r3, [pc, #528]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005cea:	685b      	ldr	r3, [r3, #4]
 8005cec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005cf0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005cf4:	d10b      	bne.n	8005d0e <HAL_RCC_OscConfig+0x92>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cf6:	4b81      	ldr	r3, [pc, #516]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d05b      	beq.n	8005dba <HAL_RCC_OscConfig+0x13e>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d157      	bne.n	8005dba <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e2d8      	b.n	80062c0 <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005d16:	d106      	bne.n	8005d26 <HAL_RCC_OscConfig+0xaa>
 8005d18:	4b78      	ldr	r3, [pc, #480]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4a77      	ldr	r2, [pc, #476]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005d1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	e01d      	b.n	8005d62 <HAL_RCC_OscConfig+0xe6>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	685b      	ldr	r3, [r3, #4]
 8005d2a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005d2e:	d10c      	bne.n	8005d4a <HAL_RCC_OscConfig+0xce>
 8005d30:	4b72      	ldr	r3, [pc, #456]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a71      	ldr	r2, [pc, #452]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005d36:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005d3a:	6013      	str	r3, [r2, #0]
 8005d3c:	4b6f      	ldr	r3, [pc, #444]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	4a6e      	ldr	r2, [pc, #440]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005d42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005d46:	6013      	str	r3, [r2, #0]
 8005d48:	e00b      	b.n	8005d62 <HAL_RCC_OscConfig+0xe6>
 8005d4a:	4b6c      	ldr	r3, [pc, #432]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	4a6b      	ldr	r2, [pc, #428]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005d50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d54:	6013      	str	r3, [r2, #0]
 8005d56:	4b69      	ldr	r3, [pc, #420]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a68      	ldr	r2, [pc, #416]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005d5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005d60:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	685b      	ldr	r3, [r3, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d013      	beq.n	8005d92 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d6a:	f7fc ffc5 	bl	8002cf8 <HAL_GetTick>
 8005d6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d70:	e008      	b.n	8005d84 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d72:	f7fc ffc1 	bl	8002cf8 <HAL_GetTick>
 8005d76:	4602      	mov	r2, r0
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	1ad3      	subs	r3, r2, r3
 8005d7c:	2b64      	cmp	r3, #100	@ 0x64
 8005d7e:	d901      	bls.n	8005d84 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005d80:	2303      	movs	r3, #3
 8005d82:	e29d      	b.n	80062c0 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d84:	4b5d      	ldr	r3, [pc, #372]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d0f0      	beq.n	8005d72 <HAL_RCC_OscConfig+0xf6>
 8005d90:	e014      	b.n	8005dbc <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d92:	f7fc ffb1 	bl	8002cf8 <HAL_GetTick>
 8005d96:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d98:	e008      	b.n	8005dac <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d9a:	f7fc ffad 	bl	8002cf8 <HAL_GetTick>
 8005d9e:	4602      	mov	r2, r0
 8005da0:	693b      	ldr	r3, [r7, #16]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	2b64      	cmp	r3, #100	@ 0x64
 8005da6:	d901      	bls.n	8005dac <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 8005da8:	2303      	movs	r3, #3
 8005daa:	e289      	b.n	80062c0 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005dac:	4b53      	ldr	r3, [pc, #332]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d1f0      	bne.n	8005d9a <HAL_RCC_OscConfig+0x11e>
 8005db8:	e000      	b.n	8005dbc <HAL_RCC_OscConfig+0x140>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005dba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	f003 0302 	and.w	r3, r3, #2
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d079      	beq.n	8005ebc <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	68db      	ldr	r3, [r3, #12]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d008      	beq.n	8005de2 <HAL_RCC_OscConfig+0x166>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d004      	beq.n	8005de2 <HAL_RCC_OscConfig+0x166>
 8005dd8:	f240 111d 	movw	r1, #285	@ 0x11d
 8005ddc:	4846      	ldr	r0, [pc, #280]	@ (8005ef8 <HAL_RCC_OscConfig+0x27c>)
 8005dde:	f7fc fc63 	bl	80026a8 <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	691b      	ldr	r3, [r3, #16]
 8005de6:	2b1f      	cmp	r3, #31
 8005de8:	d904      	bls.n	8005df4 <HAL_RCC_OscConfig+0x178>
 8005dea:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8005dee:	4842      	ldr	r0, [pc, #264]	@ (8005ef8 <HAL_RCC_OscConfig+0x27c>)
 8005df0:	f7fc fc5a 	bl	80026a8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005df4:	4b41      	ldr	r3, [pc, #260]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f003 030c 	and.w	r3, r3, #12
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00b      	beq.n	8005e18 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e00:	4b3e      	ldr	r3, [pc, #248]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d11c      	bne.n	8005e46 <HAL_RCC_OscConfig+0x1ca>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d116      	bne.n	8005e46 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e18:	4b38      	ldr	r3, [pc, #224]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f003 0302 	and.w	r3, r3, #2
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d005      	beq.n	8005e30 <HAL_RCC_OscConfig+0x1b4>
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	68db      	ldr	r3, [r3, #12]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d001      	beq.n	8005e30 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 8005e2c:	2301      	movs	r3, #1
 8005e2e:	e247      	b.n	80062c0 <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e30:	4b32      	ldr	r3, [pc, #200]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	691b      	ldr	r3, [r3, #16]
 8005e3c:	00db      	lsls	r3, r3, #3
 8005e3e:	492f      	ldr	r1, [pc, #188]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005e40:	4313      	orrs	r3, r2
 8005e42:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e44:	e03a      	b.n	8005ebc <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d020      	beq.n	8005e90 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e4e:	4b2c      	ldr	r3, [pc, #176]	@ (8005f00 <HAL_RCC_OscConfig+0x284>)
 8005e50:	2201      	movs	r2, #1
 8005e52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e54:	f7fc ff50 	bl	8002cf8 <HAL_GetTick>
 8005e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e5a:	e008      	b.n	8005e6e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e5c:	f7fc ff4c 	bl	8002cf8 <HAL_GetTick>
 8005e60:	4602      	mov	r2, r0
 8005e62:	693b      	ldr	r3, [r7, #16]
 8005e64:	1ad3      	subs	r3, r2, r3
 8005e66:	2b02      	cmp	r3, #2
 8005e68:	d901      	bls.n	8005e6e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005e6a:	2303      	movs	r3, #3
 8005e6c:	e228      	b.n	80062c0 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e6e:	4b23      	ldr	r3, [pc, #140]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f003 0302 	and.w	r3, r3, #2
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d0f0      	beq.n	8005e5c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e7a:	4b20      	ldr	r3, [pc, #128]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	691b      	ldr	r3, [r3, #16]
 8005e86:	00db      	lsls	r3, r3, #3
 8005e88:	491c      	ldr	r1, [pc, #112]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	600b      	str	r3, [r1, #0]
 8005e8e:	e015      	b.n	8005ebc <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e90:	4b1b      	ldr	r3, [pc, #108]	@ (8005f00 <HAL_RCC_OscConfig+0x284>)
 8005e92:	2200      	movs	r2, #0
 8005e94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e96:	f7fc ff2f 	bl	8002cf8 <HAL_GetTick>
 8005e9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e9c:	e008      	b.n	8005eb0 <HAL_RCC_OscConfig+0x234>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005e9e:	f7fc ff2b 	bl	8002cf8 <HAL_GetTick>
 8005ea2:	4602      	mov	r2, r0
 8005ea4:	693b      	ldr	r3, [r7, #16]
 8005ea6:	1ad3      	subs	r3, r2, r3
 8005ea8:	2b02      	cmp	r3, #2
 8005eaa:	d901      	bls.n	8005eb0 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 8005eac:	2303      	movs	r3, #3
 8005eae:	e207      	b.n	80062c0 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005eb0:	4b12      	ldr	r3, [pc, #72]	@ (8005efc <HAL_RCC_OscConfig+0x280>)
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f003 0302 	and.w	r3, r3, #2
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d1f0      	bne.n	8005e9e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f003 0308 	and.w	r3, r3, #8
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d045      	beq.n	8005f54 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	695b      	ldr	r3, [r3, #20]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d008      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x266>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	695b      	ldr	r3, [r3, #20]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d004      	beq.n	8005ee2 <HAL_RCC_OscConfig+0x266>
 8005ed8:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 8005edc:	4806      	ldr	r0, [pc, #24]	@ (8005ef8 <HAL_RCC_OscConfig+0x27c>)
 8005ede:	f7fc fbe3 	bl	80026a8 <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d01e      	beq.n	8005f28 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005eea:	4b06      	ldr	r3, [pc, #24]	@ (8005f04 <HAL_RCC_OscConfig+0x288>)
 8005eec:	2201      	movs	r2, #1
 8005eee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ef0:	f7fc ff02 	bl	8002cf8 <HAL_GetTick>
 8005ef4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ef6:	e010      	b.n	8005f1a <HAL_RCC_OscConfig+0x29e>
 8005ef8:	0800f9a4 	.word	0x0800f9a4
 8005efc:	40023800 	.word	0x40023800
 8005f00:	42470000 	.word	0x42470000
 8005f04:	42470e80 	.word	0x42470e80
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f08:	f7fc fef6 	bl	8002cf8 <HAL_GetTick>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	2b02      	cmp	r3, #2
 8005f14:	d901      	bls.n	8005f1a <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8005f16:	2303      	movs	r3, #3
 8005f18:	e1d2      	b.n	80062c0 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005f1a:	4b5e      	ldr	r3, [pc, #376]	@ (8006094 <HAL_RCC_OscConfig+0x418>)
 8005f1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f1e:	f003 0302 	and.w	r3, r3, #2
 8005f22:	2b00      	cmp	r3, #0
 8005f24:	d0f0      	beq.n	8005f08 <HAL_RCC_OscConfig+0x28c>
 8005f26:	e015      	b.n	8005f54 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005f28:	4b5b      	ldr	r3, [pc, #364]	@ (8006098 <HAL_RCC_OscConfig+0x41c>)
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005f2e:	f7fc fee3 	bl	8002cf8 <HAL_GetTick>
 8005f32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f34:	e008      	b.n	8005f48 <HAL_RCC_OscConfig+0x2cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005f36:	f7fc fedf 	bl	8002cf8 <HAL_GetTick>
 8005f3a:	4602      	mov	r2, r0
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	2b02      	cmp	r3, #2
 8005f42:	d901      	bls.n	8005f48 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e1bb      	b.n	80062c0 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005f48:	4b52      	ldr	r3, [pc, #328]	@ (8006094 <HAL_RCC_OscConfig+0x418>)
 8005f4a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d1f0      	bne.n	8005f36 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	f000 80b0 	beq.w	80060c2 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f62:	2300      	movs	r3, #0
 8005f64:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	689b      	ldr	r3, [r3, #8]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d00c      	beq.n	8005f88 <HAL_RCC_OscConfig+0x30c>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d008      	beq.n	8005f88 <HAL_RCC_OscConfig+0x30c>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	689b      	ldr	r3, [r3, #8]
 8005f7a:	2b05      	cmp	r3, #5
 8005f7c:	d004      	beq.n	8005f88 <HAL_RCC_OscConfig+0x30c>
 8005f7e:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8005f82:	4846      	ldr	r0, [pc, #280]	@ (800609c <HAL_RCC_OscConfig+0x420>)
 8005f84:	f7fc fb90 	bl	80026a8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f88:	4b42      	ldr	r3, [pc, #264]	@ (8006094 <HAL_RCC_OscConfig+0x418>)
 8005f8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d10f      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f94:	2300      	movs	r3, #0
 8005f96:	60bb      	str	r3, [r7, #8]
 8005f98:	4b3e      	ldr	r3, [pc, #248]	@ (8006094 <HAL_RCC_OscConfig+0x418>)
 8005f9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f9c:	4a3d      	ldr	r2, [pc, #244]	@ (8006094 <HAL_RCC_OscConfig+0x418>)
 8005f9e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005fa2:	6413      	str	r3, [r2, #64]	@ 0x40
 8005fa4:	4b3b      	ldr	r3, [pc, #236]	@ (8006094 <HAL_RCC_OscConfig+0x418>)
 8005fa6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fa8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005fac:	60bb      	str	r3, [r7, #8]
 8005fae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fb4:	4b3a      	ldr	r3, [pc, #232]	@ (80060a0 <HAL_RCC_OscConfig+0x424>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d118      	bne.n	8005ff2 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005fc0:	4b37      	ldr	r3, [pc, #220]	@ (80060a0 <HAL_RCC_OscConfig+0x424>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	4a36      	ldr	r2, [pc, #216]	@ (80060a0 <HAL_RCC_OscConfig+0x424>)
 8005fc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005fca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005fcc:	f7fc fe94 	bl	8002cf8 <HAL_GetTick>
 8005fd0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fd2:	e008      	b.n	8005fe6 <HAL_RCC_OscConfig+0x36a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fd4:	f7fc fe90 	bl	8002cf8 <HAL_GetTick>
 8005fd8:	4602      	mov	r2, r0
 8005fda:	693b      	ldr	r3, [r7, #16]
 8005fdc:	1ad3      	subs	r3, r2, r3
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d901      	bls.n	8005fe6 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 8005fe2:	2303      	movs	r3, #3
 8005fe4:	e16c      	b.n	80062c0 <HAL_RCC_OscConfig+0x644>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005fe6:	4b2e      	ldr	r3, [pc, #184]	@ (80060a0 <HAL_RCC_OscConfig+0x424>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d0f0      	beq.n	8005fd4 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d106      	bne.n	8006008 <HAL_RCC_OscConfig+0x38c>
 8005ffa:	4b26      	ldr	r3, [pc, #152]	@ (8006094 <HAL_RCC_OscConfig+0x418>)
 8005ffc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ffe:	4a25      	ldr	r2, [pc, #148]	@ (8006094 <HAL_RCC_OscConfig+0x418>)
 8006000:	f043 0301 	orr.w	r3, r3, #1
 8006004:	6713      	str	r3, [r2, #112]	@ 0x70
 8006006:	e01c      	b.n	8006042 <HAL_RCC_OscConfig+0x3c6>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	2b05      	cmp	r3, #5
 800600e:	d10c      	bne.n	800602a <HAL_RCC_OscConfig+0x3ae>
 8006010:	4b20      	ldr	r3, [pc, #128]	@ (8006094 <HAL_RCC_OscConfig+0x418>)
 8006012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006014:	4a1f      	ldr	r2, [pc, #124]	@ (8006094 <HAL_RCC_OscConfig+0x418>)
 8006016:	f043 0304 	orr.w	r3, r3, #4
 800601a:	6713      	str	r3, [r2, #112]	@ 0x70
 800601c:	4b1d      	ldr	r3, [pc, #116]	@ (8006094 <HAL_RCC_OscConfig+0x418>)
 800601e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006020:	4a1c      	ldr	r2, [pc, #112]	@ (8006094 <HAL_RCC_OscConfig+0x418>)
 8006022:	f043 0301 	orr.w	r3, r3, #1
 8006026:	6713      	str	r3, [r2, #112]	@ 0x70
 8006028:	e00b      	b.n	8006042 <HAL_RCC_OscConfig+0x3c6>
 800602a:	4b1a      	ldr	r3, [pc, #104]	@ (8006094 <HAL_RCC_OscConfig+0x418>)
 800602c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800602e:	4a19      	ldr	r2, [pc, #100]	@ (8006094 <HAL_RCC_OscConfig+0x418>)
 8006030:	f023 0301 	bic.w	r3, r3, #1
 8006034:	6713      	str	r3, [r2, #112]	@ 0x70
 8006036:	4b17      	ldr	r3, [pc, #92]	@ (8006094 <HAL_RCC_OscConfig+0x418>)
 8006038:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800603a:	4a16      	ldr	r2, [pc, #88]	@ (8006094 <HAL_RCC_OscConfig+0x418>)
 800603c:	f023 0304 	bic.w	r3, r3, #4
 8006040:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	689b      	ldr	r3, [r3, #8]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d015      	beq.n	8006076 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800604a:	f7fc fe55 	bl	8002cf8 <HAL_GetTick>
 800604e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006050:	e00a      	b.n	8006068 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006052:	f7fc fe51 	bl	8002cf8 <HAL_GetTick>
 8006056:	4602      	mov	r2, r0
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	1ad3      	subs	r3, r2, r3
 800605c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006060:	4293      	cmp	r3, r2
 8006062:	d901      	bls.n	8006068 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e12b      	b.n	80062c0 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006068:	4b0a      	ldr	r3, [pc, #40]	@ (8006094 <HAL_RCC_OscConfig+0x418>)
 800606a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800606c:	f003 0302 	and.w	r3, r3, #2
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0ee      	beq.n	8006052 <HAL_RCC_OscConfig+0x3d6>
 8006074:	e01c      	b.n	80060b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006076:	f7fc fe3f 	bl	8002cf8 <HAL_GetTick>
 800607a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800607c:	e012      	b.n	80060a4 <HAL_RCC_OscConfig+0x428>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800607e:	f7fc fe3b 	bl	8002cf8 <HAL_GetTick>
 8006082:	4602      	mov	r2, r0
 8006084:	693b      	ldr	r3, [r7, #16]
 8006086:	1ad3      	subs	r3, r2, r3
 8006088:	f241 3288 	movw	r2, #5000	@ 0x1388
 800608c:	4293      	cmp	r3, r2
 800608e:	d909      	bls.n	80060a4 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8006090:	2303      	movs	r3, #3
 8006092:	e115      	b.n	80062c0 <HAL_RCC_OscConfig+0x644>
 8006094:	40023800 	.word	0x40023800
 8006098:	42470e80 	.word	0x42470e80
 800609c:	0800f9a4 	.word	0x0800f9a4
 80060a0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80060a4:	4b88      	ldr	r3, [pc, #544]	@ (80062c8 <HAL_RCC_OscConfig+0x64c>)
 80060a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060a8:	f003 0302 	and.w	r3, r3, #2
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d1e6      	bne.n	800607e <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80060b0:	7dfb      	ldrb	r3, [r7, #23]
 80060b2:	2b01      	cmp	r3, #1
 80060b4:	d105      	bne.n	80060c2 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80060b6:	4b84      	ldr	r3, [pc, #528]	@ (80062c8 <HAL_RCC_OscConfig+0x64c>)
 80060b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ba:	4a83      	ldr	r2, [pc, #524]	@ (80062c8 <HAL_RCC_OscConfig+0x64c>)
 80060bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80060c0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d00c      	beq.n	80060e4 <HAL_RCC_OscConfig+0x468>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	699b      	ldr	r3, [r3, #24]
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d008      	beq.n	80060e4 <HAL_RCC_OscConfig+0x468>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	699b      	ldr	r3, [r3, #24]
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d004      	beq.n	80060e4 <HAL_RCC_OscConfig+0x468>
 80060da:	f240 11cd 	movw	r1, #461	@ 0x1cd
 80060de:	487b      	ldr	r0, [pc, #492]	@ (80062cc <HAL_RCC_OscConfig+0x650>)
 80060e0:	f7fc fae2 	bl	80026a8 <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	699b      	ldr	r3, [r3, #24]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	f000 80e8 	beq.w	80062be <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80060ee:	4b76      	ldr	r3, [pc, #472]	@ (80062c8 <HAL_RCC_OscConfig+0x64c>)
 80060f0:	689b      	ldr	r3, [r3, #8]
 80060f2:	f003 030c 	and.w	r3, r3, #12
 80060f6:	2b08      	cmp	r3, #8
 80060f8:	f000 80a9 	beq.w	800624e <HAL_RCC_OscConfig+0x5d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	2b02      	cmp	r3, #2
 8006102:	f040 808d 	bne.w	8006220 <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	69db      	ldr	r3, [r3, #28]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d009      	beq.n	8006122 <HAL_RCC_OscConfig+0x4a6>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	69db      	ldr	r3, [r3, #28]
 8006112:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006116:	d004      	beq.n	8006122 <HAL_RCC_OscConfig+0x4a6>
 8006118:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 800611c:	486b      	ldr	r0, [pc, #428]	@ (80062cc <HAL_RCC_OscConfig+0x650>)
 800611e:	f7fc fac3 	bl	80026a8 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	6a1b      	ldr	r3, [r3, #32]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d903      	bls.n	8006132 <HAL_RCC_OscConfig+0x4b6>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a1b      	ldr	r3, [r3, #32]
 800612e:	2b3f      	cmp	r3, #63	@ 0x3f
 8006130:	d904      	bls.n	800613c <HAL_RCC_OscConfig+0x4c0>
 8006132:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8006136:	4865      	ldr	r0, [pc, #404]	@ (80062cc <HAL_RCC_OscConfig+0x650>)
 8006138:	f7fc fab6 	bl	80026a8 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006140:	2b31      	cmp	r3, #49	@ 0x31
 8006142:	d904      	bls.n	800614e <HAL_RCC_OscConfig+0x4d2>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006148:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 800614c:	d904      	bls.n	8006158 <HAL_RCC_OscConfig+0x4dc>
 800614e:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8006152:	485e      	ldr	r0, [pc, #376]	@ (80062cc <HAL_RCC_OscConfig+0x650>)
 8006154:	f7fc faa8 	bl	80026a8 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800615c:	2b02      	cmp	r3, #2
 800615e:	d010      	beq.n	8006182 <HAL_RCC_OscConfig+0x506>
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006164:	2b04      	cmp	r3, #4
 8006166:	d00c      	beq.n	8006182 <HAL_RCC_OscConfig+0x506>
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800616c:	2b06      	cmp	r3, #6
 800616e:	d008      	beq.n	8006182 <HAL_RCC_OscConfig+0x506>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006174:	2b08      	cmp	r3, #8
 8006176:	d004      	beq.n	8006182 <HAL_RCC_OscConfig+0x506>
 8006178:	f240 11d9 	movw	r1, #473	@ 0x1d9
 800617c:	4853      	ldr	r0, [pc, #332]	@ (80062cc <HAL_RCC_OscConfig+0x650>)
 800617e:	f7fc fa93 	bl	80026a8 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006186:	2b01      	cmp	r3, #1
 8006188:	d903      	bls.n	8006192 <HAL_RCC_OscConfig+0x516>
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800618e:	2b0f      	cmp	r3, #15
 8006190:	d904      	bls.n	800619c <HAL_RCC_OscConfig+0x520>
 8006192:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 8006196:	484d      	ldr	r0, [pc, #308]	@ (80062cc <HAL_RCC_OscConfig+0x650>)
 8006198:	f7fc fa86 	bl	80026a8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800619c:	4b4c      	ldr	r3, [pc, #304]	@ (80062d0 <HAL_RCC_OscConfig+0x654>)
 800619e:	2200      	movs	r2, #0
 80061a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061a2:	f7fc fda9 	bl	8002cf8 <HAL_GetTick>
 80061a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061a8:	e008      	b.n	80061bc <HAL_RCC_OscConfig+0x540>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061aa:	f7fc fda5 	bl	8002cf8 <HAL_GetTick>
 80061ae:	4602      	mov	r2, r0
 80061b0:	693b      	ldr	r3, [r7, #16]
 80061b2:	1ad3      	subs	r3, r2, r3
 80061b4:	2b02      	cmp	r3, #2
 80061b6:	d901      	bls.n	80061bc <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e081      	b.n	80062c0 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061bc:	4b42      	ldr	r3, [pc, #264]	@ (80062c8 <HAL_RCC_OscConfig+0x64c>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d1f0      	bne.n	80061aa <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	69da      	ldr	r2, [r3, #28]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6a1b      	ldr	r3, [r3, #32]
 80061d0:	431a      	orrs	r2, r3
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061d6:	019b      	lsls	r3, r3, #6
 80061d8:	431a      	orrs	r2, r3
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061de:	085b      	lsrs	r3, r3, #1
 80061e0:	3b01      	subs	r3, #1
 80061e2:	041b      	lsls	r3, r3, #16
 80061e4:	431a      	orrs	r2, r3
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ea:	061b      	lsls	r3, r3, #24
 80061ec:	4936      	ldr	r1, [pc, #216]	@ (80062c8 <HAL_RCC_OscConfig+0x64c>)
 80061ee:	4313      	orrs	r3, r2
 80061f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061f2:	4b37      	ldr	r3, [pc, #220]	@ (80062d0 <HAL_RCC_OscConfig+0x654>)
 80061f4:	2201      	movs	r2, #1
 80061f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061f8:	f7fc fd7e 	bl	8002cf8 <HAL_GetTick>
 80061fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80061fe:	e008      	b.n	8006212 <HAL_RCC_OscConfig+0x596>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006200:	f7fc fd7a 	bl	8002cf8 <HAL_GetTick>
 8006204:	4602      	mov	r2, r0
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	1ad3      	subs	r3, r2, r3
 800620a:	2b02      	cmp	r3, #2
 800620c:	d901      	bls.n	8006212 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800620e:	2303      	movs	r3, #3
 8006210:	e056      	b.n	80062c0 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006212:	4b2d      	ldr	r3, [pc, #180]	@ (80062c8 <HAL_RCC_OscConfig+0x64c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d0f0      	beq.n	8006200 <HAL_RCC_OscConfig+0x584>
 800621e:	e04e      	b.n	80062be <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006220:	4b2b      	ldr	r3, [pc, #172]	@ (80062d0 <HAL_RCC_OscConfig+0x654>)
 8006222:	2200      	movs	r2, #0
 8006224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006226:	f7fc fd67 	bl	8002cf8 <HAL_GetTick>
 800622a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800622c:	e008      	b.n	8006240 <HAL_RCC_OscConfig+0x5c4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800622e:	f7fc fd63 	bl	8002cf8 <HAL_GetTick>
 8006232:	4602      	mov	r2, r0
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	1ad3      	subs	r3, r2, r3
 8006238:	2b02      	cmp	r3, #2
 800623a:	d901      	bls.n	8006240 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800623c:	2303      	movs	r3, #3
 800623e:	e03f      	b.n	80062c0 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006240:	4b21      	ldr	r3, [pc, #132]	@ (80062c8 <HAL_RCC_OscConfig+0x64c>)
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006248:	2b00      	cmp	r3, #0
 800624a:	d1f0      	bne.n	800622e <HAL_RCC_OscConfig+0x5b2>
 800624c:	e037      	b.n	80062be <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	699b      	ldr	r3, [r3, #24]
 8006252:	2b01      	cmp	r3, #1
 8006254:	d101      	bne.n	800625a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	e032      	b.n	80062c0 <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800625a:	4b1b      	ldr	r3, [pc, #108]	@ (80062c8 <HAL_RCC_OscConfig+0x64c>)
 800625c:	685b      	ldr	r3, [r3, #4]
 800625e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	699b      	ldr	r3, [r3, #24]
 8006264:	2b01      	cmp	r3, #1
 8006266:	d028      	beq.n	80062ba <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006272:	429a      	cmp	r2, r3
 8006274:	d121      	bne.n	80062ba <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006280:	429a      	cmp	r2, r3
 8006282:	d11a      	bne.n	80062ba <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006284:	68fa      	ldr	r2, [r7, #12]
 8006286:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800628a:	4013      	ands	r3, r2
 800628c:	687a      	ldr	r2, [r7, #4]
 800628e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006290:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006292:	4293      	cmp	r3, r2
 8006294:	d111      	bne.n	80062ba <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062a0:	085b      	lsrs	r3, r3, #1
 80062a2:	3b01      	subs	r3, #1
 80062a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062a6:	429a      	cmp	r2, r3
 80062a8:	d107      	bne.n	80062ba <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d001      	beq.n	80062be <HAL_RCC_OscConfig+0x642>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e000      	b.n	80062c0 <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 80062be:	2300      	movs	r3, #0
}
 80062c0:	4618      	mov	r0, r3
 80062c2:	3718      	adds	r7, #24
 80062c4:	46bd      	mov	sp, r7
 80062c6:	bd80      	pop	{r7, pc}
 80062c8:	40023800 	.word	0x40023800
 80062cc:	0800f9a4 	.word	0x0800f9a4
 80062d0:	42470060 	.word	0x42470060

080062d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d101      	bne.n	80062e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e174      	b.n	80065d2 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d003      	beq.n	80062f8 <HAL_RCC_ClockConfig+0x24>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b0f      	cmp	r3, #15
 80062f6:	d904      	bls.n	8006302 <HAL_RCC_ClockConfig+0x2e>
 80062f8:	f240 215a 	movw	r1, #602	@ 0x25a
 80062fc:	487b      	ldr	r0, [pc, #492]	@ (80064ec <HAL_RCC_ClockConfig+0x218>)
 80062fe:	f7fc f9d3 	bl	80026a8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8006302:	683b      	ldr	r3, [r7, #0]
 8006304:	2b00      	cmp	r3, #0
 8006306:	d019      	beq.n	800633c <HAL_RCC_ClockConfig+0x68>
 8006308:	683b      	ldr	r3, [r7, #0]
 800630a:	2b01      	cmp	r3, #1
 800630c:	d016      	beq.n	800633c <HAL_RCC_ClockConfig+0x68>
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	2b02      	cmp	r3, #2
 8006312:	d013      	beq.n	800633c <HAL_RCC_ClockConfig+0x68>
 8006314:	683b      	ldr	r3, [r7, #0]
 8006316:	2b03      	cmp	r3, #3
 8006318:	d010      	beq.n	800633c <HAL_RCC_ClockConfig+0x68>
 800631a:	683b      	ldr	r3, [r7, #0]
 800631c:	2b04      	cmp	r3, #4
 800631e:	d00d      	beq.n	800633c <HAL_RCC_ClockConfig+0x68>
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	2b05      	cmp	r3, #5
 8006324:	d00a      	beq.n	800633c <HAL_RCC_ClockConfig+0x68>
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	2b06      	cmp	r3, #6
 800632a:	d007      	beq.n	800633c <HAL_RCC_ClockConfig+0x68>
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	2b07      	cmp	r3, #7
 8006330:	d004      	beq.n	800633c <HAL_RCC_ClockConfig+0x68>
 8006332:	f240 215b 	movw	r1, #603	@ 0x25b
 8006336:	486d      	ldr	r0, [pc, #436]	@ (80064ec <HAL_RCC_ClockConfig+0x218>)
 8006338:	f7fc f9b6 	bl	80026a8 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800633c:	4b6c      	ldr	r3, [pc, #432]	@ (80064f0 <HAL_RCC_ClockConfig+0x21c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f003 0307 	and.w	r3, r3, #7
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	d90c      	bls.n	8006364 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800634a:	4b69      	ldr	r3, [pc, #420]	@ (80064f0 <HAL_RCC_ClockConfig+0x21c>)
 800634c:	683a      	ldr	r2, [r7, #0]
 800634e:	b2d2      	uxtb	r2, r2
 8006350:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006352:	4b67      	ldr	r3, [pc, #412]	@ (80064f0 <HAL_RCC_ClockConfig+0x21c>)
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	f003 0307 	and.w	r3, r3, #7
 800635a:	683a      	ldr	r2, [r7, #0]
 800635c:	429a      	cmp	r2, r3
 800635e:	d001      	beq.n	8006364 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8006360:	2301      	movs	r3, #1
 8006362:	e136      	b.n	80065d2 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d049      	beq.n	8006404 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f003 0304 	and.w	r3, r3, #4
 8006378:	2b00      	cmp	r3, #0
 800637a:	d005      	beq.n	8006388 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800637c:	4b5d      	ldr	r3, [pc, #372]	@ (80064f4 <HAL_RCC_ClockConfig+0x220>)
 800637e:	689b      	ldr	r3, [r3, #8]
 8006380:	4a5c      	ldr	r2, [pc, #368]	@ (80064f4 <HAL_RCC_ClockConfig+0x220>)
 8006382:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006386:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f003 0308 	and.w	r3, r3, #8
 8006390:	2b00      	cmp	r3, #0
 8006392:	d005      	beq.n	80063a0 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006394:	4b57      	ldr	r3, [pc, #348]	@ (80064f4 <HAL_RCC_ClockConfig+0x220>)
 8006396:	689b      	ldr	r3, [r3, #8]
 8006398:	4a56      	ldr	r2, [pc, #344]	@ (80064f4 <HAL_RCC_ClockConfig+0x220>)
 800639a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800639e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	2b00      	cmp	r3, #0
 80063a6:	d024      	beq.n	80063f2 <HAL_RCC_ClockConfig+0x11e>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	689b      	ldr	r3, [r3, #8]
 80063ac:	2b80      	cmp	r3, #128	@ 0x80
 80063ae:	d020      	beq.n	80063f2 <HAL_RCC_ClockConfig+0x11e>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	689b      	ldr	r3, [r3, #8]
 80063b4:	2b90      	cmp	r3, #144	@ 0x90
 80063b6:	d01c      	beq.n	80063f2 <HAL_RCC_ClockConfig+0x11e>
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	689b      	ldr	r3, [r3, #8]
 80063bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80063be:	d018      	beq.n	80063f2 <HAL_RCC_ClockConfig+0x11e>
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	2bb0      	cmp	r3, #176	@ 0xb0
 80063c6:	d014      	beq.n	80063f2 <HAL_RCC_ClockConfig+0x11e>
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	689b      	ldr	r3, [r3, #8]
 80063cc:	2bc0      	cmp	r3, #192	@ 0xc0
 80063ce:	d010      	beq.n	80063f2 <HAL_RCC_ClockConfig+0x11e>
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	2bd0      	cmp	r3, #208	@ 0xd0
 80063d6:	d00c      	beq.n	80063f2 <HAL_RCC_ClockConfig+0x11e>
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	2be0      	cmp	r3, #224	@ 0xe0
 80063de:	d008      	beq.n	80063f2 <HAL_RCC_ClockConfig+0x11e>
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	689b      	ldr	r3, [r3, #8]
 80063e4:	2bf0      	cmp	r3, #240	@ 0xf0
 80063e6:	d004      	beq.n	80063f2 <HAL_RCC_ClockConfig+0x11e>
 80063e8:	f240 217e 	movw	r1, #638	@ 0x27e
 80063ec:	483f      	ldr	r0, [pc, #252]	@ (80064ec <HAL_RCC_ClockConfig+0x218>)
 80063ee:	f7fc f95b 	bl	80026a8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80063f2:	4b40      	ldr	r3, [pc, #256]	@ (80064f4 <HAL_RCC_ClockConfig+0x220>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	689b      	ldr	r3, [r3, #8]
 80063fe:	493d      	ldr	r1, [pc, #244]	@ (80064f4 <HAL_RCC_ClockConfig+0x220>)
 8006400:	4313      	orrs	r3, r2
 8006402:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0301 	and.w	r3, r3, #1
 800640c:	2b00      	cmp	r3, #0
 800640e:	d059      	beq.n	80064c4 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	685b      	ldr	r3, [r3, #4]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d010      	beq.n	800643a <HAL_RCC_ClockConfig+0x166>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	685b      	ldr	r3, [r3, #4]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d00c      	beq.n	800643a <HAL_RCC_ClockConfig+0x166>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	685b      	ldr	r3, [r3, #4]
 8006424:	2b02      	cmp	r3, #2
 8006426:	d008      	beq.n	800643a <HAL_RCC_ClockConfig+0x166>
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	685b      	ldr	r3, [r3, #4]
 800642c:	2b03      	cmp	r3, #3
 800642e:	d004      	beq.n	800643a <HAL_RCC_ClockConfig+0x166>
 8006430:	f240 2185 	movw	r1, #645	@ 0x285
 8006434:	482d      	ldr	r0, [pc, #180]	@ (80064ec <HAL_RCC_ClockConfig+0x218>)
 8006436:	f7fc f937 	bl	80026a8 <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	685b      	ldr	r3, [r3, #4]
 800643e:	2b01      	cmp	r3, #1
 8006440:	d107      	bne.n	8006452 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006442:	4b2c      	ldr	r3, [pc, #176]	@ (80064f4 <HAL_RCC_ClockConfig+0x220>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800644a:	2b00      	cmp	r3, #0
 800644c:	d119      	bne.n	8006482 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800644e:	2301      	movs	r3, #1
 8006450:	e0bf      	b.n	80065d2 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	685b      	ldr	r3, [r3, #4]
 8006456:	2b02      	cmp	r3, #2
 8006458:	d003      	beq.n	8006462 <HAL_RCC_ClockConfig+0x18e>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800645e:	2b03      	cmp	r3, #3
 8006460:	d107      	bne.n	8006472 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006462:	4b24      	ldr	r3, [pc, #144]	@ (80064f4 <HAL_RCC_ClockConfig+0x220>)
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d109      	bne.n	8006482 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800646e:	2301      	movs	r3, #1
 8006470:	e0af      	b.n	80065d2 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006472:	4b20      	ldr	r3, [pc, #128]	@ (80064f4 <HAL_RCC_ClockConfig+0x220>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0302 	and.w	r3, r3, #2
 800647a:	2b00      	cmp	r3, #0
 800647c:	d101      	bne.n	8006482 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 800647e:	2301      	movs	r3, #1
 8006480:	e0a7      	b.n	80065d2 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006482:	4b1c      	ldr	r3, [pc, #112]	@ (80064f4 <HAL_RCC_ClockConfig+0x220>)
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f023 0203 	bic.w	r2, r3, #3
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	4919      	ldr	r1, [pc, #100]	@ (80064f4 <HAL_RCC_ClockConfig+0x220>)
 8006490:	4313      	orrs	r3, r2
 8006492:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006494:	f7fc fc30 	bl	8002cf8 <HAL_GetTick>
 8006498:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800649a:	e00a      	b.n	80064b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800649c:	f7fc fc2c 	bl	8002cf8 <HAL_GetTick>
 80064a0:	4602      	mov	r2, r0
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	1ad3      	subs	r3, r2, r3
 80064a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d901      	bls.n	80064b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80064ae:	2303      	movs	r3, #3
 80064b0:	e08f      	b.n	80065d2 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80064b2:	4b10      	ldr	r3, [pc, #64]	@ (80064f4 <HAL_RCC_ClockConfig+0x220>)
 80064b4:	689b      	ldr	r3, [r3, #8]
 80064b6:	f003 020c 	and.w	r2, r3, #12
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d1eb      	bne.n	800649c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80064c4:	4b0a      	ldr	r3, [pc, #40]	@ (80064f0 <HAL_RCC_ClockConfig+0x21c>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0307 	and.w	r3, r3, #7
 80064cc:	683a      	ldr	r2, [r7, #0]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d212      	bcs.n	80064f8 <HAL_RCC_ClockConfig+0x224>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80064d2:	4b07      	ldr	r3, [pc, #28]	@ (80064f0 <HAL_RCC_ClockConfig+0x21c>)
 80064d4:	683a      	ldr	r2, [r7, #0]
 80064d6:	b2d2      	uxtb	r2, r2
 80064d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80064da:	4b05      	ldr	r3, [pc, #20]	@ (80064f0 <HAL_RCC_ClockConfig+0x21c>)
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f003 0307 	and.w	r3, r3, #7
 80064e2:	683a      	ldr	r2, [r7, #0]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d007      	beq.n	80064f8 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 80064e8:	2301      	movs	r3, #1
 80064ea:	e072      	b.n	80065d2 <HAL_RCC_ClockConfig+0x2fe>
 80064ec:	0800f9a4 	.word	0x0800f9a4
 80064f0:	40023c00 	.word	0x40023c00
 80064f4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f003 0304 	and.w	r3, r3, #4
 8006500:	2b00      	cmp	r3, #0
 8006502:	d025      	beq.n	8006550 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	68db      	ldr	r3, [r3, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d018      	beq.n	800653e <HAL_RCC_ClockConfig+0x26a>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006514:	d013      	beq.n	800653e <HAL_RCC_ClockConfig+0x26a>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800651e:	d00e      	beq.n	800653e <HAL_RCC_ClockConfig+0x26a>
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8006528:	d009      	beq.n	800653e <HAL_RCC_ClockConfig+0x26a>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8006532:	d004      	beq.n	800653e <HAL_RCC_ClockConfig+0x26a>
 8006534:	f240 21c3 	movw	r1, #707	@ 0x2c3
 8006538:	4828      	ldr	r0, [pc, #160]	@ (80065dc <HAL_RCC_ClockConfig+0x308>)
 800653a:	f7fc f8b5 	bl	80026a8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800653e:	4b28      	ldr	r3, [pc, #160]	@ (80065e0 <HAL_RCC_ClockConfig+0x30c>)
 8006540:	689b      	ldr	r3, [r3, #8]
 8006542:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	68db      	ldr	r3, [r3, #12]
 800654a:	4925      	ldr	r1, [pc, #148]	@ (80065e0 <HAL_RCC_ClockConfig+0x30c>)
 800654c:	4313      	orrs	r3, r2
 800654e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f003 0308 	and.w	r3, r3, #8
 8006558:	2b00      	cmp	r3, #0
 800655a:	d026      	beq.n	80065aa <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	691b      	ldr	r3, [r3, #16]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d018      	beq.n	8006596 <HAL_RCC_ClockConfig+0x2c2>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	691b      	ldr	r3, [r3, #16]
 8006568:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800656c:	d013      	beq.n	8006596 <HAL_RCC_ClockConfig+0x2c2>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	691b      	ldr	r3, [r3, #16]
 8006572:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8006576:	d00e      	beq.n	8006596 <HAL_RCC_ClockConfig+0x2c2>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8006580:	d009      	beq.n	8006596 <HAL_RCC_ClockConfig+0x2c2>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 800658a:	d004      	beq.n	8006596 <HAL_RCC_ClockConfig+0x2c2>
 800658c:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8006590:	4812      	ldr	r0, [pc, #72]	@ (80065dc <HAL_RCC_ClockConfig+0x308>)
 8006592:	f7fc f889 	bl	80026a8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006596:	4b12      	ldr	r3, [pc, #72]	@ (80065e0 <HAL_RCC_ClockConfig+0x30c>)
 8006598:	689b      	ldr	r3, [r3, #8]
 800659a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	691b      	ldr	r3, [r3, #16]
 80065a2:	00db      	lsls	r3, r3, #3
 80065a4:	490e      	ldr	r1, [pc, #56]	@ (80065e0 <HAL_RCC_ClockConfig+0x30c>)
 80065a6:	4313      	orrs	r3, r2
 80065a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80065aa:	f000 f821 	bl	80065f0 <HAL_RCC_GetSysClockFreq>
 80065ae:	4602      	mov	r2, r0
 80065b0:	4b0b      	ldr	r3, [pc, #44]	@ (80065e0 <HAL_RCC_ClockConfig+0x30c>)
 80065b2:	689b      	ldr	r3, [r3, #8]
 80065b4:	091b      	lsrs	r3, r3, #4
 80065b6:	f003 030f 	and.w	r3, r3, #15
 80065ba:	490a      	ldr	r1, [pc, #40]	@ (80065e4 <HAL_RCC_ClockConfig+0x310>)
 80065bc:	5ccb      	ldrb	r3, [r1, r3]
 80065be:	fa22 f303 	lsr.w	r3, r2, r3
 80065c2:	4a09      	ldr	r2, [pc, #36]	@ (80065e8 <HAL_RCC_ClockConfig+0x314>)
 80065c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80065c6:	4b09      	ldr	r3, [pc, #36]	@ (80065ec <HAL_RCC_ClockConfig+0x318>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4618      	mov	r0, r3
 80065cc:	f7fc f9fc 	bl	80029c8 <HAL_InitTick>

  return HAL_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	0800f9a4 	.word	0x0800f9a4
 80065e0:	40023800 	.word	0x40023800
 80065e4:	0800fb10 	.word	0x0800fb10
 80065e8:	20000000 	.word	0x20000000
 80065ec:	20000004 	.word	0x20000004

080065f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80065f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80065f4:	b090      	sub	sp, #64	@ 0x40
 80065f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80065f8:	2300      	movs	r3, #0
 80065fa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80065fc:	2300      	movs	r3, #0
 80065fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006600:	2300      	movs	r3, #0
 8006602:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006604:	2300      	movs	r3, #0
 8006606:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006608:	4b59      	ldr	r3, [pc, #356]	@ (8006770 <HAL_RCC_GetSysClockFreq+0x180>)
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	f003 030c 	and.w	r3, r3, #12
 8006610:	2b08      	cmp	r3, #8
 8006612:	d00d      	beq.n	8006630 <HAL_RCC_GetSysClockFreq+0x40>
 8006614:	2b08      	cmp	r3, #8
 8006616:	f200 80a1 	bhi.w	800675c <HAL_RCC_GetSysClockFreq+0x16c>
 800661a:	2b00      	cmp	r3, #0
 800661c:	d002      	beq.n	8006624 <HAL_RCC_GetSysClockFreq+0x34>
 800661e:	2b04      	cmp	r3, #4
 8006620:	d003      	beq.n	800662a <HAL_RCC_GetSysClockFreq+0x3a>
 8006622:	e09b      	b.n	800675c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006624:	4b53      	ldr	r3, [pc, #332]	@ (8006774 <HAL_RCC_GetSysClockFreq+0x184>)
 8006626:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006628:	e09b      	b.n	8006762 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800662a:	4b53      	ldr	r3, [pc, #332]	@ (8006778 <HAL_RCC_GetSysClockFreq+0x188>)
 800662c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800662e:	e098      	b.n	8006762 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006630:	4b4f      	ldr	r3, [pc, #316]	@ (8006770 <HAL_RCC_GetSysClockFreq+0x180>)
 8006632:	685b      	ldr	r3, [r3, #4]
 8006634:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006638:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800663a:	4b4d      	ldr	r3, [pc, #308]	@ (8006770 <HAL_RCC_GetSysClockFreq+0x180>)
 800663c:	685b      	ldr	r3, [r3, #4]
 800663e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006642:	2b00      	cmp	r3, #0
 8006644:	d028      	beq.n	8006698 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006646:	4b4a      	ldr	r3, [pc, #296]	@ (8006770 <HAL_RCC_GetSysClockFreq+0x180>)
 8006648:	685b      	ldr	r3, [r3, #4]
 800664a:	099b      	lsrs	r3, r3, #6
 800664c:	2200      	movs	r2, #0
 800664e:	623b      	str	r3, [r7, #32]
 8006650:	627a      	str	r2, [r7, #36]	@ 0x24
 8006652:	6a3b      	ldr	r3, [r7, #32]
 8006654:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006658:	2100      	movs	r1, #0
 800665a:	4b47      	ldr	r3, [pc, #284]	@ (8006778 <HAL_RCC_GetSysClockFreq+0x188>)
 800665c:	fb03 f201 	mul.w	r2, r3, r1
 8006660:	2300      	movs	r3, #0
 8006662:	fb00 f303 	mul.w	r3, r0, r3
 8006666:	4413      	add	r3, r2
 8006668:	4a43      	ldr	r2, [pc, #268]	@ (8006778 <HAL_RCC_GetSysClockFreq+0x188>)
 800666a:	fba0 1202 	umull	r1, r2, r0, r2
 800666e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006670:	460a      	mov	r2, r1
 8006672:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006674:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006676:	4413      	add	r3, r2
 8006678:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800667a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800667c:	2200      	movs	r2, #0
 800667e:	61bb      	str	r3, [r7, #24]
 8006680:	61fa      	str	r2, [r7, #28]
 8006682:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006686:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800668a:	f7fa fb7d 	bl	8000d88 <__aeabi_uldivmod>
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	4613      	mov	r3, r2
 8006694:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006696:	e053      	b.n	8006740 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006698:	4b35      	ldr	r3, [pc, #212]	@ (8006770 <HAL_RCC_GetSysClockFreq+0x180>)
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	099b      	lsrs	r3, r3, #6
 800669e:	2200      	movs	r2, #0
 80066a0:	613b      	str	r3, [r7, #16]
 80066a2:	617a      	str	r2, [r7, #20]
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80066aa:	f04f 0b00 	mov.w	fp, #0
 80066ae:	4652      	mov	r2, sl
 80066b0:	465b      	mov	r3, fp
 80066b2:	f04f 0000 	mov.w	r0, #0
 80066b6:	f04f 0100 	mov.w	r1, #0
 80066ba:	0159      	lsls	r1, r3, #5
 80066bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80066c0:	0150      	lsls	r0, r2, #5
 80066c2:	4602      	mov	r2, r0
 80066c4:	460b      	mov	r3, r1
 80066c6:	ebb2 080a 	subs.w	r8, r2, sl
 80066ca:	eb63 090b 	sbc.w	r9, r3, fp
 80066ce:	f04f 0200 	mov.w	r2, #0
 80066d2:	f04f 0300 	mov.w	r3, #0
 80066d6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80066da:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80066de:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80066e2:	ebb2 0408 	subs.w	r4, r2, r8
 80066e6:	eb63 0509 	sbc.w	r5, r3, r9
 80066ea:	f04f 0200 	mov.w	r2, #0
 80066ee:	f04f 0300 	mov.w	r3, #0
 80066f2:	00eb      	lsls	r3, r5, #3
 80066f4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80066f8:	00e2      	lsls	r2, r4, #3
 80066fa:	4614      	mov	r4, r2
 80066fc:	461d      	mov	r5, r3
 80066fe:	eb14 030a 	adds.w	r3, r4, sl
 8006702:	603b      	str	r3, [r7, #0]
 8006704:	eb45 030b 	adc.w	r3, r5, fp
 8006708:	607b      	str	r3, [r7, #4]
 800670a:	f04f 0200 	mov.w	r2, #0
 800670e:	f04f 0300 	mov.w	r3, #0
 8006712:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006716:	4629      	mov	r1, r5
 8006718:	028b      	lsls	r3, r1, #10
 800671a:	4621      	mov	r1, r4
 800671c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006720:	4621      	mov	r1, r4
 8006722:	028a      	lsls	r2, r1, #10
 8006724:	4610      	mov	r0, r2
 8006726:	4619      	mov	r1, r3
 8006728:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800672a:	2200      	movs	r2, #0
 800672c:	60bb      	str	r3, [r7, #8]
 800672e:	60fa      	str	r2, [r7, #12]
 8006730:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006734:	f7fa fb28 	bl	8000d88 <__aeabi_uldivmod>
 8006738:	4602      	mov	r2, r0
 800673a:	460b      	mov	r3, r1
 800673c:	4613      	mov	r3, r2
 800673e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006740:	4b0b      	ldr	r3, [pc, #44]	@ (8006770 <HAL_RCC_GetSysClockFreq+0x180>)
 8006742:	685b      	ldr	r3, [r3, #4]
 8006744:	0c1b      	lsrs	r3, r3, #16
 8006746:	f003 0303 	and.w	r3, r3, #3
 800674a:	3301      	adds	r3, #1
 800674c:	005b      	lsls	r3, r3, #1
 800674e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006750:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006752:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006754:	fbb2 f3f3 	udiv	r3, r2, r3
 8006758:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800675a:	e002      	b.n	8006762 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800675c:	4b05      	ldr	r3, [pc, #20]	@ (8006774 <HAL_RCC_GetSysClockFreq+0x184>)
 800675e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006760:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006762:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006764:	4618      	mov	r0, r3
 8006766:	3740      	adds	r7, #64	@ 0x40
 8006768:	46bd      	mov	sp, r7
 800676a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800676e:	bf00      	nop
 8006770:	40023800 	.word	0x40023800
 8006774:	00f42400 	.word	0x00f42400
 8006778:	017d7840 	.word	0x017d7840

0800677c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800677c:	b480      	push	{r7}
 800677e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006780:	4b03      	ldr	r3, [pc, #12]	@ (8006790 <HAL_RCC_GetHCLKFreq+0x14>)
 8006782:	681b      	ldr	r3, [r3, #0]
}
 8006784:	4618      	mov	r0, r3
 8006786:	46bd      	mov	sp, r7
 8006788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678c:	4770      	bx	lr
 800678e:	bf00      	nop
 8006790:	20000000 	.word	0x20000000

08006794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006794:	b580      	push	{r7, lr}
 8006796:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006798:	f7ff fff0 	bl	800677c <HAL_RCC_GetHCLKFreq>
 800679c:	4602      	mov	r2, r0
 800679e:	4b05      	ldr	r3, [pc, #20]	@ (80067b4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80067a0:	689b      	ldr	r3, [r3, #8]
 80067a2:	0a9b      	lsrs	r3, r3, #10
 80067a4:	f003 0307 	and.w	r3, r3, #7
 80067a8:	4903      	ldr	r1, [pc, #12]	@ (80067b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80067aa:	5ccb      	ldrb	r3, [r1, r3]
 80067ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067b0:	4618      	mov	r0, r3
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	40023800 	.word	0x40023800
 80067b8:	0800fb20 	.word	0x0800fb20

080067bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80067c0:	f7ff ffdc 	bl	800677c <HAL_RCC_GetHCLKFreq>
 80067c4:	4602      	mov	r2, r0
 80067c6:	4b05      	ldr	r3, [pc, #20]	@ (80067dc <HAL_RCC_GetPCLK2Freq+0x20>)
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	0b5b      	lsrs	r3, r3, #13
 80067cc:	f003 0307 	and.w	r3, r3, #7
 80067d0:	4903      	ldr	r1, [pc, #12]	@ (80067e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80067d2:	5ccb      	ldrb	r3, [r1, r3]
 80067d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80067d8:	4618      	mov	r0, r3
 80067da:	bd80      	pop	{r7, pc}
 80067dc:	40023800 	.word	0x40023800
 80067e0:	0800fb20 	.word	0x0800fb20

080067e4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80067e4:	b480      	push	{r7}
 80067e6:	b083      	sub	sp, #12
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
 80067ec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	220f      	movs	r2, #15
 80067f2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80067f4:	4b12      	ldr	r3, [pc, #72]	@ (8006840 <HAL_RCC_GetClockConfig+0x5c>)
 80067f6:	689b      	ldr	r3, [r3, #8]
 80067f8:	f003 0203 	and.w	r2, r3, #3
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006800:	4b0f      	ldr	r3, [pc, #60]	@ (8006840 <HAL_RCC_GetClockConfig+0x5c>)
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800680c:	4b0c      	ldr	r3, [pc, #48]	@ (8006840 <HAL_RCC_GetClockConfig+0x5c>)
 800680e:	689b      	ldr	r3, [r3, #8]
 8006810:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006818:	4b09      	ldr	r3, [pc, #36]	@ (8006840 <HAL_RCC_GetClockConfig+0x5c>)
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	08db      	lsrs	r3, r3, #3
 800681e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006826:	4b07      	ldr	r3, [pc, #28]	@ (8006844 <HAL_RCC_GetClockConfig+0x60>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	f003 0207 	and.w	r2, r3, #7
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	601a      	str	r2, [r3, #0]
}
 8006832:	bf00      	nop
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr
 800683e:	bf00      	nop
 8006840:	40023800 	.word	0x40023800
 8006844:	40023c00 	.word	0x40023c00

08006848 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2b00      	cmp	r3, #0
 8006854:	d101      	bne.n	800685a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006856:	2301      	movs	r3, #1
 8006858:	e0ed      	b.n	8006a36 <HAL_TIM_Base_Init+0x1ee>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	4a78      	ldr	r2, [pc, #480]	@ (8006a40 <HAL_TIM_Base_Init+0x1f8>)
 8006860:	4293      	cmp	r3, r2
 8006862:	d045      	beq.n	80068f0 <HAL_TIM_Base_Init+0xa8>
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800686c:	d040      	beq.n	80068f0 <HAL_TIM_Base_Init+0xa8>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	4a74      	ldr	r2, [pc, #464]	@ (8006a44 <HAL_TIM_Base_Init+0x1fc>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d03b      	beq.n	80068f0 <HAL_TIM_Base_Init+0xa8>
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	4a72      	ldr	r2, [pc, #456]	@ (8006a48 <HAL_TIM_Base_Init+0x200>)
 800687e:	4293      	cmp	r3, r2
 8006880:	d036      	beq.n	80068f0 <HAL_TIM_Base_Init+0xa8>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	4a71      	ldr	r2, [pc, #452]	@ (8006a4c <HAL_TIM_Base_Init+0x204>)
 8006888:	4293      	cmp	r3, r2
 800688a:	d031      	beq.n	80068f0 <HAL_TIM_Base_Init+0xa8>
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	4a6f      	ldr	r2, [pc, #444]	@ (8006a50 <HAL_TIM_Base_Init+0x208>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d02c      	beq.n	80068f0 <HAL_TIM_Base_Init+0xa8>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	4a6e      	ldr	r2, [pc, #440]	@ (8006a54 <HAL_TIM_Base_Init+0x20c>)
 800689c:	4293      	cmp	r3, r2
 800689e:	d027      	beq.n	80068f0 <HAL_TIM_Base_Init+0xa8>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	4a6c      	ldr	r2, [pc, #432]	@ (8006a58 <HAL_TIM_Base_Init+0x210>)
 80068a6:	4293      	cmp	r3, r2
 80068a8:	d022      	beq.n	80068f0 <HAL_TIM_Base_Init+0xa8>
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	4a6b      	ldr	r2, [pc, #428]	@ (8006a5c <HAL_TIM_Base_Init+0x214>)
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d01d      	beq.n	80068f0 <HAL_TIM_Base_Init+0xa8>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a69      	ldr	r2, [pc, #420]	@ (8006a60 <HAL_TIM_Base_Init+0x218>)
 80068ba:	4293      	cmp	r3, r2
 80068bc:	d018      	beq.n	80068f0 <HAL_TIM_Base_Init+0xa8>
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	4a68      	ldr	r2, [pc, #416]	@ (8006a64 <HAL_TIM_Base_Init+0x21c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d013      	beq.n	80068f0 <HAL_TIM_Base_Init+0xa8>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	4a66      	ldr	r2, [pc, #408]	@ (8006a68 <HAL_TIM_Base_Init+0x220>)
 80068ce:	4293      	cmp	r3, r2
 80068d0:	d00e      	beq.n	80068f0 <HAL_TIM_Base_Init+0xa8>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	4a65      	ldr	r2, [pc, #404]	@ (8006a6c <HAL_TIM_Base_Init+0x224>)
 80068d8:	4293      	cmp	r3, r2
 80068da:	d009      	beq.n	80068f0 <HAL_TIM_Base_Init+0xa8>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	4a63      	ldr	r2, [pc, #396]	@ (8006a70 <HAL_TIM_Base_Init+0x228>)
 80068e2:	4293      	cmp	r3, r2
 80068e4:	d004      	beq.n	80068f0 <HAL_TIM_Base_Init+0xa8>
 80068e6:	f240 1113 	movw	r1, #275	@ 0x113
 80068ea:	4862      	ldr	r0, [pc, #392]	@ (8006a74 <HAL_TIM_Base_Init+0x22c>)
 80068ec:	f7fb fedc 	bl	80026a8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	689b      	ldr	r3, [r3, #8]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d014      	beq.n	8006922 <HAL_TIM_Base_Init+0xda>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	2b10      	cmp	r3, #16
 80068fe:	d010      	beq.n	8006922 <HAL_TIM_Base_Init+0xda>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	2b20      	cmp	r3, #32
 8006906:	d00c      	beq.n	8006922 <HAL_TIM_Base_Init+0xda>
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	689b      	ldr	r3, [r3, #8]
 800690c:	2b40      	cmp	r3, #64	@ 0x40
 800690e:	d008      	beq.n	8006922 <HAL_TIM_Base_Init+0xda>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	689b      	ldr	r3, [r3, #8]
 8006914:	2b60      	cmp	r3, #96	@ 0x60
 8006916:	d004      	beq.n	8006922 <HAL_TIM_Base_Init+0xda>
 8006918:	f44f 718a 	mov.w	r1, #276	@ 0x114
 800691c:	4855      	ldr	r0, [pc, #340]	@ (8006a74 <HAL_TIM_Base_Init+0x22c>)
 800691e:	f7fb fec3 	bl	80026a8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d00e      	beq.n	8006948 <HAL_TIM_Base_Init+0x100>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	691b      	ldr	r3, [r3, #16]
 800692e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006932:	d009      	beq.n	8006948 <HAL_TIM_Base_Init+0x100>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	691b      	ldr	r3, [r3, #16]
 8006938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800693c:	d004      	beq.n	8006948 <HAL_TIM_Base_Init+0x100>
 800693e:	f240 1115 	movw	r1, #277	@ 0x115
 8006942:	484c      	ldr	r0, [pc, #304]	@ (8006a74 <HAL_TIM_Base_Init+0x22c>)
 8006944:	f7fb feb0 	bl	80026a8 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006950:	d004      	beq.n	800695c <HAL_TIM_Base_Init+0x114>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a3d      	ldr	r2, [pc, #244]	@ (8006a4c <HAL_TIM_Base_Init+0x204>)
 8006958:	4293      	cmp	r3, r2
 800695a:	d107      	bne.n	800696c <HAL_TIM_Base_Init+0x124>
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	68db      	ldr	r3, [r3, #12]
 8006960:	2b00      	cmp	r3, #0
 8006962:	bf14      	ite	ne
 8006964:	2301      	movne	r3, #1
 8006966:	2300      	moveq	r3, #0
 8006968:	b2db      	uxtb	r3, r3
 800696a:	e00e      	b.n	800698a <HAL_TIM_Base_Init+0x142>
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d006      	beq.n	8006982 <HAL_TIM_Base_Init+0x13a>
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	68db      	ldr	r3, [r3, #12]
 8006978:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800697c:	d201      	bcs.n	8006982 <HAL_TIM_Base_Init+0x13a>
 800697e:	2301      	movs	r3, #1
 8006980:	e000      	b.n	8006984 <HAL_TIM_Base_Init+0x13c>
 8006982:	2300      	movs	r3, #0
 8006984:	f003 0301 	and.w	r3, r3, #1
 8006988:	b2db      	uxtb	r3, r3
 800698a:	2b00      	cmp	r3, #0
 800698c:	d104      	bne.n	8006998 <HAL_TIM_Base_Init+0x150>
 800698e:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8006992:	4838      	ldr	r0, [pc, #224]	@ (8006a74 <HAL_TIM_Base_Init+0x22c>)
 8006994:	f7fb fe88 	bl	80026a8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	699b      	ldr	r3, [r3, #24]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d008      	beq.n	80069b2 <HAL_TIM_Base_Init+0x16a>
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	699b      	ldr	r3, [r3, #24]
 80069a4:	2b80      	cmp	r3, #128	@ 0x80
 80069a6:	d004      	beq.n	80069b2 <HAL_TIM_Base_Init+0x16a>
 80069a8:	f240 1117 	movw	r1, #279	@ 0x117
 80069ac:	4831      	ldr	r0, [pc, #196]	@ (8006a74 <HAL_TIM_Base_Init+0x22c>)
 80069ae:	f7fb fe7b 	bl	80026a8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069b8:	b2db      	uxtb	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d106      	bne.n	80069cc <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80069c6:	6878      	ldr	r0, [r7, #4]
 80069c8:	f000 f856 	bl	8006a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2202      	movs	r2, #2
 80069d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681a      	ldr	r2, [r3, #0]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	3304      	adds	r3, #4
 80069dc:	4619      	mov	r1, r3
 80069de:	4610      	mov	r0, r2
 80069e0:	f000 fa32 	bl	8006e48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2201      	movs	r2, #1
 80069e8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2201      	movs	r2, #1
 8006a00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2201      	movs	r2, #1
 8006a10:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	2201      	movs	r2, #1
 8006a20:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2201      	movs	r2, #1
 8006a30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a34:	2300      	movs	r3, #0
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3708      	adds	r7, #8
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}
 8006a3e:	bf00      	nop
 8006a40:	40010000 	.word	0x40010000
 8006a44:	40000400 	.word	0x40000400
 8006a48:	40000800 	.word	0x40000800
 8006a4c:	40000c00 	.word	0x40000c00
 8006a50:	40001000 	.word	0x40001000
 8006a54:	40001400 	.word	0x40001400
 8006a58:	40010400 	.word	0x40010400
 8006a5c:	40014000 	.word	0x40014000
 8006a60:	40014400 	.word	0x40014400
 8006a64:	40014800 	.word	0x40014800
 8006a68:	40001800 	.word	0x40001800
 8006a6c:	40001c00 	.word	0x40001c00
 8006a70:	40002000 	.word	0x40002000
 8006a74:	0800f9dc 	.word	0x0800f9dc

08006a78 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b083      	sub	sp, #12
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006a80:	bf00      	nop
 8006a82:	370c      	adds	r7, #12
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	b084      	sub	sp, #16
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	4a51      	ldr	r2, [pc, #324]	@ (8006be0 <HAL_TIM_Base_Start_IT+0x154>)
 8006a9a:	4293      	cmp	r3, r2
 8006a9c:	d045      	beq.n	8006b2a <HAL_TIM_Base_Start_IT+0x9e>
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006aa6:	d040      	beq.n	8006b2a <HAL_TIM_Base_Start_IT+0x9e>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	4a4d      	ldr	r2, [pc, #308]	@ (8006be4 <HAL_TIM_Base_Start_IT+0x158>)
 8006aae:	4293      	cmp	r3, r2
 8006ab0:	d03b      	beq.n	8006b2a <HAL_TIM_Base_Start_IT+0x9e>
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a4c      	ldr	r2, [pc, #304]	@ (8006be8 <HAL_TIM_Base_Start_IT+0x15c>)
 8006ab8:	4293      	cmp	r3, r2
 8006aba:	d036      	beq.n	8006b2a <HAL_TIM_Base_Start_IT+0x9e>
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	4a4a      	ldr	r2, [pc, #296]	@ (8006bec <HAL_TIM_Base_Start_IT+0x160>)
 8006ac2:	4293      	cmp	r3, r2
 8006ac4:	d031      	beq.n	8006b2a <HAL_TIM_Base_Start_IT+0x9e>
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	4a49      	ldr	r2, [pc, #292]	@ (8006bf0 <HAL_TIM_Base_Start_IT+0x164>)
 8006acc:	4293      	cmp	r3, r2
 8006ace:	d02c      	beq.n	8006b2a <HAL_TIM_Base_Start_IT+0x9e>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	4a47      	ldr	r2, [pc, #284]	@ (8006bf4 <HAL_TIM_Base_Start_IT+0x168>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d027      	beq.n	8006b2a <HAL_TIM_Base_Start_IT+0x9e>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	4a46      	ldr	r2, [pc, #280]	@ (8006bf8 <HAL_TIM_Base_Start_IT+0x16c>)
 8006ae0:	4293      	cmp	r3, r2
 8006ae2:	d022      	beq.n	8006b2a <HAL_TIM_Base_Start_IT+0x9e>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4a44      	ldr	r2, [pc, #272]	@ (8006bfc <HAL_TIM_Base_Start_IT+0x170>)
 8006aea:	4293      	cmp	r3, r2
 8006aec:	d01d      	beq.n	8006b2a <HAL_TIM_Base_Start_IT+0x9e>
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a43      	ldr	r2, [pc, #268]	@ (8006c00 <HAL_TIM_Base_Start_IT+0x174>)
 8006af4:	4293      	cmp	r3, r2
 8006af6:	d018      	beq.n	8006b2a <HAL_TIM_Base_Start_IT+0x9e>
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	4a41      	ldr	r2, [pc, #260]	@ (8006c04 <HAL_TIM_Base_Start_IT+0x178>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d013      	beq.n	8006b2a <HAL_TIM_Base_Start_IT+0x9e>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	4a40      	ldr	r2, [pc, #256]	@ (8006c08 <HAL_TIM_Base_Start_IT+0x17c>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d00e      	beq.n	8006b2a <HAL_TIM_Base_Start_IT+0x9e>
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4a3e      	ldr	r2, [pc, #248]	@ (8006c0c <HAL_TIM_Base_Start_IT+0x180>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d009      	beq.n	8006b2a <HAL_TIM_Base_Start_IT+0x9e>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4a3d      	ldr	r2, [pc, #244]	@ (8006c10 <HAL_TIM_Base_Start_IT+0x184>)
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	d004      	beq.n	8006b2a <HAL_TIM_Base_Start_IT+0x9e>
 8006b20:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 8006b24:	483b      	ldr	r0, [pc, #236]	@ (8006c14 <HAL_TIM_Base_Start_IT+0x188>)
 8006b26:	f7fb fdbf 	bl	80026a8 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	2b01      	cmp	r3, #1
 8006b34:	d001      	beq.n	8006b3a <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	e04e      	b.n	8006bd8 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	2202      	movs	r2, #2
 8006b3e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	68da      	ldr	r2, [r3, #12]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f042 0201 	orr.w	r2, r2, #1
 8006b50:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	4a22      	ldr	r2, [pc, #136]	@ (8006be0 <HAL_TIM_Base_Start_IT+0x154>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d022      	beq.n	8006ba2 <HAL_TIM_Base_Start_IT+0x116>
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b64:	d01d      	beq.n	8006ba2 <HAL_TIM_Base_Start_IT+0x116>
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	4a1e      	ldr	r2, [pc, #120]	@ (8006be4 <HAL_TIM_Base_Start_IT+0x158>)
 8006b6c:	4293      	cmp	r3, r2
 8006b6e:	d018      	beq.n	8006ba2 <HAL_TIM_Base_Start_IT+0x116>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	4a1c      	ldr	r2, [pc, #112]	@ (8006be8 <HAL_TIM_Base_Start_IT+0x15c>)
 8006b76:	4293      	cmp	r3, r2
 8006b78:	d013      	beq.n	8006ba2 <HAL_TIM_Base_Start_IT+0x116>
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	4a1b      	ldr	r2, [pc, #108]	@ (8006bec <HAL_TIM_Base_Start_IT+0x160>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d00e      	beq.n	8006ba2 <HAL_TIM_Base_Start_IT+0x116>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	4a1b      	ldr	r2, [pc, #108]	@ (8006bf8 <HAL_TIM_Base_Start_IT+0x16c>)
 8006b8a:	4293      	cmp	r3, r2
 8006b8c:	d009      	beq.n	8006ba2 <HAL_TIM_Base_Start_IT+0x116>
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	4a1a      	ldr	r2, [pc, #104]	@ (8006bfc <HAL_TIM_Base_Start_IT+0x170>)
 8006b94:	4293      	cmp	r3, r2
 8006b96:	d004      	beq.n	8006ba2 <HAL_TIM_Base_Start_IT+0x116>
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a1a      	ldr	r2, [pc, #104]	@ (8006c08 <HAL_TIM_Base_Start_IT+0x17c>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d111      	bne.n	8006bc6 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	689b      	ldr	r3, [r3, #8]
 8006ba8:	f003 0307 	and.w	r3, r3, #7
 8006bac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b06      	cmp	r3, #6
 8006bb2:	d010      	beq.n	8006bd6 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	681a      	ldr	r2, [r3, #0]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f042 0201 	orr.w	r2, r2, #1
 8006bc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006bc4:	e007      	b.n	8006bd6 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	681a      	ldr	r2, [r3, #0]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f042 0201 	orr.w	r2, r2, #1
 8006bd4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3710      	adds	r7, #16
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	40010000 	.word	0x40010000
 8006be4:	40000400 	.word	0x40000400
 8006be8:	40000800 	.word	0x40000800
 8006bec:	40000c00 	.word	0x40000c00
 8006bf0:	40001000 	.word	0x40001000
 8006bf4:	40001400 	.word	0x40001400
 8006bf8:	40010400 	.word	0x40010400
 8006bfc:	40014000 	.word	0x40014000
 8006c00:	40014400 	.word	0x40014400
 8006c04:	40014800 	.word	0x40014800
 8006c08:	40001800 	.word	0x40001800
 8006c0c:	40001c00 	.word	0x40001c00
 8006c10:	40002000 	.word	0x40002000
 8006c14:	0800f9dc 	.word	0x0800f9dc

08006c18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	f003 0302 	and.w	r3, r3, #2
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d020      	beq.n	8006c7c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	f003 0302 	and.w	r3, r3, #2
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d01b      	beq.n	8006c7c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f06f 0202 	mvn.w	r2, #2
 8006c4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	2201      	movs	r2, #1
 8006c52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	f003 0303 	and.w	r3, r3, #3
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 f8d2 	bl	8006e0c <HAL_TIM_IC_CaptureCallback>
 8006c68:	e005      	b.n	8006c76 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 f8c4 	bl	8006df8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f000 f8d5 	bl	8006e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2200      	movs	r2, #0
 8006c7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006c7c:	68bb      	ldr	r3, [r7, #8]
 8006c7e:	f003 0304 	and.w	r3, r3, #4
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d020      	beq.n	8006cc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	f003 0304 	and.w	r3, r3, #4
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d01b      	beq.n	8006cc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f06f 0204 	mvn.w	r2, #4
 8006c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2202      	movs	r2, #2
 8006c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	699b      	ldr	r3, [r3, #24]
 8006ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d003      	beq.n	8006cb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	f000 f8ac 	bl	8006e0c <HAL_TIM_IC_CaptureCallback>
 8006cb4:	e005      	b.n	8006cc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f000 f89e 	bl	8006df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f8af 	bl	8006e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006cc8:	68bb      	ldr	r3, [r7, #8]
 8006cca:	f003 0308 	and.w	r3, r3, #8
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d020      	beq.n	8006d14 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	f003 0308 	and.w	r3, r3, #8
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d01b      	beq.n	8006d14 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f06f 0208 	mvn.w	r2, #8
 8006ce4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2204      	movs	r2, #4
 8006cea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	69db      	ldr	r3, [r3, #28]
 8006cf2:	f003 0303 	and.w	r3, r3, #3
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d003      	beq.n	8006d02 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	f000 f886 	bl	8006e0c <HAL_TIM_IC_CaptureCallback>
 8006d00:	e005      	b.n	8006d0e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f000 f878 	bl	8006df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 f889 	bl	8006e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	2200      	movs	r2, #0
 8006d12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	f003 0310 	and.w	r3, r3, #16
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d020      	beq.n	8006d60 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f003 0310 	and.w	r3, r3, #16
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d01b      	beq.n	8006d60 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f06f 0210 	mvn.w	r2, #16
 8006d30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2208      	movs	r2, #8
 8006d36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	69db      	ldr	r3, [r3, #28]
 8006d3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d003      	beq.n	8006d4e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 f860 	bl	8006e0c <HAL_TIM_IC_CaptureCallback>
 8006d4c:	e005      	b.n	8006d5a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 f852 	bl	8006df8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d54:	6878      	ldr	r0, [r7, #4]
 8006d56:	f000 f863 	bl	8006e20 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2200      	movs	r2, #0
 8006d5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	f003 0301 	and.w	r3, r3, #1
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d00c      	beq.n	8006d84 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	f003 0301 	and.w	r3, r3, #1
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d007      	beq.n	8006d84 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	f06f 0201 	mvn.w	r2, #1
 8006d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f7fb fc7a 	bl	8002678 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006d84:	68bb      	ldr	r3, [r7, #8]
 8006d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d00c      	beq.n	8006da8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d007      	beq.n	8006da8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8006da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006da2:	6878      	ldr	r0, [r7, #4]
 8006da4:	f000 f906 	bl	8006fb4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00c      	beq.n	8006dcc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006db8:	2b00      	cmp	r3, #0
 8006dba:	d007      	beq.n	8006dcc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8006dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f834 	bl	8006e34 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f003 0320 	and.w	r3, r3, #32
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00c      	beq.n	8006df0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	f003 0320 	and.w	r3, r3, #32
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d007      	beq.n	8006df0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	f06f 0220 	mvn.w	r2, #32
 8006de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 f8d8 	bl	8006fa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006df0:	bf00      	nop
 8006df2:	3710      	adds	r7, #16
 8006df4:	46bd      	mov	sp, r7
 8006df6:	bd80      	pop	{r7, pc}

08006df8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b083      	sub	sp, #12
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006e00:	bf00      	nop
 8006e02:	370c      	adds	r7, #12
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr

08006e0c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006e0c:	b480      	push	{r7}
 8006e0e:	b083      	sub	sp, #12
 8006e10:	af00      	add	r7, sp, #0
 8006e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr

08006e20 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006e20:	b480      	push	{r7}
 8006e22:	b083      	sub	sp, #12
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006e28:	bf00      	nop
 8006e2a:	370c      	adds	r7, #12
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e32:	4770      	bx	lr

08006e34 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b083      	sub	sp, #12
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006e3c:	bf00      	nop
 8006e3e:	370c      	adds	r7, #12
 8006e40:	46bd      	mov	sp, r7
 8006e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e46:	4770      	bx	lr

08006e48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a46      	ldr	r2, [pc, #280]	@ (8006f74 <TIM_Base_SetConfig+0x12c>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d013      	beq.n	8006e88 <TIM_Base_SetConfig+0x40>
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e66:	d00f      	beq.n	8006e88 <TIM_Base_SetConfig+0x40>
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	4a43      	ldr	r2, [pc, #268]	@ (8006f78 <TIM_Base_SetConfig+0x130>)
 8006e6c:	4293      	cmp	r3, r2
 8006e6e:	d00b      	beq.n	8006e88 <TIM_Base_SetConfig+0x40>
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	4a42      	ldr	r2, [pc, #264]	@ (8006f7c <TIM_Base_SetConfig+0x134>)
 8006e74:	4293      	cmp	r3, r2
 8006e76:	d007      	beq.n	8006e88 <TIM_Base_SetConfig+0x40>
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	4a41      	ldr	r2, [pc, #260]	@ (8006f80 <TIM_Base_SetConfig+0x138>)
 8006e7c:	4293      	cmp	r3, r2
 8006e7e:	d003      	beq.n	8006e88 <TIM_Base_SetConfig+0x40>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	4a40      	ldr	r2, [pc, #256]	@ (8006f84 <TIM_Base_SetConfig+0x13c>)
 8006e84:	4293      	cmp	r3, r2
 8006e86:	d108      	bne.n	8006e9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006e8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	68fa      	ldr	r2, [r7, #12]
 8006e96:	4313      	orrs	r3, r2
 8006e98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	4a35      	ldr	r2, [pc, #212]	@ (8006f74 <TIM_Base_SetConfig+0x12c>)
 8006e9e:	4293      	cmp	r3, r2
 8006ea0:	d02b      	beq.n	8006efa <TIM_Base_SetConfig+0xb2>
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006ea8:	d027      	beq.n	8006efa <TIM_Base_SetConfig+0xb2>
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	4a32      	ldr	r2, [pc, #200]	@ (8006f78 <TIM_Base_SetConfig+0x130>)
 8006eae:	4293      	cmp	r3, r2
 8006eb0:	d023      	beq.n	8006efa <TIM_Base_SetConfig+0xb2>
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	4a31      	ldr	r2, [pc, #196]	@ (8006f7c <TIM_Base_SetConfig+0x134>)
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d01f      	beq.n	8006efa <TIM_Base_SetConfig+0xb2>
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	4a30      	ldr	r2, [pc, #192]	@ (8006f80 <TIM_Base_SetConfig+0x138>)
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	d01b      	beq.n	8006efa <TIM_Base_SetConfig+0xb2>
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	4a2f      	ldr	r2, [pc, #188]	@ (8006f84 <TIM_Base_SetConfig+0x13c>)
 8006ec6:	4293      	cmp	r3, r2
 8006ec8:	d017      	beq.n	8006efa <TIM_Base_SetConfig+0xb2>
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	4a2e      	ldr	r2, [pc, #184]	@ (8006f88 <TIM_Base_SetConfig+0x140>)
 8006ece:	4293      	cmp	r3, r2
 8006ed0:	d013      	beq.n	8006efa <TIM_Base_SetConfig+0xb2>
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	4a2d      	ldr	r2, [pc, #180]	@ (8006f8c <TIM_Base_SetConfig+0x144>)
 8006ed6:	4293      	cmp	r3, r2
 8006ed8:	d00f      	beq.n	8006efa <TIM_Base_SetConfig+0xb2>
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	4a2c      	ldr	r2, [pc, #176]	@ (8006f90 <TIM_Base_SetConfig+0x148>)
 8006ede:	4293      	cmp	r3, r2
 8006ee0:	d00b      	beq.n	8006efa <TIM_Base_SetConfig+0xb2>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	4a2b      	ldr	r2, [pc, #172]	@ (8006f94 <TIM_Base_SetConfig+0x14c>)
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	d007      	beq.n	8006efa <TIM_Base_SetConfig+0xb2>
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	4a2a      	ldr	r2, [pc, #168]	@ (8006f98 <TIM_Base_SetConfig+0x150>)
 8006eee:	4293      	cmp	r3, r2
 8006ef0:	d003      	beq.n	8006efa <TIM_Base_SetConfig+0xb2>
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	4a29      	ldr	r2, [pc, #164]	@ (8006f9c <TIM_Base_SetConfig+0x154>)
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	d108      	bne.n	8006f0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006f00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006f02:	683b      	ldr	r3, [r7, #0]
 8006f04:	68db      	ldr	r3, [r3, #12]
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	4313      	orrs	r3, r2
 8006f0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	695b      	ldr	r3, [r3, #20]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	68fa      	ldr	r2, [r7, #12]
 8006f1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	689a      	ldr	r2, [r3, #8]
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681a      	ldr	r2, [r3, #0]
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	4a10      	ldr	r2, [pc, #64]	@ (8006f74 <TIM_Base_SetConfig+0x12c>)
 8006f34:	4293      	cmp	r3, r2
 8006f36:	d003      	beq.n	8006f40 <TIM_Base_SetConfig+0xf8>
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	4a12      	ldr	r2, [pc, #72]	@ (8006f84 <TIM_Base_SetConfig+0x13c>)
 8006f3c:	4293      	cmp	r3, r2
 8006f3e:	d103      	bne.n	8006f48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	691a      	ldr	r2, [r3, #16]
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	2201      	movs	r2, #1
 8006f4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	691b      	ldr	r3, [r3, #16]
 8006f52:	f003 0301 	and.w	r3, r3, #1
 8006f56:	2b01      	cmp	r3, #1
 8006f58:	d105      	bne.n	8006f66 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	691b      	ldr	r3, [r3, #16]
 8006f5e:	f023 0201 	bic.w	r2, r3, #1
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	611a      	str	r2, [r3, #16]
  }
}
 8006f66:	bf00      	nop
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	40010000 	.word	0x40010000
 8006f78:	40000400 	.word	0x40000400
 8006f7c:	40000800 	.word	0x40000800
 8006f80:	40000c00 	.word	0x40000c00
 8006f84:	40010400 	.word	0x40010400
 8006f88:	40014000 	.word	0x40014000
 8006f8c:	40014400 	.word	0x40014400
 8006f90:	40014800 	.word	0x40014800
 8006f94:	40001800 	.word	0x40001800
 8006f98:	40001c00 	.word	0x40001c00
 8006f9c:	40002000 	.word	0x40002000

08006fa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006fbc:	bf00      	nop
 8006fbe:	370c      	adds	r7, #12
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d101      	bne.n	8006fda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006fd6:	2301      	movs	r3, #1
 8006fd8:	e0b7      	b.n	800714a <HAL_UART_Init+0x182>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	699b      	ldr	r3, [r3, #24]
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d031      	beq.n	8007046 <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a5b      	ldr	r2, [pc, #364]	@ (8007154 <HAL_UART_Init+0x18c>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d013      	beq.n	8007014 <HAL_UART_Init+0x4c>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	4a59      	ldr	r2, [pc, #356]	@ (8007158 <HAL_UART_Init+0x190>)
 8006ff2:	4293      	cmp	r3, r2
 8006ff4:	d00e      	beq.n	8007014 <HAL_UART_Init+0x4c>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a58      	ldr	r2, [pc, #352]	@ (800715c <HAL_UART_Init+0x194>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d009      	beq.n	8007014 <HAL_UART_Init+0x4c>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a56      	ldr	r2, [pc, #344]	@ (8007160 <HAL_UART_Init+0x198>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d004      	beq.n	8007014 <HAL_UART_Init+0x4c>
 800700a:	f240 1173 	movw	r1, #371	@ 0x173
 800700e:	4855      	ldr	r0, [pc, #340]	@ (8007164 <HAL_UART_Init+0x19c>)
 8007010:	f7fb fb4a 	bl	80026a8 <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	699b      	ldr	r3, [r3, #24]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d037      	beq.n	800708c <HAL_UART_Init+0xc4>
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007024:	d032      	beq.n	800708c <HAL_UART_Init+0xc4>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800702e:	d02d      	beq.n	800708c <HAL_UART_Init+0xc4>
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	699b      	ldr	r3, [r3, #24]
 8007034:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007038:	d028      	beq.n	800708c <HAL_UART_Init+0xc4>
 800703a:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 800703e:	4849      	ldr	r0, [pc, #292]	@ (8007164 <HAL_UART_Init+0x19c>)
 8007040:	f7fb fb32 	bl	80026a8 <assert_failed>
 8007044:	e022      	b.n	800708c <HAL_UART_Init+0xc4>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	4a42      	ldr	r2, [pc, #264]	@ (8007154 <HAL_UART_Init+0x18c>)
 800704c:	4293      	cmp	r3, r2
 800704e:	d01d      	beq.n	800708c <HAL_UART_Init+0xc4>
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a40      	ldr	r2, [pc, #256]	@ (8007158 <HAL_UART_Init+0x190>)
 8007056:	4293      	cmp	r3, r2
 8007058:	d018      	beq.n	800708c <HAL_UART_Init+0xc4>
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	4a3f      	ldr	r2, [pc, #252]	@ (800715c <HAL_UART_Init+0x194>)
 8007060:	4293      	cmp	r3, r2
 8007062:	d013      	beq.n	800708c <HAL_UART_Init+0xc4>
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a3f      	ldr	r2, [pc, #252]	@ (8007168 <HAL_UART_Init+0x1a0>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d00e      	beq.n	800708c <HAL_UART_Init+0xc4>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	4a3e      	ldr	r2, [pc, #248]	@ (800716c <HAL_UART_Init+0x1a4>)
 8007074:	4293      	cmp	r3, r2
 8007076:	d009      	beq.n	800708c <HAL_UART_Init+0xc4>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a38      	ldr	r2, [pc, #224]	@ (8007160 <HAL_UART_Init+0x198>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d004      	beq.n	800708c <HAL_UART_Init+0xc4>
 8007082:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 8007086:	4837      	ldr	r0, [pc, #220]	@ (8007164 <HAL_UART_Init+0x19c>)
 8007088:	f7fb fb0e 	bl	80026a8 <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d009      	beq.n	80070a8 <HAL_UART_Init+0xe0>
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800709c:	d004      	beq.n	80070a8 <HAL_UART_Init+0xe0>
 800709e:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 80070a2:	4830      	ldr	r0, [pc, #192]	@ (8007164 <HAL_UART_Init+0x19c>)
 80070a4:	f7fb fb00 	bl	80026a8 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	69db      	ldr	r3, [r3, #28]
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	d009      	beq.n	80070c4 <HAL_UART_Init+0xfc>
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	69db      	ldr	r3, [r3, #28]
 80070b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070b8:	d004      	beq.n	80070c4 <HAL_UART_Init+0xfc>
 80070ba:	f240 117b 	movw	r1, #379	@ 0x17b
 80070be:	4829      	ldr	r0, [pc, #164]	@ (8007164 <HAL_UART_Init+0x19c>)
 80070c0:	f7fb faf2 	bl	80026a8 <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80070ca:	b2db      	uxtb	r3, r3
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d106      	bne.n	80070de <HAL_UART_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2200      	movs	r2, #0
 80070d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070d8:	6878      	ldr	r0, [r7, #4]
 80070da:	f7fb fba7 	bl	800282c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	2224      	movs	r2, #36	@ 0x24
 80070e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68da      	ldr	r2, [r3, #12]
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80070f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070f6:	6878      	ldr	r0, [r7, #4]
 80070f8:	f000 fade 	bl	80076b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	691a      	ldr	r2, [r3, #16]
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800710a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	695a      	ldr	r2, [r3, #20]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800711a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68da      	ldr	r2, [r3, #12]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800712a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2220      	movs	r2, #32
 8007136:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	2220      	movs	r2, #32
 800713e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3708      	adds	r7, #8
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	40011000 	.word	0x40011000
 8007158:	40004400 	.word	0x40004400
 800715c:	40004800 	.word	0x40004800
 8007160:	40011400 	.word	0x40011400
 8007164:	0800fa14 	.word	0x0800fa14
 8007168:	40004c00 	.word	0x40004c00
 800716c:	40005000 	.word	0x40005000

08007170 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007170:	b580      	push	{r7, lr}
 8007172:	b08a      	sub	sp, #40	@ 0x28
 8007174:	af02      	add	r7, sp, #8
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	603b      	str	r3, [r7, #0]
 800717c:	4613      	mov	r3, r2
 800717e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007180:	2300      	movs	r3, #0
 8007182:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b20      	cmp	r3, #32
 800718e:	d175      	bne.n	800727c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	2b00      	cmp	r3, #0
 8007194:	d002      	beq.n	800719c <HAL_UART_Transmit+0x2c>
 8007196:	88fb      	ldrh	r3, [r7, #6]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d101      	bne.n	80071a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800719c:	2301      	movs	r3, #1
 800719e:	e06e      	b.n	800727e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2200      	movs	r2, #0
 80071a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	2221      	movs	r2, #33	@ 0x21
 80071aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071ae:	f7fb fda3 	bl	8002cf8 <HAL_GetTick>
 80071b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	88fa      	ldrh	r2, [r7, #6]
 80071b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	88fa      	ldrh	r2, [r7, #6]
 80071be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80071c8:	d108      	bne.n	80071dc <HAL_UART_Transmit+0x6c>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	691b      	ldr	r3, [r3, #16]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d104      	bne.n	80071dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80071d2:	2300      	movs	r3, #0
 80071d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80071d6:	68bb      	ldr	r3, [r7, #8]
 80071d8:	61bb      	str	r3, [r7, #24]
 80071da:	e003      	b.n	80071e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80071dc:	68bb      	ldr	r3, [r7, #8]
 80071de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071e0:	2300      	movs	r3, #0
 80071e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80071e4:	e02e      	b.n	8007244 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071e6:	683b      	ldr	r3, [r7, #0]
 80071e8:	9300      	str	r3, [sp, #0]
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	2200      	movs	r2, #0
 80071ee:	2180      	movs	r1, #128	@ 0x80
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 f97c 	bl	80074ee <UART_WaitOnFlagUntilTimeout>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d005      	beq.n	8007208 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	2220      	movs	r2, #32
 8007200:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007204:	2303      	movs	r3, #3
 8007206:	e03a      	b.n	800727e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007208:	69fb      	ldr	r3, [r7, #28]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d10b      	bne.n	8007226 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	881b      	ldrh	r3, [r3, #0]
 8007212:	461a      	mov	r2, r3
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800721c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800721e:	69bb      	ldr	r3, [r7, #24]
 8007220:	3302      	adds	r3, #2
 8007222:	61bb      	str	r3, [r7, #24]
 8007224:	e007      	b.n	8007236 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007226:	69fb      	ldr	r3, [r7, #28]
 8007228:	781a      	ldrb	r2, [r3, #0]
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	3301      	adds	r3, #1
 8007234:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800723a:	b29b      	uxth	r3, r3
 800723c:	3b01      	subs	r3, #1
 800723e:	b29a      	uxth	r2, r3
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007248:	b29b      	uxth	r3, r3
 800724a:	2b00      	cmp	r3, #0
 800724c:	d1cb      	bne.n	80071e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800724e:	683b      	ldr	r3, [r7, #0]
 8007250:	9300      	str	r3, [sp, #0]
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	2200      	movs	r2, #0
 8007256:	2140      	movs	r1, #64	@ 0x40
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f000 f948 	bl	80074ee <UART_WaitOnFlagUntilTimeout>
 800725e:	4603      	mov	r3, r0
 8007260:	2b00      	cmp	r3, #0
 8007262:	d005      	beq.n	8007270 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2220      	movs	r2, #32
 8007268:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800726c:	2303      	movs	r3, #3
 800726e:	e006      	b.n	800727e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	2220      	movs	r2, #32
 8007274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007278:	2300      	movs	r3, #0
 800727a:	e000      	b.n	800727e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800727c:	2302      	movs	r3, #2
  }
}
 800727e:	4618      	mov	r0, r3
 8007280:	3720      	adds	r7, #32
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
	...

08007288 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b08c      	sub	sp, #48	@ 0x30
 800728c:	af00      	add	r7, sp, #0
 800728e:	60f8      	str	r0, [r7, #12]
 8007290:	60b9      	str	r1, [r7, #8]
 8007292:	4613      	mov	r3, r2
 8007294:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800729c:	b2db      	uxtb	r3, r3
 800729e:	2b20      	cmp	r3, #32
 80072a0:	d156      	bne.n	8007350 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80072a2:	68bb      	ldr	r3, [r7, #8]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d002      	beq.n	80072ae <HAL_UART_Transmit_DMA+0x26>
 80072a8:	88fb      	ldrh	r3, [r7, #6]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d101      	bne.n	80072b2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	e04f      	b.n	8007352 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80072b2:	68ba      	ldr	r2, [r7, #8]
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	88fa      	ldrh	r2, [r7, #6]
 80072bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	88fa      	ldrh	r2, [r7, #6]
 80072c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2221      	movs	r2, #33	@ 0x21
 80072ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d6:	4a21      	ldr	r2, [pc, #132]	@ (800735c <HAL_UART_Transmit_DMA+0xd4>)
 80072d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072de:	4a20      	ldr	r2, [pc, #128]	@ (8007360 <HAL_UART_Transmit_DMA+0xd8>)
 80072e0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e6:	4a1f      	ldr	r2, [pc, #124]	@ (8007364 <HAL_UART_Transmit_DMA+0xdc>)
 80072e8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072ee:	2200      	movs	r2, #0
 80072f0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80072f2:	f107 0308 	add.w	r3, r7, #8
 80072f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80072fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80072fe:	6819      	ldr	r1, [r3, #0]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	3304      	adds	r3, #4
 8007306:	461a      	mov	r2, r3
 8007308:	88fb      	ldrh	r3, [r7, #6]
 800730a:	f7fc fe03 	bl	8003f14 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007316:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	3314      	adds	r3, #20
 800731e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	e853 3f00 	ldrex	r3, [r3]
 8007326:	617b      	str	r3, [r7, #20]
   return(result);
 8007328:	697b      	ldr	r3, [r7, #20]
 800732a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800732e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	3314      	adds	r3, #20
 8007336:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007338:	627a      	str	r2, [r7, #36]	@ 0x24
 800733a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800733c:	6a39      	ldr	r1, [r7, #32]
 800733e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007340:	e841 2300 	strex	r3, r2, [r1]
 8007344:	61fb      	str	r3, [r7, #28]
   return(result);
 8007346:	69fb      	ldr	r3, [r7, #28]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d1e5      	bne.n	8007318 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 800734c:	2300      	movs	r3, #0
 800734e:	e000      	b.n	8007352 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8007350:	2302      	movs	r3, #2
  }
}
 8007352:	4618      	mov	r0, r3
 8007354:	3730      	adds	r7, #48	@ 0x30
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
 800735a:	bf00      	nop
 800735c:	080073a5 	.word	0x080073a5
 8007360:	0800743f 	.word	0x0800743f
 8007364:	0800745b 	.word	0x0800745b

08007368 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007384:	bf00      	nop
 8007386:	370c      	adds	r7, #12
 8007388:	46bd      	mov	sp, r7
 800738a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738e:	4770      	bx	lr

08007390 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007390:	b480      	push	{r7}
 8007392:	b083      	sub	sp, #12
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007398:	bf00      	nop
 800739a:	370c      	adds	r7, #12
 800739c:	46bd      	mov	sp, r7
 800739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a2:	4770      	bx	lr

080073a4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b090      	sub	sp, #64	@ 0x40
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d137      	bne.n	8007430 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 80073c0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073c2:	2200      	movs	r2, #0
 80073c4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80073c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	3314      	adds	r3, #20
 80073cc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d0:	e853 3f00 	ldrex	r3, [r3]
 80073d4:	623b      	str	r3, [r7, #32]
   return(result);
 80073d6:	6a3b      	ldr	r3, [r7, #32]
 80073d8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80073dc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80073de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	3314      	adds	r3, #20
 80073e4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80073e6:	633a      	str	r2, [r7, #48]	@ 0x30
 80073e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80073ec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80073ee:	e841 2300 	strex	r3, r2, [r1]
 80073f2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80073f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1e5      	bne.n	80073c6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80073fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	330c      	adds	r3, #12
 8007400:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007402:	693b      	ldr	r3, [r7, #16]
 8007404:	e853 3f00 	ldrex	r3, [r3]
 8007408:	60fb      	str	r3, [r7, #12]
   return(result);
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007410:	637b      	str	r3, [r7, #52]	@ 0x34
 8007412:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	330c      	adds	r3, #12
 8007418:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800741a:	61fa      	str	r2, [r7, #28]
 800741c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800741e:	69b9      	ldr	r1, [r7, #24]
 8007420:	69fa      	ldr	r2, [r7, #28]
 8007422:	e841 2300 	strex	r3, r2, [r1]
 8007426:	617b      	str	r3, [r7, #20]
   return(result);
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d1e5      	bne.n	80073fa <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800742e:	e002      	b.n	8007436 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8007430:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8007432:	f7ff ff99 	bl	8007368 <HAL_UART_TxCpltCallback>
}
 8007436:	bf00      	nop
 8007438:	3740      	adds	r7, #64	@ 0x40
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800744a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800744c:	68f8      	ldr	r0, [r7, #12]
 800744e:	f7ff ff95 	bl	800737c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007452:	bf00      	nop
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007462:	2300      	movs	r3, #0
 8007464:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800746a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	695b      	ldr	r3, [r3, #20]
 8007472:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007476:	2b80      	cmp	r3, #128	@ 0x80
 8007478:	bf0c      	ite	eq
 800747a:	2301      	moveq	r3, #1
 800747c:	2300      	movne	r3, #0
 800747e:	b2db      	uxtb	r3, r3
 8007480:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007488:	b2db      	uxtb	r3, r3
 800748a:	2b21      	cmp	r3, #33	@ 0x21
 800748c:	d108      	bne.n	80074a0 <UART_DMAError+0x46>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2b00      	cmp	r3, #0
 8007492:	d005      	beq.n	80074a0 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2200      	movs	r2, #0
 8007498:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 800749a:	68b8      	ldr	r0, [r7, #8]
 800749c:	f000 f880 	bl	80075a0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	695b      	ldr	r3, [r3, #20]
 80074a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80074aa:	2b40      	cmp	r3, #64	@ 0x40
 80074ac:	bf0c      	ite	eq
 80074ae:	2301      	moveq	r3, #1
 80074b0:	2300      	movne	r3, #0
 80074b2:	b2db      	uxtb	r3, r3
 80074b4:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80074bc:	b2db      	uxtb	r3, r3
 80074be:	2b22      	cmp	r3, #34	@ 0x22
 80074c0:	d108      	bne.n	80074d4 <UART_DMAError+0x7a>
 80074c2:	68fb      	ldr	r3, [r7, #12]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d005      	beq.n	80074d4 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80074c8:	68bb      	ldr	r3, [r7, #8]
 80074ca:	2200      	movs	r2, #0
 80074cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 80074ce:	68b8      	ldr	r0, [r7, #8]
 80074d0:	f000 f88e 	bl	80075f0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074d8:	f043 0210 	orr.w	r2, r3, #16
 80074dc:	68bb      	ldr	r3, [r7, #8]
 80074de:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80074e0:	68b8      	ldr	r0, [r7, #8]
 80074e2:	f7ff ff55 	bl	8007390 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80074e6:	bf00      	nop
 80074e8:	3710      	adds	r7, #16
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bd80      	pop	{r7, pc}

080074ee <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80074ee:	b580      	push	{r7, lr}
 80074f0:	b086      	sub	sp, #24
 80074f2:	af00      	add	r7, sp, #0
 80074f4:	60f8      	str	r0, [r7, #12]
 80074f6:	60b9      	str	r1, [r7, #8]
 80074f8:	603b      	str	r3, [r7, #0]
 80074fa:	4613      	mov	r3, r2
 80074fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80074fe:	e03b      	b.n	8007578 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007500:	6a3b      	ldr	r3, [r7, #32]
 8007502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007506:	d037      	beq.n	8007578 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007508:	f7fb fbf6 	bl	8002cf8 <HAL_GetTick>
 800750c:	4602      	mov	r2, r0
 800750e:	683b      	ldr	r3, [r7, #0]
 8007510:	1ad3      	subs	r3, r2, r3
 8007512:	6a3a      	ldr	r2, [r7, #32]
 8007514:	429a      	cmp	r2, r3
 8007516:	d302      	bcc.n	800751e <UART_WaitOnFlagUntilTimeout+0x30>
 8007518:	6a3b      	ldr	r3, [r7, #32]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800751e:	2303      	movs	r3, #3
 8007520:	e03a      	b.n	8007598 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	68db      	ldr	r3, [r3, #12]
 8007528:	f003 0304 	and.w	r3, r3, #4
 800752c:	2b00      	cmp	r3, #0
 800752e:	d023      	beq.n	8007578 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2b80      	cmp	r3, #128	@ 0x80
 8007534:	d020      	beq.n	8007578 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	2b40      	cmp	r3, #64	@ 0x40
 800753a:	d01d      	beq.n	8007578 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	f003 0308 	and.w	r3, r3, #8
 8007546:	2b08      	cmp	r3, #8
 8007548:	d116      	bne.n	8007578 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800754a:	2300      	movs	r3, #0
 800754c:	617b      	str	r3, [r7, #20]
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	617b      	str	r3, [r7, #20]
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	685b      	ldr	r3, [r3, #4]
 800755c:	617b      	str	r3, [r7, #20]
 800755e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007560:	68f8      	ldr	r0, [r7, #12]
 8007562:	f000 f845 	bl	80075f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	2208      	movs	r2, #8
 800756a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e00f      	b.n	8007598 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	681a      	ldr	r2, [r3, #0]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	4013      	ands	r3, r2
 8007582:	68ba      	ldr	r2, [r7, #8]
 8007584:	429a      	cmp	r2, r3
 8007586:	bf0c      	ite	eq
 8007588:	2301      	moveq	r3, #1
 800758a:	2300      	movne	r3, #0
 800758c:	b2db      	uxtb	r3, r3
 800758e:	461a      	mov	r2, r3
 8007590:	79fb      	ldrb	r3, [r7, #7]
 8007592:	429a      	cmp	r2, r3
 8007594:	d0b4      	beq.n	8007500 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007596:	2300      	movs	r3, #0
}
 8007598:	4618      	mov	r0, r3
 800759a:	3718      	adds	r7, #24
 800759c:	46bd      	mov	sp, r7
 800759e:	bd80      	pop	{r7, pc}

080075a0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b089      	sub	sp, #36	@ 0x24
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	330c      	adds	r3, #12
 80075ae:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	e853 3f00 	ldrex	r3, [r3]
 80075b6:	60bb      	str	r3, [r7, #8]
   return(result);
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80075be:	61fb      	str	r3, [r7, #28]
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	330c      	adds	r3, #12
 80075c6:	69fa      	ldr	r2, [r7, #28]
 80075c8:	61ba      	str	r2, [r7, #24]
 80075ca:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075cc:	6979      	ldr	r1, [r7, #20]
 80075ce:	69ba      	ldr	r2, [r7, #24]
 80075d0:	e841 2300 	strex	r3, r2, [r1]
 80075d4:	613b      	str	r3, [r7, #16]
   return(result);
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d1e5      	bne.n	80075a8 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	2220      	movs	r2, #32
 80075e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80075e4:	bf00      	nop
 80075e6:	3724      	adds	r7, #36	@ 0x24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b095      	sub	sp, #84	@ 0x54
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	330c      	adds	r3, #12
 80075fe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007600:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007602:	e853 3f00 	ldrex	r3, [r3]
 8007606:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800760a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800760e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	330c      	adds	r3, #12
 8007616:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007618:	643a      	str	r2, [r7, #64]	@ 0x40
 800761a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800761c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800761e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007620:	e841 2300 	strex	r3, r2, [r1]
 8007624:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1e5      	bne.n	80075f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	3314      	adds	r3, #20
 8007632:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007634:	6a3b      	ldr	r3, [r7, #32]
 8007636:	e853 3f00 	ldrex	r3, [r3]
 800763a:	61fb      	str	r3, [r7, #28]
   return(result);
 800763c:	69fb      	ldr	r3, [r7, #28]
 800763e:	f023 0301 	bic.w	r3, r3, #1
 8007642:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	3314      	adds	r3, #20
 800764a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800764c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800764e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007650:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007652:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007654:	e841 2300 	strex	r3, r2, [r1]
 8007658:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800765a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765c:	2b00      	cmp	r3, #0
 800765e:	d1e5      	bne.n	800762c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007664:	2b01      	cmp	r3, #1
 8007666:	d119      	bne.n	800769c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	330c      	adds	r3, #12
 800766e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	e853 3f00 	ldrex	r3, [r3]
 8007676:	60bb      	str	r3, [r7, #8]
   return(result);
 8007678:	68bb      	ldr	r3, [r7, #8]
 800767a:	f023 0310 	bic.w	r3, r3, #16
 800767e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	330c      	adds	r3, #12
 8007686:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007688:	61ba      	str	r2, [r7, #24]
 800768a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800768c:	6979      	ldr	r1, [r7, #20]
 800768e:	69ba      	ldr	r2, [r7, #24]
 8007690:	e841 2300 	strex	r3, r2, [r1]
 8007694:	613b      	str	r3, [r7, #16]
   return(result);
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d1e5      	bne.n	8007668 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2220      	movs	r2, #32
 80076a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	2200      	movs	r2, #0
 80076a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80076aa:	bf00      	nop
 80076ac:	3754      	adds	r7, #84	@ 0x54
 80076ae:	46bd      	mov	sp, r7
 80076b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b4:	4770      	bx	lr
	...

080076b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80076b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076bc:	b0c0      	sub	sp, #256	@ 0x100
 80076be:	af00      	add	r7, sp, #0
 80076c0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80076c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076c8:	685a      	ldr	r2, [r3, #4]
 80076ca:	4bcf      	ldr	r3, [pc, #828]	@ (8007a08 <UART_SetConfig+0x350>)
 80076cc:	429a      	cmp	r2, r3
 80076ce:	d904      	bls.n	80076da <UART_SetConfig+0x22>
 80076d0:	f640 6175 	movw	r1, #3701	@ 0xe75
 80076d4:	48cd      	ldr	r0, [pc, #820]	@ (8007a0c <UART_SetConfig+0x354>)
 80076d6:	f7fa ffe7 	bl	80026a8 <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 80076da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076de:	68db      	ldr	r3, [r3, #12]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d00a      	beq.n	80076fa <UART_SetConfig+0x42>
 80076e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076e8:	68db      	ldr	r3, [r3, #12]
 80076ea:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80076ee:	d004      	beq.n	80076fa <UART_SetConfig+0x42>
 80076f0:	f640 6176 	movw	r1, #3702	@ 0xe76
 80076f4:	48c5      	ldr	r0, [pc, #788]	@ (8007a0c <UART_SetConfig+0x354>)
 80076f6:	f7fa ffd7 	bl	80026a8 <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80076fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80076fe:	691b      	ldr	r3, [r3, #16]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d010      	beq.n	8007726 <UART_SetConfig+0x6e>
 8007704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800770e:	d00a      	beq.n	8007726 <UART_SetConfig+0x6e>
 8007710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800771a:	d004      	beq.n	8007726 <UART_SetConfig+0x6e>
 800771c:	f640 6177 	movw	r1, #3703	@ 0xe77
 8007720:	48ba      	ldr	r0, [pc, #744]	@ (8007a0c <UART_SetConfig+0x354>)
 8007722:	f7fa ffc1 	bl	80026a8 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800772a:	695a      	ldr	r2, [r3, #20]
 800772c:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 8007730:	4013      	ands	r3, r2
 8007732:	2b00      	cmp	r3, #0
 8007734:	d104      	bne.n	8007740 <UART_SetConfig+0x88>
 8007736:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800773a:	695b      	ldr	r3, [r3, #20]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d104      	bne.n	800774a <UART_SetConfig+0x92>
 8007740:	f640 6178 	movw	r1, #3704	@ 0xe78
 8007744:	48b1      	ldr	r0, [pc, #708]	@ (8007a0c <UART_SetConfig+0x354>)
 8007746:	f7fa ffaf 	bl	80026a8 <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800774a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	691b      	ldr	r3, [r3, #16]
 8007752:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800775a:	68d9      	ldr	r1, [r3, #12]
 800775c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007760:	681a      	ldr	r2, [r3, #0]
 8007762:	ea40 0301 	orr.w	r3, r0, r1
 8007766:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007768:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800776c:	689a      	ldr	r2, [r3, #8]
 800776e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007772:	691b      	ldr	r3, [r3, #16]
 8007774:	431a      	orrs	r2, r3
 8007776:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800777a:	695b      	ldr	r3, [r3, #20]
 800777c:	431a      	orrs	r2, r3
 800777e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007782:	69db      	ldr	r3, [r3, #28]
 8007784:	4313      	orrs	r3, r2
 8007786:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800778a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68db      	ldr	r3, [r3, #12]
 8007792:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007796:	f021 010c 	bic.w	r1, r1, #12
 800779a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800779e:	681a      	ldr	r2, [r3, #0]
 80077a0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80077a4:	430b      	orrs	r3, r1
 80077a6:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80077a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	695b      	ldr	r3, [r3, #20]
 80077b0:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80077b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077b8:	6999      	ldr	r1, [r3, #24]
 80077ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077be:	681a      	ldr	r2, [r3, #0]
 80077c0:	ea40 0301 	orr.w	r3, r0, r1
 80077c4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80077c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	4b90      	ldr	r3, [pc, #576]	@ (8007a10 <UART_SetConfig+0x358>)
 80077ce:	429a      	cmp	r2, r3
 80077d0:	d005      	beq.n	80077de <UART_SetConfig+0x126>
 80077d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077d6:	681a      	ldr	r2, [r3, #0]
 80077d8:	4b8e      	ldr	r3, [pc, #568]	@ (8007a14 <UART_SetConfig+0x35c>)
 80077da:	429a      	cmp	r2, r3
 80077dc:	d104      	bne.n	80077e8 <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80077de:	f7fe ffed 	bl	80067bc <HAL_RCC_GetPCLK2Freq>
 80077e2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80077e6:	e003      	b.n	80077f0 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80077e8:	f7fe ffd4 	bl	8006794 <HAL_RCC_GetPCLK1Freq>
 80077ec:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80077f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80077f4:	69db      	ldr	r3, [r3, #28]
 80077f6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80077fa:	f040 810f 	bne.w	8007a1c <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80077fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007802:	2200      	movs	r2, #0
 8007804:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007808:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800780c:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007810:	4622      	mov	r2, r4
 8007812:	462b      	mov	r3, r5
 8007814:	1891      	adds	r1, r2, r2
 8007816:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007818:	415b      	adcs	r3, r3
 800781a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800781c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007820:	4621      	mov	r1, r4
 8007822:	eb12 0801 	adds.w	r8, r2, r1
 8007826:	4629      	mov	r1, r5
 8007828:	eb43 0901 	adc.w	r9, r3, r1
 800782c:	f04f 0200 	mov.w	r2, #0
 8007830:	f04f 0300 	mov.w	r3, #0
 8007834:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007838:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800783c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007840:	4690      	mov	r8, r2
 8007842:	4699      	mov	r9, r3
 8007844:	4623      	mov	r3, r4
 8007846:	eb18 0303 	adds.w	r3, r8, r3
 800784a:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800784e:	462b      	mov	r3, r5
 8007850:	eb49 0303 	adc.w	r3, r9, r3
 8007854:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007864:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007868:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800786c:	460b      	mov	r3, r1
 800786e:	18db      	adds	r3, r3, r3
 8007870:	653b      	str	r3, [r7, #80]	@ 0x50
 8007872:	4613      	mov	r3, r2
 8007874:	eb42 0303 	adc.w	r3, r2, r3
 8007878:	657b      	str	r3, [r7, #84]	@ 0x54
 800787a:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800787e:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007882:	f7f9 fa81 	bl	8000d88 <__aeabi_uldivmod>
 8007886:	4602      	mov	r2, r0
 8007888:	460b      	mov	r3, r1
 800788a:	4b63      	ldr	r3, [pc, #396]	@ (8007a18 <UART_SetConfig+0x360>)
 800788c:	fba3 2302 	umull	r2, r3, r3, r2
 8007890:	095b      	lsrs	r3, r3, #5
 8007892:	011c      	lsls	r4, r3, #4
 8007894:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007898:	2200      	movs	r2, #0
 800789a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800789e:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80078a2:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80078a6:	4642      	mov	r2, r8
 80078a8:	464b      	mov	r3, r9
 80078aa:	1891      	adds	r1, r2, r2
 80078ac:	64b9      	str	r1, [r7, #72]	@ 0x48
 80078ae:	415b      	adcs	r3, r3
 80078b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80078b2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80078b6:	4641      	mov	r1, r8
 80078b8:	eb12 0a01 	adds.w	sl, r2, r1
 80078bc:	4649      	mov	r1, r9
 80078be:	eb43 0b01 	adc.w	fp, r3, r1
 80078c2:	f04f 0200 	mov.w	r2, #0
 80078c6:	f04f 0300 	mov.w	r3, #0
 80078ca:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80078ce:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80078d2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80078d6:	4692      	mov	sl, r2
 80078d8:	469b      	mov	fp, r3
 80078da:	4643      	mov	r3, r8
 80078dc:	eb1a 0303 	adds.w	r3, sl, r3
 80078e0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80078e4:	464b      	mov	r3, r9
 80078e6:	eb4b 0303 	adc.w	r3, fp, r3
 80078ea:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80078ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	2200      	movs	r2, #0
 80078f6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078fa:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80078fe:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007902:	460b      	mov	r3, r1
 8007904:	18db      	adds	r3, r3, r3
 8007906:	643b      	str	r3, [r7, #64]	@ 0x40
 8007908:	4613      	mov	r3, r2
 800790a:	eb42 0303 	adc.w	r3, r2, r3
 800790e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007910:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007914:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007918:	f7f9 fa36 	bl	8000d88 <__aeabi_uldivmod>
 800791c:	4602      	mov	r2, r0
 800791e:	460b      	mov	r3, r1
 8007920:	4611      	mov	r1, r2
 8007922:	4b3d      	ldr	r3, [pc, #244]	@ (8007a18 <UART_SetConfig+0x360>)
 8007924:	fba3 2301 	umull	r2, r3, r3, r1
 8007928:	095b      	lsrs	r3, r3, #5
 800792a:	2264      	movs	r2, #100	@ 0x64
 800792c:	fb02 f303 	mul.w	r3, r2, r3
 8007930:	1acb      	subs	r3, r1, r3
 8007932:	00db      	lsls	r3, r3, #3
 8007934:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007938:	4b37      	ldr	r3, [pc, #220]	@ (8007a18 <UART_SetConfig+0x360>)
 800793a:	fba3 2302 	umull	r2, r3, r3, r2
 800793e:	095b      	lsrs	r3, r3, #5
 8007940:	005b      	lsls	r3, r3, #1
 8007942:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007946:	441c      	add	r4, r3
 8007948:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800794c:	2200      	movs	r2, #0
 800794e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007952:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007956:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800795a:	4642      	mov	r2, r8
 800795c:	464b      	mov	r3, r9
 800795e:	1891      	adds	r1, r2, r2
 8007960:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007962:	415b      	adcs	r3, r3
 8007964:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007966:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800796a:	4641      	mov	r1, r8
 800796c:	1851      	adds	r1, r2, r1
 800796e:	6339      	str	r1, [r7, #48]	@ 0x30
 8007970:	4649      	mov	r1, r9
 8007972:	414b      	adcs	r3, r1
 8007974:	637b      	str	r3, [r7, #52]	@ 0x34
 8007976:	f04f 0200 	mov.w	r2, #0
 800797a:	f04f 0300 	mov.w	r3, #0
 800797e:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007982:	4659      	mov	r1, fp
 8007984:	00cb      	lsls	r3, r1, #3
 8007986:	4651      	mov	r1, sl
 8007988:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800798c:	4651      	mov	r1, sl
 800798e:	00ca      	lsls	r2, r1, #3
 8007990:	4610      	mov	r0, r2
 8007992:	4619      	mov	r1, r3
 8007994:	4603      	mov	r3, r0
 8007996:	4642      	mov	r2, r8
 8007998:	189b      	adds	r3, r3, r2
 800799a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800799e:	464b      	mov	r3, r9
 80079a0:	460a      	mov	r2, r1
 80079a2:	eb42 0303 	adc.w	r3, r2, r3
 80079a6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80079b6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80079ba:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80079be:	460b      	mov	r3, r1
 80079c0:	18db      	adds	r3, r3, r3
 80079c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80079c4:	4613      	mov	r3, r2
 80079c6:	eb42 0303 	adc.w	r3, r2, r3
 80079ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80079cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80079d0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80079d4:	f7f9 f9d8 	bl	8000d88 <__aeabi_uldivmod>
 80079d8:	4602      	mov	r2, r0
 80079da:	460b      	mov	r3, r1
 80079dc:	4b0e      	ldr	r3, [pc, #56]	@ (8007a18 <UART_SetConfig+0x360>)
 80079de:	fba3 1302 	umull	r1, r3, r3, r2
 80079e2:	095b      	lsrs	r3, r3, #5
 80079e4:	2164      	movs	r1, #100	@ 0x64
 80079e6:	fb01 f303 	mul.w	r3, r1, r3
 80079ea:	1ad3      	subs	r3, r2, r3
 80079ec:	00db      	lsls	r3, r3, #3
 80079ee:	3332      	adds	r3, #50	@ 0x32
 80079f0:	4a09      	ldr	r2, [pc, #36]	@ (8007a18 <UART_SetConfig+0x360>)
 80079f2:	fba2 2303 	umull	r2, r3, r2, r3
 80079f6:	095b      	lsrs	r3, r3, #5
 80079f8:	f003 0207 	and.w	r2, r3, #7
 80079fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4422      	add	r2, r4
 8007a04:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007a06:	e109      	b.n	8007c1c <UART_SetConfig+0x564>
 8007a08:	00a037a0 	.word	0x00a037a0
 8007a0c:	0800fa14 	.word	0x0800fa14
 8007a10:	40011000 	.word	0x40011000
 8007a14:	40011400 	.word	0x40011400
 8007a18:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007a1c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007a20:	2200      	movs	r2, #0
 8007a22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007a26:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007a2a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007a2e:	4642      	mov	r2, r8
 8007a30:	464b      	mov	r3, r9
 8007a32:	1891      	adds	r1, r2, r2
 8007a34:	6239      	str	r1, [r7, #32]
 8007a36:	415b      	adcs	r3, r3
 8007a38:	627b      	str	r3, [r7, #36]	@ 0x24
 8007a3a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007a3e:	4641      	mov	r1, r8
 8007a40:	1854      	adds	r4, r2, r1
 8007a42:	4649      	mov	r1, r9
 8007a44:	eb43 0501 	adc.w	r5, r3, r1
 8007a48:	f04f 0200 	mov.w	r2, #0
 8007a4c:	f04f 0300 	mov.w	r3, #0
 8007a50:	00eb      	lsls	r3, r5, #3
 8007a52:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007a56:	00e2      	lsls	r2, r4, #3
 8007a58:	4614      	mov	r4, r2
 8007a5a:	461d      	mov	r5, r3
 8007a5c:	4643      	mov	r3, r8
 8007a5e:	18e3      	adds	r3, r4, r3
 8007a60:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007a64:	464b      	mov	r3, r9
 8007a66:	eb45 0303 	adc.w	r3, r5, r3
 8007a6a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007a6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007a72:	685b      	ldr	r3, [r3, #4]
 8007a74:	2200      	movs	r2, #0
 8007a76:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007a7a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007a7e:	f04f 0200 	mov.w	r2, #0
 8007a82:	f04f 0300 	mov.w	r3, #0
 8007a86:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007a8a:	4629      	mov	r1, r5
 8007a8c:	008b      	lsls	r3, r1, #2
 8007a8e:	4621      	mov	r1, r4
 8007a90:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007a94:	4621      	mov	r1, r4
 8007a96:	008a      	lsls	r2, r1, #2
 8007a98:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007a9c:	f7f9 f974 	bl	8000d88 <__aeabi_uldivmod>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	4b60      	ldr	r3, [pc, #384]	@ (8007c28 <UART_SetConfig+0x570>)
 8007aa6:	fba3 2302 	umull	r2, r3, r3, r2
 8007aaa:	095b      	lsrs	r3, r3, #5
 8007aac:	011c      	lsls	r4, r3, #4
 8007aae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007ab8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007abc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007ac0:	4642      	mov	r2, r8
 8007ac2:	464b      	mov	r3, r9
 8007ac4:	1891      	adds	r1, r2, r2
 8007ac6:	61b9      	str	r1, [r7, #24]
 8007ac8:	415b      	adcs	r3, r3
 8007aca:	61fb      	str	r3, [r7, #28]
 8007acc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ad0:	4641      	mov	r1, r8
 8007ad2:	1851      	adds	r1, r2, r1
 8007ad4:	6139      	str	r1, [r7, #16]
 8007ad6:	4649      	mov	r1, r9
 8007ad8:	414b      	adcs	r3, r1
 8007ada:	617b      	str	r3, [r7, #20]
 8007adc:	f04f 0200 	mov.w	r2, #0
 8007ae0:	f04f 0300 	mov.w	r3, #0
 8007ae4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ae8:	4659      	mov	r1, fp
 8007aea:	00cb      	lsls	r3, r1, #3
 8007aec:	4651      	mov	r1, sl
 8007aee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007af2:	4651      	mov	r1, sl
 8007af4:	00ca      	lsls	r2, r1, #3
 8007af6:	4610      	mov	r0, r2
 8007af8:	4619      	mov	r1, r3
 8007afa:	4603      	mov	r3, r0
 8007afc:	4642      	mov	r2, r8
 8007afe:	189b      	adds	r3, r3, r2
 8007b00:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007b04:	464b      	mov	r3, r9
 8007b06:	460a      	mov	r2, r1
 8007b08:	eb42 0303 	adc.w	r3, r2, r3
 8007b0c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007b10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007b14:	685b      	ldr	r3, [r3, #4]
 8007b16:	2200      	movs	r2, #0
 8007b18:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007b1a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007b1c:	f04f 0200 	mov.w	r2, #0
 8007b20:	f04f 0300 	mov.w	r3, #0
 8007b24:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007b28:	4649      	mov	r1, r9
 8007b2a:	008b      	lsls	r3, r1, #2
 8007b2c:	4641      	mov	r1, r8
 8007b2e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007b32:	4641      	mov	r1, r8
 8007b34:	008a      	lsls	r2, r1, #2
 8007b36:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8007b3a:	f7f9 f925 	bl	8000d88 <__aeabi_uldivmod>
 8007b3e:	4602      	mov	r2, r0
 8007b40:	460b      	mov	r3, r1
 8007b42:	4611      	mov	r1, r2
 8007b44:	4b38      	ldr	r3, [pc, #224]	@ (8007c28 <UART_SetConfig+0x570>)
 8007b46:	fba3 2301 	umull	r2, r3, r3, r1
 8007b4a:	095b      	lsrs	r3, r3, #5
 8007b4c:	2264      	movs	r2, #100	@ 0x64
 8007b4e:	fb02 f303 	mul.w	r3, r2, r3
 8007b52:	1acb      	subs	r3, r1, r3
 8007b54:	011b      	lsls	r3, r3, #4
 8007b56:	3332      	adds	r3, #50	@ 0x32
 8007b58:	4a33      	ldr	r2, [pc, #204]	@ (8007c28 <UART_SetConfig+0x570>)
 8007b5a:	fba2 2303 	umull	r2, r3, r2, r3
 8007b5e:	095b      	lsrs	r3, r3, #5
 8007b60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007b64:	441c      	add	r4, r3
 8007b66:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007b6a:	2200      	movs	r2, #0
 8007b6c:	673b      	str	r3, [r7, #112]	@ 0x70
 8007b6e:	677a      	str	r2, [r7, #116]	@ 0x74
 8007b70:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8007b74:	4642      	mov	r2, r8
 8007b76:	464b      	mov	r3, r9
 8007b78:	1891      	adds	r1, r2, r2
 8007b7a:	60b9      	str	r1, [r7, #8]
 8007b7c:	415b      	adcs	r3, r3
 8007b7e:	60fb      	str	r3, [r7, #12]
 8007b80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007b84:	4641      	mov	r1, r8
 8007b86:	1851      	adds	r1, r2, r1
 8007b88:	6039      	str	r1, [r7, #0]
 8007b8a:	4649      	mov	r1, r9
 8007b8c:	414b      	adcs	r3, r1
 8007b8e:	607b      	str	r3, [r7, #4]
 8007b90:	f04f 0200 	mov.w	r2, #0
 8007b94:	f04f 0300 	mov.w	r3, #0
 8007b98:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007b9c:	4659      	mov	r1, fp
 8007b9e:	00cb      	lsls	r3, r1, #3
 8007ba0:	4651      	mov	r1, sl
 8007ba2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ba6:	4651      	mov	r1, sl
 8007ba8:	00ca      	lsls	r2, r1, #3
 8007baa:	4610      	mov	r0, r2
 8007bac:	4619      	mov	r1, r3
 8007bae:	4603      	mov	r3, r0
 8007bb0:	4642      	mov	r2, r8
 8007bb2:	189b      	adds	r3, r3, r2
 8007bb4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007bb6:	464b      	mov	r3, r9
 8007bb8:	460a      	mov	r2, r1
 8007bba:	eb42 0303 	adc.w	r3, r2, r3
 8007bbe:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	663b      	str	r3, [r7, #96]	@ 0x60
 8007bca:	667a      	str	r2, [r7, #100]	@ 0x64
 8007bcc:	f04f 0200 	mov.w	r2, #0
 8007bd0:	f04f 0300 	mov.w	r3, #0
 8007bd4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8007bd8:	4649      	mov	r1, r9
 8007bda:	008b      	lsls	r3, r1, #2
 8007bdc:	4641      	mov	r1, r8
 8007bde:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007be2:	4641      	mov	r1, r8
 8007be4:	008a      	lsls	r2, r1, #2
 8007be6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8007bea:	f7f9 f8cd 	bl	8000d88 <__aeabi_uldivmod>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	4b0d      	ldr	r3, [pc, #52]	@ (8007c28 <UART_SetConfig+0x570>)
 8007bf4:	fba3 1302 	umull	r1, r3, r3, r2
 8007bf8:	095b      	lsrs	r3, r3, #5
 8007bfa:	2164      	movs	r1, #100	@ 0x64
 8007bfc:	fb01 f303 	mul.w	r3, r1, r3
 8007c00:	1ad3      	subs	r3, r2, r3
 8007c02:	011b      	lsls	r3, r3, #4
 8007c04:	3332      	adds	r3, #50	@ 0x32
 8007c06:	4a08      	ldr	r2, [pc, #32]	@ (8007c28 <UART_SetConfig+0x570>)
 8007c08:	fba2 2303 	umull	r2, r3, r2, r3
 8007c0c:	095b      	lsrs	r3, r3, #5
 8007c0e:	f003 020f 	and.w	r2, r3, #15
 8007c12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	4422      	add	r2, r4
 8007c1a:	609a      	str	r2, [r3, #8]
}
 8007c1c:	bf00      	nop
 8007c1e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007c22:	46bd      	mov	sp, r7
 8007c24:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007c28:	51eb851f 	.word	0x51eb851f

08007c2c <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	f103 0208 	add.w	r2, r3, #8
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	f04f 32ff 	mov.w	r2, #4294967295
 8007c44:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	f103 0208 	add.w	r2, r3, #8
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f103 0208 	add.w	r2, r3, #8
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2200      	movs	r2, #0
 8007c5e:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b083      	sub	sp, #12
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	2200      	movs	r2, #0
 8007c78:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007c7a:	bf00      	nop
 8007c7c:	370c      	adds	r7, #12
 8007c7e:	46bd      	mov	sp, r7
 8007c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c84:	4770      	bx	lr

08007c86 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8007c86:	b480      	push	{r7}
 8007c88:	b085      	sub	sp, #20
 8007c8a:	af00      	add	r7, sp, #0
 8007c8c:	6078      	str	r0, [r7, #4]
 8007c8e:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8007c96:	68bb      	ldr	r3, [r7, #8]
 8007c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c9c:	d103      	bne.n	8007ca6 <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	691b      	ldr	r3, [r3, #16]
 8007ca2:	60fb      	str	r3, [r7, #12]
 8007ca4:	e00c      	b.n	8007cc0 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	3308      	adds	r3, #8
 8007caa:	60fb      	str	r3, [r7, #12]
 8007cac:	e002      	b.n	8007cb4 <vListInsert+0x2e>
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	685b      	ldr	r3, [r3, #4]
 8007cb2:	60fb      	str	r3, [r7, #12]
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	685b      	ldr	r3, [r3, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	68ba      	ldr	r2, [r7, #8]
 8007cbc:	429a      	cmp	r2, r3
 8007cbe:	d2f6      	bcs.n	8007cae <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	685a      	ldr	r2, [r3, #4]
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	685b      	ldr	r3, [r3, #4]
 8007ccc:	683a      	ldr	r2, [r7, #0]
 8007cce:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	68fa      	ldr	r2, [r7, #12]
 8007cd4:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	683a      	ldr	r2, [r7, #0]
 8007cda:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8007cdc:	683b      	ldr	r3, [r7, #0]
 8007cde:	687a      	ldr	r2, [r7, #4]
 8007ce0:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	1c5a      	adds	r2, r3, #1
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	601a      	str	r2, [r3, #0]
}
 8007cec:	bf00      	nop
 8007cee:	3714      	adds	r7, #20
 8007cf0:	46bd      	mov	sp, r7
 8007cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf6:	4770      	bx	lr

08007cf8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007cf8:	b480      	push	{r7}
 8007cfa:	b085      	sub	sp, #20
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	691b      	ldr	r3, [r3, #16]
 8007d04:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	687a      	ldr	r2, [r7, #4]
 8007d0c:	6892      	ldr	r2, [r2, #8]
 8007d0e:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	6852      	ldr	r2, [r2, #4]
 8007d18:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	685b      	ldr	r3, [r3, #4]
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	429a      	cmp	r2, r3
 8007d22:	d103      	bne.n	8007d2c <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	689a      	ldr	r2, [r3, #8]
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	1e5a      	subs	r2, r3, #1
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	681b      	ldr	r3, [r3, #0]
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3714      	adds	r7, #20
 8007d44:	46bd      	mov	sp, r7
 8007d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4a:	4770      	bx	lr

08007d4c <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b086      	sub	sp, #24
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8007d56:	2301      	movs	r3, #1
 8007d58:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d10b      	bne.n	8007d7c <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8007d64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d68:	f383 8811 	msr	BASEPRI, r3
 8007d6c:	f3bf 8f6f 	isb	sy
 8007d70:	f3bf 8f4f 	dsb	sy
 8007d74:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 8007d76:	bf00      	nop
 8007d78:	bf00      	nop
 8007d7a:	e7fd      	b.n	8007d78 <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	2b00      	cmp	r3, #0
 8007d80:	d05d      	beq.n	8007e3e <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 8007d82:	693b      	ldr	r3, [r7, #16]
 8007d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d059      	beq.n	8007e3e <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8007d8a:	693b      	ldr	r3, [r7, #16]
 8007d8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007d8e:	693b      	ldr	r3, [r7, #16]
 8007d90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007d92:	2100      	movs	r1, #0
 8007d94:	fba3 2302 	umull	r2, r3, r3, r2
 8007d98:	2b00      	cmp	r3, #0
 8007d9a:	d000      	beq.n	8007d9e <xQueueGenericReset+0x52>
 8007d9c:	2101      	movs	r1, #1
 8007d9e:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8007da0:	2b00      	cmp	r3, #0
 8007da2:	d14c      	bne.n	8007e3e <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8007da4:	f001 fed2 	bl	8009b4c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007da8:	693b      	ldr	r3, [r7, #16]
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007db0:	6939      	ldr	r1, [r7, #16]
 8007db2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007db4:	fb01 f303 	mul.w	r3, r1, r3
 8007db8:	441a      	add	r2, r3
 8007dba:	693b      	ldr	r3, [r7, #16]
 8007dbc:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007dbe:	693b      	ldr	r3, [r7, #16]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007dc4:	693b      	ldr	r3, [r7, #16]
 8007dc6:	681a      	ldr	r2, [r3, #0]
 8007dc8:	693b      	ldr	r3, [r7, #16]
 8007dca:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007dcc:	693b      	ldr	r3, [r7, #16]
 8007dce:	681a      	ldr	r2, [r3, #0]
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007dd4:	3b01      	subs	r3, #1
 8007dd6:	6939      	ldr	r1, [r7, #16]
 8007dd8:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007dda:	fb01 f303 	mul.w	r3, r1, r3
 8007dde:	441a      	add	r2, r3
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	22ff      	movs	r2, #255	@ 0xff
 8007de8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	22ff      	movs	r2, #255	@ 0xff
 8007df0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8007df4:	683b      	ldr	r3, [r7, #0]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d114      	bne.n	8007e24 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	691b      	ldr	r3, [r3, #16]
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d01a      	beq.n	8007e38 <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	3310      	adds	r3, #16
 8007e06:	4618      	mov	r0, r3
 8007e08:	f001 f8b8 	bl	8008f7c <xTaskRemoveFromEventList>
 8007e0c:	4603      	mov	r3, r0
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d012      	beq.n	8007e38 <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007e12:	4b16      	ldr	r3, [pc, #88]	@ (8007e6c <xQueueGenericReset+0x120>)
 8007e14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007e18:	601a      	str	r2, [r3, #0]
 8007e1a:	f3bf 8f4f 	dsb	sy
 8007e1e:	f3bf 8f6f 	isb	sy
 8007e22:	e009      	b.n	8007e38 <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	3310      	adds	r3, #16
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f7ff feff 	bl	8007c2c <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	3324      	adds	r3, #36	@ 0x24
 8007e32:	4618      	mov	r0, r3
 8007e34:	f7ff fefa 	bl	8007c2c <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8007e38:	f001 feba 	bl	8009bb0 <vPortExitCritical>
 8007e3c:	e001      	b.n	8007e42 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 8007e3e:	2300      	movs	r3, #0
 8007e40:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 8007e42:	697b      	ldr	r3, [r7, #20]
 8007e44:	2b00      	cmp	r3, #0
 8007e46:	d10b      	bne.n	8007e60 <xQueueGenericReset+0x114>
        __asm volatile
 8007e48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e4c:	f383 8811 	msr	BASEPRI, r3
 8007e50:	f3bf 8f6f 	isb	sy
 8007e54:	f3bf 8f4f 	dsb	sy
 8007e58:	60bb      	str	r3, [r7, #8]
    }
 8007e5a:	bf00      	nop
 8007e5c:	bf00      	nop
 8007e5e:	e7fd      	b.n	8007e5c <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 8007e60:	697b      	ldr	r3, [r7, #20]
}
 8007e62:	4618      	mov	r0, r3
 8007e64:	3718      	adds	r7, #24
 8007e66:	46bd      	mov	sp, r7
 8007e68:	bd80      	pop	{r7, pc}
 8007e6a:	bf00      	nop
 8007e6c:	e000ed04 	.word	0xe000ed04

08007e70 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b08a      	sub	sp, #40	@ 0x28
 8007e74:	af02      	add	r7, sp, #8
 8007e76:	60f8      	str	r0, [r7, #12]
 8007e78:	60b9      	str	r1, [r7, #8]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8007e7e:	2300      	movs	r3, #0
 8007e80:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	2b00      	cmp	r3, #0
 8007e86:	d02e      	beq.n	8007ee6 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8007e88:	2100      	movs	r1, #0
 8007e8a:	68ba      	ldr	r2, [r7, #8]
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	fba3 2302 	umull	r2, r3, r3, r2
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d000      	beq.n	8007e98 <xQueueGenericCreate+0x28>
 8007e96:	2101      	movs	r1, #1
 8007e98:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8007e9a:	2b00      	cmp	r3, #0
 8007e9c:	d123      	bne.n	8007ee6 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8007ea6:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8007eaa:	d81c      	bhi.n	8007ee6 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	68ba      	ldr	r2, [r7, #8]
 8007eb0:	fb02 f303 	mul.w	r3, r2, r3
 8007eb4:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	3350      	adds	r3, #80	@ 0x50
 8007eba:	4618      	mov	r0, r3
 8007ebc:	f001 ff70 	bl	8009da0 <pvPortMalloc>
 8007ec0:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8007ec2:	69fb      	ldr	r3, [r7, #28]
 8007ec4:	2b00      	cmp	r3, #0
 8007ec6:	d01d      	beq.n	8007f04 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	3350      	adds	r3, #80	@ 0x50
 8007ed0:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007ed2:	79fa      	ldrb	r2, [r7, #7]
 8007ed4:	69fb      	ldr	r3, [r7, #28]
 8007ed6:	9300      	str	r3, [sp, #0]
 8007ed8:	4613      	mov	r3, r2
 8007eda:	697a      	ldr	r2, [r7, #20]
 8007edc:	68b9      	ldr	r1, [r7, #8]
 8007ede:	68f8      	ldr	r0, [r7, #12]
 8007ee0:	f000 f815 	bl	8007f0e <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8007ee4:	e00e      	b.n	8007f04 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d10b      	bne.n	8007f04 <xQueueGenericCreate+0x94>
        __asm volatile
 8007eec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ef0:	f383 8811 	msr	BASEPRI, r3
 8007ef4:	f3bf 8f6f 	isb	sy
 8007ef8:	f3bf 8f4f 	dsb	sy
 8007efc:	613b      	str	r3, [r7, #16]
    }
 8007efe:	bf00      	nop
 8007f00:	bf00      	nop
 8007f02:	e7fd      	b.n	8007f00 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8007f04:	69fb      	ldr	r3, [r7, #28]
    }
 8007f06:	4618      	mov	r0, r3
 8007f08:	3720      	adds	r7, #32
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b084      	sub	sp, #16
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	60f8      	str	r0, [r7, #12]
 8007f16:	60b9      	str	r1, [r7, #8]
 8007f18:	607a      	str	r2, [r7, #4]
 8007f1a:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8007f1c:	68bb      	ldr	r3, [r7, #8]
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d103      	bne.n	8007f2a <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007f22:	69bb      	ldr	r3, [r7, #24]
 8007f24:	69ba      	ldr	r2, [r7, #24]
 8007f26:	601a      	str	r2, [r3, #0]
 8007f28:	e002      	b.n	8007f30 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8007f2a:	69bb      	ldr	r3, [r7, #24]
 8007f2c:	687a      	ldr	r2, [r7, #4]
 8007f2e:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8007f30:	69bb      	ldr	r3, [r7, #24]
 8007f32:	68fa      	ldr	r2, [r7, #12]
 8007f34:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8007f36:	69bb      	ldr	r3, [r7, #24]
 8007f38:	68ba      	ldr	r2, [r7, #8]
 8007f3a:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8007f3c:	2101      	movs	r1, #1
 8007f3e:	69b8      	ldr	r0, [r7, #24]
 8007f40:	f7ff ff04 	bl	8007d4c <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8007f44:	69bb      	ldr	r3, [r7, #24]
 8007f46:	78fa      	ldrb	r2, [r7, #3]
 8007f48:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8007f4c:	bf00      	nop
 8007f4e:	3710      	adds	r7, #16
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}

08007f54 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8007f54:	b580      	push	{r7, lr}
 8007f56:	b082      	sub	sp, #8
 8007f58:	af00      	add	r7, sp, #0
 8007f5a:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d00e      	beq.n	8007f80 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	2200      	movs	r2, #0
 8007f66:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8007f74:	2300      	movs	r3, #0
 8007f76:	2200      	movs	r2, #0
 8007f78:	2100      	movs	r1, #0
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f000 f81c 	bl	8007fb8 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8007f80:	bf00      	nop
 8007f82:	3708      	adds	r7, #8
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007f92:	2301      	movs	r3, #1
 8007f94:	617b      	str	r3, [r7, #20]
 8007f96:	2300      	movs	r3, #0
 8007f98:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8007f9a:	79fb      	ldrb	r3, [r7, #7]
 8007f9c:	461a      	mov	r2, r3
 8007f9e:	6939      	ldr	r1, [r7, #16]
 8007fa0:	6978      	ldr	r0, [r7, #20]
 8007fa2:	f7ff ff65 	bl	8007e70 <xQueueGenericCreate>
 8007fa6:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8007fa8:	68f8      	ldr	r0, [r7, #12]
 8007faa:	f7ff ffd3 	bl	8007f54 <prvInitialiseMutex>

        return xNewQueue;
 8007fae:	68fb      	ldr	r3, [r7, #12]
    }
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	3718      	adds	r7, #24
 8007fb4:	46bd      	mov	sp, r7
 8007fb6:	bd80      	pop	{r7, pc}

08007fb8 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8007fb8:	b580      	push	{r7, lr}
 8007fba:	b08c      	sub	sp, #48	@ 0x30
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
 8007fc4:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	62bb      	str	r3, [r7, #40]	@ 0x28

    configASSERT( pxQueue );
 8007fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d10b      	bne.n	8007fec <xQueueGenericSend+0x34>
        __asm volatile
 8007fd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fd8:	f383 8811 	msr	BASEPRI, r3
 8007fdc:	f3bf 8f6f 	isb	sy
 8007fe0:	f3bf 8f4f 	dsb	sy
 8007fe4:	623b      	str	r3, [r7, #32]
    }
 8007fe6:	bf00      	nop
 8007fe8:	bf00      	nop
 8007fea:	e7fd      	b.n	8007fe8 <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d103      	bne.n	8007ffa <xQueueGenericSend+0x42>
 8007ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d101      	bne.n	8007ffe <xQueueGenericSend+0x46>
 8007ffa:	2301      	movs	r3, #1
 8007ffc:	e000      	b.n	8008000 <xQueueGenericSend+0x48>
 8007ffe:	2300      	movs	r3, #0
 8008000:	2b00      	cmp	r3, #0
 8008002:	d10b      	bne.n	800801c <xQueueGenericSend+0x64>
        __asm volatile
 8008004:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008008:	f383 8811 	msr	BASEPRI, r3
 800800c:	f3bf 8f6f 	isb	sy
 8008010:	f3bf 8f4f 	dsb	sy
 8008014:	61fb      	str	r3, [r7, #28]
    }
 8008016:	bf00      	nop
 8008018:	bf00      	nop
 800801a:	e7fd      	b.n	8008018 <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	2b02      	cmp	r3, #2
 8008020:	d103      	bne.n	800802a <xQueueGenericSend+0x72>
 8008022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008026:	2b01      	cmp	r3, #1
 8008028:	d101      	bne.n	800802e <xQueueGenericSend+0x76>
 800802a:	2301      	movs	r3, #1
 800802c:	e000      	b.n	8008030 <xQueueGenericSend+0x78>
 800802e:	2300      	movs	r3, #0
 8008030:	2b00      	cmp	r3, #0
 8008032:	d10b      	bne.n	800804c <xQueueGenericSend+0x94>
        __asm volatile
 8008034:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008038:	f383 8811 	msr	BASEPRI, r3
 800803c:	f3bf 8f6f 	isb	sy
 8008040:	f3bf 8f4f 	dsb	sy
 8008044:	61bb      	str	r3, [r7, #24]
    }
 8008046:	bf00      	nop
 8008048:	bf00      	nop
 800804a:	e7fd      	b.n	8008048 <xQueueGenericSend+0x90>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 800804c:	f001 fd7e 	bl	8009b4c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008052:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008054:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008056:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008058:	429a      	cmp	r2, r3
 800805a:	d302      	bcc.n	8008062 <xQueueGenericSend+0xaa>
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	2b02      	cmp	r3, #2
 8008060:	d129      	bne.n	80080b6 <xQueueGenericSend+0xfe>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008062:	683a      	ldr	r2, [r7, #0]
 8008064:	68b9      	ldr	r1, [r7, #8]
 8008066:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008068:	f000 f990 	bl	800838c <prvCopyDataToQueue>
 800806c:	6278      	str	r0, [r7, #36]	@ 0x24

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800806e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008072:	2b00      	cmp	r3, #0
 8008074:	d010      	beq.n	8008098 <xQueueGenericSend+0xe0>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008078:	3324      	adds	r3, #36	@ 0x24
 800807a:	4618      	mov	r0, r3
 800807c:	f000 ff7e 	bl	8008f7c <xTaskRemoveFromEventList>
 8008080:	4603      	mov	r3, r0
 8008082:	2b00      	cmp	r3, #0
 8008084:	d013      	beq.n	80080ae <xQueueGenericSend+0xf6>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8008086:	4b40      	ldr	r3, [pc, #256]	@ (8008188 <xQueueGenericSend+0x1d0>)
 8008088:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800808c:	601a      	str	r2, [r3, #0]
 800808e:	f3bf 8f4f 	dsb	sy
 8008092:	f3bf 8f6f 	isb	sy
 8008096:	e00a      	b.n	80080ae <xQueueGenericSend+0xf6>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8008098:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800809a:	2b00      	cmp	r3, #0
 800809c:	d007      	beq.n	80080ae <xQueueGenericSend+0xf6>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 800809e:	4b3a      	ldr	r3, [pc, #232]	@ (8008188 <xQueueGenericSend+0x1d0>)
 80080a0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80080a4:	601a      	str	r2, [r3, #0]
 80080a6:	f3bf 8f4f 	dsb	sy
 80080aa:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 80080ae:	f001 fd7f 	bl	8009bb0 <vPortExitCritical>
                return pdPASS;
 80080b2:	2301      	movs	r3, #1
 80080b4:	e063      	b.n	800817e <xQueueGenericSend+0x1c6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d103      	bne.n	80080c4 <xQueueGenericSend+0x10c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 80080bc:	f001 fd78 	bl	8009bb0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 80080c0:	2300      	movs	r3, #0
 80080c2:	e05c      	b.n	800817e <xQueueGenericSend+0x1c6>
                }
                else if( xEntryTimeSet == pdFALSE )
 80080c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d106      	bne.n	80080d8 <xQueueGenericSend+0x120>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80080ca:	f107 0310 	add.w	r3, r7, #16
 80080ce:	4618      	mov	r0, r3
 80080d0:	f001 f82e 	bl	8009130 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80080d4:	2301      	movs	r3, #1
 80080d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80080d8:	f001 fd6a 	bl	8009bb0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80080dc:	f000 fc5c 	bl	8008998 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80080e0:	f001 fd34 	bl	8009b4c <vPortEnterCritical>
 80080e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080e6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80080ea:	b25b      	sxtb	r3, r3
 80080ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f0:	d103      	bne.n	80080fa <xQueueGenericSend+0x142>
 80080f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080f4:	2200      	movs	r2, #0
 80080f6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80080fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008100:	b25b      	sxtb	r3, r3
 8008102:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008106:	d103      	bne.n	8008110 <xQueueGenericSend+0x158>
 8008108:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800810a:	2200      	movs	r2, #0
 800810c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008110:	f001 fd4e 	bl	8009bb0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008114:	1d3a      	adds	r2, r7, #4
 8008116:	f107 0310 	add.w	r3, r7, #16
 800811a:	4611      	mov	r1, r2
 800811c:	4618      	mov	r0, r3
 800811e:	f001 f81d 	bl	800915c <xTaskCheckForTimeOut>
 8008122:	4603      	mov	r3, r0
 8008124:	2b00      	cmp	r3, #0
 8008126:	d124      	bne.n	8008172 <xQueueGenericSend+0x1ba>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008128:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800812a:	f000 fa01 	bl	8008530 <prvIsQueueFull>
 800812e:	4603      	mov	r3, r0
 8008130:	2b00      	cmp	r3, #0
 8008132:	d018      	beq.n	8008166 <xQueueGenericSend+0x1ae>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008136:	3310      	adds	r3, #16
 8008138:	687a      	ldr	r2, [r7, #4]
 800813a:	4611      	mov	r1, r2
 800813c:	4618      	mov	r0, r3
 800813e:	f000 fef7 	bl	8008f30 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8008142:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008144:	f000 f98c 	bl	8008460 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8008148:	f000 fc34 	bl	80089b4 <xTaskResumeAll>
 800814c:	4603      	mov	r3, r0
 800814e:	2b00      	cmp	r3, #0
 8008150:	f47f af7c 	bne.w	800804c <xQueueGenericSend+0x94>
                {
                    portYIELD_WITHIN_API();
 8008154:	4b0c      	ldr	r3, [pc, #48]	@ (8008188 <xQueueGenericSend+0x1d0>)
 8008156:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800815a:	601a      	str	r2, [r3, #0]
 800815c:	f3bf 8f4f 	dsb	sy
 8008160:	f3bf 8f6f 	isb	sy
 8008164:	e772      	b.n	800804c <xQueueGenericSend+0x94>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8008166:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008168:	f000 f97a 	bl	8008460 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800816c:	f000 fc22 	bl	80089b4 <xTaskResumeAll>
 8008170:	e76c      	b.n	800804c <xQueueGenericSend+0x94>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8008172:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008174:	f000 f974 	bl	8008460 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008178:	f000 fc1c 	bl	80089b4 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 800817c:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 800817e:	4618      	mov	r0, r3
 8008180:	3730      	adds	r7, #48	@ 0x30
 8008182:	46bd      	mov	sp, r7
 8008184:	bd80      	pop	{r7, pc}
 8008186:	bf00      	nop
 8008188:	e000ed04 	.word	0xe000ed04

0800818c <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b08c      	sub	sp, #48	@ 0x30
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8008196:	2300      	movs	r3, #0
 8008198:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 800819e:	2300      	movs	r3, #0
 80081a0:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 80081a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081a4:	2b00      	cmp	r3, #0
 80081a6:	d10b      	bne.n	80081c0 <xQueueSemaphoreTake+0x34>
        __asm volatile
 80081a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ac:	f383 8811 	msr	BASEPRI, r3
 80081b0:	f3bf 8f6f 	isb	sy
 80081b4:	f3bf 8f4f 	dsb	sy
 80081b8:	61bb      	str	r3, [r7, #24]
    }
 80081ba:	bf00      	nop
 80081bc:	bf00      	nop
 80081be:	e7fd      	b.n	80081bc <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 80081c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80081c4:	2b00      	cmp	r3, #0
 80081c6:	d00b      	beq.n	80081e0 <xQueueSemaphoreTake+0x54>
        __asm volatile
 80081c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081cc:	f383 8811 	msr	BASEPRI, r3
 80081d0:	f3bf 8f6f 	isb	sy
 80081d4:	f3bf 8f4f 	dsb	sy
 80081d8:	617b      	str	r3, [r7, #20]
    }
 80081da:	bf00      	nop
 80081dc:	bf00      	nop
 80081de:	e7fd      	b.n	80081dc <xQueueSemaphoreTake+0x50>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80081e0:	f001 fcb4 	bl	8009b4c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80081e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80081e8:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80081ea:	6a3b      	ldr	r3, [r7, #32]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d024      	beq.n	800823a <xQueueSemaphoreTake+0xae>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80081f0:	6a3b      	ldr	r3, [r7, #32]
 80081f2:	1e5a      	subs	r2, r3, #1
 80081f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081f6:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80081f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d104      	bne.n	800820a <xQueueSemaphoreTake+0x7e>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8008200:	f001 fade 	bl	80097c0 <pvTaskIncrementMutexHeldCount>
 8008204:	4602      	mov	r2, r0
 8008206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008208:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800820a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d00f      	beq.n	8008232 <xQueueSemaphoreTake+0xa6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008214:	3310      	adds	r3, #16
 8008216:	4618      	mov	r0, r3
 8008218:	f000 feb0 	bl	8008f7c <xTaskRemoveFromEventList>
 800821c:	4603      	mov	r3, r0
 800821e:	2b00      	cmp	r3, #0
 8008220:	d007      	beq.n	8008232 <xQueueSemaphoreTake+0xa6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8008222:	4b4d      	ldr	r3, [pc, #308]	@ (8008358 <xQueueSemaphoreTake+0x1cc>)
 8008224:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008228:	601a      	str	r2, [r3, #0]
 800822a:	f3bf 8f4f 	dsb	sy
 800822e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8008232:	f001 fcbd 	bl	8009bb0 <vPortExitCritical>
                return pdPASS;
 8008236:	2301      	movs	r3, #1
 8008238:	e089      	b.n	800834e <xQueueSemaphoreTake+0x1c2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	2b00      	cmp	r3, #0
 800823e:	d103      	bne.n	8008248 <xQueueSemaphoreTake+0xbc>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8008240:	f001 fcb6 	bl	8009bb0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 8008244:	2300      	movs	r3, #0
 8008246:	e082      	b.n	800834e <xQueueSemaphoreTake+0x1c2>
                }
                else if( xEntryTimeSet == pdFALSE )
 8008248:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800824a:	2b00      	cmp	r3, #0
 800824c:	d106      	bne.n	800825c <xQueueSemaphoreTake+0xd0>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800824e:	f107 030c 	add.w	r3, r7, #12
 8008252:	4618      	mov	r0, r3
 8008254:	f000 ff6c 	bl	8009130 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8008258:	2301      	movs	r3, #1
 800825a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800825c:	f001 fca8 	bl	8009bb0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8008260:	f000 fb9a 	bl	8008998 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8008264:	f001 fc72 	bl	8009b4c <vPortEnterCritical>
 8008268:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800826a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800826e:	b25b      	sxtb	r3, r3
 8008270:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008274:	d103      	bne.n	800827e <xQueueSemaphoreTake+0xf2>
 8008276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008278:	2200      	movs	r2, #0
 800827a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800827e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008280:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008284:	b25b      	sxtb	r3, r3
 8008286:	f1b3 3fff 	cmp.w	r3, #4294967295
 800828a:	d103      	bne.n	8008294 <xQueueSemaphoreTake+0x108>
 800828c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800828e:	2200      	movs	r2, #0
 8008290:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008294:	f001 fc8c 	bl	8009bb0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008298:	463a      	mov	r2, r7
 800829a:	f107 030c 	add.w	r3, r7, #12
 800829e:	4611      	mov	r1, r2
 80082a0:	4618      	mov	r0, r3
 80082a2:	f000 ff5b 	bl	800915c <xTaskCheckForTimeOut>
 80082a6:	4603      	mov	r3, r0
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	d132      	bne.n	8008312 <xQueueSemaphoreTake+0x186>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80082ac:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80082ae:	f000 f929 	bl	8008504 <prvIsQueueEmpty>
 80082b2:	4603      	mov	r3, r0
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d026      	beq.n	8008306 <xQueueSemaphoreTake+0x17a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80082b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d109      	bne.n	80082d4 <xQueueSemaphoreTake+0x148>
                    {
                        taskENTER_CRITICAL();
 80082c0:	f001 fc44 	bl	8009b4c <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80082c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082c6:	689b      	ldr	r3, [r3, #8]
 80082c8:	4618      	mov	r0, r3
 80082ca:	f001 f86d 	bl	80093a8 <xTaskPriorityInherit>
 80082ce:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 80082d0:	f001 fc6e 	bl	8009bb0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80082d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d6:	3324      	adds	r3, #36	@ 0x24
 80082d8:	683a      	ldr	r2, [r7, #0]
 80082da:	4611      	mov	r1, r2
 80082dc:	4618      	mov	r0, r3
 80082de:	f000 fe27 	bl	8008f30 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80082e2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80082e4:	f000 f8bc 	bl	8008460 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 80082e8:	f000 fb64 	bl	80089b4 <xTaskResumeAll>
 80082ec:	4603      	mov	r3, r0
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	f47f af76 	bne.w	80081e0 <xQueueSemaphoreTake+0x54>
                {
                    portYIELD_WITHIN_API();
 80082f4:	4b18      	ldr	r3, [pc, #96]	@ (8008358 <xQueueSemaphoreTake+0x1cc>)
 80082f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80082fa:	601a      	str	r2, [r3, #0]
 80082fc:	f3bf 8f4f 	dsb	sy
 8008300:	f3bf 8f6f 	isb	sy
 8008304:	e76c      	b.n	80081e0 <xQueueSemaphoreTake+0x54>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8008306:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008308:	f000 f8aa 	bl	8008460 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800830c:	f000 fb52 	bl	80089b4 <xTaskResumeAll>
 8008310:	e766      	b.n	80081e0 <xQueueSemaphoreTake+0x54>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8008312:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008314:	f000 f8a4 	bl	8008460 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8008318:	f000 fb4c 	bl	80089b4 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800831c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800831e:	f000 f8f1 	bl	8008504 <prvIsQueueEmpty>
 8008322:	4603      	mov	r3, r0
 8008324:	2b00      	cmp	r3, #0
 8008326:	f43f af5b 	beq.w	80081e0 <xQueueSemaphoreTake+0x54>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800832a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800832c:	2b00      	cmp	r3, #0
 800832e:	d00d      	beq.n	800834c <xQueueSemaphoreTake+0x1c0>
                    {
                        taskENTER_CRITICAL();
 8008330:	f001 fc0c 	bl	8009b4c <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8008334:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008336:	f000 f811 	bl	800835c <prvGetDisinheritPriorityAfterTimeout>
 800833a:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800833c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800833e:	689b      	ldr	r3, [r3, #8]
 8008340:	69f9      	ldr	r1, [r7, #28]
 8008342:	4618      	mov	r0, r3
 8008344:	f001 f97c 	bl	8009640 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8008348:	f001 fc32 	bl	8009bb0 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 800834c:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 800834e:	4618      	mov	r0, r3
 8008350:	3730      	adds	r7, #48	@ 0x30
 8008352:	46bd      	mov	sp, r7
 8008354:	bd80      	pop	{r7, pc}
 8008356:	bf00      	nop
 8008358:	e000ed04 	.word	0xe000ed04

0800835c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 800835c:	b480      	push	{r7}
 800835e:	b085      	sub	sp, #20
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008368:	2b00      	cmp	r3, #0
 800836a:	d006      	beq.n	800837a <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	f1c3 0305 	rsb	r3, r3, #5
 8008376:	60fb      	str	r3, [r7, #12]
 8008378:	e001      	b.n	800837e <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800837a:	2300      	movs	r3, #0
 800837c:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 800837e:	68fb      	ldr	r3, [r7, #12]
    }
 8008380:	4618      	mov	r0, r3
 8008382:	3714      	adds	r7, #20
 8008384:	46bd      	mov	sp, r7
 8008386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800838a:	4770      	bx	lr

0800838c <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 800838c:	b580      	push	{r7, lr}
 800838e:	b086      	sub	sp, #24
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8008398:	2300      	movs	r3, #0
 800839a:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80083a0:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d10d      	bne.n	80083c6 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	681b      	ldr	r3, [r3, #0]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d14d      	bne.n	800844e <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f001 f898 	bl	80094ec <xTaskPriorityDisinherit>
 80083bc:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	2200      	movs	r2, #0
 80083c2:	609a      	str	r2, [r3, #8]
 80083c4:	e043      	b.n	800844e <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d119      	bne.n	8008400 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	6858      	ldr	r0, [r3, #4]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083d4:	461a      	mov	r2, r3
 80083d6:	68b9      	ldr	r1, [r7, #8]
 80083d8:	f004 fa35 	bl	800c846 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	685a      	ldr	r2, [r3, #4]
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80083e4:	441a      	add	r2, r3
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	685a      	ldr	r2, [r3, #4]
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	689b      	ldr	r3, [r3, #8]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d32b      	bcc.n	800844e <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	681a      	ldr	r2, [r3, #0]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	605a      	str	r2, [r3, #4]
 80083fe:	e026      	b.n	800844e <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	68d8      	ldr	r0, [r3, #12]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008408:	461a      	mov	r2, r3
 800840a:	68b9      	ldr	r1, [r7, #8]
 800840c:	f004 fa1b 	bl	800c846 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	68da      	ldr	r2, [r3, #12]
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008418:	425b      	negs	r3, r3
 800841a:	441a      	add	r2, r3
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	68da      	ldr	r2, [r3, #12]
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	429a      	cmp	r2, r3
 800842a:	d207      	bcs.n	800843c <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	689a      	ldr	r2, [r3, #8]
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008434:	425b      	negs	r3, r3
 8008436:	441a      	add	r2, r3
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2b02      	cmp	r3, #2
 8008440:	d105      	bne.n	800844e <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008442:	693b      	ldr	r3, [r7, #16]
 8008444:	2b00      	cmp	r3, #0
 8008446:	d002      	beq.n	800844e <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8008448:	693b      	ldr	r3, [r7, #16]
 800844a:	3b01      	subs	r3, #1
 800844c:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800844e:	693b      	ldr	r3, [r7, #16]
 8008450:	1c5a      	adds	r2, r3, #1
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8008456:	697b      	ldr	r3, [r7, #20]
}
 8008458:	4618      	mov	r0, r3
 800845a:	3718      	adds	r7, #24
 800845c:	46bd      	mov	sp, r7
 800845e:	bd80      	pop	{r7, pc}

08008460 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008460:	b580      	push	{r7, lr}
 8008462:	b084      	sub	sp, #16
 8008464:	af00      	add	r7, sp, #0
 8008466:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8008468:	f001 fb70 	bl	8009b4c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008472:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8008474:	e011      	b.n	800849a <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800847a:	2b00      	cmp	r3, #0
 800847c:	d012      	beq.n	80084a4 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	3324      	adds	r3, #36	@ 0x24
 8008482:	4618      	mov	r0, r3
 8008484:	f000 fd7a 	bl	8008f7c <xTaskRemoveFromEventList>
 8008488:	4603      	mov	r3, r0
 800848a:	2b00      	cmp	r3, #0
 800848c:	d001      	beq.n	8008492 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 800848e:	f000 fecd 	bl	800922c <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8008492:	7bfb      	ldrb	r3, [r7, #15]
 8008494:	3b01      	subs	r3, #1
 8008496:	b2db      	uxtb	r3, r3
 8008498:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800849a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	dce9      	bgt.n	8008476 <prvUnlockQueue+0x16>
 80084a2:	e000      	b.n	80084a6 <prvUnlockQueue+0x46>
                    break;
 80084a4:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	22ff      	movs	r2, #255	@ 0xff
 80084aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 80084ae:	f001 fb7f 	bl	8009bb0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 80084b2:	f001 fb4b 	bl	8009b4c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80084bc:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 80084be:	e011      	b.n	80084e4 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	691b      	ldr	r3, [r3, #16]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d012      	beq.n	80084ee <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	3310      	adds	r3, #16
 80084cc:	4618      	mov	r0, r3
 80084ce:	f000 fd55 	bl	8008f7c <xTaskRemoveFromEventList>
 80084d2:	4603      	mov	r3, r0
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d001      	beq.n	80084dc <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 80084d8:	f000 fea8 	bl	800922c <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 80084dc:	7bbb      	ldrb	r3, [r7, #14]
 80084de:	3b01      	subs	r3, #1
 80084e0:	b2db      	uxtb	r3, r3
 80084e2:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 80084e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	dce9      	bgt.n	80084c0 <prvUnlockQueue+0x60>
 80084ec:	e000      	b.n	80084f0 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 80084ee:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	22ff      	movs	r2, #255	@ 0xff
 80084f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 80084f8:	f001 fb5a 	bl	8009bb0 <vPortExitCritical>
}
 80084fc:	bf00      	nop
 80084fe:	3710      	adds	r7, #16
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}

08008504 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b084      	sub	sp, #16
 8008508:	af00      	add	r7, sp, #0
 800850a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800850c:	f001 fb1e 	bl	8009b4c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008514:	2b00      	cmp	r3, #0
 8008516:	d102      	bne.n	800851e <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 8008518:	2301      	movs	r3, #1
 800851a:	60fb      	str	r3, [r7, #12]
 800851c:	e001      	b.n	8008522 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 800851e:	2300      	movs	r3, #0
 8008520:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8008522:	f001 fb45 	bl	8009bb0 <vPortExitCritical>

    return xReturn;
 8008526:	68fb      	ldr	r3, [r7, #12]
}
 8008528:	4618      	mov	r0, r3
 800852a:	3710      	adds	r7, #16
 800852c:	46bd      	mov	sp, r7
 800852e:	bd80      	pop	{r7, pc}

08008530 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 8008530:	b580      	push	{r7, lr}
 8008532:	b084      	sub	sp, #16
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8008538:	f001 fb08 	bl	8009b4c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008544:	429a      	cmp	r2, r3
 8008546:	d102      	bne.n	800854e <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 8008548:	2301      	movs	r3, #1
 800854a:	60fb      	str	r3, [r7, #12]
 800854c:	e001      	b.n	8008552 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 800854e:	2300      	movs	r3, #0
 8008550:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8008552:	f001 fb2d 	bl	8009bb0 <vPortExitCritical>

    return xReturn;
 8008556:	68fb      	ldr	r3, [r7, #12]
}
 8008558:	4618      	mov	r0, r3
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8008560:	b580      	push	{r7, lr}
 8008562:	b08c      	sub	sp, #48	@ 0x30
 8008564:	af04      	add	r7, sp, #16
 8008566:	60f8      	str	r0, [r7, #12]
 8008568:	60b9      	str	r1, [r7, #8]
 800856a:	603b      	str	r3, [r7, #0]
 800856c:	4613      	mov	r3, r2
 800856e:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008570:	88fb      	ldrh	r3, [r7, #6]
 8008572:	009b      	lsls	r3, r3, #2
 8008574:	4618      	mov	r0, r3
 8008576:	f001 fc13 	bl	8009da0 <pvPortMalloc>
 800857a:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 800857c:	697b      	ldr	r3, [r7, #20]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d013      	beq.n	80085aa <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008582:	2058      	movs	r0, #88	@ 0x58
 8008584:	f001 fc0c 	bl	8009da0 <pvPortMalloc>
 8008588:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 800858a:	69fb      	ldr	r3, [r7, #28]
 800858c:	2b00      	cmp	r3, #0
 800858e:	d008      	beq.n	80085a2 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8008590:	2258      	movs	r2, #88	@ 0x58
 8008592:	2100      	movs	r1, #0
 8008594:	69f8      	ldr	r0, [r7, #28]
 8008596:	f004 f8e8 	bl	800c76a <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 800859a:	69fb      	ldr	r3, [r7, #28]
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	631a      	str	r2, [r3, #48]	@ 0x30
 80085a0:	e005      	b.n	80085ae <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 80085a2:	6978      	ldr	r0, [r7, #20]
 80085a4:	f001 fcb8 	bl	8009f18 <vPortFree>
 80085a8:	e001      	b.n	80085ae <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 80085aa:	2300      	movs	r3, #0
 80085ac:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d013      	beq.n	80085dc <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80085b4:	88fa      	ldrh	r2, [r7, #6]
 80085b6:	2300      	movs	r3, #0
 80085b8:	9303      	str	r3, [sp, #12]
 80085ba:	69fb      	ldr	r3, [r7, #28]
 80085bc:	9302      	str	r3, [sp, #8]
 80085be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80085c0:	9301      	str	r3, [sp, #4]
 80085c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80085c4:	9300      	str	r3, [sp, #0]
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	68b9      	ldr	r1, [r7, #8]
 80085ca:	68f8      	ldr	r0, [r7, #12]
 80085cc:	f000 f80e 	bl	80085ec <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80085d0:	69f8      	ldr	r0, [r7, #28]
 80085d2:	f000 f89b 	bl	800870c <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80085d6:	2301      	movs	r3, #1
 80085d8:	61bb      	str	r3, [r7, #24]
 80085da:	e002      	b.n	80085e2 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80085dc:	f04f 33ff 	mov.w	r3, #4294967295
 80085e0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80085e2:	69bb      	ldr	r3, [r7, #24]
    }
 80085e4:	4618      	mov	r0, r3
 80085e6:	3720      	adds	r7, #32
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}

080085ec <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80085ec:	b580      	push	{r7, lr}
 80085ee:	b088      	sub	sp, #32
 80085f0:	af00      	add	r7, sp, #0
 80085f2:	60f8      	str	r0, [r7, #12]
 80085f4:	60b9      	str	r1, [r7, #8]
 80085f6:	607a      	str	r2, [r7, #4]
 80085f8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80085fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80085fc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	009b      	lsls	r3, r3, #2
 8008602:	461a      	mov	r2, r3
 8008604:	21a5      	movs	r1, #165	@ 0xa5
 8008606:	f004 f8b0 	bl	800c76a <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800860a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800860c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008614:	3b01      	subs	r3, #1
 8008616:	009b      	lsls	r3, r3, #2
 8008618:	4413      	add	r3, r2
 800861a:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800861c:	69bb      	ldr	r3, [r7, #24]
 800861e:	f023 0307 	bic.w	r3, r3, #7
 8008622:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008624:	69bb      	ldr	r3, [r7, #24]
 8008626:	f003 0307 	and.w	r3, r3, #7
 800862a:	2b00      	cmp	r3, #0
 800862c:	d00b      	beq.n	8008646 <prvInitialiseNewTask+0x5a>
        __asm volatile
 800862e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008632:	f383 8811 	msr	BASEPRI, r3
 8008636:	f3bf 8f6f 	isb	sy
 800863a:	f3bf 8f4f 	dsb	sy
 800863e:	617b      	str	r3, [r7, #20]
    }
 8008640:	bf00      	nop
 8008642:	bf00      	nop
 8008644:	e7fd      	b.n	8008642 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8008646:	68bb      	ldr	r3, [r7, #8]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d01e      	beq.n	800868a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800864c:	2300      	movs	r3, #0
 800864e:	61fb      	str	r3, [r7, #28]
 8008650:	e012      	b.n	8008678 <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008652:	68ba      	ldr	r2, [r7, #8]
 8008654:	69fb      	ldr	r3, [r7, #28]
 8008656:	4413      	add	r3, r2
 8008658:	7819      	ldrb	r1, [r3, #0]
 800865a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800865c:	69fb      	ldr	r3, [r7, #28]
 800865e:	4413      	add	r3, r2
 8008660:	3334      	adds	r3, #52	@ 0x34
 8008662:	460a      	mov	r2, r1
 8008664:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8008666:	68ba      	ldr	r2, [r7, #8]
 8008668:	69fb      	ldr	r3, [r7, #28]
 800866a:	4413      	add	r3, r2
 800866c:	781b      	ldrb	r3, [r3, #0]
 800866e:	2b00      	cmp	r3, #0
 8008670:	d006      	beq.n	8008680 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008672:	69fb      	ldr	r3, [r7, #28]
 8008674:	3301      	adds	r3, #1
 8008676:	61fb      	str	r3, [r7, #28]
 8008678:	69fb      	ldr	r3, [r7, #28]
 800867a:	2b09      	cmp	r3, #9
 800867c:	d9e9      	bls.n	8008652 <prvInitialiseNewTask+0x66>
 800867e:	e000      	b.n	8008682 <prvInitialiseNewTask+0x96>
            {
                break;
 8008680:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008684:	2200      	movs	r2, #0
 8008686:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800868a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800868c:	2b04      	cmp	r3, #4
 800868e:	d90b      	bls.n	80086a8 <prvInitialiseNewTask+0xbc>
        __asm volatile
 8008690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008694:	f383 8811 	msr	BASEPRI, r3
 8008698:	f3bf 8f6f 	isb	sy
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	613b      	str	r3, [r7, #16]
    }
 80086a2:	bf00      	nop
 80086a4:	bf00      	nop
 80086a6:	e7fd      	b.n	80086a4 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80086a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	d901      	bls.n	80086b2 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80086ae:	2304      	movs	r3, #4
 80086b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80086b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086b6:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 80086b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086bc:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80086be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086c0:	3304      	adds	r3, #4
 80086c2:	4618      	mov	r0, r3
 80086c4:	f7ff fad2 	bl	8007c6c <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80086c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086ca:	3318      	adds	r3, #24
 80086cc:	4618      	mov	r0, r3
 80086ce:	f7ff facd 	bl	8007c6c <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80086d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086d6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80086d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80086da:	f1c3 0205 	rsb	r2, r3, #5
 80086de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80086e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80086e6:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80086e8:	683a      	ldr	r2, [r7, #0]
 80086ea:	68f9      	ldr	r1, [r7, #12]
 80086ec:	69b8      	ldr	r0, [r7, #24]
 80086ee:	f001 f8fb 	bl	80098e8 <pxPortInitialiseStack>
 80086f2:	4602      	mov	r2, r0
 80086f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80086f6:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80086f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d002      	beq.n	8008704 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80086fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008700:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008702:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008704:	bf00      	nop
 8008706:	3720      	adds	r7, #32
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}

0800870c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 800870c:	b5b0      	push	{r4, r5, r7, lr}
 800870e:	b086      	sub	sp, #24
 8008710:	af02      	add	r7, sp, #8
 8008712:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8008714:	f001 fa1a 	bl	8009b4c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8008718:	4b4f      	ldr	r3, [pc, #316]	@ (8008858 <prvAddNewTaskToReadyList+0x14c>)
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	3301      	adds	r3, #1
 800871e:	4a4e      	ldr	r2, [pc, #312]	@ (8008858 <prvAddNewTaskToReadyList+0x14c>)
 8008720:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8008722:	4b4e      	ldr	r3, [pc, #312]	@ (800885c <prvAddNewTaskToReadyList+0x150>)
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	2b00      	cmp	r3, #0
 8008728:	d109      	bne.n	800873e <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 800872a:	4a4c      	ldr	r2, [pc, #304]	@ (800885c <prvAddNewTaskToReadyList+0x150>)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008730:	4b49      	ldr	r3, [pc, #292]	@ (8008858 <prvAddNewTaskToReadyList+0x14c>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	2b01      	cmp	r3, #1
 8008736:	d110      	bne.n	800875a <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8008738:	f000 fd9c 	bl	8009274 <prvInitialiseTaskLists>
 800873c:	e00d      	b.n	800875a <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800873e:	4b48      	ldr	r3, [pc, #288]	@ (8008860 <prvAddNewTaskToReadyList+0x154>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	2b00      	cmp	r3, #0
 8008744:	d109      	bne.n	800875a <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008746:	4b45      	ldr	r3, [pc, #276]	@ (800885c <prvAddNewTaskToReadyList+0x150>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008750:	429a      	cmp	r2, r3
 8008752:	d802      	bhi.n	800875a <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8008754:	4a41      	ldr	r2, [pc, #260]	@ (800885c <prvAddNewTaskToReadyList+0x150>)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 800875a:	4b42      	ldr	r3, [pc, #264]	@ (8008864 <prvAddNewTaskToReadyList+0x158>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3301      	adds	r3, #1
 8008760:	4a40      	ldr	r2, [pc, #256]	@ (8008864 <prvAddNewTaskToReadyList+0x158>)
 8008762:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8008764:	4b3f      	ldr	r3, [pc, #252]	@ (8008864 <prvAddNewTaskToReadyList+0x158>)
 8008766:	681a      	ldr	r2, [r3, #0]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2b00      	cmp	r3, #0
 8008770:	d016      	beq.n	80087a0 <prvAddNewTaskToReadyList+0x94>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4618      	mov	r0, r3
 8008776:	f003 f83f 	bl	800b7f8 <SEGGER_SYSVIEW_OnTaskCreate>
 800877a:	6878      	ldr	r0, [r7, #4]
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800878a:	461d      	mov	r5, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	461c      	mov	r4, r3
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008796:	1ae3      	subs	r3, r4, r3
 8008798:	9300      	str	r3, [sp, #0]
 800879a:	462b      	mov	r3, r5
 800879c:	f001 fd80 	bl	800a2a0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	4618      	mov	r0, r3
 80087a4:	f003 f8ac 	bl	800b900 <SEGGER_SYSVIEW_OnTaskStartReady>
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ac:	2201      	movs	r2, #1
 80087ae:	409a      	lsls	r2, r3
 80087b0:	4b2d      	ldr	r3, [pc, #180]	@ (8008868 <prvAddNewTaskToReadyList+0x15c>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	4a2c      	ldr	r2, [pc, #176]	@ (8008868 <prvAddNewTaskToReadyList+0x15c>)
 80087b8:	6013      	str	r3, [r2, #0]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087be:	492b      	ldr	r1, [pc, #172]	@ (800886c <prvAddNewTaskToReadyList+0x160>)
 80087c0:	4613      	mov	r3, r2
 80087c2:	009b      	lsls	r3, r3, #2
 80087c4:	4413      	add	r3, r2
 80087c6:	009b      	lsls	r3, r3, #2
 80087c8:	440b      	add	r3, r1
 80087ca:	3304      	adds	r3, #4
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	60fb      	str	r3, [r7, #12]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	68fa      	ldr	r2, [r7, #12]
 80087d4:	609a      	str	r2, [r3, #8]
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	689a      	ldr	r2, [r3, #8]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	60da      	str	r2, [r3, #12]
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	689b      	ldr	r3, [r3, #8]
 80087e2:	687a      	ldr	r2, [r7, #4]
 80087e4:	3204      	adds	r2, #4
 80087e6:	605a      	str	r2, [r3, #4]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	1d1a      	adds	r2, r3, #4
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	609a      	str	r2, [r3, #8]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087f4:	4613      	mov	r3, r2
 80087f6:	009b      	lsls	r3, r3, #2
 80087f8:	4413      	add	r3, r2
 80087fa:	009b      	lsls	r3, r3, #2
 80087fc:	4a1b      	ldr	r2, [pc, #108]	@ (800886c <prvAddNewTaskToReadyList+0x160>)
 80087fe:	441a      	add	r2, r3
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	615a      	str	r2, [r3, #20]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008808:	4918      	ldr	r1, [pc, #96]	@ (800886c <prvAddNewTaskToReadyList+0x160>)
 800880a:	4613      	mov	r3, r2
 800880c:	009b      	lsls	r3, r3, #2
 800880e:	4413      	add	r3, r2
 8008810:	009b      	lsls	r3, r3, #2
 8008812:	440b      	add	r3, r1
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	1c59      	adds	r1, r3, #1
 8008818:	4814      	ldr	r0, [pc, #80]	@ (800886c <prvAddNewTaskToReadyList+0x160>)
 800881a:	4613      	mov	r3, r2
 800881c:	009b      	lsls	r3, r3, #2
 800881e:	4413      	add	r3, r2
 8008820:	009b      	lsls	r3, r3, #2
 8008822:	4403      	add	r3, r0
 8008824:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8008826:	f001 f9c3 	bl	8009bb0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 800882a:	4b0d      	ldr	r3, [pc, #52]	@ (8008860 <prvAddNewTaskToReadyList+0x154>)
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	2b00      	cmp	r3, #0
 8008830:	d00e      	beq.n	8008850 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008832:	4b0a      	ldr	r3, [pc, #40]	@ (800885c <prvAddNewTaskToReadyList+0x150>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800883c:	429a      	cmp	r2, r3
 800883e:	d207      	bcs.n	8008850 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8008840:	4b0b      	ldr	r3, [pc, #44]	@ (8008870 <prvAddNewTaskToReadyList+0x164>)
 8008842:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008846:	601a      	str	r2, [r3, #0]
 8008848:	f3bf 8f4f 	dsb	sy
 800884c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8008850:	bf00      	nop
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	bdb0      	pop	{r4, r5, r7, pc}
 8008858:	20000574 	.word	0x20000574
 800885c:	2000049c 	.word	0x2000049c
 8008860:	20000580 	.word	0x20000580
 8008864:	20000590 	.word	0x20000590
 8008868:	2000057c 	.word	0x2000057c
 800886c:	200004a0 	.word	0x200004a0
 8008870:	e000ed04 	.word	0xe000ed04

08008874 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8008874:	b580      	push	{r7, lr}
 8008876:	b084      	sub	sp, #16
 8008878:	af00      	add	r7, sp, #0
 800887a:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 800887c:	2300      	movs	r3, #0
 800887e:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d018      	beq.n	80088b8 <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8008886:	4b14      	ldr	r3, [pc, #80]	@ (80088d8 <vTaskDelay+0x64>)
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00b      	beq.n	80088a6 <vTaskDelay+0x32>
        __asm volatile
 800888e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008892:	f383 8811 	msr	BASEPRI, r3
 8008896:	f3bf 8f6f 	isb	sy
 800889a:	f3bf 8f4f 	dsb	sy
 800889e:	60bb      	str	r3, [r7, #8]
    }
 80088a0:	bf00      	nop
 80088a2:	bf00      	nop
 80088a4:	e7fd      	b.n	80088a2 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 80088a6:	f000 f877 	bl	8008998 <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80088aa:	2100      	movs	r1, #0
 80088ac:	6878      	ldr	r0, [r7, #4]
 80088ae:	f000 ff9b 	bl	80097e8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 80088b2:	f000 f87f 	bl	80089b4 <xTaskResumeAll>
 80088b6:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 80088b8:	68fb      	ldr	r3, [r7, #12]
 80088ba:	2b00      	cmp	r3, #0
 80088bc:	d107      	bne.n	80088ce <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 80088be:	4b07      	ldr	r3, [pc, #28]	@ (80088dc <vTaskDelay+0x68>)
 80088c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80088c4:	601a      	str	r2, [r3, #0]
 80088c6:	f3bf 8f4f 	dsb	sy
 80088ca:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80088ce:	bf00      	nop
 80088d0:	3710      	adds	r7, #16
 80088d2:	46bd      	mov	sp, r7
 80088d4:	bd80      	pop	{r7, pc}
 80088d6:	bf00      	nop
 80088d8:	2000059c 	.word	0x2000059c
 80088dc:	e000ed04 	.word	0xe000ed04

080088e0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b086      	sub	sp, #24
 80088e4:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 80088e6:	4b24      	ldr	r3, [pc, #144]	@ (8008978 <vTaskStartScheduler+0x98>)
 80088e8:	9301      	str	r3, [sp, #4]
 80088ea:	2300      	movs	r3, #0
 80088ec:	9300      	str	r3, [sp, #0]
 80088ee:	2300      	movs	r3, #0
 80088f0:	2282      	movs	r2, #130	@ 0x82
 80088f2:	4922      	ldr	r1, [pc, #136]	@ (800897c <vTaskStartScheduler+0x9c>)
 80088f4:	4822      	ldr	r0, [pc, #136]	@ (8008980 <vTaskStartScheduler+0xa0>)
 80088f6:	f7ff fe33 	bl	8008560 <xTaskCreate>
 80088fa:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	2b01      	cmp	r3, #1
 8008900:	d124      	bne.n	800894c <vTaskStartScheduler+0x6c>
        __asm volatile
 8008902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008906:	f383 8811 	msr	BASEPRI, r3
 800890a:	f3bf 8f6f 	isb	sy
 800890e:	f3bf 8f4f 	dsb	sy
 8008912:	60bb      	str	r3, [r7, #8]
    }
 8008914:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8008916:	4b1b      	ldr	r3, [pc, #108]	@ (8008984 <vTaskStartScheduler+0xa4>)
 8008918:	f04f 32ff 	mov.w	r2, #4294967295
 800891c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800891e:	4b1a      	ldr	r3, [pc, #104]	@ (8008988 <vTaskStartScheduler+0xa8>)
 8008920:	2201      	movs	r2, #1
 8008922:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008924:	4b19      	ldr	r3, [pc, #100]	@ (800898c <vTaskStartScheduler+0xac>)
 8008926:	2200      	movs	r2, #0
 8008928:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 800892a:	4b19      	ldr	r3, [pc, #100]	@ (8008990 <vTaskStartScheduler+0xb0>)
 800892c:	681a      	ldr	r2, [r3, #0]
 800892e:	4b12      	ldr	r3, [pc, #72]	@ (8008978 <vTaskStartScheduler+0x98>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	429a      	cmp	r2, r3
 8008934:	d102      	bne.n	800893c <vTaskStartScheduler+0x5c>
 8008936:	f002 ff43 	bl	800b7c0 <SEGGER_SYSVIEW_OnIdle>
 800893a:	e004      	b.n	8008946 <vTaskStartScheduler+0x66>
 800893c:	4b14      	ldr	r3, [pc, #80]	@ (8008990 <vTaskStartScheduler+0xb0>)
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	4618      	mov	r0, r3
 8008942:	f002 ff9b 	bl	800b87c <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8008946:	f001 f85d 	bl	8009a04 <xPortStartScheduler>
 800894a:	e00f      	b.n	800896c <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008952:	d10b      	bne.n	800896c <vTaskStartScheduler+0x8c>
        __asm volatile
 8008954:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008958:	f383 8811 	msr	BASEPRI, r3
 800895c:	f3bf 8f6f 	isb	sy
 8008960:	f3bf 8f4f 	dsb	sy
 8008964:	607b      	str	r3, [r7, #4]
    }
 8008966:	bf00      	nop
 8008968:	bf00      	nop
 800896a:	e7fd      	b.n	8008968 <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800896c:	4b09      	ldr	r3, [pc, #36]	@ (8008994 <vTaskStartScheduler+0xb4>)
 800896e:	681b      	ldr	r3, [r3, #0]
}
 8008970:	bf00      	nop
 8008972:	3710      	adds	r7, #16
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}
 8008978:	20000598 	.word	0x20000598
 800897c:	0800fa50 	.word	0x0800fa50
 8008980:	08009245 	.word	0x08009245
 8008984:	20000594 	.word	0x20000594
 8008988:	20000580 	.word	0x20000580
 800898c:	20000578 	.word	0x20000578
 8008990:	2000049c 	.word	0x2000049c
 8008994:	2000000c 	.word	0x2000000c

08008998 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8008998:	b480      	push	{r7}
 800899a:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 800899c:	4b04      	ldr	r3, [pc, #16]	@ (80089b0 <vTaskSuspendAll+0x18>)
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	3301      	adds	r3, #1
 80089a2:	4a03      	ldr	r2, [pc, #12]	@ (80089b0 <vTaskSuspendAll+0x18>)
 80089a4:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 80089a6:	bf00      	nop
 80089a8:	46bd      	mov	sp, r7
 80089aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ae:	4770      	bx	lr
 80089b0:	2000059c 	.word	0x2000059c

080089b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b088      	sub	sp, #32
 80089b8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 80089ba:	2300      	movs	r3, #0
 80089bc:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 80089be:	2300      	movs	r3, #0
 80089c0:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 80089c2:	4b73      	ldr	r3, [pc, #460]	@ (8008b90 <xTaskResumeAll+0x1dc>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d10b      	bne.n	80089e2 <xTaskResumeAll+0x2e>
        __asm volatile
 80089ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089ce:	f383 8811 	msr	BASEPRI, r3
 80089d2:	f3bf 8f6f 	isb	sy
 80089d6:	f3bf 8f4f 	dsb	sy
 80089da:	607b      	str	r3, [r7, #4]
    }
 80089dc:	bf00      	nop
 80089de:	bf00      	nop
 80089e0:	e7fd      	b.n	80089de <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 80089e2:	f001 f8b3 	bl	8009b4c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 80089e6:	4b6a      	ldr	r3, [pc, #424]	@ (8008b90 <xTaskResumeAll+0x1dc>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	3b01      	subs	r3, #1
 80089ec:	4a68      	ldr	r2, [pc, #416]	@ (8008b90 <xTaskResumeAll+0x1dc>)
 80089ee:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80089f0:	4b67      	ldr	r3, [pc, #412]	@ (8008b90 <xTaskResumeAll+0x1dc>)
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	2b00      	cmp	r3, #0
 80089f6:	f040 80c4 	bne.w	8008b82 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80089fa:	4b66      	ldr	r3, [pc, #408]	@ (8008b94 <xTaskResumeAll+0x1e0>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	f000 80bf 	beq.w	8008b82 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008a04:	e08e      	b.n	8008b24 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008a06:	4b64      	ldr	r3, [pc, #400]	@ (8008b98 <xTaskResumeAll+0x1e4>)
 8008a08:	68db      	ldr	r3, [r3, #12]
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8008a0e:	69fb      	ldr	r3, [r7, #28]
 8008a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a12:	613b      	str	r3, [r7, #16]
 8008a14:	69fb      	ldr	r3, [r7, #28]
 8008a16:	69db      	ldr	r3, [r3, #28]
 8008a18:	69fa      	ldr	r2, [r7, #28]
 8008a1a:	6a12      	ldr	r2, [r2, #32]
 8008a1c:	609a      	str	r2, [r3, #8]
 8008a1e:	69fb      	ldr	r3, [r7, #28]
 8008a20:	6a1b      	ldr	r3, [r3, #32]
 8008a22:	69fa      	ldr	r2, [r7, #28]
 8008a24:	69d2      	ldr	r2, [r2, #28]
 8008a26:	605a      	str	r2, [r3, #4]
 8008a28:	693b      	ldr	r3, [r7, #16]
 8008a2a:	685a      	ldr	r2, [r3, #4]
 8008a2c:	69fb      	ldr	r3, [r7, #28]
 8008a2e:	3318      	adds	r3, #24
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d103      	bne.n	8008a3c <xTaskResumeAll+0x88>
 8008a34:	69fb      	ldr	r3, [r7, #28]
 8008a36:	6a1a      	ldr	r2, [r3, #32]
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	605a      	str	r2, [r3, #4]
 8008a3c:	69fb      	ldr	r3, [r7, #28]
 8008a3e:	2200      	movs	r2, #0
 8008a40:	629a      	str	r2, [r3, #40]	@ 0x28
 8008a42:	693b      	ldr	r3, [r7, #16]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	1e5a      	subs	r2, r3, #1
 8008a48:	693b      	ldr	r3, [r7, #16]
 8008a4a:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008a4c:	69fb      	ldr	r3, [r7, #28]
 8008a4e:	695b      	ldr	r3, [r3, #20]
 8008a50:	60fb      	str	r3, [r7, #12]
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	689b      	ldr	r3, [r3, #8]
 8008a56:	69fa      	ldr	r2, [r7, #28]
 8008a58:	68d2      	ldr	r2, [r2, #12]
 8008a5a:	609a      	str	r2, [r3, #8]
 8008a5c:	69fb      	ldr	r3, [r7, #28]
 8008a5e:	68db      	ldr	r3, [r3, #12]
 8008a60:	69fa      	ldr	r2, [r7, #28]
 8008a62:	6892      	ldr	r2, [r2, #8]
 8008a64:	605a      	str	r2, [r3, #4]
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	685a      	ldr	r2, [r3, #4]
 8008a6a:	69fb      	ldr	r3, [r7, #28]
 8008a6c:	3304      	adds	r3, #4
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d103      	bne.n	8008a7a <xTaskResumeAll+0xc6>
 8008a72:	69fb      	ldr	r3, [r7, #28]
 8008a74:	68da      	ldr	r2, [r3, #12]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	605a      	str	r2, [r3, #4]
 8008a7a:	69fb      	ldr	r3, [r7, #28]
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	615a      	str	r2, [r3, #20]
 8008a80:	68fb      	ldr	r3, [r7, #12]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	1e5a      	subs	r2, r3, #1
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8008a8a:	69fb      	ldr	r3, [r7, #28]
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	f002 ff37 	bl	800b900 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008a92:	69fb      	ldr	r3, [r7, #28]
 8008a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a96:	2201      	movs	r2, #1
 8008a98:	409a      	lsls	r2, r3
 8008a9a:	4b40      	ldr	r3, [pc, #256]	@ (8008b9c <xTaskResumeAll+0x1e8>)
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4313      	orrs	r3, r2
 8008aa0:	4a3e      	ldr	r2, [pc, #248]	@ (8008b9c <xTaskResumeAll+0x1e8>)
 8008aa2:	6013      	str	r3, [r2, #0]
 8008aa4:	69fb      	ldr	r3, [r7, #28]
 8008aa6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008aa8:	493d      	ldr	r1, [pc, #244]	@ (8008ba0 <xTaskResumeAll+0x1ec>)
 8008aaa:	4613      	mov	r3, r2
 8008aac:	009b      	lsls	r3, r3, #2
 8008aae:	4413      	add	r3, r2
 8008ab0:	009b      	lsls	r3, r3, #2
 8008ab2:	440b      	add	r3, r1
 8008ab4:	3304      	adds	r3, #4
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	60bb      	str	r3, [r7, #8]
 8008aba:	69fb      	ldr	r3, [r7, #28]
 8008abc:	68ba      	ldr	r2, [r7, #8]
 8008abe:	609a      	str	r2, [r3, #8]
 8008ac0:	68bb      	ldr	r3, [r7, #8]
 8008ac2:	689a      	ldr	r2, [r3, #8]
 8008ac4:	69fb      	ldr	r3, [r7, #28]
 8008ac6:	60da      	str	r2, [r3, #12]
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	689b      	ldr	r3, [r3, #8]
 8008acc:	69fa      	ldr	r2, [r7, #28]
 8008ace:	3204      	adds	r2, #4
 8008ad0:	605a      	str	r2, [r3, #4]
 8008ad2:	69fb      	ldr	r3, [r7, #28]
 8008ad4:	1d1a      	adds	r2, r3, #4
 8008ad6:	68bb      	ldr	r3, [r7, #8]
 8008ad8:	609a      	str	r2, [r3, #8]
 8008ada:	69fb      	ldr	r3, [r7, #28]
 8008adc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ade:	4613      	mov	r3, r2
 8008ae0:	009b      	lsls	r3, r3, #2
 8008ae2:	4413      	add	r3, r2
 8008ae4:	009b      	lsls	r3, r3, #2
 8008ae6:	4a2e      	ldr	r2, [pc, #184]	@ (8008ba0 <xTaskResumeAll+0x1ec>)
 8008ae8:	441a      	add	r2, r3
 8008aea:	69fb      	ldr	r3, [r7, #28]
 8008aec:	615a      	str	r2, [r3, #20]
 8008aee:	69fb      	ldr	r3, [r7, #28]
 8008af0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008af2:	492b      	ldr	r1, [pc, #172]	@ (8008ba0 <xTaskResumeAll+0x1ec>)
 8008af4:	4613      	mov	r3, r2
 8008af6:	009b      	lsls	r3, r3, #2
 8008af8:	4413      	add	r3, r2
 8008afa:	009b      	lsls	r3, r3, #2
 8008afc:	440b      	add	r3, r1
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	1c59      	adds	r1, r3, #1
 8008b02:	4827      	ldr	r0, [pc, #156]	@ (8008ba0 <xTaskResumeAll+0x1ec>)
 8008b04:	4613      	mov	r3, r2
 8008b06:	009b      	lsls	r3, r3, #2
 8008b08:	4413      	add	r3, r2
 8008b0a:	009b      	lsls	r3, r3, #2
 8008b0c:	4403      	add	r3, r0
 8008b0e:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8008b10:	69fb      	ldr	r3, [r7, #28]
 8008b12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b14:	4b23      	ldr	r3, [pc, #140]	@ (8008ba4 <xTaskResumeAll+0x1f0>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b1a:	429a      	cmp	r2, r3
 8008b1c:	d302      	bcc.n	8008b24 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8008b1e:	4b22      	ldr	r3, [pc, #136]	@ (8008ba8 <xTaskResumeAll+0x1f4>)
 8008b20:	2201      	movs	r2, #1
 8008b22:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008b24:	4b1c      	ldr	r3, [pc, #112]	@ (8008b98 <xTaskResumeAll+0x1e4>)
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	f47f af6c 	bne.w	8008a06 <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8008b2e:	69fb      	ldr	r3, [r7, #28]
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d001      	beq.n	8008b38 <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8008b34:	f000 fc1c 	bl	8009370 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008b38:	4b1c      	ldr	r3, [pc, #112]	@ (8008bac <xTaskResumeAll+0x1f8>)
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8008b3e:	697b      	ldr	r3, [r7, #20]
 8008b40:	2b00      	cmp	r3, #0
 8008b42:	d010      	beq.n	8008b66 <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8008b44:	f000 f86e 	bl	8008c24 <xTaskIncrementTick>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d002      	beq.n	8008b54 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8008b4e:	4b16      	ldr	r3, [pc, #88]	@ (8008ba8 <xTaskResumeAll+0x1f4>)
 8008b50:	2201      	movs	r2, #1
 8008b52:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8008b54:	697b      	ldr	r3, [r7, #20]
 8008b56:	3b01      	subs	r3, #1
 8008b58:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d1f1      	bne.n	8008b44 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8008b60:	4b12      	ldr	r3, [pc, #72]	@ (8008bac <xTaskResumeAll+0x1f8>)
 8008b62:	2200      	movs	r2, #0
 8008b64:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8008b66:	4b10      	ldr	r3, [pc, #64]	@ (8008ba8 <xTaskResumeAll+0x1f4>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d009      	beq.n	8008b82 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8008b6e:	2301      	movs	r3, #1
 8008b70:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8008b72:	4b0f      	ldr	r3, [pc, #60]	@ (8008bb0 <xTaskResumeAll+0x1fc>)
 8008b74:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b78:	601a      	str	r2, [r3, #0]
 8008b7a:	f3bf 8f4f 	dsb	sy
 8008b7e:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8008b82:	f001 f815 	bl	8009bb0 <vPortExitCritical>

    return xAlreadyYielded;
 8008b86:	69bb      	ldr	r3, [r7, #24]
}
 8008b88:	4618      	mov	r0, r3
 8008b8a:	3720      	adds	r7, #32
 8008b8c:	46bd      	mov	sp, r7
 8008b8e:	bd80      	pop	{r7, pc}
 8008b90:	2000059c 	.word	0x2000059c
 8008b94:	20000574 	.word	0x20000574
 8008b98:	20000534 	.word	0x20000534
 8008b9c:	2000057c 	.word	0x2000057c
 8008ba0:	200004a0 	.word	0x200004a0
 8008ba4:	2000049c 	.word	0x2000049c
 8008ba8:	20000588 	.word	0x20000588
 8008bac:	20000584 	.word	0x20000584
 8008bb0:	e000ed04 	.word	0xe000ed04

08008bb4 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008bba:	f001 f8af 	bl	8009d1c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8008bc2:	4b04      	ldr	r3, [pc, #16]	@ (8008bd4 <xTaskGetTickCountFromISR+0x20>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 8008bc8:	683b      	ldr	r3, [r7, #0]
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	3708      	adds	r7, #8
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd80      	pop	{r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	20000578 	.word	0x20000578

08008bd8 <pcTaskGetName>:
    return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char * pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8008bd8:	b480      	push	{r7}
 8008bda:	b085      	sub	sp, #20
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	6078      	str	r0, [r7, #4]
    TCB_t * pxTCB;

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d102      	bne.n	8008bec <pcTaskGetName+0x14>
 8008be6:	4b0e      	ldr	r3, [pc, #56]	@ (8008c20 <pcTaskGetName+0x48>)
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	e000      	b.n	8008bee <pcTaskGetName+0x16>
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d10b      	bne.n	8008c0e <pcTaskGetName+0x36>
        __asm volatile
 8008bf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008bfa:	f383 8811 	msr	BASEPRI, r3
 8008bfe:	f3bf 8f6f 	isb	sy
 8008c02:	f3bf 8f4f 	dsb	sy
 8008c06:	60bb      	str	r3, [r7, #8]
    }
 8008c08:	bf00      	nop
 8008c0a:	bf00      	nop
 8008c0c:	e7fd      	b.n	8008c0a <pcTaskGetName+0x32>
    return &( pxTCB->pcTaskName[ 0 ] );
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	3334      	adds	r3, #52	@ 0x34
}
 8008c12:	4618      	mov	r0, r3
 8008c14:	3714      	adds	r7, #20
 8008c16:	46bd      	mov	sp, r7
 8008c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1c:	4770      	bx	lr
 8008c1e:	bf00      	nop
 8008c20:	2000049c 	.word	0x2000049c

08008c24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b08a      	sub	sp, #40	@ 0x28
 8008c28:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008c2e:	4b80      	ldr	r3, [pc, #512]	@ (8008e30 <xTaskIncrementTick+0x20c>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	2b00      	cmp	r3, #0
 8008c34:	f040 80f1 	bne.w	8008e1a <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008c38:	4b7e      	ldr	r3, [pc, #504]	@ (8008e34 <xTaskIncrementTick+0x210>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	3301      	adds	r3, #1
 8008c3e:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8008c40:	4a7c      	ldr	r2, [pc, #496]	@ (8008e34 <xTaskIncrementTick+0x210>)
 8008c42:	6a3b      	ldr	r3, [r7, #32]
 8008c44:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008c46:	6a3b      	ldr	r3, [r7, #32]
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d121      	bne.n	8008c90 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8008c4c:	4b7a      	ldr	r3, [pc, #488]	@ (8008e38 <xTaskIncrementTick+0x214>)
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00b      	beq.n	8008c6e <xTaskIncrementTick+0x4a>
        __asm volatile
 8008c56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008c5a:	f383 8811 	msr	BASEPRI, r3
 8008c5e:	f3bf 8f6f 	isb	sy
 8008c62:	f3bf 8f4f 	dsb	sy
 8008c66:	607b      	str	r3, [r7, #4]
    }
 8008c68:	bf00      	nop
 8008c6a:	bf00      	nop
 8008c6c:	e7fd      	b.n	8008c6a <xTaskIncrementTick+0x46>
 8008c6e:	4b72      	ldr	r3, [pc, #456]	@ (8008e38 <xTaskIncrementTick+0x214>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	61fb      	str	r3, [r7, #28]
 8008c74:	4b71      	ldr	r3, [pc, #452]	@ (8008e3c <xTaskIncrementTick+0x218>)
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	4a6f      	ldr	r2, [pc, #444]	@ (8008e38 <xTaskIncrementTick+0x214>)
 8008c7a:	6013      	str	r3, [r2, #0]
 8008c7c:	4a6f      	ldr	r2, [pc, #444]	@ (8008e3c <xTaskIncrementTick+0x218>)
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	6013      	str	r3, [r2, #0]
 8008c82:	4b6f      	ldr	r3, [pc, #444]	@ (8008e40 <xTaskIncrementTick+0x21c>)
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	3301      	adds	r3, #1
 8008c88:	4a6d      	ldr	r2, [pc, #436]	@ (8008e40 <xTaskIncrementTick+0x21c>)
 8008c8a:	6013      	str	r3, [r2, #0]
 8008c8c:	f000 fb70 	bl	8009370 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8008c90:	4b6c      	ldr	r3, [pc, #432]	@ (8008e44 <xTaskIncrementTick+0x220>)
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	6a3a      	ldr	r2, [r7, #32]
 8008c96:	429a      	cmp	r2, r3
 8008c98:	f0c0 80aa 	bcc.w	8008df0 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008c9c:	4b66      	ldr	r3, [pc, #408]	@ (8008e38 <xTaskIncrementTick+0x214>)
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d104      	bne.n	8008cb0 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008ca6:	4b67      	ldr	r3, [pc, #412]	@ (8008e44 <xTaskIncrementTick+0x220>)
 8008ca8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cac:	601a      	str	r2, [r3, #0]
                    break;
 8008cae:	e09f      	b.n	8008df0 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008cb0:	4b61      	ldr	r3, [pc, #388]	@ (8008e38 <xTaskIncrementTick+0x214>)
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68db      	ldr	r3, [r3, #12]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008cba:	69bb      	ldr	r3, [r7, #24]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 8008cc0:	6a3a      	ldr	r2, [r7, #32]
 8008cc2:	697b      	ldr	r3, [r7, #20]
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	d203      	bcs.n	8008cd0 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8008cc8:	4a5e      	ldr	r2, [pc, #376]	@ (8008e44 <xTaskIncrementTick+0x220>)
 8008cca:	697b      	ldr	r3, [r7, #20]
 8008ccc:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8008cce:	e08f      	b.n	8008df0 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8008cd0:	69bb      	ldr	r3, [r7, #24]
 8008cd2:	695b      	ldr	r3, [r3, #20]
 8008cd4:	613b      	str	r3, [r7, #16]
 8008cd6:	69bb      	ldr	r3, [r7, #24]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	69ba      	ldr	r2, [r7, #24]
 8008cdc:	68d2      	ldr	r2, [r2, #12]
 8008cde:	609a      	str	r2, [r3, #8]
 8008ce0:	69bb      	ldr	r3, [r7, #24]
 8008ce2:	68db      	ldr	r3, [r3, #12]
 8008ce4:	69ba      	ldr	r2, [r7, #24]
 8008ce6:	6892      	ldr	r2, [r2, #8]
 8008ce8:	605a      	str	r2, [r3, #4]
 8008cea:	693b      	ldr	r3, [r7, #16]
 8008cec:	685a      	ldr	r2, [r3, #4]
 8008cee:	69bb      	ldr	r3, [r7, #24]
 8008cf0:	3304      	adds	r3, #4
 8008cf2:	429a      	cmp	r2, r3
 8008cf4:	d103      	bne.n	8008cfe <xTaskIncrementTick+0xda>
 8008cf6:	69bb      	ldr	r3, [r7, #24]
 8008cf8:	68da      	ldr	r2, [r3, #12]
 8008cfa:	693b      	ldr	r3, [r7, #16]
 8008cfc:	605a      	str	r2, [r3, #4]
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	2200      	movs	r2, #0
 8008d02:	615a      	str	r2, [r3, #20]
 8008d04:	693b      	ldr	r3, [r7, #16]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	1e5a      	subs	r2, r3, #1
 8008d0a:	693b      	ldr	r3, [r7, #16]
 8008d0c:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008d0e:	69bb      	ldr	r3, [r7, #24]
 8008d10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d01e      	beq.n	8008d54 <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8008d16:	69bb      	ldr	r3, [r7, #24]
 8008d18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d1a:	60fb      	str	r3, [r7, #12]
 8008d1c:	69bb      	ldr	r3, [r7, #24]
 8008d1e:	69db      	ldr	r3, [r3, #28]
 8008d20:	69ba      	ldr	r2, [r7, #24]
 8008d22:	6a12      	ldr	r2, [r2, #32]
 8008d24:	609a      	str	r2, [r3, #8]
 8008d26:	69bb      	ldr	r3, [r7, #24]
 8008d28:	6a1b      	ldr	r3, [r3, #32]
 8008d2a:	69ba      	ldr	r2, [r7, #24]
 8008d2c:	69d2      	ldr	r2, [r2, #28]
 8008d2e:	605a      	str	r2, [r3, #4]
 8008d30:	68fb      	ldr	r3, [r7, #12]
 8008d32:	685a      	ldr	r2, [r3, #4]
 8008d34:	69bb      	ldr	r3, [r7, #24]
 8008d36:	3318      	adds	r3, #24
 8008d38:	429a      	cmp	r2, r3
 8008d3a:	d103      	bne.n	8008d44 <xTaskIncrementTick+0x120>
 8008d3c:	69bb      	ldr	r3, [r7, #24]
 8008d3e:	6a1a      	ldr	r2, [r3, #32]
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	605a      	str	r2, [r3, #4]
 8008d44:	69bb      	ldr	r3, [r7, #24]
 8008d46:	2200      	movs	r2, #0
 8008d48:	629a      	str	r2, [r3, #40]	@ 0x28
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	1e5a      	subs	r2, r3, #1
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8008d54:	69bb      	ldr	r3, [r7, #24]
 8008d56:	4618      	mov	r0, r3
 8008d58:	f002 fdd2 	bl	800b900 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008d5c:	69bb      	ldr	r3, [r7, #24]
 8008d5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d60:	2201      	movs	r2, #1
 8008d62:	409a      	lsls	r2, r3
 8008d64:	4b38      	ldr	r3, [pc, #224]	@ (8008e48 <xTaskIncrementTick+0x224>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4313      	orrs	r3, r2
 8008d6a:	4a37      	ldr	r2, [pc, #220]	@ (8008e48 <xTaskIncrementTick+0x224>)
 8008d6c:	6013      	str	r3, [r2, #0]
 8008d6e:	69bb      	ldr	r3, [r7, #24]
 8008d70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008d72:	4936      	ldr	r1, [pc, #216]	@ (8008e4c <xTaskIncrementTick+0x228>)
 8008d74:	4613      	mov	r3, r2
 8008d76:	009b      	lsls	r3, r3, #2
 8008d78:	4413      	add	r3, r2
 8008d7a:	009b      	lsls	r3, r3, #2
 8008d7c:	440b      	add	r3, r1
 8008d7e:	3304      	adds	r3, #4
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	60bb      	str	r3, [r7, #8]
 8008d84:	69bb      	ldr	r3, [r7, #24]
 8008d86:	68ba      	ldr	r2, [r7, #8]
 8008d88:	609a      	str	r2, [r3, #8]
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	689a      	ldr	r2, [r3, #8]
 8008d8e:	69bb      	ldr	r3, [r7, #24]
 8008d90:	60da      	str	r2, [r3, #12]
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	689b      	ldr	r3, [r3, #8]
 8008d96:	69ba      	ldr	r2, [r7, #24]
 8008d98:	3204      	adds	r2, #4
 8008d9a:	605a      	str	r2, [r3, #4]
 8008d9c:	69bb      	ldr	r3, [r7, #24]
 8008d9e:	1d1a      	adds	r2, r3, #4
 8008da0:	68bb      	ldr	r3, [r7, #8]
 8008da2:	609a      	str	r2, [r3, #8]
 8008da4:	69bb      	ldr	r3, [r7, #24]
 8008da6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008da8:	4613      	mov	r3, r2
 8008daa:	009b      	lsls	r3, r3, #2
 8008dac:	4413      	add	r3, r2
 8008dae:	009b      	lsls	r3, r3, #2
 8008db0:	4a26      	ldr	r2, [pc, #152]	@ (8008e4c <xTaskIncrementTick+0x228>)
 8008db2:	441a      	add	r2, r3
 8008db4:	69bb      	ldr	r3, [r7, #24]
 8008db6:	615a      	str	r2, [r3, #20]
 8008db8:	69bb      	ldr	r3, [r7, #24]
 8008dba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dbc:	4923      	ldr	r1, [pc, #140]	@ (8008e4c <xTaskIncrementTick+0x228>)
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	009b      	lsls	r3, r3, #2
 8008dc2:	4413      	add	r3, r2
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	440b      	add	r3, r1
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	1c59      	adds	r1, r3, #1
 8008dcc:	481f      	ldr	r0, [pc, #124]	@ (8008e4c <xTaskIncrementTick+0x228>)
 8008dce:	4613      	mov	r3, r2
 8008dd0:	009b      	lsls	r3, r3, #2
 8008dd2:	4413      	add	r3, r2
 8008dd4:	009b      	lsls	r3, r3, #2
 8008dd6:	4403      	add	r3, r0
 8008dd8:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008dda:	69bb      	ldr	r3, [r7, #24]
 8008ddc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008dde:	4b1c      	ldr	r3, [pc, #112]	@ (8008e50 <xTaskIncrementTick+0x22c>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008de4:	429a      	cmp	r2, r3
 8008de6:	f67f af59 	bls.w	8008c9c <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8008dea:	2301      	movs	r3, #1
 8008dec:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008dee:	e755      	b.n	8008c9c <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008df0:	4b17      	ldr	r3, [pc, #92]	@ (8008e50 <xTaskIncrementTick+0x22c>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008df6:	4915      	ldr	r1, [pc, #84]	@ (8008e4c <xTaskIncrementTick+0x228>)
 8008df8:	4613      	mov	r3, r2
 8008dfa:	009b      	lsls	r3, r3, #2
 8008dfc:	4413      	add	r3, r2
 8008dfe:	009b      	lsls	r3, r3, #2
 8008e00:	440b      	add	r3, r1
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	2b01      	cmp	r3, #1
 8008e06:	d901      	bls.n	8008e0c <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8008e08:	2301      	movs	r3, #1
 8008e0a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8008e0c:	4b11      	ldr	r3, [pc, #68]	@ (8008e54 <xTaskIncrementTick+0x230>)
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2b00      	cmp	r3, #0
 8008e12:	d007      	beq.n	8008e24 <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 8008e14:	2301      	movs	r3, #1
 8008e16:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e18:	e004      	b.n	8008e24 <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8008e1a:	4b0f      	ldr	r3, [pc, #60]	@ (8008e58 <xTaskIncrementTick+0x234>)
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	3301      	adds	r3, #1
 8008e20:	4a0d      	ldr	r2, [pc, #52]	@ (8008e58 <xTaskIncrementTick+0x234>)
 8008e22:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 8008e24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008e26:	4618      	mov	r0, r3
 8008e28:	3728      	adds	r7, #40	@ 0x28
 8008e2a:	46bd      	mov	sp, r7
 8008e2c:	bd80      	pop	{r7, pc}
 8008e2e:	bf00      	nop
 8008e30:	2000059c 	.word	0x2000059c
 8008e34:	20000578 	.word	0x20000578
 8008e38:	2000052c 	.word	0x2000052c
 8008e3c:	20000530 	.word	0x20000530
 8008e40:	2000058c 	.word	0x2000058c
 8008e44:	20000594 	.word	0x20000594
 8008e48:	2000057c 	.word	0x2000057c
 8008e4c:	200004a0 	.word	0x200004a0
 8008e50:	2000049c 	.word	0x2000049c
 8008e54:	20000588 	.word	0x20000588
 8008e58:	20000584 	.word	0x20000584

08008e5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008e5c:	b580      	push	{r7, lr}
 8008e5e:	b086      	sub	sp, #24
 8008e60:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008e62:	4b2d      	ldr	r3, [pc, #180]	@ (8008f18 <vTaskSwitchContext+0xbc>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d003      	beq.n	8008e72 <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8008e6a:	4b2c      	ldr	r3, [pc, #176]	@ (8008f1c <vTaskSwitchContext+0xc0>)
 8008e6c:	2201      	movs	r2, #1
 8008e6e:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8008e70:	e04e      	b.n	8008f10 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 8008e72:	4b2a      	ldr	r3, [pc, #168]	@ (8008f1c <vTaskSwitchContext+0xc0>)
 8008e74:	2200      	movs	r2, #0
 8008e76:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008e78:	4b29      	ldr	r3, [pc, #164]	@ (8008f20 <vTaskSwitchContext+0xc4>)
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	fab3 f383 	clz	r3, r3
 8008e84:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8008e86:	7afb      	ldrb	r3, [r7, #11]
 8008e88:	f1c3 031f 	rsb	r3, r3, #31
 8008e8c:	617b      	str	r3, [r7, #20]
 8008e8e:	4925      	ldr	r1, [pc, #148]	@ (8008f24 <vTaskSwitchContext+0xc8>)
 8008e90:	697a      	ldr	r2, [r7, #20]
 8008e92:	4613      	mov	r3, r2
 8008e94:	009b      	lsls	r3, r3, #2
 8008e96:	4413      	add	r3, r2
 8008e98:	009b      	lsls	r3, r3, #2
 8008e9a:	440b      	add	r3, r1
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d10b      	bne.n	8008eba <vTaskSwitchContext+0x5e>
        __asm volatile
 8008ea2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ea6:	f383 8811 	msr	BASEPRI, r3
 8008eaa:	f3bf 8f6f 	isb	sy
 8008eae:	f3bf 8f4f 	dsb	sy
 8008eb2:	607b      	str	r3, [r7, #4]
    }
 8008eb4:	bf00      	nop
 8008eb6:	bf00      	nop
 8008eb8:	e7fd      	b.n	8008eb6 <vTaskSwitchContext+0x5a>
 8008eba:	697a      	ldr	r2, [r7, #20]
 8008ebc:	4613      	mov	r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4413      	add	r3, r2
 8008ec2:	009b      	lsls	r3, r3, #2
 8008ec4:	4a17      	ldr	r2, [pc, #92]	@ (8008f24 <vTaskSwitchContext+0xc8>)
 8008ec6:	4413      	add	r3, r2
 8008ec8:	613b      	str	r3, [r7, #16]
 8008eca:	693b      	ldr	r3, [r7, #16]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	685a      	ldr	r2, [r3, #4]
 8008ed0:	693b      	ldr	r3, [r7, #16]
 8008ed2:	605a      	str	r2, [r3, #4]
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	685a      	ldr	r2, [r3, #4]
 8008ed8:	693b      	ldr	r3, [r7, #16]
 8008eda:	3308      	adds	r3, #8
 8008edc:	429a      	cmp	r2, r3
 8008ede:	d104      	bne.n	8008eea <vTaskSwitchContext+0x8e>
 8008ee0:	693b      	ldr	r3, [r7, #16]
 8008ee2:	685b      	ldr	r3, [r3, #4]
 8008ee4:	685a      	ldr	r2, [r3, #4]
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	605a      	str	r2, [r3, #4]
 8008eea:	693b      	ldr	r3, [r7, #16]
 8008eec:	685b      	ldr	r3, [r3, #4]
 8008eee:	68db      	ldr	r3, [r3, #12]
 8008ef0:	4a0d      	ldr	r2, [pc, #52]	@ (8008f28 <vTaskSwitchContext+0xcc>)
 8008ef2:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 8008ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8008f28 <vTaskSwitchContext+0xcc>)
 8008ef6:	681a      	ldr	r2, [r3, #0]
 8008ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8008f2c <vTaskSwitchContext+0xd0>)
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	429a      	cmp	r2, r3
 8008efe:	d102      	bne.n	8008f06 <vTaskSwitchContext+0xaa>
 8008f00:	f002 fc5e 	bl	800b7c0 <SEGGER_SYSVIEW_OnIdle>
}
 8008f04:	e004      	b.n	8008f10 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 8008f06:	4b08      	ldr	r3, [pc, #32]	@ (8008f28 <vTaskSwitchContext+0xcc>)
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4618      	mov	r0, r3
 8008f0c:	f002 fcb6 	bl	800b87c <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8008f10:	bf00      	nop
 8008f12:	3718      	adds	r7, #24
 8008f14:	46bd      	mov	sp, r7
 8008f16:	bd80      	pop	{r7, pc}
 8008f18:	2000059c 	.word	0x2000059c
 8008f1c:	20000588 	.word	0x20000588
 8008f20:	2000057c 	.word	0x2000057c
 8008f24:	200004a0 	.word	0x200004a0
 8008f28:	2000049c 	.word	0x2000049c
 8008f2c:	20000598 	.word	0x20000598

08008f30 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b084      	sub	sp, #16
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	6078      	str	r0, [r7, #4]
 8008f38:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d10b      	bne.n	8008f58 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8008f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f44:	f383 8811 	msr	BASEPRI, r3
 8008f48:	f3bf 8f6f 	isb	sy
 8008f4c:	f3bf 8f4f 	dsb	sy
 8008f50:	60fb      	str	r3, [r7, #12]
    }
 8008f52:	bf00      	nop
 8008f54:	bf00      	nop
 8008f56:	e7fd      	b.n	8008f54 <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008f58:	4b07      	ldr	r3, [pc, #28]	@ (8008f78 <vTaskPlaceOnEventList+0x48>)
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	3318      	adds	r3, #24
 8008f5e:	4619      	mov	r1, r3
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f7fe fe90 	bl	8007c86 <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008f66:	2101      	movs	r1, #1
 8008f68:	6838      	ldr	r0, [r7, #0]
 8008f6a:	f000 fc3d 	bl	80097e8 <prvAddCurrentTaskToDelayedList>
}
 8008f6e:	bf00      	nop
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}
 8008f76:	bf00      	nop
 8008f78:	2000049c 	.word	0x2000049c

08008f7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8008f7c:	b580      	push	{r7, lr}
 8008f7e:	b08a      	sub	sp, #40	@ 0x28
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	68db      	ldr	r3, [r3, #12]
 8008f8a:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 8008f8c:	6a3b      	ldr	r3, [r7, #32]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d10b      	bne.n	8008faa <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 8008f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f96:	f383 8811 	msr	BASEPRI, r3
 8008f9a:	f3bf 8f6f 	isb	sy
 8008f9e:	f3bf 8f4f 	dsb	sy
 8008fa2:	60fb      	str	r3, [r7, #12]
    }
 8008fa4:	bf00      	nop
 8008fa6:	bf00      	nop
 8008fa8:	e7fd      	b.n	8008fa6 <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8008faa:	6a3b      	ldr	r3, [r7, #32]
 8008fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fae:	61fb      	str	r3, [r7, #28]
 8008fb0:	6a3b      	ldr	r3, [r7, #32]
 8008fb2:	69db      	ldr	r3, [r3, #28]
 8008fb4:	6a3a      	ldr	r2, [r7, #32]
 8008fb6:	6a12      	ldr	r2, [r2, #32]
 8008fb8:	609a      	str	r2, [r3, #8]
 8008fba:	6a3b      	ldr	r3, [r7, #32]
 8008fbc:	6a1b      	ldr	r3, [r3, #32]
 8008fbe:	6a3a      	ldr	r2, [r7, #32]
 8008fc0:	69d2      	ldr	r2, [r2, #28]
 8008fc2:	605a      	str	r2, [r3, #4]
 8008fc4:	69fb      	ldr	r3, [r7, #28]
 8008fc6:	685a      	ldr	r2, [r3, #4]
 8008fc8:	6a3b      	ldr	r3, [r7, #32]
 8008fca:	3318      	adds	r3, #24
 8008fcc:	429a      	cmp	r2, r3
 8008fce:	d103      	bne.n	8008fd8 <xTaskRemoveFromEventList+0x5c>
 8008fd0:	6a3b      	ldr	r3, [r7, #32]
 8008fd2:	6a1a      	ldr	r2, [r3, #32]
 8008fd4:	69fb      	ldr	r3, [r7, #28]
 8008fd6:	605a      	str	r2, [r3, #4]
 8008fd8:	6a3b      	ldr	r3, [r7, #32]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	629a      	str	r2, [r3, #40]	@ 0x28
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	1e5a      	subs	r2, r3, #1
 8008fe4:	69fb      	ldr	r3, [r7, #28]
 8008fe6:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008fe8:	4b4b      	ldr	r3, [pc, #300]	@ (8009118 <xTaskRemoveFromEventList+0x19c>)
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d162      	bne.n	80090b6 <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8008ff0:	6a3b      	ldr	r3, [r7, #32]
 8008ff2:	695b      	ldr	r3, [r3, #20]
 8008ff4:	617b      	str	r3, [r7, #20]
 8008ff6:	6a3b      	ldr	r3, [r7, #32]
 8008ff8:	689b      	ldr	r3, [r3, #8]
 8008ffa:	6a3a      	ldr	r2, [r7, #32]
 8008ffc:	68d2      	ldr	r2, [r2, #12]
 8008ffe:	609a      	str	r2, [r3, #8]
 8009000:	6a3b      	ldr	r3, [r7, #32]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	6a3a      	ldr	r2, [r7, #32]
 8009006:	6892      	ldr	r2, [r2, #8]
 8009008:	605a      	str	r2, [r3, #4]
 800900a:	697b      	ldr	r3, [r7, #20]
 800900c:	685a      	ldr	r2, [r3, #4]
 800900e:	6a3b      	ldr	r3, [r7, #32]
 8009010:	3304      	adds	r3, #4
 8009012:	429a      	cmp	r2, r3
 8009014:	d103      	bne.n	800901e <xTaskRemoveFromEventList+0xa2>
 8009016:	6a3b      	ldr	r3, [r7, #32]
 8009018:	68da      	ldr	r2, [r3, #12]
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	605a      	str	r2, [r3, #4]
 800901e:	6a3b      	ldr	r3, [r7, #32]
 8009020:	2200      	movs	r2, #0
 8009022:	615a      	str	r2, [r3, #20]
 8009024:	697b      	ldr	r3, [r7, #20]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	1e5a      	subs	r2, r3, #1
 800902a:	697b      	ldr	r3, [r7, #20]
 800902c:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 800902e:	6a3b      	ldr	r3, [r7, #32]
 8009030:	4618      	mov	r0, r3
 8009032:	f002 fc65 	bl	800b900 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009036:	6a3b      	ldr	r3, [r7, #32]
 8009038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800903a:	2201      	movs	r2, #1
 800903c:	409a      	lsls	r2, r3
 800903e:	4b37      	ldr	r3, [pc, #220]	@ (800911c <xTaskRemoveFromEventList+0x1a0>)
 8009040:	681b      	ldr	r3, [r3, #0]
 8009042:	4313      	orrs	r3, r2
 8009044:	4a35      	ldr	r2, [pc, #212]	@ (800911c <xTaskRemoveFromEventList+0x1a0>)
 8009046:	6013      	str	r3, [r2, #0]
 8009048:	6a3b      	ldr	r3, [r7, #32]
 800904a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800904c:	4934      	ldr	r1, [pc, #208]	@ (8009120 <xTaskRemoveFromEventList+0x1a4>)
 800904e:	4613      	mov	r3, r2
 8009050:	009b      	lsls	r3, r3, #2
 8009052:	4413      	add	r3, r2
 8009054:	009b      	lsls	r3, r3, #2
 8009056:	440b      	add	r3, r1
 8009058:	3304      	adds	r3, #4
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	613b      	str	r3, [r7, #16]
 800905e:	6a3b      	ldr	r3, [r7, #32]
 8009060:	693a      	ldr	r2, [r7, #16]
 8009062:	609a      	str	r2, [r3, #8]
 8009064:	693b      	ldr	r3, [r7, #16]
 8009066:	689a      	ldr	r2, [r3, #8]
 8009068:	6a3b      	ldr	r3, [r7, #32]
 800906a:	60da      	str	r2, [r3, #12]
 800906c:	693b      	ldr	r3, [r7, #16]
 800906e:	689b      	ldr	r3, [r3, #8]
 8009070:	6a3a      	ldr	r2, [r7, #32]
 8009072:	3204      	adds	r2, #4
 8009074:	605a      	str	r2, [r3, #4]
 8009076:	6a3b      	ldr	r3, [r7, #32]
 8009078:	1d1a      	adds	r2, r3, #4
 800907a:	693b      	ldr	r3, [r7, #16]
 800907c:	609a      	str	r2, [r3, #8]
 800907e:	6a3b      	ldr	r3, [r7, #32]
 8009080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009082:	4613      	mov	r3, r2
 8009084:	009b      	lsls	r3, r3, #2
 8009086:	4413      	add	r3, r2
 8009088:	009b      	lsls	r3, r3, #2
 800908a:	4a25      	ldr	r2, [pc, #148]	@ (8009120 <xTaskRemoveFromEventList+0x1a4>)
 800908c:	441a      	add	r2, r3
 800908e:	6a3b      	ldr	r3, [r7, #32]
 8009090:	615a      	str	r2, [r3, #20]
 8009092:	6a3b      	ldr	r3, [r7, #32]
 8009094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009096:	4922      	ldr	r1, [pc, #136]	@ (8009120 <xTaskRemoveFromEventList+0x1a4>)
 8009098:	4613      	mov	r3, r2
 800909a:	009b      	lsls	r3, r3, #2
 800909c:	4413      	add	r3, r2
 800909e:	009b      	lsls	r3, r3, #2
 80090a0:	440b      	add	r3, r1
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	1c59      	adds	r1, r3, #1
 80090a6:	481e      	ldr	r0, [pc, #120]	@ (8009120 <xTaskRemoveFromEventList+0x1a4>)
 80090a8:	4613      	mov	r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4413      	add	r3, r2
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	4403      	add	r3, r0
 80090b2:	6019      	str	r1, [r3, #0]
 80090b4:	e01b      	b.n	80090ee <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80090b6:	4b1b      	ldr	r3, [pc, #108]	@ (8009124 <xTaskRemoveFromEventList+0x1a8>)
 80090b8:	685b      	ldr	r3, [r3, #4]
 80090ba:	61bb      	str	r3, [r7, #24]
 80090bc:	6a3b      	ldr	r3, [r7, #32]
 80090be:	69ba      	ldr	r2, [r7, #24]
 80090c0:	61da      	str	r2, [r3, #28]
 80090c2:	69bb      	ldr	r3, [r7, #24]
 80090c4:	689a      	ldr	r2, [r3, #8]
 80090c6:	6a3b      	ldr	r3, [r7, #32]
 80090c8:	621a      	str	r2, [r3, #32]
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	689b      	ldr	r3, [r3, #8]
 80090ce:	6a3a      	ldr	r2, [r7, #32]
 80090d0:	3218      	adds	r2, #24
 80090d2:	605a      	str	r2, [r3, #4]
 80090d4:	6a3b      	ldr	r3, [r7, #32]
 80090d6:	f103 0218 	add.w	r2, r3, #24
 80090da:	69bb      	ldr	r3, [r7, #24]
 80090dc:	609a      	str	r2, [r3, #8]
 80090de:	6a3b      	ldr	r3, [r7, #32]
 80090e0:	4a10      	ldr	r2, [pc, #64]	@ (8009124 <xTaskRemoveFromEventList+0x1a8>)
 80090e2:	629a      	str	r2, [r3, #40]	@ 0x28
 80090e4:	4b0f      	ldr	r3, [pc, #60]	@ (8009124 <xTaskRemoveFromEventList+0x1a8>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	3301      	adds	r3, #1
 80090ea:	4a0e      	ldr	r2, [pc, #56]	@ (8009124 <xTaskRemoveFromEventList+0x1a8>)
 80090ec:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80090ee:	6a3b      	ldr	r3, [r7, #32]
 80090f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80090f2:	4b0d      	ldr	r3, [pc, #52]	@ (8009128 <xTaskRemoveFromEventList+0x1ac>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80090f8:	429a      	cmp	r2, r3
 80090fa:	d905      	bls.n	8009108 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 80090fc:	2301      	movs	r3, #1
 80090fe:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8009100:	4b0a      	ldr	r3, [pc, #40]	@ (800912c <xTaskRemoveFromEventList+0x1b0>)
 8009102:	2201      	movs	r2, #1
 8009104:	601a      	str	r2, [r3, #0]
 8009106:	e001      	b.n	800910c <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 8009108:	2300      	movs	r3, #0
 800910a:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 800910c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800910e:	4618      	mov	r0, r3
 8009110:	3728      	adds	r7, #40	@ 0x28
 8009112:	46bd      	mov	sp, r7
 8009114:	bd80      	pop	{r7, pc}
 8009116:	bf00      	nop
 8009118:	2000059c 	.word	0x2000059c
 800911c:	2000057c 	.word	0x2000057c
 8009120:	200004a0 	.word	0x200004a0
 8009124:	20000534 	.word	0x20000534
 8009128:	2000049c 	.word	0x2000049c
 800912c:	20000588 	.word	0x20000588

08009130 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8009138:	4b06      	ldr	r3, [pc, #24]	@ (8009154 <vTaskInternalSetTimeOutState+0x24>)
 800913a:	681a      	ldr	r2, [r3, #0]
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8009140:	4b05      	ldr	r3, [pc, #20]	@ (8009158 <vTaskInternalSetTimeOutState+0x28>)
 8009142:	681a      	ldr	r2, [r3, #0]
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	605a      	str	r2, [r3, #4]
}
 8009148:	bf00      	nop
 800914a:	370c      	adds	r7, #12
 800914c:	46bd      	mov	sp, r7
 800914e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009152:	4770      	bx	lr
 8009154:	2000058c 	.word	0x2000058c
 8009158:	20000578 	.word	0x20000578

0800915c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800915c:	b580      	push	{r7, lr}
 800915e:	b088      	sub	sp, #32
 8009160:	af00      	add	r7, sp, #0
 8009162:	6078      	str	r0, [r7, #4]
 8009164:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d10b      	bne.n	8009184 <xTaskCheckForTimeOut+0x28>
        __asm volatile
 800916c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009170:	f383 8811 	msr	BASEPRI, r3
 8009174:	f3bf 8f6f 	isb	sy
 8009178:	f3bf 8f4f 	dsb	sy
 800917c:	613b      	str	r3, [r7, #16]
    }
 800917e:	bf00      	nop
 8009180:	bf00      	nop
 8009182:	e7fd      	b.n	8009180 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d10b      	bne.n	80091a2 <xTaskCheckForTimeOut+0x46>
        __asm volatile
 800918a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800918e:	f383 8811 	msr	BASEPRI, r3
 8009192:	f3bf 8f6f 	isb	sy
 8009196:	f3bf 8f4f 	dsb	sy
 800919a:	60fb      	str	r3, [r7, #12]
    }
 800919c:	bf00      	nop
 800919e:	bf00      	nop
 80091a0:	e7fd      	b.n	800919e <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80091a2:	f000 fcd3 	bl	8009b4c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80091a6:	4b1f      	ldr	r3, [pc, #124]	@ (8009224 <xTaskCheckForTimeOut+0xc8>)
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	685b      	ldr	r3, [r3, #4]
 80091b0:	69ba      	ldr	r2, [r7, #24]
 80091b2:	1ad3      	subs	r3, r2, r3
 80091b4:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80091be:	d102      	bne.n	80091c6 <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80091c0:	2300      	movs	r3, #0
 80091c2:	61fb      	str	r3, [r7, #28]
 80091c4:	e026      	b.n	8009214 <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681a      	ldr	r2, [r3, #0]
 80091ca:	4b17      	ldr	r3, [pc, #92]	@ (8009228 <xTaskCheckForTimeOut+0xcc>)
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	429a      	cmp	r2, r3
 80091d0:	d00a      	beq.n	80091e8 <xTaskCheckForTimeOut+0x8c>
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	685b      	ldr	r3, [r3, #4]
 80091d6:	69ba      	ldr	r2, [r7, #24]
 80091d8:	429a      	cmp	r2, r3
 80091da:	d305      	bcc.n	80091e8 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80091dc:	2301      	movs	r3, #1
 80091de:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 80091e0:	683b      	ldr	r3, [r7, #0]
 80091e2:	2200      	movs	r2, #0
 80091e4:	601a      	str	r2, [r3, #0]
 80091e6:	e015      	b.n	8009214 <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80091e8:	683b      	ldr	r3, [r7, #0]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	697a      	ldr	r2, [r7, #20]
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d20b      	bcs.n	800920a <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80091f2:	683b      	ldr	r3, [r7, #0]
 80091f4:	681a      	ldr	r2, [r3, #0]
 80091f6:	697b      	ldr	r3, [r7, #20]
 80091f8:	1ad2      	subs	r2, r2, r3
 80091fa:	683b      	ldr	r3, [r7, #0]
 80091fc:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7ff ff96 	bl	8009130 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 8009204:	2300      	movs	r3, #0
 8009206:	61fb      	str	r3, [r7, #28]
 8009208:	e004      	b.n	8009214 <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 800920a:	683b      	ldr	r3, [r7, #0]
 800920c:	2200      	movs	r2, #0
 800920e:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8009210:	2301      	movs	r3, #1
 8009212:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 8009214:	f000 fccc 	bl	8009bb0 <vPortExitCritical>

    return xReturn;
 8009218:	69fb      	ldr	r3, [r7, #28]
}
 800921a:	4618      	mov	r0, r3
 800921c:	3720      	adds	r7, #32
 800921e:	46bd      	mov	sp, r7
 8009220:	bd80      	pop	{r7, pc}
 8009222:	bf00      	nop
 8009224:	20000578 	.word	0x20000578
 8009228:	2000058c 	.word	0x2000058c

0800922c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800922c:	b480      	push	{r7}
 800922e:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8009230:	4b03      	ldr	r3, [pc, #12]	@ (8009240 <vTaskMissedYield+0x14>)
 8009232:	2201      	movs	r2, #1
 8009234:	601a      	str	r2, [r3, #0]
}
 8009236:	bf00      	nop
 8009238:	46bd      	mov	sp, r7
 800923a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800923e:	4770      	bx	lr
 8009240:	20000588 	.word	0x20000588

08009244 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 800924c:	f000 f852 	bl	80092f4 <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009250:	4b06      	ldr	r3, [pc, #24]	@ (800926c <prvIdleTask+0x28>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b01      	cmp	r3, #1
 8009256:	d9f9      	bls.n	800924c <prvIdleTask+0x8>
            {
                taskYIELD();
 8009258:	4b05      	ldr	r3, [pc, #20]	@ (8009270 <prvIdleTask+0x2c>)
 800925a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800925e:	601a      	str	r2, [r3, #0]
 8009260:	f3bf 8f4f 	dsb	sy
 8009264:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8009268:	e7f0      	b.n	800924c <prvIdleTask+0x8>
 800926a:	bf00      	nop
 800926c:	200004a0 	.word	0x200004a0
 8009270:	e000ed04 	.word	0xe000ed04

08009274 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800927a:	2300      	movs	r3, #0
 800927c:	607b      	str	r3, [r7, #4]
 800927e:	e00c      	b.n	800929a <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009280:	687a      	ldr	r2, [r7, #4]
 8009282:	4613      	mov	r3, r2
 8009284:	009b      	lsls	r3, r3, #2
 8009286:	4413      	add	r3, r2
 8009288:	009b      	lsls	r3, r3, #2
 800928a:	4a12      	ldr	r2, [pc, #72]	@ (80092d4 <prvInitialiseTaskLists+0x60>)
 800928c:	4413      	add	r3, r2
 800928e:	4618      	mov	r0, r3
 8009290:	f7fe fccc 	bl	8007c2c <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	3301      	adds	r3, #1
 8009298:	607b      	str	r3, [r7, #4]
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	2b04      	cmp	r3, #4
 800929e:	d9ef      	bls.n	8009280 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80092a0:	480d      	ldr	r0, [pc, #52]	@ (80092d8 <prvInitialiseTaskLists+0x64>)
 80092a2:	f7fe fcc3 	bl	8007c2c <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80092a6:	480d      	ldr	r0, [pc, #52]	@ (80092dc <prvInitialiseTaskLists+0x68>)
 80092a8:	f7fe fcc0 	bl	8007c2c <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80092ac:	480c      	ldr	r0, [pc, #48]	@ (80092e0 <prvInitialiseTaskLists+0x6c>)
 80092ae:	f7fe fcbd 	bl	8007c2c <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80092b2:	480c      	ldr	r0, [pc, #48]	@ (80092e4 <prvInitialiseTaskLists+0x70>)
 80092b4:	f7fe fcba 	bl	8007c2c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80092b8:	480b      	ldr	r0, [pc, #44]	@ (80092e8 <prvInitialiseTaskLists+0x74>)
 80092ba:	f7fe fcb7 	bl	8007c2c <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80092be:	4b0b      	ldr	r3, [pc, #44]	@ (80092ec <prvInitialiseTaskLists+0x78>)
 80092c0:	4a05      	ldr	r2, [pc, #20]	@ (80092d8 <prvInitialiseTaskLists+0x64>)
 80092c2:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80092c4:	4b0a      	ldr	r3, [pc, #40]	@ (80092f0 <prvInitialiseTaskLists+0x7c>)
 80092c6:	4a05      	ldr	r2, [pc, #20]	@ (80092dc <prvInitialiseTaskLists+0x68>)
 80092c8:	601a      	str	r2, [r3, #0]
}
 80092ca:	bf00      	nop
 80092cc:	3708      	adds	r7, #8
 80092ce:	46bd      	mov	sp, r7
 80092d0:	bd80      	pop	{r7, pc}
 80092d2:	bf00      	nop
 80092d4:	200004a0 	.word	0x200004a0
 80092d8:	20000504 	.word	0x20000504
 80092dc:	20000518 	.word	0x20000518
 80092e0:	20000534 	.word	0x20000534
 80092e4:	20000548 	.word	0x20000548
 80092e8:	20000560 	.word	0x20000560
 80092ec:	2000052c 	.word	0x2000052c
 80092f0:	20000530 	.word	0x20000530

080092f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80092f4:	b580      	push	{r7, lr}
 80092f6:	b082      	sub	sp, #8
 80092f8:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80092fa:	e019      	b.n	8009330 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 80092fc:	f000 fc26 	bl	8009b4c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009300:	4b10      	ldr	r3, [pc, #64]	@ (8009344 <prvCheckTasksWaitingTermination+0x50>)
 8009302:	68db      	ldr	r3, [r3, #12]
 8009304:	68db      	ldr	r3, [r3, #12]
 8009306:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	3304      	adds	r3, #4
 800930c:	4618      	mov	r0, r3
 800930e:	f7fe fcf3 	bl	8007cf8 <uxListRemove>
                --uxCurrentNumberOfTasks;
 8009312:	4b0d      	ldr	r3, [pc, #52]	@ (8009348 <prvCheckTasksWaitingTermination+0x54>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	3b01      	subs	r3, #1
 8009318:	4a0b      	ldr	r2, [pc, #44]	@ (8009348 <prvCheckTasksWaitingTermination+0x54>)
 800931a:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 800931c:	4b0b      	ldr	r3, [pc, #44]	@ (800934c <prvCheckTasksWaitingTermination+0x58>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	3b01      	subs	r3, #1
 8009322:	4a0a      	ldr	r2, [pc, #40]	@ (800934c <prvCheckTasksWaitingTermination+0x58>)
 8009324:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 8009326:	f000 fc43 	bl	8009bb0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 f810 	bl	8009350 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009330:	4b06      	ldr	r3, [pc, #24]	@ (800934c <prvCheckTasksWaitingTermination+0x58>)
 8009332:	681b      	ldr	r3, [r3, #0]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d1e1      	bne.n	80092fc <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8009338:	bf00      	nop
 800933a:	bf00      	nop
 800933c:	3708      	adds	r7, #8
 800933e:	46bd      	mov	sp, r7
 8009340:	bd80      	pop	{r7, pc}
 8009342:	bf00      	nop
 8009344:	20000548 	.word	0x20000548
 8009348:	20000574 	.word	0x20000574
 800934c:	2000055c 	.word	0x2000055c

08009350 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8009350:	b580      	push	{r7, lr}
 8009352:	b082      	sub	sp, #8
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800935c:	4618      	mov	r0, r3
 800935e:	f000 fddb 	bl	8009f18 <vPortFree>
            vPortFree( pxTCB );
 8009362:	6878      	ldr	r0, [r7, #4]
 8009364:	f000 fdd8 	bl	8009f18 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8009368:	bf00      	nop
 800936a:	3708      	adds	r7, #8
 800936c:	46bd      	mov	sp, r7
 800936e:	bd80      	pop	{r7, pc}

08009370 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009370:	b480      	push	{r7}
 8009372:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009374:	4b0a      	ldr	r3, [pc, #40]	@ (80093a0 <prvResetNextTaskUnblockTime+0x30>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d104      	bne.n	8009388 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 800937e:	4b09      	ldr	r3, [pc, #36]	@ (80093a4 <prvResetNextTaskUnblockTime+0x34>)
 8009380:	f04f 32ff 	mov.w	r2, #4294967295
 8009384:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8009386:	e005      	b.n	8009394 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8009388:	4b05      	ldr	r3, [pc, #20]	@ (80093a0 <prvResetNextTaskUnblockTime+0x30>)
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	68db      	ldr	r3, [r3, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	4a04      	ldr	r2, [pc, #16]	@ (80093a4 <prvResetNextTaskUnblockTime+0x34>)
 8009392:	6013      	str	r3, [r2, #0]
}
 8009394:	bf00      	nop
 8009396:	46bd      	mov	sp, r7
 8009398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800939c:	4770      	bx	lr
 800939e:	bf00      	nop
 80093a0:	2000052c 	.word	0x2000052c
 80093a4:	20000594 	.word	0x20000594

080093a8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80093a8:	b580      	push	{r7, lr}
 80093aa:	b086      	sub	sp, #24
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80093b4:	2300      	movs	r3, #0
 80093b6:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	f000 808b 	beq.w	80094d6 <xTaskPriorityInherit+0x12e>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093c4:	4b46      	ldr	r3, [pc, #280]	@ (80094e0 <xTaskPriorityInherit+0x138>)
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093ca:	429a      	cmp	r2, r3
 80093cc:	d27a      	bcs.n	80094c4 <xTaskPriorityInherit+0x11c>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80093ce:	693b      	ldr	r3, [r7, #16]
 80093d0:	699b      	ldr	r3, [r3, #24]
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	db06      	blt.n	80093e4 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80093d6:	4b42      	ldr	r3, [pc, #264]	@ (80094e0 <xTaskPriorityInherit+0x138>)
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80093dc:	f1c3 0205 	rsb	r2, r3, #5
 80093e0:	693b      	ldr	r3, [r7, #16]
 80093e2:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	6959      	ldr	r1, [r3, #20]
 80093e8:	693b      	ldr	r3, [r7, #16]
 80093ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80093ec:	4613      	mov	r3, r2
 80093ee:	009b      	lsls	r3, r3, #2
 80093f0:	4413      	add	r3, r2
 80093f2:	009b      	lsls	r3, r3, #2
 80093f4:	4a3b      	ldr	r2, [pc, #236]	@ (80094e4 <xTaskPriorityInherit+0x13c>)
 80093f6:	4413      	add	r3, r2
 80093f8:	4299      	cmp	r1, r3
 80093fa:	d15b      	bne.n	80094b4 <xTaskPriorityInherit+0x10c>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	3304      	adds	r3, #4
 8009400:	4618      	mov	r0, r3
 8009402:	f7fe fc79 	bl	8007cf8 <uxListRemove>
 8009406:	4603      	mov	r3, r0
 8009408:	2b00      	cmp	r3, #0
 800940a:	d10a      	bne.n	8009422 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800940c:	693b      	ldr	r3, [r7, #16]
 800940e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009410:	2201      	movs	r2, #1
 8009412:	fa02 f303 	lsl.w	r3, r2, r3
 8009416:	43da      	mvns	r2, r3
 8009418:	4b33      	ldr	r3, [pc, #204]	@ (80094e8 <xTaskPriorityInherit+0x140>)
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	4013      	ands	r3, r2
 800941e:	4a32      	ldr	r2, [pc, #200]	@ (80094e8 <xTaskPriorityInherit+0x140>)
 8009420:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8009422:	4b2f      	ldr	r3, [pc, #188]	@ (80094e0 <xTaskPriorityInherit+0x138>)
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009428:	693b      	ldr	r3, [r7, #16]
 800942a:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	4618      	mov	r0, r3
 8009430:	f002 fa66 	bl	800b900 <SEGGER_SYSVIEW_OnTaskStartReady>
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009438:	2201      	movs	r2, #1
 800943a:	409a      	lsls	r2, r3
 800943c:	4b2a      	ldr	r3, [pc, #168]	@ (80094e8 <xTaskPriorityInherit+0x140>)
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	4313      	orrs	r3, r2
 8009442:	4a29      	ldr	r2, [pc, #164]	@ (80094e8 <xTaskPriorityInherit+0x140>)
 8009444:	6013      	str	r3, [r2, #0]
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800944a:	4926      	ldr	r1, [pc, #152]	@ (80094e4 <xTaskPriorityInherit+0x13c>)
 800944c:	4613      	mov	r3, r2
 800944e:	009b      	lsls	r3, r3, #2
 8009450:	4413      	add	r3, r2
 8009452:	009b      	lsls	r3, r3, #2
 8009454:	440b      	add	r3, r1
 8009456:	3304      	adds	r3, #4
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	60fb      	str	r3, [r7, #12]
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	68fa      	ldr	r2, [r7, #12]
 8009460:	609a      	str	r2, [r3, #8]
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	689a      	ldr	r2, [r3, #8]
 8009466:	693b      	ldr	r3, [r7, #16]
 8009468:	60da      	str	r2, [r3, #12]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	689b      	ldr	r3, [r3, #8]
 800946e:	693a      	ldr	r2, [r7, #16]
 8009470:	3204      	adds	r2, #4
 8009472:	605a      	str	r2, [r3, #4]
 8009474:	693b      	ldr	r3, [r7, #16]
 8009476:	1d1a      	adds	r2, r3, #4
 8009478:	68fb      	ldr	r3, [r7, #12]
 800947a:	609a      	str	r2, [r3, #8]
 800947c:	693b      	ldr	r3, [r7, #16]
 800947e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009480:	4613      	mov	r3, r2
 8009482:	009b      	lsls	r3, r3, #2
 8009484:	4413      	add	r3, r2
 8009486:	009b      	lsls	r3, r3, #2
 8009488:	4a16      	ldr	r2, [pc, #88]	@ (80094e4 <xTaskPriorityInherit+0x13c>)
 800948a:	441a      	add	r2, r3
 800948c:	693b      	ldr	r3, [r7, #16]
 800948e:	615a      	str	r2, [r3, #20]
 8009490:	693b      	ldr	r3, [r7, #16]
 8009492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009494:	4913      	ldr	r1, [pc, #76]	@ (80094e4 <xTaskPriorityInherit+0x13c>)
 8009496:	4613      	mov	r3, r2
 8009498:	009b      	lsls	r3, r3, #2
 800949a:	4413      	add	r3, r2
 800949c:	009b      	lsls	r3, r3, #2
 800949e:	440b      	add	r3, r1
 80094a0:	681b      	ldr	r3, [r3, #0]
 80094a2:	1c59      	adds	r1, r3, #1
 80094a4:	480f      	ldr	r0, [pc, #60]	@ (80094e4 <xTaskPriorityInherit+0x13c>)
 80094a6:	4613      	mov	r3, r2
 80094a8:	009b      	lsls	r3, r3, #2
 80094aa:	4413      	add	r3, r2
 80094ac:	009b      	lsls	r3, r3, #2
 80094ae:	4403      	add	r3, r0
 80094b0:	6019      	str	r1, [r3, #0]
 80094b2:	e004      	b.n	80094be <xTaskPriorityInherit+0x116>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80094b4:	4b0a      	ldr	r3, [pc, #40]	@ (80094e0 <xTaskPriorityInherit+0x138>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80094ba:	693b      	ldr	r3, [r7, #16]
 80094bc:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80094be:	2301      	movs	r3, #1
 80094c0:	617b      	str	r3, [r7, #20]
 80094c2:	e008      	b.n	80094d6 <xTaskPriorityInherit+0x12e>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80094c4:	693b      	ldr	r3, [r7, #16]
 80094c6:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80094c8:	4b05      	ldr	r3, [pc, #20]	@ (80094e0 <xTaskPriorityInherit+0x138>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80094ce:	429a      	cmp	r2, r3
 80094d0:	d201      	bcs.n	80094d6 <xTaskPriorityInherit+0x12e>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80094d2:	2301      	movs	r3, #1
 80094d4:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80094d6:	697b      	ldr	r3, [r7, #20]
    }
 80094d8:	4618      	mov	r0, r3
 80094da:	3718      	adds	r7, #24
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}
 80094e0:	2000049c 	.word	0x2000049c
 80094e4:	200004a0 	.word	0x200004a0
 80094e8:	2000057c 	.word	0x2000057c

080094ec <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b088      	sub	sp, #32
 80094f0:	af00      	add	r7, sp, #0
 80094f2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 80094f8:	2300      	movs	r3, #0
 80094fa:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	f000 8092 	beq.w	8009628 <xTaskPriorityDisinherit+0x13c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8009504:	4b4b      	ldr	r3, [pc, #300]	@ (8009634 <xTaskPriorityDisinherit+0x148>)
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	69ba      	ldr	r2, [r7, #24]
 800950a:	429a      	cmp	r2, r3
 800950c:	d00b      	beq.n	8009526 <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 800950e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009512:	f383 8811 	msr	BASEPRI, r3
 8009516:	f3bf 8f6f 	isb	sy
 800951a:	f3bf 8f4f 	dsb	sy
 800951e:	613b      	str	r3, [r7, #16]
    }
 8009520:	bf00      	nop
 8009522:	bf00      	nop
 8009524:	e7fd      	b.n	8009522 <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 8009526:	69bb      	ldr	r3, [r7, #24]
 8009528:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800952a:	2b00      	cmp	r3, #0
 800952c:	d10b      	bne.n	8009546 <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 800952e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009532:	f383 8811 	msr	BASEPRI, r3
 8009536:	f3bf 8f6f 	isb	sy
 800953a:	f3bf 8f4f 	dsb	sy
 800953e:	60fb      	str	r3, [r7, #12]
    }
 8009540:	bf00      	nop
 8009542:	bf00      	nop
 8009544:	e7fd      	b.n	8009542 <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 8009546:	69bb      	ldr	r3, [r7, #24]
 8009548:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800954a:	1e5a      	subs	r2, r3, #1
 800954c:	69bb      	ldr	r3, [r7, #24]
 800954e:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009550:	69bb      	ldr	r3, [r7, #24]
 8009552:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009554:	69bb      	ldr	r3, [r7, #24]
 8009556:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009558:	429a      	cmp	r2, r3
 800955a:	d065      	beq.n	8009628 <xTaskPriorityDisinherit+0x13c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800955c:	69bb      	ldr	r3, [r7, #24]
 800955e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009560:	2b00      	cmp	r3, #0
 8009562:	d161      	bne.n	8009628 <xTaskPriorityDisinherit+0x13c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009564:	69bb      	ldr	r3, [r7, #24]
 8009566:	3304      	adds	r3, #4
 8009568:	4618      	mov	r0, r3
 800956a:	f7fe fbc5 	bl	8007cf8 <uxListRemove>
 800956e:	4603      	mov	r3, r0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10a      	bne.n	800958a <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8009574:	69bb      	ldr	r3, [r7, #24]
 8009576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009578:	2201      	movs	r2, #1
 800957a:	fa02 f303 	lsl.w	r3, r2, r3
 800957e:	43da      	mvns	r2, r3
 8009580:	4b2d      	ldr	r3, [pc, #180]	@ (8009638 <xTaskPriorityDisinherit+0x14c>)
 8009582:	681b      	ldr	r3, [r3, #0]
 8009584:	4013      	ands	r3, r2
 8009586:	4a2c      	ldr	r2, [pc, #176]	@ (8009638 <xTaskPriorityDisinherit+0x14c>)
 8009588:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800958a:	69bb      	ldr	r3, [r7, #24]
 800958c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800958e:	69bb      	ldr	r3, [r7, #24]
 8009590:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009596:	f1c3 0205 	rsb	r2, r3, #5
 800959a:	69bb      	ldr	r3, [r7, #24]
 800959c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800959e:	69bb      	ldr	r3, [r7, #24]
 80095a0:	4618      	mov	r0, r3
 80095a2:	f002 f9ad 	bl	800b900 <SEGGER_SYSVIEW_OnTaskStartReady>
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80095aa:	2201      	movs	r2, #1
 80095ac:	409a      	lsls	r2, r3
 80095ae:	4b22      	ldr	r3, [pc, #136]	@ (8009638 <xTaskPriorityDisinherit+0x14c>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	4313      	orrs	r3, r2
 80095b4:	4a20      	ldr	r2, [pc, #128]	@ (8009638 <xTaskPriorityDisinherit+0x14c>)
 80095b6:	6013      	str	r3, [r2, #0]
 80095b8:	69bb      	ldr	r3, [r7, #24]
 80095ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095bc:	491f      	ldr	r1, [pc, #124]	@ (800963c <xTaskPriorityDisinherit+0x150>)
 80095be:	4613      	mov	r3, r2
 80095c0:	009b      	lsls	r3, r3, #2
 80095c2:	4413      	add	r3, r2
 80095c4:	009b      	lsls	r3, r3, #2
 80095c6:	440b      	add	r3, r1
 80095c8:	3304      	adds	r3, #4
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	617b      	str	r3, [r7, #20]
 80095ce:	69bb      	ldr	r3, [r7, #24]
 80095d0:	697a      	ldr	r2, [r7, #20]
 80095d2:	609a      	str	r2, [r3, #8]
 80095d4:	697b      	ldr	r3, [r7, #20]
 80095d6:	689a      	ldr	r2, [r3, #8]
 80095d8:	69bb      	ldr	r3, [r7, #24]
 80095da:	60da      	str	r2, [r3, #12]
 80095dc:	697b      	ldr	r3, [r7, #20]
 80095de:	689b      	ldr	r3, [r3, #8]
 80095e0:	69ba      	ldr	r2, [r7, #24]
 80095e2:	3204      	adds	r2, #4
 80095e4:	605a      	str	r2, [r3, #4]
 80095e6:	69bb      	ldr	r3, [r7, #24]
 80095e8:	1d1a      	adds	r2, r3, #4
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	609a      	str	r2, [r3, #8]
 80095ee:	69bb      	ldr	r3, [r7, #24]
 80095f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80095f2:	4613      	mov	r3, r2
 80095f4:	009b      	lsls	r3, r3, #2
 80095f6:	4413      	add	r3, r2
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	4a10      	ldr	r2, [pc, #64]	@ (800963c <xTaskPriorityDisinherit+0x150>)
 80095fc:	441a      	add	r2, r3
 80095fe:	69bb      	ldr	r3, [r7, #24]
 8009600:	615a      	str	r2, [r3, #20]
 8009602:	69bb      	ldr	r3, [r7, #24]
 8009604:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009606:	490d      	ldr	r1, [pc, #52]	@ (800963c <xTaskPriorityDisinherit+0x150>)
 8009608:	4613      	mov	r3, r2
 800960a:	009b      	lsls	r3, r3, #2
 800960c:	4413      	add	r3, r2
 800960e:	009b      	lsls	r3, r3, #2
 8009610:	440b      	add	r3, r1
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	1c59      	adds	r1, r3, #1
 8009616:	4809      	ldr	r0, [pc, #36]	@ (800963c <xTaskPriorityDisinherit+0x150>)
 8009618:	4613      	mov	r3, r2
 800961a:	009b      	lsls	r3, r3, #2
 800961c:	4413      	add	r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	4403      	add	r3, r0
 8009622:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8009624:	2301      	movs	r3, #1
 8009626:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8009628:	69fb      	ldr	r3, [r7, #28]
    }
 800962a:	4618      	mov	r0, r3
 800962c:	3720      	adds	r7, #32
 800962e:	46bd      	mov	sp, r7
 8009630:	bd80      	pop	{r7, pc}
 8009632:	bf00      	nop
 8009634:	2000049c 	.word	0x2000049c
 8009638:	2000057c 	.word	0x2000057c
 800963c:	200004a0 	.word	0x200004a0

08009640 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8009640:	b580      	push	{r7, lr}
 8009642:	b08a      	sub	sp, #40	@ 0x28
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800964e:	2301      	movs	r3, #1
 8009650:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	2b00      	cmp	r3, #0
 8009656:	f000 80a8 	beq.w	80097aa <vTaskPriorityDisinheritAfterTimeout+0x16a>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800965a:	6a3b      	ldr	r3, [r7, #32]
 800965c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10b      	bne.n	800967a <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 8009662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009666:	f383 8811 	msr	BASEPRI, r3
 800966a:	f3bf 8f6f 	isb	sy
 800966e:	f3bf 8f4f 	dsb	sy
 8009672:	613b      	str	r3, [r7, #16]
    }
 8009674:	bf00      	nop
 8009676:	bf00      	nop
 8009678:	e7fd      	b.n	8009676 <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800967a:	6a3b      	ldr	r3, [r7, #32]
 800967c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800967e:	683a      	ldr	r2, [r7, #0]
 8009680:	429a      	cmp	r2, r3
 8009682:	d902      	bls.n	800968a <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8009684:	683b      	ldr	r3, [r7, #0]
 8009686:	627b      	str	r3, [r7, #36]	@ 0x24
 8009688:	e002      	b.n	8009690 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800968a:	6a3b      	ldr	r3, [r7, #32]
 800968c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800968e:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8009690:	6a3b      	ldr	r3, [r7, #32]
 8009692:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009694:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009696:	429a      	cmp	r2, r3
 8009698:	f000 8087 	beq.w	80097aa <vTaskPriorityDisinheritAfterTimeout+0x16a>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800969c:	6a3b      	ldr	r3, [r7, #32]
 800969e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096a0:	69fa      	ldr	r2, [r7, #28]
 80096a2:	429a      	cmp	r2, r3
 80096a4:	f040 8081 	bne.w	80097aa <vTaskPriorityDisinheritAfterTimeout+0x16a>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 80096a8:	4b42      	ldr	r3, [pc, #264]	@ (80097b4 <vTaskPriorityDisinheritAfterTimeout+0x174>)
 80096aa:	681b      	ldr	r3, [r3, #0]
 80096ac:	6a3a      	ldr	r2, [r7, #32]
 80096ae:	429a      	cmp	r2, r3
 80096b0:	d10b      	bne.n	80096ca <vTaskPriorityDisinheritAfterTimeout+0x8a>
        __asm volatile
 80096b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096b6:	f383 8811 	msr	BASEPRI, r3
 80096ba:	f3bf 8f6f 	isb	sy
 80096be:	f3bf 8f4f 	dsb	sy
 80096c2:	60fb      	str	r3, [r7, #12]
    }
 80096c4:	bf00      	nop
 80096c6:	bf00      	nop
 80096c8:	e7fd      	b.n	80096c6 <vTaskPriorityDisinheritAfterTimeout+0x86>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80096ca:	6a3b      	ldr	r3, [r7, #32]
 80096cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80096ce:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 80096d0:	6a3b      	ldr	r3, [r7, #32]
 80096d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80096d4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80096d6:	6a3b      	ldr	r3, [r7, #32]
 80096d8:	699b      	ldr	r3, [r3, #24]
 80096da:	2b00      	cmp	r3, #0
 80096dc:	db04      	blt.n	80096e8 <vTaskPriorityDisinheritAfterTimeout+0xa8>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80096de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80096e0:	f1c3 0205 	rsb	r2, r3, #5
 80096e4:	6a3b      	ldr	r3, [r7, #32]
 80096e6:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80096e8:	6a3b      	ldr	r3, [r7, #32]
 80096ea:	6959      	ldr	r1, [r3, #20]
 80096ec:	69ba      	ldr	r2, [r7, #24]
 80096ee:	4613      	mov	r3, r2
 80096f0:	009b      	lsls	r3, r3, #2
 80096f2:	4413      	add	r3, r2
 80096f4:	009b      	lsls	r3, r3, #2
 80096f6:	4a30      	ldr	r2, [pc, #192]	@ (80097b8 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 80096f8:	4413      	add	r3, r2
 80096fa:	4299      	cmp	r1, r3
 80096fc:	d155      	bne.n	80097aa <vTaskPriorityDisinheritAfterTimeout+0x16a>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096fe:	6a3b      	ldr	r3, [r7, #32]
 8009700:	3304      	adds	r3, #4
 8009702:	4618      	mov	r0, r3
 8009704:	f7fe faf8 	bl	8007cf8 <uxListRemove>
 8009708:	4603      	mov	r3, r0
 800970a:	2b00      	cmp	r3, #0
 800970c:	d10a      	bne.n	8009724 <vTaskPriorityDisinheritAfterTimeout+0xe4>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800970e:	6a3b      	ldr	r3, [r7, #32]
 8009710:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009712:	2201      	movs	r2, #1
 8009714:	fa02 f303 	lsl.w	r3, r2, r3
 8009718:	43da      	mvns	r2, r3
 800971a:	4b28      	ldr	r3, [pc, #160]	@ (80097bc <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4013      	ands	r3, r2
 8009720:	4a26      	ldr	r2, [pc, #152]	@ (80097bc <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8009722:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8009724:	6a3b      	ldr	r3, [r7, #32]
 8009726:	4618      	mov	r0, r3
 8009728:	f002 f8ea 	bl	800b900 <SEGGER_SYSVIEW_OnTaskStartReady>
 800972c:	6a3b      	ldr	r3, [r7, #32]
 800972e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009730:	2201      	movs	r2, #1
 8009732:	409a      	lsls	r2, r3
 8009734:	4b21      	ldr	r3, [pc, #132]	@ (80097bc <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	4313      	orrs	r3, r2
 800973a:	4a20      	ldr	r2, [pc, #128]	@ (80097bc <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 800973c:	6013      	str	r3, [r2, #0]
 800973e:	6a3b      	ldr	r3, [r7, #32]
 8009740:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009742:	491d      	ldr	r1, [pc, #116]	@ (80097b8 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8009744:	4613      	mov	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	440b      	add	r3, r1
 800974e:	3304      	adds	r3, #4
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	617b      	str	r3, [r7, #20]
 8009754:	6a3b      	ldr	r3, [r7, #32]
 8009756:	697a      	ldr	r2, [r7, #20]
 8009758:	609a      	str	r2, [r3, #8]
 800975a:	697b      	ldr	r3, [r7, #20]
 800975c:	689a      	ldr	r2, [r3, #8]
 800975e:	6a3b      	ldr	r3, [r7, #32]
 8009760:	60da      	str	r2, [r3, #12]
 8009762:	697b      	ldr	r3, [r7, #20]
 8009764:	689b      	ldr	r3, [r3, #8]
 8009766:	6a3a      	ldr	r2, [r7, #32]
 8009768:	3204      	adds	r2, #4
 800976a:	605a      	str	r2, [r3, #4]
 800976c:	6a3b      	ldr	r3, [r7, #32]
 800976e:	1d1a      	adds	r2, r3, #4
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	609a      	str	r2, [r3, #8]
 8009774:	6a3b      	ldr	r3, [r7, #32]
 8009776:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009778:	4613      	mov	r3, r2
 800977a:	009b      	lsls	r3, r3, #2
 800977c:	4413      	add	r3, r2
 800977e:	009b      	lsls	r3, r3, #2
 8009780:	4a0d      	ldr	r2, [pc, #52]	@ (80097b8 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8009782:	441a      	add	r2, r3
 8009784:	6a3b      	ldr	r3, [r7, #32]
 8009786:	615a      	str	r2, [r3, #20]
 8009788:	6a3b      	ldr	r3, [r7, #32]
 800978a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800978c:	490a      	ldr	r1, [pc, #40]	@ (80097b8 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 800978e:	4613      	mov	r3, r2
 8009790:	009b      	lsls	r3, r3, #2
 8009792:	4413      	add	r3, r2
 8009794:	009b      	lsls	r3, r3, #2
 8009796:	440b      	add	r3, r1
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	1c59      	adds	r1, r3, #1
 800979c:	4806      	ldr	r0, [pc, #24]	@ (80097b8 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 800979e:	4613      	mov	r3, r2
 80097a0:	009b      	lsls	r3, r3, #2
 80097a2:	4413      	add	r3, r2
 80097a4:	009b      	lsls	r3, r3, #2
 80097a6:	4403      	add	r3, r0
 80097a8:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80097aa:	bf00      	nop
 80097ac:	3728      	adds	r7, #40	@ 0x28
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	2000049c 	.word	0x2000049c
 80097b8:	200004a0 	.word	0x200004a0
 80097bc:	2000057c 	.word	0x2000057c

080097c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80097c0:	b480      	push	{r7}
 80097c2:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 80097c4:	4b07      	ldr	r3, [pc, #28]	@ (80097e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d004      	beq.n	80097d6 <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 80097cc:	4b05      	ldr	r3, [pc, #20]	@ (80097e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80097d2:	3201      	adds	r2, #1
 80097d4:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 80097d6:	4b03      	ldr	r3, [pc, #12]	@ (80097e4 <pvTaskIncrementMutexHeldCount+0x24>)
 80097d8:	681b      	ldr	r3, [r3, #0]
    }
 80097da:	4618      	mov	r0, r3
 80097dc:	46bd      	mov	sp, r7
 80097de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e2:	4770      	bx	lr
 80097e4:	2000049c 	.word	0x2000049c

080097e8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80097e8:	b580      	push	{r7, lr}
 80097ea:	b086      	sub	sp, #24
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	6078      	str	r0, [r7, #4]
 80097f0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80097f2:	4b36      	ldr	r3, [pc, #216]	@ (80098cc <prvAddCurrentTaskToDelayedList+0xe4>)
 80097f4:	681b      	ldr	r3, [r3, #0]
 80097f6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80097f8:	4b35      	ldr	r3, [pc, #212]	@ (80098d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	3304      	adds	r3, #4
 80097fe:	4618      	mov	r0, r3
 8009800:	f7fe fa7a 	bl	8007cf8 <uxListRemove>
 8009804:	4603      	mov	r3, r0
 8009806:	2b00      	cmp	r3, #0
 8009808:	d10b      	bne.n	8009822 <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800980a:	4b31      	ldr	r3, [pc, #196]	@ (80098d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009810:	2201      	movs	r2, #1
 8009812:	fa02 f303 	lsl.w	r3, r2, r3
 8009816:	43da      	mvns	r2, r3
 8009818:	4b2e      	ldr	r3, [pc, #184]	@ (80098d4 <prvAddCurrentTaskToDelayedList+0xec>)
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	4013      	ands	r3, r2
 800981e:	4a2d      	ldr	r2, [pc, #180]	@ (80098d4 <prvAddCurrentTaskToDelayedList+0xec>)
 8009820:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009828:	d124      	bne.n	8009874 <prvAddCurrentTaskToDelayedList+0x8c>
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	2b00      	cmp	r3, #0
 800982e:	d021      	beq.n	8009874 <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009830:	4b29      	ldr	r3, [pc, #164]	@ (80098d8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	613b      	str	r3, [r7, #16]
 8009836:	4b26      	ldr	r3, [pc, #152]	@ (80098d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	693a      	ldr	r2, [r7, #16]
 800983c:	609a      	str	r2, [r3, #8]
 800983e:	4b24      	ldr	r3, [pc, #144]	@ (80098d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	693a      	ldr	r2, [r7, #16]
 8009844:	6892      	ldr	r2, [r2, #8]
 8009846:	60da      	str	r2, [r3, #12]
 8009848:	4b21      	ldr	r3, [pc, #132]	@ (80098d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	693b      	ldr	r3, [r7, #16]
 800984e:	689b      	ldr	r3, [r3, #8]
 8009850:	3204      	adds	r2, #4
 8009852:	605a      	str	r2, [r3, #4]
 8009854:	4b1e      	ldr	r3, [pc, #120]	@ (80098d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	1d1a      	adds	r2, r3, #4
 800985a:	693b      	ldr	r3, [r7, #16]
 800985c:	609a      	str	r2, [r3, #8]
 800985e:	4b1c      	ldr	r3, [pc, #112]	@ (80098d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	4a1d      	ldr	r2, [pc, #116]	@ (80098d8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8009864:	615a      	str	r2, [r3, #20]
 8009866:	4b1c      	ldr	r3, [pc, #112]	@ (80098d8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	3301      	adds	r3, #1
 800986c:	4a1a      	ldr	r2, [pc, #104]	@ (80098d8 <prvAddCurrentTaskToDelayedList+0xf0>)
 800986e:	6013      	str	r3, [r2, #0]
 8009870:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8009872:	e026      	b.n	80098c2 <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	4413      	add	r3, r2
 800987a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800987c:	4b14      	ldr	r3, [pc, #80]	@ (80098d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	68fa      	ldr	r2, [r7, #12]
 8009882:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8009884:	68fa      	ldr	r2, [r7, #12]
 8009886:	697b      	ldr	r3, [r7, #20]
 8009888:	429a      	cmp	r2, r3
 800988a:	d209      	bcs.n	80098a0 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800988c:	4b13      	ldr	r3, [pc, #76]	@ (80098dc <prvAddCurrentTaskToDelayedList+0xf4>)
 800988e:	681a      	ldr	r2, [r3, #0]
 8009890:	4b0f      	ldr	r3, [pc, #60]	@ (80098d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	3304      	adds	r3, #4
 8009896:	4619      	mov	r1, r3
 8009898:	4610      	mov	r0, r2
 800989a:	f7fe f9f4 	bl	8007c86 <vListInsert>
}
 800989e:	e010      	b.n	80098c2 <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80098a0:	4b0f      	ldr	r3, [pc, #60]	@ (80098e0 <prvAddCurrentTaskToDelayedList+0xf8>)
 80098a2:	681a      	ldr	r2, [r3, #0]
 80098a4:	4b0a      	ldr	r3, [pc, #40]	@ (80098d0 <prvAddCurrentTaskToDelayedList+0xe8>)
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	3304      	adds	r3, #4
 80098aa:	4619      	mov	r1, r3
 80098ac:	4610      	mov	r0, r2
 80098ae:	f7fe f9ea 	bl	8007c86 <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80098b2:	4b0c      	ldr	r3, [pc, #48]	@ (80098e4 <prvAddCurrentTaskToDelayedList+0xfc>)
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	68fa      	ldr	r2, [r7, #12]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d202      	bcs.n	80098c2 <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 80098bc:	4a09      	ldr	r2, [pc, #36]	@ (80098e4 <prvAddCurrentTaskToDelayedList+0xfc>)
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	6013      	str	r3, [r2, #0]
}
 80098c2:	bf00      	nop
 80098c4:	3718      	adds	r7, #24
 80098c6:	46bd      	mov	sp, r7
 80098c8:	bd80      	pop	{r7, pc}
 80098ca:	bf00      	nop
 80098cc:	20000578 	.word	0x20000578
 80098d0:	2000049c 	.word	0x2000049c
 80098d4:	2000057c 	.word	0x2000057c
 80098d8:	20000560 	.word	0x20000560
 80098dc:	20000530 	.word	0x20000530
 80098e0:	2000052c 	.word	0x2000052c
 80098e4:	20000594 	.word	0x20000594

080098e8 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80098e8:	b480      	push	{r7}
 80098ea:	b085      	sub	sp, #20
 80098ec:	af00      	add	r7, sp, #0
 80098ee:	60f8      	str	r0, [r7, #12]
 80098f0:	60b9      	str	r1, [r7, #8]
 80098f2:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80098f4:	68fb      	ldr	r3, [r7, #12]
 80098f6:	3b04      	subs	r3, #4
 80098f8:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8009900:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3b04      	subs	r3, #4
 8009906:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8009908:	68bb      	ldr	r3, [r7, #8]
 800990a:	f023 0201 	bic.w	r2, r3, #1
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	3b04      	subs	r3, #4
 8009916:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8009918:	4a0c      	ldr	r2, [pc, #48]	@ (800994c <pxPortInitialiseStack+0x64>)
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	3b14      	subs	r3, #20
 8009922:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8009924:	687a      	ldr	r2, [r7, #4]
 8009926:	68fb      	ldr	r3, [r7, #12]
 8009928:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	3b04      	subs	r3, #4
 800992e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8009930:	68fb      	ldr	r3, [r7, #12]
 8009932:	f06f 0202 	mvn.w	r2, #2
 8009936:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	3b20      	subs	r3, #32
 800993c:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 800993e:	68fb      	ldr	r3, [r7, #12]
}
 8009940:	4618      	mov	r0, r3
 8009942:	3714      	adds	r7, #20
 8009944:	46bd      	mov	sp, r7
 8009946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800994a:	4770      	bx	lr
 800994c:	08009951 	.word	0x08009951

08009950 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8009950:	b480      	push	{r7}
 8009952:	b085      	sub	sp, #20
 8009954:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8009956:	2300      	movs	r3, #0
 8009958:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800995a:	4b13      	ldr	r3, [pc, #76]	@ (80099a8 <prvTaskExitError+0x58>)
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009962:	d00b      	beq.n	800997c <prvTaskExitError+0x2c>
        __asm volatile
 8009964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009968:	f383 8811 	msr	BASEPRI, r3
 800996c:	f3bf 8f6f 	isb	sy
 8009970:	f3bf 8f4f 	dsb	sy
 8009974:	60fb      	str	r3, [r7, #12]
    }
 8009976:	bf00      	nop
 8009978:	bf00      	nop
 800997a:	e7fd      	b.n	8009978 <prvTaskExitError+0x28>
        __asm volatile
 800997c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009980:	f383 8811 	msr	BASEPRI, r3
 8009984:	f3bf 8f6f 	isb	sy
 8009988:	f3bf 8f4f 	dsb	sy
 800998c:	60bb      	str	r3, [r7, #8]
    }
 800998e:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8009990:	bf00      	nop
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2b00      	cmp	r3, #0
 8009996:	d0fc      	beq.n	8009992 <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8009998:	bf00      	nop
 800999a:	bf00      	nop
 800999c:	3714      	adds	r7, #20
 800999e:	46bd      	mov	sp, r7
 80099a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099a4:	4770      	bx	lr
 80099a6:	bf00      	nop
 80099a8:	20000010 	.word	0x20000010
 80099ac:	00000000 	.word	0x00000000

080099b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80099b0:	4b07      	ldr	r3, [pc, #28]	@ (80099d0 <pxCurrentTCBConst2>)
 80099b2:	6819      	ldr	r1, [r3, #0]
 80099b4:	6808      	ldr	r0, [r1, #0]
 80099b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ba:	f380 8809 	msr	PSP, r0
 80099be:	f3bf 8f6f 	isb	sy
 80099c2:	f04f 0000 	mov.w	r0, #0
 80099c6:	f380 8811 	msr	BASEPRI, r0
 80099ca:	4770      	bx	lr
 80099cc:	f3af 8000 	nop.w

080099d0 <pxCurrentTCBConst2>:
 80099d0:	2000049c 	.word	0x2000049c
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 80099d4:	bf00      	nop
 80099d6:	bf00      	nop

080099d8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80099d8:	4808      	ldr	r0, [pc, #32]	@ (80099fc <prvPortStartFirstTask+0x24>)
 80099da:	6800      	ldr	r0, [r0, #0]
 80099dc:	6800      	ldr	r0, [r0, #0]
 80099de:	f380 8808 	msr	MSP, r0
 80099e2:	f04f 0000 	mov.w	r0, #0
 80099e6:	f380 8814 	msr	CONTROL, r0
 80099ea:	b662      	cpsie	i
 80099ec:	b661      	cpsie	f
 80099ee:	f3bf 8f4f 	dsb	sy
 80099f2:	f3bf 8f6f 	isb	sy
 80099f6:	df00      	svc	0
 80099f8:	bf00      	nop
 80099fa:	0000      	.short	0x0000
 80099fc:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8009a00:	bf00      	nop
 8009a02:	bf00      	nop

08009a04 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009a04:	b580      	push	{r7, lr}
 8009a06:	b086      	sub	sp, #24
 8009a08:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8009a0a:	4b47      	ldr	r3, [pc, #284]	@ (8009b28 <xPortStartScheduler+0x124>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a47      	ldr	r2, [pc, #284]	@ (8009b2c <xPortStartScheduler+0x128>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	d10b      	bne.n	8009a2c <xPortStartScheduler+0x28>
        __asm volatile
 8009a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a18:	f383 8811 	msr	BASEPRI, r3
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	613b      	str	r3, [r7, #16]
    }
 8009a26:	bf00      	nop
 8009a28:	bf00      	nop
 8009a2a:	e7fd      	b.n	8009a28 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8009a2c:	4b3e      	ldr	r3, [pc, #248]	@ (8009b28 <xPortStartScheduler+0x124>)
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a3f      	ldr	r2, [pc, #252]	@ (8009b30 <xPortStartScheduler+0x12c>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d10b      	bne.n	8009a4e <xPortStartScheduler+0x4a>
        __asm volatile
 8009a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009a3a:	f383 8811 	msr	BASEPRI, r3
 8009a3e:	f3bf 8f6f 	isb	sy
 8009a42:	f3bf 8f4f 	dsb	sy
 8009a46:	60fb      	str	r3, [r7, #12]
    }
 8009a48:	bf00      	nop
 8009a4a:	bf00      	nop
 8009a4c:	e7fd      	b.n	8009a4a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8009a4e:	4b39      	ldr	r3, [pc, #228]	@ (8009b34 <xPortStartScheduler+0x130>)
 8009a50:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8009a52:	697b      	ldr	r3, [r7, #20]
 8009a54:	781b      	ldrb	r3, [r3, #0]
 8009a56:	b2db      	uxtb	r3, r3
 8009a58:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	22ff      	movs	r2, #255	@ 0xff
 8009a5e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8009a60:	697b      	ldr	r3, [r7, #20]
 8009a62:	781b      	ldrb	r3, [r3, #0]
 8009a64:	b2db      	uxtb	r3, r3
 8009a66:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8009a68:	78fb      	ldrb	r3, [r7, #3]
 8009a6a:	b2db      	uxtb	r3, r3
 8009a6c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8009a70:	b2da      	uxtb	r2, r3
 8009a72:	4b31      	ldr	r3, [pc, #196]	@ (8009b38 <xPortStartScheduler+0x134>)
 8009a74:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8009a76:	4b31      	ldr	r3, [pc, #196]	@ (8009b3c <xPortStartScheduler+0x138>)
 8009a78:	2207      	movs	r2, #7
 8009a7a:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a7c:	e009      	b.n	8009a92 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8009a7e:	4b2f      	ldr	r3, [pc, #188]	@ (8009b3c <xPortStartScheduler+0x138>)
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	3b01      	subs	r3, #1
 8009a84:	4a2d      	ldr	r2, [pc, #180]	@ (8009b3c <xPortStartScheduler+0x138>)
 8009a86:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8009a88:	78fb      	ldrb	r3, [r7, #3]
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	005b      	lsls	r3, r3, #1
 8009a8e:	b2db      	uxtb	r3, r3
 8009a90:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8009a92:	78fb      	ldrb	r3, [r7, #3]
 8009a94:	b2db      	uxtb	r3, r3
 8009a96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009a9a:	2b80      	cmp	r3, #128	@ 0x80
 8009a9c:	d0ef      	beq.n	8009a7e <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8009a9e:	4b27      	ldr	r3, [pc, #156]	@ (8009b3c <xPortStartScheduler+0x138>)
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	f1c3 0307 	rsb	r3, r3, #7
 8009aa6:	2b04      	cmp	r3, #4
 8009aa8:	d00b      	beq.n	8009ac2 <xPortStartScheduler+0xbe>
        __asm volatile
 8009aaa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009aae:	f383 8811 	msr	BASEPRI, r3
 8009ab2:	f3bf 8f6f 	isb	sy
 8009ab6:	f3bf 8f4f 	dsb	sy
 8009aba:	60bb      	str	r3, [r7, #8]
    }
 8009abc:	bf00      	nop
 8009abe:	bf00      	nop
 8009ac0:	e7fd      	b.n	8009abe <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8009ac2:	4b1e      	ldr	r3, [pc, #120]	@ (8009b3c <xPortStartScheduler+0x138>)
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	021b      	lsls	r3, r3, #8
 8009ac8:	4a1c      	ldr	r2, [pc, #112]	@ (8009b3c <xPortStartScheduler+0x138>)
 8009aca:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8009acc:	4b1b      	ldr	r3, [pc, #108]	@ (8009b3c <xPortStartScheduler+0x138>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8009ad4:	4a19      	ldr	r2, [pc, #100]	@ (8009b3c <xPortStartScheduler+0x138>)
 8009ad6:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	b2da      	uxtb	r2, r3
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8009ae0:	4b17      	ldr	r3, [pc, #92]	@ (8009b40 <xPortStartScheduler+0x13c>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a16      	ldr	r2, [pc, #88]	@ (8009b40 <xPortStartScheduler+0x13c>)
 8009ae6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8009aea:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8009aec:	4b14      	ldr	r3, [pc, #80]	@ (8009b40 <xPortStartScheduler+0x13c>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a13      	ldr	r2, [pc, #76]	@ (8009b40 <xPortStartScheduler+0x13c>)
 8009af2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8009af6:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8009af8:	f000 f8e0 	bl	8009cbc <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8009afc:	4b11      	ldr	r3, [pc, #68]	@ (8009b44 <xPortStartScheduler+0x140>)
 8009afe:	2200      	movs	r2, #0
 8009b00:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8009b02:	f000 f8ff 	bl	8009d04 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8009b06:	4b10      	ldr	r3, [pc, #64]	@ (8009b48 <xPortStartScheduler+0x144>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	4a0f      	ldr	r2, [pc, #60]	@ (8009b48 <xPortStartScheduler+0x144>)
 8009b0c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8009b10:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8009b12:	f7ff ff61 	bl	80099d8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8009b16:	f7ff f9a1 	bl	8008e5c <vTaskSwitchContext>
    prvTaskExitError();
 8009b1a:	f7ff ff19 	bl	8009950 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8009b1e:	2300      	movs	r3, #0
}
 8009b20:	4618      	mov	r0, r3
 8009b22:	3718      	adds	r7, #24
 8009b24:	46bd      	mov	sp, r7
 8009b26:	bd80      	pop	{r7, pc}
 8009b28:	e000ed00 	.word	0xe000ed00
 8009b2c:	410fc271 	.word	0x410fc271
 8009b30:	410fc270 	.word	0x410fc270
 8009b34:	e000e400 	.word	0xe000e400
 8009b38:	200005a0 	.word	0x200005a0
 8009b3c:	200005a4 	.word	0x200005a4
 8009b40:	e000ed20 	.word	0xe000ed20
 8009b44:	20000010 	.word	0x20000010
 8009b48:	e000ef34 	.word	0xe000ef34

08009b4c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b4c:	b480      	push	{r7}
 8009b4e:	b083      	sub	sp, #12
 8009b50:	af00      	add	r7, sp, #0
        __asm volatile
 8009b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b56:	f383 8811 	msr	BASEPRI, r3
 8009b5a:	f3bf 8f6f 	isb	sy
 8009b5e:	f3bf 8f4f 	dsb	sy
 8009b62:	607b      	str	r3, [r7, #4]
    }
 8009b64:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8009b66:	4b10      	ldr	r3, [pc, #64]	@ (8009ba8 <vPortEnterCritical+0x5c>)
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	3301      	adds	r3, #1
 8009b6c:	4a0e      	ldr	r2, [pc, #56]	@ (8009ba8 <vPortEnterCritical+0x5c>)
 8009b6e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8009b70:	4b0d      	ldr	r3, [pc, #52]	@ (8009ba8 <vPortEnterCritical+0x5c>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	2b01      	cmp	r3, #1
 8009b76:	d110      	bne.n	8009b9a <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b78:	4b0c      	ldr	r3, [pc, #48]	@ (8009bac <vPortEnterCritical+0x60>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	b2db      	uxtb	r3, r3
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d00b      	beq.n	8009b9a <vPortEnterCritical+0x4e>
        __asm volatile
 8009b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b86:	f383 8811 	msr	BASEPRI, r3
 8009b8a:	f3bf 8f6f 	isb	sy
 8009b8e:	f3bf 8f4f 	dsb	sy
 8009b92:	603b      	str	r3, [r7, #0]
    }
 8009b94:	bf00      	nop
 8009b96:	bf00      	nop
 8009b98:	e7fd      	b.n	8009b96 <vPortEnterCritical+0x4a>
    }
}
 8009b9a:	bf00      	nop
 8009b9c:	370c      	adds	r7, #12
 8009b9e:	46bd      	mov	sp, r7
 8009ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ba4:	4770      	bx	lr
 8009ba6:	bf00      	nop
 8009ba8:	20000010 	.word	0x20000010
 8009bac:	e000ed04 	.word	0xe000ed04

08009bb0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009bb0:	b480      	push	{r7}
 8009bb2:	b083      	sub	sp, #12
 8009bb4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8009bb6:	4b12      	ldr	r3, [pc, #72]	@ (8009c00 <vPortExitCritical+0x50>)
 8009bb8:	681b      	ldr	r3, [r3, #0]
 8009bba:	2b00      	cmp	r3, #0
 8009bbc:	d10b      	bne.n	8009bd6 <vPortExitCritical+0x26>
        __asm volatile
 8009bbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009bc2:	f383 8811 	msr	BASEPRI, r3
 8009bc6:	f3bf 8f6f 	isb	sy
 8009bca:	f3bf 8f4f 	dsb	sy
 8009bce:	607b      	str	r3, [r7, #4]
    }
 8009bd0:	bf00      	nop
 8009bd2:	bf00      	nop
 8009bd4:	e7fd      	b.n	8009bd2 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8009bd6:	4b0a      	ldr	r3, [pc, #40]	@ (8009c00 <vPortExitCritical+0x50>)
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	4a08      	ldr	r2, [pc, #32]	@ (8009c00 <vPortExitCritical+0x50>)
 8009bde:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8009be0:	4b07      	ldr	r3, [pc, #28]	@ (8009c00 <vPortExitCritical+0x50>)
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d105      	bne.n	8009bf4 <vPortExitCritical+0x44>
 8009be8:	2300      	movs	r3, #0
 8009bea:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8009bf2:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8009bf4:	bf00      	nop
 8009bf6:	370c      	adds	r7, #12
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfe:	4770      	bx	lr
 8009c00:	20000010 	.word	0x20000010
	...

08009c10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8009c10:	f3ef 8009 	mrs	r0, PSP
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	4b15      	ldr	r3, [pc, #84]	@ (8009c70 <pxCurrentTCBConst>)
 8009c1a:	681a      	ldr	r2, [r3, #0]
 8009c1c:	f01e 0f10 	tst.w	lr, #16
 8009c20:	bf08      	it	eq
 8009c22:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009c26:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c2a:	6010      	str	r0, [r2, #0]
 8009c2c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009c30:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009c34:	f380 8811 	msr	BASEPRI, r0
 8009c38:	f3bf 8f4f 	dsb	sy
 8009c3c:	f3bf 8f6f 	isb	sy
 8009c40:	f7ff f90c 	bl	8008e5c <vTaskSwitchContext>
 8009c44:	f04f 0000 	mov.w	r0, #0
 8009c48:	f380 8811 	msr	BASEPRI, r0
 8009c4c:	bc09      	pop	{r0, r3}
 8009c4e:	6819      	ldr	r1, [r3, #0]
 8009c50:	6808      	ldr	r0, [r1, #0]
 8009c52:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c56:	f01e 0f10 	tst.w	lr, #16
 8009c5a:	bf08      	it	eq
 8009c5c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c60:	f380 8809 	msr	PSP, r0
 8009c64:	f3bf 8f6f 	isb	sy
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	f3af 8000 	nop.w

08009c70 <pxCurrentTCBConst>:
 8009c70:	2000049c 	.word	0x2000049c
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8009c74:	bf00      	nop
 8009c76:	bf00      	nop

08009c78 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
        __asm volatile
 8009c7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c82:	f383 8811 	msr	BASEPRI, r3
 8009c86:	f3bf 8f6f 	isb	sy
 8009c8a:	f3bf 8f4f 	dsb	sy
 8009c8e:	607b      	str	r3, [r7, #4]
    }
 8009c90:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8009c92:	f7fe ffc7 	bl	8008c24 <xTaskIncrementTick>
 8009c96:	4603      	mov	r3, r0
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d003      	beq.n	8009ca4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c9c:	4b06      	ldr	r3, [pc, #24]	@ (8009cb8 <SysTick_Handler+0x40>)
 8009c9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ca2:	601a      	str	r2, [r3, #0]
 8009ca4:	2300      	movs	r3, #0
 8009ca6:	603b      	str	r3, [r7, #0]
        __asm volatile
 8009ca8:	683b      	ldr	r3, [r7, #0]
 8009caa:	f383 8811 	msr	BASEPRI, r3
    }
 8009cae:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8009cb0:	bf00      	nop
 8009cb2:	3708      	adds	r7, #8
 8009cb4:	46bd      	mov	sp, r7
 8009cb6:	bd80      	pop	{r7, pc}
 8009cb8:	e000ed04 	.word	0xe000ed04

08009cbc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8009cbc:	b480      	push	{r7}
 8009cbe:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009cc0:	4b0b      	ldr	r3, [pc, #44]	@ (8009cf0 <vPortSetupTimerInterrupt+0x34>)
 8009cc2:	2200      	movs	r2, #0
 8009cc4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009cc6:	4b0b      	ldr	r3, [pc, #44]	@ (8009cf4 <vPortSetupTimerInterrupt+0x38>)
 8009cc8:	2200      	movs	r2, #0
 8009cca:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8009ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8009cf8 <vPortSetupTimerInterrupt+0x3c>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	4a0a      	ldr	r2, [pc, #40]	@ (8009cfc <vPortSetupTimerInterrupt+0x40>)
 8009cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd6:	099b      	lsrs	r3, r3, #6
 8009cd8:	4a09      	ldr	r2, [pc, #36]	@ (8009d00 <vPortSetupTimerInterrupt+0x44>)
 8009cda:	3b01      	subs	r3, #1
 8009cdc:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8009cde:	4b04      	ldr	r3, [pc, #16]	@ (8009cf0 <vPortSetupTimerInterrupt+0x34>)
 8009ce0:	2207      	movs	r2, #7
 8009ce2:	601a      	str	r2, [r3, #0]
}
 8009ce4:	bf00      	nop
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr
 8009cee:	bf00      	nop
 8009cf0:	e000e010 	.word	0xe000e010
 8009cf4:	e000e018 	.word	0xe000e018
 8009cf8:	20000000 	.word	0x20000000
 8009cfc:	10624dd3 	.word	0x10624dd3
 8009d00:	e000e014 	.word	0xe000e014

08009d04 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8009d04:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009d14 <vPortEnableVFP+0x10>
 8009d08:	6801      	ldr	r1, [r0, #0]
 8009d0a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8009d0e:	6001      	str	r1, [r0, #0]
 8009d10:	4770      	bx	lr
 8009d12:	0000      	.short	0x0000
 8009d14:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8009d18:	bf00      	nop
 8009d1a:	bf00      	nop

08009d1c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8009d22:	f3ef 8305 	mrs	r3, IPSR
 8009d26:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2b0f      	cmp	r3, #15
 8009d2c:	d915      	bls.n	8009d5a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009d2e:	4a18      	ldr	r2, [pc, #96]	@ (8009d90 <vPortValidateInterruptPriority+0x74>)
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	4413      	add	r3, r2
 8009d34:	781b      	ldrb	r3, [r3, #0]
 8009d36:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009d38:	4b16      	ldr	r3, [pc, #88]	@ (8009d94 <vPortValidateInterruptPriority+0x78>)
 8009d3a:	781b      	ldrb	r3, [r3, #0]
 8009d3c:	7afa      	ldrb	r2, [r7, #11]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d20b      	bcs.n	8009d5a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8009d42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d46:	f383 8811 	msr	BASEPRI, r3
 8009d4a:	f3bf 8f6f 	isb	sy
 8009d4e:	f3bf 8f4f 	dsb	sy
 8009d52:	607b      	str	r3, [r7, #4]
    }
 8009d54:	bf00      	nop
 8009d56:	bf00      	nop
 8009d58:	e7fd      	b.n	8009d56 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009d5a:	4b0f      	ldr	r3, [pc, #60]	@ (8009d98 <vPortValidateInterruptPriority+0x7c>)
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009d62:	4b0e      	ldr	r3, [pc, #56]	@ (8009d9c <vPortValidateInterruptPriority+0x80>)
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d90b      	bls.n	8009d82 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 8009d6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d6e:	f383 8811 	msr	BASEPRI, r3
 8009d72:	f3bf 8f6f 	isb	sy
 8009d76:	f3bf 8f4f 	dsb	sy
 8009d7a:	603b      	str	r3, [r7, #0]
    }
 8009d7c:	bf00      	nop
 8009d7e:	bf00      	nop
 8009d80:	e7fd      	b.n	8009d7e <vPortValidateInterruptPriority+0x62>
    }
 8009d82:	bf00      	nop
 8009d84:	3714      	adds	r7, #20
 8009d86:	46bd      	mov	sp, r7
 8009d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d8c:	4770      	bx	lr
 8009d8e:	bf00      	nop
 8009d90:	e000e3f0 	.word	0xe000e3f0
 8009d94:	200005a0 	.word	0x200005a0
 8009d98:	e000ed0c 	.word	0xe000ed0c
 8009d9c:	200005a4 	.word	0x200005a4

08009da0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8009da0:	b580      	push	{r7, lr}
 8009da2:	b08a      	sub	sp, #40	@ 0x28
 8009da4:	af00      	add	r7, sp, #0
 8009da6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 8009da8:	2300      	movs	r3, #0
 8009daa:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 8009dac:	f7fe fdf4 	bl	8008998 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8009db0:	4b54      	ldr	r3, [pc, #336]	@ (8009f04 <pvPortMalloc+0x164>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	2b00      	cmp	r3, #0
 8009db6:	d101      	bne.n	8009dbc <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8009db8:	f000 f90c 	bl	8009fd4 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d012      	beq.n	8009de8 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8009dc2:	2208      	movs	r2, #8
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	f003 0307 	and.w	r3, r3, #7
 8009dca:	1ad3      	subs	r3, r2, r3
 8009dcc:	3308      	adds	r3, #8
 8009dce:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8009dd0:	69bb      	ldr	r3, [r7, #24]
 8009dd2:	43db      	mvns	r3, r3
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	429a      	cmp	r2, r3
 8009dd8:	d804      	bhi.n	8009de4 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 8009dda:	687a      	ldr	r2, [r7, #4]
 8009ddc:	69bb      	ldr	r3, [r7, #24]
 8009dde:	4413      	add	r3, r2
 8009de0:	607b      	str	r3, [r7, #4]
 8009de2:	e001      	b.n	8009de8 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8009de4:	2300      	movs	r3, #0
 8009de6:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	db71      	blt.n	8009ed2 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d06e      	beq.n	8009ed2 <pvPortMalloc+0x132>
 8009df4:	4b44      	ldr	r3, [pc, #272]	@ (8009f08 <pvPortMalloc+0x168>)
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	687a      	ldr	r2, [r7, #4]
 8009dfa:	429a      	cmp	r2, r3
 8009dfc:	d869      	bhi.n	8009ed2 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8009dfe:	4b43      	ldr	r3, [pc, #268]	@ (8009f0c <pvPortMalloc+0x16c>)
 8009e00:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8009e02:	4b42      	ldr	r3, [pc, #264]	@ (8009f0c <pvPortMalloc+0x16c>)
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e08:	e004      	b.n	8009e14 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 8009e0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e0c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8009e0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e10:	681b      	ldr	r3, [r3, #0]
 8009e12:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009e14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	687a      	ldr	r2, [r7, #4]
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d903      	bls.n	8009e26 <pvPortMalloc+0x86>
 8009e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e20:	681b      	ldr	r3, [r3, #0]
 8009e22:	2b00      	cmp	r3, #0
 8009e24:	d1f1      	bne.n	8009e0a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8009e26:	4b37      	ldr	r3, [pc, #220]	@ (8009f04 <pvPortMalloc+0x164>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e2c:	429a      	cmp	r2, r3
 8009e2e:	d050      	beq.n	8009ed2 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009e30:	6a3b      	ldr	r3, [r7, #32]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	2208      	movs	r2, #8
 8009e36:	4413      	add	r3, r2
 8009e38:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e3c:	681a      	ldr	r2, [r3, #0]
 8009e3e:	6a3b      	ldr	r3, [r7, #32]
 8009e40:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e44:	685a      	ldr	r2, [r3, #4]
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	1ad2      	subs	r2, r2, r3
 8009e4a:	2308      	movs	r3, #8
 8009e4c:	005b      	lsls	r3, r3, #1
 8009e4e:	429a      	cmp	r2, r3
 8009e50:	d920      	bls.n	8009e94 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009e52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009e54:	687b      	ldr	r3, [r7, #4]
 8009e56:	4413      	add	r3, r2
 8009e58:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	f003 0307 	and.w	r3, r3, #7
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d00b      	beq.n	8009e7c <pvPortMalloc+0xdc>
        __asm volatile
 8009e64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e68:	f383 8811 	msr	BASEPRI, r3
 8009e6c:	f3bf 8f6f 	isb	sy
 8009e70:	f3bf 8f4f 	dsb	sy
 8009e74:	613b      	str	r3, [r7, #16]
    }
 8009e76:	bf00      	nop
 8009e78:	bf00      	nop
 8009e7a:	e7fd      	b.n	8009e78 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e7e:	685a      	ldr	r2, [r3, #4]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	1ad2      	subs	r2, r2, r3
 8009e84:	697b      	ldr	r3, [r7, #20]
 8009e86:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8009e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e8a:	687a      	ldr	r2, [r7, #4]
 8009e8c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009e8e:	6978      	ldr	r0, [r7, #20]
 8009e90:	f000 f8fc 	bl	800a08c <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009e94:	4b1c      	ldr	r3, [pc, #112]	@ (8009f08 <pvPortMalloc+0x168>)
 8009e96:	681a      	ldr	r2, [r3, #0]
 8009e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009e9a:	685b      	ldr	r3, [r3, #4]
 8009e9c:	1ad3      	subs	r3, r2, r3
 8009e9e:	4a1a      	ldr	r2, [pc, #104]	@ (8009f08 <pvPortMalloc+0x168>)
 8009ea0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ea2:	4b19      	ldr	r3, [pc, #100]	@ (8009f08 <pvPortMalloc+0x168>)
 8009ea4:	681a      	ldr	r2, [r3, #0]
 8009ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8009f10 <pvPortMalloc+0x170>)
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	429a      	cmp	r2, r3
 8009eac:	d203      	bcs.n	8009eb6 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009eae:	4b16      	ldr	r3, [pc, #88]	@ (8009f08 <pvPortMalloc+0x168>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	4a17      	ldr	r2, [pc, #92]	@ (8009f10 <pvPortMalloc+0x170>)
 8009eb4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8009eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009eb8:	685b      	ldr	r3, [r3, #4]
 8009eba:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8009ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8009ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8009ec8:	4b12      	ldr	r3, [pc, #72]	@ (8009f14 <pvPortMalloc+0x174>)
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	3301      	adds	r3, #1
 8009ece:	4a11      	ldr	r2, [pc, #68]	@ (8009f14 <pvPortMalloc+0x174>)
 8009ed0:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8009ed2:	f7fe fd6f 	bl	80089b4 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009ed6:	69fb      	ldr	r3, [r7, #28]
 8009ed8:	f003 0307 	and.w	r3, r3, #7
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	d00b      	beq.n	8009ef8 <pvPortMalloc+0x158>
        __asm volatile
 8009ee0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee4:	f383 8811 	msr	BASEPRI, r3
 8009ee8:	f3bf 8f6f 	isb	sy
 8009eec:	f3bf 8f4f 	dsb	sy
 8009ef0:	60fb      	str	r3, [r7, #12]
    }
 8009ef2:	bf00      	nop
 8009ef4:	bf00      	nop
 8009ef6:	e7fd      	b.n	8009ef4 <pvPortMalloc+0x154>
    return pvReturn;
 8009ef8:	69fb      	ldr	r3, [r7, #28]
}
 8009efa:	4618      	mov	r0, r3
 8009efc:	3728      	adds	r7, #40	@ 0x28
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}
 8009f02:	bf00      	nop
 8009f04:	200131b0 	.word	0x200131b0
 8009f08:	200131b4 	.word	0x200131b4
 8009f0c:	200131a8 	.word	0x200131a8
 8009f10:	200131b8 	.word	0x200131b8
 8009f14:	200131bc 	.word	0x200131bc

08009f18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b086      	sub	sp, #24
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d04b      	beq.n	8009fc2 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8009f2a:	2308      	movs	r3, #8
 8009f2c:	425b      	negs	r3, r3
 8009f2e:	697a      	ldr	r2, [r7, #20]
 8009f30:	4413      	add	r3, r2
 8009f32:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8009f34:	697b      	ldr	r3, [r7, #20]
 8009f36:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8009f38:	693b      	ldr	r3, [r7, #16]
 8009f3a:	685b      	ldr	r3, [r3, #4]
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	db0b      	blt.n	8009f58 <vPortFree+0x40>
        __asm volatile
 8009f40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f44:	f383 8811 	msr	BASEPRI, r3
 8009f48:	f3bf 8f6f 	isb	sy
 8009f4c:	f3bf 8f4f 	dsb	sy
 8009f50:	60fb      	str	r3, [r7, #12]
    }
 8009f52:	bf00      	nop
 8009f54:	bf00      	nop
 8009f56:	e7fd      	b.n	8009f54 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009f58:	693b      	ldr	r3, [r7, #16]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	2b00      	cmp	r3, #0
 8009f5e:	d00b      	beq.n	8009f78 <vPortFree+0x60>
        __asm volatile
 8009f60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f64:	f383 8811 	msr	BASEPRI, r3
 8009f68:	f3bf 8f6f 	isb	sy
 8009f6c:	f3bf 8f4f 	dsb	sy
 8009f70:	60bb      	str	r3, [r7, #8]
    }
 8009f72:	bf00      	nop
 8009f74:	bf00      	nop
 8009f76:	e7fd      	b.n	8009f74 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8009f78:	693b      	ldr	r3, [r7, #16]
 8009f7a:	685b      	ldr	r3, [r3, #4]
 8009f7c:	0fdb      	lsrs	r3, r3, #31
 8009f7e:	f003 0301 	and.w	r3, r3, #1
 8009f82:	b2db      	uxtb	r3, r3
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d01c      	beq.n	8009fc2 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8009f88:	693b      	ldr	r3, [r7, #16]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	d118      	bne.n	8009fc2 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8009f90:	693b      	ldr	r3, [r7, #16]
 8009f92:	685b      	ldr	r3, [r3, #4]
 8009f94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8009f98:	693b      	ldr	r3, [r7, #16]
 8009f9a:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 8009f9c:	f7fe fcfc 	bl	8008998 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8009fa0:	693b      	ldr	r3, [r7, #16]
 8009fa2:	685a      	ldr	r2, [r3, #4]
 8009fa4:	4b09      	ldr	r3, [pc, #36]	@ (8009fcc <vPortFree+0xb4>)
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	4413      	add	r3, r2
 8009faa:	4a08      	ldr	r2, [pc, #32]	@ (8009fcc <vPortFree+0xb4>)
 8009fac:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009fae:	6938      	ldr	r0, [r7, #16]
 8009fb0:	f000 f86c 	bl	800a08c <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8009fb4:	4b06      	ldr	r3, [pc, #24]	@ (8009fd0 <vPortFree+0xb8>)
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	3301      	adds	r3, #1
 8009fba:	4a05      	ldr	r2, [pc, #20]	@ (8009fd0 <vPortFree+0xb8>)
 8009fbc:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8009fbe:	f7fe fcf9 	bl	80089b4 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8009fc2:	bf00      	nop
 8009fc4:	3718      	adds	r7, #24
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}
 8009fca:	bf00      	nop
 8009fcc:	200131b4 	.word	0x200131b4
 8009fd0:	200131c0 	.word	0x200131c0

08009fd4 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b085      	sub	sp, #20
 8009fd8:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009fda:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 8009fde:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8009fe0:	4b25      	ldr	r3, [pc, #148]	@ (800a078 <prvHeapInit+0xa4>)
 8009fe2:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	f003 0307 	and.w	r3, r3, #7
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d00c      	beq.n	800a008 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	3307      	adds	r3, #7
 8009ff2:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	f023 0307 	bic.w	r3, r3, #7
 8009ffa:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 8009ffc:	68ba      	ldr	r2, [r7, #8]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	1ad3      	subs	r3, r2, r3
 800a002:	4a1d      	ldr	r2, [pc, #116]	@ (800a078 <prvHeapInit+0xa4>)
 800a004:	4413      	add	r3, r2
 800a006:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800a00c:	4a1b      	ldr	r2, [pc, #108]	@ (800a07c <prvHeapInit+0xa8>)
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800a012:	4b1a      	ldr	r3, [pc, #104]	@ (800a07c <prvHeapInit+0xa8>)
 800a014:	2200      	movs	r2, #0
 800a016:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	4413      	add	r3, r2
 800a01e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800a020:	2208      	movs	r2, #8
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	1a9b      	subs	r3, r3, r2
 800a026:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	f023 0307 	bic.w	r3, r3, #7
 800a02e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 800a030:	68fb      	ldr	r3, [r7, #12]
 800a032:	4a13      	ldr	r2, [pc, #76]	@ (800a080 <prvHeapInit+0xac>)
 800a034:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 800a036:	4b12      	ldr	r3, [pc, #72]	@ (800a080 <prvHeapInit+0xac>)
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	2200      	movs	r2, #0
 800a03c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800a03e:	4b10      	ldr	r3, [pc, #64]	@ (800a080 <prvHeapInit+0xac>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	2200      	movs	r2, #0
 800a044:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 800a046:	687b      	ldr	r3, [r7, #4]
 800a048:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800a04a:	683b      	ldr	r3, [r7, #0]
 800a04c:	68fa      	ldr	r2, [r7, #12]
 800a04e:	1ad2      	subs	r2, r2, r3
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800a054:	4b0a      	ldr	r3, [pc, #40]	@ (800a080 <prvHeapInit+0xac>)
 800a056:	681a      	ldr	r2, [r3, #0]
 800a058:	683b      	ldr	r3, [r7, #0]
 800a05a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a05c:	683b      	ldr	r3, [r7, #0]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	4a08      	ldr	r2, [pc, #32]	@ (800a084 <prvHeapInit+0xb0>)
 800a062:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800a064:	683b      	ldr	r3, [r7, #0]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	4a07      	ldr	r2, [pc, #28]	@ (800a088 <prvHeapInit+0xb4>)
 800a06a:	6013      	str	r3, [r2, #0]
}
 800a06c:	bf00      	nop
 800a06e:	3714      	adds	r7, #20
 800a070:	46bd      	mov	sp, r7
 800a072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a076:	4770      	bx	lr
 800a078:	200005a8 	.word	0x200005a8
 800a07c:	200131a8 	.word	0x200131a8
 800a080:	200131b0 	.word	0x200131b0
 800a084:	200131b8 	.word	0x200131b8
 800a088:	200131b4 	.word	0x200131b4

0800a08c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 800a08c:	b480      	push	{r7}
 800a08e:	b085      	sub	sp, #20
 800a090:	af00      	add	r7, sp, #0
 800a092:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800a094:	4b28      	ldr	r3, [pc, #160]	@ (800a138 <prvInsertBlockIntoFreeList+0xac>)
 800a096:	60fb      	str	r3, [r7, #12]
 800a098:	e002      	b.n	800a0a0 <prvInsertBlockIntoFreeList+0x14>
 800a09a:	68fb      	ldr	r3, [r7, #12]
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	60fb      	str	r3, [r7, #12]
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d8f7      	bhi.n	800a09a <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	685b      	ldr	r3, [r3, #4]
 800a0b2:	68ba      	ldr	r2, [r7, #8]
 800a0b4:	4413      	add	r3, r2
 800a0b6:	687a      	ldr	r2, [r7, #4]
 800a0b8:	429a      	cmp	r2, r3
 800a0ba:	d108      	bne.n	800a0ce <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	685a      	ldr	r2, [r3, #4]
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	685b      	ldr	r3, [r3, #4]
 800a0c4:	441a      	add	r2, r3
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	685b      	ldr	r3, [r3, #4]
 800a0d6:	68ba      	ldr	r2, [r7, #8]
 800a0d8:	441a      	add	r2, r3
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	429a      	cmp	r2, r3
 800a0e0:	d118      	bne.n	800a114 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800a0e2:	68fb      	ldr	r3, [r7, #12]
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	4b15      	ldr	r3, [pc, #84]	@ (800a13c <prvInsertBlockIntoFreeList+0xb0>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	429a      	cmp	r2, r3
 800a0ec:	d00d      	beq.n	800a10a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	685a      	ldr	r2, [r3, #4]
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	685b      	ldr	r3, [r3, #4]
 800a0f8:	441a      	add	r2, r3
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	681b      	ldr	r3, [r3, #0]
 800a102:	681a      	ldr	r2, [r3, #0]
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	601a      	str	r2, [r3, #0]
 800a108:	e008      	b.n	800a11c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800a10a:	4b0c      	ldr	r3, [pc, #48]	@ (800a13c <prvInsertBlockIntoFreeList+0xb0>)
 800a10c:	681a      	ldr	r2, [r3, #0]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	601a      	str	r2, [r3, #0]
 800a112:	e003      	b.n	800a11c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	429a      	cmp	r2, r3
 800a122:	d002      	beq.n	800a12a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	687a      	ldr	r2, [r7, #4]
 800a128:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800a12a:	bf00      	nop
 800a12c:	3714      	adds	r7, #20
 800a12e:	46bd      	mov	sp, r7
 800a130:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a134:	4770      	bx	lr
 800a136:	bf00      	nop
 800a138:	200131a8 	.word	0x200131a8
 800a13c:	200131b0 	.word	0x200131b0

0800a140 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 800a140:	b580      	push	{r7, lr}
 800a142:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 800a144:	4803      	ldr	r0, [pc, #12]	@ (800a154 <_cbSendSystemDesc+0x14>)
 800a146:	f001 fae5 	bl	800b714 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800a14a:	4803      	ldr	r0, [pc, #12]	@ (800a158 <_cbSendSystemDesc+0x18>)
 800a14c:	f001 fae2 	bl	800b714 <SEGGER_SYSVIEW_SendSysDesc>
}
 800a150:	bf00      	nop
 800a152:	bd80      	pop	{r7, pc}
 800a154:	0800fa58 	.word	0x0800fa58
 800a158:	0800fa8c 	.word	0x0800fa8c

0800a15c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800a15c:	b580      	push	{r7, lr}
 800a15e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 800a160:	4b06      	ldr	r3, [pc, #24]	@ (800a17c <SEGGER_SYSVIEW_Conf+0x20>)
 800a162:	6818      	ldr	r0, [r3, #0]
 800a164:	4b05      	ldr	r3, [pc, #20]	@ (800a17c <SEGGER_SYSVIEW_Conf+0x20>)
 800a166:	6819      	ldr	r1, [r3, #0]
 800a168:	4b05      	ldr	r3, [pc, #20]	@ (800a180 <SEGGER_SYSVIEW_Conf+0x24>)
 800a16a:	4a06      	ldr	r2, [pc, #24]	@ (800a184 <SEGGER_SYSVIEW_Conf+0x28>)
 800a16c:	f000 ff58 	bl	800b020 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 800a170:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 800a174:	f000 ff98 	bl	800b0a8 <SEGGER_SYSVIEW_SetRAMBase>
}
 800a178:	bf00      	nop
 800a17a:	bd80      	pop	{r7, pc}
 800a17c:	20000000 	.word	0x20000000
 800a180:	0800a141 	.word	0x0800a141
 800a184:	0800fb30 	.word	0x0800fb30

0800a188 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 800a188:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a18a:	b085      	sub	sp, #20
 800a18c:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 800a18e:	2300      	movs	r3, #0
 800a190:	607b      	str	r3, [r7, #4]
 800a192:	e033      	b.n	800a1fc <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 800a194:	491e      	ldr	r1, [pc, #120]	@ (800a210 <_cbSendTaskList+0x88>)
 800a196:	687a      	ldr	r2, [r7, #4]
 800a198:	4613      	mov	r3, r2
 800a19a:	009b      	lsls	r3, r3, #2
 800a19c:	4413      	add	r3, r2
 800a19e:	009b      	lsls	r3, r3, #2
 800a1a0:	440b      	add	r3, r1
 800a1a2:	6818      	ldr	r0, [r3, #0]
 800a1a4:	491a      	ldr	r1, [pc, #104]	@ (800a210 <_cbSendTaskList+0x88>)
 800a1a6:	687a      	ldr	r2, [r7, #4]
 800a1a8:	4613      	mov	r3, r2
 800a1aa:	009b      	lsls	r3, r3, #2
 800a1ac:	4413      	add	r3, r2
 800a1ae:	009b      	lsls	r3, r3, #2
 800a1b0:	440b      	add	r3, r1
 800a1b2:	3304      	adds	r3, #4
 800a1b4:	6819      	ldr	r1, [r3, #0]
 800a1b6:	4c16      	ldr	r4, [pc, #88]	@ (800a210 <_cbSendTaskList+0x88>)
 800a1b8:	687a      	ldr	r2, [r7, #4]
 800a1ba:	4613      	mov	r3, r2
 800a1bc:	009b      	lsls	r3, r3, #2
 800a1be:	4413      	add	r3, r2
 800a1c0:	009b      	lsls	r3, r3, #2
 800a1c2:	4423      	add	r3, r4
 800a1c4:	3308      	adds	r3, #8
 800a1c6:	681c      	ldr	r4, [r3, #0]
 800a1c8:	4d11      	ldr	r5, [pc, #68]	@ (800a210 <_cbSendTaskList+0x88>)
 800a1ca:	687a      	ldr	r2, [r7, #4]
 800a1cc:	4613      	mov	r3, r2
 800a1ce:	009b      	lsls	r3, r3, #2
 800a1d0:	4413      	add	r3, r2
 800a1d2:	009b      	lsls	r3, r3, #2
 800a1d4:	442b      	add	r3, r5
 800a1d6:	330c      	adds	r3, #12
 800a1d8:	681d      	ldr	r5, [r3, #0]
 800a1da:	4e0d      	ldr	r6, [pc, #52]	@ (800a210 <_cbSendTaskList+0x88>)
 800a1dc:	687a      	ldr	r2, [r7, #4]
 800a1de:	4613      	mov	r3, r2
 800a1e0:	009b      	lsls	r3, r3, #2
 800a1e2:	4413      	add	r3, r2
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4433      	add	r3, r6
 800a1e8:	3310      	adds	r3, #16
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	9300      	str	r3, [sp, #0]
 800a1ee:	462b      	mov	r3, r5
 800a1f0:	4622      	mov	r2, r4
 800a1f2:	f000 f8bd 	bl	800a370 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	3301      	adds	r3, #1
 800a1fa:	607b      	str	r3, [r7, #4]
 800a1fc:	4b05      	ldr	r3, [pc, #20]	@ (800a214 <_cbSendTaskList+0x8c>)
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	687a      	ldr	r2, [r7, #4]
 800a202:	429a      	cmp	r2, r3
 800a204:	d3c6      	bcc.n	800a194 <_cbSendTaskList+0xc>
  }
}
 800a206:	bf00      	nop
 800a208:	bf00      	nop
 800a20a:	370c      	adds	r7, #12
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a210:	200131c4 	.word	0x200131c4
 800a214:	20013264 	.word	0x20013264

0800a218 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 800a218:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a21c:	b082      	sub	sp, #8
 800a21e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 800a220:	f7fe fcc8 	bl	8008bb4 <xTaskGetTickCountFromISR>
 800a224:	4603      	mov	r3, r0
 800a226:	2200      	movs	r2, #0
 800a228:	469a      	mov	sl, r3
 800a22a:	4693      	mov	fp, r2
 800a22c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 800a230:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a234:	4602      	mov	r2, r0
 800a236:	460b      	mov	r3, r1
 800a238:	f04f 0a00 	mov.w	sl, #0
 800a23c:	f04f 0b00 	mov.w	fp, #0
 800a240:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 800a244:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 800a248:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800a24c:	4652      	mov	r2, sl
 800a24e:	465b      	mov	r3, fp
 800a250:	1a14      	subs	r4, r2, r0
 800a252:	eb63 0501 	sbc.w	r5, r3, r1
 800a256:	f04f 0200 	mov.w	r2, #0
 800a25a:	f04f 0300 	mov.w	r3, #0
 800a25e:	00ab      	lsls	r3, r5, #2
 800a260:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 800a264:	00a2      	lsls	r2, r4, #2
 800a266:	4614      	mov	r4, r2
 800a268:	461d      	mov	r5, r3
 800a26a:	eb14 0800 	adds.w	r8, r4, r0
 800a26e:	eb45 0901 	adc.w	r9, r5, r1
 800a272:	f04f 0200 	mov.w	r2, #0
 800a276:	f04f 0300 	mov.w	r3, #0
 800a27a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a27e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a282:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a286:	4690      	mov	r8, r2
 800a288:	4699      	mov	r9, r3
 800a28a:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 800a28e:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800a292:	4610      	mov	r0, r2
 800a294:	4619      	mov	r1, r3
 800a296:	3708      	adds	r7, #8
 800a298:	46bd      	mov	sp, r7
 800a29a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

0800a2a0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	b086      	sub	sp, #24
 800a2a4:	af02      	add	r7, sp, #8
 800a2a6:	60f8      	str	r0, [r7, #12]
 800a2a8:	60b9      	str	r1, [r7, #8]
 800a2aa:	607a      	str	r2, [r7, #4]
 800a2ac:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 800a2ae:	2205      	movs	r2, #5
 800a2b0:	492b      	ldr	r1, [pc, #172]	@ (800a360 <SYSVIEW_AddTask+0xc0>)
 800a2b2:	68b8      	ldr	r0, [r7, #8]
 800a2b4:	f002 fa49 	bl	800c74a <memcmp>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d04b      	beq.n	800a356 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 800a2be:	4b29      	ldr	r3, [pc, #164]	@ (800a364 <SYSVIEW_AddTask+0xc4>)
 800a2c0:	681b      	ldr	r3, [r3, #0]
 800a2c2:	2b07      	cmp	r3, #7
 800a2c4:	d903      	bls.n	800a2ce <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 800a2c6:	4828      	ldr	r0, [pc, #160]	@ (800a368 <SYSVIEW_AddTask+0xc8>)
 800a2c8:	f001 fc56 	bl	800bb78 <SEGGER_SYSVIEW_Warn>
    return;
 800a2cc:	e044      	b.n	800a358 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 800a2ce:	4b25      	ldr	r3, [pc, #148]	@ (800a364 <SYSVIEW_AddTask+0xc4>)
 800a2d0:	681a      	ldr	r2, [r3, #0]
 800a2d2:	4926      	ldr	r1, [pc, #152]	@ (800a36c <SYSVIEW_AddTask+0xcc>)
 800a2d4:	4613      	mov	r3, r2
 800a2d6:	009b      	lsls	r3, r3, #2
 800a2d8:	4413      	add	r3, r2
 800a2da:	009b      	lsls	r3, r3, #2
 800a2dc:	440b      	add	r3, r1
 800a2de:	68fa      	ldr	r2, [r7, #12]
 800a2e0:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 800a2e2:	4b20      	ldr	r3, [pc, #128]	@ (800a364 <SYSVIEW_AddTask+0xc4>)
 800a2e4:	681a      	ldr	r2, [r3, #0]
 800a2e6:	4921      	ldr	r1, [pc, #132]	@ (800a36c <SYSVIEW_AddTask+0xcc>)
 800a2e8:	4613      	mov	r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	4413      	add	r3, r2
 800a2ee:	009b      	lsls	r3, r3, #2
 800a2f0:	440b      	add	r3, r1
 800a2f2:	3304      	adds	r3, #4
 800a2f4:	68ba      	ldr	r2, [r7, #8]
 800a2f6:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 800a2f8:	4b1a      	ldr	r3, [pc, #104]	@ (800a364 <SYSVIEW_AddTask+0xc4>)
 800a2fa:	681a      	ldr	r2, [r3, #0]
 800a2fc:	491b      	ldr	r1, [pc, #108]	@ (800a36c <SYSVIEW_AddTask+0xcc>)
 800a2fe:	4613      	mov	r3, r2
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	4413      	add	r3, r2
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	440b      	add	r3, r1
 800a308:	3308      	adds	r3, #8
 800a30a:	687a      	ldr	r2, [r7, #4]
 800a30c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800a30e:	4b15      	ldr	r3, [pc, #84]	@ (800a364 <SYSVIEW_AddTask+0xc4>)
 800a310:	681a      	ldr	r2, [r3, #0]
 800a312:	4916      	ldr	r1, [pc, #88]	@ (800a36c <SYSVIEW_AddTask+0xcc>)
 800a314:	4613      	mov	r3, r2
 800a316:	009b      	lsls	r3, r3, #2
 800a318:	4413      	add	r3, r2
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	440b      	add	r3, r1
 800a31e:	330c      	adds	r3, #12
 800a320:	683a      	ldr	r2, [r7, #0]
 800a322:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 800a324:	4b0f      	ldr	r3, [pc, #60]	@ (800a364 <SYSVIEW_AddTask+0xc4>)
 800a326:	681a      	ldr	r2, [r3, #0]
 800a328:	4910      	ldr	r1, [pc, #64]	@ (800a36c <SYSVIEW_AddTask+0xcc>)
 800a32a:	4613      	mov	r3, r2
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	4413      	add	r3, r2
 800a330:	009b      	lsls	r3, r3, #2
 800a332:	440b      	add	r3, r1
 800a334:	3310      	adds	r3, #16
 800a336:	69ba      	ldr	r2, [r7, #24]
 800a338:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800a33a:	4b0a      	ldr	r3, [pc, #40]	@ (800a364 <SYSVIEW_AddTask+0xc4>)
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	3301      	adds	r3, #1
 800a340:	4a08      	ldr	r2, [pc, #32]	@ (800a364 <SYSVIEW_AddTask+0xc4>)
 800a342:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 800a344:	69bb      	ldr	r3, [r7, #24]
 800a346:	9300      	str	r3, [sp, #0]
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	68b9      	ldr	r1, [r7, #8]
 800a34e:	68f8      	ldr	r0, [r7, #12]
 800a350:	f000 f80e 	bl	800a370 <SYSVIEW_SendTaskInfo>
 800a354:	e000      	b.n	800a358 <SYSVIEW_AddTask+0xb8>
    return;
 800a356:	bf00      	nop

}
 800a358:	3710      	adds	r7, #16
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bd80      	pop	{r7, pc}
 800a35e:	bf00      	nop
 800a360:	0800fa9c 	.word	0x0800fa9c
 800a364:	20013264 	.word	0x20013264
 800a368:	0800faa4 	.word	0x0800faa4
 800a36c:	200131c4 	.word	0x200131c4

0800a370 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 800a370:	b580      	push	{r7, lr}
 800a372:	b08a      	sub	sp, #40	@ 0x28
 800a374:	af00      	add	r7, sp, #0
 800a376:	60f8      	str	r0, [r7, #12]
 800a378:	60b9      	str	r1, [r7, #8]
 800a37a:	607a      	str	r2, [r7, #4]
 800a37c:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 800a37e:	f107 0314 	add.w	r3, r7, #20
 800a382:	2214      	movs	r2, #20
 800a384:	2100      	movs	r1, #0
 800a386:	4618      	mov	r0, r3
 800a388:	f002 f9ef 	bl	800c76a <memset>
  TaskInfo.TaskID     = TaskID;
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 800a390:	68bb      	ldr	r3, [r7, #8]
 800a392:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 800a398:	683b      	ldr	r3, [r7, #0]
 800a39a:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 800a39c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a39e:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 800a3a0:	f107 0314 	add.w	r3, r7, #20
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	f001 f8bd 	bl	800b524 <SEGGER_SYSVIEW_SendTaskInfo>
}
 800a3aa:	bf00      	nop
 800a3ac:	3728      	adds	r7, #40	@ 0x28
 800a3ae:	46bd      	mov	sp, r7
 800a3b0:	bd80      	pop	{r7, pc}
	...

0800a3b4 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 800a3b4:	b580      	push	{r7, lr}
 800a3b6:	b082      	sub	sp, #8
 800a3b8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 800a3ba:	4b26      	ldr	r3, [pc, #152]	@ (800a454 <_DoInit+0xa0>)
 800a3bc:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 800a3be:	22a8      	movs	r2, #168	@ 0xa8
 800a3c0:	2100      	movs	r1, #0
 800a3c2:	6838      	ldr	r0, [r7, #0]
 800a3c4:	f002 f9d1 	bl	800c76a <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 800a3c8:	683b      	ldr	r3, [r7, #0]
 800a3ca:	2203      	movs	r2, #3
 800a3cc:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 800a3ce:	683b      	ldr	r3, [r7, #0]
 800a3d0:	2203      	movs	r2, #3
 800a3d2:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 800a3d4:	683b      	ldr	r3, [r7, #0]
 800a3d6:	4a20      	ldr	r2, [pc, #128]	@ (800a458 <_DoInit+0xa4>)
 800a3d8:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800a3da:	683b      	ldr	r3, [r7, #0]
 800a3dc:	4a1f      	ldr	r2, [pc, #124]	@ (800a45c <_DoInit+0xa8>)
 800a3de:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a3e6:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800a3ee:	683b      	ldr	r3, [r7, #0]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800a3fa:	683b      	ldr	r3, [r7, #0]
 800a3fc:	4a16      	ldr	r2, [pc, #88]	@ (800a458 <_DoInit+0xa4>)
 800a3fe:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	4a17      	ldr	r2, [pc, #92]	@ (800a460 <_DoInit+0xac>)
 800a404:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 800a406:	683b      	ldr	r3, [r7, #0]
 800a408:	2210      	movs	r2, #16
 800a40a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800a40c:	683b      	ldr	r3, [r7, #0]
 800a40e:	2200      	movs	r2, #0
 800a410:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	2200      	movs	r2, #0
 800a416:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 800a418:	683b      	ldr	r3, [r7, #0]
 800a41a:	2200      	movs	r2, #0
 800a41c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800a41e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800a422:	2300      	movs	r3, #0
 800a424:	607b      	str	r3, [r7, #4]
 800a426:	e00c      	b.n	800a442 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	f1c3 030f 	rsb	r3, r3, #15
 800a42e:	4a0d      	ldr	r2, [pc, #52]	@ (800a464 <_DoInit+0xb0>)
 800a430:	5cd1      	ldrb	r1, [r2, r3]
 800a432:	683a      	ldr	r2, [r7, #0]
 800a434:	687b      	ldr	r3, [r7, #4]
 800a436:	4413      	add	r3, r2
 800a438:	460a      	mov	r2, r1
 800a43a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	3301      	adds	r3, #1
 800a440:	607b      	str	r3, [r7, #4]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2b0f      	cmp	r3, #15
 800a446:	d9ef      	bls.n	800a428 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800a448:	f3bf 8f5f 	dmb	sy
}
 800a44c:	bf00      	nop
 800a44e:	3708      	adds	r7, #8
 800a450:	46bd      	mov	sp, r7
 800a452:	bd80      	pop	{r7, pc}
 800a454:	20013268 	.word	0x20013268
 800a458:	0800faf4 	.word	0x0800faf4
 800a45c:	20013310 	.word	0x20013310
 800a460:	20013710 	.word	0x20013710
 800a464:	0800fb38 	.word	0x0800fb38

0800a468 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 800a468:	b580      	push	{r7, lr}
 800a46a:	b08a      	sub	sp, #40	@ 0x28
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 800a474:	2300      	movs	r3, #0
 800a476:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 800a478:	68fb      	ldr	r3, [r7, #12]
 800a47a:	68db      	ldr	r3, [r3, #12]
 800a47c:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	691b      	ldr	r3, [r3, #16]
 800a482:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 800a484:	69ba      	ldr	r2, [r7, #24]
 800a486:	69fb      	ldr	r3, [r7, #28]
 800a488:	429a      	cmp	r2, r3
 800a48a:	d905      	bls.n	800a498 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 800a48c:	69ba      	ldr	r2, [r7, #24]
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	1ad3      	subs	r3, r2, r3
 800a492:	3b01      	subs	r3, #1
 800a494:	627b      	str	r3, [r7, #36]	@ 0x24
 800a496:	e007      	b.n	800a4a8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	689a      	ldr	r2, [r3, #8]
 800a49c:	69b9      	ldr	r1, [r7, #24]
 800a49e:	69fb      	ldr	r3, [r7, #28]
 800a4a0:	1acb      	subs	r3, r1, r3
 800a4a2:	4413      	add	r3, r2
 800a4a4:	3b01      	subs	r3, #1
 800a4a6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	689a      	ldr	r2, [r3, #8]
 800a4ac:	69fb      	ldr	r3, [r7, #28]
 800a4ae:	1ad3      	subs	r3, r2, r3
 800a4b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4b2:	4293      	cmp	r3, r2
 800a4b4:	bf28      	it	cs
 800a4b6:	4613      	movcs	r3, r2
 800a4b8:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 800a4ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	4293      	cmp	r3, r2
 800a4c0:	bf28      	it	cs
 800a4c2:	4613      	movcs	r3, r2
 800a4c4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	685a      	ldr	r2, [r3, #4]
 800a4ca:	69fb      	ldr	r3, [r7, #28]
 800a4cc:	4413      	add	r3, r2
 800a4ce:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 800a4d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a4d2:	68b9      	ldr	r1, [r7, #8]
 800a4d4:	6978      	ldr	r0, [r7, #20]
 800a4d6:	f002 f9b6 	bl	800c846 <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800a4da:	6a3a      	ldr	r2, [r7, #32]
 800a4dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4de:	4413      	add	r3, r2
 800a4e0:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 800a4e2:	68ba      	ldr	r2, [r7, #8]
 800a4e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4e6:	4413      	add	r3, r2
 800a4e8:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800a4ea:	687a      	ldr	r2, [r7, #4]
 800a4ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4ee:	1ad3      	subs	r3, r2, r3
 800a4f0:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 800a4f2:	69fa      	ldr	r2, [r7, #28]
 800a4f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a4f6:	4413      	add	r3, r2
 800a4f8:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	689b      	ldr	r3, [r3, #8]
 800a4fe:	69fa      	ldr	r2, [r7, #28]
 800a500:	429a      	cmp	r2, r3
 800a502:	d101      	bne.n	800a508 <_WriteBlocking+0xa0>
      WrOff = 0u;
 800a504:	2300      	movs	r3, #0
 800a506:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800a508:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	69fa      	ldr	r2, [r7, #28]
 800a510:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 800a512:	687b      	ldr	r3, [r7, #4]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d1b2      	bne.n	800a47e <_WriteBlocking+0x16>
  return NumBytesWritten;
 800a518:	6a3b      	ldr	r3, [r7, #32]
}
 800a51a:	4618      	mov	r0, r3
 800a51c:	3728      	adds	r7, #40	@ 0x28
 800a51e:	46bd      	mov	sp, r7
 800a520:	bd80      	pop	{r7, pc}

0800a522 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 800a522:	b580      	push	{r7, lr}
 800a524:	b088      	sub	sp, #32
 800a526:	af00      	add	r7, sp, #0
 800a528:	60f8      	str	r0, [r7, #12]
 800a52a:	60b9      	str	r1, [r7, #8]
 800a52c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	68db      	ldr	r3, [r3, #12]
 800a532:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	689a      	ldr	r2, [r3, #8]
 800a538:	69fb      	ldr	r3, [r7, #28]
 800a53a:	1ad3      	subs	r3, r2, r3
 800a53c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800a53e:	69ba      	ldr	r2, [r7, #24]
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	429a      	cmp	r2, r3
 800a544:	d911      	bls.n	800a56a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800a546:	68fb      	ldr	r3, [r7, #12]
 800a548:	685a      	ldr	r2, [r3, #4]
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	4413      	add	r3, r2
 800a54e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 800a550:	687a      	ldr	r2, [r7, #4]
 800a552:	68b9      	ldr	r1, [r7, #8]
 800a554:	6938      	ldr	r0, [r7, #16]
 800a556:	f002 f976 	bl	800c846 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800a55a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800a55e:	69fa      	ldr	r2, [r7, #28]
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	441a      	add	r2, r3
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 800a568:	e01f      	b.n	800a5aa <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800a56a:	69bb      	ldr	r3, [r7, #24]
 800a56c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	685a      	ldr	r2, [r3, #4]
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	4413      	add	r3, r2
 800a576:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 800a578:	697a      	ldr	r2, [r7, #20]
 800a57a:	68b9      	ldr	r1, [r7, #8]
 800a57c:	6938      	ldr	r0, [r7, #16]
 800a57e:	f002 f962 	bl	800c846 <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 800a582:	687a      	ldr	r2, [r7, #4]
 800a584:	69bb      	ldr	r3, [r7, #24]
 800a586:	1ad3      	subs	r3, r2, r3
 800a588:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 800a590:	68ba      	ldr	r2, [r7, #8]
 800a592:	69bb      	ldr	r3, [r7, #24]
 800a594:	4413      	add	r3, r2
 800a596:	697a      	ldr	r2, [r7, #20]
 800a598:	4619      	mov	r1, r3
 800a59a:	6938      	ldr	r0, [r7, #16]
 800a59c:	f002 f953 	bl	800c846 <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800a5a0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	697a      	ldr	r2, [r7, #20]
 800a5a8:	60da      	str	r2, [r3, #12]
}
 800a5aa:	bf00      	nop
 800a5ac:	3720      	adds	r7, #32
 800a5ae:	46bd      	mov	sp, r7
 800a5b0:	bd80      	pop	{r7, pc}

0800a5b2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 800a5b2:	b480      	push	{r7}
 800a5b4:	b087      	sub	sp, #28
 800a5b6:	af00      	add	r7, sp, #0
 800a5b8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	68db      	ldr	r3, [r3, #12]
 800a5c4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 800a5c6:	693a      	ldr	r2, [r7, #16]
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	429a      	cmp	r2, r3
 800a5cc:	d808      	bhi.n	800a5e0 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	689a      	ldr	r2, [r3, #8]
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	1ad2      	subs	r2, r2, r3
 800a5d6:	693b      	ldr	r3, [r7, #16]
 800a5d8:	4413      	add	r3, r2
 800a5da:	3b01      	subs	r3, #1
 800a5dc:	617b      	str	r3, [r7, #20]
 800a5de:	e004      	b.n	800a5ea <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 800a5e0:	693a      	ldr	r2, [r7, #16]
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	1ad3      	subs	r3, r2, r3
 800a5e6:	3b01      	subs	r3, #1
 800a5e8:	617b      	str	r3, [r7, #20]
  }
  return r;
 800a5ea:	697b      	ldr	r3, [r7, #20]
}
 800a5ec:	4618      	mov	r0, r3
 800a5ee:	371c      	adds	r7, #28
 800a5f0:	46bd      	mov	sp, r7
 800a5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f6:	4770      	bx	lr

0800a5f8 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 800a5f8:	b580      	push	{r7, lr}
 800a5fa:	b08c      	sub	sp, #48	@ 0x30
 800a5fc:	af00      	add	r7, sp, #0
 800a5fe:	60f8      	str	r0, [r7, #12]
 800a600:	60b9      	str	r1, [r7, #8]
 800a602:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 800a604:	4b3e      	ldr	r3, [pc, #248]	@ (800a700 <SEGGER_RTT_ReadNoLock+0x108>)
 800a606:	623b      	str	r3, [r7, #32]
 800a608:	6a3b      	ldr	r3, [r7, #32]
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	b2db      	uxtb	r3, r3
 800a60e:	2b53      	cmp	r3, #83	@ 0x53
 800a610:	d001      	beq.n	800a616 <SEGGER_RTT_ReadNoLock+0x1e>
 800a612:	f7ff fecf 	bl	800a3b4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800a616:	68fa      	ldr	r2, [r7, #12]
 800a618:	4613      	mov	r3, r2
 800a61a:	005b      	lsls	r3, r3, #1
 800a61c:	4413      	add	r3, r2
 800a61e:	00db      	lsls	r3, r3, #3
 800a620:	3360      	adds	r3, #96	@ 0x60
 800a622:	4a37      	ldr	r2, [pc, #220]	@ (800a700 <SEGGER_RTT_ReadNoLock+0x108>)
 800a624:	4413      	add	r3, r2
 800a626:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 800a628:	68bb      	ldr	r3, [r7, #8]
 800a62a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 800a62c:	69fb      	ldr	r3, [r7, #28]
 800a62e:	691b      	ldr	r3, [r3, #16]
 800a630:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 800a632:	69fb      	ldr	r3, [r7, #28]
 800a634:	68db      	ldr	r3, [r3, #12]
 800a636:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 800a638:	2300      	movs	r3, #0
 800a63a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 800a63c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a63e:	69bb      	ldr	r3, [r7, #24]
 800a640:	429a      	cmp	r2, r3
 800a642:	d92b      	bls.n	800a69c <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 800a644:	69fb      	ldr	r3, [r7, #28]
 800a646:	689a      	ldr	r2, [r3, #8]
 800a648:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a64a:	1ad3      	subs	r3, r2, r3
 800a64c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 800a64e:	697a      	ldr	r2, [r7, #20]
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	4293      	cmp	r3, r2
 800a654:	bf28      	it	cs
 800a656:	4613      	movcs	r3, r2
 800a658:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800a65a:	69fb      	ldr	r3, [r7, #28]
 800a65c:	685a      	ldr	r2, [r3, #4]
 800a65e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a660:	4413      	add	r3, r2
 800a662:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800a664:	697a      	ldr	r2, [r7, #20]
 800a666:	6939      	ldr	r1, [r7, #16]
 800a668:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a66a:	f002 f8ec 	bl	800c846 <memcpy>
    NumBytesRead += NumBytesRem;
 800a66e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	4413      	add	r3, r2
 800a674:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800a676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	4413      	add	r3, r2
 800a67c:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800a67e:	687a      	ldr	r2, [r7, #4]
 800a680:	697b      	ldr	r3, [r7, #20]
 800a682:	1ad3      	subs	r3, r2, r3
 800a684:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800a686:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a688:	697b      	ldr	r3, [r7, #20]
 800a68a:	4413      	add	r3, r2
 800a68c:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 800a68e:	69fb      	ldr	r3, [r7, #28]
 800a690:	689b      	ldr	r3, [r3, #8]
 800a692:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a694:	429a      	cmp	r2, r3
 800a696:	d101      	bne.n	800a69c <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 800a698:	2300      	movs	r3, #0
 800a69a:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 800a69c:	69ba      	ldr	r2, [r7, #24]
 800a69e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a0:	1ad3      	subs	r3, r2, r3
 800a6a2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 800a6a4:	697a      	ldr	r2, [r7, #20]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	4293      	cmp	r3, r2
 800a6aa:	bf28      	it	cs
 800a6ac:	4613      	movcs	r3, r2
 800a6ae:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 800a6b0:	697b      	ldr	r3, [r7, #20]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d019      	beq.n	800a6ea <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 800a6b6:	69fb      	ldr	r3, [r7, #28]
 800a6b8:	685a      	ldr	r2, [r3, #4]
 800a6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6bc:	4413      	add	r3, r2
 800a6be:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 800a6c0:	697a      	ldr	r2, [r7, #20]
 800a6c2:	6939      	ldr	r1, [r7, #16]
 800a6c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800a6c6:	f002 f8be 	bl	800c846 <memcpy>
    NumBytesRead += NumBytesRem;
 800a6ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	4413      	add	r3, r2
 800a6d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 800a6d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6d4:	697b      	ldr	r3, [r7, #20]
 800a6d6:	4413      	add	r3, r2
 800a6d8:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 800a6da:	687a      	ldr	r2, [r7, #4]
 800a6dc:	697b      	ldr	r3, [r7, #20]
 800a6de:	1ad3      	subs	r3, r2, r3
 800a6e0:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 800a6e2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	4413      	add	r3, r2
 800a6e8:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 800a6ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d002      	beq.n	800a6f6 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 800a6f0:	69fb      	ldr	r3, [r7, #28]
 800a6f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6f4:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 800a6f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3730      	adds	r7, #48	@ 0x30
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	20013268 	.word	0x20013268

0800a704 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800a704:	b580      	push	{r7, lr}
 800a706:	b088      	sub	sp, #32
 800a708:	af00      	add	r7, sp, #0
 800a70a:	60f8      	str	r0, [r7, #12]
 800a70c:	60b9      	str	r1, [r7, #8]
 800a70e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 800a710:	68bb      	ldr	r3, [r7, #8]
 800a712:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	1c5a      	adds	r2, r3, #1
 800a718:	4613      	mov	r3, r2
 800a71a:	005b      	lsls	r3, r3, #1
 800a71c:	4413      	add	r3, r2
 800a71e:	00db      	lsls	r3, r3, #3
 800a720:	4a1f      	ldr	r2, [pc, #124]	@ (800a7a0 <SEGGER_RTT_WriteNoLock+0x9c>)
 800a722:	4413      	add	r3, r2
 800a724:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	695b      	ldr	r3, [r3, #20]
 800a72a:	2b02      	cmp	r3, #2
 800a72c:	d029      	beq.n	800a782 <SEGGER_RTT_WriteNoLock+0x7e>
 800a72e:	2b02      	cmp	r3, #2
 800a730:	d82e      	bhi.n	800a790 <SEGGER_RTT_WriteNoLock+0x8c>
 800a732:	2b00      	cmp	r3, #0
 800a734:	d002      	beq.n	800a73c <SEGGER_RTT_WriteNoLock+0x38>
 800a736:	2b01      	cmp	r3, #1
 800a738:	d013      	beq.n	800a762 <SEGGER_RTT_WriteNoLock+0x5e>
 800a73a:	e029      	b.n	800a790 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800a73c:	6978      	ldr	r0, [r7, #20]
 800a73e:	f7ff ff38 	bl	800a5b2 <_GetAvailWriteSpace>
 800a742:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 800a744:	693a      	ldr	r2, [r7, #16]
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	429a      	cmp	r2, r3
 800a74a:	d202      	bcs.n	800a752 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 800a74c:	2300      	movs	r3, #0
 800a74e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 800a750:	e021      	b.n	800a796 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 800a756:	687a      	ldr	r2, [r7, #4]
 800a758:	69b9      	ldr	r1, [r7, #24]
 800a75a:	6978      	ldr	r0, [r7, #20]
 800a75c:	f7ff fee1 	bl	800a522 <_WriteNoCheck>
    break;
 800a760:	e019      	b.n	800a796 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 800a762:	6978      	ldr	r0, [r7, #20]
 800a764:	f7ff ff25 	bl	800a5b2 <_GetAvailWriteSpace>
 800a768:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 800a76a:	687a      	ldr	r2, [r7, #4]
 800a76c:	693b      	ldr	r3, [r7, #16]
 800a76e:	4293      	cmp	r3, r2
 800a770:	bf28      	it	cs
 800a772:	4613      	movcs	r3, r2
 800a774:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 800a776:	69fa      	ldr	r2, [r7, #28]
 800a778:	69b9      	ldr	r1, [r7, #24]
 800a77a:	6978      	ldr	r0, [r7, #20]
 800a77c:	f7ff fed1 	bl	800a522 <_WriteNoCheck>
    break;
 800a780:	e009      	b.n	800a796 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 800a782:	687a      	ldr	r2, [r7, #4]
 800a784:	69b9      	ldr	r1, [r7, #24]
 800a786:	6978      	ldr	r0, [r7, #20]
 800a788:	f7ff fe6e 	bl	800a468 <_WriteBlocking>
 800a78c:	61f8      	str	r0, [r7, #28]
    break;
 800a78e:	e002      	b.n	800a796 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 800a790:	2300      	movs	r3, #0
 800a792:	61fb      	str	r3, [r7, #28]
    break;
 800a794:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 800a796:	69fb      	ldr	r3, [r7, #28]
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3720      	adds	r7, #32
 800a79c:	46bd      	mov	sp, r7
 800a79e:	bd80      	pop	{r7, pc}
 800a7a0:	20013268 	.word	0x20013268

0800a7a4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 800a7a4:	b580      	push	{r7, lr}
 800a7a6:	b088      	sub	sp, #32
 800a7a8:	af00      	add	r7, sp, #0
 800a7aa:	60f8      	str	r0, [r7, #12]
 800a7ac:	60b9      	str	r1, [r7, #8]
 800a7ae:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 800a7b0:	4b0e      	ldr	r3, [pc, #56]	@ (800a7ec <SEGGER_RTT_Write+0x48>)
 800a7b2:	61fb      	str	r3, [r7, #28]
 800a7b4:	69fb      	ldr	r3, [r7, #28]
 800a7b6:	781b      	ldrb	r3, [r3, #0]
 800a7b8:	b2db      	uxtb	r3, r3
 800a7ba:	2b53      	cmp	r3, #83	@ 0x53
 800a7bc:	d001      	beq.n	800a7c2 <SEGGER_RTT_Write+0x1e>
 800a7be:	f7ff fdf9 	bl	800a3b4 <_DoInit>
  SEGGER_RTT_LOCK();
 800a7c2:	f3ef 8311 	mrs	r3, BASEPRI
 800a7c6:	f04f 0120 	mov.w	r1, #32
 800a7ca:	f381 8811 	msr	BASEPRI, r1
 800a7ce:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 800a7d0:	687a      	ldr	r2, [r7, #4]
 800a7d2:	68b9      	ldr	r1, [r7, #8]
 800a7d4:	68f8      	ldr	r0, [r7, #12]
 800a7d6:	f7ff ff95 	bl	800a704 <SEGGER_RTT_WriteNoLock>
 800a7da:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 800a7dc:	69bb      	ldr	r3, [r7, #24]
 800a7de:	f383 8811 	msr	BASEPRI, r3
  return Status;
 800a7e2:	697b      	ldr	r3, [r7, #20]
}
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	3720      	adds	r7, #32
 800a7e8:	46bd      	mov	sp, r7
 800a7ea:	bd80      	pop	{r7, pc}
 800a7ec:	20013268 	.word	0x20013268

0800a7f0 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800a7f0:	b580      	push	{r7, lr}
 800a7f2:	b088      	sub	sp, #32
 800a7f4:	af00      	add	r7, sp, #0
 800a7f6:	60f8      	str	r0, [r7, #12]
 800a7f8:	60b9      	str	r1, [r7, #8]
 800a7fa:	607a      	str	r2, [r7, #4]
 800a7fc:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 800a7fe:	4b3d      	ldr	r3, [pc, #244]	@ (800a8f4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800a800:	61bb      	str	r3, [r7, #24]
 800a802:	69bb      	ldr	r3, [r7, #24]
 800a804:	781b      	ldrb	r3, [r3, #0]
 800a806:	b2db      	uxtb	r3, r3
 800a808:	2b53      	cmp	r3, #83	@ 0x53
 800a80a:	d001      	beq.n	800a810 <SEGGER_RTT_AllocUpBuffer+0x20>
 800a80c:	f7ff fdd2 	bl	800a3b4 <_DoInit>
  SEGGER_RTT_LOCK();
 800a810:	f3ef 8311 	mrs	r3, BASEPRI
 800a814:	f04f 0120 	mov.w	r1, #32
 800a818:	f381 8811 	msr	BASEPRI, r1
 800a81c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800a81e:	4b35      	ldr	r3, [pc, #212]	@ (800a8f4 <SEGGER_RTT_AllocUpBuffer+0x104>)
 800a820:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 800a822:	2300      	movs	r3, #0
 800a824:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 800a826:	6939      	ldr	r1, [r7, #16]
 800a828:	69fb      	ldr	r3, [r7, #28]
 800a82a:	1c5a      	adds	r2, r3, #1
 800a82c:	4613      	mov	r3, r2
 800a82e:	005b      	lsls	r3, r3, #1
 800a830:	4413      	add	r3, r2
 800a832:	00db      	lsls	r3, r3, #3
 800a834:	440b      	add	r3, r1
 800a836:	3304      	adds	r3, #4
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d008      	beq.n	800a850 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 800a83e:	69fb      	ldr	r3, [r7, #28]
 800a840:	3301      	adds	r3, #1
 800a842:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 800a844:	693b      	ldr	r3, [r7, #16]
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	69fa      	ldr	r2, [r7, #28]
 800a84a:	429a      	cmp	r2, r3
 800a84c:	dbeb      	blt.n	800a826 <SEGGER_RTT_AllocUpBuffer+0x36>
 800a84e:	e000      	b.n	800a852 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 800a850:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 800a852:	693b      	ldr	r3, [r7, #16]
 800a854:	691b      	ldr	r3, [r3, #16]
 800a856:	69fa      	ldr	r2, [r7, #28]
 800a858:	429a      	cmp	r2, r3
 800a85a:	da3f      	bge.n	800a8dc <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 800a85c:	6939      	ldr	r1, [r7, #16]
 800a85e:	69fb      	ldr	r3, [r7, #28]
 800a860:	1c5a      	adds	r2, r3, #1
 800a862:	4613      	mov	r3, r2
 800a864:	005b      	lsls	r3, r3, #1
 800a866:	4413      	add	r3, r2
 800a868:	00db      	lsls	r3, r3, #3
 800a86a:	440b      	add	r3, r1
 800a86c:	68fa      	ldr	r2, [r7, #12]
 800a86e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 800a870:	6939      	ldr	r1, [r7, #16]
 800a872:	69fb      	ldr	r3, [r7, #28]
 800a874:	1c5a      	adds	r2, r3, #1
 800a876:	4613      	mov	r3, r2
 800a878:	005b      	lsls	r3, r3, #1
 800a87a:	4413      	add	r3, r2
 800a87c:	00db      	lsls	r3, r3, #3
 800a87e:	440b      	add	r3, r1
 800a880:	3304      	adds	r3, #4
 800a882:	68ba      	ldr	r2, [r7, #8]
 800a884:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 800a886:	6939      	ldr	r1, [r7, #16]
 800a888:	69fa      	ldr	r2, [r7, #28]
 800a88a:	4613      	mov	r3, r2
 800a88c:	005b      	lsls	r3, r3, #1
 800a88e:	4413      	add	r3, r2
 800a890:	00db      	lsls	r3, r3, #3
 800a892:	440b      	add	r3, r1
 800a894:	3320      	adds	r3, #32
 800a896:	687a      	ldr	r2, [r7, #4]
 800a898:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 800a89a:	6939      	ldr	r1, [r7, #16]
 800a89c:	69fa      	ldr	r2, [r7, #28]
 800a89e:	4613      	mov	r3, r2
 800a8a0:	005b      	lsls	r3, r3, #1
 800a8a2:	4413      	add	r3, r2
 800a8a4:	00db      	lsls	r3, r3, #3
 800a8a6:	440b      	add	r3, r1
 800a8a8:	3328      	adds	r3, #40	@ 0x28
 800a8aa:	2200      	movs	r2, #0
 800a8ac:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 800a8ae:	6939      	ldr	r1, [r7, #16]
 800a8b0:	69fa      	ldr	r2, [r7, #28]
 800a8b2:	4613      	mov	r3, r2
 800a8b4:	005b      	lsls	r3, r3, #1
 800a8b6:	4413      	add	r3, r2
 800a8b8:	00db      	lsls	r3, r3, #3
 800a8ba:	440b      	add	r3, r1
 800a8bc:	3324      	adds	r3, #36	@ 0x24
 800a8be:	2200      	movs	r2, #0
 800a8c0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 800a8c2:	6939      	ldr	r1, [r7, #16]
 800a8c4:	69fa      	ldr	r2, [r7, #28]
 800a8c6:	4613      	mov	r3, r2
 800a8c8:	005b      	lsls	r3, r3, #1
 800a8ca:	4413      	add	r3, r2
 800a8cc:	00db      	lsls	r3, r3, #3
 800a8ce:	440b      	add	r3, r1
 800a8d0:	332c      	adds	r3, #44	@ 0x2c
 800a8d2:	683a      	ldr	r2, [r7, #0]
 800a8d4:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800a8d6:	f3bf 8f5f 	dmb	sy
 800a8da:	e002      	b.n	800a8e2 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 800a8dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a8e0:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 800a8e8:	69fb      	ldr	r3, [r7, #28]
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3720      	adds	r7, #32
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	20013268 	.word	0x20013268

0800a8f8 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b08a      	sub	sp, #40	@ 0x28
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	60f8      	str	r0, [r7, #12]
 800a900:	60b9      	str	r1, [r7, #8]
 800a902:	607a      	str	r2, [r7, #4]
 800a904:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 800a906:	4b21      	ldr	r3, [pc, #132]	@ (800a98c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800a908:	623b      	str	r3, [r7, #32]
 800a90a:	6a3b      	ldr	r3, [r7, #32]
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	b2db      	uxtb	r3, r3
 800a910:	2b53      	cmp	r3, #83	@ 0x53
 800a912:	d001      	beq.n	800a918 <SEGGER_RTT_ConfigDownBuffer+0x20>
 800a914:	f7ff fd4e 	bl	800a3b4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 800a918:	4b1c      	ldr	r3, [pc, #112]	@ (800a98c <SEGGER_RTT_ConfigDownBuffer+0x94>)
 800a91a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	2b02      	cmp	r3, #2
 800a920:	d82c      	bhi.n	800a97c <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 800a922:	f3ef 8311 	mrs	r3, BASEPRI
 800a926:	f04f 0120 	mov.w	r1, #32
 800a92a:	f381 8811 	msr	BASEPRI, r1
 800a92e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 800a930:	68fa      	ldr	r2, [r7, #12]
 800a932:	4613      	mov	r3, r2
 800a934:	005b      	lsls	r3, r3, #1
 800a936:	4413      	add	r3, r2
 800a938:	00db      	lsls	r3, r3, #3
 800a93a:	3360      	adds	r3, #96	@ 0x60
 800a93c:	69fa      	ldr	r2, [r7, #28]
 800a93e:	4413      	add	r3, r2
 800a940:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	2b00      	cmp	r3, #0
 800a946:	d00e      	beq.n	800a966 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 800a948:	697b      	ldr	r3, [r7, #20]
 800a94a:	68ba      	ldr	r2, [r7, #8]
 800a94c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 800a94e:	697b      	ldr	r3, [r7, #20]
 800a950:	687a      	ldr	r2, [r7, #4]
 800a952:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 800a954:	697b      	ldr	r3, [r7, #20]
 800a956:	683a      	ldr	r2, [r7, #0]
 800a958:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 800a95a:	697b      	ldr	r3, [r7, #20]
 800a95c:	2200      	movs	r2, #0
 800a95e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 800a960:	697b      	ldr	r3, [r7, #20]
 800a962:	2200      	movs	r2, #0
 800a964:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 800a966:	697b      	ldr	r3, [r7, #20]
 800a968:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a96a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800a96c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 800a970:	69bb      	ldr	r3, [r7, #24]
 800a972:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 800a976:	2300      	movs	r3, #0
 800a978:	627b      	str	r3, [r7, #36]	@ 0x24
 800a97a:	e002      	b.n	800a982 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 800a97c:	f04f 33ff 	mov.w	r3, #4294967295
 800a980:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 800a982:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a984:	4618      	mov	r0, r3
 800a986:	3728      	adds	r7, #40	@ 0x28
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	20013268 	.word	0x20013268

0800a990 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 800a990:	b480      	push	{r7}
 800a992:	b087      	sub	sp, #28
 800a994:	af00      	add	r7, sp, #0
 800a996:	60f8      	str	r0, [r7, #12]
 800a998:	60b9      	str	r1, [r7, #8]
 800a99a:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 800a99c:	68bb      	ldr	r3, [r7, #8]
 800a99e:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	1c5a      	adds	r2, r3, #1
 800a9a4:	60fa      	str	r2, [r7, #12]
 800a9a6:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	2b80      	cmp	r3, #128	@ 0x80
 800a9ac:	d90a      	bls.n	800a9c4 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 800a9ae:	2380      	movs	r3, #128	@ 0x80
 800a9b0:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 800a9b2:	e007      	b.n	800a9c4 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 800a9b4:	68ba      	ldr	r2, [r7, #8]
 800a9b6:	1c53      	adds	r3, r2, #1
 800a9b8:	60bb      	str	r3, [r7, #8]
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	1c59      	adds	r1, r3, #1
 800a9be:	60f9      	str	r1, [r7, #12]
 800a9c0:	7812      	ldrb	r2, [r2, #0]
 800a9c2:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	1e5a      	subs	r2, r3, #1
 800a9c8:	607a      	str	r2, [r7, #4]
 800a9ca:	2b00      	cmp	r3, #0
 800a9cc:	d003      	beq.n	800a9d6 <_EncodeStr+0x46>
 800a9ce:	68bb      	ldr	r3, [r7, #8]
 800a9d0:	781b      	ldrb	r3, [r3, #0]
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d1ee      	bne.n	800a9b4 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 800a9d6:	68ba      	ldr	r2, [r7, #8]
 800a9d8:	697b      	ldr	r3, [r7, #20]
 800a9da:	1ad3      	subs	r3, r2, r3
 800a9dc:	b2da      	uxtb	r2, r3
 800a9de:	693b      	ldr	r3, [r7, #16]
 800a9e0:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 800a9e2:	68fb      	ldr	r3, [r7, #12]
}
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	371c      	adds	r7, #28
 800a9e8:	46bd      	mov	sp, r7
 800a9ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ee:	4770      	bx	lr

0800a9f0 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 800a9f0:	b480      	push	{r7}
 800a9f2:	b083      	sub	sp, #12
 800a9f4:	af00      	add	r7, sp, #0
 800a9f6:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	3307      	adds	r3, #7
}
 800a9fc:	4618      	mov	r0, r3
 800a9fe:	370c      	adds	r7, #12
 800aa00:	46bd      	mov	sp, r7
 800aa02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa06:	4770      	bx	lr

0800aa08 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 800aa08:	b580      	push	{r7, lr}
 800aa0a:	b082      	sub	sp, #8
 800aa0c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800aa0e:	4b34      	ldr	r3, [pc, #208]	@ (800aae0 <_HandleIncomingPacket+0xd8>)
 800aa10:	7e1b      	ldrb	r3, [r3, #24]
 800aa12:	4618      	mov	r0, r3
 800aa14:	1cfb      	adds	r3, r7, #3
 800aa16:	2201      	movs	r2, #1
 800aa18:	4619      	mov	r1, r3
 800aa1a:	f7ff fded 	bl	800a5f8 <SEGGER_RTT_ReadNoLock>
 800aa1e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d057      	beq.n	800aad6 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 800aa26:	78fb      	ldrb	r3, [r7, #3]
 800aa28:	2b80      	cmp	r3, #128	@ 0x80
 800aa2a:	d031      	beq.n	800aa90 <_HandleIncomingPacket+0x88>
 800aa2c:	2b80      	cmp	r3, #128	@ 0x80
 800aa2e:	dc40      	bgt.n	800aab2 <_HandleIncomingPacket+0xaa>
 800aa30:	2b07      	cmp	r3, #7
 800aa32:	dc15      	bgt.n	800aa60 <_HandleIncomingPacket+0x58>
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	dd3c      	ble.n	800aab2 <_HandleIncomingPacket+0xaa>
 800aa38:	3b01      	subs	r3, #1
 800aa3a:	2b06      	cmp	r3, #6
 800aa3c:	d839      	bhi.n	800aab2 <_HandleIncomingPacket+0xaa>
 800aa3e:	a201      	add	r2, pc, #4	@ (adr r2, 800aa44 <_HandleIncomingPacket+0x3c>)
 800aa40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa44:	0800aa67 	.word	0x0800aa67
 800aa48:	0800aa6d 	.word	0x0800aa6d
 800aa4c:	0800aa73 	.word	0x0800aa73
 800aa50:	0800aa79 	.word	0x0800aa79
 800aa54:	0800aa7f 	.word	0x0800aa7f
 800aa58:	0800aa85 	.word	0x0800aa85
 800aa5c:	0800aa8b 	.word	0x0800aa8b
 800aa60:	2b7f      	cmp	r3, #127	@ 0x7f
 800aa62:	d033      	beq.n	800aacc <_HandleIncomingPacket+0xc4>
 800aa64:	e025      	b.n	800aab2 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 800aa66:	f000 fbe3 	bl	800b230 <SEGGER_SYSVIEW_Start>
      break;
 800aa6a:	e034      	b.n	800aad6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 800aa6c:	f000 fc9a 	bl	800b3a4 <SEGGER_SYSVIEW_Stop>
      break;
 800aa70:	e031      	b.n	800aad6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 800aa72:	f000 fe73 	bl	800b75c <SEGGER_SYSVIEW_RecordSystime>
      break;
 800aa76:	e02e      	b.n	800aad6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 800aa78:	f000 fe38 	bl	800b6ec <SEGGER_SYSVIEW_SendTaskList>
      break;
 800aa7c:	e02b      	b.n	800aad6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 800aa7e:	f000 fcb7 	bl	800b3f0 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 800aa82:	e028      	b.n	800aad6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 800aa84:	f001 f826 	bl	800bad4 <SEGGER_SYSVIEW_SendNumModules>
      break;
 800aa88:	e025      	b.n	800aad6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 800aa8a:	f001 f805 	bl	800ba98 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 800aa8e:	e022      	b.n	800aad6 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800aa90:	4b13      	ldr	r3, [pc, #76]	@ (800aae0 <_HandleIncomingPacket+0xd8>)
 800aa92:	7e1b      	ldrb	r3, [r3, #24]
 800aa94:	4618      	mov	r0, r3
 800aa96:	1cfb      	adds	r3, r7, #3
 800aa98:	2201      	movs	r2, #1
 800aa9a:	4619      	mov	r1, r3
 800aa9c:	f7ff fdac 	bl	800a5f8 <SEGGER_RTT_ReadNoLock>
 800aaa0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d013      	beq.n	800aad0 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 800aaa8:	78fb      	ldrb	r3, [r7, #3]
 800aaaa:	4618      	mov	r0, r3
 800aaac:	f000 ff6a 	bl	800b984 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 800aab0:	e00e      	b.n	800aad0 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 800aab2:	78fb      	ldrb	r3, [r7, #3]
 800aab4:	b25b      	sxtb	r3, r3
 800aab6:	2b00      	cmp	r3, #0
 800aab8:	da0c      	bge.n	800aad4 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 800aaba:	4b09      	ldr	r3, [pc, #36]	@ (800aae0 <_HandleIncomingPacket+0xd8>)
 800aabc:	7e1b      	ldrb	r3, [r3, #24]
 800aabe:	4618      	mov	r0, r3
 800aac0:	1cfb      	adds	r3, r7, #3
 800aac2:	2201      	movs	r2, #1
 800aac4:	4619      	mov	r1, r3
 800aac6:	f7ff fd97 	bl	800a5f8 <SEGGER_RTT_ReadNoLock>
      }
      break;
 800aaca:	e003      	b.n	800aad4 <_HandleIncomingPacket+0xcc>
      break;
 800aacc:	bf00      	nop
 800aace:	e002      	b.n	800aad6 <_HandleIncomingPacket+0xce>
      break;
 800aad0:	bf00      	nop
 800aad2:	e000      	b.n	800aad6 <_HandleIncomingPacket+0xce>
      break;
 800aad4:	bf00      	nop
    }
  }
}
 800aad6:	bf00      	nop
 800aad8:	3708      	adds	r7, #8
 800aada:	46bd      	mov	sp, r7
 800aadc:	bd80      	pop	{r7, pc}
 800aade:	bf00      	nop
 800aae0:	20013b28 	.word	0x20013b28

0800aae4 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b08c      	sub	sp, #48	@ 0x30
 800aae8:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 800aaea:	2301      	movs	r3, #1
 800aaec:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 800aaee:	1d3b      	adds	r3, r7, #4
 800aaf0:	3301      	adds	r3, #1
 800aaf2:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 800aaf4:	69fb      	ldr	r3, [r7, #28]
 800aaf6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aaf8:	4b31      	ldr	r3, [pc, #196]	@ (800abc0 <_TrySendOverflowPacket+0xdc>)
 800aafa:	695b      	ldr	r3, [r3, #20]
 800aafc:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aafe:	e00b      	b.n	800ab18 <_TrySendOverflowPacket+0x34>
 800ab00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab02:	b2da      	uxtb	r2, r3
 800ab04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab06:	1c59      	adds	r1, r3, #1
 800ab08:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800ab0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ab0e:	b2d2      	uxtb	r2, r2
 800ab10:	701a      	strb	r2, [r3, #0]
 800ab12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab14:	09db      	lsrs	r3, r3, #7
 800ab16:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ab18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ab1a:	2b7f      	cmp	r3, #127	@ 0x7f
 800ab1c:	d8f0      	bhi.n	800ab00 <_TrySendOverflowPacket+0x1c>
 800ab1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab20:	1c5a      	adds	r2, r3, #1
 800ab22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800ab24:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ab26:	b2d2      	uxtb	r2, r2
 800ab28:	701a      	strb	r2, [r3, #0]
 800ab2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ab2c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800ab2e:	4b25      	ldr	r3, [pc, #148]	@ (800abc4 <_TrySendOverflowPacket+0xe0>)
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800ab34:	4b22      	ldr	r3, [pc, #136]	@ (800abc0 <_TrySendOverflowPacket+0xdc>)
 800ab36:	68db      	ldr	r3, [r3, #12]
 800ab38:	69ba      	ldr	r2, [r7, #24]
 800ab3a:	1ad3      	subs	r3, r2, r3
 800ab3c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 800ab3e:	69fb      	ldr	r3, [r7, #28]
 800ab40:	627b      	str	r3, [r7, #36]	@ 0x24
 800ab42:	697b      	ldr	r3, [r7, #20]
 800ab44:	623b      	str	r3, [r7, #32]
 800ab46:	e00b      	b.n	800ab60 <_TrySendOverflowPacket+0x7c>
 800ab48:	6a3b      	ldr	r3, [r7, #32]
 800ab4a:	b2da      	uxtb	r2, r3
 800ab4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab4e:	1c59      	adds	r1, r3, #1
 800ab50:	6279      	str	r1, [r7, #36]	@ 0x24
 800ab52:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ab56:	b2d2      	uxtb	r2, r2
 800ab58:	701a      	strb	r2, [r3, #0]
 800ab5a:	6a3b      	ldr	r3, [r7, #32]
 800ab5c:	09db      	lsrs	r3, r3, #7
 800ab5e:	623b      	str	r3, [r7, #32]
 800ab60:	6a3b      	ldr	r3, [r7, #32]
 800ab62:	2b7f      	cmp	r3, #127	@ 0x7f
 800ab64:	d8f0      	bhi.n	800ab48 <_TrySendOverflowPacket+0x64>
 800ab66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab68:	1c5a      	adds	r2, r3, #1
 800ab6a:	627a      	str	r2, [r7, #36]	@ 0x24
 800ab6c:	6a3a      	ldr	r2, [r7, #32]
 800ab6e:	b2d2      	uxtb	r2, r2
 800ab70:	701a      	strb	r2, [r3, #0]
 800ab72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ab74:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 800ab76:	4b12      	ldr	r3, [pc, #72]	@ (800abc0 <_TrySendOverflowPacket+0xdc>)
 800ab78:	785b      	ldrb	r3, [r3, #1]
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	1d3b      	adds	r3, r7, #4
 800ab7e:	69fa      	ldr	r2, [r7, #28]
 800ab80:	1ad3      	subs	r3, r2, r3
 800ab82:	461a      	mov	r2, r3
 800ab84:	1d3b      	adds	r3, r7, #4
 800ab86:	4619      	mov	r1, r3
 800ab88:	f7f5 fb22 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800ab8c:	4603      	mov	r3, r0
 800ab8e:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 800ab90:	693b      	ldr	r3, [r7, #16]
 800ab92:	2b00      	cmp	r3, #0
 800ab94:	d009      	beq.n	800abaa <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800ab96:	4a0a      	ldr	r2, [pc, #40]	@ (800abc0 <_TrySendOverflowPacket+0xdc>)
 800ab98:	69bb      	ldr	r3, [r7, #24]
 800ab9a:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 800ab9c:	4b08      	ldr	r3, [pc, #32]	@ (800abc0 <_TrySendOverflowPacket+0xdc>)
 800ab9e:	781b      	ldrb	r3, [r3, #0]
 800aba0:	3b01      	subs	r3, #1
 800aba2:	b2da      	uxtb	r2, r3
 800aba4:	4b06      	ldr	r3, [pc, #24]	@ (800abc0 <_TrySendOverflowPacket+0xdc>)
 800aba6:	701a      	strb	r2, [r3, #0]
 800aba8:	e004      	b.n	800abb4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 800abaa:	4b05      	ldr	r3, [pc, #20]	@ (800abc0 <_TrySendOverflowPacket+0xdc>)
 800abac:	695b      	ldr	r3, [r3, #20]
 800abae:	3301      	adds	r3, #1
 800abb0:	4a03      	ldr	r2, [pc, #12]	@ (800abc0 <_TrySendOverflowPacket+0xdc>)
 800abb2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 800abb4:	693b      	ldr	r3, [r7, #16]
}
 800abb6:	4618      	mov	r0, r3
 800abb8:	3730      	adds	r7, #48	@ 0x30
 800abba:	46bd      	mov	sp, r7
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	bf00      	nop
 800abc0:	20013b28 	.word	0x20013b28
 800abc4:	e0001004 	.word	0xe0001004

0800abc8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 800abc8:	b580      	push	{r7, lr}
 800abca:	b08a      	sub	sp, #40	@ 0x28
 800abcc:	af00      	add	r7, sp, #0
 800abce:	60f8      	str	r0, [r7, #12]
 800abd0:	60b9      	str	r1, [r7, #8]
 800abd2:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800abd4:	4b98      	ldr	r3, [pc, #608]	@ (800ae38 <_SendPacket+0x270>)
 800abd6:	781b      	ldrb	r3, [r3, #0]
 800abd8:	2b01      	cmp	r3, #1
 800abda:	d010      	beq.n	800abfe <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800abdc:	4b96      	ldr	r3, [pc, #600]	@ (800ae38 <_SendPacket+0x270>)
 800abde:	781b      	ldrb	r3, [r3, #0]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	f000 812d 	beq.w	800ae40 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800abe6:	4b94      	ldr	r3, [pc, #592]	@ (800ae38 <_SendPacket+0x270>)
 800abe8:	781b      	ldrb	r3, [r3, #0]
 800abea:	2b02      	cmp	r3, #2
 800abec:	d109      	bne.n	800ac02 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800abee:	f7ff ff79 	bl	800aae4 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800abf2:	4b91      	ldr	r3, [pc, #580]	@ (800ae38 <_SendPacket+0x270>)
 800abf4:	781b      	ldrb	r3, [r3, #0]
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	f040 8124 	bne.w	800ae44 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 800abfc:	e001      	b.n	800ac02 <_SendPacket+0x3a>
    goto Send;
 800abfe:	bf00      	nop
 800ac00:	e000      	b.n	800ac04 <_SendPacket+0x3c>
Send:
 800ac02:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2b1f      	cmp	r3, #31
 800ac08:	d809      	bhi.n	800ac1e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800ac0a:	4b8b      	ldr	r3, [pc, #556]	@ (800ae38 <_SendPacket+0x270>)
 800ac0c:	69da      	ldr	r2, [r3, #28]
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	fa22 f303 	lsr.w	r3, r2, r3
 800ac14:	f003 0301 	and.w	r3, r3, #1
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	f040 8115 	bne.w	800ae48 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	2b17      	cmp	r3, #23
 800ac22:	d807      	bhi.n	800ac34 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800ac24:	68fb      	ldr	r3, [r7, #12]
 800ac26:	3b01      	subs	r3, #1
 800ac28:	60fb      	str	r3, [r7, #12]
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	b2da      	uxtb	r2, r3
 800ac2e:	68fb      	ldr	r3, [r7, #12]
 800ac30:	701a      	strb	r2, [r3, #0]
 800ac32:	e0c4      	b.n	800adbe <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800ac34:	68ba      	ldr	r2, [r7, #8]
 800ac36:	68fb      	ldr	r3, [r7, #12]
 800ac38:	1ad3      	subs	r3, r2, r3
 800ac3a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800ac3c:	69fb      	ldr	r3, [r7, #28]
 800ac3e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ac40:	d912      	bls.n	800ac68 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800ac42:	69fb      	ldr	r3, [r7, #28]
 800ac44:	09da      	lsrs	r2, r3, #7
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	3b01      	subs	r3, #1
 800ac4a:	60fb      	str	r3, [r7, #12]
 800ac4c:	b2d2      	uxtb	r2, r2
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800ac52:	69fb      	ldr	r3, [r7, #28]
 800ac54:	b2db      	uxtb	r3, r3
 800ac56:	68fa      	ldr	r2, [r7, #12]
 800ac58:	3a01      	subs	r2, #1
 800ac5a:	60fa      	str	r2, [r7, #12]
 800ac5c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ac60:	b2da      	uxtb	r2, r3
 800ac62:	68fb      	ldr	r3, [r7, #12]
 800ac64:	701a      	strb	r2, [r3, #0]
 800ac66:	e006      	b.n	800ac76 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	3b01      	subs	r3, #1
 800ac6c:	60fb      	str	r3, [r7, #12]
 800ac6e:	69fb      	ldr	r3, [r7, #28]
 800ac70:	b2da      	uxtb	r2, r3
 800ac72:	68fb      	ldr	r3, [r7, #12]
 800ac74:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	2b7e      	cmp	r3, #126	@ 0x7e
 800ac7a:	d807      	bhi.n	800ac8c <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	3b01      	subs	r3, #1
 800ac80:	60fb      	str	r3, [r7, #12]
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	b2da      	uxtb	r2, r3
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	701a      	strb	r2, [r3, #0]
 800ac8a:	e098      	b.n	800adbe <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800ac92:	d212      	bcs.n	800acba <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	09da      	lsrs	r2, r3, #7
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	3b01      	subs	r3, #1
 800ac9c:	60fb      	str	r3, [r7, #12]
 800ac9e:	b2d2      	uxtb	r2, r2
 800aca0:	68fb      	ldr	r3, [r7, #12]
 800aca2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	b2db      	uxtb	r3, r3
 800aca8:	68fa      	ldr	r2, [r7, #12]
 800acaa:	3a01      	subs	r2, #1
 800acac:	60fa      	str	r2, [r7, #12]
 800acae:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800acb2:	b2da      	uxtb	r2, r3
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	701a      	strb	r2, [r3, #0]
 800acb8:	e081      	b.n	800adbe <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800acc0:	d21d      	bcs.n	800acfe <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	0b9a      	lsrs	r2, r3, #14
 800acc6:	68fb      	ldr	r3, [r7, #12]
 800acc8:	3b01      	subs	r3, #1
 800acca:	60fb      	str	r3, [r7, #12]
 800accc:	b2d2      	uxtb	r2, r2
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	09db      	lsrs	r3, r3, #7
 800acd6:	b2db      	uxtb	r3, r3
 800acd8:	68fa      	ldr	r2, [r7, #12]
 800acda:	3a01      	subs	r2, #1
 800acdc:	60fa      	str	r2, [r7, #12]
 800acde:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ace2:	b2da      	uxtb	r2, r3
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	b2db      	uxtb	r3, r3
 800acec:	68fa      	ldr	r2, [r7, #12]
 800acee:	3a01      	subs	r2, #1
 800acf0:	60fa      	str	r2, [r7, #12]
 800acf2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800acf6:	b2da      	uxtb	r2, r3
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	701a      	strb	r2, [r3, #0]
 800acfc:	e05f      	b.n	800adbe <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad04:	d228      	bcs.n	800ad58 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	0d5a      	lsrs	r2, r3, #21
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	3b01      	subs	r3, #1
 800ad0e:	60fb      	str	r3, [r7, #12]
 800ad10:	b2d2      	uxtb	r2, r2
 800ad12:	68fb      	ldr	r3, [r7, #12]
 800ad14:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	0b9b      	lsrs	r3, r3, #14
 800ad1a:	b2db      	uxtb	r3, r3
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	3a01      	subs	r2, #1
 800ad20:	60fa      	str	r2, [r7, #12]
 800ad22:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ad26:	b2da      	uxtb	r2, r3
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	09db      	lsrs	r3, r3, #7
 800ad30:	b2db      	uxtb	r3, r3
 800ad32:	68fa      	ldr	r2, [r7, #12]
 800ad34:	3a01      	subs	r2, #1
 800ad36:	60fa      	str	r2, [r7, #12]
 800ad38:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ad3c:	b2da      	uxtb	r2, r3
 800ad3e:	68fb      	ldr	r3, [r7, #12]
 800ad40:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800ad42:	687b      	ldr	r3, [r7, #4]
 800ad44:	b2db      	uxtb	r3, r3
 800ad46:	68fa      	ldr	r2, [r7, #12]
 800ad48:	3a01      	subs	r2, #1
 800ad4a:	60fa      	str	r2, [r7, #12]
 800ad4c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ad50:	b2da      	uxtb	r2, r3
 800ad52:	68fb      	ldr	r3, [r7, #12]
 800ad54:	701a      	strb	r2, [r3, #0]
 800ad56:	e032      	b.n	800adbe <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	0f1a      	lsrs	r2, r3, #28
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	3b01      	subs	r3, #1
 800ad60:	60fb      	str	r3, [r7, #12]
 800ad62:	b2d2      	uxtb	r2, r2
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	0d5b      	lsrs	r3, r3, #21
 800ad6c:	b2db      	uxtb	r3, r3
 800ad6e:	68fa      	ldr	r2, [r7, #12]
 800ad70:	3a01      	subs	r2, #1
 800ad72:	60fa      	str	r2, [r7, #12]
 800ad74:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ad78:	b2da      	uxtb	r2, r3
 800ad7a:	68fb      	ldr	r3, [r7, #12]
 800ad7c:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	0b9b      	lsrs	r3, r3, #14
 800ad82:	b2db      	uxtb	r3, r3
 800ad84:	68fa      	ldr	r2, [r7, #12]
 800ad86:	3a01      	subs	r2, #1
 800ad88:	60fa      	str	r2, [r7, #12]
 800ad8a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ad8e:	b2da      	uxtb	r2, r3
 800ad90:	68fb      	ldr	r3, [r7, #12]
 800ad92:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	09db      	lsrs	r3, r3, #7
 800ad98:	b2db      	uxtb	r3, r3
 800ad9a:	68fa      	ldr	r2, [r7, #12]
 800ad9c:	3a01      	subs	r2, #1
 800ad9e:	60fa      	str	r2, [r7, #12]
 800ada0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800ada4:	b2da      	uxtb	r2, r3
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800adaa:	687b      	ldr	r3, [r7, #4]
 800adac:	b2db      	uxtb	r3, r3
 800adae:	68fa      	ldr	r2, [r7, #12]
 800adb0:	3a01      	subs	r2, #1
 800adb2:	60fa      	str	r2, [r7, #12]
 800adb4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800adb8:	b2da      	uxtb	r2, r3
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800adbe:	4b1f      	ldr	r3, [pc, #124]	@ (800ae3c <_SendPacket+0x274>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800adc4:	4b1c      	ldr	r3, [pc, #112]	@ (800ae38 <_SendPacket+0x270>)
 800adc6:	68db      	ldr	r3, [r3, #12]
 800adc8:	69ba      	ldr	r2, [r7, #24]
 800adca:	1ad3      	subs	r3, r2, r3
 800adcc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800adce:	68bb      	ldr	r3, [r7, #8]
 800add0:	627b      	str	r3, [r7, #36]	@ 0x24
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	623b      	str	r3, [r7, #32]
 800add6:	e00b      	b.n	800adf0 <_SendPacket+0x228>
 800add8:	6a3b      	ldr	r3, [r7, #32]
 800adda:	b2da      	uxtb	r2, r3
 800addc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adde:	1c59      	adds	r1, r3, #1
 800ade0:	6279      	str	r1, [r7, #36]	@ 0x24
 800ade2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ade6:	b2d2      	uxtb	r2, r2
 800ade8:	701a      	strb	r2, [r3, #0]
 800adea:	6a3b      	ldr	r3, [r7, #32]
 800adec:	09db      	lsrs	r3, r3, #7
 800adee:	623b      	str	r3, [r7, #32]
 800adf0:	6a3b      	ldr	r3, [r7, #32]
 800adf2:	2b7f      	cmp	r3, #127	@ 0x7f
 800adf4:	d8f0      	bhi.n	800add8 <_SendPacket+0x210>
 800adf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf8:	1c5a      	adds	r2, r3, #1
 800adfa:	627a      	str	r2, [r7, #36]	@ 0x24
 800adfc:	6a3a      	ldr	r2, [r7, #32]
 800adfe:	b2d2      	uxtb	r2, r2
 800ae00:	701a      	strb	r2, [r3, #0]
 800ae02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae04:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800ae06:	4b0c      	ldr	r3, [pc, #48]	@ (800ae38 <_SendPacket+0x270>)
 800ae08:	785b      	ldrb	r3, [r3, #1]
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	68ba      	ldr	r2, [r7, #8]
 800ae0e:	68fb      	ldr	r3, [r7, #12]
 800ae10:	1ad3      	subs	r3, r2, r3
 800ae12:	461a      	mov	r2, r3
 800ae14:	68f9      	ldr	r1, [r7, #12]
 800ae16:	f7f5 f9db 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800ae1a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	2b00      	cmp	r3, #0
 800ae20:	d003      	beq.n	800ae2a <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800ae22:	4a05      	ldr	r2, [pc, #20]	@ (800ae38 <_SendPacket+0x270>)
 800ae24:	69bb      	ldr	r3, [r7, #24]
 800ae26:	60d3      	str	r3, [r2, #12]
 800ae28:	e00f      	b.n	800ae4a <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800ae2a:	4b03      	ldr	r3, [pc, #12]	@ (800ae38 <_SendPacket+0x270>)
 800ae2c:	781b      	ldrb	r3, [r3, #0]
 800ae2e:	3301      	adds	r3, #1
 800ae30:	b2da      	uxtb	r2, r3
 800ae32:	4b01      	ldr	r3, [pc, #4]	@ (800ae38 <_SendPacket+0x270>)
 800ae34:	701a      	strb	r2, [r3, #0]
 800ae36:	e008      	b.n	800ae4a <_SendPacket+0x282>
 800ae38:	20013b28 	.word	0x20013b28
 800ae3c:	e0001004 	.word	0xe0001004
    goto SendDone;
 800ae40:	bf00      	nop
 800ae42:	e002      	b.n	800ae4a <_SendPacket+0x282>
      goto SendDone;
 800ae44:	bf00      	nop
 800ae46:	e000      	b.n	800ae4a <_SendPacket+0x282>
      goto SendDone;
 800ae48:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800ae4a:	4b14      	ldr	r3, [pc, #80]	@ (800ae9c <_SendPacket+0x2d4>)
 800ae4c:	7e1b      	ldrb	r3, [r3, #24]
 800ae4e:	4619      	mov	r1, r3
 800ae50:	4a13      	ldr	r2, [pc, #76]	@ (800aea0 <_SendPacket+0x2d8>)
 800ae52:	460b      	mov	r3, r1
 800ae54:	005b      	lsls	r3, r3, #1
 800ae56:	440b      	add	r3, r1
 800ae58:	00db      	lsls	r3, r3, #3
 800ae5a:	4413      	add	r3, r2
 800ae5c:	336c      	adds	r3, #108	@ 0x6c
 800ae5e:	681a      	ldr	r2, [r3, #0]
 800ae60:	4b0e      	ldr	r3, [pc, #56]	@ (800ae9c <_SendPacket+0x2d4>)
 800ae62:	7e1b      	ldrb	r3, [r3, #24]
 800ae64:	4618      	mov	r0, r3
 800ae66:	490e      	ldr	r1, [pc, #56]	@ (800aea0 <_SendPacket+0x2d8>)
 800ae68:	4603      	mov	r3, r0
 800ae6a:	005b      	lsls	r3, r3, #1
 800ae6c:	4403      	add	r3, r0
 800ae6e:	00db      	lsls	r3, r3, #3
 800ae70:	440b      	add	r3, r1
 800ae72:	3370      	adds	r3, #112	@ 0x70
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	429a      	cmp	r2, r3
 800ae78:	d00b      	beq.n	800ae92 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800ae7a:	4b08      	ldr	r3, [pc, #32]	@ (800ae9c <_SendPacket+0x2d4>)
 800ae7c:	789b      	ldrb	r3, [r3, #2]
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	d107      	bne.n	800ae92 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800ae82:	4b06      	ldr	r3, [pc, #24]	@ (800ae9c <_SendPacket+0x2d4>)
 800ae84:	2201      	movs	r2, #1
 800ae86:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800ae88:	f7ff fdbe 	bl	800aa08 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800ae8c:	4b03      	ldr	r3, [pc, #12]	@ (800ae9c <_SendPacket+0x2d4>)
 800ae8e:	2200      	movs	r2, #0
 800ae90:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800ae92:	bf00      	nop
 800ae94:	3728      	adds	r7, #40	@ 0x28
 800ae96:	46bd      	mov	sp, r7
 800ae98:	bd80      	pop	{r7, pc}
 800ae9a:	bf00      	nop
 800ae9c:	20013b28 	.word	0x20013b28
 800aea0:	20013268 	.word	0x20013268

0800aea4 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b0a2      	sub	sp, #136	@ 0x88
 800aea8:	af00      	add	r7, sp, #0
 800aeaa:	60f8      	str	r0, [r7, #12]
 800aeac:	60b9      	str	r1, [r7, #8]
 800aeae:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  NumArguments = 0;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  for (;;) {
    c = *p++;
 800aeba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aebc:	1c5a      	adds	r2, r3, #1
 800aebe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800aec0:	781b      	ldrb	r3, [r3, #0]
 800aec2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (c == 0) {
 800aec6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d01d      	beq.n	800af0a <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 800aece:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800aed2:	2b25      	cmp	r3, #37	@ 0x25
 800aed4:	d1f1      	bne.n	800aeba <_VPrintHost+0x16>
      c = *p;
 800aed6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800aed8:	781b      	ldrb	r3, [r3, #0]
 800aeda:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	1d19      	adds	r1, r3, #4
 800aee4:	687a      	ldr	r2, [r7, #4]
 800aee6:	6011      	str	r1, [r2, #0]
 800aee8:	6819      	ldr	r1, [r3, #0]
 800aeea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800aeee:	1c5a      	adds	r2, r3, #1
 800aef0:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800aef4:	460a      	mov	r2, r1
 800aef6:	009b      	lsls	r3, r3, #2
 800aef8:	3388      	adds	r3, #136	@ 0x88
 800aefa:	443b      	add	r3, r7
 800aefc:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 800af00:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800af04:	2b10      	cmp	r3, #16
 800af06:	d002      	beq.n	800af0e <_VPrintHost+0x6a>
    c = *p++;
 800af08:	e7d7      	b.n	800aeba <_VPrintHost+0x16>
      break;
 800af0a:	bf00      	nop
 800af0c:	e000      	b.n	800af10 <_VPrintHost+0x6c>
        break;
 800af0e:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 800af10:	f3ef 8311 	mrs	r3, BASEPRI
 800af14:	f04f 0120 	mov.w	r1, #32
 800af18:	f381 8811 	msr	BASEPRI, r1
 800af1c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800af1e:	483f      	ldr	r0, [pc, #252]	@ (800b01c <_VPrintHost+0x178>)
 800af20:	f7ff fd66 	bl	800a9f0 <_PreparePacket>
 800af24:	6578      	str	r0, [r7, #84]	@ 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800af26:	2280      	movs	r2, #128	@ 0x80
 800af28:	68f9      	ldr	r1, [r7, #12]
 800af2a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800af2c:	f7ff fd30 	bl	800a990 <_EncodeStr>
 800af30:	67b8      	str	r0, [r7, #120]	@ 0x78
    ENCODE_U32(pPayload, Options);
 800af32:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af34:	677b      	str	r3, [r7, #116]	@ 0x74
 800af36:	68bb      	ldr	r3, [r7, #8]
 800af38:	673b      	str	r3, [r7, #112]	@ 0x70
 800af3a:	e00b      	b.n	800af54 <_VPrintHost+0xb0>
 800af3c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af3e:	b2da      	uxtb	r2, r3
 800af40:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af42:	1c59      	adds	r1, r3, #1
 800af44:	6779      	str	r1, [r7, #116]	@ 0x74
 800af46:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800af4a:	b2d2      	uxtb	r2, r2
 800af4c:	701a      	strb	r2, [r3, #0]
 800af4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af50:	09db      	lsrs	r3, r3, #7
 800af52:	673b      	str	r3, [r7, #112]	@ 0x70
 800af54:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800af56:	2b7f      	cmp	r3, #127	@ 0x7f
 800af58:	d8f0      	bhi.n	800af3c <_VPrintHost+0x98>
 800af5a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af5c:	1c5a      	adds	r2, r3, #1
 800af5e:	677a      	str	r2, [r7, #116]	@ 0x74
 800af60:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800af62:	b2d2      	uxtb	r2, r2
 800af64:	701a      	strb	r2, [r3, #0]
 800af66:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800af68:	67bb      	str	r3, [r7, #120]	@ 0x78
    ENCODE_U32(pPayload, NumArguments);
 800af6a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800af6c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800af6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800af72:	66bb      	str	r3, [r7, #104]	@ 0x68
 800af74:	e00b      	b.n	800af8e <_VPrintHost+0xea>
 800af76:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800af78:	b2da      	uxtb	r2, r3
 800af7a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af7c:	1c59      	adds	r1, r3, #1
 800af7e:	66f9      	str	r1, [r7, #108]	@ 0x6c
 800af80:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800af84:	b2d2      	uxtb	r2, r2
 800af86:	701a      	strb	r2, [r3, #0]
 800af88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800af8a:	09db      	lsrs	r3, r3, #7
 800af8c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800af8e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800af90:	2b7f      	cmp	r3, #127	@ 0x7f
 800af92:	d8f0      	bhi.n	800af76 <_VPrintHost+0xd2>
 800af94:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800af96:	1c5a      	adds	r2, r3, #1
 800af98:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800af9a:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800af9c:	b2d2      	uxtb	r2, r2
 800af9e:	701a      	strb	r2, [r3, #0]
 800afa0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800afa2:	67bb      	str	r3, [r7, #120]	@ 0x78
    pParas = aParas;
 800afa4:	f107 0314 	add.w	r3, r7, #20
 800afa8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (NumArguments--) {
 800afac:	e022      	b.n	800aff4 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 800afae:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800afb0:	667b      	str	r3, [r7, #100]	@ 0x64
 800afb2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	663b      	str	r3, [r7, #96]	@ 0x60
 800afba:	e00b      	b.n	800afd4 <_VPrintHost+0x130>
 800afbc:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800afbe:	b2da      	uxtb	r2, r3
 800afc0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800afc2:	1c59      	adds	r1, r3, #1
 800afc4:	6679      	str	r1, [r7, #100]	@ 0x64
 800afc6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800afca:	b2d2      	uxtb	r2, r2
 800afcc:	701a      	strb	r2, [r3, #0]
 800afce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800afd0:	09db      	lsrs	r3, r3, #7
 800afd2:	663b      	str	r3, [r7, #96]	@ 0x60
 800afd4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800afd6:	2b7f      	cmp	r3, #127	@ 0x7f
 800afd8:	d8f0      	bhi.n	800afbc <_VPrintHost+0x118>
 800afda:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800afdc:	1c5a      	adds	r2, r3, #1
 800afde:	667a      	str	r2, [r7, #100]	@ 0x64
 800afe0:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800afe2:	b2d2      	uxtb	r2, r2
 800afe4:	701a      	strb	r2, [r3, #0]
 800afe6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800afe8:	67bb      	str	r3, [r7, #120]	@ 0x78
      pParas++;
 800afea:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800afee:	3304      	adds	r3, #4
 800aff0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (NumArguments--) {
 800aff4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800aff8:	1e5a      	subs	r2, r3, #1
 800affa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800affe:	2b00      	cmp	r3, #0
 800b000:	d1d5      	bne.n	800afae <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800b002:	221a      	movs	r2, #26
 800b004:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800b006:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800b008:	f7ff fdde 	bl	800abc8 <_SendPacket>
    RECORD_END();
 800b00c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b00e:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 800b012:	2300      	movs	r3, #0
}
 800b014:	4618      	mov	r0, r3
 800b016:	3788      	adds	r7, #136	@ 0x88
 800b018:	46bd      	mov	sp, r7
 800b01a:	bd80      	pop	{r7, pc}
 800b01c:	20013b58 	.word	0x20013b58

0800b020 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800b020:	b580      	push	{r7, lr}
 800b022:	b086      	sub	sp, #24
 800b024:	af02      	add	r7, sp, #8
 800b026:	60f8      	str	r0, [r7, #12]
 800b028:	60b9      	str	r1, [r7, #8]
 800b02a:	607a      	str	r2, [r7, #4]
 800b02c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800b02e:	2300      	movs	r3, #0
 800b030:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800b034:	4917      	ldr	r1, [pc, #92]	@ (800b094 <SEGGER_SYSVIEW_Init+0x74>)
 800b036:	4818      	ldr	r0, [pc, #96]	@ (800b098 <SEGGER_SYSVIEW_Init+0x78>)
 800b038:	f7ff fbda 	bl	800a7f0 <SEGGER_RTT_AllocUpBuffer>
 800b03c:	4603      	mov	r3, r0
 800b03e:	b2da      	uxtb	r2, r3
 800b040:	4b16      	ldr	r3, [pc, #88]	@ (800b09c <SEGGER_SYSVIEW_Init+0x7c>)
 800b042:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800b044:	4b15      	ldr	r3, [pc, #84]	@ (800b09c <SEGGER_SYSVIEW_Init+0x7c>)
 800b046:	785a      	ldrb	r2, [r3, #1]
 800b048:	4b14      	ldr	r3, [pc, #80]	@ (800b09c <SEGGER_SYSVIEW_Init+0x7c>)
 800b04a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800b04c:	4b13      	ldr	r3, [pc, #76]	@ (800b09c <SEGGER_SYSVIEW_Init+0x7c>)
 800b04e:	7e1b      	ldrb	r3, [r3, #24]
 800b050:	4618      	mov	r0, r3
 800b052:	2300      	movs	r3, #0
 800b054:	9300      	str	r3, [sp, #0]
 800b056:	2308      	movs	r3, #8
 800b058:	4a11      	ldr	r2, [pc, #68]	@ (800b0a0 <SEGGER_SYSVIEW_Init+0x80>)
 800b05a:	490f      	ldr	r1, [pc, #60]	@ (800b098 <SEGGER_SYSVIEW_Init+0x78>)
 800b05c:	f7ff fc4c 	bl	800a8f8 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800b060:	4b0e      	ldr	r3, [pc, #56]	@ (800b09c <SEGGER_SYSVIEW_Init+0x7c>)
 800b062:	2200      	movs	r2, #0
 800b064:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800b066:	4b0f      	ldr	r3, [pc, #60]	@ (800b0a4 <SEGGER_SYSVIEW_Init+0x84>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	4a0c      	ldr	r2, [pc, #48]	@ (800b09c <SEGGER_SYSVIEW_Init+0x7c>)
 800b06c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800b06e:	4a0b      	ldr	r2, [pc, #44]	@ (800b09c <SEGGER_SYSVIEW_Init+0x7c>)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800b074:	4a09      	ldr	r2, [pc, #36]	@ (800b09c <SEGGER_SYSVIEW_Init+0x7c>)
 800b076:	68fb      	ldr	r3, [r7, #12]
 800b078:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800b07a:	4a08      	ldr	r2, [pc, #32]	@ (800b09c <SEGGER_SYSVIEW_Init+0x7c>)
 800b07c:	68bb      	ldr	r3, [r7, #8]
 800b07e:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800b080:	4a06      	ldr	r2, [pc, #24]	@ (800b09c <SEGGER_SYSVIEW_Init+0x7c>)
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800b086:	4b05      	ldr	r3, [pc, #20]	@ (800b09c <SEGGER_SYSVIEW_Init+0x7c>)
 800b088:	2200      	movs	r2, #0
 800b08a:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800b08c:	bf00      	nop
 800b08e:	3710      	adds	r7, #16
 800b090:	46bd      	mov	sp, r7
 800b092:	bd80      	pop	{r7, pc}
 800b094:	20013720 	.word	0x20013720
 800b098:	0800fb08 	.word	0x0800fb08
 800b09c:	20013b28 	.word	0x20013b28
 800b0a0:	20013b20 	.word	0x20013b20
 800b0a4:	e0001004 	.word	0xe0001004

0800b0a8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800b0a8:	b480      	push	{r7}
 800b0aa:	b083      	sub	sp, #12
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800b0b0:	4a04      	ldr	r2, [pc, #16]	@ (800b0c4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6113      	str	r3, [r2, #16]
}
 800b0b6:	bf00      	nop
 800b0b8:	370c      	adds	r7, #12
 800b0ba:	46bd      	mov	sp, r7
 800b0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c0:	4770      	bx	lr
 800b0c2:	bf00      	nop
 800b0c4:	20013b28 	.word	0x20013b28

0800b0c8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800b0c8:	b580      	push	{r7, lr}
 800b0ca:	b084      	sub	sp, #16
 800b0cc:	af00      	add	r7, sp, #0
 800b0ce:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b0d0:	f3ef 8311 	mrs	r3, BASEPRI
 800b0d4:	f04f 0120 	mov.w	r1, #32
 800b0d8:	f381 8811 	msr	BASEPRI, r1
 800b0dc:	60fb      	str	r3, [r7, #12]
 800b0de:	4808      	ldr	r0, [pc, #32]	@ (800b100 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800b0e0:	f7ff fc86 	bl	800a9f0 <_PreparePacket>
 800b0e4:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800b0e6:	687a      	ldr	r2, [r7, #4]
 800b0e8:	68b9      	ldr	r1, [r7, #8]
 800b0ea:	68b8      	ldr	r0, [r7, #8]
 800b0ec:	f7ff fd6c 	bl	800abc8 <_SendPacket>
  RECORD_END();
 800b0f0:	68fb      	ldr	r3, [r7, #12]
 800b0f2:	f383 8811 	msr	BASEPRI, r3
}
 800b0f6:	bf00      	nop
 800b0f8:	3710      	adds	r7, #16
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	bd80      	pop	{r7, pc}
 800b0fe:	bf00      	nop
 800b100:	20013b58 	.word	0x20013b58

0800b104 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800b104:	b580      	push	{r7, lr}
 800b106:	b088      	sub	sp, #32
 800b108:	af00      	add	r7, sp, #0
 800b10a:	6078      	str	r0, [r7, #4]
 800b10c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b10e:	f3ef 8311 	mrs	r3, BASEPRI
 800b112:	f04f 0120 	mov.w	r1, #32
 800b116:	f381 8811 	msr	BASEPRI, r1
 800b11a:	617b      	str	r3, [r7, #20]
 800b11c:	4816      	ldr	r0, [pc, #88]	@ (800b178 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800b11e:	f7ff fc67 	bl	800a9f0 <_PreparePacket>
 800b122:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b124:	693b      	ldr	r3, [r7, #16]
 800b126:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800b128:	68fb      	ldr	r3, [r7, #12]
 800b12a:	61fb      	str	r3, [r7, #28]
 800b12c:	683b      	ldr	r3, [r7, #0]
 800b12e:	61bb      	str	r3, [r7, #24]
 800b130:	e00b      	b.n	800b14a <SEGGER_SYSVIEW_RecordU32+0x46>
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	b2da      	uxtb	r2, r3
 800b136:	69fb      	ldr	r3, [r7, #28]
 800b138:	1c59      	adds	r1, r3, #1
 800b13a:	61f9      	str	r1, [r7, #28]
 800b13c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b140:	b2d2      	uxtb	r2, r2
 800b142:	701a      	strb	r2, [r3, #0]
 800b144:	69bb      	ldr	r3, [r7, #24]
 800b146:	09db      	lsrs	r3, r3, #7
 800b148:	61bb      	str	r3, [r7, #24]
 800b14a:	69bb      	ldr	r3, [r7, #24]
 800b14c:	2b7f      	cmp	r3, #127	@ 0x7f
 800b14e:	d8f0      	bhi.n	800b132 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800b150:	69fb      	ldr	r3, [r7, #28]
 800b152:	1c5a      	adds	r2, r3, #1
 800b154:	61fa      	str	r2, [r7, #28]
 800b156:	69ba      	ldr	r2, [r7, #24]
 800b158:	b2d2      	uxtb	r2, r2
 800b15a:	701a      	strb	r2, [r3, #0]
 800b15c:	69fb      	ldr	r3, [r7, #28]
 800b15e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b160:	687a      	ldr	r2, [r7, #4]
 800b162:	68f9      	ldr	r1, [r7, #12]
 800b164:	6938      	ldr	r0, [r7, #16]
 800b166:	f7ff fd2f 	bl	800abc8 <_SendPacket>
  RECORD_END();
 800b16a:	697b      	ldr	r3, [r7, #20]
 800b16c:	f383 8811 	msr	BASEPRI, r3
}
 800b170:	bf00      	nop
 800b172:	3720      	adds	r7, #32
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}
 800b178:	20013b58 	.word	0x20013b58

0800b17c <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b08c      	sub	sp, #48	@ 0x30
 800b180:	af00      	add	r7, sp, #0
 800b182:	60f8      	str	r0, [r7, #12]
 800b184:	60b9      	str	r1, [r7, #8]
 800b186:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800b188:	f3ef 8311 	mrs	r3, BASEPRI
 800b18c:	f04f 0120 	mov.w	r1, #32
 800b190:	f381 8811 	msr	BASEPRI, r1
 800b194:	61fb      	str	r3, [r7, #28]
 800b196:	4825      	ldr	r0, [pc, #148]	@ (800b22c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800b198:	f7ff fc2a 	bl	800a9f0 <_PreparePacket>
 800b19c:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800b1a2:	697b      	ldr	r3, [r7, #20]
 800b1a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b1a6:	68bb      	ldr	r3, [r7, #8]
 800b1a8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b1aa:	e00b      	b.n	800b1c4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800b1ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1ae:	b2da      	uxtb	r2, r3
 800b1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1b2:	1c59      	adds	r1, r3, #1
 800b1b4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b1b6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b1ba:	b2d2      	uxtb	r2, r2
 800b1bc:	701a      	strb	r2, [r3, #0]
 800b1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c0:	09db      	lsrs	r3, r3, #7
 800b1c2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b1c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1c6:	2b7f      	cmp	r3, #127	@ 0x7f
 800b1c8:	d8f0      	bhi.n	800b1ac <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800b1ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1cc:	1c5a      	adds	r2, r3, #1
 800b1ce:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b1d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b1d2:	b2d2      	uxtb	r2, r2
 800b1d4:	701a      	strb	r2, [r3, #0]
 800b1d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b1d8:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1de:	687b      	ldr	r3, [r7, #4]
 800b1e0:	623b      	str	r3, [r7, #32]
 800b1e2:	e00b      	b.n	800b1fc <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800b1e4:	6a3b      	ldr	r3, [r7, #32]
 800b1e6:	b2da      	uxtb	r2, r3
 800b1e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ea:	1c59      	adds	r1, r3, #1
 800b1ec:	6279      	str	r1, [r7, #36]	@ 0x24
 800b1ee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b1f2:	b2d2      	uxtb	r2, r2
 800b1f4:	701a      	strb	r2, [r3, #0]
 800b1f6:	6a3b      	ldr	r3, [r7, #32]
 800b1f8:	09db      	lsrs	r3, r3, #7
 800b1fa:	623b      	str	r3, [r7, #32]
 800b1fc:	6a3b      	ldr	r3, [r7, #32]
 800b1fe:	2b7f      	cmp	r3, #127	@ 0x7f
 800b200:	d8f0      	bhi.n	800b1e4 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800b202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b204:	1c5a      	adds	r2, r3, #1
 800b206:	627a      	str	r2, [r7, #36]	@ 0x24
 800b208:	6a3a      	ldr	r2, [r7, #32]
 800b20a:	b2d2      	uxtb	r2, r2
 800b20c:	701a      	strb	r2, [r3, #0]
 800b20e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b210:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800b212:	68fa      	ldr	r2, [r7, #12]
 800b214:	6979      	ldr	r1, [r7, #20]
 800b216:	69b8      	ldr	r0, [r7, #24]
 800b218:	f7ff fcd6 	bl	800abc8 <_SendPacket>
  RECORD_END();
 800b21c:	69fb      	ldr	r3, [r7, #28]
 800b21e:	f383 8811 	msr	BASEPRI, r3
}
 800b222:	bf00      	nop
 800b224:	3730      	adds	r7, #48	@ 0x30
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	20013b58 	.word	0x20013b58

0800b230 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800b230:	b580      	push	{r7, lr}
 800b232:	b08c      	sub	sp, #48	@ 0x30
 800b234:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800b236:	4b58      	ldr	r3, [pc, #352]	@ (800b398 <SEGGER_SYSVIEW_Start+0x168>)
 800b238:	2201      	movs	r2, #1
 800b23a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800b23c:	f3ef 8311 	mrs	r3, BASEPRI
 800b240:	f04f 0120 	mov.w	r1, #32
 800b244:	f381 8811 	msr	BASEPRI, r1
 800b248:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800b24a:	4b53      	ldr	r3, [pc, #332]	@ (800b398 <SEGGER_SYSVIEW_Start+0x168>)
 800b24c:	785b      	ldrb	r3, [r3, #1]
 800b24e:	220a      	movs	r2, #10
 800b250:	4952      	ldr	r1, [pc, #328]	@ (800b39c <SEGGER_SYSVIEW_Start+0x16c>)
 800b252:	4618      	mov	r0, r3
 800b254:	f7f4 ffbc 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800b25e:	200a      	movs	r0, #10
 800b260:	f7ff ff32 	bl	800b0c8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800b264:	f3ef 8311 	mrs	r3, BASEPRI
 800b268:	f04f 0120 	mov.w	r1, #32
 800b26c:	f381 8811 	msr	BASEPRI, r1
 800b270:	60bb      	str	r3, [r7, #8]
 800b272:	484b      	ldr	r0, [pc, #300]	@ (800b3a0 <SEGGER_SYSVIEW_Start+0x170>)
 800b274:	f7ff fbbc 	bl	800a9f0 <_PreparePacket>
 800b278:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800b27e:	683b      	ldr	r3, [r7, #0]
 800b280:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b282:	4b45      	ldr	r3, [pc, #276]	@ (800b398 <SEGGER_SYSVIEW_Start+0x168>)
 800b284:	685b      	ldr	r3, [r3, #4]
 800b286:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b288:	e00b      	b.n	800b2a2 <SEGGER_SYSVIEW_Start+0x72>
 800b28a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b28c:	b2da      	uxtb	r2, r3
 800b28e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b290:	1c59      	adds	r1, r3, #1
 800b292:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b294:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b298:	b2d2      	uxtb	r2, r2
 800b29a:	701a      	strb	r2, [r3, #0]
 800b29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b29e:	09db      	lsrs	r3, r3, #7
 800b2a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b2a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b2a4:	2b7f      	cmp	r3, #127	@ 0x7f
 800b2a6:	d8f0      	bhi.n	800b28a <SEGGER_SYSVIEW_Start+0x5a>
 800b2a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2aa:	1c5a      	adds	r2, r3, #1
 800b2ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b2ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b2b0:	b2d2      	uxtb	r2, r2
 800b2b2:	701a      	strb	r2, [r3, #0]
 800b2b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b2b6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800b2b8:	683b      	ldr	r3, [r7, #0]
 800b2ba:	627b      	str	r3, [r7, #36]	@ 0x24
 800b2bc:	4b36      	ldr	r3, [pc, #216]	@ (800b398 <SEGGER_SYSVIEW_Start+0x168>)
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	623b      	str	r3, [r7, #32]
 800b2c2:	e00b      	b.n	800b2dc <SEGGER_SYSVIEW_Start+0xac>
 800b2c4:	6a3b      	ldr	r3, [r7, #32]
 800b2c6:	b2da      	uxtb	r2, r3
 800b2c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2ca:	1c59      	adds	r1, r3, #1
 800b2cc:	6279      	str	r1, [r7, #36]	@ 0x24
 800b2ce:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b2d2:	b2d2      	uxtb	r2, r2
 800b2d4:	701a      	strb	r2, [r3, #0]
 800b2d6:	6a3b      	ldr	r3, [r7, #32]
 800b2d8:	09db      	lsrs	r3, r3, #7
 800b2da:	623b      	str	r3, [r7, #32]
 800b2dc:	6a3b      	ldr	r3, [r7, #32]
 800b2de:	2b7f      	cmp	r3, #127	@ 0x7f
 800b2e0:	d8f0      	bhi.n	800b2c4 <SEGGER_SYSVIEW_Start+0x94>
 800b2e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2e4:	1c5a      	adds	r2, r3, #1
 800b2e6:	627a      	str	r2, [r7, #36]	@ 0x24
 800b2e8:	6a3a      	ldr	r2, [r7, #32]
 800b2ea:	b2d2      	uxtb	r2, r2
 800b2ec:	701a      	strb	r2, [r3, #0]
 800b2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b2f0:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800b2f2:	683b      	ldr	r3, [r7, #0]
 800b2f4:	61fb      	str	r3, [r7, #28]
 800b2f6:	4b28      	ldr	r3, [pc, #160]	@ (800b398 <SEGGER_SYSVIEW_Start+0x168>)
 800b2f8:	691b      	ldr	r3, [r3, #16]
 800b2fa:	61bb      	str	r3, [r7, #24]
 800b2fc:	e00b      	b.n	800b316 <SEGGER_SYSVIEW_Start+0xe6>
 800b2fe:	69bb      	ldr	r3, [r7, #24]
 800b300:	b2da      	uxtb	r2, r3
 800b302:	69fb      	ldr	r3, [r7, #28]
 800b304:	1c59      	adds	r1, r3, #1
 800b306:	61f9      	str	r1, [r7, #28]
 800b308:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b30c:	b2d2      	uxtb	r2, r2
 800b30e:	701a      	strb	r2, [r3, #0]
 800b310:	69bb      	ldr	r3, [r7, #24]
 800b312:	09db      	lsrs	r3, r3, #7
 800b314:	61bb      	str	r3, [r7, #24]
 800b316:	69bb      	ldr	r3, [r7, #24]
 800b318:	2b7f      	cmp	r3, #127	@ 0x7f
 800b31a:	d8f0      	bhi.n	800b2fe <SEGGER_SYSVIEW_Start+0xce>
 800b31c:	69fb      	ldr	r3, [r7, #28]
 800b31e:	1c5a      	adds	r2, r3, #1
 800b320:	61fa      	str	r2, [r7, #28]
 800b322:	69ba      	ldr	r2, [r7, #24]
 800b324:	b2d2      	uxtb	r2, r2
 800b326:	701a      	strb	r2, [r3, #0]
 800b328:	69fb      	ldr	r3, [r7, #28]
 800b32a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800b32c:	683b      	ldr	r3, [r7, #0]
 800b32e:	617b      	str	r3, [r7, #20]
 800b330:	2300      	movs	r3, #0
 800b332:	613b      	str	r3, [r7, #16]
 800b334:	e00b      	b.n	800b34e <SEGGER_SYSVIEW_Start+0x11e>
 800b336:	693b      	ldr	r3, [r7, #16]
 800b338:	b2da      	uxtb	r2, r3
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	1c59      	adds	r1, r3, #1
 800b33e:	6179      	str	r1, [r7, #20]
 800b340:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b344:	b2d2      	uxtb	r2, r2
 800b346:	701a      	strb	r2, [r3, #0]
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	09db      	lsrs	r3, r3, #7
 800b34c:	613b      	str	r3, [r7, #16]
 800b34e:	693b      	ldr	r3, [r7, #16]
 800b350:	2b7f      	cmp	r3, #127	@ 0x7f
 800b352:	d8f0      	bhi.n	800b336 <SEGGER_SYSVIEW_Start+0x106>
 800b354:	697b      	ldr	r3, [r7, #20]
 800b356:	1c5a      	adds	r2, r3, #1
 800b358:	617a      	str	r2, [r7, #20]
 800b35a:	693a      	ldr	r2, [r7, #16]
 800b35c:	b2d2      	uxtb	r2, r2
 800b35e:	701a      	strb	r2, [r3, #0]
 800b360:	697b      	ldr	r3, [r7, #20]
 800b362:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800b364:	2218      	movs	r2, #24
 800b366:	6839      	ldr	r1, [r7, #0]
 800b368:	6878      	ldr	r0, [r7, #4]
 800b36a:	f7ff fc2d 	bl	800abc8 <_SendPacket>
      RECORD_END();
 800b36e:	68bb      	ldr	r3, [r7, #8]
 800b370:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800b374:	4b08      	ldr	r3, [pc, #32]	@ (800b398 <SEGGER_SYSVIEW_Start+0x168>)
 800b376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d002      	beq.n	800b382 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800b37c:	4b06      	ldr	r3, [pc, #24]	@ (800b398 <SEGGER_SYSVIEW_Start+0x168>)
 800b37e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b380:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800b382:	f000 f9eb 	bl	800b75c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800b386:	f000 f9b1 	bl	800b6ec <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800b38a:	f000 fba3 	bl	800bad4 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800b38e:	bf00      	nop
 800b390:	3730      	adds	r7, #48	@ 0x30
 800b392:	46bd      	mov	sp, r7
 800b394:	bd80      	pop	{r7, pc}
 800b396:	bf00      	nop
 800b398:	20013b28 	.word	0x20013b28
 800b39c:	0800fb4c 	.word	0x0800fb4c
 800b3a0:	20013b58 	.word	0x20013b58

0800b3a4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800b3a4:	b580      	push	{r7, lr}
 800b3a6:	b082      	sub	sp, #8
 800b3a8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b3aa:	f3ef 8311 	mrs	r3, BASEPRI
 800b3ae:	f04f 0120 	mov.w	r1, #32
 800b3b2:	f381 8811 	msr	BASEPRI, r1
 800b3b6:	607b      	str	r3, [r7, #4]
 800b3b8:	480b      	ldr	r0, [pc, #44]	@ (800b3e8 <SEGGER_SYSVIEW_Stop+0x44>)
 800b3ba:	f7ff fb19 	bl	800a9f0 <_PreparePacket>
 800b3be:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800b3c0:	4b0a      	ldr	r3, [pc, #40]	@ (800b3ec <SEGGER_SYSVIEW_Stop+0x48>)
 800b3c2:	781b      	ldrb	r3, [r3, #0]
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d007      	beq.n	800b3d8 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800b3c8:	220b      	movs	r2, #11
 800b3ca:	6839      	ldr	r1, [r7, #0]
 800b3cc:	6838      	ldr	r0, [r7, #0]
 800b3ce:	f7ff fbfb 	bl	800abc8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800b3d2:	4b06      	ldr	r3, [pc, #24]	@ (800b3ec <SEGGER_SYSVIEW_Stop+0x48>)
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f383 8811 	msr	BASEPRI, r3
}
 800b3de:	bf00      	nop
 800b3e0:	3708      	adds	r7, #8
 800b3e2:	46bd      	mov	sp, r7
 800b3e4:	bd80      	pop	{r7, pc}
 800b3e6:	bf00      	nop
 800b3e8:	20013b58 	.word	0x20013b58
 800b3ec:	20013b28 	.word	0x20013b28

0800b3f0 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800b3f0:	b580      	push	{r7, lr}
 800b3f2:	b08c      	sub	sp, #48	@ 0x30
 800b3f4:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800b3f6:	f3ef 8311 	mrs	r3, BASEPRI
 800b3fa:	f04f 0120 	mov.w	r1, #32
 800b3fe:	f381 8811 	msr	BASEPRI, r1
 800b402:	60fb      	str	r3, [r7, #12]
 800b404:	4845      	ldr	r0, [pc, #276]	@ (800b51c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800b406:	f7ff faf3 	bl	800a9f0 <_PreparePacket>
 800b40a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800b40c:	68bb      	ldr	r3, [r7, #8]
 800b40e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b414:	4b42      	ldr	r3, [pc, #264]	@ (800b520 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b416:	685b      	ldr	r3, [r3, #4]
 800b418:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b41a:	e00b      	b.n	800b434 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800b41c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b41e:	b2da      	uxtb	r2, r3
 800b420:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b422:	1c59      	adds	r1, r3, #1
 800b424:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b426:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b42a:	b2d2      	uxtb	r2, r2
 800b42c:	701a      	strb	r2, [r3, #0]
 800b42e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b430:	09db      	lsrs	r3, r3, #7
 800b432:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b434:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b436:	2b7f      	cmp	r3, #127	@ 0x7f
 800b438:	d8f0      	bhi.n	800b41c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800b43a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b43c:	1c5a      	adds	r2, r3, #1
 800b43e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b440:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b442:	b2d2      	uxtb	r2, r2
 800b444:	701a      	strb	r2, [r3, #0]
 800b446:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b448:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	627b      	str	r3, [r7, #36]	@ 0x24
 800b44e:	4b34      	ldr	r3, [pc, #208]	@ (800b520 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b450:	689b      	ldr	r3, [r3, #8]
 800b452:	623b      	str	r3, [r7, #32]
 800b454:	e00b      	b.n	800b46e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800b456:	6a3b      	ldr	r3, [r7, #32]
 800b458:	b2da      	uxtb	r2, r3
 800b45a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b45c:	1c59      	adds	r1, r3, #1
 800b45e:	6279      	str	r1, [r7, #36]	@ 0x24
 800b460:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b464:	b2d2      	uxtb	r2, r2
 800b466:	701a      	strb	r2, [r3, #0]
 800b468:	6a3b      	ldr	r3, [r7, #32]
 800b46a:	09db      	lsrs	r3, r3, #7
 800b46c:	623b      	str	r3, [r7, #32]
 800b46e:	6a3b      	ldr	r3, [r7, #32]
 800b470:	2b7f      	cmp	r3, #127	@ 0x7f
 800b472:	d8f0      	bhi.n	800b456 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800b474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b476:	1c5a      	adds	r2, r3, #1
 800b478:	627a      	str	r2, [r7, #36]	@ 0x24
 800b47a:	6a3a      	ldr	r2, [r7, #32]
 800b47c:	b2d2      	uxtb	r2, r2
 800b47e:	701a      	strb	r2, [r3, #0]
 800b480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b482:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	61fb      	str	r3, [r7, #28]
 800b488:	4b25      	ldr	r3, [pc, #148]	@ (800b520 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b48a:	691b      	ldr	r3, [r3, #16]
 800b48c:	61bb      	str	r3, [r7, #24]
 800b48e:	e00b      	b.n	800b4a8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800b490:	69bb      	ldr	r3, [r7, #24]
 800b492:	b2da      	uxtb	r2, r3
 800b494:	69fb      	ldr	r3, [r7, #28]
 800b496:	1c59      	adds	r1, r3, #1
 800b498:	61f9      	str	r1, [r7, #28]
 800b49a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b49e:	b2d2      	uxtb	r2, r2
 800b4a0:	701a      	strb	r2, [r3, #0]
 800b4a2:	69bb      	ldr	r3, [r7, #24]
 800b4a4:	09db      	lsrs	r3, r3, #7
 800b4a6:	61bb      	str	r3, [r7, #24]
 800b4a8:	69bb      	ldr	r3, [r7, #24]
 800b4aa:	2b7f      	cmp	r3, #127	@ 0x7f
 800b4ac:	d8f0      	bhi.n	800b490 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800b4ae:	69fb      	ldr	r3, [r7, #28]
 800b4b0:	1c5a      	adds	r2, r3, #1
 800b4b2:	61fa      	str	r2, [r7, #28]
 800b4b4:	69ba      	ldr	r2, [r7, #24]
 800b4b6:	b2d2      	uxtb	r2, r2
 800b4b8:	701a      	strb	r2, [r3, #0]
 800b4ba:	69fb      	ldr	r3, [r7, #28]
 800b4bc:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800b4be:	687b      	ldr	r3, [r7, #4]
 800b4c0:	617b      	str	r3, [r7, #20]
 800b4c2:	2300      	movs	r3, #0
 800b4c4:	613b      	str	r3, [r7, #16]
 800b4c6:	e00b      	b.n	800b4e0 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800b4c8:	693b      	ldr	r3, [r7, #16]
 800b4ca:	b2da      	uxtb	r2, r3
 800b4cc:	697b      	ldr	r3, [r7, #20]
 800b4ce:	1c59      	adds	r1, r3, #1
 800b4d0:	6179      	str	r1, [r7, #20]
 800b4d2:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b4d6:	b2d2      	uxtb	r2, r2
 800b4d8:	701a      	strb	r2, [r3, #0]
 800b4da:	693b      	ldr	r3, [r7, #16]
 800b4dc:	09db      	lsrs	r3, r3, #7
 800b4de:	613b      	str	r3, [r7, #16]
 800b4e0:	693b      	ldr	r3, [r7, #16]
 800b4e2:	2b7f      	cmp	r3, #127	@ 0x7f
 800b4e4:	d8f0      	bhi.n	800b4c8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800b4e6:	697b      	ldr	r3, [r7, #20]
 800b4e8:	1c5a      	adds	r2, r3, #1
 800b4ea:	617a      	str	r2, [r7, #20]
 800b4ec:	693a      	ldr	r2, [r7, #16]
 800b4ee:	b2d2      	uxtb	r2, r2
 800b4f0:	701a      	strb	r2, [r3, #0]
 800b4f2:	697b      	ldr	r3, [r7, #20]
 800b4f4:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800b4f6:	2218      	movs	r2, #24
 800b4f8:	6879      	ldr	r1, [r7, #4]
 800b4fa:	68b8      	ldr	r0, [r7, #8]
 800b4fc:	f7ff fb64 	bl	800abc8 <_SendPacket>
  RECORD_END();
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800b506:	4b06      	ldr	r3, [pc, #24]	@ (800b520 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b50a:	2b00      	cmp	r3, #0
 800b50c:	d002      	beq.n	800b514 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800b50e:	4b04      	ldr	r3, [pc, #16]	@ (800b520 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800b510:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b512:	4798      	blx	r3
  }
}
 800b514:	bf00      	nop
 800b516:	3730      	adds	r7, #48	@ 0x30
 800b518:	46bd      	mov	sp, r7
 800b51a:	bd80      	pop	{r7, pc}
 800b51c:	20013b58 	.word	0x20013b58
 800b520:	20013b28 	.word	0x20013b28

0800b524 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800b524:	b580      	push	{r7, lr}
 800b526:	b092      	sub	sp, #72	@ 0x48
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800b52c:	f3ef 8311 	mrs	r3, BASEPRI
 800b530:	f04f 0120 	mov.w	r1, #32
 800b534:	f381 8811 	msr	BASEPRI, r1
 800b538:	617b      	str	r3, [r7, #20]
 800b53a:	486a      	ldr	r0, [pc, #424]	@ (800b6e4 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800b53c:	f7ff fa58 	bl	800a9f0 <_PreparePacket>
 800b540:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b542:	693b      	ldr	r3, [r7, #16]
 800b544:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	647b      	str	r3, [r7, #68]	@ 0x44
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	681a      	ldr	r2, [r3, #0]
 800b54e:	4b66      	ldr	r3, [pc, #408]	@ (800b6e8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800b550:	691b      	ldr	r3, [r3, #16]
 800b552:	1ad3      	subs	r3, r2, r3
 800b554:	643b      	str	r3, [r7, #64]	@ 0x40
 800b556:	e00b      	b.n	800b570 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800b558:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b55a:	b2da      	uxtb	r2, r3
 800b55c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b55e:	1c59      	adds	r1, r3, #1
 800b560:	6479      	str	r1, [r7, #68]	@ 0x44
 800b562:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b566:	b2d2      	uxtb	r2, r2
 800b568:	701a      	strb	r2, [r3, #0]
 800b56a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b56c:	09db      	lsrs	r3, r3, #7
 800b56e:	643b      	str	r3, [r7, #64]	@ 0x40
 800b570:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b572:	2b7f      	cmp	r3, #127	@ 0x7f
 800b574:	d8f0      	bhi.n	800b558 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800b576:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b578:	1c5a      	adds	r2, r3, #1
 800b57a:	647a      	str	r2, [r7, #68]	@ 0x44
 800b57c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800b57e:	b2d2      	uxtb	r2, r2
 800b580:	701a      	strb	r2, [r3, #0]
 800b582:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b584:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b590:	e00b      	b.n	800b5aa <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800b592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b594:	b2da      	uxtb	r2, r3
 800b596:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b598:	1c59      	adds	r1, r3, #1
 800b59a:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800b59c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b5a0:	b2d2      	uxtb	r2, r2
 800b5a2:	701a      	strb	r2, [r3, #0]
 800b5a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5a6:	09db      	lsrs	r3, r3, #7
 800b5a8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b5aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b5ac:	2b7f      	cmp	r3, #127	@ 0x7f
 800b5ae:	d8f0      	bhi.n	800b592 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800b5b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5b2:	1c5a      	adds	r2, r3, #1
 800b5b4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b5b6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800b5b8:	b2d2      	uxtb	r2, r2
 800b5ba:	701a      	strb	r2, [r3, #0]
 800b5bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5be:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	2220      	movs	r2, #32
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f7ff f9e1 	bl	800a990 <_EncodeStr>
 800b5ce:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800b5d0:	2209      	movs	r2, #9
 800b5d2:	68f9      	ldr	r1, [r7, #12]
 800b5d4:	6938      	ldr	r0, [r7, #16]
 800b5d6:	f7ff faf7 	bl	800abc8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800b5da:	693b      	ldr	r3, [r7, #16]
 800b5dc:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800b5de:	68fb      	ldr	r3, [r7, #12]
 800b5e0:	637b      	str	r3, [r7, #52]	@ 0x34
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681a      	ldr	r2, [r3, #0]
 800b5e6:	4b40      	ldr	r3, [pc, #256]	@ (800b6e8 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800b5e8:	691b      	ldr	r3, [r3, #16]
 800b5ea:	1ad3      	subs	r3, r2, r3
 800b5ec:	633b      	str	r3, [r7, #48]	@ 0x30
 800b5ee:	e00b      	b.n	800b608 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800b5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b5f2:	b2da      	uxtb	r2, r3
 800b5f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5f6:	1c59      	adds	r1, r3, #1
 800b5f8:	6379      	str	r1, [r7, #52]	@ 0x34
 800b5fa:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b5fe:	b2d2      	uxtb	r2, r2
 800b600:	701a      	strb	r2, [r3, #0]
 800b602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b604:	09db      	lsrs	r3, r3, #7
 800b606:	633b      	str	r3, [r7, #48]	@ 0x30
 800b608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b60a:	2b7f      	cmp	r3, #127	@ 0x7f
 800b60c:	d8f0      	bhi.n	800b5f0 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800b60e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b610:	1c5a      	adds	r2, r3, #1
 800b612:	637a      	str	r2, [r7, #52]	@ 0x34
 800b614:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b616:	b2d2      	uxtb	r2, r2
 800b618:	701a      	strb	r2, [r3, #0]
 800b61a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b61c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800b61e:	68fb      	ldr	r3, [r7, #12]
 800b620:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	68db      	ldr	r3, [r3, #12]
 800b626:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b628:	e00b      	b.n	800b642 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800b62a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b62c:	b2da      	uxtb	r2, r3
 800b62e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b630:	1c59      	adds	r1, r3, #1
 800b632:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800b634:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b638:	b2d2      	uxtb	r2, r2
 800b63a:	701a      	strb	r2, [r3, #0]
 800b63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b63e:	09db      	lsrs	r3, r3, #7
 800b640:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b644:	2b7f      	cmp	r3, #127	@ 0x7f
 800b646:	d8f0      	bhi.n	800b62a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800b648:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b64a:	1c5a      	adds	r2, r3, #1
 800b64c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b64e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b650:	b2d2      	uxtb	r2, r2
 800b652:	701a      	strb	r2, [r3, #0]
 800b654:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b656:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800b658:	68fb      	ldr	r3, [r7, #12]
 800b65a:	627b      	str	r3, [r7, #36]	@ 0x24
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	691b      	ldr	r3, [r3, #16]
 800b660:	623b      	str	r3, [r7, #32]
 800b662:	e00b      	b.n	800b67c <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800b664:	6a3b      	ldr	r3, [r7, #32]
 800b666:	b2da      	uxtb	r2, r3
 800b668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b66a:	1c59      	adds	r1, r3, #1
 800b66c:	6279      	str	r1, [r7, #36]	@ 0x24
 800b66e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b672:	b2d2      	uxtb	r2, r2
 800b674:	701a      	strb	r2, [r3, #0]
 800b676:	6a3b      	ldr	r3, [r7, #32]
 800b678:	09db      	lsrs	r3, r3, #7
 800b67a:	623b      	str	r3, [r7, #32]
 800b67c:	6a3b      	ldr	r3, [r7, #32]
 800b67e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b680:	d8f0      	bhi.n	800b664 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800b682:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b684:	1c5a      	adds	r2, r3, #1
 800b686:	627a      	str	r2, [r7, #36]	@ 0x24
 800b688:	6a3a      	ldr	r2, [r7, #32]
 800b68a:	b2d2      	uxtb	r2, r2
 800b68c:	701a      	strb	r2, [r3, #0]
 800b68e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b690:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	61fb      	str	r3, [r7, #28]
 800b696:	2300      	movs	r3, #0
 800b698:	61bb      	str	r3, [r7, #24]
 800b69a:	e00b      	b.n	800b6b4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800b69c:	69bb      	ldr	r3, [r7, #24]
 800b69e:	b2da      	uxtb	r2, r3
 800b6a0:	69fb      	ldr	r3, [r7, #28]
 800b6a2:	1c59      	adds	r1, r3, #1
 800b6a4:	61f9      	str	r1, [r7, #28]
 800b6a6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b6aa:	b2d2      	uxtb	r2, r2
 800b6ac:	701a      	strb	r2, [r3, #0]
 800b6ae:	69bb      	ldr	r3, [r7, #24]
 800b6b0:	09db      	lsrs	r3, r3, #7
 800b6b2:	61bb      	str	r3, [r7, #24]
 800b6b4:	69bb      	ldr	r3, [r7, #24]
 800b6b6:	2b7f      	cmp	r3, #127	@ 0x7f
 800b6b8:	d8f0      	bhi.n	800b69c <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800b6ba:	69fb      	ldr	r3, [r7, #28]
 800b6bc:	1c5a      	adds	r2, r3, #1
 800b6be:	61fa      	str	r2, [r7, #28]
 800b6c0:	69ba      	ldr	r2, [r7, #24]
 800b6c2:	b2d2      	uxtb	r2, r2
 800b6c4:	701a      	strb	r2, [r3, #0]
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800b6ca:	2215      	movs	r2, #21
 800b6cc:	68f9      	ldr	r1, [r7, #12]
 800b6ce:	6938      	ldr	r0, [r7, #16]
 800b6d0:	f7ff fa7a 	bl	800abc8 <_SendPacket>
  RECORD_END();
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	f383 8811 	msr	BASEPRI, r3
}
 800b6da:	bf00      	nop
 800b6dc:	3748      	adds	r7, #72	@ 0x48
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	bd80      	pop	{r7, pc}
 800b6e2:	bf00      	nop
 800b6e4:	20013b58 	.word	0x20013b58
 800b6e8:	20013b28 	.word	0x20013b28

0800b6ec <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800b6f0:	4b07      	ldr	r3, [pc, #28]	@ (800b710 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b6f2:	6a1b      	ldr	r3, [r3, #32]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	d008      	beq.n	800b70a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800b6f8:	4b05      	ldr	r3, [pc, #20]	@ (800b710 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b6fa:	6a1b      	ldr	r3, [r3, #32]
 800b6fc:	685b      	ldr	r3, [r3, #4]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d003      	beq.n	800b70a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800b702:	4b03      	ldr	r3, [pc, #12]	@ (800b710 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800b704:	6a1b      	ldr	r3, [r3, #32]
 800b706:	685b      	ldr	r3, [r3, #4]
 800b708:	4798      	blx	r3
  }
}
 800b70a:	bf00      	nop
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	20013b28 	.word	0x20013b28

0800b714 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800b714:	b580      	push	{r7, lr}
 800b716:	b086      	sub	sp, #24
 800b718:	af00      	add	r7, sp, #0
 800b71a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b71c:	f3ef 8311 	mrs	r3, BASEPRI
 800b720:	f04f 0120 	mov.w	r1, #32
 800b724:	f381 8811 	msr	BASEPRI, r1
 800b728:	617b      	str	r3, [r7, #20]
 800b72a:	480b      	ldr	r0, [pc, #44]	@ (800b758 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800b72c:	f7ff f960 	bl	800a9f0 <_PreparePacket>
 800b730:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b732:	2280      	movs	r2, #128	@ 0x80
 800b734:	6879      	ldr	r1, [r7, #4]
 800b736:	6938      	ldr	r0, [r7, #16]
 800b738:	f7ff f92a 	bl	800a990 <_EncodeStr>
 800b73c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800b73e:	220e      	movs	r2, #14
 800b740:	68f9      	ldr	r1, [r7, #12]
 800b742:	6938      	ldr	r0, [r7, #16]
 800b744:	f7ff fa40 	bl	800abc8 <_SendPacket>
  RECORD_END();
 800b748:	697b      	ldr	r3, [r7, #20]
 800b74a:	f383 8811 	msr	BASEPRI, r3
}
 800b74e:	bf00      	nop
 800b750:	3718      	adds	r7, #24
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	20013b58 	.word	0x20013b58

0800b75c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800b75c:	b590      	push	{r4, r7, lr}
 800b75e:	b083      	sub	sp, #12
 800b760:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800b762:	4b15      	ldr	r3, [pc, #84]	@ (800b7b8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800b764:	6a1b      	ldr	r3, [r3, #32]
 800b766:	2b00      	cmp	r3, #0
 800b768:	d01a      	beq.n	800b7a0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800b76a:	4b13      	ldr	r3, [pc, #76]	@ (800b7b8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800b76c:	6a1b      	ldr	r3, [r3, #32]
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	2b00      	cmp	r3, #0
 800b772:	d015      	beq.n	800b7a0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800b774:	4b10      	ldr	r3, [pc, #64]	@ (800b7b8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800b776:	6a1b      	ldr	r3, [r3, #32]
 800b778:	681b      	ldr	r3, [r3, #0]
 800b77a:	4798      	blx	r3
 800b77c:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800b780:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800b782:	e9d7 0100 	ldrd	r0, r1, [r7]
 800b786:	f04f 0200 	mov.w	r2, #0
 800b78a:	f04f 0300 	mov.w	r3, #0
 800b78e:	000a      	movs	r2, r1
 800b790:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800b792:	4613      	mov	r3, r2
 800b794:	461a      	mov	r2, r3
 800b796:	4621      	mov	r1, r4
 800b798:	200d      	movs	r0, #13
 800b79a:	f7ff fcef 	bl	800b17c <SEGGER_SYSVIEW_RecordU32x2>
 800b79e:	e006      	b.n	800b7ae <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800b7a0:	4b06      	ldr	r3, [pc, #24]	@ (800b7bc <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4619      	mov	r1, r3
 800b7a6:	200c      	movs	r0, #12
 800b7a8:	f7ff fcac 	bl	800b104 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800b7ac:	bf00      	nop
 800b7ae:	bf00      	nop
 800b7b0:	370c      	adds	r7, #12
 800b7b2:	46bd      	mov	sp, r7
 800b7b4:	bd90      	pop	{r4, r7, pc}
 800b7b6:	bf00      	nop
 800b7b8:	20013b28 	.word	0x20013b28
 800b7bc:	e0001004 	.word	0xe0001004

0800b7c0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	b082      	sub	sp, #8
 800b7c4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800b7c6:	f3ef 8311 	mrs	r3, BASEPRI
 800b7ca:	f04f 0120 	mov.w	r1, #32
 800b7ce:	f381 8811 	msr	BASEPRI, r1
 800b7d2:	607b      	str	r3, [r7, #4]
 800b7d4:	4807      	ldr	r0, [pc, #28]	@ (800b7f4 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800b7d6:	f7ff f90b 	bl	800a9f0 <_PreparePacket>
 800b7da:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800b7dc:	2211      	movs	r2, #17
 800b7de:	6839      	ldr	r1, [r7, #0]
 800b7e0:	6838      	ldr	r0, [r7, #0]
 800b7e2:	f7ff f9f1 	bl	800abc8 <_SendPacket>
  RECORD_END();
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	f383 8811 	msr	BASEPRI, r3
}
 800b7ec:	bf00      	nop
 800b7ee:	3708      	adds	r7, #8
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	bd80      	pop	{r7, pc}
 800b7f4:	20013b58 	.word	0x20013b58

0800b7f8 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800b7f8:	b580      	push	{r7, lr}
 800b7fa:	b088      	sub	sp, #32
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b800:	f3ef 8311 	mrs	r3, BASEPRI
 800b804:	f04f 0120 	mov.w	r1, #32
 800b808:	f381 8811 	msr	BASEPRI, r1
 800b80c:	617b      	str	r3, [r7, #20]
 800b80e:	4819      	ldr	r0, [pc, #100]	@ (800b874 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800b810:	f7ff f8ee 	bl	800a9f0 <_PreparePacket>
 800b814:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b816:	693b      	ldr	r3, [r7, #16]
 800b818:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800b81a:	4b17      	ldr	r3, [pc, #92]	@ (800b878 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800b81c:	691b      	ldr	r3, [r3, #16]
 800b81e:	687a      	ldr	r2, [r7, #4]
 800b820:	1ad3      	subs	r3, r2, r3
 800b822:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	61fb      	str	r3, [r7, #28]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	61bb      	str	r3, [r7, #24]
 800b82c:	e00b      	b.n	800b846 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800b82e:	69bb      	ldr	r3, [r7, #24]
 800b830:	b2da      	uxtb	r2, r3
 800b832:	69fb      	ldr	r3, [r7, #28]
 800b834:	1c59      	adds	r1, r3, #1
 800b836:	61f9      	str	r1, [r7, #28]
 800b838:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b83c:	b2d2      	uxtb	r2, r2
 800b83e:	701a      	strb	r2, [r3, #0]
 800b840:	69bb      	ldr	r3, [r7, #24]
 800b842:	09db      	lsrs	r3, r3, #7
 800b844:	61bb      	str	r3, [r7, #24]
 800b846:	69bb      	ldr	r3, [r7, #24]
 800b848:	2b7f      	cmp	r3, #127	@ 0x7f
 800b84a:	d8f0      	bhi.n	800b82e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800b84c:	69fb      	ldr	r3, [r7, #28]
 800b84e:	1c5a      	adds	r2, r3, #1
 800b850:	61fa      	str	r2, [r7, #28]
 800b852:	69ba      	ldr	r2, [r7, #24]
 800b854:	b2d2      	uxtb	r2, r2
 800b856:	701a      	strb	r2, [r3, #0]
 800b858:	69fb      	ldr	r3, [r7, #28]
 800b85a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800b85c:	2208      	movs	r2, #8
 800b85e:	68f9      	ldr	r1, [r7, #12]
 800b860:	6938      	ldr	r0, [r7, #16]
 800b862:	f7ff f9b1 	bl	800abc8 <_SendPacket>
  RECORD_END();
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	f383 8811 	msr	BASEPRI, r3
}
 800b86c:	bf00      	nop
 800b86e:	3720      	adds	r7, #32
 800b870:	46bd      	mov	sp, r7
 800b872:	bd80      	pop	{r7, pc}
 800b874:	20013b58 	.word	0x20013b58
 800b878:	20013b28 	.word	0x20013b28

0800b87c <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b088      	sub	sp, #32
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b884:	f3ef 8311 	mrs	r3, BASEPRI
 800b888:	f04f 0120 	mov.w	r1, #32
 800b88c:	f381 8811 	msr	BASEPRI, r1
 800b890:	617b      	str	r3, [r7, #20]
 800b892:	4819      	ldr	r0, [pc, #100]	@ (800b8f8 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800b894:	f7ff f8ac 	bl	800a9f0 <_PreparePacket>
 800b898:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b89a:	693b      	ldr	r3, [r7, #16]
 800b89c:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800b89e:	4b17      	ldr	r3, [pc, #92]	@ (800b8fc <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800b8a0:	691b      	ldr	r3, [r3, #16]
 800b8a2:	687a      	ldr	r2, [r7, #4]
 800b8a4:	1ad3      	subs	r3, r2, r3
 800b8a6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	61fb      	str	r3, [r7, #28]
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	61bb      	str	r3, [r7, #24]
 800b8b0:	e00b      	b.n	800b8ca <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800b8b2:	69bb      	ldr	r3, [r7, #24]
 800b8b4:	b2da      	uxtb	r2, r3
 800b8b6:	69fb      	ldr	r3, [r7, #28]
 800b8b8:	1c59      	adds	r1, r3, #1
 800b8ba:	61f9      	str	r1, [r7, #28]
 800b8bc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b8c0:	b2d2      	uxtb	r2, r2
 800b8c2:	701a      	strb	r2, [r3, #0]
 800b8c4:	69bb      	ldr	r3, [r7, #24]
 800b8c6:	09db      	lsrs	r3, r3, #7
 800b8c8:	61bb      	str	r3, [r7, #24]
 800b8ca:	69bb      	ldr	r3, [r7, #24]
 800b8cc:	2b7f      	cmp	r3, #127	@ 0x7f
 800b8ce:	d8f0      	bhi.n	800b8b2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800b8d0:	69fb      	ldr	r3, [r7, #28]
 800b8d2:	1c5a      	adds	r2, r3, #1
 800b8d4:	61fa      	str	r2, [r7, #28]
 800b8d6:	69ba      	ldr	r2, [r7, #24]
 800b8d8:	b2d2      	uxtb	r2, r2
 800b8da:	701a      	strb	r2, [r3, #0]
 800b8dc:	69fb      	ldr	r3, [r7, #28]
 800b8de:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800b8e0:	2204      	movs	r2, #4
 800b8e2:	68f9      	ldr	r1, [r7, #12]
 800b8e4:	6938      	ldr	r0, [r7, #16]
 800b8e6:	f7ff f96f 	bl	800abc8 <_SendPacket>
  RECORD_END();
 800b8ea:	697b      	ldr	r3, [r7, #20]
 800b8ec:	f383 8811 	msr	BASEPRI, r3
}
 800b8f0:	bf00      	nop
 800b8f2:	3720      	adds	r7, #32
 800b8f4:	46bd      	mov	sp, r7
 800b8f6:	bd80      	pop	{r7, pc}
 800b8f8:	20013b58 	.word	0x20013b58
 800b8fc:	20013b28 	.word	0x20013b28

0800b900 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800b900:	b580      	push	{r7, lr}
 800b902:	b088      	sub	sp, #32
 800b904:	af00      	add	r7, sp, #0
 800b906:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800b908:	f3ef 8311 	mrs	r3, BASEPRI
 800b90c:	f04f 0120 	mov.w	r1, #32
 800b910:	f381 8811 	msr	BASEPRI, r1
 800b914:	617b      	str	r3, [r7, #20]
 800b916:	4819      	ldr	r0, [pc, #100]	@ (800b97c <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800b918:	f7ff f86a 	bl	800a9f0 <_PreparePacket>
 800b91c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800b91e:	693b      	ldr	r3, [r7, #16]
 800b920:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800b922:	4b17      	ldr	r3, [pc, #92]	@ (800b980 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800b924:	691b      	ldr	r3, [r3, #16]
 800b926:	687a      	ldr	r2, [r7, #4]
 800b928:	1ad3      	subs	r3, r2, r3
 800b92a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	61fb      	str	r3, [r7, #28]
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	61bb      	str	r3, [r7, #24]
 800b934:	e00b      	b.n	800b94e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800b936:	69bb      	ldr	r3, [r7, #24]
 800b938:	b2da      	uxtb	r2, r3
 800b93a:	69fb      	ldr	r3, [r7, #28]
 800b93c:	1c59      	adds	r1, r3, #1
 800b93e:	61f9      	str	r1, [r7, #28]
 800b940:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b944:	b2d2      	uxtb	r2, r2
 800b946:	701a      	strb	r2, [r3, #0]
 800b948:	69bb      	ldr	r3, [r7, #24]
 800b94a:	09db      	lsrs	r3, r3, #7
 800b94c:	61bb      	str	r3, [r7, #24]
 800b94e:	69bb      	ldr	r3, [r7, #24]
 800b950:	2b7f      	cmp	r3, #127	@ 0x7f
 800b952:	d8f0      	bhi.n	800b936 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800b954:	69fb      	ldr	r3, [r7, #28]
 800b956:	1c5a      	adds	r2, r3, #1
 800b958:	61fa      	str	r2, [r7, #28]
 800b95a:	69ba      	ldr	r2, [r7, #24]
 800b95c:	b2d2      	uxtb	r2, r2
 800b95e:	701a      	strb	r2, [r3, #0]
 800b960:	69fb      	ldr	r3, [r7, #28]
 800b962:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800b964:	2206      	movs	r2, #6
 800b966:	68f9      	ldr	r1, [r7, #12]
 800b968:	6938      	ldr	r0, [r7, #16]
 800b96a:	f7ff f92d 	bl	800abc8 <_SendPacket>
  RECORD_END();
 800b96e:	697b      	ldr	r3, [r7, #20]
 800b970:	f383 8811 	msr	BASEPRI, r3
}
 800b974:	bf00      	nop
 800b976:	3720      	adds	r7, #32
 800b978:	46bd      	mov	sp, r7
 800b97a:	bd80      	pop	{r7, pc}
 800b97c:	20013b58 	.word	0x20013b58
 800b980:	20013b28 	.word	0x20013b28

0800b984 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800b984:	b580      	push	{r7, lr}
 800b986:	b08c      	sub	sp, #48	@ 0x30
 800b988:	af00      	add	r7, sp, #0
 800b98a:	4603      	mov	r3, r0
 800b98c:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800b98e:	4b40      	ldr	r3, [pc, #256]	@ (800ba90 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800b990:	681b      	ldr	r3, [r3, #0]
 800b992:	2b00      	cmp	r3, #0
 800b994:	d077      	beq.n	800ba86 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800b996:	4b3e      	ldr	r3, [pc, #248]	@ (800ba90 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800b998:	681b      	ldr	r3, [r3, #0]
 800b99a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800b99c:	2300      	movs	r3, #0
 800b99e:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b9a0:	e008      	b.n	800b9b4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800b9a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a4:	691b      	ldr	r3, [r3, #16]
 800b9a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800b9a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d007      	beq.n	800b9be <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800b9ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9b0:	3301      	adds	r3, #1
 800b9b2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b9b4:	79fb      	ldrb	r3, [r7, #7]
 800b9b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800b9b8:	429a      	cmp	r2, r3
 800b9ba:	d3f2      	bcc.n	800b9a2 <SEGGER_SYSVIEW_SendModule+0x1e>
 800b9bc:	e000      	b.n	800b9c0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800b9be:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800b9c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d055      	beq.n	800ba72 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800b9c6:	f3ef 8311 	mrs	r3, BASEPRI
 800b9ca:	f04f 0120 	mov.w	r1, #32
 800b9ce:	f381 8811 	msr	BASEPRI, r1
 800b9d2:	617b      	str	r3, [r7, #20]
 800b9d4:	482f      	ldr	r0, [pc, #188]	@ (800ba94 <SEGGER_SYSVIEW_SendModule+0x110>)
 800b9d6:	f7ff f80b 	bl	800a9f0 <_PreparePacket>
 800b9da:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800b9dc:	693b      	ldr	r3, [r7, #16]
 800b9de:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	627b      	str	r3, [r7, #36]	@ 0x24
 800b9e4:	79fb      	ldrb	r3, [r7, #7]
 800b9e6:	623b      	str	r3, [r7, #32]
 800b9e8:	e00b      	b.n	800ba02 <SEGGER_SYSVIEW_SendModule+0x7e>
 800b9ea:	6a3b      	ldr	r3, [r7, #32]
 800b9ec:	b2da      	uxtb	r2, r3
 800b9ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b9f0:	1c59      	adds	r1, r3, #1
 800b9f2:	6279      	str	r1, [r7, #36]	@ 0x24
 800b9f4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b9f8:	b2d2      	uxtb	r2, r2
 800b9fa:	701a      	strb	r2, [r3, #0]
 800b9fc:	6a3b      	ldr	r3, [r7, #32]
 800b9fe:	09db      	lsrs	r3, r3, #7
 800ba00:	623b      	str	r3, [r7, #32]
 800ba02:	6a3b      	ldr	r3, [r7, #32]
 800ba04:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba06:	d8f0      	bhi.n	800b9ea <SEGGER_SYSVIEW_SendModule+0x66>
 800ba08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba0a:	1c5a      	adds	r2, r3, #1
 800ba0c:	627a      	str	r2, [r7, #36]	@ 0x24
 800ba0e:	6a3a      	ldr	r2, [r7, #32]
 800ba10:	b2d2      	uxtb	r2, r2
 800ba12:	701a      	strb	r2, [r3, #0]
 800ba14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ba16:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	61fb      	str	r3, [r7, #28]
 800ba1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba1e:	689b      	ldr	r3, [r3, #8]
 800ba20:	61bb      	str	r3, [r7, #24]
 800ba22:	e00b      	b.n	800ba3c <SEGGER_SYSVIEW_SendModule+0xb8>
 800ba24:	69bb      	ldr	r3, [r7, #24]
 800ba26:	b2da      	uxtb	r2, r3
 800ba28:	69fb      	ldr	r3, [r7, #28]
 800ba2a:	1c59      	adds	r1, r3, #1
 800ba2c:	61f9      	str	r1, [r7, #28]
 800ba2e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ba32:	b2d2      	uxtb	r2, r2
 800ba34:	701a      	strb	r2, [r3, #0]
 800ba36:	69bb      	ldr	r3, [r7, #24]
 800ba38:	09db      	lsrs	r3, r3, #7
 800ba3a:	61bb      	str	r3, [r7, #24]
 800ba3c:	69bb      	ldr	r3, [r7, #24]
 800ba3e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ba40:	d8f0      	bhi.n	800ba24 <SEGGER_SYSVIEW_SendModule+0xa0>
 800ba42:	69fb      	ldr	r3, [r7, #28]
 800ba44:	1c5a      	adds	r2, r3, #1
 800ba46:	61fa      	str	r2, [r7, #28]
 800ba48:	69ba      	ldr	r2, [r7, #24]
 800ba4a:	b2d2      	uxtb	r2, r2
 800ba4c:	701a      	strb	r2, [r3, #0]
 800ba4e:	69fb      	ldr	r3, [r7, #28]
 800ba50:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ba52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	2280      	movs	r2, #128	@ 0x80
 800ba58:	4619      	mov	r1, r3
 800ba5a:	68f8      	ldr	r0, [r7, #12]
 800ba5c:	f7fe ff98 	bl	800a990 <_EncodeStr>
 800ba60:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800ba62:	2216      	movs	r2, #22
 800ba64:	68f9      	ldr	r1, [r7, #12]
 800ba66:	6938      	ldr	r0, [r7, #16]
 800ba68:	f7ff f8ae 	bl	800abc8 <_SendPacket>
      RECORD_END();
 800ba6c:	697b      	ldr	r3, [r7, #20]
 800ba6e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800ba72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d006      	beq.n	800ba86 <SEGGER_SYSVIEW_SendModule+0x102>
 800ba78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba7a:	68db      	ldr	r3, [r3, #12]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d002      	beq.n	800ba86 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800ba80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ba82:	68db      	ldr	r3, [r3, #12]
 800ba84:	4798      	blx	r3
    }
  }
}
 800ba86:	bf00      	nop
 800ba88:	3730      	adds	r7, #48	@ 0x30
 800ba8a:	46bd      	mov	sp, r7
 800ba8c:	bd80      	pop	{r7, pc}
 800ba8e:	bf00      	nop
 800ba90:	20013b50 	.word	0x20013b50
 800ba94:	20013b58 	.word	0x20013b58

0800ba98 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b082      	sub	sp, #8
 800ba9c:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800ba9e:	4b0c      	ldr	r3, [pc, #48]	@ (800bad0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800baa0:	681b      	ldr	r3, [r3, #0]
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d00f      	beq.n	800bac6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800baa6:	4b0a      	ldr	r3, [pc, #40]	@ (800bad0 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800baa8:	681b      	ldr	r3, [r3, #0]
 800baaa:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	68db      	ldr	r3, [r3, #12]
 800bab0:	2b00      	cmp	r3, #0
 800bab2:	d002      	beq.n	800baba <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	68db      	ldr	r3, [r3, #12]
 800bab8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800baba:	687b      	ldr	r3, [r7, #4]
 800babc:	691b      	ldr	r3, [r3, #16]
 800babe:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d1f2      	bne.n	800baac <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800bac6:	bf00      	nop
 800bac8:	3708      	adds	r7, #8
 800baca:	46bd      	mov	sp, r7
 800bacc:	bd80      	pop	{r7, pc}
 800bace:	bf00      	nop
 800bad0:	20013b50 	.word	0x20013b50

0800bad4 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800bad4:	b580      	push	{r7, lr}
 800bad6:	b086      	sub	sp, #24
 800bad8:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800bada:	f3ef 8311 	mrs	r3, BASEPRI
 800bade:	f04f 0120 	mov.w	r1, #32
 800bae2:	f381 8811 	msr	BASEPRI, r1
 800bae6:	60fb      	str	r3, [r7, #12]
 800bae8:	4817      	ldr	r0, [pc, #92]	@ (800bb48 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800baea:	f7fe ff81 	bl	800a9f0 <_PreparePacket>
 800baee:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800baf0:	68bb      	ldr	r3, [r7, #8]
 800baf2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	617b      	str	r3, [r7, #20]
 800baf8:	4b14      	ldr	r3, [pc, #80]	@ (800bb4c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800bafa:	781b      	ldrb	r3, [r3, #0]
 800bafc:	613b      	str	r3, [r7, #16]
 800bafe:	e00b      	b.n	800bb18 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800bb00:	693b      	ldr	r3, [r7, #16]
 800bb02:	b2da      	uxtb	r2, r3
 800bb04:	697b      	ldr	r3, [r7, #20]
 800bb06:	1c59      	adds	r1, r3, #1
 800bb08:	6179      	str	r1, [r7, #20]
 800bb0a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bb0e:	b2d2      	uxtb	r2, r2
 800bb10:	701a      	strb	r2, [r3, #0]
 800bb12:	693b      	ldr	r3, [r7, #16]
 800bb14:	09db      	lsrs	r3, r3, #7
 800bb16:	613b      	str	r3, [r7, #16]
 800bb18:	693b      	ldr	r3, [r7, #16]
 800bb1a:	2b7f      	cmp	r3, #127	@ 0x7f
 800bb1c:	d8f0      	bhi.n	800bb00 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800bb1e:	697b      	ldr	r3, [r7, #20]
 800bb20:	1c5a      	adds	r2, r3, #1
 800bb22:	617a      	str	r2, [r7, #20]
 800bb24:	693a      	ldr	r2, [r7, #16]
 800bb26:	b2d2      	uxtb	r2, r2
 800bb28:	701a      	strb	r2, [r3, #0]
 800bb2a:	697b      	ldr	r3, [r7, #20]
 800bb2c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800bb2e:	221b      	movs	r2, #27
 800bb30:	6879      	ldr	r1, [r7, #4]
 800bb32:	68b8      	ldr	r0, [r7, #8]
 800bb34:	f7ff f848 	bl	800abc8 <_SendPacket>
  RECORD_END();
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	f383 8811 	msr	BASEPRI, r3
}
 800bb3e:	bf00      	nop
 800bb40:	3718      	adds	r7, #24
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	20013b58 	.word	0x20013b58
 800bb4c:	20013b54 	.word	0x20013b54

0800bb50 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 800bb50:	b40f      	push	{r0, r1, r2, r3}
 800bb52:	b580      	push	{r7, lr}
 800bb54:	b082      	sub	sp, #8
 800bb56:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 800bb58:	f107 0314 	add.w	r3, r7, #20
 800bb5c:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800bb5e:	1d3b      	adds	r3, r7, #4
 800bb60:	461a      	mov	r2, r3
 800bb62:	2100      	movs	r1, #0
 800bb64:	6938      	ldr	r0, [r7, #16]
 800bb66:	f7ff f99d 	bl	800aea4 <_VPrintHost>
  va_end(ParamList);
#endif
}
 800bb6a:	bf00      	nop
 800bb6c:	3708      	adds	r7, #8
 800bb6e:	46bd      	mov	sp, r7
 800bb70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bb74:	b004      	add	sp, #16
 800bb76:	4770      	bx	lr

0800bb78 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800bb78:	b580      	push	{r7, lr}
 800bb7a:	b08a      	sub	sp, #40	@ 0x28
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800bb80:	f3ef 8311 	mrs	r3, BASEPRI
 800bb84:	f04f 0120 	mov.w	r1, #32
 800bb88:	f381 8811 	msr	BASEPRI, r1
 800bb8c:	617b      	str	r3, [r7, #20]
 800bb8e:	4827      	ldr	r0, [pc, #156]	@ (800bc2c <SEGGER_SYSVIEW_Warn+0xb4>)
 800bb90:	f7fe ff2e 	bl	800a9f0 <_PreparePacket>
 800bb94:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800bb96:	2280      	movs	r2, #128	@ 0x80
 800bb98:	6879      	ldr	r1, [r7, #4]
 800bb9a:	6938      	ldr	r0, [r7, #16]
 800bb9c:	f7fe fef8 	bl	800a990 <_EncodeStr>
 800bba0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800bba2:	68fb      	ldr	r3, [r7, #12]
 800bba4:	627b      	str	r3, [r7, #36]	@ 0x24
 800bba6:	2301      	movs	r3, #1
 800bba8:	623b      	str	r3, [r7, #32]
 800bbaa:	e00b      	b.n	800bbc4 <SEGGER_SYSVIEW_Warn+0x4c>
 800bbac:	6a3b      	ldr	r3, [r7, #32]
 800bbae:	b2da      	uxtb	r2, r3
 800bbb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbb2:	1c59      	adds	r1, r3, #1
 800bbb4:	6279      	str	r1, [r7, #36]	@ 0x24
 800bbb6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bbba:	b2d2      	uxtb	r2, r2
 800bbbc:	701a      	strb	r2, [r3, #0]
 800bbbe:	6a3b      	ldr	r3, [r7, #32]
 800bbc0:	09db      	lsrs	r3, r3, #7
 800bbc2:	623b      	str	r3, [r7, #32]
 800bbc4:	6a3b      	ldr	r3, [r7, #32]
 800bbc6:	2b7f      	cmp	r3, #127	@ 0x7f
 800bbc8:	d8f0      	bhi.n	800bbac <SEGGER_SYSVIEW_Warn+0x34>
 800bbca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbcc:	1c5a      	adds	r2, r3, #1
 800bbce:	627a      	str	r2, [r7, #36]	@ 0x24
 800bbd0:	6a3a      	ldr	r2, [r7, #32]
 800bbd2:	b2d2      	uxtb	r2, r2
 800bbd4:	701a      	strb	r2, [r3, #0]
 800bbd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd8:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	61fb      	str	r3, [r7, #28]
 800bbde:	2300      	movs	r3, #0
 800bbe0:	61bb      	str	r3, [r7, #24]
 800bbe2:	e00b      	b.n	800bbfc <SEGGER_SYSVIEW_Warn+0x84>
 800bbe4:	69bb      	ldr	r3, [r7, #24]
 800bbe6:	b2da      	uxtb	r2, r3
 800bbe8:	69fb      	ldr	r3, [r7, #28]
 800bbea:	1c59      	adds	r1, r3, #1
 800bbec:	61f9      	str	r1, [r7, #28]
 800bbee:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800bbf2:	b2d2      	uxtb	r2, r2
 800bbf4:	701a      	strb	r2, [r3, #0]
 800bbf6:	69bb      	ldr	r3, [r7, #24]
 800bbf8:	09db      	lsrs	r3, r3, #7
 800bbfa:	61bb      	str	r3, [r7, #24]
 800bbfc:	69bb      	ldr	r3, [r7, #24]
 800bbfe:	2b7f      	cmp	r3, #127	@ 0x7f
 800bc00:	d8f0      	bhi.n	800bbe4 <SEGGER_SYSVIEW_Warn+0x6c>
 800bc02:	69fb      	ldr	r3, [r7, #28]
 800bc04:	1c5a      	adds	r2, r3, #1
 800bc06:	61fa      	str	r2, [r7, #28]
 800bc08:	69ba      	ldr	r2, [r7, #24]
 800bc0a:	b2d2      	uxtb	r2, r2
 800bc0c:	701a      	strb	r2, [r3, #0]
 800bc0e:	69fb      	ldr	r3, [r7, #28]
 800bc10:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800bc12:	221a      	movs	r2, #26
 800bc14:	68f9      	ldr	r1, [r7, #12]
 800bc16:	6938      	ldr	r0, [r7, #16]
 800bc18:	f7fe ffd6 	bl	800abc8 <_SendPacket>
  RECORD_END();
 800bc1c:	697b      	ldr	r3, [r7, #20]
 800bc1e:	f383 8811 	msr	BASEPRI, r3
}
 800bc22:	bf00      	nop
 800bc24:	3728      	adds	r7, #40	@ 0x28
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	20013b58 	.word	0x20013b58

0800bc30 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800bc30:	b580      	push	{r7, lr}
 800bc32:	b084      	sub	sp, #16
 800bc34:	af00      	add	r7, sp, #0
 800bc36:	60f8      	str	r0, [r7, #12]
 800bc38:	60b9      	str	r1, [r7, #8]
 800bc3a:	607a      	str	r2, [r7, #4]
 800bc3c:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800bc3e:	683a      	ldr	r2, [r7, #0]
 800bc40:	6879      	ldr	r1, [r7, #4]
 800bc42:	2000      	movs	r0, #0
 800bc44:	f7fe fdae 	bl	800a7a4 <SEGGER_RTT_Write>
  return len;
 800bc48:	683b      	ldr	r3, [r7, #0]
}
 800bc4a:	4618      	mov	r0, r3
 800bc4c:	3710      	adds	r7, #16
 800bc4e:	46bd      	mov	sp, r7
 800bc50:	bd80      	pop	{r7, pc}

0800bc52 <__cvt>:
 800bc52:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800bc56:	ec57 6b10 	vmov	r6, r7, d0
 800bc5a:	2f00      	cmp	r7, #0
 800bc5c:	460c      	mov	r4, r1
 800bc5e:	4619      	mov	r1, r3
 800bc60:	463b      	mov	r3, r7
 800bc62:	bfbb      	ittet	lt
 800bc64:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800bc68:	461f      	movlt	r7, r3
 800bc6a:	2300      	movge	r3, #0
 800bc6c:	232d      	movlt	r3, #45	@ 0x2d
 800bc6e:	700b      	strb	r3, [r1, #0]
 800bc70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bc72:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800bc76:	4691      	mov	r9, r2
 800bc78:	f023 0820 	bic.w	r8, r3, #32
 800bc7c:	bfbc      	itt	lt
 800bc7e:	4632      	movlt	r2, r6
 800bc80:	4616      	movlt	r6, r2
 800bc82:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bc86:	d005      	beq.n	800bc94 <__cvt+0x42>
 800bc88:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800bc8c:	d100      	bne.n	800bc90 <__cvt+0x3e>
 800bc8e:	3401      	adds	r4, #1
 800bc90:	2102      	movs	r1, #2
 800bc92:	e000      	b.n	800bc96 <__cvt+0x44>
 800bc94:	2103      	movs	r1, #3
 800bc96:	ab03      	add	r3, sp, #12
 800bc98:	9301      	str	r3, [sp, #4]
 800bc9a:	ab02      	add	r3, sp, #8
 800bc9c:	9300      	str	r3, [sp, #0]
 800bc9e:	ec47 6b10 	vmov	d0, r6, r7
 800bca2:	4653      	mov	r3, sl
 800bca4:	4622      	mov	r2, r4
 800bca6:	f000 fe67 	bl	800c978 <_dtoa_r>
 800bcaa:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800bcae:	4605      	mov	r5, r0
 800bcb0:	d119      	bne.n	800bce6 <__cvt+0x94>
 800bcb2:	f019 0f01 	tst.w	r9, #1
 800bcb6:	d00e      	beq.n	800bcd6 <__cvt+0x84>
 800bcb8:	eb00 0904 	add.w	r9, r0, r4
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	4630      	mov	r0, r6
 800bcc2:	4639      	mov	r1, r7
 800bcc4:	f7f4 ff50 	bl	8000b68 <__aeabi_dcmpeq>
 800bcc8:	b108      	cbz	r0, 800bcce <__cvt+0x7c>
 800bcca:	f8cd 900c 	str.w	r9, [sp, #12]
 800bcce:	2230      	movs	r2, #48	@ 0x30
 800bcd0:	9b03      	ldr	r3, [sp, #12]
 800bcd2:	454b      	cmp	r3, r9
 800bcd4:	d31e      	bcc.n	800bd14 <__cvt+0xc2>
 800bcd6:	9b03      	ldr	r3, [sp, #12]
 800bcd8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800bcda:	1b5b      	subs	r3, r3, r5
 800bcdc:	4628      	mov	r0, r5
 800bcde:	6013      	str	r3, [r2, #0]
 800bce0:	b004      	add	sp, #16
 800bce2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bce6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800bcea:	eb00 0904 	add.w	r9, r0, r4
 800bcee:	d1e5      	bne.n	800bcbc <__cvt+0x6a>
 800bcf0:	7803      	ldrb	r3, [r0, #0]
 800bcf2:	2b30      	cmp	r3, #48	@ 0x30
 800bcf4:	d10a      	bne.n	800bd0c <__cvt+0xba>
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	2300      	movs	r3, #0
 800bcfa:	4630      	mov	r0, r6
 800bcfc:	4639      	mov	r1, r7
 800bcfe:	f7f4 ff33 	bl	8000b68 <__aeabi_dcmpeq>
 800bd02:	b918      	cbnz	r0, 800bd0c <__cvt+0xba>
 800bd04:	f1c4 0401 	rsb	r4, r4, #1
 800bd08:	f8ca 4000 	str.w	r4, [sl]
 800bd0c:	f8da 3000 	ldr.w	r3, [sl]
 800bd10:	4499      	add	r9, r3
 800bd12:	e7d3      	b.n	800bcbc <__cvt+0x6a>
 800bd14:	1c59      	adds	r1, r3, #1
 800bd16:	9103      	str	r1, [sp, #12]
 800bd18:	701a      	strb	r2, [r3, #0]
 800bd1a:	e7d9      	b.n	800bcd0 <__cvt+0x7e>

0800bd1c <__exponent>:
 800bd1c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd1e:	2900      	cmp	r1, #0
 800bd20:	bfba      	itte	lt
 800bd22:	4249      	neglt	r1, r1
 800bd24:	232d      	movlt	r3, #45	@ 0x2d
 800bd26:	232b      	movge	r3, #43	@ 0x2b
 800bd28:	2909      	cmp	r1, #9
 800bd2a:	7002      	strb	r2, [r0, #0]
 800bd2c:	7043      	strb	r3, [r0, #1]
 800bd2e:	dd29      	ble.n	800bd84 <__exponent+0x68>
 800bd30:	f10d 0307 	add.w	r3, sp, #7
 800bd34:	461d      	mov	r5, r3
 800bd36:	270a      	movs	r7, #10
 800bd38:	461a      	mov	r2, r3
 800bd3a:	fbb1 f6f7 	udiv	r6, r1, r7
 800bd3e:	fb07 1416 	mls	r4, r7, r6, r1
 800bd42:	3430      	adds	r4, #48	@ 0x30
 800bd44:	f802 4c01 	strb.w	r4, [r2, #-1]
 800bd48:	460c      	mov	r4, r1
 800bd4a:	2c63      	cmp	r4, #99	@ 0x63
 800bd4c:	f103 33ff 	add.w	r3, r3, #4294967295
 800bd50:	4631      	mov	r1, r6
 800bd52:	dcf1      	bgt.n	800bd38 <__exponent+0x1c>
 800bd54:	3130      	adds	r1, #48	@ 0x30
 800bd56:	1e94      	subs	r4, r2, #2
 800bd58:	f803 1c01 	strb.w	r1, [r3, #-1]
 800bd5c:	1c41      	adds	r1, r0, #1
 800bd5e:	4623      	mov	r3, r4
 800bd60:	42ab      	cmp	r3, r5
 800bd62:	d30a      	bcc.n	800bd7a <__exponent+0x5e>
 800bd64:	f10d 0309 	add.w	r3, sp, #9
 800bd68:	1a9b      	subs	r3, r3, r2
 800bd6a:	42ac      	cmp	r4, r5
 800bd6c:	bf88      	it	hi
 800bd6e:	2300      	movhi	r3, #0
 800bd70:	3302      	adds	r3, #2
 800bd72:	4403      	add	r3, r0
 800bd74:	1a18      	subs	r0, r3, r0
 800bd76:	b003      	add	sp, #12
 800bd78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bd7a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bd7e:	f801 6f01 	strb.w	r6, [r1, #1]!
 800bd82:	e7ed      	b.n	800bd60 <__exponent+0x44>
 800bd84:	2330      	movs	r3, #48	@ 0x30
 800bd86:	3130      	adds	r1, #48	@ 0x30
 800bd88:	7083      	strb	r3, [r0, #2]
 800bd8a:	70c1      	strb	r1, [r0, #3]
 800bd8c:	1d03      	adds	r3, r0, #4
 800bd8e:	e7f1      	b.n	800bd74 <__exponent+0x58>

0800bd90 <_printf_float>:
 800bd90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd94:	b08d      	sub	sp, #52	@ 0x34
 800bd96:	460c      	mov	r4, r1
 800bd98:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800bd9c:	4616      	mov	r6, r2
 800bd9e:	461f      	mov	r7, r3
 800bda0:	4605      	mov	r5, r0
 800bda2:	f000 fceb 	bl	800c77c <_localeconv_r>
 800bda6:	6803      	ldr	r3, [r0, #0]
 800bda8:	9304      	str	r3, [sp, #16]
 800bdaa:	4618      	mov	r0, r3
 800bdac:	f7f4 fab0 	bl	8000310 <strlen>
 800bdb0:	2300      	movs	r3, #0
 800bdb2:	930a      	str	r3, [sp, #40]	@ 0x28
 800bdb4:	f8d8 3000 	ldr.w	r3, [r8]
 800bdb8:	9005      	str	r0, [sp, #20]
 800bdba:	3307      	adds	r3, #7
 800bdbc:	f023 0307 	bic.w	r3, r3, #7
 800bdc0:	f103 0208 	add.w	r2, r3, #8
 800bdc4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800bdc8:	f8d4 b000 	ldr.w	fp, [r4]
 800bdcc:	f8c8 2000 	str.w	r2, [r8]
 800bdd0:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bdd4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800bdd8:	9307      	str	r3, [sp, #28]
 800bdda:	f8cd 8018 	str.w	r8, [sp, #24]
 800bdde:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800bde2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bde6:	4b9c      	ldr	r3, [pc, #624]	@ (800c058 <_printf_float+0x2c8>)
 800bde8:	f04f 32ff 	mov.w	r2, #4294967295
 800bdec:	f7f4 feee 	bl	8000bcc <__aeabi_dcmpun>
 800bdf0:	bb70      	cbnz	r0, 800be50 <_printf_float+0xc0>
 800bdf2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bdf6:	4b98      	ldr	r3, [pc, #608]	@ (800c058 <_printf_float+0x2c8>)
 800bdf8:	f04f 32ff 	mov.w	r2, #4294967295
 800bdfc:	f7f4 fec8 	bl	8000b90 <__aeabi_dcmple>
 800be00:	bb30      	cbnz	r0, 800be50 <_printf_float+0xc0>
 800be02:	2200      	movs	r2, #0
 800be04:	2300      	movs	r3, #0
 800be06:	4640      	mov	r0, r8
 800be08:	4649      	mov	r1, r9
 800be0a:	f7f4 feb7 	bl	8000b7c <__aeabi_dcmplt>
 800be0e:	b110      	cbz	r0, 800be16 <_printf_float+0x86>
 800be10:	232d      	movs	r3, #45	@ 0x2d
 800be12:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800be16:	4a91      	ldr	r2, [pc, #580]	@ (800c05c <_printf_float+0x2cc>)
 800be18:	4b91      	ldr	r3, [pc, #580]	@ (800c060 <_printf_float+0x2d0>)
 800be1a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800be1e:	bf94      	ite	ls
 800be20:	4690      	movls	r8, r2
 800be22:	4698      	movhi	r8, r3
 800be24:	2303      	movs	r3, #3
 800be26:	6123      	str	r3, [r4, #16]
 800be28:	f02b 0304 	bic.w	r3, fp, #4
 800be2c:	6023      	str	r3, [r4, #0]
 800be2e:	f04f 0900 	mov.w	r9, #0
 800be32:	9700      	str	r7, [sp, #0]
 800be34:	4633      	mov	r3, r6
 800be36:	aa0b      	add	r2, sp, #44	@ 0x2c
 800be38:	4621      	mov	r1, r4
 800be3a:	4628      	mov	r0, r5
 800be3c:	f000 f9d2 	bl	800c1e4 <_printf_common>
 800be40:	3001      	adds	r0, #1
 800be42:	f040 808d 	bne.w	800bf60 <_printf_float+0x1d0>
 800be46:	f04f 30ff 	mov.w	r0, #4294967295
 800be4a:	b00d      	add	sp, #52	@ 0x34
 800be4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800be50:	4642      	mov	r2, r8
 800be52:	464b      	mov	r3, r9
 800be54:	4640      	mov	r0, r8
 800be56:	4649      	mov	r1, r9
 800be58:	f7f4 feb8 	bl	8000bcc <__aeabi_dcmpun>
 800be5c:	b140      	cbz	r0, 800be70 <_printf_float+0xe0>
 800be5e:	464b      	mov	r3, r9
 800be60:	2b00      	cmp	r3, #0
 800be62:	bfbc      	itt	lt
 800be64:	232d      	movlt	r3, #45	@ 0x2d
 800be66:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800be6a:	4a7e      	ldr	r2, [pc, #504]	@ (800c064 <_printf_float+0x2d4>)
 800be6c:	4b7e      	ldr	r3, [pc, #504]	@ (800c068 <_printf_float+0x2d8>)
 800be6e:	e7d4      	b.n	800be1a <_printf_float+0x8a>
 800be70:	6863      	ldr	r3, [r4, #4]
 800be72:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800be76:	9206      	str	r2, [sp, #24]
 800be78:	1c5a      	adds	r2, r3, #1
 800be7a:	d13b      	bne.n	800bef4 <_printf_float+0x164>
 800be7c:	2306      	movs	r3, #6
 800be7e:	6063      	str	r3, [r4, #4]
 800be80:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800be84:	2300      	movs	r3, #0
 800be86:	6022      	str	r2, [r4, #0]
 800be88:	9303      	str	r3, [sp, #12]
 800be8a:	ab0a      	add	r3, sp, #40	@ 0x28
 800be8c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800be90:	ab09      	add	r3, sp, #36	@ 0x24
 800be92:	9300      	str	r3, [sp, #0]
 800be94:	6861      	ldr	r1, [r4, #4]
 800be96:	ec49 8b10 	vmov	d0, r8, r9
 800be9a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800be9e:	4628      	mov	r0, r5
 800bea0:	f7ff fed7 	bl	800bc52 <__cvt>
 800bea4:	9b06      	ldr	r3, [sp, #24]
 800bea6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800bea8:	2b47      	cmp	r3, #71	@ 0x47
 800beaa:	4680      	mov	r8, r0
 800beac:	d129      	bne.n	800bf02 <_printf_float+0x172>
 800beae:	1cc8      	adds	r0, r1, #3
 800beb0:	db02      	blt.n	800beb8 <_printf_float+0x128>
 800beb2:	6863      	ldr	r3, [r4, #4]
 800beb4:	4299      	cmp	r1, r3
 800beb6:	dd41      	ble.n	800bf3c <_printf_float+0x1ac>
 800beb8:	f1aa 0a02 	sub.w	sl, sl, #2
 800bebc:	fa5f fa8a 	uxtb.w	sl, sl
 800bec0:	3901      	subs	r1, #1
 800bec2:	4652      	mov	r2, sl
 800bec4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800bec8:	9109      	str	r1, [sp, #36]	@ 0x24
 800beca:	f7ff ff27 	bl	800bd1c <__exponent>
 800bece:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800bed0:	1813      	adds	r3, r2, r0
 800bed2:	2a01      	cmp	r2, #1
 800bed4:	4681      	mov	r9, r0
 800bed6:	6123      	str	r3, [r4, #16]
 800bed8:	dc02      	bgt.n	800bee0 <_printf_float+0x150>
 800beda:	6822      	ldr	r2, [r4, #0]
 800bedc:	07d2      	lsls	r2, r2, #31
 800bede:	d501      	bpl.n	800bee4 <_printf_float+0x154>
 800bee0:	3301      	adds	r3, #1
 800bee2:	6123      	str	r3, [r4, #16]
 800bee4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d0a2      	beq.n	800be32 <_printf_float+0xa2>
 800beec:	232d      	movs	r3, #45	@ 0x2d
 800beee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800bef2:	e79e      	b.n	800be32 <_printf_float+0xa2>
 800bef4:	9a06      	ldr	r2, [sp, #24]
 800bef6:	2a47      	cmp	r2, #71	@ 0x47
 800bef8:	d1c2      	bne.n	800be80 <_printf_float+0xf0>
 800befa:	2b00      	cmp	r3, #0
 800befc:	d1c0      	bne.n	800be80 <_printf_float+0xf0>
 800befe:	2301      	movs	r3, #1
 800bf00:	e7bd      	b.n	800be7e <_printf_float+0xee>
 800bf02:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bf06:	d9db      	bls.n	800bec0 <_printf_float+0x130>
 800bf08:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800bf0c:	d118      	bne.n	800bf40 <_printf_float+0x1b0>
 800bf0e:	2900      	cmp	r1, #0
 800bf10:	6863      	ldr	r3, [r4, #4]
 800bf12:	dd0b      	ble.n	800bf2c <_printf_float+0x19c>
 800bf14:	6121      	str	r1, [r4, #16]
 800bf16:	b913      	cbnz	r3, 800bf1e <_printf_float+0x18e>
 800bf18:	6822      	ldr	r2, [r4, #0]
 800bf1a:	07d0      	lsls	r0, r2, #31
 800bf1c:	d502      	bpl.n	800bf24 <_printf_float+0x194>
 800bf1e:	3301      	adds	r3, #1
 800bf20:	440b      	add	r3, r1
 800bf22:	6123      	str	r3, [r4, #16]
 800bf24:	65a1      	str	r1, [r4, #88]	@ 0x58
 800bf26:	f04f 0900 	mov.w	r9, #0
 800bf2a:	e7db      	b.n	800bee4 <_printf_float+0x154>
 800bf2c:	b913      	cbnz	r3, 800bf34 <_printf_float+0x1a4>
 800bf2e:	6822      	ldr	r2, [r4, #0]
 800bf30:	07d2      	lsls	r2, r2, #31
 800bf32:	d501      	bpl.n	800bf38 <_printf_float+0x1a8>
 800bf34:	3302      	adds	r3, #2
 800bf36:	e7f4      	b.n	800bf22 <_printf_float+0x192>
 800bf38:	2301      	movs	r3, #1
 800bf3a:	e7f2      	b.n	800bf22 <_printf_float+0x192>
 800bf3c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800bf40:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf42:	4299      	cmp	r1, r3
 800bf44:	db05      	blt.n	800bf52 <_printf_float+0x1c2>
 800bf46:	6823      	ldr	r3, [r4, #0]
 800bf48:	6121      	str	r1, [r4, #16]
 800bf4a:	07d8      	lsls	r0, r3, #31
 800bf4c:	d5ea      	bpl.n	800bf24 <_printf_float+0x194>
 800bf4e:	1c4b      	adds	r3, r1, #1
 800bf50:	e7e7      	b.n	800bf22 <_printf_float+0x192>
 800bf52:	2900      	cmp	r1, #0
 800bf54:	bfd4      	ite	le
 800bf56:	f1c1 0202 	rsble	r2, r1, #2
 800bf5a:	2201      	movgt	r2, #1
 800bf5c:	4413      	add	r3, r2
 800bf5e:	e7e0      	b.n	800bf22 <_printf_float+0x192>
 800bf60:	6823      	ldr	r3, [r4, #0]
 800bf62:	055a      	lsls	r2, r3, #21
 800bf64:	d407      	bmi.n	800bf76 <_printf_float+0x1e6>
 800bf66:	6923      	ldr	r3, [r4, #16]
 800bf68:	4642      	mov	r2, r8
 800bf6a:	4631      	mov	r1, r6
 800bf6c:	4628      	mov	r0, r5
 800bf6e:	47b8      	blx	r7
 800bf70:	3001      	adds	r0, #1
 800bf72:	d12b      	bne.n	800bfcc <_printf_float+0x23c>
 800bf74:	e767      	b.n	800be46 <_printf_float+0xb6>
 800bf76:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800bf7a:	f240 80dd 	bls.w	800c138 <_printf_float+0x3a8>
 800bf7e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800bf82:	2200      	movs	r2, #0
 800bf84:	2300      	movs	r3, #0
 800bf86:	f7f4 fdef 	bl	8000b68 <__aeabi_dcmpeq>
 800bf8a:	2800      	cmp	r0, #0
 800bf8c:	d033      	beq.n	800bff6 <_printf_float+0x266>
 800bf8e:	4a37      	ldr	r2, [pc, #220]	@ (800c06c <_printf_float+0x2dc>)
 800bf90:	2301      	movs	r3, #1
 800bf92:	4631      	mov	r1, r6
 800bf94:	4628      	mov	r0, r5
 800bf96:	47b8      	blx	r7
 800bf98:	3001      	adds	r0, #1
 800bf9a:	f43f af54 	beq.w	800be46 <_printf_float+0xb6>
 800bf9e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800bfa2:	4543      	cmp	r3, r8
 800bfa4:	db02      	blt.n	800bfac <_printf_float+0x21c>
 800bfa6:	6823      	ldr	r3, [r4, #0]
 800bfa8:	07d8      	lsls	r0, r3, #31
 800bfaa:	d50f      	bpl.n	800bfcc <_printf_float+0x23c>
 800bfac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bfb0:	4631      	mov	r1, r6
 800bfb2:	4628      	mov	r0, r5
 800bfb4:	47b8      	blx	r7
 800bfb6:	3001      	adds	r0, #1
 800bfb8:	f43f af45 	beq.w	800be46 <_printf_float+0xb6>
 800bfbc:	f04f 0900 	mov.w	r9, #0
 800bfc0:	f108 38ff 	add.w	r8, r8, #4294967295
 800bfc4:	f104 0a1a 	add.w	sl, r4, #26
 800bfc8:	45c8      	cmp	r8, r9
 800bfca:	dc09      	bgt.n	800bfe0 <_printf_float+0x250>
 800bfcc:	6823      	ldr	r3, [r4, #0]
 800bfce:	079b      	lsls	r3, r3, #30
 800bfd0:	f100 8103 	bmi.w	800c1da <_printf_float+0x44a>
 800bfd4:	68e0      	ldr	r0, [r4, #12]
 800bfd6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800bfd8:	4298      	cmp	r0, r3
 800bfda:	bfb8      	it	lt
 800bfdc:	4618      	movlt	r0, r3
 800bfde:	e734      	b.n	800be4a <_printf_float+0xba>
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	4652      	mov	r2, sl
 800bfe4:	4631      	mov	r1, r6
 800bfe6:	4628      	mov	r0, r5
 800bfe8:	47b8      	blx	r7
 800bfea:	3001      	adds	r0, #1
 800bfec:	f43f af2b 	beq.w	800be46 <_printf_float+0xb6>
 800bff0:	f109 0901 	add.w	r9, r9, #1
 800bff4:	e7e8      	b.n	800bfc8 <_printf_float+0x238>
 800bff6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	dc39      	bgt.n	800c070 <_printf_float+0x2e0>
 800bffc:	4a1b      	ldr	r2, [pc, #108]	@ (800c06c <_printf_float+0x2dc>)
 800bffe:	2301      	movs	r3, #1
 800c000:	4631      	mov	r1, r6
 800c002:	4628      	mov	r0, r5
 800c004:	47b8      	blx	r7
 800c006:	3001      	adds	r0, #1
 800c008:	f43f af1d 	beq.w	800be46 <_printf_float+0xb6>
 800c00c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c010:	ea59 0303 	orrs.w	r3, r9, r3
 800c014:	d102      	bne.n	800c01c <_printf_float+0x28c>
 800c016:	6823      	ldr	r3, [r4, #0]
 800c018:	07d9      	lsls	r1, r3, #31
 800c01a:	d5d7      	bpl.n	800bfcc <_printf_float+0x23c>
 800c01c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c020:	4631      	mov	r1, r6
 800c022:	4628      	mov	r0, r5
 800c024:	47b8      	blx	r7
 800c026:	3001      	adds	r0, #1
 800c028:	f43f af0d 	beq.w	800be46 <_printf_float+0xb6>
 800c02c:	f04f 0a00 	mov.w	sl, #0
 800c030:	f104 0b1a 	add.w	fp, r4, #26
 800c034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c036:	425b      	negs	r3, r3
 800c038:	4553      	cmp	r3, sl
 800c03a:	dc01      	bgt.n	800c040 <_printf_float+0x2b0>
 800c03c:	464b      	mov	r3, r9
 800c03e:	e793      	b.n	800bf68 <_printf_float+0x1d8>
 800c040:	2301      	movs	r3, #1
 800c042:	465a      	mov	r2, fp
 800c044:	4631      	mov	r1, r6
 800c046:	4628      	mov	r0, r5
 800c048:	47b8      	blx	r7
 800c04a:	3001      	adds	r0, #1
 800c04c:	f43f aefb 	beq.w	800be46 <_printf_float+0xb6>
 800c050:	f10a 0a01 	add.w	sl, sl, #1
 800c054:	e7ee      	b.n	800c034 <_printf_float+0x2a4>
 800c056:	bf00      	nop
 800c058:	7fefffff 	.word	0x7fefffff
 800c05c:	0800fb56 	.word	0x0800fb56
 800c060:	0800fb5a 	.word	0x0800fb5a
 800c064:	0800fb5e 	.word	0x0800fb5e
 800c068:	0800fb62 	.word	0x0800fb62
 800c06c:	0800fb66 	.word	0x0800fb66
 800c070:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c072:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c076:	4553      	cmp	r3, sl
 800c078:	bfa8      	it	ge
 800c07a:	4653      	movge	r3, sl
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	4699      	mov	r9, r3
 800c080:	dc36      	bgt.n	800c0f0 <_printf_float+0x360>
 800c082:	f04f 0b00 	mov.w	fp, #0
 800c086:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c08a:	f104 021a 	add.w	r2, r4, #26
 800c08e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c090:	9306      	str	r3, [sp, #24]
 800c092:	eba3 0309 	sub.w	r3, r3, r9
 800c096:	455b      	cmp	r3, fp
 800c098:	dc31      	bgt.n	800c0fe <_printf_float+0x36e>
 800c09a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c09c:	459a      	cmp	sl, r3
 800c09e:	dc3a      	bgt.n	800c116 <_printf_float+0x386>
 800c0a0:	6823      	ldr	r3, [r4, #0]
 800c0a2:	07da      	lsls	r2, r3, #31
 800c0a4:	d437      	bmi.n	800c116 <_printf_float+0x386>
 800c0a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0a8:	ebaa 0903 	sub.w	r9, sl, r3
 800c0ac:	9b06      	ldr	r3, [sp, #24]
 800c0ae:	ebaa 0303 	sub.w	r3, sl, r3
 800c0b2:	4599      	cmp	r9, r3
 800c0b4:	bfa8      	it	ge
 800c0b6:	4699      	movge	r9, r3
 800c0b8:	f1b9 0f00 	cmp.w	r9, #0
 800c0bc:	dc33      	bgt.n	800c126 <_printf_float+0x396>
 800c0be:	f04f 0800 	mov.w	r8, #0
 800c0c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c0c6:	f104 0b1a 	add.w	fp, r4, #26
 800c0ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c0cc:	ebaa 0303 	sub.w	r3, sl, r3
 800c0d0:	eba3 0309 	sub.w	r3, r3, r9
 800c0d4:	4543      	cmp	r3, r8
 800c0d6:	f77f af79 	ble.w	800bfcc <_printf_float+0x23c>
 800c0da:	2301      	movs	r3, #1
 800c0dc:	465a      	mov	r2, fp
 800c0de:	4631      	mov	r1, r6
 800c0e0:	4628      	mov	r0, r5
 800c0e2:	47b8      	blx	r7
 800c0e4:	3001      	adds	r0, #1
 800c0e6:	f43f aeae 	beq.w	800be46 <_printf_float+0xb6>
 800c0ea:	f108 0801 	add.w	r8, r8, #1
 800c0ee:	e7ec      	b.n	800c0ca <_printf_float+0x33a>
 800c0f0:	4642      	mov	r2, r8
 800c0f2:	4631      	mov	r1, r6
 800c0f4:	4628      	mov	r0, r5
 800c0f6:	47b8      	blx	r7
 800c0f8:	3001      	adds	r0, #1
 800c0fa:	d1c2      	bne.n	800c082 <_printf_float+0x2f2>
 800c0fc:	e6a3      	b.n	800be46 <_printf_float+0xb6>
 800c0fe:	2301      	movs	r3, #1
 800c100:	4631      	mov	r1, r6
 800c102:	4628      	mov	r0, r5
 800c104:	9206      	str	r2, [sp, #24]
 800c106:	47b8      	blx	r7
 800c108:	3001      	adds	r0, #1
 800c10a:	f43f ae9c 	beq.w	800be46 <_printf_float+0xb6>
 800c10e:	9a06      	ldr	r2, [sp, #24]
 800c110:	f10b 0b01 	add.w	fp, fp, #1
 800c114:	e7bb      	b.n	800c08e <_printf_float+0x2fe>
 800c116:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c11a:	4631      	mov	r1, r6
 800c11c:	4628      	mov	r0, r5
 800c11e:	47b8      	blx	r7
 800c120:	3001      	adds	r0, #1
 800c122:	d1c0      	bne.n	800c0a6 <_printf_float+0x316>
 800c124:	e68f      	b.n	800be46 <_printf_float+0xb6>
 800c126:	9a06      	ldr	r2, [sp, #24]
 800c128:	464b      	mov	r3, r9
 800c12a:	4442      	add	r2, r8
 800c12c:	4631      	mov	r1, r6
 800c12e:	4628      	mov	r0, r5
 800c130:	47b8      	blx	r7
 800c132:	3001      	adds	r0, #1
 800c134:	d1c3      	bne.n	800c0be <_printf_float+0x32e>
 800c136:	e686      	b.n	800be46 <_printf_float+0xb6>
 800c138:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c13c:	f1ba 0f01 	cmp.w	sl, #1
 800c140:	dc01      	bgt.n	800c146 <_printf_float+0x3b6>
 800c142:	07db      	lsls	r3, r3, #31
 800c144:	d536      	bpl.n	800c1b4 <_printf_float+0x424>
 800c146:	2301      	movs	r3, #1
 800c148:	4642      	mov	r2, r8
 800c14a:	4631      	mov	r1, r6
 800c14c:	4628      	mov	r0, r5
 800c14e:	47b8      	blx	r7
 800c150:	3001      	adds	r0, #1
 800c152:	f43f ae78 	beq.w	800be46 <_printf_float+0xb6>
 800c156:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c15a:	4631      	mov	r1, r6
 800c15c:	4628      	mov	r0, r5
 800c15e:	47b8      	blx	r7
 800c160:	3001      	adds	r0, #1
 800c162:	f43f ae70 	beq.w	800be46 <_printf_float+0xb6>
 800c166:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c16a:	2200      	movs	r2, #0
 800c16c:	2300      	movs	r3, #0
 800c16e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c172:	f7f4 fcf9 	bl	8000b68 <__aeabi_dcmpeq>
 800c176:	b9c0      	cbnz	r0, 800c1aa <_printf_float+0x41a>
 800c178:	4653      	mov	r3, sl
 800c17a:	f108 0201 	add.w	r2, r8, #1
 800c17e:	4631      	mov	r1, r6
 800c180:	4628      	mov	r0, r5
 800c182:	47b8      	blx	r7
 800c184:	3001      	adds	r0, #1
 800c186:	d10c      	bne.n	800c1a2 <_printf_float+0x412>
 800c188:	e65d      	b.n	800be46 <_printf_float+0xb6>
 800c18a:	2301      	movs	r3, #1
 800c18c:	465a      	mov	r2, fp
 800c18e:	4631      	mov	r1, r6
 800c190:	4628      	mov	r0, r5
 800c192:	47b8      	blx	r7
 800c194:	3001      	adds	r0, #1
 800c196:	f43f ae56 	beq.w	800be46 <_printf_float+0xb6>
 800c19a:	f108 0801 	add.w	r8, r8, #1
 800c19e:	45d0      	cmp	r8, sl
 800c1a0:	dbf3      	blt.n	800c18a <_printf_float+0x3fa>
 800c1a2:	464b      	mov	r3, r9
 800c1a4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c1a8:	e6df      	b.n	800bf6a <_printf_float+0x1da>
 800c1aa:	f04f 0800 	mov.w	r8, #0
 800c1ae:	f104 0b1a 	add.w	fp, r4, #26
 800c1b2:	e7f4      	b.n	800c19e <_printf_float+0x40e>
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	4642      	mov	r2, r8
 800c1b8:	e7e1      	b.n	800c17e <_printf_float+0x3ee>
 800c1ba:	2301      	movs	r3, #1
 800c1bc:	464a      	mov	r2, r9
 800c1be:	4631      	mov	r1, r6
 800c1c0:	4628      	mov	r0, r5
 800c1c2:	47b8      	blx	r7
 800c1c4:	3001      	adds	r0, #1
 800c1c6:	f43f ae3e 	beq.w	800be46 <_printf_float+0xb6>
 800c1ca:	f108 0801 	add.w	r8, r8, #1
 800c1ce:	68e3      	ldr	r3, [r4, #12]
 800c1d0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c1d2:	1a5b      	subs	r3, r3, r1
 800c1d4:	4543      	cmp	r3, r8
 800c1d6:	dcf0      	bgt.n	800c1ba <_printf_float+0x42a>
 800c1d8:	e6fc      	b.n	800bfd4 <_printf_float+0x244>
 800c1da:	f04f 0800 	mov.w	r8, #0
 800c1de:	f104 0919 	add.w	r9, r4, #25
 800c1e2:	e7f4      	b.n	800c1ce <_printf_float+0x43e>

0800c1e4 <_printf_common>:
 800c1e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1e8:	4616      	mov	r6, r2
 800c1ea:	4698      	mov	r8, r3
 800c1ec:	688a      	ldr	r2, [r1, #8]
 800c1ee:	690b      	ldr	r3, [r1, #16]
 800c1f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c1f4:	4293      	cmp	r3, r2
 800c1f6:	bfb8      	it	lt
 800c1f8:	4613      	movlt	r3, r2
 800c1fa:	6033      	str	r3, [r6, #0]
 800c1fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c200:	4607      	mov	r7, r0
 800c202:	460c      	mov	r4, r1
 800c204:	b10a      	cbz	r2, 800c20a <_printf_common+0x26>
 800c206:	3301      	adds	r3, #1
 800c208:	6033      	str	r3, [r6, #0]
 800c20a:	6823      	ldr	r3, [r4, #0]
 800c20c:	0699      	lsls	r1, r3, #26
 800c20e:	bf42      	ittt	mi
 800c210:	6833      	ldrmi	r3, [r6, #0]
 800c212:	3302      	addmi	r3, #2
 800c214:	6033      	strmi	r3, [r6, #0]
 800c216:	6825      	ldr	r5, [r4, #0]
 800c218:	f015 0506 	ands.w	r5, r5, #6
 800c21c:	d106      	bne.n	800c22c <_printf_common+0x48>
 800c21e:	f104 0a19 	add.w	sl, r4, #25
 800c222:	68e3      	ldr	r3, [r4, #12]
 800c224:	6832      	ldr	r2, [r6, #0]
 800c226:	1a9b      	subs	r3, r3, r2
 800c228:	42ab      	cmp	r3, r5
 800c22a:	dc26      	bgt.n	800c27a <_printf_common+0x96>
 800c22c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c230:	6822      	ldr	r2, [r4, #0]
 800c232:	3b00      	subs	r3, #0
 800c234:	bf18      	it	ne
 800c236:	2301      	movne	r3, #1
 800c238:	0692      	lsls	r2, r2, #26
 800c23a:	d42b      	bmi.n	800c294 <_printf_common+0xb0>
 800c23c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c240:	4641      	mov	r1, r8
 800c242:	4638      	mov	r0, r7
 800c244:	47c8      	blx	r9
 800c246:	3001      	adds	r0, #1
 800c248:	d01e      	beq.n	800c288 <_printf_common+0xa4>
 800c24a:	6823      	ldr	r3, [r4, #0]
 800c24c:	6922      	ldr	r2, [r4, #16]
 800c24e:	f003 0306 	and.w	r3, r3, #6
 800c252:	2b04      	cmp	r3, #4
 800c254:	bf02      	ittt	eq
 800c256:	68e5      	ldreq	r5, [r4, #12]
 800c258:	6833      	ldreq	r3, [r6, #0]
 800c25a:	1aed      	subeq	r5, r5, r3
 800c25c:	68a3      	ldr	r3, [r4, #8]
 800c25e:	bf0c      	ite	eq
 800c260:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c264:	2500      	movne	r5, #0
 800c266:	4293      	cmp	r3, r2
 800c268:	bfc4      	itt	gt
 800c26a:	1a9b      	subgt	r3, r3, r2
 800c26c:	18ed      	addgt	r5, r5, r3
 800c26e:	2600      	movs	r6, #0
 800c270:	341a      	adds	r4, #26
 800c272:	42b5      	cmp	r5, r6
 800c274:	d11a      	bne.n	800c2ac <_printf_common+0xc8>
 800c276:	2000      	movs	r0, #0
 800c278:	e008      	b.n	800c28c <_printf_common+0xa8>
 800c27a:	2301      	movs	r3, #1
 800c27c:	4652      	mov	r2, sl
 800c27e:	4641      	mov	r1, r8
 800c280:	4638      	mov	r0, r7
 800c282:	47c8      	blx	r9
 800c284:	3001      	adds	r0, #1
 800c286:	d103      	bne.n	800c290 <_printf_common+0xac>
 800c288:	f04f 30ff 	mov.w	r0, #4294967295
 800c28c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c290:	3501      	adds	r5, #1
 800c292:	e7c6      	b.n	800c222 <_printf_common+0x3e>
 800c294:	18e1      	adds	r1, r4, r3
 800c296:	1c5a      	adds	r2, r3, #1
 800c298:	2030      	movs	r0, #48	@ 0x30
 800c29a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c29e:	4422      	add	r2, r4
 800c2a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c2a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c2a8:	3302      	adds	r3, #2
 800c2aa:	e7c7      	b.n	800c23c <_printf_common+0x58>
 800c2ac:	2301      	movs	r3, #1
 800c2ae:	4622      	mov	r2, r4
 800c2b0:	4641      	mov	r1, r8
 800c2b2:	4638      	mov	r0, r7
 800c2b4:	47c8      	blx	r9
 800c2b6:	3001      	adds	r0, #1
 800c2b8:	d0e6      	beq.n	800c288 <_printf_common+0xa4>
 800c2ba:	3601      	adds	r6, #1
 800c2bc:	e7d9      	b.n	800c272 <_printf_common+0x8e>
	...

0800c2c0 <_printf_i>:
 800c2c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c2c4:	7e0f      	ldrb	r7, [r1, #24]
 800c2c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800c2c8:	2f78      	cmp	r7, #120	@ 0x78
 800c2ca:	4691      	mov	r9, r2
 800c2cc:	4680      	mov	r8, r0
 800c2ce:	460c      	mov	r4, r1
 800c2d0:	469a      	mov	sl, r3
 800c2d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800c2d6:	d807      	bhi.n	800c2e8 <_printf_i+0x28>
 800c2d8:	2f62      	cmp	r7, #98	@ 0x62
 800c2da:	d80a      	bhi.n	800c2f2 <_printf_i+0x32>
 800c2dc:	2f00      	cmp	r7, #0
 800c2de:	f000 80d2 	beq.w	800c486 <_printf_i+0x1c6>
 800c2e2:	2f58      	cmp	r7, #88	@ 0x58
 800c2e4:	f000 80b9 	beq.w	800c45a <_printf_i+0x19a>
 800c2e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c2ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800c2f0:	e03a      	b.n	800c368 <_printf_i+0xa8>
 800c2f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800c2f6:	2b15      	cmp	r3, #21
 800c2f8:	d8f6      	bhi.n	800c2e8 <_printf_i+0x28>
 800c2fa:	a101      	add	r1, pc, #4	@ (adr r1, 800c300 <_printf_i+0x40>)
 800c2fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c300:	0800c359 	.word	0x0800c359
 800c304:	0800c36d 	.word	0x0800c36d
 800c308:	0800c2e9 	.word	0x0800c2e9
 800c30c:	0800c2e9 	.word	0x0800c2e9
 800c310:	0800c2e9 	.word	0x0800c2e9
 800c314:	0800c2e9 	.word	0x0800c2e9
 800c318:	0800c36d 	.word	0x0800c36d
 800c31c:	0800c2e9 	.word	0x0800c2e9
 800c320:	0800c2e9 	.word	0x0800c2e9
 800c324:	0800c2e9 	.word	0x0800c2e9
 800c328:	0800c2e9 	.word	0x0800c2e9
 800c32c:	0800c46d 	.word	0x0800c46d
 800c330:	0800c397 	.word	0x0800c397
 800c334:	0800c427 	.word	0x0800c427
 800c338:	0800c2e9 	.word	0x0800c2e9
 800c33c:	0800c2e9 	.word	0x0800c2e9
 800c340:	0800c48f 	.word	0x0800c48f
 800c344:	0800c2e9 	.word	0x0800c2e9
 800c348:	0800c397 	.word	0x0800c397
 800c34c:	0800c2e9 	.word	0x0800c2e9
 800c350:	0800c2e9 	.word	0x0800c2e9
 800c354:	0800c42f 	.word	0x0800c42f
 800c358:	6833      	ldr	r3, [r6, #0]
 800c35a:	1d1a      	adds	r2, r3, #4
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	6032      	str	r2, [r6, #0]
 800c360:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800c364:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800c368:	2301      	movs	r3, #1
 800c36a:	e09d      	b.n	800c4a8 <_printf_i+0x1e8>
 800c36c:	6833      	ldr	r3, [r6, #0]
 800c36e:	6820      	ldr	r0, [r4, #0]
 800c370:	1d19      	adds	r1, r3, #4
 800c372:	6031      	str	r1, [r6, #0]
 800c374:	0606      	lsls	r6, r0, #24
 800c376:	d501      	bpl.n	800c37c <_printf_i+0xbc>
 800c378:	681d      	ldr	r5, [r3, #0]
 800c37a:	e003      	b.n	800c384 <_printf_i+0xc4>
 800c37c:	0645      	lsls	r5, r0, #25
 800c37e:	d5fb      	bpl.n	800c378 <_printf_i+0xb8>
 800c380:	f9b3 5000 	ldrsh.w	r5, [r3]
 800c384:	2d00      	cmp	r5, #0
 800c386:	da03      	bge.n	800c390 <_printf_i+0xd0>
 800c388:	232d      	movs	r3, #45	@ 0x2d
 800c38a:	426d      	negs	r5, r5
 800c38c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c390:	4859      	ldr	r0, [pc, #356]	@ (800c4f8 <_printf_i+0x238>)
 800c392:	230a      	movs	r3, #10
 800c394:	e011      	b.n	800c3ba <_printf_i+0xfa>
 800c396:	6821      	ldr	r1, [r4, #0]
 800c398:	6833      	ldr	r3, [r6, #0]
 800c39a:	0608      	lsls	r0, r1, #24
 800c39c:	f853 5b04 	ldr.w	r5, [r3], #4
 800c3a0:	d402      	bmi.n	800c3a8 <_printf_i+0xe8>
 800c3a2:	0649      	lsls	r1, r1, #25
 800c3a4:	bf48      	it	mi
 800c3a6:	b2ad      	uxthmi	r5, r5
 800c3a8:	2f6f      	cmp	r7, #111	@ 0x6f
 800c3aa:	4853      	ldr	r0, [pc, #332]	@ (800c4f8 <_printf_i+0x238>)
 800c3ac:	6033      	str	r3, [r6, #0]
 800c3ae:	bf14      	ite	ne
 800c3b0:	230a      	movne	r3, #10
 800c3b2:	2308      	moveq	r3, #8
 800c3b4:	2100      	movs	r1, #0
 800c3b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800c3ba:	6866      	ldr	r6, [r4, #4]
 800c3bc:	60a6      	str	r6, [r4, #8]
 800c3be:	2e00      	cmp	r6, #0
 800c3c0:	bfa2      	ittt	ge
 800c3c2:	6821      	ldrge	r1, [r4, #0]
 800c3c4:	f021 0104 	bicge.w	r1, r1, #4
 800c3c8:	6021      	strge	r1, [r4, #0]
 800c3ca:	b90d      	cbnz	r5, 800c3d0 <_printf_i+0x110>
 800c3cc:	2e00      	cmp	r6, #0
 800c3ce:	d04b      	beq.n	800c468 <_printf_i+0x1a8>
 800c3d0:	4616      	mov	r6, r2
 800c3d2:	fbb5 f1f3 	udiv	r1, r5, r3
 800c3d6:	fb03 5711 	mls	r7, r3, r1, r5
 800c3da:	5dc7      	ldrb	r7, [r0, r7]
 800c3dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800c3e0:	462f      	mov	r7, r5
 800c3e2:	42bb      	cmp	r3, r7
 800c3e4:	460d      	mov	r5, r1
 800c3e6:	d9f4      	bls.n	800c3d2 <_printf_i+0x112>
 800c3e8:	2b08      	cmp	r3, #8
 800c3ea:	d10b      	bne.n	800c404 <_printf_i+0x144>
 800c3ec:	6823      	ldr	r3, [r4, #0]
 800c3ee:	07df      	lsls	r7, r3, #31
 800c3f0:	d508      	bpl.n	800c404 <_printf_i+0x144>
 800c3f2:	6923      	ldr	r3, [r4, #16]
 800c3f4:	6861      	ldr	r1, [r4, #4]
 800c3f6:	4299      	cmp	r1, r3
 800c3f8:	bfde      	ittt	le
 800c3fa:	2330      	movle	r3, #48	@ 0x30
 800c3fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 800c400:	f106 36ff 	addle.w	r6, r6, #4294967295
 800c404:	1b92      	subs	r2, r2, r6
 800c406:	6122      	str	r2, [r4, #16]
 800c408:	f8cd a000 	str.w	sl, [sp]
 800c40c:	464b      	mov	r3, r9
 800c40e:	aa03      	add	r2, sp, #12
 800c410:	4621      	mov	r1, r4
 800c412:	4640      	mov	r0, r8
 800c414:	f7ff fee6 	bl	800c1e4 <_printf_common>
 800c418:	3001      	adds	r0, #1
 800c41a:	d14a      	bne.n	800c4b2 <_printf_i+0x1f2>
 800c41c:	f04f 30ff 	mov.w	r0, #4294967295
 800c420:	b004      	add	sp, #16
 800c422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c426:	6823      	ldr	r3, [r4, #0]
 800c428:	f043 0320 	orr.w	r3, r3, #32
 800c42c:	6023      	str	r3, [r4, #0]
 800c42e:	4833      	ldr	r0, [pc, #204]	@ (800c4fc <_printf_i+0x23c>)
 800c430:	2778      	movs	r7, #120	@ 0x78
 800c432:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800c436:	6823      	ldr	r3, [r4, #0]
 800c438:	6831      	ldr	r1, [r6, #0]
 800c43a:	061f      	lsls	r7, r3, #24
 800c43c:	f851 5b04 	ldr.w	r5, [r1], #4
 800c440:	d402      	bmi.n	800c448 <_printf_i+0x188>
 800c442:	065f      	lsls	r7, r3, #25
 800c444:	bf48      	it	mi
 800c446:	b2ad      	uxthmi	r5, r5
 800c448:	6031      	str	r1, [r6, #0]
 800c44a:	07d9      	lsls	r1, r3, #31
 800c44c:	bf44      	itt	mi
 800c44e:	f043 0320 	orrmi.w	r3, r3, #32
 800c452:	6023      	strmi	r3, [r4, #0]
 800c454:	b11d      	cbz	r5, 800c45e <_printf_i+0x19e>
 800c456:	2310      	movs	r3, #16
 800c458:	e7ac      	b.n	800c3b4 <_printf_i+0xf4>
 800c45a:	4827      	ldr	r0, [pc, #156]	@ (800c4f8 <_printf_i+0x238>)
 800c45c:	e7e9      	b.n	800c432 <_printf_i+0x172>
 800c45e:	6823      	ldr	r3, [r4, #0]
 800c460:	f023 0320 	bic.w	r3, r3, #32
 800c464:	6023      	str	r3, [r4, #0]
 800c466:	e7f6      	b.n	800c456 <_printf_i+0x196>
 800c468:	4616      	mov	r6, r2
 800c46a:	e7bd      	b.n	800c3e8 <_printf_i+0x128>
 800c46c:	6833      	ldr	r3, [r6, #0]
 800c46e:	6825      	ldr	r5, [r4, #0]
 800c470:	6961      	ldr	r1, [r4, #20]
 800c472:	1d18      	adds	r0, r3, #4
 800c474:	6030      	str	r0, [r6, #0]
 800c476:	062e      	lsls	r6, r5, #24
 800c478:	681b      	ldr	r3, [r3, #0]
 800c47a:	d501      	bpl.n	800c480 <_printf_i+0x1c0>
 800c47c:	6019      	str	r1, [r3, #0]
 800c47e:	e002      	b.n	800c486 <_printf_i+0x1c6>
 800c480:	0668      	lsls	r0, r5, #25
 800c482:	d5fb      	bpl.n	800c47c <_printf_i+0x1bc>
 800c484:	8019      	strh	r1, [r3, #0]
 800c486:	2300      	movs	r3, #0
 800c488:	6123      	str	r3, [r4, #16]
 800c48a:	4616      	mov	r6, r2
 800c48c:	e7bc      	b.n	800c408 <_printf_i+0x148>
 800c48e:	6833      	ldr	r3, [r6, #0]
 800c490:	1d1a      	adds	r2, r3, #4
 800c492:	6032      	str	r2, [r6, #0]
 800c494:	681e      	ldr	r6, [r3, #0]
 800c496:	6862      	ldr	r2, [r4, #4]
 800c498:	2100      	movs	r1, #0
 800c49a:	4630      	mov	r0, r6
 800c49c:	f7f3 fee8 	bl	8000270 <memchr>
 800c4a0:	b108      	cbz	r0, 800c4a6 <_printf_i+0x1e6>
 800c4a2:	1b80      	subs	r0, r0, r6
 800c4a4:	6060      	str	r0, [r4, #4]
 800c4a6:	6863      	ldr	r3, [r4, #4]
 800c4a8:	6123      	str	r3, [r4, #16]
 800c4aa:	2300      	movs	r3, #0
 800c4ac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c4b0:	e7aa      	b.n	800c408 <_printf_i+0x148>
 800c4b2:	6923      	ldr	r3, [r4, #16]
 800c4b4:	4632      	mov	r2, r6
 800c4b6:	4649      	mov	r1, r9
 800c4b8:	4640      	mov	r0, r8
 800c4ba:	47d0      	blx	sl
 800c4bc:	3001      	adds	r0, #1
 800c4be:	d0ad      	beq.n	800c41c <_printf_i+0x15c>
 800c4c0:	6823      	ldr	r3, [r4, #0]
 800c4c2:	079b      	lsls	r3, r3, #30
 800c4c4:	d413      	bmi.n	800c4ee <_printf_i+0x22e>
 800c4c6:	68e0      	ldr	r0, [r4, #12]
 800c4c8:	9b03      	ldr	r3, [sp, #12]
 800c4ca:	4298      	cmp	r0, r3
 800c4cc:	bfb8      	it	lt
 800c4ce:	4618      	movlt	r0, r3
 800c4d0:	e7a6      	b.n	800c420 <_printf_i+0x160>
 800c4d2:	2301      	movs	r3, #1
 800c4d4:	4632      	mov	r2, r6
 800c4d6:	4649      	mov	r1, r9
 800c4d8:	4640      	mov	r0, r8
 800c4da:	47d0      	blx	sl
 800c4dc:	3001      	adds	r0, #1
 800c4de:	d09d      	beq.n	800c41c <_printf_i+0x15c>
 800c4e0:	3501      	adds	r5, #1
 800c4e2:	68e3      	ldr	r3, [r4, #12]
 800c4e4:	9903      	ldr	r1, [sp, #12]
 800c4e6:	1a5b      	subs	r3, r3, r1
 800c4e8:	42ab      	cmp	r3, r5
 800c4ea:	dcf2      	bgt.n	800c4d2 <_printf_i+0x212>
 800c4ec:	e7eb      	b.n	800c4c6 <_printf_i+0x206>
 800c4ee:	2500      	movs	r5, #0
 800c4f0:	f104 0619 	add.w	r6, r4, #25
 800c4f4:	e7f5      	b.n	800c4e2 <_printf_i+0x222>
 800c4f6:	bf00      	nop
 800c4f8:	0800fb68 	.word	0x0800fb68
 800c4fc:	0800fb79 	.word	0x0800fb79

0800c500 <std>:
 800c500:	2300      	movs	r3, #0
 800c502:	b510      	push	{r4, lr}
 800c504:	4604      	mov	r4, r0
 800c506:	e9c0 3300 	strd	r3, r3, [r0]
 800c50a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c50e:	6083      	str	r3, [r0, #8]
 800c510:	8181      	strh	r1, [r0, #12]
 800c512:	6643      	str	r3, [r0, #100]	@ 0x64
 800c514:	81c2      	strh	r2, [r0, #14]
 800c516:	6183      	str	r3, [r0, #24]
 800c518:	4619      	mov	r1, r3
 800c51a:	2208      	movs	r2, #8
 800c51c:	305c      	adds	r0, #92	@ 0x5c
 800c51e:	f000 f924 	bl	800c76a <memset>
 800c522:	4b0d      	ldr	r3, [pc, #52]	@ (800c558 <std+0x58>)
 800c524:	6263      	str	r3, [r4, #36]	@ 0x24
 800c526:	4b0d      	ldr	r3, [pc, #52]	@ (800c55c <std+0x5c>)
 800c528:	62a3      	str	r3, [r4, #40]	@ 0x28
 800c52a:	4b0d      	ldr	r3, [pc, #52]	@ (800c560 <std+0x60>)
 800c52c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800c52e:	4b0d      	ldr	r3, [pc, #52]	@ (800c564 <std+0x64>)
 800c530:	6323      	str	r3, [r4, #48]	@ 0x30
 800c532:	4b0d      	ldr	r3, [pc, #52]	@ (800c568 <std+0x68>)
 800c534:	6224      	str	r4, [r4, #32]
 800c536:	429c      	cmp	r4, r3
 800c538:	d006      	beq.n	800c548 <std+0x48>
 800c53a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800c53e:	4294      	cmp	r4, r2
 800c540:	d002      	beq.n	800c548 <std+0x48>
 800c542:	33d0      	adds	r3, #208	@ 0xd0
 800c544:	429c      	cmp	r4, r3
 800c546:	d105      	bne.n	800c554 <std+0x54>
 800c548:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800c54c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c550:	f000 b976 	b.w	800c840 <__retarget_lock_init_recursive>
 800c554:	bd10      	pop	{r4, pc}
 800c556:	bf00      	nop
 800c558:	0800c6c5 	.word	0x0800c6c5
 800c55c:	0800c6e7 	.word	0x0800c6e7
 800c560:	0800c71f 	.word	0x0800c71f
 800c564:	0800c743 	.word	0x0800c743
 800c568:	20013c3c 	.word	0x20013c3c

0800c56c <stdio_exit_handler>:
 800c56c:	4a02      	ldr	r2, [pc, #8]	@ (800c578 <stdio_exit_handler+0xc>)
 800c56e:	4903      	ldr	r1, [pc, #12]	@ (800c57c <stdio_exit_handler+0x10>)
 800c570:	4803      	ldr	r0, [pc, #12]	@ (800c580 <stdio_exit_handler+0x14>)
 800c572:	f000 b869 	b.w	800c648 <_fwalk_sglue>
 800c576:	bf00      	nop
 800c578:	20000014 	.word	0x20000014
 800c57c:	0800e1bd 	.word	0x0800e1bd
 800c580:	20000024 	.word	0x20000024

0800c584 <cleanup_stdio>:
 800c584:	6841      	ldr	r1, [r0, #4]
 800c586:	4b0c      	ldr	r3, [pc, #48]	@ (800c5b8 <cleanup_stdio+0x34>)
 800c588:	4299      	cmp	r1, r3
 800c58a:	b510      	push	{r4, lr}
 800c58c:	4604      	mov	r4, r0
 800c58e:	d001      	beq.n	800c594 <cleanup_stdio+0x10>
 800c590:	f001 fe14 	bl	800e1bc <_fflush_r>
 800c594:	68a1      	ldr	r1, [r4, #8]
 800c596:	4b09      	ldr	r3, [pc, #36]	@ (800c5bc <cleanup_stdio+0x38>)
 800c598:	4299      	cmp	r1, r3
 800c59a:	d002      	beq.n	800c5a2 <cleanup_stdio+0x1e>
 800c59c:	4620      	mov	r0, r4
 800c59e:	f001 fe0d 	bl	800e1bc <_fflush_r>
 800c5a2:	68e1      	ldr	r1, [r4, #12]
 800c5a4:	4b06      	ldr	r3, [pc, #24]	@ (800c5c0 <cleanup_stdio+0x3c>)
 800c5a6:	4299      	cmp	r1, r3
 800c5a8:	d004      	beq.n	800c5b4 <cleanup_stdio+0x30>
 800c5aa:	4620      	mov	r0, r4
 800c5ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5b0:	f001 be04 	b.w	800e1bc <_fflush_r>
 800c5b4:	bd10      	pop	{r4, pc}
 800c5b6:	bf00      	nop
 800c5b8:	20013c3c 	.word	0x20013c3c
 800c5bc:	20013ca4 	.word	0x20013ca4
 800c5c0:	20013d0c 	.word	0x20013d0c

0800c5c4 <global_stdio_init.part.0>:
 800c5c4:	b510      	push	{r4, lr}
 800c5c6:	4b0b      	ldr	r3, [pc, #44]	@ (800c5f4 <global_stdio_init.part.0+0x30>)
 800c5c8:	4c0b      	ldr	r4, [pc, #44]	@ (800c5f8 <global_stdio_init.part.0+0x34>)
 800c5ca:	4a0c      	ldr	r2, [pc, #48]	@ (800c5fc <global_stdio_init.part.0+0x38>)
 800c5cc:	601a      	str	r2, [r3, #0]
 800c5ce:	4620      	mov	r0, r4
 800c5d0:	2200      	movs	r2, #0
 800c5d2:	2104      	movs	r1, #4
 800c5d4:	f7ff ff94 	bl	800c500 <std>
 800c5d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800c5dc:	2201      	movs	r2, #1
 800c5de:	2109      	movs	r1, #9
 800c5e0:	f7ff ff8e 	bl	800c500 <std>
 800c5e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800c5e8:	2202      	movs	r2, #2
 800c5ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c5ee:	2112      	movs	r1, #18
 800c5f0:	f7ff bf86 	b.w	800c500 <std>
 800c5f4:	20013d74 	.word	0x20013d74
 800c5f8:	20013c3c 	.word	0x20013c3c
 800c5fc:	0800c56d 	.word	0x0800c56d

0800c600 <__sfp_lock_acquire>:
 800c600:	4801      	ldr	r0, [pc, #4]	@ (800c608 <__sfp_lock_acquire+0x8>)
 800c602:	f000 b91e 	b.w	800c842 <__retarget_lock_acquire_recursive>
 800c606:	bf00      	nop
 800c608:	20013d7d 	.word	0x20013d7d

0800c60c <__sfp_lock_release>:
 800c60c:	4801      	ldr	r0, [pc, #4]	@ (800c614 <__sfp_lock_release+0x8>)
 800c60e:	f000 b919 	b.w	800c844 <__retarget_lock_release_recursive>
 800c612:	bf00      	nop
 800c614:	20013d7d 	.word	0x20013d7d

0800c618 <__sinit>:
 800c618:	b510      	push	{r4, lr}
 800c61a:	4604      	mov	r4, r0
 800c61c:	f7ff fff0 	bl	800c600 <__sfp_lock_acquire>
 800c620:	6a23      	ldr	r3, [r4, #32]
 800c622:	b11b      	cbz	r3, 800c62c <__sinit+0x14>
 800c624:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c628:	f7ff bff0 	b.w	800c60c <__sfp_lock_release>
 800c62c:	4b04      	ldr	r3, [pc, #16]	@ (800c640 <__sinit+0x28>)
 800c62e:	6223      	str	r3, [r4, #32]
 800c630:	4b04      	ldr	r3, [pc, #16]	@ (800c644 <__sinit+0x2c>)
 800c632:	681b      	ldr	r3, [r3, #0]
 800c634:	2b00      	cmp	r3, #0
 800c636:	d1f5      	bne.n	800c624 <__sinit+0xc>
 800c638:	f7ff ffc4 	bl	800c5c4 <global_stdio_init.part.0>
 800c63c:	e7f2      	b.n	800c624 <__sinit+0xc>
 800c63e:	bf00      	nop
 800c640:	0800c585 	.word	0x0800c585
 800c644:	20013d74 	.word	0x20013d74

0800c648 <_fwalk_sglue>:
 800c648:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c64c:	4607      	mov	r7, r0
 800c64e:	4688      	mov	r8, r1
 800c650:	4614      	mov	r4, r2
 800c652:	2600      	movs	r6, #0
 800c654:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c658:	f1b9 0901 	subs.w	r9, r9, #1
 800c65c:	d505      	bpl.n	800c66a <_fwalk_sglue+0x22>
 800c65e:	6824      	ldr	r4, [r4, #0]
 800c660:	2c00      	cmp	r4, #0
 800c662:	d1f7      	bne.n	800c654 <_fwalk_sglue+0xc>
 800c664:	4630      	mov	r0, r6
 800c666:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c66a:	89ab      	ldrh	r3, [r5, #12]
 800c66c:	2b01      	cmp	r3, #1
 800c66e:	d907      	bls.n	800c680 <_fwalk_sglue+0x38>
 800c670:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c674:	3301      	adds	r3, #1
 800c676:	d003      	beq.n	800c680 <_fwalk_sglue+0x38>
 800c678:	4629      	mov	r1, r5
 800c67a:	4638      	mov	r0, r7
 800c67c:	47c0      	blx	r8
 800c67e:	4306      	orrs	r6, r0
 800c680:	3568      	adds	r5, #104	@ 0x68
 800c682:	e7e9      	b.n	800c658 <_fwalk_sglue+0x10>

0800c684 <siprintf>:
 800c684:	b40e      	push	{r1, r2, r3}
 800c686:	b500      	push	{lr}
 800c688:	b09c      	sub	sp, #112	@ 0x70
 800c68a:	ab1d      	add	r3, sp, #116	@ 0x74
 800c68c:	9002      	str	r0, [sp, #8]
 800c68e:	9006      	str	r0, [sp, #24]
 800c690:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800c694:	4809      	ldr	r0, [pc, #36]	@ (800c6bc <siprintf+0x38>)
 800c696:	9107      	str	r1, [sp, #28]
 800c698:	9104      	str	r1, [sp, #16]
 800c69a:	4909      	ldr	r1, [pc, #36]	@ (800c6c0 <siprintf+0x3c>)
 800c69c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6a0:	9105      	str	r1, [sp, #20]
 800c6a2:	6800      	ldr	r0, [r0, #0]
 800c6a4:	9301      	str	r3, [sp, #4]
 800c6a6:	a902      	add	r1, sp, #8
 800c6a8:	f001 fc08 	bl	800debc <_svfiprintf_r>
 800c6ac:	9b02      	ldr	r3, [sp, #8]
 800c6ae:	2200      	movs	r2, #0
 800c6b0:	701a      	strb	r2, [r3, #0]
 800c6b2:	b01c      	add	sp, #112	@ 0x70
 800c6b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6b8:	b003      	add	sp, #12
 800c6ba:	4770      	bx	lr
 800c6bc:	20000020 	.word	0x20000020
 800c6c0:	ffff0208 	.word	0xffff0208

0800c6c4 <__sread>:
 800c6c4:	b510      	push	{r4, lr}
 800c6c6:	460c      	mov	r4, r1
 800c6c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6cc:	f000 f87c 	bl	800c7c8 <_read_r>
 800c6d0:	2800      	cmp	r0, #0
 800c6d2:	bfab      	itete	ge
 800c6d4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800c6d6:	89a3      	ldrhlt	r3, [r4, #12]
 800c6d8:	181b      	addge	r3, r3, r0
 800c6da:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800c6de:	bfac      	ite	ge
 800c6e0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800c6e2:	81a3      	strhlt	r3, [r4, #12]
 800c6e4:	bd10      	pop	{r4, pc}

0800c6e6 <__swrite>:
 800c6e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6ea:	461f      	mov	r7, r3
 800c6ec:	898b      	ldrh	r3, [r1, #12]
 800c6ee:	05db      	lsls	r3, r3, #23
 800c6f0:	4605      	mov	r5, r0
 800c6f2:	460c      	mov	r4, r1
 800c6f4:	4616      	mov	r6, r2
 800c6f6:	d505      	bpl.n	800c704 <__swrite+0x1e>
 800c6f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c6fc:	2302      	movs	r3, #2
 800c6fe:	2200      	movs	r2, #0
 800c700:	f000 f850 	bl	800c7a4 <_lseek_r>
 800c704:	89a3      	ldrh	r3, [r4, #12]
 800c706:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c70a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c70e:	81a3      	strh	r3, [r4, #12]
 800c710:	4632      	mov	r2, r6
 800c712:	463b      	mov	r3, r7
 800c714:	4628      	mov	r0, r5
 800c716:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c71a:	f7ff ba89 	b.w	800bc30 <_write_r>

0800c71e <__sseek>:
 800c71e:	b510      	push	{r4, lr}
 800c720:	460c      	mov	r4, r1
 800c722:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c726:	f000 f83d 	bl	800c7a4 <_lseek_r>
 800c72a:	1c43      	adds	r3, r0, #1
 800c72c:	89a3      	ldrh	r3, [r4, #12]
 800c72e:	bf15      	itete	ne
 800c730:	6560      	strne	r0, [r4, #84]	@ 0x54
 800c732:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800c736:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800c73a:	81a3      	strheq	r3, [r4, #12]
 800c73c:	bf18      	it	ne
 800c73e:	81a3      	strhne	r3, [r4, #12]
 800c740:	bd10      	pop	{r4, pc}

0800c742 <__sclose>:
 800c742:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c746:	f000 b81d 	b.w	800c784 <_close_r>

0800c74a <memcmp>:
 800c74a:	b510      	push	{r4, lr}
 800c74c:	3901      	subs	r1, #1
 800c74e:	4402      	add	r2, r0
 800c750:	4290      	cmp	r0, r2
 800c752:	d101      	bne.n	800c758 <memcmp+0xe>
 800c754:	2000      	movs	r0, #0
 800c756:	e005      	b.n	800c764 <memcmp+0x1a>
 800c758:	7803      	ldrb	r3, [r0, #0]
 800c75a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800c75e:	42a3      	cmp	r3, r4
 800c760:	d001      	beq.n	800c766 <memcmp+0x1c>
 800c762:	1b18      	subs	r0, r3, r4
 800c764:	bd10      	pop	{r4, pc}
 800c766:	3001      	adds	r0, #1
 800c768:	e7f2      	b.n	800c750 <memcmp+0x6>

0800c76a <memset>:
 800c76a:	4402      	add	r2, r0
 800c76c:	4603      	mov	r3, r0
 800c76e:	4293      	cmp	r3, r2
 800c770:	d100      	bne.n	800c774 <memset+0xa>
 800c772:	4770      	bx	lr
 800c774:	f803 1b01 	strb.w	r1, [r3], #1
 800c778:	e7f9      	b.n	800c76e <memset+0x4>
	...

0800c77c <_localeconv_r>:
 800c77c:	4800      	ldr	r0, [pc, #0]	@ (800c780 <_localeconv_r+0x4>)
 800c77e:	4770      	bx	lr
 800c780:	20000160 	.word	0x20000160

0800c784 <_close_r>:
 800c784:	b538      	push	{r3, r4, r5, lr}
 800c786:	4d06      	ldr	r5, [pc, #24]	@ (800c7a0 <_close_r+0x1c>)
 800c788:	2300      	movs	r3, #0
 800c78a:	4604      	mov	r4, r0
 800c78c:	4608      	mov	r0, r1
 800c78e:	602b      	str	r3, [r5, #0]
 800c790:	f7f6 fa0c 	bl	8002bac <_close>
 800c794:	1c43      	adds	r3, r0, #1
 800c796:	d102      	bne.n	800c79e <_close_r+0x1a>
 800c798:	682b      	ldr	r3, [r5, #0]
 800c79a:	b103      	cbz	r3, 800c79e <_close_r+0x1a>
 800c79c:	6023      	str	r3, [r4, #0]
 800c79e:	bd38      	pop	{r3, r4, r5, pc}
 800c7a0:	20013d78 	.word	0x20013d78

0800c7a4 <_lseek_r>:
 800c7a4:	b538      	push	{r3, r4, r5, lr}
 800c7a6:	4d07      	ldr	r5, [pc, #28]	@ (800c7c4 <_lseek_r+0x20>)
 800c7a8:	4604      	mov	r4, r0
 800c7aa:	4608      	mov	r0, r1
 800c7ac:	4611      	mov	r1, r2
 800c7ae:	2200      	movs	r2, #0
 800c7b0:	602a      	str	r2, [r5, #0]
 800c7b2:	461a      	mov	r2, r3
 800c7b4:	f7f6 fa21 	bl	8002bfa <_lseek>
 800c7b8:	1c43      	adds	r3, r0, #1
 800c7ba:	d102      	bne.n	800c7c2 <_lseek_r+0x1e>
 800c7bc:	682b      	ldr	r3, [r5, #0]
 800c7be:	b103      	cbz	r3, 800c7c2 <_lseek_r+0x1e>
 800c7c0:	6023      	str	r3, [r4, #0]
 800c7c2:	bd38      	pop	{r3, r4, r5, pc}
 800c7c4:	20013d78 	.word	0x20013d78

0800c7c8 <_read_r>:
 800c7c8:	b538      	push	{r3, r4, r5, lr}
 800c7ca:	4d07      	ldr	r5, [pc, #28]	@ (800c7e8 <_read_r+0x20>)
 800c7cc:	4604      	mov	r4, r0
 800c7ce:	4608      	mov	r0, r1
 800c7d0:	4611      	mov	r1, r2
 800c7d2:	2200      	movs	r2, #0
 800c7d4:	602a      	str	r2, [r5, #0]
 800c7d6:	461a      	mov	r2, r3
 800c7d8:	f7f6 f9cb 	bl	8002b72 <_read>
 800c7dc:	1c43      	adds	r3, r0, #1
 800c7de:	d102      	bne.n	800c7e6 <_read_r+0x1e>
 800c7e0:	682b      	ldr	r3, [r5, #0]
 800c7e2:	b103      	cbz	r3, 800c7e6 <_read_r+0x1e>
 800c7e4:	6023      	str	r3, [r4, #0]
 800c7e6:	bd38      	pop	{r3, r4, r5, pc}
 800c7e8:	20013d78 	.word	0x20013d78

0800c7ec <__errno>:
 800c7ec:	4b01      	ldr	r3, [pc, #4]	@ (800c7f4 <__errno+0x8>)
 800c7ee:	6818      	ldr	r0, [r3, #0]
 800c7f0:	4770      	bx	lr
 800c7f2:	bf00      	nop
 800c7f4:	20000020 	.word	0x20000020

0800c7f8 <__libc_init_array>:
 800c7f8:	b570      	push	{r4, r5, r6, lr}
 800c7fa:	4d0d      	ldr	r5, [pc, #52]	@ (800c830 <__libc_init_array+0x38>)
 800c7fc:	4c0d      	ldr	r4, [pc, #52]	@ (800c834 <__libc_init_array+0x3c>)
 800c7fe:	1b64      	subs	r4, r4, r5
 800c800:	10a4      	asrs	r4, r4, #2
 800c802:	2600      	movs	r6, #0
 800c804:	42a6      	cmp	r6, r4
 800c806:	d109      	bne.n	800c81c <__libc_init_array+0x24>
 800c808:	4d0b      	ldr	r5, [pc, #44]	@ (800c838 <__libc_init_array+0x40>)
 800c80a:	4c0c      	ldr	r4, [pc, #48]	@ (800c83c <__libc_init_array+0x44>)
 800c80c:	f002 ffd4 	bl	800f7b8 <_init>
 800c810:	1b64      	subs	r4, r4, r5
 800c812:	10a4      	asrs	r4, r4, #2
 800c814:	2600      	movs	r6, #0
 800c816:	42a6      	cmp	r6, r4
 800c818:	d105      	bne.n	800c826 <__libc_init_array+0x2e>
 800c81a:	bd70      	pop	{r4, r5, r6, pc}
 800c81c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c820:	4798      	blx	r3
 800c822:	3601      	adds	r6, #1
 800c824:	e7ee      	b.n	800c804 <__libc_init_array+0xc>
 800c826:	f855 3b04 	ldr.w	r3, [r5], #4
 800c82a:	4798      	blx	r3
 800c82c:	3601      	adds	r6, #1
 800c82e:	e7f2      	b.n	800c816 <__libc_init_array+0x1e>
 800c830:	0800ff00 	.word	0x0800ff00
 800c834:	0800ff00 	.word	0x0800ff00
 800c838:	0800ff00 	.word	0x0800ff00
 800c83c:	0800ff04 	.word	0x0800ff04

0800c840 <__retarget_lock_init_recursive>:
 800c840:	4770      	bx	lr

0800c842 <__retarget_lock_acquire_recursive>:
 800c842:	4770      	bx	lr

0800c844 <__retarget_lock_release_recursive>:
 800c844:	4770      	bx	lr

0800c846 <memcpy>:
 800c846:	440a      	add	r2, r1
 800c848:	4291      	cmp	r1, r2
 800c84a:	f100 33ff 	add.w	r3, r0, #4294967295
 800c84e:	d100      	bne.n	800c852 <memcpy+0xc>
 800c850:	4770      	bx	lr
 800c852:	b510      	push	{r4, lr}
 800c854:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c858:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c85c:	4291      	cmp	r1, r2
 800c85e:	d1f9      	bne.n	800c854 <memcpy+0xe>
 800c860:	bd10      	pop	{r4, pc}

0800c862 <quorem>:
 800c862:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c866:	6903      	ldr	r3, [r0, #16]
 800c868:	690c      	ldr	r4, [r1, #16]
 800c86a:	42a3      	cmp	r3, r4
 800c86c:	4607      	mov	r7, r0
 800c86e:	db7e      	blt.n	800c96e <quorem+0x10c>
 800c870:	3c01      	subs	r4, #1
 800c872:	f101 0814 	add.w	r8, r1, #20
 800c876:	00a3      	lsls	r3, r4, #2
 800c878:	f100 0514 	add.w	r5, r0, #20
 800c87c:	9300      	str	r3, [sp, #0]
 800c87e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c882:	9301      	str	r3, [sp, #4]
 800c884:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c888:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c88c:	3301      	adds	r3, #1
 800c88e:	429a      	cmp	r2, r3
 800c890:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c894:	fbb2 f6f3 	udiv	r6, r2, r3
 800c898:	d32e      	bcc.n	800c8f8 <quorem+0x96>
 800c89a:	f04f 0a00 	mov.w	sl, #0
 800c89e:	46c4      	mov	ip, r8
 800c8a0:	46ae      	mov	lr, r5
 800c8a2:	46d3      	mov	fp, sl
 800c8a4:	f85c 3b04 	ldr.w	r3, [ip], #4
 800c8a8:	b298      	uxth	r0, r3
 800c8aa:	fb06 a000 	mla	r0, r6, r0, sl
 800c8ae:	0c02      	lsrs	r2, r0, #16
 800c8b0:	0c1b      	lsrs	r3, r3, #16
 800c8b2:	fb06 2303 	mla	r3, r6, r3, r2
 800c8b6:	f8de 2000 	ldr.w	r2, [lr]
 800c8ba:	b280      	uxth	r0, r0
 800c8bc:	b292      	uxth	r2, r2
 800c8be:	1a12      	subs	r2, r2, r0
 800c8c0:	445a      	add	r2, fp
 800c8c2:	f8de 0000 	ldr.w	r0, [lr]
 800c8c6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800c8ca:	b29b      	uxth	r3, r3
 800c8cc:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800c8d0:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800c8d4:	b292      	uxth	r2, r2
 800c8d6:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800c8da:	45e1      	cmp	r9, ip
 800c8dc:	f84e 2b04 	str.w	r2, [lr], #4
 800c8e0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800c8e4:	d2de      	bcs.n	800c8a4 <quorem+0x42>
 800c8e6:	9b00      	ldr	r3, [sp, #0]
 800c8e8:	58eb      	ldr	r3, [r5, r3]
 800c8ea:	b92b      	cbnz	r3, 800c8f8 <quorem+0x96>
 800c8ec:	9b01      	ldr	r3, [sp, #4]
 800c8ee:	3b04      	subs	r3, #4
 800c8f0:	429d      	cmp	r5, r3
 800c8f2:	461a      	mov	r2, r3
 800c8f4:	d32f      	bcc.n	800c956 <quorem+0xf4>
 800c8f6:	613c      	str	r4, [r7, #16]
 800c8f8:	4638      	mov	r0, r7
 800c8fa:	f001 f97b 	bl	800dbf4 <__mcmp>
 800c8fe:	2800      	cmp	r0, #0
 800c900:	db25      	blt.n	800c94e <quorem+0xec>
 800c902:	4629      	mov	r1, r5
 800c904:	2000      	movs	r0, #0
 800c906:	f858 2b04 	ldr.w	r2, [r8], #4
 800c90a:	f8d1 c000 	ldr.w	ip, [r1]
 800c90e:	fa1f fe82 	uxth.w	lr, r2
 800c912:	fa1f f38c 	uxth.w	r3, ip
 800c916:	eba3 030e 	sub.w	r3, r3, lr
 800c91a:	4403      	add	r3, r0
 800c91c:	0c12      	lsrs	r2, r2, #16
 800c91e:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800c922:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800c926:	b29b      	uxth	r3, r3
 800c928:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c92c:	45c1      	cmp	r9, r8
 800c92e:	f841 3b04 	str.w	r3, [r1], #4
 800c932:	ea4f 4022 	mov.w	r0, r2, asr #16
 800c936:	d2e6      	bcs.n	800c906 <quorem+0xa4>
 800c938:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c93c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c940:	b922      	cbnz	r2, 800c94c <quorem+0xea>
 800c942:	3b04      	subs	r3, #4
 800c944:	429d      	cmp	r5, r3
 800c946:	461a      	mov	r2, r3
 800c948:	d30b      	bcc.n	800c962 <quorem+0x100>
 800c94a:	613c      	str	r4, [r7, #16]
 800c94c:	3601      	adds	r6, #1
 800c94e:	4630      	mov	r0, r6
 800c950:	b003      	add	sp, #12
 800c952:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c956:	6812      	ldr	r2, [r2, #0]
 800c958:	3b04      	subs	r3, #4
 800c95a:	2a00      	cmp	r2, #0
 800c95c:	d1cb      	bne.n	800c8f6 <quorem+0x94>
 800c95e:	3c01      	subs	r4, #1
 800c960:	e7c6      	b.n	800c8f0 <quorem+0x8e>
 800c962:	6812      	ldr	r2, [r2, #0]
 800c964:	3b04      	subs	r3, #4
 800c966:	2a00      	cmp	r2, #0
 800c968:	d1ef      	bne.n	800c94a <quorem+0xe8>
 800c96a:	3c01      	subs	r4, #1
 800c96c:	e7ea      	b.n	800c944 <quorem+0xe2>
 800c96e:	2000      	movs	r0, #0
 800c970:	e7ee      	b.n	800c950 <quorem+0xee>
 800c972:	0000      	movs	r0, r0
 800c974:	0000      	movs	r0, r0
	...

0800c978 <_dtoa_r>:
 800c978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c97c:	69c7      	ldr	r7, [r0, #28]
 800c97e:	b099      	sub	sp, #100	@ 0x64
 800c980:	ed8d 0b02 	vstr	d0, [sp, #8]
 800c984:	ec55 4b10 	vmov	r4, r5, d0
 800c988:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800c98a:	9109      	str	r1, [sp, #36]	@ 0x24
 800c98c:	4683      	mov	fp, r0
 800c98e:	920e      	str	r2, [sp, #56]	@ 0x38
 800c990:	9313      	str	r3, [sp, #76]	@ 0x4c
 800c992:	b97f      	cbnz	r7, 800c9b4 <_dtoa_r+0x3c>
 800c994:	2010      	movs	r0, #16
 800c996:	f000 fdfd 	bl	800d594 <malloc>
 800c99a:	4602      	mov	r2, r0
 800c99c:	f8cb 001c 	str.w	r0, [fp, #28]
 800c9a0:	b920      	cbnz	r0, 800c9ac <_dtoa_r+0x34>
 800c9a2:	4ba7      	ldr	r3, [pc, #668]	@ (800cc40 <_dtoa_r+0x2c8>)
 800c9a4:	21ef      	movs	r1, #239	@ 0xef
 800c9a6:	48a7      	ldr	r0, [pc, #668]	@ (800cc44 <_dtoa_r+0x2cc>)
 800c9a8:	f001 fc5a 	bl	800e260 <__assert_func>
 800c9ac:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800c9b0:	6007      	str	r7, [r0, #0]
 800c9b2:	60c7      	str	r7, [r0, #12]
 800c9b4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c9b8:	6819      	ldr	r1, [r3, #0]
 800c9ba:	b159      	cbz	r1, 800c9d4 <_dtoa_r+0x5c>
 800c9bc:	685a      	ldr	r2, [r3, #4]
 800c9be:	604a      	str	r2, [r1, #4]
 800c9c0:	2301      	movs	r3, #1
 800c9c2:	4093      	lsls	r3, r2
 800c9c4:	608b      	str	r3, [r1, #8]
 800c9c6:	4658      	mov	r0, fp
 800c9c8:	f000 feda 	bl	800d780 <_Bfree>
 800c9cc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c9d0:	2200      	movs	r2, #0
 800c9d2:	601a      	str	r2, [r3, #0]
 800c9d4:	1e2b      	subs	r3, r5, #0
 800c9d6:	bfb9      	ittee	lt
 800c9d8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800c9dc:	9303      	strlt	r3, [sp, #12]
 800c9de:	2300      	movge	r3, #0
 800c9e0:	6033      	strge	r3, [r6, #0]
 800c9e2:	9f03      	ldr	r7, [sp, #12]
 800c9e4:	4b98      	ldr	r3, [pc, #608]	@ (800cc48 <_dtoa_r+0x2d0>)
 800c9e6:	bfbc      	itt	lt
 800c9e8:	2201      	movlt	r2, #1
 800c9ea:	6032      	strlt	r2, [r6, #0]
 800c9ec:	43bb      	bics	r3, r7
 800c9ee:	d112      	bne.n	800ca16 <_dtoa_r+0x9e>
 800c9f0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800c9f2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800c9f6:	6013      	str	r3, [r2, #0]
 800c9f8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c9fc:	4323      	orrs	r3, r4
 800c9fe:	f000 854d 	beq.w	800d49c <_dtoa_r+0xb24>
 800ca02:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ca04:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800cc5c <_dtoa_r+0x2e4>
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	f000 854f 	beq.w	800d4ac <_dtoa_r+0xb34>
 800ca0e:	f10a 0303 	add.w	r3, sl, #3
 800ca12:	f000 bd49 	b.w	800d4a8 <_dtoa_r+0xb30>
 800ca16:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	ec51 0b17 	vmov	r0, r1, d7
 800ca20:	2300      	movs	r3, #0
 800ca22:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800ca26:	f7f4 f89f 	bl	8000b68 <__aeabi_dcmpeq>
 800ca2a:	4680      	mov	r8, r0
 800ca2c:	b158      	cbz	r0, 800ca46 <_dtoa_r+0xce>
 800ca2e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ca30:	2301      	movs	r3, #1
 800ca32:	6013      	str	r3, [r2, #0]
 800ca34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ca36:	b113      	cbz	r3, 800ca3e <_dtoa_r+0xc6>
 800ca38:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800ca3a:	4b84      	ldr	r3, [pc, #528]	@ (800cc4c <_dtoa_r+0x2d4>)
 800ca3c:	6013      	str	r3, [r2, #0]
 800ca3e:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800cc60 <_dtoa_r+0x2e8>
 800ca42:	f000 bd33 	b.w	800d4ac <_dtoa_r+0xb34>
 800ca46:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800ca4a:	aa16      	add	r2, sp, #88	@ 0x58
 800ca4c:	a917      	add	r1, sp, #92	@ 0x5c
 800ca4e:	4658      	mov	r0, fp
 800ca50:	f001 f980 	bl	800dd54 <__d2b>
 800ca54:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800ca58:	4681      	mov	r9, r0
 800ca5a:	2e00      	cmp	r6, #0
 800ca5c:	d077      	beq.n	800cb4e <_dtoa_r+0x1d6>
 800ca5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ca60:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800ca64:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca68:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ca6c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800ca70:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800ca74:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800ca78:	4619      	mov	r1, r3
 800ca7a:	2200      	movs	r2, #0
 800ca7c:	4b74      	ldr	r3, [pc, #464]	@ (800cc50 <_dtoa_r+0x2d8>)
 800ca7e:	f7f3 fc53 	bl	8000328 <__aeabi_dsub>
 800ca82:	a369      	add	r3, pc, #420	@ (adr r3, 800cc28 <_dtoa_r+0x2b0>)
 800ca84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca88:	f7f3 fe06 	bl	8000698 <__aeabi_dmul>
 800ca8c:	a368      	add	r3, pc, #416	@ (adr r3, 800cc30 <_dtoa_r+0x2b8>)
 800ca8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ca92:	f7f3 fc4b 	bl	800032c <__adddf3>
 800ca96:	4604      	mov	r4, r0
 800ca98:	4630      	mov	r0, r6
 800ca9a:	460d      	mov	r5, r1
 800ca9c:	f7f3 fd92 	bl	80005c4 <__aeabi_i2d>
 800caa0:	a365      	add	r3, pc, #404	@ (adr r3, 800cc38 <_dtoa_r+0x2c0>)
 800caa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caa6:	f7f3 fdf7 	bl	8000698 <__aeabi_dmul>
 800caaa:	4602      	mov	r2, r0
 800caac:	460b      	mov	r3, r1
 800caae:	4620      	mov	r0, r4
 800cab0:	4629      	mov	r1, r5
 800cab2:	f7f3 fc3b 	bl	800032c <__adddf3>
 800cab6:	4604      	mov	r4, r0
 800cab8:	460d      	mov	r5, r1
 800caba:	f7f4 f89d 	bl	8000bf8 <__aeabi_d2iz>
 800cabe:	2200      	movs	r2, #0
 800cac0:	4607      	mov	r7, r0
 800cac2:	2300      	movs	r3, #0
 800cac4:	4620      	mov	r0, r4
 800cac6:	4629      	mov	r1, r5
 800cac8:	f7f4 f858 	bl	8000b7c <__aeabi_dcmplt>
 800cacc:	b140      	cbz	r0, 800cae0 <_dtoa_r+0x168>
 800cace:	4638      	mov	r0, r7
 800cad0:	f7f3 fd78 	bl	80005c4 <__aeabi_i2d>
 800cad4:	4622      	mov	r2, r4
 800cad6:	462b      	mov	r3, r5
 800cad8:	f7f4 f846 	bl	8000b68 <__aeabi_dcmpeq>
 800cadc:	b900      	cbnz	r0, 800cae0 <_dtoa_r+0x168>
 800cade:	3f01      	subs	r7, #1
 800cae0:	2f16      	cmp	r7, #22
 800cae2:	d851      	bhi.n	800cb88 <_dtoa_r+0x210>
 800cae4:	4b5b      	ldr	r3, [pc, #364]	@ (800cc54 <_dtoa_r+0x2dc>)
 800cae6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800caea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800caf2:	f7f4 f843 	bl	8000b7c <__aeabi_dcmplt>
 800caf6:	2800      	cmp	r0, #0
 800caf8:	d048      	beq.n	800cb8c <_dtoa_r+0x214>
 800cafa:	3f01      	subs	r7, #1
 800cafc:	2300      	movs	r3, #0
 800cafe:	9312      	str	r3, [sp, #72]	@ 0x48
 800cb00:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800cb02:	1b9b      	subs	r3, r3, r6
 800cb04:	1e5a      	subs	r2, r3, #1
 800cb06:	bf44      	itt	mi
 800cb08:	f1c3 0801 	rsbmi	r8, r3, #1
 800cb0c:	2300      	movmi	r3, #0
 800cb0e:	9208      	str	r2, [sp, #32]
 800cb10:	bf54      	ite	pl
 800cb12:	f04f 0800 	movpl.w	r8, #0
 800cb16:	9308      	strmi	r3, [sp, #32]
 800cb18:	2f00      	cmp	r7, #0
 800cb1a:	db39      	blt.n	800cb90 <_dtoa_r+0x218>
 800cb1c:	9b08      	ldr	r3, [sp, #32]
 800cb1e:	970f      	str	r7, [sp, #60]	@ 0x3c
 800cb20:	443b      	add	r3, r7
 800cb22:	9308      	str	r3, [sp, #32]
 800cb24:	2300      	movs	r3, #0
 800cb26:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb28:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb2a:	2b09      	cmp	r3, #9
 800cb2c:	d864      	bhi.n	800cbf8 <_dtoa_r+0x280>
 800cb2e:	2b05      	cmp	r3, #5
 800cb30:	bfc4      	itt	gt
 800cb32:	3b04      	subgt	r3, #4
 800cb34:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800cb36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cb38:	f1a3 0302 	sub.w	r3, r3, #2
 800cb3c:	bfcc      	ite	gt
 800cb3e:	2400      	movgt	r4, #0
 800cb40:	2401      	movle	r4, #1
 800cb42:	2b03      	cmp	r3, #3
 800cb44:	d863      	bhi.n	800cc0e <_dtoa_r+0x296>
 800cb46:	e8df f003 	tbb	[pc, r3]
 800cb4a:	372a      	.short	0x372a
 800cb4c:	5535      	.short	0x5535
 800cb4e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800cb52:	441e      	add	r6, r3
 800cb54:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800cb58:	2b20      	cmp	r3, #32
 800cb5a:	bfc1      	itttt	gt
 800cb5c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800cb60:	409f      	lslgt	r7, r3
 800cb62:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800cb66:	fa24 f303 	lsrgt.w	r3, r4, r3
 800cb6a:	bfd6      	itet	le
 800cb6c:	f1c3 0320 	rsble	r3, r3, #32
 800cb70:	ea47 0003 	orrgt.w	r0, r7, r3
 800cb74:	fa04 f003 	lslle.w	r0, r4, r3
 800cb78:	f7f3 fd14 	bl	80005a4 <__aeabi_ui2d>
 800cb7c:	2201      	movs	r2, #1
 800cb7e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800cb82:	3e01      	subs	r6, #1
 800cb84:	9214      	str	r2, [sp, #80]	@ 0x50
 800cb86:	e777      	b.n	800ca78 <_dtoa_r+0x100>
 800cb88:	2301      	movs	r3, #1
 800cb8a:	e7b8      	b.n	800cafe <_dtoa_r+0x186>
 800cb8c:	9012      	str	r0, [sp, #72]	@ 0x48
 800cb8e:	e7b7      	b.n	800cb00 <_dtoa_r+0x188>
 800cb90:	427b      	negs	r3, r7
 800cb92:	930a      	str	r3, [sp, #40]	@ 0x28
 800cb94:	2300      	movs	r3, #0
 800cb96:	eba8 0807 	sub.w	r8, r8, r7
 800cb9a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800cb9c:	e7c4      	b.n	800cb28 <_dtoa_r+0x1b0>
 800cb9e:	2300      	movs	r3, #0
 800cba0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cba2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	dc35      	bgt.n	800cc14 <_dtoa_r+0x29c>
 800cba8:	2301      	movs	r3, #1
 800cbaa:	9300      	str	r3, [sp, #0]
 800cbac:	9307      	str	r3, [sp, #28]
 800cbae:	461a      	mov	r2, r3
 800cbb0:	920e      	str	r2, [sp, #56]	@ 0x38
 800cbb2:	e00b      	b.n	800cbcc <_dtoa_r+0x254>
 800cbb4:	2301      	movs	r3, #1
 800cbb6:	e7f3      	b.n	800cba0 <_dtoa_r+0x228>
 800cbb8:	2300      	movs	r3, #0
 800cbba:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cbbc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cbbe:	18fb      	adds	r3, r7, r3
 800cbc0:	9300      	str	r3, [sp, #0]
 800cbc2:	3301      	adds	r3, #1
 800cbc4:	2b01      	cmp	r3, #1
 800cbc6:	9307      	str	r3, [sp, #28]
 800cbc8:	bfb8      	it	lt
 800cbca:	2301      	movlt	r3, #1
 800cbcc:	f8db 001c 	ldr.w	r0, [fp, #28]
 800cbd0:	2100      	movs	r1, #0
 800cbd2:	2204      	movs	r2, #4
 800cbd4:	f102 0514 	add.w	r5, r2, #20
 800cbd8:	429d      	cmp	r5, r3
 800cbda:	d91f      	bls.n	800cc1c <_dtoa_r+0x2a4>
 800cbdc:	6041      	str	r1, [r0, #4]
 800cbde:	4658      	mov	r0, fp
 800cbe0:	f000 fd8e 	bl	800d700 <_Balloc>
 800cbe4:	4682      	mov	sl, r0
 800cbe6:	2800      	cmp	r0, #0
 800cbe8:	d13c      	bne.n	800cc64 <_dtoa_r+0x2ec>
 800cbea:	4b1b      	ldr	r3, [pc, #108]	@ (800cc58 <_dtoa_r+0x2e0>)
 800cbec:	4602      	mov	r2, r0
 800cbee:	f240 11af 	movw	r1, #431	@ 0x1af
 800cbf2:	e6d8      	b.n	800c9a6 <_dtoa_r+0x2e>
 800cbf4:	2301      	movs	r3, #1
 800cbf6:	e7e0      	b.n	800cbba <_dtoa_r+0x242>
 800cbf8:	2401      	movs	r4, #1
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	9309      	str	r3, [sp, #36]	@ 0x24
 800cbfe:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cc00:	f04f 33ff 	mov.w	r3, #4294967295
 800cc04:	9300      	str	r3, [sp, #0]
 800cc06:	9307      	str	r3, [sp, #28]
 800cc08:	2200      	movs	r2, #0
 800cc0a:	2312      	movs	r3, #18
 800cc0c:	e7d0      	b.n	800cbb0 <_dtoa_r+0x238>
 800cc0e:	2301      	movs	r3, #1
 800cc10:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cc12:	e7f5      	b.n	800cc00 <_dtoa_r+0x288>
 800cc14:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cc16:	9300      	str	r3, [sp, #0]
 800cc18:	9307      	str	r3, [sp, #28]
 800cc1a:	e7d7      	b.n	800cbcc <_dtoa_r+0x254>
 800cc1c:	3101      	adds	r1, #1
 800cc1e:	0052      	lsls	r2, r2, #1
 800cc20:	e7d8      	b.n	800cbd4 <_dtoa_r+0x25c>
 800cc22:	bf00      	nop
 800cc24:	f3af 8000 	nop.w
 800cc28:	636f4361 	.word	0x636f4361
 800cc2c:	3fd287a7 	.word	0x3fd287a7
 800cc30:	8b60c8b3 	.word	0x8b60c8b3
 800cc34:	3fc68a28 	.word	0x3fc68a28
 800cc38:	509f79fb 	.word	0x509f79fb
 800cc3c:	3fd34413 	.word	0x3fd34413
 800cc40:	0800fb97 	.word	0x0800fb97
 800cc44:	0800fbae 	.word	0x0800fbae
 800cc48:	7ff00000 	.word	0x7ff00000
 800cc4c:	0800fb67 	.word	0x0800fb67
 800cc50:	3ff80000 	.word	0x3ff80000
 800cc54:	0800fca8 	.word	0x0800fca8
 800cc58:	0800fc06 	.word	0x0800fc06
 800cc5c:	0800fb93 	.word	0x0800fb93
 800cc60:	0800fb66 	.word	0x0800fb66
 800cc64:	f8db 301c 	ldr.w	r3, [fp, #28]
 800cc68:	6018      	str	r0, [r3, #0]
 800cc6a:	9b07      	ldr	r3, [sp, #28]
 800cc6c:	2b0e      	cmp	r3, #14
 800cc6e:	f200 80a4 	bhi.w	800cdba <_dtoa_r+0x442>
 800cc72:	2c00      	cmp	r4, #0
 800cc74:	f000 80a1 	beq.w	800cdba <_dtoa_r+0x442>
 800cc78:	2f00      	cmp	r7, #0
 800cc7a:	dd33      	ble.n	800cce4 <_dtoa_r+0x36c>
 800cc7c:	4bad      	ldr	r3, [pc, #692]	@ (800cf34 <_dtoa_r+0x5bc>)
 800cc7e:	f007 020f 	and.w	r2, r7, #15
 800cc82:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cc86:	ed93 7b00 	vldr	d7, [r3]
 800cc8a:	05f8      	lsls	r0, r7, #23
 800cc8c:	ed8d 7b04 	vstr	d7, [sp, #16]
 800cc90:	ea4f 1427 	mov.w	r4, r7, asr #4
 800cc94:	d516      	bpl.n	800ccc4 <_dtoa_r+0x34c>
 800cc96:	4ba8      	ldr	r3, [pc, #672]	@ (800cf38 <_dtoa_r+0x5c0>)
 800cc98:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800cc9c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cca0:	f7f3 fe24 	bl	80008ec <__aeabi_ddiv>
 800cca4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cca8:	f004 040f 	and.w	r4, r4, #15
 800ccac:	2603      	movs	r6, #3
 800ccae:	4da2      	ldr	r5, [pc, #648]	@ (800cf38 <_dtoa_r+0x5c0>)
 800ccb0:	b954      	cbnz	r4, 800ccc8 <_dtoa_r+0x350>
 800ccb2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ccb6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ccba:	f7f3 fe17 	bl	80008ec <__aeabi_ddiv>
 800ccbe:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ccc2:	e028      	b.n	800cd16 <_dtoa_r+0x39e>
 800ccc4:	2602      	movs	r6, #2
 800ccc6:	e7f2      	b.n	800ccae <_dtoa_r+0x336>
 800ccc8:	07e1      	lsls	r1, r4, #31
 800ccca:	d508      	bpl.n	800ccde <_dtoa_r+0x366>
 800cccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ccd0:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ccd4:	f7f3 fce0 	bl	8000698 <__aeabi_dmul>
 800ccd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ccdc:	3601      	adds	r6, #1
 800ccde:	1064      	asrs	r4, r4, #1
 800cce0:	3508      	adds	r5, #8
 800cce2:	e7e5      	b.n	800ccb0 <_dtoa_r+0x338>
 800cce4:	f000 80d2 	beq.w	800ce8c <_dtoa_r+0x514>
 800cce8:	427c      	negs	r4, r7
 800ccea:	4b92      	ldr	r3, [pc, #584]	@ (800cf34 <_dtoa_r+0x5bc>)
 800ccec:	4d92      	ldr	r5, [pc, #584]	@ (800cf38 <_dtoa_r+0x5c0>)
 800ccee:	f004 020f 	and.w	r2, r4, #15
 800ccf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ccf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ccfa:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ccfe:	f7f3 fccb 	bl	8000698 <__aeabi_dmul>
 800cd02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd06:	1124      	asrs	r4, r4, #4
 800cd08:	2300      	movs	r3, #0
 800cd0a:	2602      	movs	r6, #2
 800cd0c:	2c00      	cmp	r4, #0
 800cd0e:	f040 80b2 	bne.w	800ce76 <_dtoa_r+0x4fe>
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d1d3      	bne.n	800ccbe <_dtoa_r+0x346>
 800cd16:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800cd18:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	f000 80b7 	beq.w	800ce90 <_dtoa_r+0x518>
 800cd22:	4b86      	ldr	r3, [pc, #536]	@ (800cf3c <_dtoa_r+0x5c4>)
 800cd24:	2200      	movs	r2, #0
 800cd26:	4620      	mov	r0, r4
 800cd28:	4629      	mov	r1, r5
 800cd2a:	f7f3 ff27 	bl	8000b7c <__aeabi_dcmplt>
 800cd2e:	2800      	cmp	r0, #0
 800cd30:	f000 80ae 	beq.w	800ce90 <_dtoa_r+0x518>
 800cd34:	9b07      	ldr	r3, [sp, #28]
 800cd36:	2b00      	cmp	r3, #0
 800cd38:	f000 80aa 	beq.w	800ce90 <_dtoa_r+0x518>
 800cd3c:	9b00      	ldr	r3, [sp, #0]
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	dd37      	ble.n	800cdb2 <_dtoa_r+0x43a>
 800cd42:	1e7b      	subs	r3, r7, #1
 800cd44:	9304      	str	r3, [sp, #16]
 800cd46:	4620      	mov	r0, r4
 800cd48:	4b7d      	ldr	r3, [pc, #500]	@ (800cf40 <_dtoa_r+0x5c8>)
 800cd4a:	2200      	movs	r2, #0
 800cd4c:	4629      	mov	r1, r5
 800cd4e:	f7f3 fca3 	bl	8000698 <__aeabi_dmul>
 800cd52:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cd56:	9c00      	ldr	r4, [sp, #0]
 800cd58:	3601      	adds	r6, #1
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	f7f3 fc32 	bl	80005c4 <__aeabi_i2d>
 800cd60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cd64:	f7f3 fc98 	bl	8000698 <__aeabi_dmul>
 800cd68:	4b76      	ldr	r3, [pc, #472]	@ (800cf44 <_dtoa_r+0x5cc>)
 800cd6a:	2200      	movs	r2, #0
 800cd6c:	f7f3 fade 	bl	800032c <__adddf3>
 800cd70:	4605      	mov	r5, r0
 800cd72:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800cd76:	2c00      	cmp	r4, #0
 800cd78:	f040 808d 	bne.w	800ce96 <_dtoa_r+0x51e>
 800cd7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cd80:	4b71      	ldr	r3, [pc, #452]	@ (800cf48 <_dtoa_r+0x5d0>)
 800cd82:	2200      	movs	r2, #0
 800cd84:	f7f3 fad0 	bl	8000328 <__aeabi_dsub>
 800cd88:	4602      	mov	r2, r0
 800cd8a:	460b      	mov	r3, r1
 800cd8c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cd90:	462a      	mov	r2, r5
 800cd92:	4633      	mov	r3, r6
 800cd94:	f7f3 ff10 	bl	8000bb8 <__aeabi_dcmpgt>
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	f040 828b 	bne.w	800d2b4 <_dtoa_r+0x93c>
 800cd9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cda2:	462a      	mov	r2, r5
 800cda4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800cda8:	f7f3 fee8 	bl	8000b7c <__aeabi_dcmplt>
 800cdac:	2800      	cmp	r0, #0
 800cdae:	f040 8128 	bne.w	800d002 <_dtoa_r+0x68a>
 800cdb2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800cdb6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800cdba:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cdbc:	2b00      	cmp	r3, #0
 800cdbe:	f2c0 815a 	blt.w	800d076 <_dtoa_r+0x6fe>
 800cdc2:	2f0e      	cmp	r7, #14
 800cdc4:	f300 8157 	bgt.w	800d076 <_dtoa_r+0x6fe>
 800cdc8:	4b5a      	ldr	r3, [pc, #360]	@ (800cf34 <_dtoa_r+0x5bc>)
 800cdca:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800cdce:	ed93 7b00 	vldr	d7, [r3]
 800cdd2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cdd4:	2b00      	cmp	r3, #0
 800cdd6:	ed8d 7b00 	vstr	d7, [sp]
 800cdda:	da03      	bge.n	800cde4 <_dtoa_r+0x46c>
 800cddc:	9b07      	ldr	r3, [sp, #28]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	f340 8101 	ble.w	800cfe6 <_dtoa_r+0x66e>
 800cde4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800cde8:	4656      	mov	r6, sl
 800cdea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800cdee:	4620      	mov	r0, r4
 800cdf0:	4629      	mov	r1, r5
 800cdf2:	f7f3 fd7b 	bl	80008ec <__aeabi_ddiv>
 800cdf6:	f7f3 feff 	bl	8000bf8 <__aeabi_d2iz>
 800cdfa:	4680      	mov	r8, r0
 800cdfc:	f7f3 fbe2 	bl	80005c4 <__aeabi_i2d>
 800ce00:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce04:	f7f3 fc48 	bl	8000698 <__aeabi_dmul>
 800ce08:	4602      	mov	r2, r0
 800ce0a:	460b      	mov	r3, r1
 800ce0c:	4620      	mov	r0, r4
 800ce0e:	4629      	mov	r1, r5
 800ce10:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ce14:	f7f3 fa88 	bl	8000328 <__aeabi_dsub>
 800ce18:	f806 4b01 	strb.w	r4, [r6], #1
 800ce1c:	9d07      	ldr	r5, [sp, #28]
 800ce1e:	eba6 040a 	sub.w	r4, r6, sl
 800ce22:	42a5      	cmp	r5, r4
 800ce24:	4602      	mov	r2, r0
 800ce26:	460b      	mov	r3, r1
 800ce28:	f040 8117 	bne.w	800d05a <_dtoa_r+0x6e2>
 800ce2c:	f7f3 fa7e 	bl	800032c <__adddf3>
 800ce30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce34:	4604      	mov	r4, r0
 800ce36:	460d      	mov	r5, r1
 800ce38:	f7f3 febe 	bl	8000bb8 <__aeabi_dcmpgt>
 800ce3c:	2800      	cmp	r0, #0
 800ce3e:	f040 80f9 	bne.w	800d034 <_dtoa_r+0x6bc>
 800ce42:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ce46:	4620      	mov	r0, r4
 800ce48:	4629      	mov	r1, r5
 800ce4a:	f7f3 fe8d 	bl	8000b68 <__aeabi_dcmpeq>
 800ce4e:	b118      	cbz	r0, 800ce58 <_dtoa_r+0x4e0>
 800ce50:	f018 0f01 	tst.w	r8, #1
 800ce54:	f040 80ee 	bne.w	800d034 <_dtoa_r+0x6bc>
 800ce58:	4649      	mov	r1, r9
 800ce5a:	4658      	mov	r0, fp
 800ce5c:	f000 fc90 	bl	800d780 <_Bfree>
 800ce60:	2300      	movs	r3, #0
 800ce62:	7033      	strb	r3, [r6, #0]
 800ce64:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ce66:	3701      	adds	r7, #1
 800ce68:	601f      	str	r7, [r3, #0]
 800ce6a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	f000 831d 	beq.w	800d4ac <_dtoa_r+0xb34>
 800ce72:	601e      	str	r6, [r3, #0]
 800ce74:	e31a      	b.n	800d4ac <_dtoa_r+0xb34>
 800ce76:	07e2      	lsls	r2, r4, #31
 800ce78:	d505      	bpl.n	800ce86 <_dtoa_r+0x50e>
 800ce7a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ce7e:	f7f3 fc0b 	bl	8000698 <__aeabi_dmul>
 800ce82:	3601      	adds	r6, #1
 800ce84:	2301      	movs	r3, #1
 800ce86:	1064      	asrs	r4, r4, #1
 800ce88:	3508      	adds	r5, #8
 800ce8a:	e73f      	b.n	800cd0c <_dtoa_r+0x394>
 800ce8c:	2602      	movs	r6, #2
 800ce8e:	e742      	b.n	800cd16 <_dtoa_r+0x39e>
 800ce90:	9c07      	ldr	r4, [sp, #28]
 800ce92:	9704      	str	r7, [sp, #16]
 800ce94:	e761      	b.n	800cd5a <_dtoa_r+0x3e2>
 800ce96:	4b27      	ldr	r3, [pc, #156]	@ (800cf34 <_dtoa_r+0x5bc>)
 800ce98:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ce9a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ce9e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cea2:	4454      	add	r4, sl
 800cea4:	2900      	cmp	r1, #0
 800cea6:	d053      	beq.n	800cf50 <_dtoa_r+0x5d8>
 800cea8:	4928      	ldr	r1, [pc, #160]	@ (800cf4c <_dtoa_r+0x5d4>)
 800ceaa:	2000      	movs	r0, #0
 800ceac:	f7f3 fd1e 	bl	80008ec <__aeabi_ddiv>
 800ceb0:	4633      	mov	r3, r6
 800ceb2:	462a      	mov	r2, r5
 800ceb4:	f7f3 fa38 	bl	8000328 <__aeabi_dsub>
 800ceb8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cebc:	4656      	mov	r6, sl
 800cebe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cec2:	f7f3 fe99 	bl	8000bf8 <__aeabi_d2iz>
 800cec6:	4605      	mov	r5, r0
 800cec8:	f7f3 fb7c 	bl	80005c4 <__aeabi_i2d>
 800cecc:	4602      	mov	r2, r0
 800cece:	460b      	mov	r3, r1
 800ced0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ced4:	f7f3 fa28 	bl	8000328 <__aeabi_dsub>
 800ced8:	3530      	adds	r5, #48	@ 0x30
 800ceda:	4602      	mov	r2, r0
 800cedc:	460b      	mov	r3, r1
 800cede:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cee2:	f806 5b01 	strb.w	r5, [r6], #1
 800cee6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ceea:	f7f3 fe47 	bl	8000b7c <__aeabi_dcmplt>
 800ceee:	2800      	cmp	r0, #0
 800cef0:	d171      	bne.n	800cfd6 <_dtoa_r+0x65e>
 800cef2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cef6:	4911      	ldr	r1, [pc, #68]	@ (800cf3c <_dtoa_r+0x5c4>)
 800cef8:	2000      	movs	r0, #0
 800cefa:	f7f3 fa15 	bl	8000328 <__aeabi_dsub>
 800cefe:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cf02:	f7f3 fe3b 	bl	8000b7c <__aeabi_dcmplt>
 800cf06:	2800      	cmp	r0, #0
 800cf08:	f040 8095 	bne.w	800d036 <_dtoa_r+0x6be>
 800cf0c:	42a6      	cmp	r6, r4
 800cf0e:	f43f af50 	beq.w	800cdb2 <_dtoa_r+0x43a>
 800cf12:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cf16:	4b0a      	ldr	r3, [pc, #40]	@ (800cf40 <_dtoa_r+0x5c8>)
 800cf18:	2200      	movs	r2, #0
 800cf1a:	f7f3 fbbd 	bl	8000698 <__aeabi_dmul>
 800cf1e:	4b08      	ldr	r3, [pc, #32]	@ (800cf40 <_dtoa_r+0x5c8>)
 800cf20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cf24:	2200      	movs	r2, #0
 800cf26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf2a:	f7f3 fbb5 	bl	8000698 <__aeabi_dmul>
 800cf2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cf32:	e7c4      	b.n	800cebe <_dtoa_r+0x546>
 800cf34:	0800fca8 	.word	0x0800fca8
 800cf38:	0800fc80 	.word	0x0800fc80
 800cf3c:	3ff00000 	.word	0x3ff00000
 800cf40:	40240000 	.word	0x40240000
 800cf44:	401c0000 	.word	0x401c0000
 800cf48:	40140000 	.word	0x40140000
 800cf4c:	3fe00000 	.word	0x3fe00000
 800cf50:	4631      	mov	r1, r6
 800cf52:	4628      	mov	r0, r5
 800cf54:	f7f3 fba0 	bl	8000698 <__aeabi_dmul>
 800cf58:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800cf5c:	9415      	str	r4, [sp, #84]	@ 0x54
 800cf5e:	4656      	mov	r6, sl
 800cf60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf64:	f7f3 fe48 	bl	8000bf8 <__aeabi_d2iz>
 800cf68:	4605      	mov	r5, r0
 800cf6a:	f7f3 fb2b 	bl	80005c4 <__aeabi_i2d>
 800cf6e:	4602      	mov	r2, r0
 800cf70:	460b      	mov	r3, r1
 800cf72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cf76:	f7f3 f9d7 	bl	8000328 <__aeabi_dsub>
 800cf7a:	3530      	adds	r5, #48	@ 0x30
 800cf7c:	f806 5b01 	strb.w	r5, [r6], #1
 800cf80:	4602      	mov	r2, r0
 800cf82:	460b      	mov	r3, r1
 800cf84:	42a6      	cmp	r6, r4
 800cf86:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800cf8a:	f04f 0200 	mov.w	r2, #0
 800cf8e:	d124      	bne.n	800cfda <_dtoa_r+0x662>
 800cf90:	4bac      	ldr	r3, [pc, #688]	@ (800d244 <_dtoa_r+0x8cc>)
 800cf92:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800cf96:	f7f3 f9c9 	bl	800032c <__adddf3>
 800cf9a:	4602      	mov	r2, r0
 800cf9c:	460b      	mov	r3, r1
 800cf9e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfa2:	f7f3 fe09 	bl	8000bb8 <__aeabi_dcmpgt>
 800cfa6:	2800      	cmp	r0, #0
 800cfa8:	d145      	bne.n	800d036 <_dtoa_r+0x6be>
 800cfaa:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800cfae:	49a5      	ldr	r1, [pc, #660]	@ (800d244 <_dtoa_r+0x8cc>)
 800cfb0:	2000      	movs	r0, #0
 800cfb2:	f7f3 f9b9 	bl	8000328 <__aeabi_dsub>
 800cfb6:	4602      	mov	r2, r0
 800cfb8:	460b      	mov	r3, r1
 800cfba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfbe:	f7f3 fddd 	bl	8000b7c <__aeabi_dcmplt>
 800cfc2:	2800      	cmp	r0, #0
 800cfc4:	f43f aef5 	beq.w	800cdb2 <_dtoa_r+0x43a>
 800cfc8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800cfca:	1e73      	subs	r3, r6, #1
 800cfcc:	9315      	str	r3, [sp, #84]	@ 0x54
 800cfce:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cfd2:	2b30      	cmp	r3, #48	@ 0x30
 800cfd4:	d0f8      	beq.n	800cfc8 <_dtoa_r+0x650>
 800cfd6:	9f04      	ldr	r7, [sp, #16]
 800cfd8:	e73e      	b.n	800ce58 <_dtoa_r+0x4e0>
 800cfda:	4b9b      	ldr	r3, [pc, #620]	@ (800d248 <_dtoa_r+0x8d0>)
 800cfdc:	f7f3 fb5c 	bl	8000698 <__aeabi_dmul>
 800cfe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfe4:	e7bc      	b.n	800cf60 <_dtoa_r+0x5e8>
 800cfe6:	d10c      	bne.n	800d002 <_dtoa_r+0x68a>
 800cfe8:	4b98      	ldr	r3, [pc, #608]	@ (800d24c <_dtoa_r+0x8d4>)
 800cfea:	2200      	movs	r2, #0
 800cfec:	e9dd 0100 	ldrd	r0, r1, [sp]
 800cff0:	f7f3 fb52 	bl	8000698 <__aeabi_dmul>
 800cff4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800cff8:	f7f3 fdd4 	bl	8000ba4 <__aeabi_dcmpge>
 800cffc:	2800      	cmp	r0, #0
 800cffe:	f000 8157 	beq.w	800d2b0 <_dtoa_r+0x938>
 800d002:	2400      	movs	r4, #0
 800d004:	4625      	mov	r5, r4
 800d006:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800d008:	43db      	mvns	r3, r3
 800d00a:	9304      	str	r3, [sp, #16]
 800d00c:	4656      	mov	r6, sl
 800d00e:	2700      	movs	r7, #0
 800d010:	4621      	mov	r1, r4
 800d012:	4658      	mov	r0, fp
 800d014:	f000 fbb4 	bl	800d780 <_Bfree>
 800d018:	2d00      	cmp	r5, #0
 800d01a:	d0dc      	beq.n	800cfd6 <_dtoa_r+0x65e>
 800d01c:	b12f      	cbz	r7, 800d02a <_dtoa_r+0x6b2>
 800d01e:	42af      	cmp	r7, r5
 800d020:	d003      	beq.n	800d02a <_dtoa_r+0x6b2>
 800d022:	4639      	mov	r1, r7
 800d024:	4658      	mov	r0, fp
 800d026:	f000 fbab 	bl	800d780 <_Bfree>
 800d02a:	4629      	mov	r1, r5
 800d02c:	4658      	mov	r0, fp
 800d02e:	f000 fba7 	bl	800d780 <_Bfree>
 800d032:	e7d0      	b.n	800cfd6 <_dtoa_r+0x65e>
 800d034:	9704      	str	r7, [sp, #16]
 800d036:	4633      	mov	r3, r6
 800d038:	461e      	mov	r6, r3
 800d03a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d03e:	2a39      	cmp	r2, #57	@ 0x39
 800d040:	d107      	bne.n	800d052 <_dtoa_r+0x6da>
 800d042:	459a      	cmp	sl, r3
 800d044:	d1f8      	bne.n	800d038 <_dtoa_r+0x6c0>
 800d046:	9a04      	ldr	r2, [sp, #16]
 800d048:	3201      	adds	r2, #1
 800d04a:	9204      	str	r2, [sp, #16]
 800d04c:	2230      	movs	r2, #48	@ 0x30
 800d04e:	f88a 2000 	strb.w	r2, [sl]
 800d052:	781a      	ldrb	r2, [r3, #0]
 800d054:	3201      	adds	r2, #1
 800d056:	701a      	strb	r2, [r3, #0]
 800d058:	e7bd      	b.n	800cfd6 <_dtoa_r+0x65e>
 800d05a:	4b7b      	ldr	r3, [pc, #492]	@ (800d248 <_dtoa_r+0x8d0>)
 800d05c:	2200      	movs	r2, #0
 800d05e:	f7f3 fb1b 	bl	8000698 <__aeabi_dmul>
 800d062:	2200      	movs	r2, #0
 800d064:	2300      	movs	r3, #0
 800d066:	4604      	mov	r4, r0
 800d068:	460d      	mov	r5, r1
 800d06a:	f7f3 fd7d 	bl	8000b68 <__aeabi_dcmpeq>
 800d06e:	2800      	cmp	r0, #0
 800d070:	f43f aebb 	beq.w	800cdea <_dtoa_r+0x472>
 800d074:	e6f0      	b.n	800ce58 <_dtoa_r+0x4e0>
 800d076:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800d078:	2a00      	cmp	r2, #0
 800d07a:	f000 80db 	beq.w	800d234 <_dtoa_r+0x8bc>
 800d07e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d080:	2a01      	cmp	r2, #1
 800d082:	f300 80bf 	bgt.w	800d204 <_dtoa_r+0x88c>
 800d086:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800d088:	2a00      	cmp	r2, #0
 800d08a:	f000 80b7 	beq.w	800d1fc <_dtoa_r+0x884>
 800d08e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800d092:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d094:	4646      	mov	r6, r8
 800d096:	9a08      	ldr	r2, [sp, #32]
 800d098:	2101      	movs	r1, #1
 800d09a:	441a      	add	r2, r3
 800d09c:	4658      	mov	r0, fp
 800d09e:	4498      	add	r8, r3
 800d0a0:	9208      	str	r2, [sp, #32]
 800d0a2:	f000 fc21 	bl	800d8e8 <__i2b>
 800d0a6:	4605      	mov	r5, r0
 800d0a8:	b15e      	cbz	r6, 800d0c2 <_dtoa_r+0x74a>
 800d0aa:	9b08      	ldr	r3, [sp, #32]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	dd08      	ble.n	800d0c2 <_dtoa_r+0x74a>
 800d0b0:	42b3      	cmp	r3, r6
 800d0b2:	9a08      	ldr	r2, [sp, #32]
 800d0b4:	bfa8      	it	ge
 800d0b6:	4633      	movge	r3, r6
 800d0b8:	eba8 0803 	sub.w	r8, r8, r3
 800d0bc:	1af6      	subs	r6, r6, r3
 800d0be:	1ad3      	subs	r3, r2, r3
 800d0c0:	9308      	str	r3, [sp, #32]
 800d0c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0c4:	b1f3      	cbz	r3, 800d104 <_dtoa_r+0x78c>
 800d0c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	f000 80b7 	beq.w	800d23c <_dtoa_r+0x8c4>
 800d0ce:	b18c      	cbz	r4, 800d0f4 <_dtoa_r+0x77c>
 800d0d0:	4629      	mov	r1, r5
 800d0d2:	4622      	mov	r2, r4
 800d0d4:	4658      	mov	r0, fp
 800d0d6:	f000 fcc7 	bl	800da68 <__pow5mult>
 800d0da:	464a      	mov	r2, r9
 800d0dc:	4601      	mov	r1, r0
 800d0de:	4605      	mov	r5, r0
 800d0e0:	4658      	mov	r0, fp
 800d0e2:	f000 fc17 	bl	800d914 <__multiply>
 800d0e6:	4649      	mov	r1, r9
 800d0e8:	9004      	str	r0, [sp, #16]
 800d0ea:	4658      	mov	r0, fp
 800d0ec:	f000 fb48 	bl	800d780 <_Bfree>
 800d0f0:	9b04      	ldr	r3, [sp, #16]
 800d0f2:	4699      	mov	r9, r3
 800d0f4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d0f6:	1b1a      	subs	r2, r3, r4
 800d0f8:	d004      	beq.n	800d104 <_dtoa_r+0x78c>
 800d0fa:	4649      	mov	r1, r9
 800d0fc:	4658      	mov	r0, fp
 800d0fe:	f000 fcb3 	bl	800da68 <__pow5mult>
 800d102:	4681      	mov	r9, r0
 800d104:	2101      	movs	r1, #1
 800d106:	4658      	mov	r0, fp
 800d108:	f000 fbee 	bl	800d8e8 <__i2b>
 800d10c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d10e:	4604      	mov	r4, r0
 800d110:	2b00      	cmp	r3, #0
 800d112:	f000 81cf 	beq.w	800d4b4 <_dtoa_r+0xb3c>
 800d116:	461a      	mov	r2, r3
 800d118:	4601      	mov	r1, r0
 800d11a:	4658      	mov	r0, fp
 800d11c:	f000 fca4 	bl	800da68 <__pow5mult>
 800d120:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d122:	2b01      	cmp	r3, #1
 800d124:	4604      	mov	r4, r0
 800d126:	f300 8095 	bgt.w	800d254 <_dtoa_r+0x8dc>
 800d12a:	9b02      	ldr	r3, [sp, #8]
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	f040 8087 	bne.w	800d240 <_dtoa_r+0x8c8>
 800d132:	9b03      	ldr	r3, [sp, #12]
 800d134:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d138:	2b00      	cmp	r3, #0
 800d13a:	f040 8089 	bne.w	800d250 <_dtoa_r+0x8d8>
 800d13e:	9b03      	ldr	r3, [sp, #12]
 800d140:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800d144:	0d1b      	lsrs	r3, r3, #20
 800d146:	051b      	lsls	r3, r3, #20
 800d148:	b12b      	cbz	r3, 800d156 <_dtoa_r+0x7de>
 800d14a:	9b08      	ldr	r3, [sp, #32]
 800d14c:	3301      	adds	r3, #1
 800d14e:	9308      	str	r3, [sp, #32]
 800d150:	f108 0801 	add.w	r8, r8, #1
 800d154:	2301      	movs	r3, #1
 800d156:	930a      	str	r3, [sp, #40]	@ 0x28
 800d158:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	f000 81b0 	beq.w	800d4c0 <_dtoa_r+0xb48>
 800d160:	6923      	ldr	r3, [r4, #16]
 800d162:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800d166:	6918      	ldr	r0, [r3, #16]
 800d168:	f000 fb72 	bl	800d850 <__hi0bits>
 800d16c:	f1c0 0020 	rsb	r0, r0, #32
 800d170:	9b08      	ldr	r3, [sp, #32]
 800d172:	4418      	add	r0, r3
 800d174:	f010 001f 	ands.w	r0, r0, #31
 800d178:	d077      	beq.n	800d26a <_dtoa_r+0x8f2>
 800d17a:	f1c0 0320 	rsb	r3, r0, #32
 800d17e:	2b04      	cmp	r3, #4
 800d180:	dd6b      	ble.n	800d25a <_dtoa_r+0x8e2>
 800d182:	9b08      	ldr	r3, [sp, #32]
 800d184:	f1c0 001c 	rsb	r0, r0, #28
 800d188:	4403      	add	r3, r0
 800d18a:	4480      	add	r8, r0
 800d18c:	4406      	add	r6, r0
 800d18e:	9308      	str	r3, [sp, #32]
 800d190:	f1b8 0f00 	cmp.w	r8, #0
 800d194:	dd05      	ble.n	800d1a2 <_dtoa_r+0x82a>
 800d196:	4649      	mov	r1, r9
 800d198:	4642      	mov	r2, r8
 800d19a:	4658      	mov	r0, fp
 800d19c:	f000 fcbe 	bl	800db1c <__lshift>
 800d1a0:	4681      	mov	r9, r0
 800d1a2:	9b08      	ldr	r3, [sp, #32]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	dd05      	ble.n	800d1b4 <_dtoa_r+0x83c>
 800d1a8:	4621      	mov	r1, r4
 800d1aa:	461a      	mov	r2, r3
 800d1ac:	4658      	mov	r0, fp
 800d1ae:	f000 fcb5 	bl	800db1c <__lshift>
 800d1b2:	4604      	mov	r4, r0
 800d1b4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d059      	beq.n	800d26e <_dtoa_r+0x8f6>
 800d1ba:	4621      	mov	r1, r4
 800d1bc:	4648      	mov	r0, r9
 800d1be:	f000 fd19 	bl	800dbf4 <__mcmp>
 800d1c2:	2800      	cmp	r0, #0
 800d1c4:	da53      	bge.n	800d26e <_dtoa_r+0x8f6>
 800d1c6:	1e7b      	subs	r3, r7, #1
 800d1c8:	9304      	str	r3, [sp, #16]
 800d1ca:	4649      	mov	r1, r9
 800d1cc:	2300      	movs	r3, #0
 800d1ce:	220a      	movs	r2, #10
 800d1d0:	4658      	mov	r0, fp
 800d1d2:	f000 faf7 	bl	800d7c4 <__multadd>
 800d1d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d1d8:	4681      	mov	r9, r0
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	f000 8172 	beq.w	800d4c4 <_dtoa_r+0xb4c>
 800d1e0:	2300      	movs	r3, #0
 800d1e2:	4629      	mov	r1, r5
 800d1e4:	220a      	movs	r2, #10
 800d1e6:	4658      	mov	r0, fp
 800d1e8:	f000 faec 	bl	800d7c4 <__multadd>
 800d1ec:	9b00      	ldr	r3, [sp, #0]
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	4605      	mov	r5, r0
 800d1f2:	dc67      	bgt.n	800d2c4 <_dtoa_r+0x94c>
 800d1f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1f6:	2b02      	cmp	r3, #2
 800d1f8:	dc41      	bgt.n	800d27e <_dtoa_r+0x906>
 800d1fa:	e063      	b.n	800d2c4 <_dtoa_r+0x94c>
 800d1fc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800d1fe:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800d202:	e746      	b.n	800d092 <_dtoa_r+0x71a>
 800d204:	9b07      	ldr	r3, [sp, #28]
 800d206:	1e5c      	subs	r4, r3, #1
 800d208:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d20a:	42a3      	cmp	r3, r4
 800d20c:	bfbf      	itttt	lt
 800d20e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800d210:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800d212:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800d214:	1ae3      	sublt	r3, r4, r3
 800d216:	bfb4      	ite	lt
 800d218:	18d2      	addlt	r2, r2, r3
 800d21a:	1b1c      	subge	r4, r3, r4
 800d21c:	9b07      	ldr	r3, [sp, #28]
 800d21e:	bfbc      	itt	lt
 800d220:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800d222:	2400      	movlt	r4, #0
 800d224:	2b00      	cmp	r3, #0
 800d226:	bfb5      	itete	lt
 800d228:	eba8 0603 	sublt.w	r6, r8, r3
 800d22c:	9b07      	ldrge	r3, [sp, #28]
 800d22e:	2300      	movlt	r3, #0
 800d230:	4646      	movge	r6, r8
 800d232:	e730      	b.n	800d096 <_dtoa_r+0x71e>
 800d234:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800d236:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800d238:	4646      	mov	r6, r8
 800d23a:	e735      	b.n	800d0a8 <_dtoa_r+0x730>
 800d23c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d23e:	e75c      	b.n	800d0fa <_dtoa_r+0x782>
 800d240:	2300      	movs	r3, #0
 800d242:	e788      	b.n	800d156 <_dtoa_r+0x7de>
 800d244:	3fe00000 	.word	0x3fe00000
 800d248:	40240000 	.word	0x40240000
 800d24c:	40140000 	.word	0x40140000
 800d250:	9b02      	ldr	r3, [sp, #8]
 800d252:	e780      	b.n	800d156 <_dtoa_r+0x7de>
 800d254:	2300      	movs	r3, #0
 800d256:	930a      	str	r3, [sp, #40]	@ 0x28
 800d258:	e782      	b.n	800d160 <_dtoa_r+0x7e8>
 800d25a:	d099      	beq.n	800d190 <_dtoa_r+0x818>
 800d25c:	9a08      	ldr	r2, [sp, #32]
 800d25e:	331c      	adds	r3, #28
 800d260:	441a      	add	r2, r3
 800d262:	4498      	add	r8, r3
 800d264:	441e      	add	r6, r3
 800d266:	9208      	str	r2, [sp, #32]
 800d268:	e792      	b.n	800d190 <_dtoa_r+0x818>
 800d26a:	4603      	mov	r3, r0
 800d26c:	e7f6      	b.n	800d25c <_dtoa_r+0x8e4>
 800d26e:	9b07      	ldr	r3, [sp, #28]
 800d270:	9704      	str	r7, [sp, #16]
 800d272:	2b00      	cmp	r3, #0
 800d274:	dc20      	bgt.n	800d2b8 <_dtoa_r+0x940>
 800d276:	9300      	str	r3, [sp, #0]
 800d278:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d27a:	2b02      	cmp	r3, #2
 800d27c:	dd1e      	ble.n	800d2bc <_dtoa_r+0x944>
 800d27e:	9b00      	ldr	r3, [sp, #0]
 800d280:	2b00      	cmp	r3, #0
 800d282:	f47f aec0 	bne.w	800d006 <_dtoa_r+0x68e>
 800d286:	4621      	mov	r1, r4
 800d288:	2205      	movs	r2, #5
 800d28a:	4658      	mov	r0, fp
 800d28c:	f000 fa9a 	bl	800d7c4 <__multadd>
 800d290:	4601      	mov	r1, r0
 800d292:	4604      	mov	r4, r0
 800d294:	4648      	mov	r0, r9
 800d296:	f000 fcad 	bl	800dbf4 <__mcmp>
 800d29a:	2800      	cmp	r0, #0
 800d29c:	f77f aeb3 	ble.w	800d006 <_dtoa_r+0x68e>
 800d2a0:	4656      	mov	r6, sl
 800d2a2:	2331      	movs	r3, #49	@ 0x31
 800d2a4:	f806 3b01 	strb.w	r3, [r6], #1
 800d2a8:	9b04      	ldr	r3, [sp, #16]
 800d2aa:	3301      	adds	r3, #1
 800d2ac:	9304      	str	r3, [sp, #16]
 800d2ae:	e6ae      	b.n	800d00e <_dtoa_r+0x696>
 800d2b0:	9c07      	ldr	r4, [sp, #28]
 800d2b2:	9704      	str	r7, [sp, #16]
 800d2b4:	4625      	mov	r5, r4
 800d2b6:	e7f3      	b.n	800d2a0 <_dtoa_r+0x928>
 800d2b8:	9b07      	ldr	r3, [sp, #28]
 800d2ba:	9300      	str	r3, [sp, #0]
 800d2bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d2be:	2b00      	cmp	r3, #0
 800d2c0:	f000 8104 	beq.w	800d4cc <_dtoa_r+0xb54>
 800d2c4:	2e00      	cmp	r6, #0
 800d2c6:	dd05      	ble.n	800d2d4 <_dtoa_r+0x95c>
 800d2c8:	4629      	mov	r1, r5
 800d2ca:	4632      	mov	r2, r6
 800d2cc:	4658      	mov	r0, fp
 800d2ce:	f000 fc25 	bl	800db1c <__lshift>
 800d2d2:	4605      	mov	r5, r0
 800d2d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d05a      	beq.n	800d390 <_dtoa_r+0xa18>
 800d2da:	6869      	ldr	r1, [r5, #4]
 800d2dc:	4658      	mov	r0, fp
 800d2de:	f000 fa0f 	bl	800d700 <_Balloc>
 800d2e2:	4606      	mov	r6, r0
 800d2e4:	b928      	cbnz	r0, 800d2f2 <_dtoa_r+0x97a>
 800d2e6:	4b84      	ldr	r3, [pc, #528]	@ (800d4f8 <_dtoa_r+0xb80>)
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800d2ee:	f7ff bb5a 	b.w	800c9a6 <_dtoa_r+0x2e>
 800d2f2:	692a      	ldr	r2, [r5, #16]
 800d2f4:	3202      	adds	r2, #2
 800d2f6:	0092      	lsls	r2, r2, #2
 800d2f8:	f105 010c 	add.w	r1, r5, #12
 800d2fc:	300c      	adds	r0, #12
 800d2fe:	f7ff faa2 	bl	800c846 <memcpy>
 800d302:	2201      	movs	r2, #1
 800d304:	4631      	mov	r1, r6
 800d306:	4658      	mov	r0, fp
 800d308:	f000 fc08 	bl	800db1c <__lshift>
 800d30c:	f10a 0301 	add.w	r3, sl, #1
 800d310:	9307      	str	r3, [sp, #28]
 800d312:	9b00      	ldr	r3, [sp, #0]
 800d314:	4453      	add	r3, sl
 800d316:	930b      	str	r3, [sp, #44]	@ 0x2c
 800d318:	9b02      	ldr	r3, [sp, #8]
 800d31a:	f003 0301 	and.w	r3, r3, #1
 800d31e:	462f      	mov	r7, r5
 800d320:	930a      	str	r3, [sp, #40]	@ 0x28
 800d322:	4605      	mov	r5, r0
 800d324:	9b07      	ldr	r3, [sp, #28]
 800d326:	4621      	mov	r1, r4
 800d328:	3b01      	subs	r3, #1
 800d32a:	4648      	mov	r0, r9
 800d32c:	9300      	str	r3, [sp, #0]
 800d32e:	f7ff fa98 	bl	800c862 <quorem>
 800d332:	4639      	mov	r1, r7
 800d334:	9002      	str	r0, [sp, #8]
 800d336:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d33a:	4648      	mov	r0, r9
 800d33c:	f000 fc5a 	bl	800dbf4 <__mcmp>
 800d340:	462a      	mov	r2, r5
 800d342:	9008      	str	r0, [sp, #32]
 800d344:	4621      	mov	r1, r4
 800d346:	4658      	mov	r0, fp
 800d348:	f000 fc70 	bl	800dc2c <__mdiff>
 800d34c:	68c2      	ldr	r2, [r0, #12]
 800d34e:	4606      	mov	r6, r0
 800d350:	bb02      	cbnz	r2, 800d394 <_dtoa_r+0xa1c>
 800d352:	4601      	mov	r1, r0
 800d354:	4648      	mov	r0, r9
 800d356:	f000 fc4d 	bl	800dbf4 <__mcmp>
 800d35a:	4602      	mov	r2, r0
 800d35c:	4631      	mov	r1, r6
 800d35e:	4658      	mov	r0, fp
 800d360:	920e      	str	r2, [sp, #56]	@ 0x38
 800d362:	f000 fa0d 	bl	800d780 <_Bfree>
 800d366:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d368:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d36a:	9e07      	ldr	r6, [sp, #28]
 800d36c:	ea43 0102 	orr.w	r1, r3, r2
 800d370:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d372:	4319      	orrs	r1, r3
 800d374:	d110      	bne.n	800d398 <_dtoa_r+0xa20>
 800d376:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d37a:	d029      	beq.n	800d3d0 <_dtoa_r+0xa58>
 800d37c:	9b08      	ldr	r3, [sp, #32]
 800d37e:	2b00      	cmp	r3, #0
 800d380:	dd02      	ble.n	800d388 <_dtoa_r+0xa10>
 800d382:	9b02      	ldr	r3, [sp, #8]
 800d384:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800d388:	9b00      	ldr	r3, [sp, #0]
 800d38a:	f883 8000 	strb.w	r8, [r3]
 800d38e:	e63f      	b.n	800d010 <_dtoa_r+0x698>
 800d390:	4628      	mov	r0, r5
 800d392:	e7bb      	b.n	800d30c <_dtoa_r+0x994>
 800d394:	2201      	movs	r2, #1
 800d396:	e7e1      	b.n	800d35c <_dtoa_r+0x9e4>
 800d398:	9b08      	ldr	r3, [sp, #32]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	db04      	blt.n	800d3a8 <_dtoa_r+0xa30>
 800d39e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d3a0:	430b      	orrs	r3, r1
 800d3a2:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800d3a4:	430b      	orrs	r3, r1
 800d3a6:	d120      	bne.n	800d3ea <_dtoa_r+0xa72>
 800d3a8:	2a00      	cmp	r2, #0
 800d3aa:	dded      	ble.n	800d388 <_dtoa_r+0xa10>
 800d3ac:	4649      	mov	r1, r9
 800d3ae:	2201      	movs	r2, #1
 800d3b0:	4658      	mov	r0, fp
 800d3b2:	f000 fbb3 	bl	800db1c <__lshift>
 800d3b6:	4621      	mov	r1, r4
 800d3b8:	4681      	mov	r9, r0
 800d3ba:	f000 fc1b 	bl	800dbf4 <__mcmp>
 800d3be:	2800      	cmp	r0, #0
 800d3c0:	dc03      	bgt.n	800d3ca <_dtoa_r+0xa52>
 800d3c2:	d1e1      	bne.n	800d388 <_dtoa_r+0xa10>
 800d3c4:	f018 0f01 	tst.w	r8, #1
 800d3c8:	d0de      	beq.n	800d388 <_dtoa_r+0xa10>
 800d3ca:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d3ce:	d1d8      	bne.n	800d382 <_dtoa_r+0xa0a>
 800d3d0:	9a00      	ldr	r2, [sp, #0]
 800d3d2:	2339      	movs	r3, #57	@ 0x39
 800d3d4:	7013      	strb	r3, [r2, #0]
 800d3d6:	4633      	mov	r3, r6
 800d3d8:	461e      	mov	r6, r3
 800d3da:	3b01      	subs	r3, #1
 800d3dc:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800d3e0:	2a39      	cmp	r2, #57	@ 0x39
 800d3e2:	d052      	beq.n	800d48a <_dtoa_r+0xb12>
 800d3e4:	3201      	adds	r2, #1
 800d3e6:	701a      	strb	r2, [r3, #0]
 800d3e8:	e612      	b.n	800d010 <_dtoa_r+0x698>
 800d3ea:	2a00      	cmp	r2, #0
 800d3ec:	dd07      	ble.n	800d3fe <_dtoa_r+0xa86>
 800d3ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800d3f2:	d0ed      	beq.n	800d3d0 <_dtoa_r+0xa58>
 800d3f4:	9a00      	ldr	r2, [sp, #0]
 800d3f6:	f108 0301 	add.w	r3, r8, #1
 800d3fa:	7013      	strb	r3, [r2, #0]
 800d3fc:	e608      	b.n	800d010 <_dtoa_r+0x698>
 800d3fe:	9b07      	ldr	r3, [sp, #28]
 800d400:	9a07      	ldr	r2, [sp, #28]
 800d402:	f803 8c01 	strb.w	r8, [r3, #-1]
 800d406:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d408:	4293      	cmp	r3, r2
 800d40a:	d028      	beq.n	800d45e <_dtoa_r+0xae6>
 800d40c:	4649      	mov	r1, r9
 800d40e:	2300      	movs	r3, #0
 800d410:	220a      	movs	r2, #10
 800d412:	4658      	mov	r0, fp
 800d414:	f000 f9d6 	bl	800d7c4 <__multadd>
 800d418:	42af      	cmp	r7, r5
 800d41a:	4681      	mov	r9, r0
 800d41c:	f04f 0300 	mov.w	r3, #0
 800d420:	f04f 020a 	mov.w	r2, #10
 800d424:	4639      	mov	r1, r7
 800d426:	4658      	mov	r0, fp
 800d428:	d107      	bne.n	800d43a <_dtoa_r+0xac2>
 800d42a:	f000 f9cb 	bl	800d7c4 <__multadd>
 800d42e:	4607      	mov	r7, r0
 800d430:	4605      	mov	r5, r0
 800d432:	9b07      	ldr	r3, [sp, #28]
 800d434:	3301      	adds	r3, #1
 800d436:	9307      	str	r3, [sp, #28]
 800d438:	e774      	b.n	800d324 <_dtoa_r+0x9ac>
 800d43a:	f000 f9c3 	bl	800d7c4 <__multadd>
 800d43e:	4629      	mov	r1, r5
 800d440:	4607      	mov	r7, r0
 800d442:	2300      	movs	r3, #0
 800d444:	220a      	movs	r2, #10
 800d446:	4658      	mov	r0, fp
 800d448:	f000 f9bc 	bl	800d7c4 <__multadd>
 800d44c:	4605      	mov	r5, r0
 800d44e:	e7f0      	b.n	800d432 <_dtoa_r+0xaba>
 800d450:	9b00      	ldr	r3, [sp, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	bfcc      	ite	gt
 800d456:	461e      	movgt	r6, r3
 800d458:	2601      	movle	r6, #1
 800d45a:	4456      	add	r6, sl
 800d45c:	2700      	movs	r7, #0
 800d45e:	4649      	mov	r1, r9
 800d460:	2201      	movs	r2, #1
 800d462:	4658      	mov	r0, fp
 800d464:	f000 fb5a 	bl	800db1c <__lshift>
 800d468:	4621      	mov	r1, r4
 800d46a:	4681      	mov	r9, r0
 800d46c:	f000 fbc2 	bl	800dbf4 <__mcmp>
 800d470:	2800      	cmp	r0, #0
 800d472:	dcb0      	bgt.n	800d3d6 <_dtoa_r+0xa5e>
 800d474:	d102      	bne.n	800d47c <_dtoa_r+0xb04>
 800d476:	f018 0f01 	tst.w	r8, #1
 800d47a:	d1ac      	bne.n	800d3d6 <_dtoa_r+0xa5e>
 800d47c:	4633      	mov	r3, r6
 800d47e:	461e      	mov	r6, r3
 800d480:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d484:	2a30      	cmp	r2, #48	@ 0x30
 800d486:	d0fa      	beq.n	800d47e <_dtoa_r+0xb06>
 800d488:	e5c2      	b.n	800d010 <_dtoa_r+0x698>
 800d48a:	459a      	cmp	sl, r3
 800d48c:	d1a4      	bne.n	800d3d8 <_dtoa_r+0xa60>
 800d48e:	9b04      	ldr	r3, [sp, #16]
 800d490:	3301      	adds	r3, #1
 800d492:	9304      	str	r3, [sp, #16]
 800d494:	2331      	movs	r3, #49	@ 0x31
 800d496:	f88a 3000 	strb.w	r3, [sl]
 800d49a:	e5b9      	b.n	800d010 <_dtoa_r+0x698>
 800d49c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800d49e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800d4fc <_dtoa_r+0xb84>
 800d4a2:	b11b      	cbz	r3, 800d4ac <_dtoa_r+0xb34>
 800d4a4:	f10a 0308 	add.w	r3, sl, #8
 800d4a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800d4aa:	6013      	str	r3, [r2, #0]
 800d4ac:	4650      	mov	r0, sl
 800d4ae:	b019      	add	sp, #100	@ 0x64
 800d4b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d4b6:	2b01      	cmp	r3, #1
 800d4b8:	f77f ae37 	ble.w	800d12a <_dtoa_r+0x7b2>
 800d4bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d4be:	930a      	str	r3, [sp, #40]	@ 0x28
 800d4c0:	2001      	movs	r0, #1
 800d4c2:	e655      	b.n	800d170 <_dtoa_r+0x7f8>
 800d4c4:	9b00      	ldr	r3, [sp, #0]
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	f77f aed6 	ble.w	800d278 <_dtoa_r+0x900>
 800d4cc:	4656      	mov	r6, sl
 800d4ce:	4621      	mov	r1, r4
 800d4d0:	4648      	mov	r0, r9
 800d4d2:	f7ff f9c6 	bl	800c862 <quorem>
 800d4d6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800d4da:	f806 8b01 	strb.w	r8, [r6], #1
 800d4de:	9b00      	ldr	r3, [sp, #0]
 800d4e0:	eba6 020a 	sub.w	r2, r6, sl
 800d4e4:	4293      	cmp	r3, r2
 800d4e6:	ddb3      	ble.n	800d450 <_dtoa_r+0xad8>
 800d4e8:	4649      	mov	r1, r9
 800d4ea:	2300      	movs	r3, #0
 800d4ec:	220a      	movs	r2, #10
 800d4ee:	4658      	mov	r0, fp
 800d4f0:	f000 f968 	bl	800d7c4 <__multadd>
 800d4f4:	4681      	mov	r9, r0
 800d4f6:	e7ea      	b.n	800d4ce <_dtoa_r+0xb56>
 800d4f8:	0800fc06 	.word	0x0800fc06
 800d4fc:	0800fb8a 	.word	0x0800fb8a

0800d500 <_free_r>:
 800d500:	b538      	push	{r3, r4, r5, lr}
 800d502:	4605      	mov	r5, r0
 800d504:	2900      	cmp	r1, #0
 800d506:	d041      	beq.n	800d58c <_free_r+0x8c>
 800d508:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d50c:	1f0c      	subs	r4, r1, #4
 800d50e:	2b00      	cmp	r3, #0
 800d510:	bfb8      	it	lt
 800d512:	18e4      	addlt	r4, r4, r3
 800d514:	f000 f8e8 	bl	800d6e8 <__malloc_lock>
 800d518:	4a1d      	ldr	r2, [pc, #116]	@ (800d590 <_free_r+0x90>)
 800d51a:	6813      	ldr	r3, [r2, #0]
 800d51c:	b933      	cbnz	r3, 800d52c <_free_r+0x2c>
 800d51e:	6063      	str	r3, [r4, #4]
 800d520:	6014      	str	r4, [r2, #0]
 800d522:	4628      	mov	r0, r5
 800d524:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d528:	f000 b8e4 	b.w	800d6f4 <__malloc_unlock>
 800d52c:	42a3      	cmp	r3, r4
 800d52e:	d908      	bls.n	800d542 <_free_r+0x42>
 800d530:	6820      	ldr	r0, [r4, #0]
 800d532:	1821      	adds	r1, r4, r0
 800d534:	428b      	cmp	r3, r1
 800d536:	bf01      	itttt	eq
 800d538:	6819      	ldreq	r1, [r3, #0]
 800d53a:	685b      	ldreq	r3, [r3, #4]
 800d53c:	1809      	addeq	r1, r1, r0
 800d53e:	6021      	streq	r1, [r4, #0]
 800d540:	e7ed      	b.n	800d51e <_free_r+0x1e>
 800d542:	461a      	mov	r2, r3
 800d544:	685b      	ldr	r3, [r3, #4]
 800d546:	b10b      	cbz	r3, 800d54c <_free_r+0x4c>
 800d548:	42a3      	cmp	r3, r4
 800d54a:	d9fa      	bls.n	800d542 <_free_r+0x42>
 800d54c:	6811      	ldr	r1, [r2, #0]
 800d54e:	1850      	adds	r0, r2, r1
 800d550:	42a0      	cmp	r0, r4
 800d552:	d10b      	bne.n	800d56c <_free_r+0x6c>
 800d554:	6820      	ldr	r0, [r4, #0]
 800d556:	4401      	add	r1, r0
 800d558:	1850      	adds	r0, r2, r1
 800d55a:	4283      	cmp	r3, r0
 800d55c:	6011      	str	r1, [r2, #0]
 800d55e:	d1e0      	bne.n	800d522 <_free_r+0x22>
 800d560:	6818      	ldr	r0, [r3, #0]
 800d562:	685b      	ldr	r3, [r3, #4]
 800d564:	6053      	str	r3, [r2, #4]
 800d566:	4408      	add	r0, r1
 800d568:	6010      	str	r0, [r2, #0]
 800d56a:	e7da      	b.n	800d522 <_free_r+0x22>
 800d56c:	d902      	bls.n	800d574 <_free_r+0x74>
 800d56e:	230c      	movs	r3, #12
 800d570:	602b      	str	r3, [r5, #0]
 800d572:	e7d6      	b.n	800d522 <_free_r+0x22>
 800d574:	6820      	ldr	r0, [r4, #0]
 800d576:	1821      	adds	r1, r4, r0
 800d578:	428b      	cmp	r3, r1
 800d57a:	bf04      	itt	eq
 800d57c:	6819      	ldreq	r1, [r3, #0]
 800d57e:	685b      	ldreq	r3, [r3, #4]
 800d580:	6063      	str	r3, [r4, #4]
 800d582:	bf04      	itt	eq
 800d584:	1809      	addeq	r1, r1, r0
 800d586:	6021      	streq	r1, [r4, #0]
 800d588:	6054      	str	r4, [r2, #4]
 800d58a:	e7ca      	b.n	800d522 <_free_r+0x22>
 800d58c:	bd38      	pop	{r3, r4, r5, pc}
 800d58e:	bf00      	nop
 800d590:	20013d84 	.word	0x20013d84

0800d594 <malloc>:
 800d594:	4b02      	ldr	r3, [pc, #8]	@ (800d5a0 <malloc+0xc>)
 800d596:	4601      	mov	r1, r0
 800d598:	6818      	ldr	r0, [r3, #0]
 800d59a:	f000 b825 	b.w	800d5e8 <_malloc_r>
 800d59e:	bf00      	nop
 800d5a0:	20000020 	.word	0x20000020

0800d5a4 <sbrk_aligned>:
 800d5a4:	b570      	push	{r4, r5, r6, lr}
 800d5a6:	4e0f      	ldr	r6, [pc, #60]	@ (800d5e4 <sbrk_aligned+0x40>)
 800d5a8:	460c      	mov	r4, r1
 800d5aa:	6831      	ldr	r1, [r6, #0]
 800d5ac:	4605      	mov	r5, r0
 800d5ae:	b911      	cbnz	r1, 800d5b6 <sbrk_aligned+0x12>
 800d5b0:	f000 fe46 	bl	800e240 <_sbrk_r>
 800d5b4:	6030      	str	r0, [r6, #0]
 800d5b6:	4621      	mov	r1, r4
 800d5b8:	4628      	mov	r0, r5
 800d5ba:	f000 fe41 	bl	800e240 <_sbrk_r>
 800d5be:	1c43      	adds	r3, r0, #1
 800d5c0:	d103      	bne.n	800d5ca <sbrk_aligned+0x26>
 800d5c2:	f04f 34ff 	mov.w	r4, #4294967295
 800d5c6:	4620      	mov	r0, r4
 800d5c8:	bd70      	pop	{r4, r5, r6, pc}
 800d5ca:	1cc4      	adds	r4, r0, #3
 800d5cc:	f024 0403 	bic.w	r4, r4, #3
 800d5d0:	42a0      	cmp	r0, r4
 800d5d2:	d0f8      	beq.n	800d5c6 <sbrk_aligned+0x22>
 800d5d4:	1a21      	subs	r1, r4, r0
 800d5d6:	4628      	mov	r0, r5
 800d5d8:	f000 fe32 	bl	800e240 <_sbrk_r>
 800d5dc:	3001      	adds	r0, #1
 800d5de:	d1f2      	bne.n	800d5c6 <sbrk_aligned+0x22>
 800d5e0:	e7ef      	b.n	800d5c2 <sbrk_aligned+0x1e>
 800d5e2:	bf00      	nop
 800d5e4:	20013d80 	.word	0x20013d80

0800d5e8 <_malloc_r>:
 800d5e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d5ec:	1ccd      	adds	r5, r1, #3
 800d5ee:	f025 0503 	bic.w	r5, r5, #3
 800d5f2:	3508      	adds	r5, #8
 800d5f4:	2d0c      	cmp	r5, #12
 800d5f6:	bf38      	it	cc
 800d5f8:	250c      	movcc	r5, #12
 800d5fa:	2d00      	cmp	r5, #0
 800d5fc:	4606      	mov	r6, r0
 800d5fe:	db01      	blt.n	800d604 <_malloc_r+0x1c>
 800d600:	42a9      	cmp	r1, r5
 800d602:	d904      	bls.n	800d60e <_malloc_r+0x26>
 800d604:	230c      	movs	r3, #12
 800d606:	6033      	str	r3, [r6, #0]
 800d608:	2000      	movs	r0, #0
 800d60a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d60e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d6e4 <_malloc_r+0xfc>
 800d612:	f000 f869 	bl	800d6e8 <__malloc_lock>
 800d616:	f8d8 3000 	ldr.w	r3, [r8]
 800d61a:	461c      	mov	r4, r3
 800d61c:	bb44      	cbnz	r4, 800d670 <_malloc_r+0x88>
 800d61e:	4629      	mov	r1, r5
 800d620:	4630      	mov	r0, r6
 800d622:	f7ff ffbf 	bl	800d5a4 <sbrk_aligned>
 800d626:	1c43      	adds	r3, r0, #1
 800d628:	4604      	mov	r4, r0
 800d62a:	d158      	bne.n	800d6de <_malloc_r+0xf6>
 800d62c:	f8d8 4000 	ldr.w	r4, [r8]
 800d630:	4627      	mov	r7, r4
 800d632:	2f00      	cmp	r7, #0
 800d634:	d143      	bne.n	800d6be <_malloc_r+0xd6>
 800d636:	2c00      	cmp	r4, #0
 800d638:	d04b      	beq.n	800d6d2 <_malloc_r+0xea>
 800d63a:	6823      	ldr	r3, [r4, #0]
 800d63c:	4639      	mov	r1, r7
 800d63e:	4630      	mov	r0, r6
 800d640:	eb04 0903 	add.w	r9, r4, r3
 800d644:	f000 fdfc 	bl	800e240 <_sbrk_r>
 800d648:	4581      	cmp	r9, r0
 800d64a:	d142      	bne.n	800d6d2 <_malloc_r+0xea>
 800d64c:	6821      	ldr	r1, [r4, #0]
 800d64e:	1a6d      	subs	r5, r5, r1
 800d650:	4629      	mov	r1, r5
 800d652:	4630      	mov	r0, r6
 800d654:	f7ff ffa6 	bl	800d5a4 <sbrk_aligned>
 800d658:	3001      	adds	r0, #1
 800d65a:	d03a      	beq.n	800d6d2 <_malloc_r+0xea>
 800d65c:	6823      	ldr	r3, [r4, #0]
 800d65e:	442b      	add	r3, r5
 800d660:	6023      	str	r3, [r4, #0]
 800d662:	f8d8 3000 	ldr.w	r3, [r8]
 800d666:	685a      	ldr	r2, [r3, #4]
 800d668:	bb62      	cbnz	r2, 800d6c4 <_malloc_r+0xdc>
 800d66a:	f8c8 7000 	str.w	r7, [r8]
 800d66e:	e00f      	b.n	800d690 <_malloc_r+0xa8>
 800d670:	6822      	ldr	r2, [r4, #0]
 800d672:	1b52      	subs	r2, r2, r5
 800d674:	d420      	bmi.n	800d6b8 <_malloc_r+0xd0>
 800d676:	2a0b      	cmp	r2, #11
 800d678:	d917      	bls.n	800d6aa <_malloc_r+0xc2>
 800d67a:	1961      	adds	r1, r4, r5
 800d67c:	42a3      	cmp	r3, r4
 800d67e:	6025      	str	r5, [r4, #0]
 800d680:	bf18      	it	ne
 800d682:	6059      	strne	r1, [r3, #4]
 800d684:	6863      	ldr	r3, [r4, #4]
 800d686:	bf08      	it	eq
 800d688:	f8c8 1000 	streq.w	r1, [r8]
 800d68c:	5162      	str	r2, [r4, r5]
 800d68e:	604b      	str	r3, [r1, #4]
 800d690:	4630      	mov	r0, r6
 800d692:	f000 f82f 	bl	800d6f4 <__malloc_unlock>
 800d696:	f104 000b 	add.w	r0, r4, #11
 800d69a:	1d23      	adds	r3, r4, #4
 800d69c:	f020 0007 	bic.w	r0, r0, #7
 800d6a0:	1ac2      	subs	r2, r0, r3
 800d6a2:	bf1c      	itt	ne
 800d6a4:	1a1b      	subne	r3, r3, r0
 800d6a6:	50a3      	strne	r3, [r4, r2]
 800d6a8:	e7af      	b.n	800d60a <_malloc_r+0x22>
 800d6aa:	6862      	ldr	r2, [r4, #4]
 800d6ac:	42a3      	cmp	r3, r4
 800d6ae:	bf0c      	ite	eq
 800d6b0:	f8c8 2000 	streq.w	r2, [r8]
 800d6b4:	605a      	strne	r2, [r3, #4]
 800d6b6:	e7eb      	b.n	800d690 <_malloc_r+0xa8>
 800d6b8:	4623      	mov	r3, r4
 800d6ba:	6864      	ldr	r4, [r4, #4]
 800d6bc:	e7ae      	b.n	800d61c <_malloc_r+0x34>
 800d6be:	463c      	mov	r4, r7
 800d6c0:	687f      	ldr	r7, [r7, #4]
 800d6c2:	e7b6      	b.n	800d632 <_malloc_r+0x4a>
 800d6c4:	461a      	mov	r2, r3
 800d6c6:	685b      	ldr	r3, [r3, #4]
 800d6c8:	42a3      	cmp	r3, r4
 800d6ca:	d1fb      	bne.n	800d6c4 <_malloc_r+0xdc>
 800d6cc:	2300      	movs	r3, #0
 800d6ce:	6053      	str	r3, [r2, #4]
 800d6d0:	e7de      	b.n	800d690 <_malloc_r+0xa8>
 800d6d2:	230c      	movs	r3, #12
 800d6d4:	6033      	str	r3, [r6, #0]
 800d6d6:	4630      	mov	r0, r6
 800d6d8:	f000 f80c 	bl	800d6f4 <__malloc_unlock>
 800d6dc:	e794      	b.n	800d608 <_malloc_r+0x20>
 800d6de:	6005      	str	r5, [r0, #0]
 800d6e0:	e7d6      	b.n	800d690 <_malloc_r+0xa8>
 800d6e2:	bf00      	nop
 800d6e4:	20013d84 	.word	0x20013d84

0800d6e8 <__malloc_lock>:
 800d6e8:	4801      	ldr	r0, [pc, #4]	@ (800d6f0 <__malloc_lock+0x8>)
 800d6ea:	f7ff b8aa 	b.w	800c842 <__retarget_lock_acquire_recursive>
 800d6ee:	bf00      	nop
 800d6f0:	20013d7c 	.word	0x20013d7c

0800d6f4 <__malloc_unlock>:
 800d6f4:	4801      	ldr	r0, [pc, #4]	@ (800d6fc <__malloc_unlock+0x8>)
 800d6f6:	f7ff b8a5 	b.w	800c844 <__retarget_lock_release_recursive>
 800d6fa:	bf00      	nop
 800d6fc:	20013d7c 	.word	0x20013d7c

0800d700 <_Balloc>:
 800d700:	b570      	push	{r4, r5, r6, lr}
 800d702:	69c6      	ldr	r6, [r0, #28]
 800d704:	4604      	mov	r4, r0
 800d706:	460d      	mov	r5, r1
 800d708:	b976      	cbnz	r6, 800d728 <_Balloc+0x28>
 800d70a:	2010      	movs	r0, #16
 800d70c:	f7ff ff42 	bl	800d594 <malloc>
 800d710:	4602      	mov	r2, r0
 800d712:	61e0      	str	r0, [r4, #28]
 800d714:	b920      	cbnz	r0, 800d720 <_Balloc+0x20>
 800d716:	4b18      	ldr	r3, [pc, #96]	@ (800d778 <_Balloc+0x78>)
 800d718:	4818      	ldr	r0, [pc, #96]	@ (800d77c <_Balloc+0x7c>)
 800d71a:	216b      	movs	r1, #107	@ 0x6b
 800d71c:	f000 fda0 	bl	800e260 <__assert_func>
 800d720:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d724:	6006      	str	r6, [r0, #0]
 800d726:	60c6      	str	r6, [r0, #12]
 800d728:	69e6      	ldr	r6, [r4, #28]
 800d72a:	68f3      	ldr	r3, [r6, #12]
 800d72c:	b183      	cbz	r3, 800d750 <_Balloc+0x50>
 800d72e:	69e3      	ldr	r3, [r4, #28]
 800d730:	68db      	ldr	r3, [r3, #12]
 800d732:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d736:	b9b8      	cbnz	r0, 800d768 <_Balloc+0x68>
 800d738:	2101      	movs	r1, #1
 800d73a:	fa01 f605 	lsl.w	r6, r1, r5
 800d73e:	1d72      	adds	r2, r6, #5
 800d740:	0092      	lsls	r2, r2, #2
 800d742:	4620      	mov	r0, r4
 800d744:	f000 fdaa 	bl	800e29c <_calloc_r>
 800d748:	b160      	cbz	r0, 800d764 <_Balloc+0x64>
 800d74a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d74e:	e00e      	b.n	800d76e <_Balloc+0x6e>
 800d750:	2221      	movs	r2, #33	@ 0x21
 800d752:	2104      	movs	r1, #4
 800d754:	4620      	mov	r0, r4
 800d756:	f000 fda1 	bl	800e29c <_calloc_r>
 800d75a:	69e3      	ldr	r3, [r4, #28]
 800d75c:	60f0      	str	r0, [r6, #12]
 800d75e:	68db      	ldr	r3, [r3, #12]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d1e4      	bne.n	800d72e <_Balloc+0x2e>
 800d764:	2000      	movs	r0, #0
 800d766:	bd70      	pop	{r4, r5, r6, pc}
 800d768:	6802      	ldr	r2, [r0, #0]
 800d76a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d76e:	2300      	movs	r3, #0
 800d770:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d774:	e7f7      	b.n	800d766 <_Balloc+0x66>
 800d776:	bf00      	nop
 800d778:	0800fb97 	.word	0x0800fb97
 800d77c:	0800fc17 	.word	0x0800fc17

0800d780 <_Bfree>:
 800d780:	b570      	push	{r4, r5, r6, lr}
 800d782:	69c6      	ldr	r6, [r0, #28]
 800d784:	4605      	mov	r5, r0
 800d786:	460c      	mov	r4, r1
 800d788:	b976      	cbnz	r6, 800d7a8 <_Bfree+0x28>
 800d78a:	2010      	movs	r0, #16
 800d78c:	f7ff ff02 	bl	800d594 <malloc>
 800d790:	4602      	mov	r2, r0
 800d792:	61e8      	str	r0, [r5, #28]
 800d794:	b920      	cbnz	r0, 800d7a0 <_Bfree+0x20>
 800d796:	4b09      	ldr	r3, [pc, #36]	@ (800d7bc <_Bfree+0x3c>)
 800d798:	4809      	ldr	r0, [pc, #36]	@ (800d7c0 <_Bfree+0x40>)
 800d79a:	218f      	movs	r1, #143	@ 0x8f
 800d79c:	f000 fd60 	bl	800e260 <__assert_func>
 800d7a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d7a4:	6006      	str	r6, [r0, #0]
 800d7a6:	60c6      	str	r6, [r0, #12]
 800d7a8:	b13c      	cbz	r4, 800d7ba <_Bfree+0x3a>
 800d7aa:	69eb      	ldr	r3, [r5, #28]
 800d7ac:	6862      	ldr	r2, [r4, #4]
 800d7ae:	68db      	ldr	r3, [r3, #12]
 800d7b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d7b4:	6021      	str	r1, [r4, #0]
 800d7b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d7ba:	bd70      	pop	{r4, r5, r6, pc}
 800d7bc:	0800fb97 	.word	0x0800fb97
 800d7c0:	0800fc17 	.word	0x0800fc17

0800d7c4 <__multadd>:
 800d7c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7c8:	690d      	ldr	r5, [r1, #16]
 800d7ca:	4607      	mov	r7, r0
 800d7cc:	460c      	mov	r4, r1
 800d7ce:	461e      	mov	r6, r3
 800d7d0:	f101 0c14 	add.w	ip, r1, #20
 800d7d4:	2000      	movs	r0, #0
 800d7d6:	f8dc 3000 	ldr.w	r3, [ip]
 800d7da:	b299      	uxth	r1, r3
 800d7dc:	fb02 6101 	mla	r1, r2, r1, r6
 800d7e0:	0c1e      	lsrs	r6, r3, #16
 800d7e2:	0c0b      	lsrs	r3, r1, #16
 800d7e4:	fb02 3306 	mla	r3, r2, r6, r3
 800d7e8:	b289      	uxth	r1, r1
 800d7ea:	3001      	adds	r0, #1
 800d7ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d7f0:	4285      	cmp	r5, r0
 800d7f2:	f84c 1b04 	str.w	r1, [ip], #4
 800d7f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d7fa:	dcec      	bgt.n	800d7d6 <__multadd+0x12>
 800d7fc:	b30e      	cbz	r6, 800d842 <__multadd+0x7e>
 800d7fe:	68a3      	ldr	r3, [r4, #8]
 800d800:	42ab      	cmp	r3, r5
 800d802:	dc19      	bgt.n	800d838 <__multadd+0x74>
 800d804:	6861      	ldr	r1, [r4, #4]
 800d806:	4638      	mov	r0, r7
 800d808:	3101      	adds	r1, #1
 800d80a:	f7ff ff79 	bl	800d700 <_Balloc>
 800d80e:	4680      	mov	r8, r0
 800d810:	b928      	cbnz	r0, 800d81e <__multadd+0x5a>
 800d812:	4602      	mov	r2, r0
 800d814:	4b0c      	ldr	r3, [pc, #48]	@ (800d848 <__multadd+0x84>)
 800d816:	480d      	ldr	r0, [pc, #52]	@ (800d84c <__multadd+0x88>)
 800d818:	21ba      	movs	r1, #186	@ 0xba
 800d81a:	f000 fd21 	bl	800e260 <__assert_func>
 800d81e:	6922      	ldr	r2, [r4, #16]
 800d820:	3202      	adds	r2, #2
 800d822:	f104 010c 	add.w	r1, r4, #12
 800d826:	0092      	lsls	r2, r2, #2
 800d828:	300c      	adds	r0, #12
 800d82a:	f7ff f80c 	bl	800c846 <memcpy>
 800d82e:	4621      	mov	r1, r4
 800d830:	4638      	mov	r0, r7
 800d832:	f7ff ffa5 	bl	800d780 <_Bfree>
 800d836:	4644      	mov	r4, r8
 800d838:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d83c:	3501      	adds	r5, #1
 800d83e:	615e      	str	r6, [r3, #20]
 800d840:	6125      	str	r5, [r4, #16]
 800d842:	4620      	mov	r0, r4
 800d844:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d848:	0800fc06 	.word	0x0800fc06
 800d84c:	0800fc17 	.word	0x0800fc17

0800d850 <__hi0bits>:
 800d850:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800d854:	4603      	mov	r3, r0
 800d856:	bf36      	itet	cc
 800d858:	0403      	lslcc	r3, r0, #16
 800d85a:	2000      	movcs	r0, #0
 800d85c:	2010      	movcc	r0, #16
 800d85e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800d862:	bf3c      	itt	cc
 800d864:	021b      	lslcc	r3, r3, #8
 800d866:	3008      	addcc	r0, #8
 800d868:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d86c:	bf3c      	itt	cc
 800d86e:	011b      	lslcc	r3, r3, #4
 800d870:	3004      	addcc	r0, #4
 800d872:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d876:	bf3c      	itt	cc
 800d878:	009b      	lslcc	r3, r3, #2
 800d87a:	3002      	addcc	r0, #2
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	db05      	blt.n	800d88c <__hi0bits+0x3c>
 800d880:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800d884:	f100 0001 	add.w	r0, r0, #1
 800d888:	bf08      	it	eq
 800d88a:	2020      	moveq	r0, #32
 800d88c:	4770      	bx	lr

0800d88e <__lo0bits>:
 800d88e:	6803      	ldr	r3, [r0, #0]
 800d890:	4602      	mov	r2, r0
 800d892:	f013 0007 	ands.w	r0, r3, #7
 800d896:	d00b      	beq.n	800d8b0 <__lo0bits+0x22>
 800d898:	07d9      	lsls	r1, r3, #31
 800d89a:	d421      	bmi.n	800d8e0 <__lo0bits+0x52>
 800d89c:	0798      	lsls	r0, r3, #30
 800d89e:	bf49      	itett	mi
 800d8a0:	085b      	lsrmi	r3, r3, #1
 800d8a2:	089b      	lsrpl	r3, r3, #2
 800d8a4:	2001      	movmi	r0, #1
 800d8a6:	6013      	strmi	r3, [r2, #0]
 800d8a8:	bf5c      	itt	pl
 800d8aa:	6013      	strpl	r3, [r2, #0]
 800d8ac:	2002      	movpl	r0, #2
 800d8ae:	4770      	bx	lr
 800d8b0:	b299      	uxth	r1, r3
 800d8b2:	b909      	cbnz	r1, 800d8b8 <__lo0bits+0x2a>
 800d8b4:	0c1b      	lsrs	r3, r3, #16
 800d8b6:	2010      	movs	r0, #16
 800d8b8:	b2d9      	uxtb	r1, r3
 800d8ba:	b909      	cbnz	r1, 800d8c0 <__lo0bits+0x32>
 800d8bc:	3008      	adds	r0, #8
 800d8be:	0a1b      	lsrs	r3, r3, #8
 800d8c0:	0719      	lsls	r1, r3, #28
 800d8c2:	bf04      	itt	eq
 800d8c4:	091b      	lsreq	r3, r3, #4
 800d8c6:	3004      	addeq	r0, #4
 800d8c8:	0799      	lsls	r1, r3, #30
 800d8ca:	bf04      	itt	eq
 800d8cc:	089b      	lsreq	r3, r3, #2
 800d8ce:	3002      	addeq	r0, #2
 800d8d0:	07d9      	lsls	r1, r3, #31
 800d8d2:	d403      	bmi.n	800d8dc <__lo0bits+0x4e>
 800d8d4:	085b      	lsrs	r3, r3, #1
 800d8d6:	f100 0001 	add.w	r0, r0, #1
 800d8da:	d003      	beq.n	800d8e4 <__lo0bits+0x56>
 800d8dc:	6013      	str	r3, [r2, #0]
 800d8de:	4770      	bx	lr
 800d8e0:	2000      	movs	r0, #0
 800d8e2:	4770      	bx	lr
 800d8e4:	2020      	movs	r0, #32
 800d8e6:	4770      	bx	lr

0800d8e8 <__i2b>:
 800d8e8:	b510      	push	{r4, lr}
 800d8ea:	460c      	mov	r4, r1
 800d8ec:	2101      	movs	r1, #1
 800d8ee:	f7ff ff07 	bl	800d700 <_Balloc>
 800d8f2:	4602      	mov	r2, r0
 800d8f4:	b928      	cbnz	r0, 800d902 <__i2b+0x1a>
 800d8f6:	4b05      	ldr	r3, [pc, #20]	@ (800d90c <__i2b+0x24>)
 800d8f8:	4805      	ldr	r0, [pc, #20]	@ (800d910 <__i2b+0x28>)
 800d8fa:	f240 1145 	movw	r1, #325	@ 0x145
 800d8fe:	f000 fcaf 	bl	800e260 <__assert_func>
 800d902:	2301      	movs	r3, #1
 800d904:	6144      	str	r4, [r0, #20]
 800d906:	6103      	str	r3, [r0, #16]
 800d908:	bd10      	pop	{r4, pc}
 800d90a:	bf00      	nop
 800d90c:	0800fc06 	.word	0x0800fc06
 800d910:	0800fc17 	.word	0x0800fc17

0800d914 <__multiply>:
 800d914:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d918:	4614      	mov	r4, r2
 800d91a:	690a      	ldr	r2, [r1, #16]
 800d91c:	6923      	ldr	r3, [r4, #16]
 800d91e:	429a      	cmp	r2, r3
 800d920:	bfa8      	it	ge
 800d922:	4623      	movge	r3, r4
 800d924:	460f      	mov	r7, r1
 800d926:	bfa4      	itt	ge
 800d928:	460c      	movge	r4, r1
 800d92a:	461f      	movge	r7, r3
 800d92c:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800d930:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800d934:	68a3      	ldr	r3, [r4, #8]
 800d936:	6861      	ldr	r1, [r4, #4]
 800d938:	eb0a 0609 	add.w	r6, sl, r9
 800d93c:	42b3      	cmp	r3, r6
 800d93e:	b085      	sub	sp, #20
 800d940:	bfb8      	it	lt
 800d942:	3101      	addlt	r1, #1
 800d944:	f7ff fedc 	bl	800d700 <_Balloc>
 800d948:	b930      	cbnz	r0, 800d958 <__multiply+0x44>
 800d94a:	4602      	mov	r2, r0
 800d94c:	4b44      	ldr	r3, [pc, #272]	@ (800da60 <__multiply+0x14c>)
 800d94e:	4845      	ldr	r0, [pc, #276]	@ (800da64 <__multiply+0x150>)
 800d950:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800d954:	f000 fc84 	bl	800e260 <__assert_func>
 800d958:	f100 0514 	add.w	r5, r0, #20
 800d95c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d960:	462b      	mov	r3, r5
 800d962:	2200      	movs	r2, #0
 800d964:	4543      	cmp	r3, r8
 800d966:	d321      	bcc.n	800d9ac <__multiply+0x98>
 800d968:	f107 0114 	add.w	r1, r7, #20
 800d96c:	f104 0214 	add.w	r2, r4, #20
 800d970:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800d974:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800d978:	9302      	str	r3, [sp, #8]
 800d97a:	1b13      	subs	r3, r2, r4
 800d97c:	3b15      	subs	r3, #21
 800d97e:	f023 0303 	bic.w	r3, r3, #3
 800d982:	3304      	adds	r3, #4
 800d984:	f104 0715 	add.w	r7, r4, #21
 800d988:	42ba      	cmp	r2, r7
 800d98a:	bf38      	it	cc
 800d98c:	2304      	movcc	r3, #4
 800d98e:	9301      	str	r3, [sp, #4]
 800d990:	9b02      	ldr	r3, [sp, #8]
 800d992:	9103      	str	r1, [sp, #12]
 800d994:	428b      	cmp	r3, r1
 800d996:	d80c      	bhi.n	800d9b2 <__multiply+0x9e>
 800d998:	2e00      	cmp	r6, #0
 800d99a:	dd03      	ble.n	800d9a4 <__multiply+0x90>
 800d99c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d05b      	beq.n	800da5c <__multiply+0x148>
 800d9a4:	6106      	str	r6, [r0, #16]
 800d9a6:	b005      	add	sp, #20
 800d9a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9ac:	f843 2b04 	str.w	r2, [r3], #4
 800d9b0:	e7d8      	b.n	800d964 <__multiply+0x50>
 800d9b2:	f8b1 a000 	ldrh.w	sl, [r1]
 800d9b6:	f1ba 0f00 	cmp.w	sl, #0
 800d9ba:	d024      	beq.n	800da06 <__multiply+0xf2>
 800d9bc:	f104 0e14 	add.w	lr, r4, #20
 800d9c0:	46a9      	mov	r9, r5
 800d9c2:	f04f 0c00 	mov.w	ip, #0
 800d9c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d9ca:	f8d9 3000 	ldr.w	r3, [r9]
 800d9ce:	fa1f fb87 	uxth.w	fp, r7
 800d9d2:	b29b      	uxth	r3, r3
 800d9d4:	fb0a 330b 	mla	r3, sl, fp, r3
 800d9d8:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800d9dc:	f8d9 7000 	ldr.w	r7, [r9]
 800d9e0:	4463      	add	r3, ip
 800d9e2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d9e6:	fb0a c70b 	mla	r7, sl, fp, ip
 800d9ea:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800d9ee:	b29b      	uxth	r3, r3
 800d9f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800d9f4:	4572      	cmp	r2, lr
 800d9f6:	f849 3b04 	str.w	r3, [r9], #4
 800d9fa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800d9fe:	d8e2      	bhi.n	800d9c6 <__multiply+0xb2>
 800da00:	9b01      	ldr	r3, [sp, #4]
 800da02:	f845 c003 	str.w	ip, [r5, r3]
 800da06:	9b03      	ldr	r3, [sp, #12]
 800da08:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800da0c:	3104      	adds	r1, #4
 800da0e:	f1b9 0f00 	cmp.w	r9, #0
 800da12:	d021      	beq.n	800da58 <__multiply+0x144>
 800da14:	682b      	ldr	r3, [r5, #0]
 800da16:	f104 0c14 	add.w	ip, r4, #20
 800da1a:	46ae      	mov	lr, r5
 800da1c:	f04f 0a00 	mov.w	sl, #0
 800da20:	f8bc b000 	ldrh.w	fp, [ip]
 800da24:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800da28:	fb09 770b 	mla	r7, r9, fp, r7
 800da2c:	4457      	add	r7, sl
 800da2e:	b29b      	uxth	r3, r3
 800da30:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800da34:	f84e 3b04 	str.w	r3, [lr], #4
 800da38:	f85c 3b04 	ldr.w	r3, [ip], #4
 800da3c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da40:	f8be 3000 	ldrh.w	r3, [lr]
 800da44:	fb09 330a 	mla	r3, r9, sl, r3
 800da48:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800da4c:	4562      	cmp	r2, ip
 800da4e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800da52:	d8e5      	bhi.n	800da20 <__multiply+0x10c>
 800da54:	9f01      	ldr	r7, [sp, #4]
 800da56:	51eb      	str	r3, [r5, r7]
 800da58:	3504      	adds	r5, #4
 800da5a:	e799      	b.n	800d990 <__multiply+0x7c>
 800da5c:	3e01      	subs	r6, #1
 800da5e:	e79b      	b.n	800d998 <__multiply+0x84>
 800da60:	0800fc06 	.word	0x0800fc06
 800da64:	0800fc17 	.word	0x0800fc17

0800da68 <__pow5mult>:
 800da68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800da6c:	4615      	mov	r5, r2
 800da6e:	f012 0203 	ands.w	r2, r2, #3
 800da72:	4607      	mov	r7, r0
 800da74:	460e      	mov	r6, r1
 800da76:	d007      	beq.n	800da88 <__pow5mult+0x20>
 800da78:	4c25      	ldr	r4, [pc, #148]	@ (800db10 <__pow5mult+0xa8>)
 800da7a:	3a01      	subs	r2, #1
 800da7c:	2300      	movs	r3, #0
 800da7e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800da82:	f7ff fe9f 	bl	800d7c4 <__multadd>
 800da86:	4606      	mov	r6, r0
 800da88:	10ad      	asrs	r5, r5, #2
 800da8a:	d03d      	beq.n	800db08 <__pow5mult+0xa0>
 800da8c:	69fc      	ldr	r4, [r7, #28]
 800da8e:	b97c      	cbnz	r4, 800dab0 <__pow5mult+0x48>
 800da90:	2010      	movs	r0, #16
 800da92:	f7ff fd7f 	bl	800d594 <malloc>
 800da96:	4602      	mov	r2, r0
 800da98:	61f8      	str	r0, [r7, #28]
 800da9a:	b928      	cbnz	r0, 800daa8 <__pow5mult+0x40>
 800da9c:	4b1d      	ldr	r3, [pc, #116]	@ (800db14 <__pow5mult+0xac>)
 800da9e:	481e      	ldr	r0, [pc, #120]	@ (800db18 <__pow5mult+0xb0>)
 800daa0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800daa4:	f000 fbdc 	bl	800e260 <__assert_func>
 800daa8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800daac:	6004      	str	r4, [r0, #0]
 800daae:	60c4      	str	r4, [r0, #12]
 800dab0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800dab4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dab8:	b94c      	cbnz	r4, 800dace <__pow5mult+0x66>
 800daba:	f240 2171 	movw	r1, #625	@ 0x271
 800dabe:	4638      	mov	r0, r7
 800dac0:	f7ff ff12 	bl	800d8e8 <__i2b>
 800dac4:	2300      	movs	r3, #0
 800dac6:	f8c8 0008 	str.w	r0, [r8, #8]
 800daca:	4604      	mov	r4, r0
 800dacc:	6003      	str	r3, [r0, #0]
 800dace:	f04f 0900 	mov.w	r9, #0
 800dad2:	07eb      	lsls	r3, r5, #31
 800dad4:	d50a      	bpl.n	800daec <__pow5mult+0x84>
 800dad6:	4631      	mov	r1, r6
 800dad8:	4622      	mov	r2, r4
 800dada:	4638      	mov	r0, r7
 800dadc:	f7ff ff1a 	bl	800d914 <__multiply>
 800dae0:	4631      	mov	r1, r6
 800dae2:	4680      	mov	r8, r0
 800dae4:	4638      	mov	r0, r7
 800dae6:	f7ff fe4b 	bl	800d780 <_Bfree>
 800daea:	4646      	mov	r6, r8
 800daec:	106d      	asrs	r5, r5, #1
 800daee:	d00b      	beq.n	800db08 <__pow5mult+0xa0>
 800daf0:	6820      	ldr	r0, [r4, #0]
 800daf2:	b938      	cbnz	r0, 800db04 <__pow5mult+0x9c>
 800daf4:	4622      	mov	r2, r4
 800daf6:	4621      	mov	r1, r4
 800daf8:	4638      	mov	r0, r7
 800dafa:	f7ff ff0b 	bl	800d914 <__multiply>
 800dafe:	6020      	str	r0, [r4, #0]
 800db00:	f8c0 9000 	str.w	r9, [r0]
 800db04:	4604      	mov	r4, r0
 800db06:	e7e4      	b.n	800dad2 <__pow5mult+0x6a>
 800db08:	4630      	mov	r0, r6
 800db0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800db0e:	bf00      	nop
 800db10:	0800fc70 	.word	0x0800fc70
 800db14:	0800fb97 	.word	0x0800fb97
 800db18:	0800fc17 	.word	0x0800fc17

0800db1c <__lshift>:
 800db1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800db20:	460c      	mov	r4, r1
 800db22:	6849      	ldr	r1, [r1, #4]
 800db24:	6923      	ldr	r3, [r4, #16]
 800db26:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800db2a:	68a3      	ldr	r3, [r4, #8]
 800db2c:	4607      	mov	r7, r0
 800db2e:	4691      	mov	r9, r2
 800db30:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800db34:	f108 0601 	add.w	r6, r8, #1
 800db38:	42b3      	cmp	r3, r6
 800db3a:	db0b      	blt.n	800db54 <__lshift+0x38>
 800db3c:	4638      	mov	r0, r7
 800db3e:	f7ff fddf 	bl	800d700 <_Balloc>
 800db42:	4605      	mov	r5, r0
 800db44:	b948      	cbnz	r0, 800db5a <__lshift+0x3e>
 800db46:	4602      	mov	r2, r0
 800db48:	4b28      	ldr	r3, [pc, #160]	@ (800dbec <__lshift+0xd0>)
 800db4a:	4829      	ldr	r0, [pc, #164]	@ (800dbf0 <__lshift+0xd4>)
 800db4c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800db50:	f000 fb86 	bl	800e260 <__assert_func>
 800db54:	3101      	adds	r1, #1
 800db56:	005b      	lsls	r3, r3, #1
 800db58:	e7ee      	b.n	800db38 <__lshift+0x1c>
 800db5a:	2300      	movs	r3, #0
 800db5c:	f100 0114 	add.w	r1, r0, #20
 800db60:	f100 0210 	add.w	r2, r0, #16
 800db64:	4618      	mov	r0, r3
 800db66:	4553      	cmp	r3, sl
 800db68:	db33      	blt.n	800dbd2 <__lshift+0xb6>
 800db6a:	6920      	ldr	r0, [r4, #16]
 800db6c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800db70:	f104 0314 	add.w	r3, r4, #20
 800db74:	f019 091f 	ands.w	r9, r9, #31
 800db78:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800db7c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800db80:	d02b      	beq.n	800dbda <__lshift+0xbe>
 800db82:	f1c9 0e20 	rsb	lr, r9, #32
 800db86:	468a      	mov	sl, r1
 800db88:	2200      	movs	r2, #0
 800db8a:	6818      	ldr	r0, [r3, #0]
 800db8c:	fa00 f009 	lsl.w	r0, r0, r9
 800db90:	4310      	orrs	r0, r2
 800db92:	f84a 0b04 	str.w	r0, [sl], #4
 800db96:	f853 2b04 	ldr.w	r2, [r3], #4
 800db9a:	459c      	cmp	ip, r3
 800db9c:	fa22 f20e 	lsr.w	r2, r2, lr
 800dba0:	d8f3      	bhi.n	800db8a <__lshift+0x6e>
 800dba2:	ebac 0304 	sub.w	r3, ip, r4
 800dba6:	3b15      	subs	r3, #21
 800dba8:	f023 0303 	bic.w	r3, r3, #3
 800dbac:	3304      	adds	r3, #4
 800dbae:	f104 0015 	add.w	r0, r4, #21
 800dbb2:	4584      	cmp	ip, r0
 800dbb4:	bf38      	it	cc
 800dbb6:	2304      	movcc	r3, #4
 800dbb8:	50ca      	str	r2, [r1, r3]
 800dbba:	b10a      	cbz	r2, 800dbc0 <__lshift+0xa4>
 800dbbc:	f108 0602 	add.w	r6, r8, #2
 800dbc0:	3e01      	subs	r6, #1
 800dbc2:	4638      	mov	r0, r7
 800dbc4:	612e      	str	r6, [r5, #16]
 800dbc6:	4621      	mov	r1, r4
 800dbc8:	f7ff fdda 	bl	800d780 <_Bfree>
 800dbcc:	4628      	mov	r0, r5
 800dbce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dbd2:	f842 0f04 	str.w	r0, [r2, #4]!
 800dbd6:	3301      	adds	r3, #1
 800dbd8:	e7c5      	b.n	800db66 <__lshift+0x4a>
 800dbda:	3904      	subs	r1, #4
 800dbdc:	f853 2b04 	ldr.w	r2, [r3], #4
 800dbe0:	f841 2f04 	str.w	r2, [r1, #4]!
 800dbe4:	459c      	cmp	ip, r3
 800dbe6:	d8f9      	bhi.n	800dbdc <__lshift+0xc0>
 800dbe8:	e7ea      	b.n	800dbc0 <__lshift+0xa4>
 800dbea:	bf00      	nop
 800dbec:	0800fc06 	.word	0x0800fc06
 800dbf0:	0800fc17 	.word	0x0800fc17

0800dbf4 <__mcmp>:
 800dbf4:	690a      	ldr	r2, [r1, #16]
 800dbf6:	4603      	mov	r3, r0
 800dbf8:	6900      	ldr	r0, [r0, #16]
 800dbfa:	1a80      	subs	r0, r0, r2
 800dbfc:	b530      	push	{r4, r5, lr}
 800dbfe:	d10e      	bne.n	800dc1e <__mcmp+0x2a>
 800dc00:	3314      	adds	r3, #20
 800dc02:	3114      	adds	r1, #20
 800dc04:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800dc08:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800dc0c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800dc10:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800dc14:	4295      	cmp	r5, r2
 800dc16:	d003      	beq.n	800dc20 <__mcmp+0x2c>
 800dc18:	d205      	bcs.n	800dc26 <__mcmp+0x32>
 800dc1a:	f04f 30ff 	mov.w	r0, #4294967295
 800dc1e:	bd30      	pop	{r4, r5, pc}
 800dc20:	42a3      	cmp	r3, r4
 800dc22:	d3f3      	bcc.n	800dc0c <__mcmp+0x18>
 800dc24:	e7fb      	b.n	800dc1e <__mcmp+0x2a>
 800dc26:	2001      	movs	r0, #1
 800dc28:	e7f9      	b.n	800dc1e <__mcmp+0x2a>
	...

0800dc2c <__mdiff>:
 800dc2c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc30:	4689      	mov	r9, r1
 800dc32:	4606      	mov	r6, r0
 800dc34:	4611      	mov	r1, r2
 800dc36:	4648      	mov	r0, r9
 800dc38:	4614      	mov	r4, r2
 800dc3a:	f7ff ffdb 	bl	800dbf4 <__mcmp>
 800dc3e:	1e05      	subs	r5, r0, #0
 800dc40:	d112      	bne.n	800dc68 <__mdiff+0x3c>
 800dc42:	4629      	mov	r1, r5
 800dc44:	4630      	mov	r0, r6
 800dc46:	f7ff fd5b 	bl	800d700 <_Balloc>
 800dc4a:	4602      	mov	r2, r0
 800dc4c:	b928      	cbnz	r0, 800dc5a <__mdiff+0x2e>
 800dc4e:	4b3f      	ldr	r3, [pc, #252]	@ (800dd4c <__mdiff+0x120>)
 800dc50:	f240 2137 	movw	r1, #567	@ 0x237
 800dc54:	483e      	ldr	r0, [pc, #248]	@ (800dd50 <__mdiff+0x124>)
 800dc56:	f000 fb03 	bl	800e260 <__assert_func>
 800dc5a:	2301      	movs	r3, #1
 800dc5c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dc60:	4610      	mov	r0, r2
 800dc62:	b003      	add	sp, #12
 800dc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc68:	bfbc      	itt	lt
 800dc6a:	464b      	movlt	r3, r9
 800dc6c:	46a1      	movlt	r9, r4
 800dc6e:	4630      	mov	r0, r6
 800dc70:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800dc74:	bfba      	itte	lt
 800dc76:	461c      	movlt	r4, r3
 800dc78:	2501      	movlt	r5, #1
 800dc7a:	2500      	movge	r5, #0
 800dc7c:	f7ff fd40 	bl	800d700 <_Balloc>
 800dc80:	4602      	mov	r2, r0
 800dc82:	b918      	cbnz	r0, 800dc8c <__mdiff+0x60>
 800dc84:	4b31      	ldr	r3, [pc, #196]	@ (800dd4c <__mdiff+0x120>)
 800dc86:	f240 2145 	movw	r1, #581	@ 0x245
 800dc8a:	e7e3      	b.n	800dc54 <__mdiff+0x28>
 800dc8c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800dc90:	6926      	ldr	r6, [r4, #16]
 800dc92:	60c5      	str	r5, [r0, #12]
 800dc94:	f109 0310 	add.w	r3, r9, #16
 800dc98:	f109 0514 	add.w	r5, r9, #20
 800dc9c:	f104 0e14 	add.w	lr, r4, #20
 800dca0:	f100 0b14 	add.w	fp, r0, #20
 800dca4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800dca8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800dcac:	9301      	str	r3, [sp, #4]
 800dcae:	46d9      	mov	r9, fp
 800dcb0:	f04f 0c00 	mov.w	ip, #0
 800dcb4:	9b01      	ldr	r3, [sp, #4]
 800dcb6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800dcba:	f853 af04 	ldr.w	sl, [r3, #4]!
 800dcbe:	9301      	str	r3, [sp, #4]
 800dcc0:	fa1f f38a 	uxth.w	r3, sl
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	b283      	uxth	r3, r0
 800dcc8:	1acb      	subs	r3, r1, r3
 800dcca:	0c00      	lsrs	r0, r0, #16
 800dccc:	4463      	add	r3, ip
 800dcce:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800dcd2:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800dcd6:	b29b      	uxth	r3, r3
 800dcd8:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800dcdc:	4576      	cmp	r6, lr
 800dcde:	f849 3b04 	str.w	r3, [r9], #4
 800dce2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dce6:	d8e5      	bhi.n	800dcb4 <__mdiff+0x88>
 800dce8:	1b33      	subs	r3, r6, r4
 800dcea:	3b15      	subs	r3, #21
 800dcec:	f023 0303 	bic.w	r3, r3, #3
 800dcf0:	3415      	adds	r4, #21
 800dcf2:	3304      	adds	r3, #4
 800dcf4:	42a6      	cmp	r6, r4
 800dcf6:	bf38      	it	cc
 800dcf8:	2304      	movcc	r3, #4
 800dcfa:	441d      	add	r5, r3
 800dcfc:	445b      	add	r3, fp
 800dcfe:	461e      	mov	r6, r3
 800dd00:	462c      	mov	r4, r5
 800dd02:	4544      	cmp	r4, r8
 800dd04:	d30e      	bcc.n	800dd24 <__mdiff+0xf8>
 800dd06:	f108 0103 	add.w	r1, r8, #3
 800dd0a:	1b49      	subs	r1, r1, r5
 800dd0c:	f021 0103 	bic.w	r1, r1, #3
 800dd10:	3d03      	subs	r5, #3
 800dd12:	45a8      	cmp	r8, r5
 800dd14:	bf38      	it	cc
 800dd16:	2100      	movcc	r1, #0
 800dd18:	440b      	add	r3, r1
 800dd1a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800dd1e:	b191      	cbz	r1, 800dd46 <__mdiff+0x11a>
 800dd20:	6117      	str	r7, [r2, #16]
 800dd22:	e79d      	b.n	800dc60 <__mdiff+0x34>
 800dd24:	f854 1b04 	ldr.w	r1, [r4], #4
 800dd28:	46e6      	mov	lr, ip
 800dd2a:	0c08      	lsrs	r0, r1, #16
 800dd2c:	fa1c fc81 	uxtah	ip, ip, r1
 800dd30:	4471      	add	r1, lr
 800dd32:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800dd36:	b289      	uxth	r1, r1
 800dd38:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800dd3c:	f846 1b04 	str.w	r1, [r6], #4
 800dd40:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800dd44:	e7dd      	b.n	800dd02 <__mdiff+0xd6>
 800dd46:	3f01      	subs	r7, #1
 800dd48:	e7e7      	b.n	800dd1a <__mdiff+0xee>
 800dd4a:	bf00      	nop
 800dd4c:	0800fc06 	.word	0x0800fc06
 800dd50:	0800fc17 	.word	0x0800fc17

0800dd54 <__d2b>:
 800dd54:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800dd58:	460f      	mov	r7, r1
 800dd5a:	2101      	movs	r1, #1
 800dd5c:	ec59 8b10 	vmov	r8, r9, d0
 800dd60:	4616      	mov	r6, r2
 800dd62:	f7ff fccd 	bl	800d700 <_Balloc>
 800dd66:	4604      	mov	r4, r0
 800dd68:	b930      	cbnz	r0, 800dd78 <__d2b+0x24>
 800dd6a:	4602      	mov	r2, r0
 800dd6c:	4b23      	ldr	r3, [pc, #140]	@ (800ddfc <__d2b+0xa8>)
 800dd6e:	4824      	ldr	r0, [pc, #144]	@ (800de00 <__d2b+0xac>)
 800dd70:	f240 310f 	movw	r1, #783	@ 0x30f
 800dd74:	f000 fa74 	bl	800e260 <__assert_func>
 800dd78:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800dd7c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800dd80:	b10d      	cbz	r5, 800dd86 <__d2b+0x32>
 800dd82:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dd86:	9301      	str	r3, [sp, #4]
 800dd88:	f1b8 0300 	subs.w	r3, r8, #0
 800dd8c:	d023      	beq.n	800ddd6 <__d2b+0x82>
 800dd8e:	4668      	mov	r0, sp
 800dd90:	9300      	str	r3, [sp, #0]
 800dd92:	f7ff fd7c 	bl	800d88e <__lo0bits>
 800dd96:	e9dd 1200 	ldrd	r1, r2, [sp]
 800dd9a:	b1d0      	cbz	r0, 800ddd2 <__d2b+0x7e>
 800dd9c:	f1c0 0320 	rsb	r3, r0, #32
 800dda0:	fa02 f303 	lsl.w	r3, r2, r3
 800dda4:	430b      	orrs	r3, r1
 800dda6:	40c2      	lsrs	r2, r0
 800dda8:	6163      	str	r3, [r4, #20]
 800ddaa:	9201      	str	r2, [sp, #4]
 800ddac:	9b01      	ldr	r3, [sp, #4]
 800ddae:	61a3      	str	r3, [r4, #24]
 800ddb0:	2b00      	cmp	r3, #0
 800ddb2:	bf0c      	ite	eq
 800ddb4:	2201      	moveq	r2, #1
 800ddb6:	2202      	movne	r2, #2
 800ddb8:	6122      	str	r2, [r4, #16]
 800ddba:	b1a5      	cbz	r5, 800dde6 <__d2b+0x92>
 800ddbc:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ddc0:	4405      	add	r5, r0
 800ddc2:	603d      	str	r5, [r7, #0]
 800ddc4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ddc8:	6030      	str	r0, [r6, #0]
 800ddca:	4620      	mov	r0, r4
 800ddcc:	b003      	add	sp, #12
 800ddce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ddd2:	6161      	str	r1, [r4, #20]
 800ddd4:	e7ea      	b.n	800ddac <__d2b+0x58>
 800ddd6:	a801      	add	r0, sp, #4
 800ddd8:	f7ff fd59 	bl	800d88e <__lo0bits>
 800dddc:	9b01      	ldr	r3, [sp, #4]
 800ddde:	6163      	str	r3, [r4, #20]
 800dde0:	3020      	adds	r0, #32
 800dde2:	2201      	movs	r2, #1
 800dde4:	e7e8      	b.n	800ddb8 <__d2b+0x64>
 800dde6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ddea:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ddee:	6038      	str	r0, [r7, #0]
 800ddf0:	6918      	ldr	r0, [r3, #16]
 800ddf2:	f7ff fd2d 	bl	800d850 <__hi0bits>
 800ddf6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ddfa:	e7e5      	b.n	800ddc8 <__d2b+0x74>
 800ddfc:	0800fc06 	.word	0x0800fc06
 800de00:	0800fc17 	.word	0x0800fc17

0800de04 <__ssputs_r>:
 800de04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800de08:	688e      	ldr	r6, [r1, #8]
 800de0a:	461f      	mov	r7, r3
 800de0c:	42be      	cmp	r6, r7
 800de0e:	680b      	ldr	r3, [r1, #0]
 800de10:	4682      	mov	sl, r0
 800de12:	460c      	mov	r4, r1
 800de14:	4690      	mov	r8, r2
 800de16:	d82d      	bhi.n	800de74 <__ssputs_r+0x70>
 800de18:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800de1c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800de20:	d026      	beq.n	800de70 <__ssputs_r+0x6c>
 800de22:	6965      	ldr	r5, [r4, #20]
 800de24:	6909      	ldr	r1, [r1, #16]
 800de26:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800de2a:	eba3 0901 	sub.w	r9, r3, r1
 800de2e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800de32:	1c7b      	adds	r3, r7, #1
 800de34:	444b      	add	r3, r9
 800de36:	106d      	asrs	r5, r5, #1
 800de38:	429d      	cmp	r5, r3
 800de3a:	bf38      	it	cc
 800de3c:	461d      	movcc	r5, r3
 800de3e:	0553      	lsls	r3, r2, #21
 800de40:	d527      	bpl.n	800de92 <__ssputs_r+0x8e>
 800de42:	4629      	mov	r1, r5
 800de44:	f7ff fbd0 	bl	800d5e8 <_malloc_r>
 800de48:	4606      	mov	r6, r0
 800de4a:	b360      	cbz	r0, 800dea6 <__ssputs_r+0xa2>
 800de4c:	6921      	ldr	r1, [r4, #16]
 800de4e:	464a      	mov	r2, r9
 800de50:	f7fe fcf9 	bl	800c846 <memcpy>
 800de54:	89a3      	ldrh	r3, [r4, #12]
 800de56:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800de5a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de5e:	81a3      	strh	r3, [r4, #12]
 800de60:	6126      	str	r6, [r4, #16]
 800de62:	6165      	str	r5, [r4, #20]
 800de64:	444e      	add	r6, r9
 800de66:	eba5 0509 	sub.w	r5, r5, r9
 800de6a:	6026      	str	r6, [r4, #0]
 800de6c:	60a5      	str	r5, [r4, #8]
 800de6e:	463e      	mov	r6, r7
 800de70:	42be      	cmp	r6, r7
 800de72:	d900      	bls.n	800de76 <__ssputs_r+0x72>
 800de74:	463e      	mov	r6, r7
 800de76:	6820      	ldr	r0, [r4, #0]
 800de78:	4632      	mov	r2, r6
 800de7a:	4641      	mov	r1, r8
 800de7c:	f000 f9c6 	bl	800e20c <memmove>
 800de80:	68a3      	ldr	r3, [r4, #8]
 800de82:	1b9b      	subs	r3, r3, r6
 800de84:	60a3      	str	r3, [r4, #8]
 800de86:	6823      	ldr	r3, [r4, #0]
 800de88:	4433      	add	r3, r6
 800de8a:	6023      	str	r3, [r4, #0]
 800de8c:	2000      	movs	r0, #0
 800de8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de92:	462a      	mov	r2, r5
 800de94:	f000 fa28 	bl	800e2e8 <_realloc_r>
 800de98:	4606      	mov	r6, r0
 800de9a:	2800      	cmp	r0, #0
 800de9c:	d1e0      	bne.n	800de60 <__ssputs_r+0x5c>
 800de9e:	6921      	ldr	r1, [r4, #16]
 800dea0:	4650      	mov	r0, sl
 800dea2:	f7ff fb2d 	bl	800d500 <_free_r>
 800dea6:	230c      	movs	r3, #12
 800dea8:	f8ca 3000 	str.w	r3, [sl]
 800deac:	89a3      	ldrh	r3, [r4, #12]
 800deae:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800deb2:	81a3      	strh	r3, [r4, #12]
 800deb4:	f04f 30ff 	mov.w	r0, #4294967295
 800deb8:	e7e9      	b.n	800de8e <__ssputs_r+0x8a>
	...

0800debc <_svfiprintf_r>:
 800debc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dec0:	4698      	mov	r8, r3
 800dec2:	898b      	ldrh	r3, [r1, #12]
 800dec4:	061b      	lsls	r3, r3, #24
 800dec6:	b09d      	sub	sp, #116	@ 0x74
 800dec8:	4607      	mov	r7, r0
 800deca:	460d      	mov	r5, r1
 800decc:	4614      	mov	r4, r2
 800dece:	d510      	bpl.n	800def2 <_svfiprintf_r+0x36>
 800ded0:	690b      	ldr	r3, [r1, #16]
 800ded2:	b973      	cbnz	r3, 800def2 <_svfiprintf_r+0x36>
 800ded4:	2140      	movs	r1, #64	@ 0x40
 800ded6:	f7ff fb87 	bl	800d5e8 <_malloc_r>
 800deda:	6028      	str	r0, [r5, #0]
 800dedc:	6128      	str	r0, [r5, #16]
 800dede:	b930      	cbnz	r0, 800deee <_svfiprintf_r+0x32>
 800dee0:	230c      	movs	r3, #12
 800dee2:	603b      	str	r3, [r7, #0]
 800dee4:	f04f 30ff 	mov.w	r0, #4294967295
 800dee8:	b01d      	add	sp, #116	@ 0x74
 800deea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800deee:	2340      	movs	r3, #64	@ 0x40
 800def0:	616b      	str	r3, [r5, #20]
 800def2:	2300      	movs	r3, #0
 800def4:	9309      	str	r3, [sp, #36]	@ 0x24
 800def6:	2320      	movs	r3, #32
 800def8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800defc:	f8cd 800c 	str.w	r8, [sp, #12]
 800df00:	2330      	movs	r3, #48	@ 0x30
 800df02:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800e0a0 <_svfiprintf_r+0x1e4>
 800df06:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800df0a:	f04f 0901 	mov.w	r9, #1
 800df0e:	4623      	mov	r3, r4
 800df10:	469a      	mov	sl, r3
 800df12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800df16:	b10a      	cbz	r2, 800df1c <_svfiprintf_r+0x60>
 800df18:	2a25      	cmp	r2, #37	@ 0x25
 800df1a:	d1f9      	bne.n	800df10 <_svfiprintf_r+0x54>
 800df1c:	ebba 0b04 	subs.w	fp, sl, r4
 800df20:	d00b      	beq.n	800df3a <_svfiprintf_r+0x7e>
 800df22:	465b      	mov	r3, fp
 800df24:	4622      	mov	r2, r4
 800df26:	4629      	mov	r1, r5
 800df28:	4638      	mov	r0, r7
 800df2a:	f7ff ff6b 	bl	800de04 <__ssputs_r>
 800df2e:	3001      	adds	r0, #1
 800df30:	f000 80a7 	beq.w	800e082 <_svfiprintf_r+0x1c6>
 800df34:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df36:	445a      	add	r2, fp
 800df38:	9209      	str	r2, [sp, #36]	@ 0x24
 800df3a:	f89a 3000 	ldrb.w	r3, [sl]
 800df3e:	2b00      	cmp	r3, #0
 800df40:	f000 809f 	beq.w	800e082 <_svfiprintf_r+0x1c6>
 800df44:	2300      	movs	r3, #0
 800df46:	f04f 32ff 	mov.w	r2, #4294967295
 800df4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800df4e:	f10a 0a01 	add.w	sl, sl, #1
 800df52:	9304      	str	r3, [sp, #16]
 800df54:	9307      	str	r3, [sp, #28]
 800df56:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800df5a:	931a      	str	r3, [sp, #104]	@ 0x68
 800df5c:	4654      	mov	r4, sl
 800df5e:	2205      	movs	r2, #5
 800df60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df64:	484e      	ldr	r0, [pc, #312]	@ (800e0a0 <_svfiprintf_r+0x1e4>)
 800df66:	f7f2 f983 	bl	8000270 <memchr>
 800df6a:	9a04      	ldr	r2, [sp, #16]
 800df6c:	b9d8      	cbnz	r0, 800dfa6 <_svfiprintf_r+0xea>
 800df6e:	06d0      	lsls	r0, r2, #27
 800df70:	bf44      	itt	mi
 800df72:	2320      	movmi	r3, #32
 800df74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df78:	0711      	lsls	r1, r2, #28
 800df7a:	bf44      	itt	mi
 800df7c:	232b      	movmi	r3, #43	@ 0x2b
 800df7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800df82:	f89a 3000 	ldrb.w	r3, [sl]
 800df86:	2b2a      	cmp	r3, #42	@ 0x2a
 800df88:	d015      	beq.n	800dfb6 <_svfiprintf_r+0xfa>
 800df8a:	9a07      	ldr	r2, [sp, #28]
 800df8c:	4654      	mov	r4, sl
 800df8e:	2000      	movs	r0, #0
 800df90:	f04f 0c0a 	mov.w	ip, #10
 800df94:	4621      	mov	r1, r4
 800df96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df9a:	3b30      	subs	r3, #48	@ 0x30
 800df9c:	2b09      	cmp	r3, #9
 800df9e:	d94b      	bls.n	800e038 <_svfiprintf_r+0x17c>
 800dfa0:	b1b0      	cbz	r0, 800dfd0 <_svfiprintf_r+0x114>
 800dfa2:	9207      	str	r2, [sp, #28]
 800dfa4:	e014      	b.n	800dfd0 <_svfiprintf_r+0x114>
 800dfa6:	eba0 0308 	sub.w	r3, r0, r8
 800dfaa:	fa09 f303 	lsl.w	r3, r9, r3
 800dfae:	4313      	orrs	r3, r2
 800dfb0:	9304      	str	r3, [sp, #16]
 800dfb2:	46a2      	mov	sl, r4
 800dfb4:	e7d2      	b.n	800df5c <_svfiprintf_r+0xa0>
 800dfb6:	9b03      	ldr	r3, [sp, #12]
 800dfb8:	1d19      	adds	r1, r3, #4
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	9103      	str	r1, [sp, #12]
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	bfbb      	ittet	lt
 800dfc2:	425b      	neglt	r3, r3
 800dfc4:	f042 0202 	orrlt.w	r2, r2, #2
 800dfc8:	9307      	strge	r3, [sp, #28]
 800dfca:	9307      	strlt	r3, [sp, #28]
 800dfcc:	bfb8      	it	lt
 800dfce:	9204      	strlt	r2, [sp, #16]
 800dfd0:	7823      	ldrb	r3, [r4, #0]
 800dfd2:	2b2e      	cmp	r3, #46	@ 0x2e
 800dfd4:	d10a      	bne.n	800dfec <_svfiprintf_r+0x130>
 800dfd6:	7863      	ldrb	r3, [r4, #1]
 800dfd8:	2b2a      	cmp	r3, #42	@ 0x2a
 800dfda:	d132      	bne.n	800e042 <_svfiprintf_r+0x186>
 800dfdc:	9b03      	ldr	r3, [sp, #12]
 800dfde:	1d1a      	adds	r2, r3, #4
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	9203      	str	r2, [sp, #12]
 800dfe4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800dfe8:	3402      	adds	r4, #2
 800dfea:	9305      	str	r3, [sp, #20]
 800dfec:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800e0b0 <_svfiprintf_r+0x1f4>
 800dff0:	7821      	ldrb	r1, [r4, #0]
 800dff2:	2203      	movs	r2, #3
 800dff4:	4650      	mov	r0, sl
 800dff6:	f7f2 f93b 	bl	8000270 <memchr>
 800dffa:	b138      	cbz	r0, 800e00c <_svfiprintf_r+0x150>
 800dffc:	9b04      	ldr	r3, [sp, #16]
 800dffe:	eba0 000a 	sub.w	r0, r0, sl
 800e002:	2240      	movs	r2, #64	@ 0x40
 800e004:	4082      	lsls	r2, r0
 800e006:	4313      	orrs	r3, r2
 800e008:	3401      	adds	r4, #1
 800e00a:	9304      	str	r3, [sp, #16]
 800e00c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e010:	4824      	ldr	r0, [pc, #144]	@ (800e0a4 <_svfiprintf_r+0x1e8>)
 800e012:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e016:	2206      	movs	r2, #6
 800e018:	f7f2 f92a 	bl	8000270 <memchr>
 800e01c:	2800      	cmp	r0, #0
 800e01e:	d036      	beq.n	800e08e <_svfiprintf_r+0x1d2>
 800e020:	4b21      	ldr	r3, [pc, #132]	@ (800e0a8 <_svfiprintf_r+0x1ec>)
 800e022:	bb1b      	cbnz	r3, 800e06c <_svfiprintf_r+0x1b0>
 800e024:	9b03      	ldr	r3, [sp, #12]
 800e026:	3307      	adds	r3, #7
 800e028:	f023 0307 	bic.w	r3, r3, #7
 800e02c:	3308      	adds	r3, #8
 800e02e:	9303      	str	r3, [sp, #12]
 800e030:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e032:	4433      	add	r3, r6
 800e034:	9309      	str	r3, [sp, #36]	@ 0x24
 800e036:	e76a      	b.n	800df0e <_svfiprintf_r+0x52>
 800e038:	fb0c 3202 	mla	r2, ip, r2, r3
 800e03c:	460c      	mov	r4, r1
 800e03e:	2001      	movs	r0, #1
 800e040:	e7a8      	b.n	800df94 <_svfiprintf_r+0xd8>
 800e042:	2300      	movs	r3, #0
 800e044:	3401      	adds	r4, #1
 800e046:	9305      	str	r3, [sp, #20]
 800e048:	4619      	mov	r1, r3
 800e04a:	f04f 0c0a 	mov.w	ip, #10
 800e04e:	4620      	mov	r0, r4
 800e050:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e054:	3a30      	subs	r2, #48	@ 0x30
 800e056:	2a09      	cmp	r2, #9
 800e058:	d903      	bls.n	800e062 <_svfiprintf_r+0x1a6>
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d0c6      	beq.n	800dfec <_svfiprintf_r+0x130>
 800e05e:	9105      	str	r1, [sp, #20]
 800e060:	e7c4      	b.n	800dfec <_svfiprintf_r+0x130>
 800e062:	fb0c 2101 	mla	r1, ip, r1, r2
 800e066:	4604      	mov	r4, r0
 800e068:	2301      	movs	r3, #1
 800e06a:	e7f0      	b.n	800e04e <_svfiprintf_r+0x192>
 800e06c:	ab03      	add	r3, sp, #12
 800e06e:	9300      	str	r3, [sp, #0]
 800e070:	462a      	mov	r2, r5
 800e072:	4b0e      	ldr	r3, [pc, #56]	@ (800e0ac <_svfiprintf_r+0x1f0>)
 800e074:	a904      	add	r1, sp, #16
 800e076:	4638      	mov	r0, r7
 800e078:	f7fd fe8a 	bl	800bd90 <_printf_float>
 800e07c:	1c42      	adds	r2, r0, #1
 800e07e:	4606      	mov	r6, r0
 800e080:	d1d6      	bne.n	800e030 <_svfiprintf_r+0x174>
 800e082:	89ab      	ldrh	r3, [r5, #12]
 800e084:	065b      	lsls	r3, r3, #25
 800e086:	f53f af2d 	bmi.w	800dee4 <_svfiprintf_r+0x28>
 800e08a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e08c:	e72c      	b.n	800dee8 <_svfiprintf_r+0x2c>
 800e08e:	ab03      	add	r3, sp, #12
 800e090:	9300      	str	r3, [sp, #0]
 800e092:	462a      	mov	r2, r5
 800e094:	4b05      	ldr	r3, [pc, #20]	@ (800e0ac <_svfiprintf_r+0x1f0>)
 800e096:	a904      	add	r1, sp, #16
 800e098:	4638      	mov	r0, r7
 800e09a:	f7fe f911 	bl	800c2c0 <_printf_i>
 800e09e:	e7ed      	b.n	800e07c <_svfiprintf_r+0x1c0>
 800e0a0:	0800fd70 	.word	0x0800fd70
 800e0a4:	0800fd7a 	.word	0x0800fd7a
 800e0a8:	0800bd91 	.word	0x0800bd91
 800e0ac:	0800de05 	.word	0x0800de05
 800e0b0:	0800fd76 	.word	0x0800fd76

0800e0b4 <__sflush_r>:
 800e0b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e0b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0bc:	0716      	lsls	r6, r2, #28
 800e0be:	4605      	mov	r5, r0
 800e0c0:	460c      	mov	r4, r1
 800e0c2:	d454      	bmi.n	800e16e <__sflush_r+0xba>
 800e0c4:	684b      	ldr	r3, [r1, #4]
 800e0c6:	2b00      	cmp	r3, #0
 800e0c8:	dc02      	bgt.n	800e0d0 <__sflush_r+0x1c>
 800e0ca:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800e0cc:	2b00      	cmp	r3, #0
 800e0ce:	dd48      	ble.n	800e162 <__sflush_r+0xae>
 800e0d0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e0d2:	2e00      	cmp	r6, #0
 800e0d4:	d045      	beq.n	800e162 <__sflush_r+0xae>
 800e0d6:	2300      	movs	r3, #0
 800e0d8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800e0dc:	682f      	ldr	r7, [r5, #0]
 800e0de:	6a21      	ldr	r1, [r4, #32]
 800e0e0:	602b      	str	r3, [r5, #0]
 800e0e2:	d030      	beq.n	800e146 <__sflush_r+0x92>
 800e0e4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800e0e6:	89a3      	ldrh	r3, [r4, #12]
 800e0e8:	0759      	lsls	r1, r3, #29
 800e0ea:	d505      	bpl.n	800e0f8 <__sflush_r+0x44>
 800e0ec:	6863      	ldr	r3, [r4, #4]
 800e0ee:	1ad2      	subs	r2, r2, r3
 800e0f0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800e0f2:	b10b      	cbz	r3, 800e0f8 <__sflush_r+0x44>
 800e0f4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800e0f6:	1ad2      	subs	r2, r2, r3
 800e0f8:	2300      	movs	r3, #0
 800e0fa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800e0fc:	6a21      	ldr	r1, [r4, #32]
 800e0fe:	4628      	mov	r0, r5
 800e100:	47b0      	blx	r6
 800e102:	1c43      	adds	r3, r0, #1
 800e104:	89a3      	ldrh	r3, [r4, #12]
 800e106:	d106      	bne.n	800e116 <__sflush_r+0x62>
 800e108:	6829      	ldr	r1, [r5, #0]
 800e10a:	291d      	cmp	r1, #29
 800e10c:	d82b      	bhi.n	800e166 <__sflush_r+0xb2>
 800e10e:	4a2a      	ldr	r2, [pc, #168]	@ (800e1b8 <__sflush_r+0x104>)
 800e110:	410a      	asrs	r2, r1
 800e112:	07d6      	lsls	r6, r2, #31
 800e114:	d427      	bmi.n	800e166 <__sflush_r+0xb2>
 800e116:	2200      	movs	r2, #0
 800e118:	6062      	str	r2, [r4, #4]
 800e11a:	04d9      	lsls	r1, r3, #19
 800e11c:	6922      	ldr	r2, [r4, #16]
 800e11e:	6022      	str	r2, [r4, #0]
 800e120:	d504      	bpl.n	800e12c <__sflush_r+0x78>
 800e122:	1c42      	adds	r2, r0, #1
 800e124:	d101      	bne.n	800e12a <__sflush_r+0x76>
 800e126:	682b      	ldr	r3, [r5, #0]
 800e128:	b903      	cbnz	r3, 800e12c <__sflush_r+0x78>
 800e12a:	6560      	str	r0, [r4, #84]	@ 0x54
 800e12c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e12e:	602f      	str	r7, [r5, #0]
 800e130:	b1b9      	cbz	r1, 800e162 <__sflush_r+0xae>
 800e132:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e136:	4299      	cmp	r1, r3
 800e138:	d002      	beq.n	800e140 <__sflush_r+0x8c>
 800e13a:	4628      	mov	r0, r5
 800e13c:	f7ff f9e0 	bl	800d500 <_free_r>
 800e140:	2300      	movs	r3, #0
 800e142:	6363      	str	r3, [r4, #52]	@ 0x34
 800e144:	e00d      	b.n	800e162 <__sflush_r+0xae>
 800e146:	2301      	movs	r3, #1
 800e148:	4628      	mov	r0, r5
 800e14a:	47b0      	blx	r6
 800e14c:	4602      	mov	r2, r0
 800e14e:	1c50      	adds	r0, r2, #1
 800e150:	d1c9      	bne.n	800e0e6 <__sflush_r+0x32>
 800e152:	682b      	ldr	r3, [r5, #0]
 800e154:	2b00      	cmp	r3, #0
 800e156:	d0c6      	beq.n	800e0e6 <__sflush_r+0x32>
 800e158:	2b1d      	cmp	r3, #29
 800e15a:	d001      	beq.n	800e160 <__sflush_r+0xac>
 800e15c:	2b16      	cmp	r3, #22
 800e15e:	d11e      	bne.n	800e19e <__sflush_r+0xea>
 800e160:	602f      	str	r7, [r5, #0]
 800e162:	2000      	movs	r0, #0
 800e164:	e022      	b.n	800e1ac <__sflush_r+0xf8>
 800e166:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e16a:	b21b      	sxth	r3, r3
 800e16c:	e01b      	b.n	800e1a6 <__sflush_r+0xf2>
 800e16e:	690f      	ldr	r7, [r1, #16]
 800e170:	2f00      	cmp	r7, #0
 800e172:	d0f6      	beq.n	800e162 <__sflush_r+0xae>
 800e174:	0793      	lsls	r3, r2, #30
 800e176:	680e      	ldr	r6, [r1, #0]
 800e178:	bf08      	it	eq
 800e17a:	694b      	ldreq	r3, [r1, #20]
 800e17c:	600f      	str	r7, [r1, #0]
 800e17e:	bf18      	it	ne
 800e180:	2300      	movne	r3, #0
 800e182:	eba6 0807 	sub.w	r8, r6, r7
 800e186:	608b      	str	r3, [r1, #8]
 800e188:	f1b8 0f00 	cmp.w	r8, #0
 800e18c:	dde9      	ble.n	800e162 <__sflush_r+0xae>
 800e18e:	6a21      	ldr	r1, [r4, #32]
 800e190:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800e192:	4643      	mov	r3, r8
 800e194:	463a      	mov	r2, r7
 800e196:	4628      	mov	r0, r5
 800e198:	47b0      	blx	r6
 800e19a:	2800      	cmp	r0, #0
 800e19c:	dc08      	bgt.n	800e1b0 <__sflush_r+0xfc>
 800e19e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e1a6:	81a3      	strh	r3, [r4, #12]
 800e1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1b0:	4407      	add	r7, r0
 800e1b2:	eba8 0800 	sub.w	r8, r8, r0
 800e1b6:	e7e7      	b.n	800e188 <__sflush_r+0xd4>
 800e1b8:	dfbffffe 	.word	0xdfbffffe

0800e1bc <_fflush_r>:
 800e1bc:	b538      	push	{r3, r4, r5, lr}
 800e1be:	690b      	ldr	r3, [r1, #16]
 800e1c0:	4605      	mov	r5, r0
 800e1c2:	460c      	mov	r4, r1
 800e1c4:	b913      	cbnz	r3, 800e1cc <_fflush_r+0x10>
 800e1c6:	2500      	movs	r5, #0
 800e1c8:	4628      	mov	r0, r5
 800e1ca:	bd38      	pop	{r3, r4, r5, pc}
 800e1cc:	b118      	cbz	r0, 800e1d6 <_fflush_r+0x1a>
 800e1ce:	6a03      	ldr	r3, [r0, #32]
 800e1d0:	b90b      	cbnz	r3, 800e1d6 <_fflush_r+0x1a>
 800e1d2:	f7fe fa21 	bl	800c618 <__sinit>
 800e1d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e1da:	2b00      	cmp	r3, #0
 800e1dc:	d0f3      	beq.n	800e1c6 <_fflush_r+0xa>
 800e1de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800e1e0:	07d0      	lsls	r0, r2, #31
 800e1e2:	d404      	bmi.n	800e1ee <_fflush_r+0x32>
 800e1e4:	0599      	lsls	r1, r3, #22
 800e1e6:	d402      	bmi.n	800e1ee <_fflush_r+0x32>
 800e1e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e1ea:	f7fe fb2a 	bl	800c842 <__retarget_lock_acquire_recursive>
 800e1ee:	4628      	mov	r0, r5
 800e1f0:	4621      	mov	r1, r4
 800e1f2:	f7ff ff5f 	bl	800e0b4 <__sflush_r>
 800e1f6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e1f8:	07da      	lsls	r2, r3, #31
 800e1fa:	4605      	mov	r5, r0
 800e1fc:	d4e4      	bmi.n	800e1c8 <_fflush_r+0xc>
 800e1fe:	89a3      	ldrh	r3, [r4, #12]
 800e200:	059b      	lsls	r3, r3, #22
 800e202:	d4e1      	bmi.n	800e1c8 <_fflush_r+0xc>
 800e204:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e206:	f7fe fb1d 	bl	800c844 <__retarget_lock_release_recursive>
 800e20a:	e7dd      	b.n	800e1c8 <_fflush_r+0xc>

0800e20c <memmove>:
 800e20c:	4288      	cmp	r0, r1
 800e20e:	b510      	push	{r4, lr}
 800e210:	eb01 0402 	add.w	r4, r1, r2
 800e214:	d902      	bls.n	800e21c <memmove+0x10>
 800e216:	4284      	cmp	r4, r0
 800e218:	4623      	mov	r3, r4
 800e21a:	d807      	bhi.n	800e22c <memmove+0x20>
 800e21c:	1e43      	subs	r3, r0, #1
 800e21e:	42a1      	cmp	r1, r4
 800e220:	d008      	beq.n	800e234 <memmove+0x28>
 800e222:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e226:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e22a:	e7f8      	b.n	800e21e <memmove+0x12>
 800e22c:	4402      	add	r2, r0
 800e22e:	4601      	mov	r1, r0
 800e230:	428a      	cmp	r2, r1
 800e232:	d100      	bne.n	800e236 <memmove+0x2a>
 800e234:	bd10      	pop	{r4, pc}
 800e236:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e23a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e23e:	e7f7      	b.n	800e230 <memmove+0x24>

0800e240 <_sbrk_r>:
 800e240:	b538      	push	{r3, r4, r5, lr}
 800e242:	4d06      	ldr	r5, [pc, #24]	@ (800e25c <_sbrk_r+0x1c>)
 800e244:	2300      	movs	r3, #0
 800e246:	4604      	mov	r4, r0
 800e248:	4608      	mov	r0, r1
 800e24a:	602b      	str	r3, [r5, #0]
 800e24c:	f001 faa6 	bl	800f79c <_sbrk>
 800e250:	1c43      	adds	r3, r0, #1
 800e252:	d102      	bne.n	800e25a <_sbrk_r+0x1a>
 800e254:	682b      	ldr	r3, [r5, #0]
 800e256:	b103      	cbz	r3, 800e25a <_sbrk_r+0x1a>
 800e258:	6023      	str	r3, [r4, #0]
 800e25a:	bd38      	pop	{r3, r4, r5, pc}
 800e25c:	20013d78 	.word	0x20013d78

0800e260 <__assert_func>:
 800e260:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e262:	4614      	mov	r4, r2
 800e264:	461a      	mov	r2, r3
 800e266:	4b09      	ldr	r3, [pc, #36]	@ (800e28c <__assert_func+0x2c>)
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	4605      	mov	r5, r0
 800e26c:	68d8      	ldr	r0, [r3, #12]
 800e26e:	b954      	cbnz	r4, 800e286 <__assert_func+0x26>
 800e270:	4b07      	ldr	r3, [pc, #28]	@ (800e290 <__assert_func+0x30>)
 800e272:	461c      	mov	r4, r3
 800e274:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e278:	9100      	str	r1, [sp, #0]
 800e27a:	462b      	mov	r3, r5
 800e27c:	4905      	ldr	r1, [pc, #20]	@ (800e294 <__assert_func+0x34>)
 800e27e:	f000 f86f 	bl	800e360 <fiprintf>
 800e282:	f000 f87f 	bl	800e384 <abort>
 800e286:	4b04      	ldr	r3, [pc, #16]	@ (800e298 <__assert_func+0x38>)
 800e288:	e7f4      	b.n	800e274 <__assert_func+0x14>
 800e28a:	bf00      	nop
 800e28c:	20000020 	.word	0x20000020
 800e290:	0800fdc6 	.word	0x0800fdc6
 800e294:	0800fd98 	.word	0x0800fd98
 800e298:	0800fd8b 	.word	0x0800fd8b

0800e29c <_calloc_r>:
 800e29c:	b570      	push	{r4, r5, r6, lr}
 800e29e:	fba1 5402 	umull	r5, r4, r1, r2
 800e2a2:	b93c      	cbnz	r4, 800e2b4 <_calloc_r+0x18>
 800e2a4:	4629      	mov	r1, r5
 800e2a6:	f7ff f99f 	bl	800d5e8 <_malloc_r>
 800e2aa:	4606      	mov	r6, r0
 800e2ac:	b928      	cbnz	r0, 800e2ba <_calloc_r+0x1e>
 800e2ae:	2600      	movs	r6, #0
 800e2b0:	4630      	mov	r0, r6
 800e2b2:	bd70      	pop	{r4, r5, r6, pc}
 800e2b4:	220c      	movs	r2, #12
 800e2b6:	6002      	str	r2, [r0, #0]
 800e2b8:	e7f9      	b.n	800e2ae <_calloc_r+0x12>
 800e2ba:	462a      	mov	r2, r5
 800e2bc:	4621      	mov	r1, r4
 800e2be:	f7fe fa54 	bl	800c76a <memset>
 800e2c2:	e7f5      	b.n	800e2b0 <_calloc_r+0x14>

0800e2c4 <__ascii_mbtowc>:
 800e2c4:	b082      	sub	sp, #8
 800e2c6:	b901      	cbnz	r1, 800e2ca <__ascii_mbtowc+0x6>
 800e2c8:	a901      	add	r1, sp, #4
 800e2ca:	b142      	cbz	r2, 800e2de <__ascii_mbtowc+0x1a>
 800e2cc:	b14b      	cbz	r3, 800e2e2 <__ascii_mbtowc+0x1e>
 800e2ce:	7813      	ldrb	r3, [r2, #0]
 800e2d0:	600b      	str	r3, [r1, #0]
 800e2d2:	7812      	ldrb	r2, [r2, #0]
 800e2d4:	1e10      	subs	r0, r2, #0
 800e2d6:	bf18      	it	ne
 800e2d8:	2001      	movne	r0, #1
 800e2da:	b002      	add	sp, #8
 800e2dc:	4770      	bx	lr
 800e2de:	4610      	mov	r0, r2
 800e2e0:	e7fb      	b.n	800e2da <__ascii_mbtowc+0x16>
 800e2e2:	f06f 0001 	mvn.w	r0, #1
 800e2e6:	e7f8      	b.n	800e2da <__ascii_mbtowc+0x16>

0800e2e8 <_realloc_r>:
 800e2e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e2ec:	4680      	mov	r8, r0
 800e2ee:	4615      	mov	r5, r2
 800e2f0:	460c      	mov	r4, r1
 800e2f2:	b921      	cbnz	r1, 800e2fe <_realloc_r+0x16>
 800e2f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2f8:	4611      	mov	r1, r2
 800e2fa:	f7ff b975 	b.w	800d5e8 <_malloc_r>
 800e2fe:	b92a      	cbnz	r2, 800e30c <_realloc_r+0x24>
 800e300:	f7ff f8fe 	bl	800d500 <_free_r>
 800e304:	2400      	movs	r4, #0
 800e306:	4620      	mov	r0, r4
 800e308:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e30c:	f000 f841 	bl	800e392 <_malloc_usable_size_r>
 800e310:	4285      	cmp	r5, r0
 800e312:	4606      	mov	r6, r0
 800e314:	d802      	bhi.n	800e31c <_realloc_r+0x34>
 800e316:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800e31a:	d8f4      	bhi.n	800e306 <_realloc_r+0x1e>
 800e31c:	4629      	mov	r1, r5
 800e31e:	4640      	mov	r0, r8
 800e320:	f7ff f962 	bl	800d5e8 <_malloc_r>
 800e324:	4607      	mov	r7, r0
 800e326:	2800      	cmp	r0, #0
 800e328:	d0ec      	beq.n	800e304 <_realloc_r+0x1c>
 800e32a:	42b5      	cmp	r5, r6
 800e32c:	462a      	mov	r2, r5
 800e32e:	4621      	mov	r1, r4
 800e330:	bf28      	it	cs
 800e332:	4632      	movcs	r2, r6
 800e334:	f7fe fa87 	bl	800c846 <memcpy>
 800e338:	4621      	mov	r1, r4
 800e33a:	4640      	mov	r0, r8
 800e33c:	f7ff f8e0 	bl	800d500 <_free_r>
 800e340:	463c      	mov	r4, r7
 800e342:	e7e0      	b.n	800e306 <_realloc_r+0x1e>

0800e344 <__ascii_wctomb>:
 800e344:	4603      	mov	r3, r0
 800e346:	4608      	mov	r0, r1
 800e348:	b141      	cbz	r1, 800e35c <__ascii_wctomb+0x18>
 800e34a:	2aff      	cmp	r2, #255	@ 0xff
 800e34c:	d904      	bls.n	800e358 <__ascii_wctomb+0x14>
 800e34e:	228a      	movs	r2, #138	@ 0x8a
 800e350:	601a      	str	r2, [r3, #0]
 800e352:	f04f 30ff 	mov.w	r0, #4294967295
 800e356:	4770      	bx	lr
 800e358:	700a      	strb	r2, [r1, #0]
 800e35a:	2001      	movs	r0, #1
 800e35c:	4770      	bx	lr
	...

0800e360 <fiprintf>:
 800e360:	b40e      	push	{r1, r2, r3}
 800e362:	b503      	push	{r0, r1, lr}
 800e364:	4601      	mov	r1, r0
 800e366:	ab03      	add	r3, sp, #12
 800e368:	4805      	ldr	r0, [pc, #20]	@ (800e380 <fiprintf+0x20>)
 800e36a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e36e:	6800      	ldr	r0, [r0, #0]
 800e370:	9301      	str	r3, [sp, #4]
 800e372:	f000 f83f 	bl	800e3f4 <_vfiprintf_r>
 800e376:	b002      	add	sp, #8
 800e378:	f85d eb04 	ldr.w	lr, [sp], #4
 800e37c:	b003      	add	sp, #12
 800e37e:	4770      	bx	lr
 800e380:	20000020 	.word	0x20000020

0800e384 <abort>:
 800e384:	b508      	push	{r3, lr}
 800e386:	2006      	movs	r0, #6
 800e388:	f000 fa08 	bl	800e79c <raise>
 800e38c:	2001      	movs	r0, #1
 800e38e:	f7f4 fbe5 	bl	8002b5c <_exit>

0800e392 <_malloc_usable_size_r>:
 800e392:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e396:	1f18      	subs	r0, r3, #4
 800e398:	2b00      	cmp	r3, #0
 800e39a:	bfbc      	itt	lt
 800e39c:	580b      	ldrlt	r3, [r1, r0]
 800e39e:	18c0      	addlt	r0, r0, r3
 800e3a0:	4770      	bx	lr

0800e3a2 <__sfputc_r>:
 800e3a2:	6893      	ldr	r3, [r2, #8]
 800e3a4:	3b01      	subs	r3, #1
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	b410      	push	{r4}
 800e3aa:	6093      	str	r3, [r2, #8]
 800e3ac:	da08      	bge.n	800e3c0 <__sfputc_r+0x1e>
 800e3ae:	6994      	ldr	r4, [r2, #24]
 800e3b0:	42a3      	cmp	r3, r4
 800e3b2:	db01      	blt.n	800e3b8 <__sfputc_r+0x16>
 800e3b4:	290a      	cmp	r1, #10
 800e3b6:	d103      	bne.n	800e3c0 <__sfputc_r+0x1e>
 800e3b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3bc:	f000 b932 	b.w	800e624 <__swbuf_r>
 800e3c0:	6813      	ldr	r3, [r2, #0]
 800e3c2:	1c58      	adds	r0, r3, #1
 800e3c4:	6010      	str	r0, [r2, #0]
 800e3c6:	7019      	strb	r1, [r3, #0]
 800e3c8:	4608      	mov	r0, r1
 800e3ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3ce:	4770      	bx	lr

0800e3d0 <__sfputs_r>:
 800e3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3d2:	4606      	mov	r6, r0
 800e3d4:	460f      	mov	r7, r1
 800e3d6:	4614      	mov	r4, r2
 800e3d8:	18d5      	adds	r5, r2, r3
 800e3da:	42ac      	cmp	r4, r5
 800e3dc:	d101      	bne.n	800e3e2 <__sfputs_r+0x12>
 800e3de:	2000      	movs	r0, #0
 800e3e0:	e007      	b.n	800e3f2 <__sfputs_r+0x22>
 800e3e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e3e6:	463a      	mov	r2, r7
 800e3e8:	4630      	mov	r0, r6
 800e3ea:	f7ff ffda 	bl	800e3a2 <__sfputc_r>
 800e3ee:	1c43      	adds	r3, r0, #1
 800e3f0:	d1f3      	bne.n	800e3da <__sfputs_r+0xa>
 800e3f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e3f4 <_vfiprintf_r>:
 800e3f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3f8:	460d      	mov	r5, r1
 800e3fa:	b09d      	sub	sp, #116	@ 0x74
 800e3fc:	4614      	mov	r4, r2
 800e3fe:	4698      	mov	r8, r3
 800e400:	4606      	mov	r6, r0
 800e402:	b118      	cbz	r0, 800e40c <_vfiprintf_r+0x18>
 800e404:	6a03      	ldr	r3, [r0, #32]
 800e406:	b90b      	cbnz	r3, 800e40c <_vfiprintf_r+0x18>
 800e408:	f7fe f906 	bl	800c618 <__sinit>
 800e40c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e40e:	07d9      	lsls	r1, r3, #31
 800e410:	d405      	bmi.n	800e41e <_vfiprintf_r+0x2a>
 800e412:	89ab      	ldrh	r3, [r5, #12]
 800e414:	059a      	lsls	r2, r3, #22
 800e416:	d402      	bmi.n	800e41e <_vfiprintf_r+0x2a>
 800e418:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e41a:	f7fe fa12 	bl	800c842 <__retarget_lock_acquire_recursive>
 800e41e:	89ab      	ldrh	r3, [r5, #12]
 800e420:	071b      	lsls	r3, r3, #28
 800e422:	d501      	bpl.n	800e428 <_vfiprintf_r+0x34>
 800e424:	692b      	ldr	r3, [r5, #16]
 800e426:	b99b      	cbnz	r3, 800e450 <_vfiprintf_r+0x5c>
 800e428:	4629      	mov	r1, r5
 800e42a:	4630      	mov	r0, r6
 800e42c:	f000 f938 	bl	800e6a0 <__swsetup_r>
 800e430:	b170      	cbz	r0, 800e450 <_vfiprintf_r+0x5c>
 800e432:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e434:	07dc      	lsls	r4, r3, #31
 800e436:	d504      	bpl.n	800e442 <_vfiprintf_r+0x4e>
 800e438:	f04f 30ff 	mov.w	r0, #4294967295
 800e43c:	b01d      	add	sp, #116	@ 0x74
 800e43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e442:	89ab      	ldrh	r3, [r5, #12]
 800e444:	0598      	lsls	r0, r3, #22
 800e446:	d4f7      	bmi.n	800e438 <_vfiprintf_r+0x44>
 800e448:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e44a:	f7fe f9fb 	bl	800c844 <__retarget_lock_release_recursive>
 800e44e:	e7f3      	b.n	800e438 <_vfiprintf_r+0x44>
 800e450:	2300      	movs	r3, #0
 800e452:	9309      	str	r3, [sp, #36]	@ 0x24
 800e454:	2320      	movs	r3, #32
 800e456:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800e45a:	f8cd 800c 	str.w	r8, [sp, #12]
 800e45e:	2330      	movs	r3, #48	@ 0x30
 800e460:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800e610 <_vfiprintf_r+0x21c>
 800e464:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800e468:	f04f 0901 	mov.w	r9, #1
 800e46c:	4623      	mov	r3, r4
 800e46e:	469a      	mov	sl, r3
 800e470:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e474:	b10a      	cbz	r2, 800e47a <_vfiprintf_r+0x86>
 800e476:	2a25      	cmp	r2, #37	@ 0x25
 800e478:	d1f9      	bne.n	800e46e <_vfiprintf_r+0x7a>
 800e47a:	ebba 0b04 	subs.w	fp, sl, r4
 800e47e:	d00b      	beq.n	800e498 <_vfiprintf_r+0xa4>
 800e480:	465b      	mov	r3, fp
 800e482:	4622      	mov	r2, r4
 800e484:	4629      	mov	r1, r5
 800e486:	4630      	mov	r0, r6
 800e488:	f7ff ffa2 	bl	800e3d0 <__sfputs_r>
 800e48c:	3001      	adds	r0, #1
 800e48e:	f000 80a7 	beq.w	800e5e0 <_vfiprintf_r+0x1ec>
 800e492:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e494:	445a      	add	r2, fp
 800e496:	9209      	str	r2, [sp, #36]	@ 0x24
 800e498:	f89a 3000 	ldrb.w	r3, [sl]
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	f000 809f 	beq.w	800e5e0 <_vfiprintf_r+0x1ec>
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	f04f 32ff 	mov.w	r2, #4294967295
 800e4a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e4ac:	f10a 0a01 	add.w	sl, sl, #1
 800e4b0:	9304      	str	r3, [sp, #16]
 800e4b2:	9307      	str	r3, [sp, #28]
 800e4b4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800e4b8:	931a      	str	r3, [sp, #104]	@ 0x68
 800e4ba:	4654      	mov	r4, sl
 800e4bc:	2205      	movs	r2, #5
 800e4be:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e4c2:	4853      	ldr	r0, [pc, #332]	@ (800e610 <_vfiprintf_r+0x21c>)
 800e4c4:	f7f1 fed4 	bl	8000270 <memchr>
 800e4c8:	9a04      	ldr	r2, [sp, #16]
 800e4ca:	b9d8      	cbnz	r0, 800e504 <_vfiprintf_r+0x110>
 800e4cc:	06d1      	lsls	r1, r2, #27
 800e4ce:	bf44      	itt	mi
 800e4d0:	2320      	movmi	r3, #32
 800e4d2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4d6:	0713      	lsls	r3, r2, #28
 800e4d8:	bf44      	itt	mi
 800e4da:	232b      	movmi	r3, #43	@ 0x2b
 800e4dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800e4e0:	f89a 3000 	ldrb.w	r3, [sl]
 800e4e4:	2b2a      	cmp	r3, #42	@ 0x2a
 800e4e6:	d015      	beq.n	800e514 <_vfiprintf_r+0x120>
 800e4e8:	9a07      	ldr	r2, [sp, #28]
 800e4ea:	4654      	mov	r4, sl
 800e4ec:	2000      	movs	r0, #0
 800e4ee:	f04f 0c0a 	mov.w	ip, #10
 800e4f2:	4621      	mov	r1, r4
 800e4f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e4f8:	3b30      	subs	r3, #48	@ 0x30
 800e4fa:	2b09      	cmp	r3, #9
 800e4fc:	d94b      	bls.n	800e596 <_vfiprintf_r+0x1a2>
 800e4fe:	b1b0      	cbz	r0, 800e52e <_vfiprintf_r+0x13a>
 800e500:	9207      	str	r2, [sp, #28]
 800e502:	e014      	b.n	800e52e <_vfiprintf_r+0x13a>
 800e504:	eba0 0308 	sub.w	r3, r0, r8
 800e508:	fa09 f303 	lsl.w	r3, r9, r3
 800e50c:	4313      	orrs	r3, r2
 800e50e:	9304      	str	r3, [sp, #16]
 800e510:	46a2      	mov	sl, r4
 800e512:	e7d2      	b.n	800e4ba <_vfiprintf_r+0xc6>
 800e514:	9b03      	ldr	r3, [sp, #12]
 800e516:	1d19      	adds	r1, r3, #4
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	9103      	str	r1, [sp, #12]
 800e51c:	2b00      	cmp	r3, #0
 800e51e:	bfbb      	ittet	lt
 800e520:	425b      	neglt	r3, r3
 800e522:	f042 0202 	orrlt.w	r2, r2, #2
 800e526:	9307      	strge	r3, [sp, #28]
 800e528:	9307      	strlt	r3, [sp, #28]
 800e52a:	bfb8      	it	lt
 800e52c:	9204      	strlt	r2, [sp, #16]
 800e52e:	7823      	ldrb	r3, [r4, #0]
 800e530:	2b2e      	cmp	r3, #46	@ 0x2e
 800e532:	d10a      	bne.n	800e54a <_vfiprintf_r+0x156>
 800e534:	7863      	ldrb	r3, [r4, #1]
 800e536:	2b2a      	cmp	r3, #42	@ 0x2a
 800e538:	d132      	bne.n	800e5a0 <_vfiprintf_r+0x1ac>
 800e53a:	9b03      	ldr	r3, [sp, #12]
 800e53c:	1d1a      	adds	r2, r3, #4
 800e53e:	681b      	ldr	r3, [r3, #0]
 800e540:	9203      	str	r2, [sp, #12]
 800e542:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800e546:	3402      	adds	r4, #2
 800e548:	9305      	str	r3, [sp, #20]
 800e54a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800e620 <_vfiprintf_r+0x22c>
 800e54e:	7821      	ldrb	r1, [r4, #0]
 800e550:	2203      	movs	r2, #3
 800e552:	4650      	mov	r0, sl
 800e554:	f7f1 fe8c 	bl	8000270 <memchr>
 800e558:	b138      	cbz	r0, 800e56a <_vfiprintf_r+0x176>
 800e55a:	9b04      	ldr	r3, [sp, #16]
 800e55c:	eba0 000a 	sub.w	r0, r0, sl
 800e560:	2240      	movs	r2, #64	@ 0x40
 800e562:	4082      	lsls	r2, r0
 800e564:	4313      	orrs	r3, r2
 800e566:	3401      	adds	r4, #1
 800e568:	9304      	str	r3, [sp, #16]
 800e56a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e56e:	4829      	ldr	r0, [pc, #164]	@ (800e614 <_vfiprintf_r+0x220>)
 800e570:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800e574:	2206      	movs	r2, #6
 800e576:	f7f1 fe7b 	bl	8000270 <memchr>
 800e57a:	2800      	cmp	r0, #0
 800e57c:	d03f      	beq.n	800e5fe <_vfiprintf_r+0x20a>
 800e57e:	4b26      	ldr	r3, [pc, #152]	@ (800e618 <_vfiprintf_r+0x224>)
 800e580:	bb1b      	cbnz	r3, 800e5ca <_vfiprintf_r+0x1d6>
 800e582:	9b03      	ldr	r3, [sp, #12]
 800e584:	3307      	adds	r3, #7
 800e586:	f023 0307 	bic.w	r3, r3, #7
 800e58a:	3308      	adds	r3, #8
 800e58c:	9303      	str	r3, [sp, #12]
 800e58e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e590:	443b      	add	r3, r7
 800e592:	9309      	str	r3, [sp, #36]	@ 0x24
 800e594:	e76a      	b.n	800e46c <_vfiprintf_r+0x78>
 800e596:	fb0c 3202 	mla	r2, ip, r2, r3
 800e59a:	460c      	mov	r4, r1
 800e59c:	2001      	movs	r0, #1
 800e59e:	e7a8      	b.n	800e4f2 <_vfiprintf_r+0xfe>
 800e5a0:	2300      	movs	r3, #0
 800e5a2:	3401      	adds	r4, #1
 800e5a4:	9305      	str	r3, [sp, #20]
 800e5a6:	4619      	mov	r1, r3
 800e5a8:	f04f 0c0a 	mov.w	ip, #10
 800e5ac:	4620      	mov	r0, r4
 800e5ae:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e5b2:	3a30      	subs	r2, #48	@ 0x30
 800e5b4:	2a09      	cmp	r2, #9
 800e5b6:	d903      	bls.n	800e5c0 <_vfiprintf_r+0x1cc>
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d0c6      	beq.n	800e54a <_vfiprintf_r+0x156>
 800e5bc:	9105      	str	r1, [sp, #20]
 800e5be:	e7c4      	b.n	800e54a <_vfiprintf_r+0x156>
 800e5c0:	fb0c 2101 	mla	r1, ip, r1, r2
 800e5c4:	4604      	mov	r4, r0
 800e5c6:	2301      	movs	r3, #1
 800e5c8:	e7f0      	b.n	800e5ac <_vfiprintf_r+0x1b8>
 800e5ca:	ab03      	add	r3, sp, #12
 800e5cc:	9300      	str	r3, [sp, #0]
 800e5ce:	462a      	mov	r2, r5
 800e5d0:	4b12      	ldr	r3, [pc, #72]	@ (800e61c <_vfiprintf_r+0x228>)
 800e5d2:	a904      	add	r1, sp, #16
 800e5d4:	4630      	mov	r0, r6
 800e5d6:	f7fd fbdb 	bl	800bd90 <_printf_float>
 800e5da:	4607      	mov	r7, r0
 800e5dc:	1c78      	adds	r0, r7, #1
 800e5de:	d1d6      	bne.n	800e58e <_vfiprintf_r+0x19a>
 800e5e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800e5e2:	07d9      	lsls	r1, r3, #31
 800e5e4:	d405      	bmi.n	800e5f2 <_vfiprintf_r+0x1fe>
 800e5e6:	89ab      	ldrh	r3, [r5, #12]
 800e5e8:	059a      	lsls	r2, r3, #22
 800e5ea:	d402      	bmi.n	800e5f2 <_vfiprintf_r+0x1fe>
 800e5ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800e5ee:	f7fe f929 	bl	800c844 <__retarget_lock_release_recursive>
 800e5f2:	89ab      	ldrh	r3, [r5, #12]
 800e5f4:	065b      	lsls	r3, r3, #25
 800e5f6:	f53f af1f 	bmi.w	800e438 <_vfiprintf_r+0x44>
 800e5fa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800e5fc:	e71e      	b.n	800e43c <_vfiprintf_r+0x48>
 800e5fe:	ab03      	add	r3, sp, #12
 800e600:	9300      	str	r3, [sp, #0]
 800e602:	462a      	mov	r2, r5
 800e604:	4b05      	ldr	r3, [pc, #20]	@ (800e61c <_vfiprintf_r+0x228>)
 800e606:	a904      	add	r1, sp, #16
 800e608:	4630      	mov	r0, r6
 800e60a:	f7fd fe59 	bl	800c2c0 <_printf_i>
 800e60e:	e7e4      	b.n	800e5da <_vfiprintf_r+0x1e6>
 800e610:	0800fd70 	.word	0x0800fd70
 800e614:	0800fd7a 	.word	0x0800fd7a
 800e618:	0800bd91 	.word	0x0800bd91
 800e61c:	0800e3d1 	.word	0x0800e3d1
 800e620:	0800fd76 	.word	0x0800fd76

0800e624 <__swbuf_r>:
 800e624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e626:	460e      	mov	r6, r1
 800e628:	4614      	mov	r4, r2
 800e62a:	4605      	mov	r5, r0
 800e62c:	b118      	cbz	r0, 800e636 <__swbuf_r+0x12>
 800e62e:	6a03      	ldr	r3, [r0, #32]
 800e630:	b90b      	cbnz	r3, 800e636 <__swbuf_r+0x12>
 800e632:	f7fd fff1 	bl	800c618 <__sinit>
 800e636:	69a3      	ldr	r3, [r4, #24]
 800e638:	60a3      	str	r3, [r4, #8]
 800e63a:	89a3      	ldrh	r3, [r4, #12]
 800e63c:	071a      	lsls	r2, r3, #28
 800e63e:	d501      	bpl.n	800e644 <__swbuf_r+0x20>
 800e640:	6923      	ldr	r3, [r4, #16]
 800e642:	b943      	cbnz	r3, 800e656 <__swbuf_r+0x32>
 800e644:	4621      	mov	r1, r4
 800e646:	4628      	mov	r0, r5
 800e648:	f000 f82a 	bl	800e6a0 <__swsetup_r>
 800e64c:	b118      	cbz	r0, 800e656 <__swbuf_r+0x32>
 800e64e:	f04f 37ff 	mov.w	r7, #4294967295
 800e652:	4638      	mov	r0, r7
 800e654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e656:	6823      	ldr	r3, [r4, #0]
 800e658:	6922      	ldr	r2, [r4, #16]
 800e65a:	1a98      	subs	r0, r3, r2
 800e65c:	6963      	ldr	r3, [r4, #20]
 800e65e:	b2f6      	uxtb	r6, r6
 800e660:	4283      	cmp	r3, r0
 800e662:	4637      	mov	r7, r6
 800e664:	dc05      	bgt.n	800e672 <__swbuf_r+0x4e>
 800e666:	4621      	mov	r1, r4
 800e668:	4628      	mov	r0, r5
 800e66a:	f7ff fda7 	bl	800e1bc <_fflush_r>
 800e66e:	2800      	cmp	r0, #0
 800e670:	d1ed      	bne.n	800e64e <__swbuf_r+0x2a>
 800e672:	68a3      	ldr	r3, [r4, #8]
 800e674:	3b01      	subs	r3, #1
 800e676:	60a3      	str	r3, [r4, #8]
 800e678:	6823      	ldr	r3, [r4, #0]
 800e67a:	1c5a      	adds	r2, r3, #1
 800e67c:	6022      	str	r2, [r4, #0]
 800e67e:	701e      	strb	r6, [r3, #0]
 800e680:	6962      	ldr	r2, [r4, #20]
 800e682:	1c43      	adds	r3, r0, #1
 800e684:	429a      	cmp	r2, r3
 800e686:	d004      	beq.n	800e692 <__swbuf_r+0x6e>
 800e688:	89a3      	ldrh	r3, [r4, #12]
 800e68a:	07db      	lsls	r3, r3, #31
 800e68c:	d5e1      	bpl.n	800e652 <__swbuf_r+0x2e>
 800e68e:	2e0a      	cmp	r6, #10
 800e690:	d1df      	bne.n	800e652 <__swbuf_r+0x2e>
 800e692:	4621      	mov	r1, r4
 800e694:	4628      	mov	r0, r5
 800e696:	f7ff fd91 	bl	800e1bc <_fflush_r>
 800e69a:	2800      	cmp	r0, #0
 800e69c:	d0d9      	beq.n	800e652 <__swbuf_r+0x2e>
 800e69e:	e7d6      	b.n	800e64e <__swbuf_r+0x2a>

0800e6a0 <__swsetup_r>:
 800e6a0:	b538      	push	{r3, r4, r5, lr}
 800e6a2:	4b29      	ldr	r3, [pc, #164]	@ (800e748 <__swsetup_r+0xa8>)
 800e6a4:	4605      	mov	r5, r0
 800e6a6:	6818      	ldr	r0, [r3, #0]
 800e6a8:	460c      	mov	r4, r1
 800e6aa:	b118      	cbz	r0, 800e6b4 <__swsetup_r+0x14>
 800e6ac:	6a03      	ldr	r3, [r0, #32]
 800e6ae:	b90b      	cbnz	r3, 800e6b4 <__swsetup_r+0x14>
 800e6b0:	f7fd ffb2 	bl	800c618 <__sinit>
 800e6b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e6b8:	0719      	lsls	r1, r3, #28
 800e6ba:	d422      	bmi.n	800e702 <__swsetup_r+0x62>
 800e6bc:	06da      	lsls	r2, r3, #27
 800e6be:	d407      	bmi.n	800e6d0 <__swsetup_r+0x30>
 800e6c0:	2209      	movs	r2, #9
 800e6c2:	602a      	str	r2, [r5, #0]
 800e6c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e6c8:	81a3      	strh	r3, [r4, #12]
 800e6ca:	f04f 30ff 	mov.w	r0, #4294967295
 800e6ce:	e033      	b.n	800e738 <__swsetup_r+0x98>
 800e6d0:	0758      	lsls	r0, r3, #29
 800e6d2:	d512      	bpl.n	800e6fa <__swsetup_r+0x5a>
 800e6d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e6d6:	b141      	cbz	r1, 800e6ea <__swsetup_r+0x4a>
 800e6d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e6dc:	4299      	cmp	r1, r3
 800e6de:	d002      	beq.n	800e6e6 <__swsetup_r+0x46>
 800e6e0:	4628      	mov	r0, r5
 800e6e2:	f7fe ff0d 	bl	800d500 <_free_r>
 800e6e6:	2300      	movs	r3, #0
 800e6e8:	6363      	str	r3, [r4, #52]	@ 0x34
 800e6ea:	89a3      	ldrh	r3, [r4, #12]
 800e6ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e6f0:	81a3      	strh	r3, [r4, #12]
 800e6f2:	2300      	movs	r3, #0
 800e6f4:	6063      	str	r3, [r4, #4]
 800e6f6:	6923      	ldr	r3, [r4, #16]
 800e6f8:	6023      	str	r3, [r4, #0]
 800e6fa:	89a3      	ldrh	r3, [r4, #12]
 800e6fc:	f043 0308 	orr.w	r3, r3, #8
 800e700:	81a3      	strh	r3, [r4, #12]
 800e702:	6923      	ldr	r3, [r4, #16]
 800e704:	b94b      	cbnz	r3, 800e71a <__swsetup_r+0x7a>
 800e706:	89a3      	ldrh	r3, [r4, #12]
 800e708:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e70c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e710:	d003      	beq.n	800e71a <__swsetup_r+0x7a>
 800e712:	4621      	mov	r1, r4
 800e714:	4628      	mov	r0, r5
 800e716:	f000 f883 	bl	800e820 <__smakebuf_r>
 800e71a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e71e:	f013 0201 	ands.w	r2, r3, #1
 800e722:	d00a      	beq.n	800e73a <__swsetup_r+0x9a>
 800e724:	2200      	movs	r2, #0
 800e726:	60a2      	str	r2, [r4, #8]
 800e728:	6962      	ldr	r2, [r4, #20]
 800e72a:	4252      	negs	r2, r2
 800e72c:	61a2      	str	r2, [r4, #24]
 800e72e:	6922      	ldr	r2, [r4, #16]
 800e730:	b942      	cbnz	r2, 800e744 <__swsetup_r+0xa4>
 800e732:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e736:	d1c5      	bne.n	800e6c4 <__swsetup_r+0x24>
 800e738:	bd38      	pop	{r3, r4, r5, pc}
 800e73a:	0799      	lsls	r1, r3, #30
 800e73c:	bf58      	it	pl
 800e73e:	6962      	ldrpl	r2, [r4, #20]
 800e740:	60a2      	str	r2, [r4, #8]
 800e742:	e7f4      	b.n	800e72e <__swsetup_r+0x8e>
 800e744:	2000      	movs	r0, #0
 800e746:	e7f7      	b.n	800e738 <__swsetup_r+0x98>
 800e748:	20000020 	.word	0x20000020

0800e74c <_raise_r>:
 800e74c:	291f      	cmp	r1, #31
 800e74e:	b538      	push	{r3, r4, r5, lr}
 800e750:	4605      	mov	r5, r0
 800e752:	460c      	mov	r4, r1
 800e754:	d904      	bls.n	800e760 <_raise_r+0x14>
 800e756:	2316      	movs	r3, #22
 800e758:	6003      	str	r3, [r0, #0]
 800e75a:	f04f 30ff 	mov.w	r0, #4294967295
 800e75e:	bd38      	pop	{r3, r4, r5, pc}
 800e760:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800e762:	b112      	cbz	r2, 800e76a <_raise_r+0x1e>
 800e764:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e768:	b94b      	cbnz	r3, 800e77e <_raise_r+0x32>
 800e76a:	4628      	mov	r0, r5
 800e76c:	f000 f830 	bl	800e7d0 <_getpid_r>
 800e770:	4622      	mov	r2, r4
 800e772:	4601      	mov	r1, r0
 800e774:	4628      	mov	r0, r5
 800e776:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e77a:	f000 b817 	b.w	800e7ac <_kill_r>
 800e77e:	2b01      	cmp	r3, #1
 800e780:	d00a      	beq.n	800e798 <_raise_r+0x4c>
 800e782:	1c59      	adds	r1, r3, #1
 800e784:	d103      	bne.n	800e78e <_raise_r+0x42>
 800e786:	2316      	movs	r3, #22
 800e788:	6003      	str	r3, [r0, #0]
 800e78a:	2001      	movs	r0, #1
 800e78c:	e7e7      	b.n	800e75e <_raise_r+0x12>
 800e78e:	2100      	movs	r1, #0
 800e790:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800e794:	4620      	mov	r0, r4
 800e796:	4798      	blx	r3
 800e798:	2000      	movs	r0, #0
 800e79a:	e7e0      	b.n	800e75e <_raise_r+0x12>

0800e79c <raise>:
 800e79c:	4b02      	ldr	r3, [pc, #8]	@ (800e7a8 <raise+0xc>)
 800e79e:	4601      	mov	r1, r0
 800e7a0:	6818      	ldr	r0, [r3, #0]
 800e7a2:	f7ff bfd3 	b.w	800e74c <_raise_r>
 800e7a6:	bf00      	nop
 800e7a8:	20000020 	.word	0x20000020

0800e7ac <_kill_r>:
 800e7ac:	b538      	push	{r3, r4, r5, lr}
 800e7ae:	4d07      	ldr	r5, [pc, #28]	@ (800e7cc <_kill_r+0x20>)
 800e7b0:	2300      	movs	r3, #0
 800e7b2:	4604      	mov	r4, r0
 800e7b4:	4608      	mov	r0, r1
 800e7b6:	4611      	mov	r1, r2
 800e7b8:	602b      	str	r3, [r5, #0]
 800e7ba:	f7f4 f9bf 	bl	8002b3c <_kill>
 800e7be:	1c43      	adds	r3, r0, #1
 800e7c0:	d102      	bne.n	800e7c8 <_kill_r+0x1c>
 800e7c2:	682b      	ldr	r3, [r5, #0]
 800e7c4:	b103      	cbz	r3, 800e7c8 <_kill_r+0x1c>
 800e7c6:	6023      	str	r3, [r4, #0]
 800e7c8:	bd38      	pop	{r3, r4, r5, pc}
 800e7ca:	bf00      	nop
 800e7cc:	20013d78 	.word	0x20013d78

0800e7d0 <_getpid_r>:
 800e7d0:	f7f4 b9ac 	b.w	8002b2c <_getpid>

0800e7d4 <__swhatbuf_r>:
 800e7d4:	b570      	push	{r4, r5, r6, lr}
 800e7d6:	460c      	mov	r4, r1
 800e7d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7dc:	2900      	cmp	r1, #0
 800e7de:	b096      	sub	sp, #88	@ 0x58
 800e7e0:	4615      	mov	r5, r2
 800e7e2:	461e      	mov	r6, r3
 800e7e4:	da0d      	bge.n	800e802 <__swhatbuf_r+0x2e>
 800e7e6:	89a3      	ldrh	r3, [r4, #12]
 800e7e8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800e7ec:	f04f 0100 	mov.w	r1, #0
 800e7f0:	bf14      	ite	ne
 800e7f2:	2340      	movne	r3, #64	@ 0x40
 800e7f4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800e7f8:	2000      	movs	r0, #0
 800e7fa:	6031      	str	r1, [r6, #0]
 800e7fc:	602b      	str	r3, [r5, #0]
 800e7fe:	b016      	add	sp, #88	@ 0x58
 800e800:	bd70      	pop	{r4, r5, r6, pc}
 800e802:	466a      	mov	r2, sp
 800e804:	f000 f848 	bl	800e898 <_fstat_r>
 800e808:	2800      	cmp	r0, #0
 800e80a:	dbec      	blt.n	800e7e6 <__swhatbuf_r+0x12>
 800e80c:	9901      	ldr	r1, [sp, #4]
 800e80e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800e812:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800e816:	4259      	negs	r1, r3
 800e818:	4159      	adcs	r1, r3
 800e81a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e81e:	e7eb      	b.n	800e7f8 <__swhatbuf_r+0x24>

0800e820 <__smakebuf_r>:
 800e820:	898b      	ldrh	r3, [r1, #12]
 800e822:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800e824:	079d      	lsls	r5, r3, #30
 800e826:	4606      	mov	r6, r0
 800e828:	460c      	mov	r4, r1
 800e82a:	d507      	bpl.n	800e83c <__smakebuf_r+0x1c>
 800e82c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800e830:	6023      	str	r3, [r4, #0]
 800e832:	6123      	str	r3, [r4, #16]
 800e834:	2301      	movs	r3, #1
 800e836:	6163      	str	r3, [r4, #20]
 800e838:	b003      	add	sp, #12
 800e83a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e83c:	ab01      	add	r3, sp, #4
 800e83e:	466a      	mov	r2, sp
 800e840:	f7ff ffc8 	bl	800e7d4 <__swhatbuf_r>
 800e844:	9f00      	ldr	r7, [sp, #0]
 800e846:	4605      	mov	r5, r0
 800e848:	4639      	mov	r1, r7
 800e84a:	4630      	mov	r0, r6
 800e84c:	f7fe fecc 	bl	800d5e8 <_malloc_r>
 800e850:	b948      	cbnz	r0, 800e866 <__smakebuf_r+0x46>
 800e852:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e856:	059a      	lsls	r2, r3, #22
 800e858:	d4ee      	bmi.n	800e838 <__smakebuf_r+0x18>
 800e85a:	f023 0303 	bic.w	r3, r3, #3
 800e85e:	f043 0302 	orr.w	r3, r3, #2
 800e862:	81a3      	strh	r3, [r4, #12]
 800e864:	e7e2      	b.n	800e82c <__smakebuf_r+0xc>
 800e866:	89a3      	ldrh	r3, [r4, #12]
 800e868:	6020      	str	r0, [r4, #0]
 800e86a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800e86e:	81a3      	strh	r3, [r4, #12]
 800e870:	9b01      	ldr	r3, [sp, #4]
 800e872:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800e876:	b15b      	cbz	r3, 800e890 <__smakebuf_r+0x70>
 800e878:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e87c:	4630      	mov	r0, r6
 800e87e:	f000 f81d 	bl	800e8bc <_isatty_r>
 800e882:	b128      	cbz	r0, 800e890 <__smakebuf_r+0x70>
 800e884:	89a3      	ldrh	r3, [r4, #12]
 800e886:	f023 0303 	bic.w	r3, r3, #3
 800e88a:	f043 0301 	orr.w	r3, r3, #1
 800e88e:	81a3      	strh	r3, [r4, #12]
 800e890:	89a3      	ldrh	r3, [r4, #12]
 800e892:	431d      	orrs	r5, r3
 800e894:	81a5      	strh	r5, [r4, #12]
 800e896:	e7cf      	b.n	800e838 <__smakebuf_r+0x18>

0800e898 <_fstat_r>:
 800e898:	b538      	push	{r3, r4, r5, lr}
 800e89a:	4d07      	ldr	r5, [pc, #28]	@ (800e8b8 <_fstat_r+0x20>)
 800e89c:	2300      	movs	r3, #0
 800e89e:	4604      	mov	r4, r0
 800e8a0:	4608      	mov	r0, r1
 800e8a2:	4611      	mov	r1, r2
 800e8a4:	602b      	str	r3, [r5, #0]
 800e8a6:	f7f4 f98d 	bl	8002bc4 <_fstat>
 800e8aa:	1c43      	adds	r3, r0, #1
 800e8ac:	d102      	bne.n	800e8b4 <_fstat_r+0x1c>
 800e8ae:	682b      	ldr	r3, [r5, #0]
 800e8b0:	b103      	cbz	r3, 800e8b4 <_fstat_r+0x1c>
 800e8b2:	6023      	str	r3, [r4, #0]
 800e8b4:	bd38      	pop	{r3, r4, r5, pc}
 800e8b6:	bf00      	nop
 800e8b8:	20013d78 	.word	0x20013d78

0800e8bc <_isatty_r>:
 800e8bc:	b538      	push	{r3, r4, r5, lr}
 800e8be:	4d06      	ldr	r5, [pc, #24]	@ (800e8d8 <_isatty_r+0x1c>)
 800e8c0:	2300      	movs	r3, #0
 800e8c2:	4604      	mov	r4, r0
 800e8c4:	4608      	mov	r0, r1
 800e8c6:	602b      	str	r3, [r5, #0]
 800e8c8:	f7f4 f98c 	bl	8002be4 <_isatty>
 800e8cc:	1c43      	adds	r3, r0, #1
 800e8ce:	d102      	bne.n	800e8d6 <_isatty_r+0x1a>
 800e8d0:	682b      	ldr	r3, [r5, #0]
 800e8d2:	b103      	cbz	r3, 800e8d6 <_isatty_r+0x1a>
 800e8d4:	6023      	str	r3, [r4, #0]
 800e8d6:	bd38      	pop	{r3, r4, r5, pc}
 800e8d8:	20013d78 	.word	0x20013d78

0800e8dc <pow>:
 800e8dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8de:	ed2d 8b02 	vpush	{d8}
 800e8e2:	eeb0 8a40 	vmov.f32	s16, s0
 800e8e6:	eef0 8a60 	vmov.f32	s17, s1
 800e8ea:	ec55 4b11 	vmov	r4, r5, d1
 800e8ee:	f000 f873 	bl	800e9d8 <__ieee754_pow>
 800e8f2:	4622      	mov	r2, r4
 800e8f4:	462b      	mov	r3, r5
 800e8f6:	4620      	mov	r0, r4
 800e8f8:	4629      	mov	r1, r5
 800e8fa:	ec57 6b10 	vmov	r6, r7, d0
 800e8fe:	f7f2 f965 	bl	8000bcc <__aeabi_dcmpun>
 800e902:	2800      	cmp	r0, #0
 800e904:	d13b      	bne.n	800e97e <pow+0xa2>
 800e906:	ec51 0b18 	vmov	r0, r1, d8
 800e90a:	2200      	movs	r2, #0
 800e90c:	2300      	movs	r3, #0
 800e90e:	f7f2 f92b 	bl	8000b68 <__aeabi_dcmpeq>
 800e912:	b1b8      	cbz	r0, 800e944 <pow+0x68>
 800e914:	2200      	movs	r2, #0
 800e916:	2300      	movs	r3, #0
 800e918:	4620      	mov	r0, r4
 800e91a:	4629      	mov	r1, r5
 800e91c:	f7f2 f924 	bl	8000b68 <__aeabi_dcmpeq>
 800e920:	2800      	cmp	r0, #0
 800e922:	d146      	bne.n	800e9b2 <pow+0xd6>
 800e924:	ec45 4b10 	vmov	d0, r4, r5
 800e928:	f000 f848 	bl	800e9bc <finite>
 800e92c:	b338      	cbz	r0, 800e97e <pow+0xa2>
 800e92e:	2200      	movs	r2, #0
 800e930:	2300      	movs	r3, #0
 800e932:	4620      	mov	r0, r4
 800e934:	4629      	mov	r1, r5
 800e936:	f7f2 f921 	bl	8000b7c <__aeabi_dcmplt>
 800e93a:	b300      	cbz	r0, 800e97e <pow+0xa2>
 800e93c:	f7fd ff56 	bl	800c7ec <__errno>
 800e940:	2322      	movs	r3, #34	@ 0x22
 800e942:	e01b      	b.n	800e97c <pow+0xa0>
 800e944:	ec47 6b10 	vmov	d0, r6, r7
 800e948:	f000 f838 	bl	800e9bc <finite>
 800e94c:	b9e0      	cbnz	r0, 800e988 <pow+0xac>
 800e94e:	eeb0 0a48 	vmov.f32	s0, s16
 800e952:	eef0 0a68 	vmov.f32	s1, s17
 800e956:	f000 f831 	bl	800e9bc <finite>
 800e95a:	b1a8      	cbz	r0, 800e988 <pow+0xac>
 800e95c:	ec45 4b10 	vmov	d0, r4, r5
 800e960:	f000 f82c 	bl	800e9bc <finite>
 800e964:	b180      	cbz	r0, 800e988 <pow+0xac>
 800e966:	4632      	mov	r2, r6
 800e968:	463b      	mov	r3, r7
 800e96a:	4630      	mov	r0, r6
 800e96c:	4639      	mov	r1, r7
 800e96e:	f7f2 f92d 	bl	8000bcc <__aeabi_dcmpun>
 800e972:	2800      	cmp	r0, #0
 800e974:	d0e2      	beq.n	800e93c <pow+0x60>
 800e976:	f7fd ff39 	bl	800c7ec <__errno>
 800e97a:	2321      	movs	r3, #33	@ 0x21
 800e97c:	6003      	str	r3, [r0, #0]
 800e97e:	ecbd 8b02 	vpop	{d8}
 800e982:	ec47 6b10 	vmov	d0, r6, r7
 800e986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e988:	2200      	movs	r2, #0
 800e98a:	2300      	movs	r3, #0
 800e98c:	4630      	mov	r0, r6
 800e98e:	4639      	mov	r1, r7
 800e990:	f7f2 f8ea 	bl	8000b68 <__aeabi_dcmpeq>
 800e994:	2800      	cmp	r0, #0
 800e996:	d0f2      	beq.n	800e97e <pow+0xa2>
 800e998:	eeb0 0a48 	vmov.f32	s0, s16
 800e99c:	eef0 0a68 	vmov.f32	s1, s17
 800e9a0:	f000 f80c 	bl	800e9bc <finite>
 800e9a4:	2800      	cmp	r0, #0
 800e9a6:	d0ea      	beq.n	800e97e <pow+0xa2>
 800e9a8:	ec45 4b10 	vmov	d0, r4, r5
 800e9ac:	f000 f806 	bl	800e9bc <finite>
 800e9b0:	e7c3      	b.n	800e93a <pow+0x5e>
 800e9b2:	4f01      	ldr	r7, [pc, #4]	@ (800e9b8 <pow+0xdc>)
 800e9b4:	2600      	movs	r6, #0
 800e9b6:	e7e2      	b.n	800e97e <pow+0xa2>
 800e9b8:	3ff00000 	.word	0x3ff00000

0800e9bc <finite>:
 800e9bc:	b082      	sub	sp, #8
 800e9be:	ed8d 0b00 	vstr	d0, [sp]
 800e9c2:	9801      	ldr	r0, [sp, #4]
 800e9c4:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800e9c8:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800e9cc:	0fc0      	lsrs	r0, r0, #31
 800e9ce:	b002      	add	sp, #8
 800e9d0:	4770      	bx	lr
 800e9d2:	0000      	movs	r0, r0
 800e9d4:	0000      	movs	r0, r0
	...

0800e9d8 <__ieee754_pow>:
 800e9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9dc:	b091      	sub	sp, #68	@ 0x44
 800e9de:	ed8d 1b00 	vstr	d1, [sp]
 800e9e2:	e9dd 1900 	ldrd	r1, r9, [sp]
 800e9e6:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800e9ea:	ea5a 0001 	orrs.w	r0, sl, r1
 800e9ee:	ec57 6b10 	vmov	r6, r7, d0
 800e9f2:	d113      	bne.n	800ea1c <__ieee754_pow+0x44>
 800e9f4:	19b3      	adds	r3, r6, r6
 800e9f6:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800e9fa:	4152      	adcs	r2, r2
 800e9fc:	4298      	cmp	r0, r3
 800e9fe:	4b98      	ldr	r3, [pc, #608]	@ (800ec60 <__ieee754_pow+0x288>)
 800ea00:	4193      	sbcs	r3, r2
 800ea02:	f080 84ea 	bcs.w	800f3da <__ieee754_pow+0xa02>
 800ea06:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea0a:	4630      	mov	r0, r6
 800ea0c:	4639      	mov	r1, r7
 800ea0e:	f7f1 fc8d 	bl	800032c <__adddf3>
 800ea12:	ec41 0b10 	vmov	d0, r0, r1
 800ea16:	b011      	add	sp, #68	@ 0x44
 800ea18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea1c:	4a91      	ldr	r2, [pc, #580]	@ (800ec64 <__ieee754_pow+0x28c>)
 800ea1e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800ea22:	4590      	cmp	r8, r2
 800ea24:	463d      	mov	r5, r7
 800ea26:	4633      	mov	r3, r6
 800ea28:	d806      	bhi.n	800ea38 <__ieee754_pow+0x60>
 800ea2a:	d101      	bne.n	800ea30 <__ieee754_pow+0x58>
 800ea2c:	2e00      	cmp	r6, #0
 800ea2e:	d1ea      	bne.n	800ea06 <__ieee754_pow+0x2e>
 800ea30:	4592      	cmp	sl, r2
 800ea32:	d801      	bhi.n	800ea38 <__ieee754_pow+0x60>
 800ea34:	d10e      	bne.n	800ea54 <__ieee754_pow+0x7c>
 800ea36:	b169      	cbz	r1, 800ea54 <__ieee754_pow+0x7c>
 800ea38:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800ea3c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800ea40:	431d      	orrs	r5, r3
 800ea42:	d1e0      	bne.n	800ea06 <__ieee754_pow+0x2e>
 800ea44:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ea48:	18db      	adds	r3, r3, r3
 800ea4a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800ea4e:	4152      	adcs	r2, r2
 800ea50:	429d      	cmp	r5, r3
 800ea52:	e7d4      	b.n	800e9fe <__ieee754_pow+0x26>
 800ea54:	2d00      	cmp	r5, #0
 800ea56:	46c3      	mov	fp, r8
 800ea58:	da3a      	bge.n	800ead0 <__ieee754_pow+0xf8>
 800ea5a:	4a83      	ldr	r2, [pc, #524]	@ (800ec68 <__ieee754_pow+0x290>)
 800ea5c:	4592      	cmp	sl, r2
 800ea5e:	d84d      	bhi.n	800eafc <__ieee754_pow+0x124>
 800ea60:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800ea64:	4592      	cmp	sl, r2
 800ea66:	f240 84c7 	bls.w	800f3f8 <__ieee754_pow+0xa20>
 800ea6a:	ea4f 522a 	mov.w	r2, sl, asr #20
 800ea6e:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800ea72:	2a14      	cmp	r2, #20
 800ea74:	dd0f      	ble.n	800ea96 <__ieee754_pow+0xbe>
 800ea76:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800ea7a:	fa21 f402 	lsr.w	r4, r1, r2
 800ea7e:	fa04 f202 	lsl.w	r2, r4, r2
 800ea82:	428a      	cmp	r2, r1
 800ea84:	f040 84b8 	bne.w	800f3f8 <__ieee754_pow+0xa20>
 800ea88:	f004 0401 	and.w	r4, r4, #1
 800ea8c:	f1c4 0402 	rsb	r4, r4, #2
 800ea90:	2900      	cmp	r1, #0
 800ea92:	d158      	bne.n	800eb46 <__ieee754_pow+0x16e>
 800ea94:	e00e      	b.n	800eab4 <__ieee754_pow+0xdc>
 800ea96:	2900      	cmp	r1, #0
 800ea98:	d154      	bne.n	800eb44 <__ieee754_pow+0x16c>
 800ea9a:	f1c2 0214 	rsb	r2, r2, #20
 800ea9e:	fa4a f402 	asr.w	r4, sl, r2
 800eaa2:	fa04 f202 	lsl.w	r2, r4, r2
 800eaa6:	4552      	cmp	r2, sl
 800eaa8:	f040 84a3 	bne.w	800f3f2 <__ieee754_pow+0xa1a>
 800eaac:	f004 0401 	and.w	r4, r4, #1
 800eab0:	f1c4 0402 	rsb	r4, r4, #2
 800eab4:	4a6d      	ldr	r2, [pc, #436]	@ (800ec6c <__ieee754_pow+0x294>)
 800eab6:	4592      	cmp	sl, r2
 800eab8:	d12e      	bne.n	800eb18 <__ieee754_pow+0x140>
 800eaba:	f1b9 0f00 	cmp.w	r9, #0
 800eabe:	f280 8494 	bge.w	800f3ea <__ieee754_pow+0xa12>
 800eac2:	496a      	ldr	r1, [pc, #424]	@ (800ec6c <__ieee754_pow+0x294>)
 800eac4:	4632      	mov	r2, r6
 800eac6:	463b      	mov	r3, r7
 800eac8:	2000      	movs	r0, #0
 800eaca:	f7f1 ff0f 	bl	80008ec <__aeabi_ddiv>
 800eace:	e7a0      	b.n	800ea12 <__ieee754_pow+0x3a>
 800ead0:	2400      	movs	r4, #0
 800ead2:	bbc1      	cbnz	r1, 800eb46 <__ieee754_pow+0x16e>
 800ead4:	4a63      	ldr	r2, [pc, #396]	@ (800ec64 <__ieee754_pow+0x28c>)
 800ead6:	4592      	cmp	sl, r2
 800ead8:	d1ec      	bne.n	800eab4 <__ieee754_pow+0xdc>
 800eada:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800eade:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800eae2:	431a      	orrs	r2, r3
 800eae4:	f000 8479 	beq.w	800f3da <__ieee754_pow+0xa02>
 800eae8:	4b61      	ldr	r3, [pc, #388]	@ (800ec70 <__ieee754_pow+0x298>)
 800eaea:	4598      	cmp	r8, r3
 800eaec:	d908      	bls.n	800eb00 <__ieee754_pow+0x128>
 800eaee:	f1b9 0f00 	cmp.w	r9, #0
 800eaf2:	f2c0 8476 	blt.w	800f3e2 <__ieee754_pow+0xa0a>
 800eaf6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eafa:	e78a      	b.n	800ea12 <__ieee754_pow+0x3a>
 800eafc:	2402      	movs	r4, #2
 800eafe:	e7e8      	b.n	800ead2 <__ieee754_pow+0xfa>
 800eb00:	f1b9 0f00 	cmp.w	r9, #0
 800eb04:	f04f 0000 	mov.w	r0, #0
 800eb08:	f04f 0100 	mov.w	r1, #0
 800eb0c:	da81      	bge.n	800ea12 <__ieee754_pow+0x3a>
 800eb0e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800eb12:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800eb16:	e77c      	b.n	800ea12 <__ieee754_pow+0x3a>
 800eb18:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800eb1c:	d106      	bne.n	800eb2c <__ieee754_pow+0x154>
 800eb1e:	4632      	mov	r2, r6
 800eb20:	463b      	mov	r3, r7
 800eb22:	4630      	mov	r0, r6
 800eb24:	4639      	mov	r1, r7
 800eb26:	f7f1 fdb7 	bl	8000698 <__aeabi_dmul>
 800eb2a:	e772      	b.n	800ea12 <__ieee754_pow+0x3a>
 800eb2c:	4a51      	ldr	r2, [pc, #324]	@ (800ec74 <__ieee754_pow+0x29c>)
 800eb2e:	4591      	cmp	r9, r2
 800eb30:	d109      	bne.n	800eb46 <__ieee754_pow+0x16e>
 800eb32:	2d00      	cmp	r5, #0
 800eb34:	db07      	blt.n	800eb46 <__ieee754_pow+0x16e>
 800eb36:	ec47 6b10 	vmov	d0, r6, r7
 800eb3a:	b011      	add	sp, #68	@ 0x44
 800eb3c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb40:	f000 bd52 	b.w	800f5e8 <__ieee754_sqrt>
 800eb44:	2400      	movs	r4, #0
 800eb46:	ec47 6b10 	vmov	d0, r6, r7
 800eb4a:	9302      	str	r3, [sp, #8]
 800eb4c:	f000 fc88 	bl	800f460 <fabs>
 800eb50:	9b02      	ldr	r3, [sp, #8]
 800eb52:	ec51 0b10 	vmov	r0, r1, d0
 800eb56:	bb53      	cbnz	r3, 800ebae <__ieee754_pow+0x1d6>
 800eb58:	4b44      	ldr	r3, [pc, #272]	@ (800ec6c <__ieee754_pow+0x294>)
 800eb5a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800eb5e:	429a      	cmp	r2, r3
 800eb60:	d002      	beq.n	800eb68 <__ieee754_pow+0x190>
 800eb62:	f1b8 0f00 	cmp.w	r8, #0
 800eb66:	d122      	bne.n	800ebae <__ieee754_pow+0x1d6>
 800eb68:	f1b9 0f00 	cmp.w	r9, #0
 800eb6c:	da05      	bge.n	800eb7a <__ieee754_pow+0x1a2>
 800eb6e:	4602      	mov	r2, r0
 800eb70:	460b      	mov	r3, r1
 800eb72:	2000      	movs	r0, #0
 800eb74:	493d      	ldr	r1, [pc, #244]	@ (800ec6c <__ieee754_pow+0x294>)
 800eb76:	f7f1 feb9 	bl	80008ec <__aeabi_ddiv>
 800eb7a:	2d00      	cmp	r5, #0
 800eb7c:	f6bf af49 	bge.w	800ea12 <__ieee754_pow+0x3a>
 800eb80:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800eb84:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800eb88:	ea58 0804 	orrs.w	r8, r8, r4
 800eb8c:	d108      	bne.n	800eba0 <__ieee754_pow+0x1c8>
 800eb8e:	4602      	mov	r2, r0
 800eb90:	460b      	mov	r3, r1
 800eb92:	4610      	mov	r0, r2
 800eb94:	4619      	mov	r1, r3
 800eb96:	f7f1 fbc7 	bl	8000328 <__aeabi_dsub>
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	460b      	mov	r3, r1
 800eb9e:	e794      	b.n	800eaca <__ieee754_pow+0xf2>
 800eba0:	2c01      	cmp	r4, #1
 800eba2:	f47f af36 	bne.w	800ea12 <__ieee754_pow+0x3a>
 800eba6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ebaa:	4619      	mov	r1, r3
 800ebac:	e731      	b.n	800ea12 <__ieee754_pow+0x3a>
 800ebae:	0feb      	lsrs	r3, r5, #31
 800ebb0:	3b01      	subs	r3, #1
 800ebb2:	ea53 0204 	orrs.w	r2, r3, r4
 800ebb6:	d102      	bne.n	800ebbe <__ieee754_pow+0x1e6>
 800ebb8:	4632      	mov	r2, r6
 800ebba:	463b      	mov	r3, r7
 800ebbc:	e7e9      	b.n	800eb92 <__ieee754_pow+0x1ba>
 800ebbe:	3c01      	subs	r4, #1
 800ebc0:	431c      	orrs	r4, r3
 800ebc2:	d016      	beq.n	800ebf2 <__ieee754_pow+0x21a>
 800ebc4:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800ec50 <__ieee754_pow+0x278>
 800ebc8:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800ebcc:	ed8d 7b02 	vstr	d7, [sp, #8]
 800ebd0:	f240 8112 	bls.w	800edf8 <__ieee754_pow+0x420>
 800ebd4:	4b28      	ldr	r3, [pc, #160]	@ (800ec78 <__ieee754_pow+0x2a0>)
 800ebd6:	459a      	cmp	sl, r3
 800ebd8:	4b25      	ldr	r3, [pc, #148]	@ (800ec70 <__ieee754_pow+0x298>)
 800ebda:	d916      	bls.n	800ec0a <__ieee754_pow+0x232>
 800ebdc:	4598      	cmp	r8, r3
 800ebde:	d80b      	bhi.n	800ebf8 <__ieee754_pow+0x220>
 800ebe0:	f1b9 0f00 	cmp.w	r9, #0
 800ebe4:	da0b      	bge.n	800ebfe <__ieee754_pow+0x226>
 800ebe6:	2000      	movs	r0, #0
 800ebe8:	b011      	add	sp, #68	@ 0x44
 800ebea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebee:	f000 bcf3 	b.w	800f5d8 <__math_oflow>
 800ebf2:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800ec58 <__ieee754_pow+0x280>
 800ebf6:	e7e7      	b.n	800ebc8 <__ieee754_pow+0x1f0>
 800ebf8:	f1b9 0f00 	cmp.w	r9, #0
 800ebfc:	dcf3      	bgt.n	800ebe6 <__ieee754_pow+0x20e>
 800ebfe:	2000      	movs	r0, #0
 800ec00:	b011      	add	sp, #68	@ 0x44
 800ec02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec06:	f000 bcdf 	b.w	800f5c8 <__math_uflow>
 800ec0a:	4598      	cmp	r8, r3
 800ec0c:	d20c      	bcs.n	800ec28 <__ieee754_pow+0x250>
 800ec0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec12:	2200      	movs	r2, #0
 800ec14:	2300      	movs	r3, #0
 800ec16:	f7f1 ffb1 	bl	8000b7c <__aeabi_dcmplt>
 800ec1a:	3800      	subs	r0, #0
 800ec1c:	bf18      	it	ne
 800ec1e:	2001      	movne	r0, #1
 800ec20:	f1b9 0f00 	cmp.w	r9, #0
 800ec24:	daec      	bge.n	800ec00 <__ieee754_pow+0x228>
 800ec26:	e7df      	b.n	800ebe8 <__ieee754_pow+0x210>
 800ec28:	4b10      	ldr	r3, [pc, #64]	@ (800ec6c <__ieee754_pow+0x294>)
 800ec2a:	4598      	cmp	r8, r3
 800ec2c:	f04f 0200 	mov.w	r2, #0
 800ec30:	d924      	bls.n	800ec7c <__ieee754_pow+0x2a4>
 800ec32:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ec36:	2300      	movs	r3, #0
 800ec38:	f7f1 ffa0 	bl	8000b7c <__aeabi_dcmplt>
 800ec3c:	3800      	subs	r0, #0
 800ec3e:	bf18      	it	ne
 800ec40:	2001      	movne	r0, #1
 800ec42:	f1b9 0f00 	cmp.w	r9, #0
 800ec46:	dccf      	bgt.n	800ebe8 <__ieee754_pow+0x210>
 800ec48:	e7da      	b.n	800ec00 <__ieee754_pow+0x228>
 800ec4a:	bf00      	nop
 800ec4c:	f3af 8000 	nop.w
 800ec50:	00000000 	.word	0x00000000
 800ec54:	3ff00000 	.word	0x3ff00000
 800ec58:	00000000 	.word	0x00000000
 800ec5c:	bff00000 	.word	0xbff00000
 800ec60:	fff00000 	.word	0xfff00000
 800ec64:	7ff00000 	.word	0x7ff00000
 800ec68:	433fffff 	.word	0x433fffff
 800ec6c:	3ff00000 	.word	0x3ff00000
 800ec70:	3fefffff 	.word	0x3fefffff
 800ec74:	3fe00000 	.word	0x3fe00000
 800ec78:	43f00000 	.word	0x43f00000
 800ec7c:	4b5a      	ldr	r3, [pc, #360]	@ (800ede8 <__ieee754_pow+0x410>)
 800ec7e:	f7f1 fb53 	bl	8000328 <__aeabi_dsub>
 800ec82:	a351      	add	r3, pc, #324	@ (adr r3, 800edc8 <__ieee754_pow+0x3f0>)
 800ec84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec88:	4604      	mov	r4, r0
 800ec8a:	460d      	mov	r5, r1
 800ec8c:	f7f1 fd04 	bl	8000698 <__aeabi_dmul>
 800ec90:	a34f      	add	r3, pc, #316	@ (adr r3, 800edd0 <__ieee754_pow+0x3f8>)
 800ec92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec96:	4606      	mov	r6, r0
 800ec98:	460f      	mov	r7, r1
 800ec9a:	4620      	mov	r0, r4
 800ec9c:	4629      	mov	r1, r5
 800ec9e:	f7f1 fcfb 	bl	8000698 <__aeabi_dmul>
 800eca2:	4b52      	ldr	r3, [pc, #328]	@ (800edec <__ieee754_pow+0x414>)
 800eca4:	4682      	mov	sl, r0
 800eca6:	468b      	mov	fp, r1
 800eca8:	2200      	movs	r2, #0
 800ecaa:	4620      	mov	r0, r4
 800ecac:	4629      	mov	r1, r5
 800ecae:	f7f1 fcf3 	bl	8000698 <__aeabi_dmul>
 800ecb2:	4602      	mov	r2, r0
 800ecb4:	460b      	mov	r3, r1
 800ecb6:	a148      	add	r1, pc, #288	@ (adr r1, 800edd8 <__ieee754_pow+0x400>)
 800ecb8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ecbc:	f7f1 fb34 	bl	8000328 <__aeabi_dsub>
 800ecc0:	4622      	mov	r2, r4
 800ecc2:	462b      	mov	r3, r5
 800ecc4:	f7f1 fce8 	bl	8000698 <__aeabi_dmul>
 800ecc8:	4602      	mov	r2, r0
 800ecca:	460b      	mov	r3, r1
 800eccc:	2000      	movs	r0, #0
 800ecce:	4948      	ldr	r1, [pc, #288]	@ (800edf0 <__ieee754_pow+0x418>)
 800ecd0:	f7f1 fb2a 	bl	8000328 <__aeabi_dsub>
 800ecd4:	4622      	mov	r2, r4
 800ecd6:	4680      	mov	r8, r0
 800ecd8:	4689      	mov	r9, r1
 800ecda:	462b      	mov	r3, r5
 800ecdc:	4620      	mov	r0, r4
 800ecde:	4629      	mov	r1, r5
 800ece0:	f7f1 fcda 	bl	8000698 <__aeabi_dmul>
 800ece4:	4602      	mov	r2, r0
 800ece6:	460b      	mov	r3, r1
 800ece8:	4640      	mov	r0, r8
 800ecea:	4649      	mov	r1, r9
 800ecec:	f7f1 fcd4 	bl	8000698 <__aeabi_dmul>
 800ecf0:	a33b      	add	r3, pc, #236	@ (adr r3, 800ede0 <__ieee754_pow+0x408>)
 800ecf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf6:	f7f1 fccf 	bl	8000698 <__aeabi_dmul>
 800ecfa:	4602      	mov	r2, r0
 800ecfc:	460b      	mov	r3, r1
 800ecfe:	4650      	mov	r0, sl
 800ed00:	4659      	mov	r1, fp
 800ed02:	f7f1 fb11 	bl	8000328 <__aeabi_dsub>
 800ed06:	4602      	mov	r2, r0
 800ed08:	460b      	mov	r3, r1
 800ed0a:	4680      	mov	r8, r0
 800ed0c:	4689      	mov	r9, r1
 800ed0e:	4630      	mov	r0, r6
 800ed10:	4639      	mov	r1, r7
 800ed12:	f7f1 fb0b 	bl	800032c <__adddf3>
 800ed16:	2400      	movs	r4, #0
 800ed18:	4632      	mov	r2, r6
 800ed1a:	463b      	mov	r3, r7
 800ed1c:	4620      	mov	r0, r4
 800ed1e:	460d      	mov	r5, r1
 800ed20:	f7f1 fb02 	bl	8000328 <__aeabi_dsub>
 800ed24:	4602      	mov	r2, r0
 800ed26:	460b      	mov	r3, r1
 800ed28:	4640      	mov	r0, r8
 800ed2a:	4649      	mov	r1, r9
 800ed2c:	f7f1 fafc 	bl	8000328 <__aeabi_dsub>
 800ed30:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ed38:	2300      	movs	r3, #0
 800ed3a:	9304      	str	r3, [sp, #16]
 800ed3c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800ed40:	4606      	mov	r6, r0
 800ed42:	460f      	mov	r7, r1
 800ed44:	4652      	mov	r2, sl
 800ed46:	465b      	mov	r3, fp
 800ed48:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed4c:	f7f1 faec 	bl	8000328 <__aeabi_dsub>
 800ed50:	4622      	mov	r2, r4
 800ed52:	462b      	mov	r3, r5
 800ed54:	f7f1 fca0 	bl	8000698 <__aeabi_dmul>
 800ed58:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed5c:	4680      	mov	r8, r0
 800ed5e:	4689      	mov	r9, r1
 800ed60:	4630      	mov	r0, r6
 800ed62:	4639      	mov	r1, r7
 800ed64:	f7f1 fc98 	bl	8000698 <__aeabi_dmul>
 800ed68:	4602      	mov	r2, r0
 800ed6a:	460b      	mov	r3, r1
 800ed6c:	4640      	mov	r0, r8
 800ed6e:	4649      	mov	r1, r9
 800ed70:	f7f1 fadc 	bl	800032c <__adddf3>
 800ed74:	4652      	mov	r2, sl
 800ed76:	465b      	mov	r3, fp
 800ed78:	4606      	mov	r6, r0
 800ed7a:	460f      	mov	r7, r1
 800ed7c:	4620      	mov	r0, r4
 800ed7e:	4629      	mov	r1, r5
 800ed80:	f7f1 fc8a 	bl	8000698 <__aeabi_dmul>
 800ed84:	460b      	mov	r3, r1
 800ed86:	4602      	mov	r2, r0
 800ed88:	4680      	mov	r8, r0
 800ed8a:	4689      	mov	r9, r1
 800ed8c:	4630      	mov	r0, r6
 800ed8e:	4639      	mov	r1, r7
 800ed90:	f7f1 facc 	bl	800032c <__adddf3>
 800ed94:	4b17      	ldr	r3, [pc, #92]	@ (800edf4 <__ieee754_pow+0x41c>)
 800ed96:	4299      	cmp	r1, r3
 800ed98:	4604      	mov	r4, r0
 800ed9a:	460d      	mov	r5, r1
 800ed9c:	468a      	mov	sl, r1
 800ed9e:	468b      	mov	fp, r1
 800eda0:	f340 82ef 	ble.w	800f382 <__ieee754_pow+0x9aa>
 800eda4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800eda8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800edac:	4303      	orrs	r3, r0
 800edae:	f000 81e8 	beq.w	800f182 <__ieee754_pow+0x7aa>
 800edb2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800edb6:	2200      	movs	r2, #0
 800edb8:	2300      	movs	r3, #0
 800edba:	f7f1 fedf 	bl	8000b7c <__aeabi_dcmplt>
 800edbe:	3800      	subs	r0, #0
 800edc0:	bf18      	it	ne
 800edc2:	2001      	movne	r0, #1
 800edc4:	e710      	b.n	800ebe8 <__ieee754_pow+0x210>
 800edc6:	bf00      	nop
 800edc8:	60000000 	.word	0x60000000
 800edcc:	3ff71547 	.word	0x3ff71547
 800edd0:	f85ddf44 	.word	0xf85ddf44
 800edd4:	3e54ae0b 	.word	0x3e54ae0b
 800edd8:	55555555 	.word	0x55555555
 800eddc:	3fd55555 	.word	0x3fd55555
 800ede0:	652b82fe 	.word	0x652b82fe
 800ede4:	3ff71547 	.word	0x3ff71547
 800ede8:	3ff00000 	.word	0x3ff00000
 800edec:	3fd00000 	.word	0x3fd00000
 800edf0:	3fe00000 	.word	0x3fe00000
 800edf4:	408fffff 	.word	0x408fffff
 800edf8:	4bd5      	ldr	r3, [pc, #852]	@ (800f150 <__ieee754_pow+0x778>)
 800edfa:	402b      	ands	r3, r5
 800edfc:	2200      	movs	r2, #0
 800edfe:	b92b      	cbnz	r3, 800ee0c <__ieee754_pow+0x434>
 800ee00:	4bd4      	ldr	r3, [pc, #848]	@ (800f154 <__ieee754_pow+0x77c>)
 800ee02:	f7f1 fc49 	bl	8000698 <__aeabi_dmul>
 800ee06:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800ee0a:	468b      	mov	fp, r1
 800ee0c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800ee10:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800ee14:	4413      	add	r3, r2
 800ee16:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee18:	4bcf      	ldr	r3, [pc, #828]	@ (800f158 <__ieee754_pow+0x780>)
 800ee1a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800ee1e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800ee22:	459b      	cmp	fp, r3
 800ee24:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800ee28:	dd08      	ble.n	800ee3c <__ieee754_pow+0x464>
 800ee2a:	4bcc      	ldr	r3, [pc, #816]	@ (800f15c <__ieee754_pow+0x784>)
 800ee2c:	459b      	cmp	fp, r3
 800ee2e:	f340 81a5 	ble.w	800f17c <__ieee754_pow+0x7a4>
 800ee32:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ee34:	3301      	adds	r3, #1
 800ee36:	930a      	str	r3, [sp, #40]	@ 0x28
 800ee38:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800ee3c:	f04f 0a00 	mov.w	sl, #0
 800ee40:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ee44:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee46:	4bc6      	ldr	r3, [pc, #792]	@ (800f160 <__ieee754_pow+0x788>)
 800ee48:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800ee4c:	ed93 7b00 	vldr	d7, [r3]
 800ee50:	4629      	mov	r1, r5
 800ee52:	ec53 2b17 	vmov	r2, r3, d7
 800ee56:	ed8d 7b06 	vstr	d7, [sp, #24]
 800ee5a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ee5e:	f7f1 fa63 	bl	8000328 <__aeabi_dsub>
 800ee62:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ee66:	4606      	mov	r6, r0
 800ee68:	460f      	mov	r7, r1
 800ee6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee6e:	f7f1 fa5d 	bl	800032c <__adddf3>
 800ee72:	4602      	mov	r2, r0
 800ee74:	460b      	mov	r3, r1
 800ee76:	2000      	movs	r0, #0
 800ee78:	49ba      	ldr	r1, [pc, #744]	@ (800f164 <__ieee754_pow+0x78c>)
 800ee7a:	f7f1 fd37 	bl	80008ec <__aeabi_ddiv>
 800ee7e:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800ee82:	4602      	mov	r2, r0
 800ee84:	460b      	mov	r3, r1
 800ee86:	4630      	mov	r0, r6
 800ee88:	4639      	mov	r1, r7
 800ee8a:	f7f1 fc05 	bl	8000698 <__aeabi_dmul>
 800ee8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ee92:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800ee96:	106d      	asrs	r5, r5, #1
 800ee98:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800ee9c:	f04f 0b00 	mov.w	fp, #0
 800eea0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800eea4:	4661      	mov	r1, ip
 800eea6:	2200      	movs	r2, #0
 800eea8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800eeac:	4658      	mov	r0, fp
 800eeae:	46e1      	mov	r9, ip
 800eeb0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800eeb4:	4614      	mov	r4, r2
 800eeb6:	461d      	mov	r5, r3
 800eeb8:	f7f1 fbee 	bl	8000698 <__aeabi_dmul>
 800eebc:	4602      	mov	r2, r0
 800eebe:	460b      	mov	r3, r1
 800eec0:	4630      	mov	r0, r6
 800eec2:	4639      	mov	r1, r7
 800eec4:	f7f1 fa30 	bl	8000328 <__aeabi_dsub>
 800eec8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eecc:	4606      	mov	r6, r0
 800eece:	460f      	mov	r7, r1
 800eed0:	4620      	mov	r0, r4
 800eed2:	4629      	mov	r1, r5
 800eed4:	f7f1 fa28 	bl	8000328 <__aeabi_dsub>
 800eed8:	4602      	mov	r2, r0
 800eeda:	460b      	mov	r3, r1
 800eedc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800eee0:	f7f1 fa22 	bl	8000328 <__aeabi_dsub>
 800eee4:	465a      	mov	r2, fp
 800eee6:	464b      	mov	r3, r9
 800eee8:	f7f1 fbd6 	bl	8000698 <__aeabi_dmul>
 800eeec:	4602      	mov	r2, r0
 800eeee:	460b      	mov	r3, r1
 800eef0:	4630      	mov	r0, r6
 800eef2:	4639      	mov	r1, r7
 800eef4:	f7f1 fa18 	bl	8000328 <__aeabi_dsub>
 800eef8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800eefc:	f7f1 fbcc 	bl	8000698 <__aeabi_dmul>
 800ef00:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ef04:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ef08:	4610      	mov	r0, r2
 800ef0a:	4619      	mov	r1, r3
 800ef0c:	f7f1 fbc4 	bl	8000698 <__aeabi_dmul>
 800ef10:	a37d      	add	r3, pc, #500	@ (adr r3, 800f108 <__ieee754_pow+0x730>)
 800ef12:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef16:	4604      	mov	r4, r0
 800ef18:	460d      	mov	r5, r1
 800ef1a:	f7f1 fbbd 	bl	8000698 <__aeabi_dmul>
 800ef1e:	a37c      	add	r3, pc, #496	@ (adr r3, 800f110 <__ieee754_pow+0x738>)
 800ef20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef24:	f7f1 fa02 	bl	800032c <__adddf3>
 800ef28:	4622      	mov	r2, r4
 800ef2a:	462b      	mov	r3, r5
 800ef2c:	f7f1 fbb4 	bl	8000698 <__aeabi_dmul>
 800ef30:	a379      	add	r3, pc, #484	@ (adr r3, 800f118 <__ieee754_pow+0x740>)
 800ef32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef36:	f7f1 f9f9 	bl	800032c <__adddf3>
 800ef3a:	4622      	mov	r2, r4
 800ef3c:	462b      	mov	r3, r5
 800ef3e:	f7f1 fbab 	bl	8000698 <__aeabi_dmul>
 800ef42:	a377      	add	r3, pc, #476	@ (adr r3, 800f120 <__ieee754_pow+0x748>)
 800ef44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef48:	f7f1 f9f0 	bl	800032c <__adddf3>
 800ef4c:	4622      	mov	r2, r4
 800ef4e:	462b      	mov	r3, r5
 800ef50:	f7f1 fba2 	bl	8000698 <__aeabi_dmul>
 800ef54:	a374      	add	r3, pc, #464	@ (adr r3, 800f128 <__ieee754_pow+0x750>)
 800ef56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef5a:	f7f1 f9e7 	bl	800032c <__adddf3>
 800ef5e:	4622      	mov	r2, r4
 800ef60:	462b      	mov	r3, r5
 800ef62:	f7f1 fb99 	bl	8000698 <__aeabi_dmul>
 800ef66:	a372      	add	r3, pc, #456	@ (adr r3, 800f130 <__ieee754_pow+0x758>)
 800ef68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef6c:	f7f1 f9de 	bl	800032c <__adddf3>
 800ef70:	4622      	mov	r2, r4
 800ef72:	4606      	mov	r6, r0
 800ef74:	460f      	mov	r7, r1
 800ef76:	462b      	mov	r3, r5
 800ef78:	4620      	mov	r0, r4
 800ef7a:	4629      	mov	r1, r5
 800ef7c:	f7f1 fb8c 	bl	8000698 <__aeabi_dmul>
 800ef80:	4602      	mov	r2, r0
 800ef82:	460b      	mov	r3, r1
 800ef84:	4630      	mov	r0, r6
 800ef86:	4639      	mov	r1, r7
 800ef88:	f7f1 fb86 	bl	8000698 <__aeabi_dmul>
 800ef8c:	465a      	mov	r2, fp
 800ef8e:	4604      	mov	r4, r0
 800ef90:	460d      	mov	r5, r1
 800ef92:	464b      	mov	r3, r9
 800ef94:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ef98:	f7f1 f9c8 	bl	800032c <__adddf3>
 800ef9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800efa0:	f7f1 fb7a 	bl	8000698 <__aeabi_dmul>
 800efa4:	4622      	mov	r2, r4
 800efa6:	462b      	mov	r3, r5
 800efa8:	f7f1 f9c0 	bl	800032c <__adddf3>
 800efac:	465a      	mov	r2, fp
 800efae:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800efb2:	464b      	mov	r3, r9
 800efb4:	4658      	mov	r0, fp
 800efb6:	4649      	mov	r1, r9
 800efb8:	f7f1 fb6e 	bl	8000698 <__aeabi_dmul>
 800efbc:	4b6a      	ldr	r3, [pc, #424]	@ (800f168 <__ieee754_pow+0x790>)
 800efbe:	2200      	movs	r2, #0
 800efc0:	4606      	mov	r6, r0
 800efc2:	460f      	mov	r7, r1
 800efc4:	f7f1 f9b2 	bl	800032c <__adddf3>
 800efc8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800efcc:	f7f1 f9ae 	bl	800032c <__adddf3>
 800efd0:	46d8      	mov	r8, fp
 800efd2:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800efd6:	460d      	mov	r5, r1
 800efd8:	465a      	mov	r2, fp
 800efda:	460b      	mov	r3, r1
 800efdc:	4640      	mov	r0, r8
 800efde:	4649      	mov	r1, r9
 800efe0:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800efe4:	f7f1 fb58 	bl	8000698 <__aeabi_dmul>
 800efe8:	465c      	mov	r4, fp
 800efea:	4680      	mov	r8, r0
 800efec:	4689      	mov	r9, r1
 800efee:	4b5e      	ldr	r3, [pc, #376]	@ (800f168 <__ieee754_pow+0x790>)
 800eff0:	2200      	movs	r2, #0
 800eff2:	4620      	mov	r0, r4
 800eff4:	4629      	mov	r1, r5
 800eff6:	f7f1 f997 	bl	8000328 <__aeabi_dsub>
 800effa:	4632      	mov	r2, r6
 800effc:	463b      	mov	r3, r7
 800effe:	f7f1 f993 	bl	8000328 <__aeabi_dsub>
 800f002:	4602      	mov	r2, r0
 800f004:	460b      	mov	r3, r1
 800f006:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800f00a:	f7f1 f98d 	bl	8000328 <__aeabi_dsub>
 800f00e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f012:	f7f1 fb41 	bl	8000698 <__aeabi_dmul>
 800f016:	4622      	mov	r2, r4
 800f018:	4606      	mov	r6, r0
 800f01a:	460f      	mov	r7, r1
 800f01c:	462b      	mov	r3, r5
 800f01e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f022:	f7f1 fb39 	bl	8000698 <__aeabi_dmul>
 800f026:	4602      	mov	r2, r0
 800f028:	460b      	mov	r3, r1
 800f02a:	4630      	mov	r0, r6
 800f02c:	4639      	mov	r1, r7
 800f02e:	f7f1 f97d 	bl	800032c <__adddf3>
 800f032:	4606      	mov	r6, r0
 800f034:	460f      	mov	r7, r1
 800f036:	4602      	mov	r2, r0
 800f038:	460b      	mov	r3, r1
 800f03a:	4640      	mov	r0, r8
 800f03c:	4649      	mov	r1, r9
 800f03e:	f7f1 f975 	bl	800032c <__adddf3>
 800f042:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800f046:	a33c      	add	r3, pc, #240	@ (adr r3, 800f138 <__ieee754_pow+0x760>)
 800f048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f04c:	4658      	mov	r0, fp
 800f04e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800f052:	460d      	mov	r5, r1
 800f054:	f7f1 fb20 	bl	8000698 <__aeabi_dmul>
 800f058:	465c      	mov	r4, fp
 800f05a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800f05e:	4642      	mov	r2, r8
 800f060:	464b      	mov	r3, r9
 800f062:	4620      	mov	r0, r4
 800f064:	4629      	mov	r1, r5
 800f066:	f7f1 f95f 	bl	8000328 <__aeabi_dsub>
 800f06a:	4602      	mov	r2, r0
 800f06c:	460b      	mov	r3, r1
 800f06e:	4630      	mov	r0, r6
 800f070:	4639      	mov	r1, r7
 800f072:	f7f1 f959 	bl	8000328 <__aeabi_dsub>
 800f076:	a332      	add	r3, pc, #200	@ (adr r3, 800f140 <__ieee754_pow+0x768>)
 800f078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f07c:	f7f1 fb0c 	bl	8000698 <__aeabi_dmul>
 800f080:	a331      	add	r3, pc, #196	@ (adr r3, 800f148 <__ieee754_pow+0x770>)
 800f082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f086:	4606      	mov	r6, r0
 800f088:	460f      	mov	r7, r1
 800f08a:	4620      	mov	r0, r4
 800f08c:	4629      	mov	r1, r5
 800f08e:	f7f1 fb03 	bl	8000698 <__aeabi_dmul>
 800f092:	4602      	mov	r2, r0
 800f094:	460b      	mov	r3, r1
 800f096:	4630      	mov	r0, r6
 800f098:	4639      	mov	r1, r7
 800f09a:	f7f1 f947 	bl	800032c <__adddf3>
 800f09e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f0a0:	4b32      	ldr	r3, [pc, #200]	@ (800f16c <__ieee754_pow+0x794>)
 800f0a2:	4413      	add	r3, r2
 800f0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0a8:	f7f1 f940 	bl	800032c <__adddf3>
 800f0ac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800f0b0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800f0b2:	f7f1 fa87 	bl	80005c4 <__aeabi_i2d>
 800f0b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800f0b8:	4b2d      	ldr	r3, [pc, #180]	@ (800f170 <__ieee754_pow+0x798>)
 800f0ba:	4413      	add	r3, r2
 800f0bc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f0c0:	4606      	mov	r6, r0
 800f0c2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800f0c6:	460f      	mov	r7, r1
 800f0c8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800f0cc:	f7f1 f92e 	bl	800032c <__adddf3>
 800f0d0:	4642      	mov	r2, r8
 800f0d2:	464b      	mov	r3, r9
 800f0d4:	f7f1 f92a 	bl	800032c <__adddf3>
 800f0d8:	4632      	mov	r2, r6
 800f0da:	463b      	mov	r3, r7
 800f0dc:	f7f1 f926 	bl	800032c <__adddf3>
 800f0e0:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800f0e4:	4632      	mov	r2, r6
 800f0e6:	463b      	mov	r3, r7
 800f0e8:	4658      	mov	r0, fp
 800f0ea:	460d      	mov	r5, r1
 800f0ec:	f7f1 f91c 	bl	8000328 <__aeabi_dsub>
 800f0f0:	4642      	mov	r2, r8
 800f0f2:	464b      	mov	r3, r9
 800f0f4:	f7f1 f918 	bl	8000328 <__aeabi_dsub>
 800f0f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800f0fc:	f7f1 f914 	bl	8000328 <__aeabi_dsub>
 800f100:	465c      	mov	r4, fp
 800f102:	4602      	mov	r2, r0
 800f104:	e036      	b.n	800f174 <__ieee754_pow+0x79c>
 800f106:	bf00      	nop
 800f108:	4a454eef 	.word	0x4a454eef
 800f10c:	3fca7e28 	.word	0x3fca7e28
 800f110:	93c9db65 	.word	0x93c9db65
 800f114:	3fcd864a 	.word	0x3fcd864a
 800f118:	a91d4101 	.word	0xa91d4101
 800f11c:	3fd17460 	.word	0x3fd17460
 800f120:	518f264d 	.word	0x518f264d
 800f124:	3fd55555 	.word	0x3fd55555
 800f128:	db6fabff 	.word	0xdb6fabff
 800f12c:	3fdb6db6 	.word	0x3fdb6db6
 800f130:	33333303 	.word	0x33333303
 800f134:	3fe33333 	.word	0x3fe33333
 800f138:	e0000000 	.word	0xe0000000
 800f13c:	3feec709 	.word	0x3feec709
 800f140:	dc3a03fd 	.word	0xdc3a03fd
 800f144:	3feec709 	.word	0x3feec709
 800f148:	145b01f5 	.word	0x145b01f5
 800f14c:	be3e2fe0 	.word	0xbe3e2fe0
 800f150:	7ff00000 	.word	0x7ff00000
 800f154:	43400000 	.word	0x43400000
 800f158:	0003988e 	.word	0x0003988e
 800f15c:	000bb679 	.word	0x000bb679
 800f160:	0800fee8 	.word	0x0800fee8
 800f164:	3ff00000 	.word	0x3ff00000
 800f168:	40080000 	.word	0x40080000
 800f16c:	0800fec8 	.word	0x0800fec8
 800f170:	0800fed8 	.word	0x0800fed8
 800f174:	460b      	mov	r3, r1
 800f176:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800f17a:	e5d7      	b.n	800ed2c <__ieee754_pow+0x354>
 800f17c:	f04f 0a01 	mov.w	sl, #1
 800f180:	e65e      	b.n	800ee40 <__ieee754_pow+0x468>
 800f182:	a3b4      	add	r3, pc, #720	@ (adr r3, 800f454 <__ieee754_pow+0xa7c>)
 800f184:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f188:	4630      	mov	r0, r6
 800f18a:	4639      	mov	r1, r7
 800f18c:	f7f1 f8ce 	bl	800032c <__adddf3>
 800f190:	4642      	mov	r2, r8
 800f192:	e9cd 0100 	strd	r0, r1, [sp]
 800f196:	464b      	mov	r3, r9
 800f198:	4620      	mov	r0, r4
 800f19a:	4629      	mov	r1, r5
 800f19c:	f7f1 f8c4 	bl	8000328 <__aeabi_dsub>
 800f1a0:	4602      	mov	r2, r0
 800f1a2:	460b      	mov	r3, r1
 800f1a4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f1a8:	f7f1 fd06 	bl	8000bb8 <__aeabi_dcmpgt>
 800f1ac:	2800      	cmp	r0, #0
 800f1ae:	f47f ae00 	bne.w	800edb2 <__ieee754_pow+0x3da>
 800f1b2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800f1b6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800f1ba:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800f1be:	fa43 fa0a 	asr.w	sl, r3, sl
 800f1c2:	44da      	add	sl, fp
 800f1c4:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800f1c8:	489d      	ldr	r0, [pc, #628]	@ (800f440 <__ieee754_pow+0xa68>)
 800f1ca:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800f1ce:	4108      	asrs	r0, r1
 800f1d0:	ea00 030a 	and.w	r3, r0, sl
 800f1d4:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800f1d8:	f1c1 0114 	rsb	r1, r1, #20
 800f1dc:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800f1e0:	fa4a fa01 	asr.w	sl, sl, r1
 800f1e4:	f1bb 0f00 	cmp.w	fp, #0
 800f1e8:	4640      	mov	r0, r8
 800f1ea:	4649      	mov	r1, r9
 800f1ec:	f04f 0200 	mov.w	r2, #0
 800f1f0:	bfb8      	it	lt
 800f1f2:	f1ca 0a00 	rsblt	sl, sl, #0
 800f1f6:	f7f1 f897 	bl	8000328 <__aeabi_dsub>
 800f1fa:	4680      	mov	r8, r0
 800f1fc:	4689      	mov	r9, r1
 800f1fe:	4632      	mov	r2, r6
 800f200:	463b      	mov	r3, r7
 800f202:	4640      	mov	r0, r8
 800f204:	4649      	mov	r1, r9
 800f206:	f7f1 f891 	bl	800032c <__adddf3>
 800f20a:	2400      	movs	r4, #0
 800f20c:	a37c      	add	r3, pc, #496	@ (adr r3, 800f400 <__ieee754_pow+0xa28>)
 800f20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f212:	4620      	mov	r0, r4
 800f214:	460d      	mov	r5, r1
 800f216:	f7f1 fa3f 	bl	8000698 <__aeabi_dmul>
 800f21a:	4642      	mov	r2, r8
 800f21c:	e9cd 0100 	strd	r0, r1, [sp]
 800f220:	464b      	mov	r3, r9
 800f222:	4620      	mov	r0, r4
 800f224:	4629      	mov	r1, r5
 800f226:	f7f1 f87f 	bl	8000328 <__aeabi_dsub>
 800f22a:	4602      	mov	r2, r0
 800f22c:	460b      	mov	r3, r1
 800f22e:	4630      	mov	r0, r6
 800f230:	4639      	mov	r1, r7
 800f232:	f7f1 f879 	bl	8000328 <__aeabi_dsub>
 800f236:	a374      	add	r3, pc, #464	@ (adr r3, 800f408 <__ieee754_pow+0xa30>)
 800f238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f23c:	f7f1 fa2c 	bl	8000698 <__aeabi_dmul>
 800f240:	a373      	add	r3, pc, #460	@ (adr r3, 800f410 <__ieee754_pow+0xa38>)
 800f242:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f246:	4680      	mov	r8, r0
 800f248:	4689      	mov	r9, r1
 800f24a:	4620      	mov	r0, r4
 800f24c:	4629      	mov	r1, r5
 800f24e:	f7f1 fa23 	bl	8000698 <__aeabi_dmul>
 800f252:	4602      	mov	r2, r0
 800f254:	460b      	mov	r3, r1
 800f256:	4640      	mov	r0, r8
 800f258:	4649      	mov	r1, r9
 800f25a:	f7f1 f867 	bl	800032c <__adddf3>
 800f25e:	4604      	mov	r4, r0
 800f260:	460d      	mov	r5, r1
 800f262:	4602      	mov	r2, r0
 800f264:	460b      	mov	r3, r1
 800f266:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f26a:	f7f1 f85f 	bl	800032c <__adddf3>
 800f26e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f272:	4680      	mov	r8, r0
 800f274:	4689      	mov	r9, r1
 800f276:	f7f1 f857 	bl	8000328 <__aeabi_dsub>
 800f27a:	4602      	mov	r2, r0
 800f27c:	460b      	mov	r3, r1
 800f27e:	4620      	mov	r0, r4
 800f280:	4629      	mov	r1, r5
 800f282:	f7f1 f851 	bl	8000328 <__aeabi_dsub>
 800f286:	4642      	mov	r2, r8
 800f288:	4606      	mov	r6, r0
 800f28a:	460f      	mov	r7, r1
 800f28c:	464b      	mov	r3, r9
 800f28e:	4640      	mov	r0, r8
 800f290:	4649      	mov	r1, r9
 800f292:	f7f1 fa01 	bl	8000698 <__aeabi_dmul>
 800f296:	a360      	add	r3, pc, #384	@ (adr r3, 800f418 <__ieee754_pow+0xa40>)
 800f298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f29c:	4604      	mov	r4, r0
 800f29e:	460d      	mov	r5, r1
 800f2a0:	f7f1 f9fa 	bl	8000698 <__aeabi_dmul>
 800f2a4:	a35e      	add	r3, pc, #376	@ (adr r3, 800f420 <__ieee754_pow+0xa48>)
 800f2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2aa:	f7f1 f83d 	bl	8000328 <__aeabi_dsub>
 800f2ae:	4622      	mov	r2, r4
 800f2b0:	462b      	mov	r3, r5
 800f2b2:	f7f1 f9f1 	bl	8000698 <__aeabi_dmul>
 800f2b6:	a35c      	add	r3, pc, #368	@ (adr r3, 800f428 <__ieee754_pow+0xa50>)
 800f2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2bc:	f7f1 f836 	bl	800032c <__adddf3>
 800f2c0:	4622      	mov	r2, r4
 800f2c2:	462b      	mov	r3, r5
 800f2c4:	f7f1 f9e8 	bl	8000698 <__aeabi_dmul>
 800f2c8:	a359      	add	r3, pc, #356	@ (adr r3, 800f430 <__ieee754_pow+0xa58>)
 800f2ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2ce:	f7f1 f82b 	bl	8000328 <__aeabi_dsub>
 800f2d2:	4622      	mov	r2, r4
 800f2d4:	462b      	mov	r3, r5
 800f2d6:	f7f1 f9df 	bl	8000698 <__aeabi_dmul>
 800f2da:	a357      	add	r3, pc, #348	@ (adr r3, 800f438 <__ieee754_pow+0xa60>)
 800f2dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2e0:	f7f1 f824 	bl	800032c <__adddf3>
 800f2e4:	4622      	mov	r2, r4
 800f2e6:	462b      	mov	r3, r5
 800f2e8:	f7f1 f9d6 	bl	8000698 <__aeabi_dmul>
 800f2ec:	4602      	mov	r2, r0
 800f2ee:	460b      	mov	r3, r1
 800f2f0:	4640      	mov	r0, r8
 800f2f2:	4649      	mov	r1, r9
 800f2f4:	f7f1 f818 	bl	8000328 <__aeabi_dsub>
 800f2f8:	4604      	mov	r4, r0
 800f2fa:	460d      	mov	r5, r1
 800f2fc:	4602      	mov	r2, r0
 800f2fe:	460b      	mov	r3, r1
 800f300:	4640      	mov	r0, r8
 800f302:	4649      	mov	r1, r9
 800f304:	f7f1 f9c8 	bl	8000698 <__aeabi_dmul>
 800f308:	2200      	movs	r2, #0
 800f30a:	e9cd 0100 	strd	r0, r1, [sp]
 800f30e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800f312:	4620      	mov	r0, r4
 800f314:	4629      	mov	r1, r5
 800f316:	f7f1 f807 	bl	8000328 <__aeabi_dsub>
 800f31a:	4602      	mov	r2, r0
 800f31c:	460b      	mov	r3, r1
 800f31e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f322:	f7f1 fae3 	bl	80008ec <__aeabi_ddiv>
 800f326:	4632      	mov	r2, r6
 800f328:	4604      	mov	r4, r0
 800f32a:	460d      	mov	r5, r1
 800f32c:	463b      	mov	r3, r7
 800f32e:	4640      	mov	r0, r8
 800f330:	4649      	mov	r1, r9
 800f332:	f7f1 f9b1 	bl	8000698 <__aeabi_dmul>
 800f336:	4632      	mov	r2, r6
 800f338:	463b      	mov	r3, r7
 800f33a:	f7f0 fff7 	bl	800032c <__adddf3>
 800f33e:	4602      	mov	r2, r0
 800f340:	460b      	mov	r3, r1
 800f342:	4620      	mov	r0, r4
 800f344:	4629      	mov	r1, r5
 800f346:	f7f0 ffef 	bl	8000328 <__aeabi_dsub>
 800f34a:	4642      	mov	r2, r8
 800f34c:	464b      	mov	r3, r9
 800f34e:	f7f0 ffeb 	bl	8000328 <__aeabi_dsub>
 800f352:	460b      	mov	r3, r1
 800f354:	4602      	mov	r2, r0
 800f356:	493b      	ldr	r1, [pc, #236]	@ (800f444 <__ieee754_pow+0xa6c>)
 800f358:	2000      	movs	r0, #0
 800f35a:	f7f0 ffe5 	bl	8000328 <__aeabi_dsub>
 800f35e:	ec41 0b10 	vmov	d0, r0, r1
 800f362:	ee10 3a90 	vmov	r3, s1
 800f366:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f36a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f36e:	da30      	bge.n	800f3d2 <__ieee754_pow+0x9fa>
 800f370:	4650      	mov	r0, sl
 800f372:	f000 f87d 	bl	800f470 <scalbn>
 800f376:	ec51 0b10 	vmov	r0, r1, d0
 800f37a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f37e:	f7ff bbd2 	b.w	800eb26 <__ieee754_pow+0x14e>
 800f382:	4c31      	ldr	r4, [pc, #196]	@ (800f448 <__ieee754_pow+0xa70>)
 800f384:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f388:	42a3      	cmp	r3, r4
 800f38a:	d91a      	bls.n	800f3c2 <__ieee754_pow+0x9ea>
 800f38c:	4b2f      	ldr	r3, [pc, #188]	@ (800f44c <__ieee754_pow+0xa74>)
 800f38e:	440b      	add	r3, r1
 800f390:	4303      	orrs	r3, r0
 800f392:	d009      	beq.n	800f3a8 <__ieee754_pow+0x9d0>
 800f394:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f398:	2200      	movs	r2, #0
 800f39a:	2300      	movs	r3, #0
 800f39c:	f7f1 fbee 	bl	8000b7c <__aeabi_dcmplt>
 800f3a0:	3800      	subs	r0, #0
 800f3a2:	bf18      	it	ne
 800f3a4:	2001      	movne	r0, #1
 800f3a6:	e42b      	b.n	800ec00 <__ieee754_pow+0x228>
 800f3a8:	4642      	mov	r2, r8
 800f3aa:	464b      	mov	r3, r9
 800f3ac:	f7f0 ffbc 	bl	8000328 <__aeabi_dsub>
 800f3b0:	4632      	mov	r2, r6
 800f3b2:	463b      	mov	r3, r7
 800f3b4:	f7f1 fbf6 	bl	8000ba4 <__aeabi_dcmpge>
 800f3b8:	2800      	cmp	r0, #0
 800f3ba:	d1eb      	bne.n	800f394 <__ieee754_pow+0x9bc>
 800f3bc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800f45c <__ieee754_pow+0xa84>
 800f3c0:	e6f7      	b.n	800f1b2 <__ieee754_pow+0x7da>
 800f3c2:	469a      	mov	sl, r3
 800f3c4:	4b22      	ldr	r3, [pc, #136]	@ (800f450 <__ieee754_pow+0xa78>)
 800f3c6:	459a      	cmp	sl, r3
 800f3c8:	f63f aef3 	bhi.w	800f1b2 <__ieee754_pow+0x7da>
 800f3cc:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f3d0:	e715      	b.n	800f1fe <__ieee754_pow+0x826>
 800f3d2:	ec51 0b10 	vmov	r0, r1, d0
 800f3d6:	4619      	mov	r1, r3
 800f3d8:	e7cf      	b.n	800f37a <__ieee754_pow+0x9a2>
 800f3da:	491a      	ldr	r1, [pc, #104]	@ (800f444 <__ieee754_pow+0xa6c>)
 800f3dc:	2000      	movs	r0, #0
 800f3de:	f7ff bb18 	b.w	800ea12 <__ieee754_pow+0x3a>
 800f3e2:	2000      	movs	r0, #0
 800f3e4:	2100      	movs	r1, #0
 800f3e6:	f7ff bb14 	b.w	800ea12 <__ieee754_pow+0x3a>
 800f3ea:	4630      	mov	r0, r6
 800f3ec:	4639      	mov	r1, r7
 800f3ee:	f7ff bb10 	b.w	800ea12 <__ieee754_pow+0x3a>
 800f3f2:	460c      	mov	r4, r1
 800f3f4:	f7ff bb5e 	b.w	800eab4 <__ieee754_pow+0xdc>
 800f3f8:	2400      	movs	r4, #0
 800f3fa:	f7ff bb49 	b.w	800ea90 <__ieee754_pow+0xb8>
 800f3fe:	bf00      	nop
 800f400:	00000000 	.word	0x00000000
 800f404:	3fe62e43 	.word	0x3fe62e43
 800f408:	fefa39ef 	.word	0xfefa39ef
 800f40c:	3fe62e42 	.word	0x3fe62e42
 800f410:	0ca86c39 	.word	0x0ca86c39
 800f414:	be205c61 	.word	0xbe205c61
 800f418:	72bea4d0 	.word	0x72bea4d0
 800f41c:	3e663769 	.word	0x3e663769
 800f420:	c5d26bf1 	.word	0xc5d26bf1
 800f424:	3ebbbd41 	.word	0x3ebbbd41
 800f428:	af25de2c 	.word	0xaf25de2c
 800f42c:	3f11566a 	.word	0x3f11566a
 800f430:	16bebd93 	.word	0x16bebd93
 800f434:	3f66c16c 	.word	0x3f66c16c
 800f438:	5555553e 	.word	0x5555553e
 800f43c:	3fc55555 	.word	0x3fc55555
 800f440:	fff00000 	.word	0xfff00000
 800f444:	3ff00000 	.word	0x3ff00000
 800f448:	4090cbff 	.word	0x4090cbff
 800f44c:	3f6f3400 	.word	0x3f6f3400
 800f450:	3fe00000 	.word	0x3fe00000
 800f454:	652b82fe 	.word	0x652b82fe
 800f458:	3c971547 	.word	0x3c971547
 800f45c:	4090cc00 	.word	0x4090cc00

0800f460 <fabs>:
 800f460:	ec51 0b10 	vmov	r0, r1, d0
 800f464:	4602      	mov	r2, r0
 800f466:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f46a:	ec43 2b10 	vmov	d0, r2, r3
 800f46e:	4770      	bx	lr

0800f470 <scalbn>:
 800f470:	b570      	push	{r4, r5, r6, lr}
 800f472:	ec55 4b10 	vmov	r4, r5, d0
 800f476:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f47a:	4606      	mov	r6, r0
 800f47c:	462b      	mov	r3, r5
 800f47e:	b991      	cbnz	r1, 800f4a6 <scalbn+0x36>
 800f480:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f484:	4323      	orrs	r3, r4
 800f486:	d03d      	beq.n	800f504 <scalbn+0x94>
 800f488:	4b35      	ldr	r3, [pc, #212]	@ (800f560 <scalbn+0xf0>)
 800f48a:	4620      	mov	r0, r4
 800f48c:	4629      	mov	r1, r5
 800f48e:	2200      	movs	r2, #0
 800f490:	f7f1 f902 	bl	8000698 <__aeabi_dmul>
 800f494:	4b33      	ldr	r3, [pc, #204]	@ (800f564 <scalbn+0xf4>)
 800f496:	429e      	cmp	r6, r3
 800f498:	4604      	mov	r4, r0
 800f49a:	460d      	mov	r5, r1
 800f49c:	da0f      	bge.n	800f4be <scalbn+0x4e>
 800f49e:	a328      	add	r3, pc, #160	@ (adr r3, 800f540 <scalbn+0xd0>)
 800f4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4a4:	e01e      	b.n	800f4e4 <scalbn+0x74>
 800f4a6:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f4aa:	4291      	cmp	r1, r2
 800f4ac:	d10b      	bne.n	800f4c6 <scalbn+0x56>
 800f4ae:	4622      	mov	r2, r4
 800f4b0:	4620      	mov	r0, r4
 800f4b2:	4629      	mov	r1, r5
 800f4b4:	f7f0 ff3a 	bl	800032c <__adddf3>
 800f4b8:	4604      	mov	r4, r0
 800f4ba:	460d      	mov	r5, r1
 800f4bc:	e022      	b.n	800f504 <scalbn+0x94>
 800f4be:	460b      	mov	r3, r1
 800f4c0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f4c4:	3936      	subs	r1, #54	@ 0x36
 800f4c6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f4ca:	4296      	cmp	r6, r2
 800f4cc:	dd0d      	ble.n	800f4ea <scalbn+0x7a>
 800f4ce:	2d00      	cmp	r5, #0
 800f4d0:	a11d      	add	r1, pc, #116	@ (adr r1, 800f548 <scalbn+0xd8>)
 800f4d2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4d6:	da02      	bge.n	800f4de <scalbn+0x6e>
 800f4d8:	a11d      	add	r1, pc, #116	@ (adr r1, 800f550 <scalbn+0xe0>)
 800f4da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f4de:	a31a      	add	r3, pc, #104	@ (adr r3, 800f548 <scalbn+0xd8>)
 800f4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f4e4:	f7f1 f8d8 	bl	8000698 <__aeabi_dmul>
 800f4e8:	e7e6      	b.n	800f4b8 <scalbn+0x48>
 800f4ea:	1872      	adds	r2, r6, r1
 800f4ec:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800f4f0:	428a      	cmp	r2, r1
 800f4f2:	dcec      	bgt.n	800f4ce <scalbn+0x5e>
 800f4f4:	2a00      	cmp	r2, #0
 800f4f6:	dd08      	ble.n	800f50a <scalbn+0x9a>
 800f4f8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f4fc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f500:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f504:	ec45 4b10 	vmov	d0, r4, r5
 800f508:	bd70      	pop	{r4, r5, r6, pc}
 800f50a:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800f50e:	da08      	bge.n	800f522 <scalbn+0xb2>
 800f510:	2d00      	cmp	r5, #0
 800f512:	a10b      	add	r1, pc, #44	@ (adr r1, 800f540 <scalbn+0xd0>)
 800f514:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f518:	dac1      	bge.n	800f49e <scalbn+0x2e>
 800f51a:	a10f      	add	r1, pc, #60	@ (adr r1, 800f558 <scalbn+0xe8>)
 800f51c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f520:	e7bd      	b.n	800f49e <scalbn+0x2e>
 800f522:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f526:	3236      	adds	r2, #54	@ 0x36
 800f528:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f52c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f530:	4620      	mov	r0, r4
 800f532:	4b0d      	ldr	r3, [pc, #52]	@ (800f568 <scalbn+0xf8>)
 800f534:	4629      	mov	r1, r5
 800f536:	2200      	movs	r2, #0
 800f538:	e7d4      	b.n	800f4e4 <scalbn+0x74>
 800f53a:	bf00      	nop
 800f53c:	f3af 8000 	nop.w
 800f540:	c2f8f359 	.word	0xc2f8f359
 800f544:	01a56e1f 	.word	0x01a56e1f
 800f548:	8800759c 	.word	0x8800759c
 800f54c:	7e37e43c 	.word	0x7e37e43c
 800f550:	8800759c 	.word	0x8800759c
 800f554:	fe37e43c 	.word	0xfe37e43c
 800f558:	c2f8f359 	.word	0xc2f8f359
 800f55c:	81a56e1f 	.word	0x81a56e1f
 800f560:	43500000 	.word	0x43500000
 800f564:	ffff3cb0 	.word	0xffff3cb0
 800f568:	3c900000 	.word	0x3c900000

0800f56c <with_errno>:
 800f56c:	b510      	push	{r4, lr}
 800f56e:	ed2d 8b02 	vpush	{d8}
 800f572:	eeb0 8a40 	vmov.f32	s16, s0
 800f576:	eef0 8a60 	vmov.f32	s17, s1
 800f57a:	4604      	mov	r4, r0
 800f57c:	f7fd f936 	bl	800c7ec <__errno>
 800f580:	eeb0 0a48 	vmov.f32	s0, s16
 800f584:	eef0 0a68 	vmov.f32	s1, s17
 800f588:	ecbd 8b02 	vpop	{d8}
 800f58c:	6004      	str	r4, [r0, #0]
 800f58e:	bd10      	pop	{r4, pc}

0800f590 <xflow>:
 800f590:	4603      	mov	r3, r0
 800f592:	b507      	push	{r0, r1, r2, lr}
 800f594:	ec51 0b10 	vmov	r0, r1, d0
 800f598:	b183      	cbz	r3, 800f5bc <xflow+0x2c>
 800f59a:	4602      	mov	r2, r0
 800f59c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f5a0:	e9cd 2300 	strd	r2, r3, [sp]
 800f5a4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f5a8:	f7f1 f876 	bl	8000698 <__aeabi_dmul>
 800f5ac:	ec41 0b10 	vmov	d0, r0, r1
 800f5b0:	2022      	movs	r0, #34	@ 0x22
 800f5b2:	b003      	add	sp, #12
 800f5b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800f5b8:	f7ff bfd8 	b.w	800f56c <with_errno>
 800f5bc:	4602      	mov	r2, r0
 800f5be:	460b      	mov	r3, r1
 800f5c0:	e7ee      	b.n	800f5a0 <xflow+0x10>
 800f5c2:	0000      	movs	r0, r0
 800f5c4:	0000      	movs	r0, r0
	...

0800f5c8 <__math_uflow>:
 800f5c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f5d0 <__math_uflow+0x8>
 800f5cc:	f7ff bfe0 	b.w	800f590 <xflow>
 800f5d0:	00000000 	.word	0x00000000
 800f5d4:	10000000 	.word	0x10000000

0800f5d8 <__math_oflow>:
 800f5d8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f5e0 <__math_oflow+0x8>
 800f5dc:	f7ff bfd8 	b.w	800f590 <xflow>
 800f5e0:	00000000 	.word	0x00000000
 800f5e4:	70000000 	.word	0x70000000

0800f5e8 <__ieee754_sqrt>:
 800f5e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f5ec:	4a68      	ldr	r2, [pc, #416]	@ (800f790 <__ieee754_sqrt+0x1a8>)
 800f5ee:	ec55 4b10 	vmov	r4, r5, d0
 800f5f2:	43aa      	bics	r2, r5
 800f5f4:	462b      	mov	r3, r5
 800f5f6:	4621      	mov	r1, r4
 800f5f8:	d110      	bne.n	800f61c <__ieee754_sqrt+0x34>
 800f5fa:	4622      	mov	r2, r4
 800f5fc:	4620      	mov	r0, r4
 800f5fe:	4629      	mov	r1, r5
 800f600:	f7f1 f84a 	bl	8000698 <__aeabi_dmul>
 800f604:	4602      	mov	r2, r0
 800f606:	460b      	mov	r3, r1
 800f608:	4620      	mov	r0, r4
 800f60a:	4629      	mov	r1, r5
 800f60c:	f7f0 fe8e 	bl	800032c <__adddf3>
 800f610:	4604      	mov	r4, r0
 800f612:	460d      	mov	r5, r1
 800f614:	ec45 4b10 	vmov	d0, r4, r5
 800f618:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f61c:	2d00      	cmp	r5, #0
 800f61e:	dc0e      	bgt.n	800f63e <__ieee754_sqrt+0x56>
 800f620:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800f624:	4322      	orrs	r2, r4
 800f626:	d0f5      	beq.n	800f614 <__ieee754_sqrt+0x2c>
 800f628:	b19d      	cbz	r5, 800f652 <__ieee754_sqrt+0x6a>
 800f62a:	4622      	mov	r2, r4
 800f62c:	4620      	mov	r0, r4
 800f62e:	4629      	mov	r1, r5
 800f630:	f7f0 fe7a 	bl	8000328 <__aeabi_dsub>
 800f634:	4602      	mov	r2, r0
 800f636:	460b      	mov	r3, r1
 800f638:	f7f1 f958 	bl	80008ec <__aeabi_ddiv>
 800f63c:	e7e8      	b.n	800f610 <__ieee754_sqrt+0x28>
 800f63e:	152a      	asrs	r2, r5, #20
 800f640:	d115      	bne.n	800f66e <__ieee754_sqrt+0x86>
 800f642:	2000      	movs	r0, #0
 800f644:	e009      	b.n	800f65a <__ieee754_sqrt+0x72>
 800f646:	0acb      	lsrs	r3, r1, #11
 800f648:	3a15      	subs	r2, #21
 800f64a:	0549      	lsls	r1, r1, #21
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	d0fa      	beq.n	800f646 <__ieee754_sqrt+0x5e>
 800f650:	e7f7      	b.n	800f642 <__ieee754_sqrt+0x5a>
 800f652:	462a      	mov	r2, r5
 800f654:	e7fa      	b.n	800f64c <__ieee754_sqrt+0x64>
 800f656:	005b      	lsls	r3, r3, #1
 800f658:	3001      	adds	r0, #1
 800f65a:	02dc      	lsls	r4, r3, #11
 800f65c:	d5fb      	bpl.n	800f656 <__ieee754_sqrt+0x6e>
 800f65e:	1e44      	subs	r4, r0, #1
 800f660:	1b12      	subs	r2, r2, r4
 800f662:	f1c0 0420 	rsb	r4, r0, #32
 800f666:	fa21 f404 	lsr.w	r4, r1, r4
 800f66a:	4323      	orrs	r3, r4
 800f66c:	4081      	lsls	r1, r0
 800f66e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800f672:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800f676:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f67a:	07d2      	lsls	r2, r2, #31
 800f67c:	bf5c      	itt	pl
 800f67e:	005b      	lslpl	r3, r3, #1
 800f680:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800f684:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f688:	bf58      	it	pl
 800f68a:	0049      	lslpl	r1, r1, #1
 800f68c:	2600      	movs	r6, #0
 800f68e:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800f692:	106d      	asrs	r5, r5, #1
 800f694:	0049      	lsls	r1, r1, #1
 800f696:	2016      	movs	r0, #22
 800f698:	4632      	mov	r2, r6
 800f69a:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800f69e:	1917      	adds	r7, r2, r4
 800f6a0:	429f      	cmp	r7, r3
 800f6a2:	bfde      	ittt	le
 800f6a4:	193a      	addle	r2, r7, r4
 800f6a6:	1bdb      	suble	r3, r3, r7
 800f6a8:	1936      	addle	r6, r6, r4
 800f6aa:	0fcf      	lsrs	r7, r1, #31
 800f6ac:	3801      	subs	r0, #1
 800f6ae:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800f6b2:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f6b6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800f6ba:	d1f0      	bne.n	800f69e <__ieee754_sqrt+0xb6>
 800f6bc:	4604      	mov	r4, r0
 800f6be:	2720      	movs	r7, #32
 800f6c0:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800f6c4:	429a      	cmp	r2, r3
 800f6c6:	eb00 0e0c 	add.w	lr, r0, ip
 800f6ca:	db02      	blt.n	800f6d2 <__ieee754_sqrt+0xea>
 800f6cc:	d113      	bne.n	800f6f6 <__ieee754_sqrt+0x10e>
 800f6ce:	458e      	cmp	lr, r1
 800f6d0:	d811      	bhi.n	800f6f6 <__ieee754_sqrt+0x10e>
 800f6d2:	f1be 0f00 	cmp.w	lr, #0
 800f6d6:	eb0e 000c 	add.w	r0, lr, ip
 800f6da:	da42      	bge.n	800f762 <__ieee754_sqrt+0x17a>
 800f6dc:	2800      	cmp	r0, #0
 800f6de:	db40      	blt.n	800f762 <__ieee754_sqrt+0x17a>
 800f6e0:	f102 0801 	add.w	r8, r2, #1
 800f6e4:	1a9b      	subs	r3, r3, r2
 800f6e6:	458e      	cmp	lr, r1
 800f6e8:	bf88      	it	hi
 800f6ea:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800f6ee:	eba1 010e 	sub.w	r1, r1, lr
 800f6f2:	4464      	add	r4, ip
 800f6f4:	4642      	mov	r2, r8
 800f6f6:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800f6fa:	3f01      	subs	r7, #1
 800f6fc:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800f700:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800f704:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800f708:	d1dc      	bne.n	800f6c4 <__ieee754_sqrt+0xdc>
 800f70a:	4319      	orrs	r1, r3
 800f70c:	d01b      	beq.n	800f746 <__ieee754_sqrt+0x15e>
 800f70e:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800f794 <__ieee754_sqrt+0x1ac>
 800f712:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800f798 <__ieee754_sqrt+0x1b0>
 800f716:	e9da 0100 	ldrd	r0, r1, [sl]
 800f71a:	e9db 2300 	ldrd	r2, r3, [fp]
 800f71e:	f7f0 fe03 	bl	8000328 <__aeabi_dsub>
 800f722:	e9da 8900 	ldrd	r8, r9, [sl]
 800f726:	4602      	mov	r2, r0
 800f728:	460b      	mov	r3, r1
 800f72a:	4640      	mov	r0, r8
 800f72c:	4649      	mov	r1, r9
 800f72e:	f7f1 fa2f 	bl	8000b90 <__aeabi_dcmple>
 800f732:	b140      	cbz	r0, 800f746 <__ieee754_sqrt+0x15e>
 800f734:	f1b4 3fff 	cmp.w	r4, #4294967295
 800f738:	e9da 0100 	ldrd	r0, r1, [sl]
 800f73c:	e9db 2300 	ldrd	r2, r3, [fp]
 800f740:	d111      	bne.n	800f766 <__ieee754_sqrt+0x17e>
 800f742:	3601      	adds	r6, #1
 800f744:	463c      	mov	r4, r7
 800f746:	1072      	asrs	r2, r6, #1
 800f748:	0863      	lsrs	r3, r4, #1
 800f74a:	07f1      	lsls	r1, r6, #31
 800f74c:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800f750:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800f754:	bf48      	it	mi
 800f756:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800f75a:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800f75e:	4618      	mov	r0, r3
 800f760:	e756      	b.n	800f610 <__ieee754_sqrt+0x28>
 800f762:	4690      	mov	r8, r2
 800f764:	e7be      	b.n	800f6e4 <__ieee754_sqrt+0xfc>
 800f766:	f7f0 fde1 	bl	800032c <__adddf3>
 800f76a:	e9da 8900 	ldrd	r8, r9, [sl]
 800f76e:	4602      	mov	r2, r0
 800f770:	460b      	mov	r3, r1
 800f772:	4640      	mov	r0, r8
 800f774:	4649      	mov	r1, r9
 800f776:	f7f1 fa01 	bl	8000b7c <__aeabi_dcmplt>
 800f77a:	b120      	cbz	r0, 800f786 <__ieee754_sqrt+0x19e>
 800f77c:	1ca0      	adds	r0, r4, #2
 800f77e:	bf08      	it	eq
 800f780:	3601      	addeq	r6, #1
 800f782:	3402      	adds	r4, #2
 800f784:	e7df      	b.n	800f746 <__ieee754_sqrt+0x15e>
 800f786:	1c63      	adds	r3, r4, #1
 800f788:	f023 0401 	bic.w	r4, r3, #1
 800f78c:	e7db      	b.n	800f746 <__ieee754_sqrt+0x15e>
 800f78e:	bf00      	nop
 800f790:	7ff00000 	.word	0x7ff00000
 800f794:	200001e8 	.word	0x200001e8
 800f798:	200001e0 	.word	0x200001e0

0800f79c <_sbrk>:
 800f79c:	4a04      	ldr	r2, [pc, #16]	@ (800f7b0 <_sbrk+0x14>)
 800f79e:	6811      	ldr	r1, [r2, #0]
 800f7a0:	4603      	mov	r3, r0
 800f7a2:	b909      	cbnz	r1, 800f7a8 <_sbrk+0xc>
 800f7a4:	4903      	ldr	r1, [pc, #12]	@ (800f7b4 <_sbrk+0x18>)
 800f7a6:	6011      	str	r1, [r2, #0]
 800f7a8:	6810      	ldr	r0, [r2, #0]
 800f7aa:	4403      	add	r3, r0
 800f7ac:	6013      	str	r3, [r2, #0]
 800f7ae:	4770      	bx	lr
 800f7b0:	20013d88 	.word	0x20013d88
 800f7b4:	20013d90 	.word	0x20013d90

0800f7b8 <_init>:
 800f7b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ba:	bf00      	nop
 800f7bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7be:	bc08      	pop	{r3}
 800f7c0:	469e      	mov	lr, r3
 800f7c2:	4770      	bx	lr

0800f7c4 <_fini>:
 800f7c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7c6:	bf00      	nop
 800f7c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7ca:	bc08      	pop	{r3}
 800f7cc:	469e      	mov	lr, r3
 800f7ce:	4770      	bx	lr
