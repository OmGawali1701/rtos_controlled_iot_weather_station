
RTOS_Controlled_IoT_Weather_Station.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ea98  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000898  0800ec28  0800ec28  0000fc28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800f4c0  0800f4c0  000111f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800f4c0  0800f4c0  000104c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800f4c8  0800f4c8  000111f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800f4c8  0800f4c8  000104c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800f4cc  0800f4cc  000104cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800f4d0  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000111f0  2**0
                  CONTENTS
 10 .bss          00013b34  200001f0  200001f0  000111f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20013d24  20013d24  000111f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000111f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ce7b  00000000  00000000  00011220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003dc4  00000000  00000000  0002e09b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019c0  00000000  00000000  00031e60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001435  00000000  00000000  00033820  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027911  00000000  00000000  00034c55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023818  00000000  00000000  0005c566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000f8eb2  00000000  00000000  0007fd7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00178c30  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000081d8  00000000  00000000  00178c74  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 000000b3  00000000  00000000  00180e4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ec10 	.word	0x0800ec10

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800ec10 	.word	0x0800ec10

080001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>:
        //   R4 <Rem>
        //   R5 pRing->pBuffer
        //   R6 pRing (Points to active struct SEGGER_RTT_BUFFER_DOWN)
        //   R7 WrOff
        //
        PUSH     {R4-R7}
 80001d0:	b4f0      	push	{r4, r5, r6, r7}
        ADD      R3,R0,R0, LSL #+1
 80001d2:	eb00 0340 	add.w	r3, r0, r0, lsl #1
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 80001d6:	f8df 0088 	ldr.w	r0, [pc, #136]	@ 8000260 <_Case3+0x6>
        ADD      R0,R0,R3, LSL #+3
 80001da:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
        ADD      R6,R0,#+24
 80001de:	f100 0618 	add.w	r6, r0, #24
        LDR      R0,[R6, #+16]                   // RdOff = pRing->RdOff;
 80001e2:	6930      	ldr	r0, [r6, #16]
        LDR      R7,[R6, #+12]                   // WrOff = pRing->WrOff;
 80001e4:	68f7      	ldr	r7, [r6, #12]
        LDR      R5,[R6, #+4]                    // pRing->pBuffer
 80001e6:	6875      	ldr	r5, [r6, #4]
        CMP      R7,R0
 80001e8:	4287      	cmp	r7, r0
        BCC.N    _CheckCase4                     // if (RdOff <= WrOff) {                           => Case 1), 2) or 3)
 80001ea:	d332      	bcc.n	8000252 <_CheckCase4>
        //
        // Handling for case 1, later on identical to case 4
        //
        LDR      R3,[R6, #+8]                    //  Avail = pRing->SizeOfBuffer - WrOff - 1u;      => Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
 80001ec:	68b3      	ldr	r3, [r6, #8]
        SUBS     R4,R3,R7                        // <Rem> (Used in case we jump into case 2 afterwards)
 80001ee:	1bdc      	subs	r4, r3, r7
        SUBS     R3,R4,#+1                       // <Avail>
 80001f0:	1e63      	subs	r3, r4, #1
        CMP      R3,R2
 80001f2:	4293      	cmp	r3, r2
        BCC.N    _CheckCase2                     // if (Avail >= NumBytes) {  => Case 1)?
 80001f4:	d314      	bcc.n	8000220 <_CheckCase2>

080001f6 <_Case4>:
_Case4:
        ADDS     R5,R7,R5                        // pBuffer += WrOff
 80001f6:	197d      	adds	r5, r7, r5
        ADDS     R0,R2,R7                        // v = WrOff + NumBytes
 80001f8:	19d0      	adds	r0, r2, r7
 80001fa:	bf00      	nop

080001fc <_LoopCopyStraight>:
        // 2x unrolling for the copy loop that is used most of the time
        // This is a special optimization for small SystemView packets and makes them even faster
        //
        _ALIGN(2)
_LoopCopyStraight:                               // memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
        LDRB     R3,[R1], #+1
 80001fc:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 8000200:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000204:	3a01      	subs	r2, #1
        BEQ      _CSDone
 8000206:	d005      	beq.n	8000214 <_CSDone>
        LDRB     R3,[R1], #+1
 8000208:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800020c:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000210:	3a01      	subs	r2, #1
        BNE      _LoopCopyStraight
 8000212:	d1f3      	bne.n	80001fc <_LoopCopyStraight>

08000214 <_CSDone>:
_CSDone:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000214:	f3bf 8f5f 	dmb	sy
#endif
        STR      R0,[R6, #+12]                   // pRing->WrOff = WrOff + NumBytes;
 8000218:	60f0      	str	r0, [r6, #12]
        MOVS     R0,#+1
 800021a:	2001      	movs	r0, #1
        POP      {R4-R7}
 800021c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 800021e:	4770      	bx	lr

08000220 <_CheckCase2>:
_CheckCase2:
        ADDS     R0,R0,R3                        // Avail += RdOff; => Space incl. wrap-around
 8000220:	18c0      	adds	r0, r0, r3
        CMP      R0,R2
 8000222:	4290      	cmp	r0, r2
        BCC.N    _Case3                          // if (Avail >= NumBytes) {           => Case 2? => If not, we have case 3) (does not fit)
 8000224:	d319      	bcc.n	800025a <_Case3>
        //
        // Handling for case 2
        //
        ADDS     R0,R7,R5                        // v = pRing->pBuffer + WrOff => Do not change pRing->pBuffer here because 2nd chunk needs org. value
 8000226:	1978      	adds	r0, r7, r5
        SUBS     R2,R2,R4                        // NumBytes -= Rem;  (Rem = pRing->SizeOfBuffer - WrOff; => Space until end of buffer)
 8000228:	1b12      	subs	r2, r2, r4

0800022a <_LoopCopyBeforeWrapAround>:
_LoopCopyBeforeWrapAround:                       // memcpy(pRing->pBuffer + WrOff, pData, Rem); => Copy 1st chunk
        LDRB     R3,[R1], #+1
 800022a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R0], #+1                    // *pDest++ = *pSrc++
 800022e:	f800 3b01 	strb.w	r3, [r0], #1
        SUBS     R4,R4,#+1
 8000232:	3c01      	subs	r4, #1
        BNE      _LoopCopyBeforeWrapAround
 8000234:	d1f9      	bne.n	800022a <_LoopCopyBeforeWrapAround>
        // Special case: First check that assumed RdOff == 0 calculated that last element before wrap-around could not be used
        // But 2nd check (considering space until wrap-around and until RdOff) revealed that RdOff is not 0, so we can use the last element
        // In this case, we may use a copy straight until buffer end anyway without needing to copy 2 chunks
        // Therefore, check if 2nd memcpy is necessary at all
        //
        ADDS     R4,R2,#+0                       // Save <NumBytes> (needed as counter in loop but must be written to <WrOff> after the loop). Also use this inst to update the flags to skip 2nd loop if possible
 8000236:	1c14      	adds	r4, r2, #0
        BEQ.N    _No2ChunkNeeded                 // if (NumBytes) {
 8000238:	d005      	beq.n	8000246 <_No2ChunkNeeded>

0800023a <_LoopCopyAfterWrapAround>:
_LoopCopyAfterWrapAround:                        // memcpy(pRing->pBuffer, pData + Rem, NumBytes);
        LDRB     R3,[R1], #+1                    // pData already points to the next src byte due to copy loop increment before this loop
 800023a:	f811 3b01 	ldrb.w	r3, [r1], #1
        STRB     R3,[R5], #+1                    // *pDest++ = *pSrc++
 800023e:	f805 3b01 	strb.w	r3, [r5], #1
        SUBS     R2,R2,#+1
 8000242:	3a01      	subs	r2, #1
        BNE      _LoopCopyAfterWrapAround
 8000244:	d1f9      	bne.n	800023a <_LoopCopyAfterWrapAround>

08000246 <_No2ChunkNeeded>:
_No2ChunkNeeded:
#if _CORE_NEEDS_DMB                              // Do not slow down cores that do not need a DMB instruction here
        DMB                                      // Cortex-M7 may delay memory writes and also change the order in which the writes happen. Therefore, make sure that all buffer writes are finished, before updating the <WrOff> in the struct
 8000246:	f3bf 8f5f 	dmb	sy
#endif
        STR      R4,[R6, #+12]                   // pRing->WrOff = NumBytes; => Must be written after copying data because J-Link may read control block asynchronously while writing into buffer
 800024a:	60f4      	str	r4, [r6, #12]
        MOVS     R0,#+1
 800024c:	2001      	movs	r0, #1
        POP      {R4-R7}
 800024e:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 1
 8000250:	4770      	bx	lr

08000252 <_CheckCase4>:
_CheckCase4:
        SUBS     R0,R0,R7
 8000252:	1bc0      	subs	r0, r0, r7
        SUBS     R0,R0,#+1                       // Avail = RdOff - WrOff - 1u;
 8000254:	3801      	subs	r0, #1
        CMP      R0,R2
 8000256:	4290      	cmp	r0, r2
        BCS.N    _Case4                          // if (Avail >= NumBytes) {      => Case 4) == 1) ? => If not, we have case 5) == 3) (does not fit)
 8000258:	d2cd      	bcs.n	80001f6 <_Case4>

0800025a <_Case3>:
_Case3:
        MOVS     R0,#+0
 800025a:	2000      	movs	r0, #0
        POP      {R4-R7}
 800025c:	bcf0      	pop	{r4, r5, r6, r7}
        BX       LR                              // Return 0
 800025e:	4770      	bx	lr
        LDR.W    R0,=_SEGGER_RTT                 // pRing = &_SEGGER_RTT.aUp[BufferIndex];
 8000260:	20013200 	.word	0x20013200

08000264 <strcmp>:
 8000264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000268:	f811 3b01 	ldrb.w	r3, [r1], #1
 800026c:	2a01      	cmp	r2, #1
 800026e:	bf28      	it	cs
 8000270:	429a      	cmpcs	r2, r3
 8000272:	d0f7      	beq.n	8000264 <strcmp>
 8000274:	1ad0      	subs	r0, r2, r3
 8000276:	4770      	bx	lr
	...

08000280 <memchr>:
 8000280:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000284:	2a10      	cmp	r2, #16
 8000286:	db2b      	blt.n	80002e0 <memchr+0x60>
 8000288:	f010 0f07 	tst.w	r0, #7
 800028c:	d008      	beq.n	80002a0 <memchr+0x20>
 800028e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000292:	3a01      	subs	r2, #1
 8000294:	428b      	cmp	r3, r1
 8000296:	d02d      	beq.n	80002f4 <memchr+0x74>
 8000298:	f010 0f07 	tst.w	r0, #7
 800029c:	b342      	cbz	r2, 80002f0 <memchr+0x70>
 800029e:	d1f6      	bne.n	800028e <memchr+0xe>
 80002a0:	b4f0      	push	{r4, r5, r6, r7}
 80002a2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80002a6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80002aa:	f022 0407 	bic.w	r4, r2, #7
 80002ae:	f07f 0700 	mvns.w	r7, #0
 80002b2:	2300      	movs	r3, #0
 80002b4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 80002b8:	3c08      	subs	r4, #8
 80002ba:	ea85 0501 	eor.w	r5, r5, r1
 80002be:	ea86 0601 	eor.w	r6, r6, r1
 80002c2:	fa85 f547 	uadd8	r5, r5, r7
 80002c6:	faa3 f587 	sel	r5, r3, r7
 80002ca:	fa86 f647 	uadd8	r6, r6, r7
 80002ce:	faa5 f687 	sel	r6, r5, r7
 80002d2:	b98e      	cbnz	r6, 80002f8 <memchr+0x78>
 80002d4:	d1ee      	bne.n	80002b4 <memchr+0x34>
 80002d6:	bcf0      	pop	{r4, r5, r6, r7}
 80002d8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002dc:	f002 0207 	and.w	r2, r2, #7
 80002e0:	b132      	cbz	r2, 80002f0 <memchr+0x70>
 80002e2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002e6:	3a01      	subs	r2, #1
 80002e8:	ea83 0301 	eor.w	r3, r3, r1
 80002ec:	b113      	cbz	r3, 80002f4 <memchr+0x74>
 80002ee:	d1f8      	bne.n	80002e2 <memchr+0x62>
 80002f0:	2000      	movs	r0, #0
 80002f2:	4770      	bx	lr
 80002f4:	3801      	subs	r0, #1
 80002f6:	4770      	bx	lr
 80002f8:	2d00      	cmp	r5, #0
 80002fa:	bf06      	itte	eq
 80002fc:	4635      	moveq	r5, r6
 80002fe:	3803      	subeq	r0, #3
 8000300:	3807      	subne	r0, #7
 8000302:	f015 0f01 	tst.w	r5, #1
 8000306:	d107      	bne.n	8000318 <memchr+0x98>
 8000308:	3001      	adds	r0, #1
 800030a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800030e:	bf02      	ittt	eq
 8000310:	3001      	addeq	r0, #1
 8000312:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000316:	3001      	addeq	r0, #1
 8000318:	bcf0      	pop	{r4, r5, r6, r7}
 800031a:	3801      	subs	r0, #1
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop

08000320 <strlen>:
 8000320:	4603      	mov	r3, r0
 8000322:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000326:	2a00      	cmp	r2, #0
 8000328:	d1fb      	bne.n	8000322 <strlen+0x2>
 800032a:	1a18      	subs	r0, r3, r0
 800032c:	3801      	subs	r0, #1
 800032e:	4770      	bx	lr

08000330 <__aeabi_drsub>:
 8000330:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000334:	e002      	b.n	800033c <__adddf3>
 8000336:	bf00      	nop

08000338 <__aeabi_dsub>:
 8000338:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800033c <__adddf3>:
 800033c:	b530      	push	{r4, r5, lr}
 800033e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000342:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000346:	ea94 0f05 	teq	r4, r5
 800034a:	bf08      	it	eq
 800034c:	ea90 0f02 	teqeq	r0, r2
 8000350:	bf1f      	itttt	ne
 8000352:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000356:	ea55 0c02 	orrsne.w	ip, r5, r2
 800035a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800035e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000362:	f000 80e2 	beq.w	800052a <__adddf3+0x1ee>
 8000366:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800036a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800036e:	bfb8      	it	lt
 8000370:	426d      	neglt	r5, r5
 8000372:	dd0c      	ble.n	800038e <__adddf3+0x52>
 8000374:	442c      	add	r4, r5
 8000376:	ea80 0202 	eor.w	r2, r0, r2
 800037a:	ea81 0303 	eor.w	r3, r1, r3
 800037e:	ea82 0000 	eor.w	r0, r2, r0
 8000382:	ea83 0101 	eor.w	r1, r3, r1
 8000386:	ea80 0202 	eor.w	r2, r0, r2
 800038a:	ea81 0303 	eor.w	r3, r1, r3
 800038e:	2d36      	cmp	r5, #54	@ 0x36
 8000390:	bf88      	it	hi
 8000392:	bd30      	pophi	{r4, r5, pc}
 8000394:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000398:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800039c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003a0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003a4:	d002      	beq.n	80003ac <__adddf3+0x70>
 80003a6:	4240      	negs	r0, r0
 80003a8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003ac:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80003b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80003b4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80003b8:	d002      	beq.n	80003c0 <__adddf3+0x84>
 80003ba:	4252      	negs	r2, r2
 80003bc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80003c0:	ea94 0f05 	teq	r4, r5
 80003c4:	f000 80a7 	beq.w	8000516 <__adddf3+0x1da>
 80003c8:	f1a4 0401 	sub.w	r4, r4, #1
 80003cc:	f1d5 0e20 	rsbs	lr, r5, #32
 80003d0:	db0d      	blt.n	80003ee <__adddf3+0xb2>
 80003d2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80003d6:	fa22 f205 	lsr.w	r2, r2, r5
 80003da:	1880      	adds	r0, r0, r2
 80003dc:	f141 0100 	adc.w	r1, r1, #0
 80003e0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003e4:	1880      	adds	r0, r0, r2
 80003e6:	fa43 f305 	asr.w	r3, r3, r5
 80003ea:	4159      	adcs	r1, r3
 80003ec:	e00e      	b.n	800040c <__adddf3+0xd0>
 80003ee:	f1a5 0520 	sub.w	r5, r5, #32
 80003f2:	f10e 0e20 	add.w	lr, lr, #32
 80003f6:	2a01      	cmp	r2, #1
 80003f8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003fc:	bf28      	it	cs
 80003fe:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000402:	fa43 f305 	asr.w	r3, r3, r5
 8000406:	18c0      	adds	r0, r0, r3
 8000408:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800040c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000410:	d507      	bpl.n	8000422 <__adddf3+0xe6>
 8000412:	f04f 0e00 	mov.w	lr, #0
 8000416:	f1dc 0c00 	rsbs	ip, ip, #0
 800041a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800041e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000422:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000426:	d31b      	bcc.n	8000460 <__adddf3+0x124>
 8000428:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800042c:	d30c      	bcc.n	8000448 <__adddf3+0x10c>
 800042e:	0849      	lsrs	r1, r1, #1
 8000430:	ea5f 0030 	movs.w	r0, r0, rrx
 8000434:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000438:	f104 0401 	add.w	r4, r4, #1
 800043c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000440:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000444:	f080 809a 	bcs.w	800057c <__adddf3+0x240>
 8000448:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800044c:	bf08      	it	eq
 800044e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000452:	f150 0000 	adcs.w	r0, r0, #0
 8000456:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800045a:	ea41 0105 	orr.w	r1, r1, r5
 800045e:	bd30      	pop	{r4, r5, pc}
 8000460:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000464:	4140      	adcs	r0, r0
 8000466:	eb41 0101 	adc.w	r1, r1, r1
 800046a:	3c01      	subs	r4, #1
 800046c:	bf28      	it	cs
 800046e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000472:	d2e9      	bcs.n	8000448 <__adddf3+0x10c>
 8000474:	f091 0f00 	teq	r1, #0
 8000478:	bf04      	itt	eq
 800047a:	4601      	moveq	r1, r0
 800047c:	2000      	moveq	r0, #0
 800047e:	fab1 f381 	clz	r3, r1
 8000482:	bf08      	it	eq
 8000484:	3320      	addeq	r3, #32
 8000486:	f1a3 030b 	sub.w	r3, r3, #11
 800048a:	f1b3 0220 	subs.w	r2, r3, #32
 800048e:	da0c      	bge.n	80004aa <__adddf3+0x16e>
 8000490:	320c      	adds	r2, #12
 8000492:	dd08      	ble.n	80004a6 <__adddf3+0x16a>
 8000494:	f102 0c14 	add.w	ip, r2, #20
 8000498:	f1c2 020c 	rsb	r2, r2, #12
 800049c:	fa01 f00c 	lsl.w	r0, r1, ip
 80004a0:	fa21 f102 	lsr.w	r1, r1, r2
 80004a4:	e00c      	b.n	80004c0 <__adddf3+0x184>
 80004a6:	f102 0214 	add.w	r2, r2, #20
 80004aa:	bfd8      	it	le
 80004ac:	f1c2 0c20 	rsble	ip, r2, #32
 80004b0:	fa01 f102 	lsl.w	r1, r1, r2
 80004b4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80004b8:	bfdc      	itt	le
 80004ba:	ea41 010c 	orrle.w	r1, r1, ip
 80004be:	4090      	lslle	r0, r2
 80004c0:	1ae4      	subs	r4, r4, r3
 80004c2:	bfa2      	ittt	ge
 80004c4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80004c8:	4329      	orrge	r1, r5
 80004ca:	bd30      	popge	{r4, r5, pc}
 80004cc:	ea6f 0404 	mvn.w	r4, r4
 80004d0:	3c1f      	subs	r4, #31
 80004d2:	da1c      	bge.n	800050e <__adddf3+0x1d2>
 80004d4:	340c      	adds	r4, #12
 80004d6:	dc0e      	bgt.n	80004f6 <__adddf3+0x1ba>
 80004d8:	f104 0414 	add.w	r4, r4, #20
 80004dc:	f1c4 0220 	rsb	r2, r4, #32
 80004e0:	fa20 f004 	lsr.w	r0, r0, r4
 80004e4:	fa01 f302 	lsl.w	r3, r1, r2
 80004e8:	ea40 0003 	orr.w	r0, r0, r3
 80004ec:	fa21 f304 	lsr.w	r3, r1, r4
 80004f0:	ea45 0103 	orr.w	r1, r5, r3
 80004f4:	bd30      	pop	{r4, r5, pc}
 80004f6:	f1c4 040c 	rsb	r4, r4, #12
 80004fa:	f1c4 0220 	rsb	r2, r4, #32
 80004fe:	fa20 f002 	lsr.w	r0, r0, r2
 8000502:	fa01 f304 	lsl.w	r3, r1, r4
 8000506:	ea40 0003 	orr.w	r0, r0, r3
 800050a:	4629      	mov	r1, r5
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	fa21 f004 	lsr.w	r0, r1, r4
 8000512:	4629      	mov	r1, r5
 8000514:	bd30      	pop	{r4, r5, pc}
 8000516:	f094 0f00 	teq	r4, #0
 800051a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800051e:	bf06      	itte	eq
 8000520:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000524:	3401      	addeq	r4, #1
 8000526:	3d01      	subne	r5, #1
 8000528:	e74e      	b.n	80003c8 <__adddf3+0x8c>
 800052a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800052e:	bf18      	it	ne
 8000530:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000534:	d029      	beq.n	800058a <__adddf3+0x24e>
 8000536:	ea94 0f05 	teq	r4, r5
 800053a:	bf08      	it	eq
 800053c:	ea90 0f02 	teqeq	r0, r2
 8000540:	d005      	beq.n	800054e <__adddf3+0x212>
 8000542:	ea54 0c00 	orrs.w	ip, r4, r0
 8000546:	bf04      	itt	eq
 8000548:	4619      	moveq	r1, r3
 800054a:	4610      	moveq	r0, r2
 800054c:	bd30      	pop	{r4, r5, pc}
 800054e:	ea91 0f03 	teq	r1, r3
 8000552:	bf1e      	ittt	ne
 8000554:	2100      	movne	r1, #0
 8000556:	2000      	movne	r0, #0
 8000558:	bd30      	popne	{r4, r5, pc}
 800055a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800055e:	d105      	bne.n	800056c <__adddf3+0x230>
 8000560:	0040      	lsls	r0, r0, #1
 8000562:	4149      	adcs	r1, r1
 8000564:	bf28      	it	cs
 8000566:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800056a:	bd30      	pop	{r4, r5, pc}
 800056c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000570:	bf3c      	itt	cc
 8000572:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000576:	bd30      	popcc	{r4, r5, pc}
 8000578:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800057c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000580:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000584:	f04f 0000 	mov.w	r0, #0
 8000588:	bd30      	pop	{r4, r5, pc}
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf1a      	itte	ne
 8000590:	4619      	movne	r1, r3
 8000592:	4610      	movne	r0, r2
 8000594:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000598:	bf1c      	itt	ne
 800059a:	460b      	movne	r3, r1
 800059c:	4602      	movne	r2, r0
 800059e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005a2:	bf06      	itte	eq
 80005a4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005a8:	ea91 0f03 	teqeq	r1, r3
 80005ac:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80005b0:	bd30      	pop	{r4, r5, pc}
 80005b2:	bf00      	nop

080005b4 <__aeabi_ui2d>:
 80005b4:	f090 0f00 	teq	r0, #0
 80005b8:	bf04      	itt	eq
 80005ba:	2100      	moveq	r1, #0
 80005bc:	4770      	bxeq	lr
 80005be:	b530      	push	{r4, r5, lr}
 80005c0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005c8:	f04f 0500 	mov.w	r5, #0
 80005cc:	f04f 0100 	mov.w	r1, #0
 80005d0:	e750      	b.n	8000474 <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_i2d>:
 80005d4:	f090 0f00 	teq	r0, #0
 80005d8:	bf04      	itt	eq
 80005da:	2100      	moveq	r1, #0
 80005dc:	4770      	bxeq	lr
 80005de:	b530      	push	{r4, r5, lr}
 80005e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005e8:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80005ec:	bf48      	it	mi
 80005ee:	4240      	negmi	r0, r0
 80005f0:	f04f 0100 	mov.w	r1, #0
 80005f4:	e73e      	b.n	8000474 <__adddf3+0x138>
 80005f6:	bf00      	nop

080005f8 <__aeabi_f2d>:
 80005f8:	0042      	lsls	r2, r0, #1
 80005fa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005fe:	ea4f 0131 	mov.w	r1, r1, rrx
 8000602:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000606:	bf1f      	itttt	ne
 8000608:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800060c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000610:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000614:	4770      	bxne	lr
 8000616:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800061a:	bf08      	it	eq
 800061c:	4770      	bxeq	lr
 800061e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000622:	bf04      	itt	eq
 8000624:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000628:	4770      	bxeq	lr
 800062a:	b530      	push	{r4, r5, lr}
 800062c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000630:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000634:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000638:	e71c      	b.n	8000474 <__adddf3+0x138>
 800063a:	bf00      	nop

0800063c <__aeabi_ul2d>:
 800063c:	ea50 0201 	orrs.w	r2, r0, r1
 8000640:	bf08      	it	eq
 8000642:	4770      	bxeq	lr
 8000644:	b530      	push	{r4, r5, lr}
 8000646:	f04f 0500 	mov.w	r5, #0
 800064a:	e00a      	b.n	8000662 <__aeabi_l2d+0x16>

0800064c <__aeabi_l2d>:
 800064c:	ea50 0201 	orrs.w	r2, r0, r1
 8000650:	bf08      	it	eq
 8000652:	4770      	bxeq	lr
 8000654:	b530      	push	{r4, r5, lr}
 8000656:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800065a:	d502      	bpl.n	8000662 <__aeabi_l2d+0x16>
 800065c:	4240      	negs	r0, r0
 800065e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000662:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000666:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800066a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800066e:	f43f aed8 	beq.w	8000422 <__adddf3+0xe6>
 8000672:	f04f 0203 	mov.w	r2, #3
 8000676:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800067a:	bf18      	it	ne
 800067c:	3203      	addne	r2, #3
 800067e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000682:	bf18      	it	ne
 8000684:	3203      	addne	r2, #3
 8000686:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800068a:	f1c2 0320 	rsb	r3, r2, #32
 800068e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 fe03 	lsl.w	lr, r1, r3
 800069a:	ea40 000e 	orr.w	r0, r0, lr
 800069e:	fa21 f102 	lsr.w	r1, r1, r2
 80006a2:	4414      	add	r4, r2
 80006a4:	e6bd      	b.n	8000422 <__adddf3+0xe6>
 80006a6:	bf00      	nop

080006a8 <__aeabi_dmul>:
 80006a8:	b570      	push	{r4, r5, r6, lr}
 80006aa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80006ae:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80006b2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80006b6:	bf1d      	ittte	ne
 80006b8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80006bc:	ea94 0f0c 	teqne	r4, ip
 80006c0:	ea95 0f0c 	teqne	r5, ip
 80006c4:	f000 f8de 	bleq	8000884 <__aeabi_dmul+0x1dc>
 80006c8:	442c      	add	r4, r5
 80006ca:	ea81 0603 	eor.w	r6, r1, r3
 80006ce:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80006d2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80006d6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80006da:	bf18      	it	ne
 80006dc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006e0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80006e8:	d038      	beq.n	800075c <__aeabi_dmul+0xb4>
 80006ea:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ee:	f04f 0500 	mov.w	r5, #0
 80006f2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006f6:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80006fa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006fe:	f04f 0600 	mov.w	r6, #0
 8000702:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000706:	f09c 0f00 	teq	ip, #0
 800070a:	bf18      	it	ne
 800070c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000710:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000714:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000718:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800071c:	d204      	bcs.n	8000728 <__aeabi_dmul+0x80>
 800071e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000722:	416d      	adcs	r5, r5
 8000724:	eb46 0606 	adc.w	r6, r6, r6
 8000728:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800072c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000730:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000734:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000738:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800073c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000740:	bf88      	it	hi
 8000742:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000746:	d81e      	bhi.n	8000786 <__aeabi_dmul+0xde>
 8000748:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800074c:	bf08      	it	eq
 800074e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000752:	f150 0000 	adcs.w	r0, r0, #0
 8000756:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000760:	ea46 0101 	orr.w	r1, r6, r1
 8000764:	ea40 0002 	orr.w	r0, r0, r2
 8000768:	ea81 0103 	eor.w	r1, r1, r3
 800076c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000770:	bfc2      	ittt	gt
 8000772:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000776:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800077a:	bd70      	popgt	{r4, r5, r6, pc}
 800077c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000780:	f04f 0e00 	mov.w	lr, #0
 8000784:	3c01      	subs	r4, #1
 8000786:	f300 80ab 	bgt.w	80008e0 <__aeabi_dmul+0x238>
 800078a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800078e:	bfde      	ittt	le
 8000790:	2000      	movle	r0, #0
 8000792:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000796:	bd70      	pople	{r4, r5, r6, pc}
 8000798:	f1c4 0400 	rsb	r4, r4, #0
 800079c:	3c20      	subs	r4, #32
 800079e:	da35      	bge.n	800080c <__aeabi_dmul+0x164>
 80007a0:	340c      	adds	r4, #12
 80007a2:	dc1b      	bgt.n	80007dc <__aeabi_dmul+0x134>
 80007a4:	f104 0414 	add.w	r4, r4, #20
 80007a8:	f1c4 0520 	rsb	r5, r4, #32
 80007ac:	fa00 f305 	lsl.w	r3, r0, r5
 80007b0:	fa20 f004 	lsr.w	r0, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea40 0002 	orr.w	r0, r0, r2
 80007bc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80007c0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007c4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007c8:	fa21 f604 	lsr.w	r6, r1, r4
 80007cc:	eb42 0106 	adc.w	r1, r2, r6
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f1c4 040c 	rsb	r4, r4, #12
 80007e0:	f1c4 0520 	rsb	r5, r4, #32
 80007e4:	fa00 f304 	lsl.w	r3, r0, r4
 80007e8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ec:	fa01 f204 	lsl.w	r2, r1, r4
 80007f0:	ea40 0002 	orr.w	r0, r0, r2
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007fc:	f141 0100 	adc.w	r1, r1, #0
 8000800:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000804:	bf08      	it	eq
 8000806:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800080a:	bd70      	pop	{r4, r5, r6, pc}
 800080c:	f1c4 0520 	rsb	r5, r4, #32
 8000810:	fa00 f205 	lsl.w	r2, r0, r5
 8000814:	ea4e 0e02 	orr.w	lr, lr, r2
 8000818:	fa20 f304 	lsr.w	r3, r0, r4
 800081c:	fa01 f205 	lsl.w	r2, r1, r5
 8000820:	ea43 0302 	orr.w	r3, r3, r2
 8000824:	fa21 f004 	lsr.w	r0, r1, r4
 8000828:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800082c:	fa21 f204 	lsr.w	r2, r1, r4
 8000830:	ea20 0002 	bic.w	r0, r0, r2
 8000834:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000838:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800083c:	bf08      	it	eq
 800083e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f094 0f00 	teq	r4, #0
 8000848:	d10f      	bne.n	800086a <__aeabi_dmul+0x1c2>
 800084a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800084e:	0040      	lsls	r0, r0, #1
 8000850:	eb41 0101 	adc.w	r1, r1, r1
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf08      	it	eq
 800085a:	3c01      	subeq	r4, #1
 800085c:	d0f7      	beq.n	800084e <__aeabi_dmul+0x1a6>
 800085e:	ea41 0106 	orr.w	r1, r1, r6
 8000862:	f095 0f00 	teq	r5, #0
 8000866:	bf18      	it	ne
 8000868:	4770      	bxne	lr
 800086a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800086e:	0052      	lsls	r2, r2, #1
 8000870:	eb43 0303 	adc.w	r3, r3, r3
 8000874:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000878:	bf08      	it	eq
 800087a:	3d01      	subeq	r5, #1
 800087c:	d0f7      	beq.n	800086e <__aeabi_dmul+0x1c6>
 800087e:	ea43 0306 	orr.w	r3, r3, r6
 8000882:	4770      	bx	lr
 8000884:	ea94 0f0c 	teq	r4, ip
 8000888:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088c:	bf18      	it	ne
 800088e:	ea95 0f0c 	teqne	r5, ip
 8000892:	d00c      	beq.n	80008ae <__aeabi_dmul+0x206>
 8000894:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000898:	bf18      	it	ne
 800089a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800089e:	d1d1      	bne.n	8000844 <__aeabi_dmul+0x19c>
 80008a0:	ea81 0103 	eor.w	r1, r1, r3
 80008a4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008a8:	f04f 0000 	mov.w	r0, #0
 80008ac:	bd70      	pop	{r4, r5, r6, pc}
 80008ae:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008b2:	bf06      	itte	eq
 80008b4:	4610      	moveq	r0, r2
 80008b6:	4619      	moveq	r1, r3
 80008b8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008bc:	d019      	beq.n	80008f2 <__aeabi_dmul+0x24a>
 80008be:	ea94 0f0c 	teq	r4, ip
 80008c2:	d102      	bne.n	80008ca <__aeabi_dmul+0x222>
 80008c4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80008c8:	d113      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008ca:	ea95 0f0c 	teq	r5, ip
 80008ce:	d105      	bne.n	80008dc <__aeabi_dmul+0x234>
 80008d0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80008d4:	bf1c      	itt	ne
 80008d6:	4610      	movne	r0, r2
 80008d8:	4619      	movne	r1, r3
 80008da:	d10a      	bne.n	80008f2 <__aeabi_dmul+0x24a>
 80008dc:	ea81 0103 	eor.w	r1, r1, r3
 80008e0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80008e4:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008e8:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80008ec:	f04f 0000 	mov.w	r0, #0
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80008f6:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80008fa:	bd70      	pop	{r4, r5, r6, pc}

080008fc <__aeabi_ddiv>:
 80008fc:	b570      	push	{r4, r5, r6, lr}
 80008fe:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000902:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000906:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800090a:	bf1d      	ittte	ne
 800090c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000910:	ea94 0f0c 	teqne	r4, ip
 8000914:	ea95 0f0c 	teqne	r5, ip
 8000918:	f000 f8a7 	bleq	8000a6a <__aeabi_ddiv+0x16e>
 800091c:	eba4 0405 	sub.w	r4, r4, r5
 8000920:	ea81 0e03 	eor.w	lr, r1, r3
 8000924:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000928:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800092c:	f000 8088 	beq.w	8000a40 <__aeabi_ddiv+0x144>
 8000930:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000934:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000938:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800093c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000940:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000944:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000948:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800094c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000950:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000954:	429d      	cmp	r5, r3
 8000956:	bf08      	it	eq
 8000958:	4296      	cmpeq	r6, r2
 800095a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800095e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000962:	d202      	bcs.n	800096a <__aeabi_ddiv+0x6e>
 8000964:	085b      	lsrs	r3, r3, #1
 8000966:	ea4f 0232 	mov.w	r2, r2, rrx
 800096a:	1ab6      	subs	r6, r6, r2
 800096c:	eb65 0503 	sbc.w	r5, r5, r3
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800097a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800097e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000982:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000986:	bf22      	ittt	cs
 8000988:	1ab6      	subcs	r6, r6, r2
 800098a:	4675      	movcs	r5, lr
 800098c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	ea4f 0232 	mov.w	r2, r2, rrx
 8000996:	ebb6 0e02 	subs.w	lr, r6, r2
 800099a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800099e:	bf22      	ittt	cs
 80009a0:	1ab6      	subcs	r6, r6, r2
 80009a2:	4675      	movcs	r5, lr
 80009a4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009a8:	085b      	lsrs	r3, r3, #1
 80009aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80009ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80009b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009b6:	bf22      	ittt	cs
 80009b8:	1ab6      	subcs	r6, r6, r2
 80009ba:	4675      	movcs	r5, lr
 80009bc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009c0:	085b      	lsrs	r3, r3, #1
 80009c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80009c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80009ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80009ce:	bf22      	ittt	cs
 80009d0:	1ab6      	subcs	r6, r6, r2
 80009d2:	4675      	movcs	r5, lr
 80009d4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009d8:	ea55 0e06 	orrs.w	lr, r5, r6
 80009dc:	d018      	beq.n	8000a10 <__aeabi_ddiv+0x114>
 80009de:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009e2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009e6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009ea:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ee:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009f2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009f6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009fa:	d1c0      	bne.n	800097e <__aeabi_ddiv+0x82>
 80009fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a00:	d10b      	bne.n	8000a1a <__aeabi_ddiv+0x11e>
 8000a02:	ea41 0100 	orr.w	r1, r1, r0
 8000a06:	f04f 0000 	mov.w	r0, #0
 8000a0a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000a0e:	e7b6      	b.n	800097e <__aeabi_ddiv+0x82>
 8000a10:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000a14:	bf04      	itt	eq
 8000a16:	4301      	orreq	r1, r0
 8000a18:	2000      	moveq	r0, #0
 8000a1a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000a1e:	bf88      	it	hi
 8000a20:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000a24:	f63f aeaf 	bhi.w	8000786 <__aeabi_dmul+0xde>
 8000a28:	ebb5 0c03 	subs.w	ip, r5, r3
 8000a2c:	bf04      	itt	eq
 8000a2e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000a32:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000a36:	f150 0000 	adcs.w	r0, r0, #0
 8000a3a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000a3e:	bd70      	pop	{r4, r5, r6, pc}
 8000a40:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000a44:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a48:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a4c:	bfc2      	ittt	gt
 8000a4e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a52:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a56:	bd70      	popgt	{r4, r5, r6, pc}
 8000a58:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a5c:	f04f 0e00 	mov.w	lr, #0
 8000a60:	3c01      	subs	r4, #1
 8000a62:	e690      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a64:	ea45 0e06 	orr.w	lr, r5, r6
 8000a68:	e68d      	b.n	8000786 <__aeabi_dmul+0xde>
 8000a6a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a6e:	ea94 0f0c 	teq	r4, ip
 8000a72:	bf08      	it	eq
 8000a74:	ea95 0f0c 	teqeq	r5, ip
 8000a78:	f43f af3b 	beq.w	80008f2 <__aeabi_dmul+0x24a>
 8000a7c:	ea94 0f0c 	teq	r4, ip
 8000a80:	d10a      	bne.n	8000a98 <__aeabi_ddiv+0x19c>
 8000a82:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a86:	f47f af34 	bne.w	80008f2 <__aeabi_dmul+0x24a>
 8000a8a:	ea95 0f0c 	teq	r5, ip
 8000a8e:	f47f af25 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000a92:	4610      	mov	r0, r2
 8000a94:	4619      	mov	r1, r3
 8000a96:	e72c      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000a98:	ea95 0f0c 	teq	r5, ip
 8000a9c:	d106      	bne.n	8000aac <__aeabi_ddiv+0x1b0>
 8000a9e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000aa2:	f43f aefd 	beq.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	e722      	b.n	80008f2 <__aeabi_dmul+0x24a>
 8000aac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000ab6:	f47f aec5 	bne.w	8000844 <__aeabi_dmul+0x19c>
 8000aba:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000abe:	f47f af0d 	bne.w	80008dc <__aeabi_dmul+0x234>
 8000ac2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000ac6:	f47f aeeb 	bne.w	80008a0 <__aeabi_dmul+0x1f8>
 8000aca:	e712      	b.n	80008f2 <__aeabi_dmul+0x24a>

08000acc <__gedf2>:
 8000acc:	f04f 3cff 	mov.w	ip, #4294967295
 8000ad0:	e006      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ad2:	bf00      	nop

08000ad4 <__ledf2>:
 8000ad4:	f04f 0c01 	mov.w	ip, #1
 8000ad8:	e002      	b.n	8000ae0 <__cmpdf2+0x4>
 8000ada:	bf00      	nop

08000adc <__cmpdf2>:
 8000adc:	f04f 0c01 	mov.w	ip, #1
 8000ae0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000ae4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af0:	bf18      	it	ne
 8000af2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000af6:	d01b      	beq.n	8000b30 <__cmpdf2+0x54>
 8000af8:	b001      	add	sp, #4
 8000afa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000afe:	bf0c      	ite	eq
 8000b00:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000b04:	ea91 0f03 	teqne	r1, r3
 8000b08:	bf02      	ittt	eq
 8000b0a:	ea90 0f02 	teqeq	r0, r2
 8000b0e:	2000      	moveq	r0, #0
 8000b10:	4770      	bxeq	lr
 8000b12:	f110 0f00 	cmn.w	r0, #0
 8000b16:	ea91 0f03 	teq	r1, r3
 8000b1a:	bf58      	it	pl
 8000b1c:	4299      	cmppl	r1, r3
 8000b1e:	bf08      	it	eq
 8000b20:	4290      	cmpeq	r0, r2
 8000b22:	bf2c      	ite	cs
 8000b24:	17d8      	asrcs	r0, r3, #31
 8000b26:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000b2a:	f040 0001 	orr.w	r0, r0, #1
 8000b2e:	4770      	bx	lr
 8000b30:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b38:	d102      	bne.n	8000b40 <__cmpdf2+0x64>
 8000b3a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3e:	d107      	bne.n	8000b50 <__cmpdf2+0x74>
 8000b40:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b44:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b48:	d1d6      	bne.n	8000af8 <__cmpdf2+0x1c>
 8000b4a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4e:	d0d3      	beq.n	8000af8 <__cmpdf2+0x1c>
 8000b50:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop

08000b58 <__aeabi_cdrcmple>:
 8000b58:	4684      	mov	ip, r0
 8000b5a:	4610      	mov	r0, r2
 8000b5c:	4662      	mov	r2, ip
 8000b5e:	468c      	mov	ip, r1
 8000b60:	4619      	mov	r1, r3
 8000b62:	4663      	mov	r3, ip
 8000b64:	e000      	b.n	8000b68 <__aeabi_cdcmpeq>
 8000b66:	bf00      	nop

08000b68 <__aeabi_cdcmpeq>:
 8000b68:	b501      	push	{r0, lr}
 8000b6a:	f7ff ffb7 	bl	8000adc <__cmpdf2>
 8000b6e:	2800      	cmp	r0, #0
 8000b70:	bf48      	it	mi
 8000b72:	f110 0f00 	cmnmi.w	r0, #0
 8000b76:	bd01      	pop	{r0, pc}

08000b78 <__aeabi_dcmpeq>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff fff4 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b80:	bf0c      	ite	eq
 8000b82:	2001      	moveq	r0, #1
 8000b84:	2000      	movne	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmplt>:
 8000b8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b90:	f7ff ffea 	bl	8000b68 <__aeabi_cdcmpeq>
 8000b94:	bf34      	ite	cc
 8000b96:	2001      	movcc	r0, #1
 8000b98:	2000      	movcs	r0, #0
 8000b9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_dcmple>:
 8000ba0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ba4:	f7ff ffe0 	bl	8000b68 <__aeabi_cdcmpeq>
 8000ba8:	bf94      	ite	ls
 8000baa:	2001      	movls	r0, #1
 8000bac:	2000      	movhi	r0, #0
 8000bae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bb2:	bf00      	nop

08000bb4 <__aeabi_dcmpge>:
 8000bb4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bb8:	f7ff ffce 	bl	8000b58 <__aeabi_cdrcmple>
 8000bbc:	bf94      	ite	ls
 8000bbe:	2001      	movls	r0, #1
 8000bc0:	2000      	movhi	r0, #0
 8000bc2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_dcmpgt>:
 8000bc8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000bcc:	f7ff ffc4 	bl	8000b58 <__aeabi_cdrcmple>
 8000bd0:	bf34      	ite	cc
 8000bd2:	2001      	movcc	r0, #1
 8000bd4:	2000      	movcs	r0, #0
 8000bd6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000bda:	bf00      	nop

08000bdc <__aeabi_dcmpun>:
 8000bdc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000be0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000be4:	d102      	bne.n	8000bec <__aeabi_dcmpun+0x10>
 8000be6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000bea:	d10a      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bec:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bf0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bf4:	d102      	bne.n	8000bfc <__aeabi_dcmpun+0x20>
 8000bf6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bfa:	d102      	bne.n	8000c02 <__aeabi_dcmpun+0x26>
 8000bfc:	f04f 0000 	mov.w	r0, #0
 8000c00:	4770      	bx	lr
 8000c02:	f04f 0001 	mov.w	r0, #1
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_d2iz>:
 8000c08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000c10:	d215      	bcs.n	8000c3e <__aeabi_d2iz+0x36>
 8000c12:	d511      	bpl.n	8000c38 <__aeabi_d2iz+0x30>
 8000c14:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d912      	bls.n	8000c44 <__aeabi_d2iz+0x3c>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000c32:	bf18      	it	ne
 8000c34:	4240      	negne	r0, r0
 8000c36:	4770      	bx	lr
 8000c38:	f04f 0000 	mov.w	r0, #0
 8000c3c:	4770      	bx	lr
 8000c3e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c42:	d105      	bne.n	8000c50 <__aeabi_d2iz+0x48>
 8000c44:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000c48:	bf08      	it	eq
 8000c4a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000c4e:	4770      	bx	lr
 8000c50:	f04f 0000 	mov.w	r0, #0
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_d2f>:
 8000c58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c5c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c60:	bf24      	itt	cs
 8000c62:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c66:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c6a:	d90d      	bls.n	8000c88 <__aeabi_d2f+0x30>
 8000c6c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c70:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c74:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c78:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c7c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c80:	bf08      	it	eq
 8000c82:	f020 0001 	biceq.w	r0, r0, #1
 8000c86:	4770      	bx	lr
 8000c88:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c8c:	d121      	bne.n	8000cd2 <__aeabi_d2f+0x7a>
 8000c8e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c92:	bfbc      	itt	lt
 8000c94:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c98:	4770      	bxlt	lr
 8000c9a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c9e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ca2:	f1c2 0218 	rsb	r2, r2, #24
 8000ca6:	f1c2 0c20 	rsb	ip, r2, #32
 8000caa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000cae:	fa20 f002 	lsr.w	r0, r0, r2
 8000cb2:	bf18      	it	ne
 8000cb4:	f040 0001 	orrne.w	r0, r0, #1
 8000cb8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cbc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cc0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cc4:	ea40 000c 	orr.w	r0, r0, ip
 8000cc8:	fa23 f302 	lsr.w	r3, r3, r2
 8000ccc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cd0:	e7cc      	b.n	8000c6c <__aeabi_d2f+0x14>
 8000cd2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cd6:	d107      	bne.n	8000ce8 <__aeabi_d2f+0x90>
 8000cd8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cdc:	bf1e      	ittt	ne
 8000cde:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ce2:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ce6:	4770      	bxne	lr
 8000ce8:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_ldivmod>:
 8000cf8:	b97b      	cbnz	r3, 8000d1a <__aeabi_ldivmod+0x22>
 8000cfa:	b972      	cbnz	r2, 8000d1a <__aeabi_ldivmod+0x22>
 8000cfc:	2900      	cmp	r1, #0
 8000cfe:	bfbe      	ittt	lt
 8000d00:	2000      	movlt	r0, #0
 8000d02:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000d06:	e006      	blt.n	8000d16 <__aeabi_ldivmod+0x1e>
 8000d08:	bf08      	it	eq
 8000d0a:	2800      	cmpeq	r0, #0
 8000d0c:	bf1c      	itt	ne
 8000d0e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000d12:	f04f 30ff 	movne.w	r0, #4294967295
 8000d16:	f000 b9b5 	b.w	8001084 <__aeabi_idiv0>
 8000d1a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d1e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d22:	2900      	cmp	r1, #0
 8000d24:	db09      	blt.n	8000d3a <__aeabi_ldivmod+0x42>
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db1a      	blt.n	8000d60 <__aeabi_ldivmod+0x68>
 8000d2a:	f000 f84d 	bl	8000dc8 <__udivmoddi4>
 8000d2e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d32:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d36:	b004      	add	sp, #16
 8000d38:	4770      	bx	lr
 8000d3a:	4240      	negs	r0, r0
 8000d3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	db1b      	blt.n	8000d7c <__aeabi_ldivmod+0x84>
 8000d44:	f000 f840 	bl	8000dc8 <__udivmoddi4>
 8000d48:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d4c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d50:	b004      	add	sp, #16
 8000d52:	4240      	negs	r0, r0
 8000d54:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d58:	4252      	negs	r2, r2
 8000d5a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d5e:	4770      	bx	lr
 8000d60:	4252      	negs	r2, r2
 8000d62:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d66:	f000 f82f 	bl	8000dc8 <__udivmoddi4>
 8000d6a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d6e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d72:	b004      	add	sp, #16
 8000d74:	4240      	negs	r0, r0
 8000d76:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d7a:	4770      	bx	lr
 8000d7c:	4252      	negs	r2, r2
 8000d7e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d82:	f000 f821 	bl	8000dc8 <__udivmoddi4>
 8000d86:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d8a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d8e:	b004      	add	sp, #16
 8000d90:	4252      	negs	r2, r2
 8000d92:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d96:	4770      	bx	lr

08000d98 <__aeabi_uldivmod>:
 8000d98:	b953      	cbnz	r3, 8000db0 <__aeabi_uldivmod+0x18>
 8000d9a:	b94a      	cbnz	r2, 8000db0 <__aeabi_uldivmod+0x18>
 8000d9c:	2900      	cmp	r1, #0
 8000d9e:	bf08      	it	eq
 8000da0:	2800      	cmpeq	r0, #0
 8000da2:	bf1c      	itt	ne
 8000da4:	f04f 31ff 	movne.w	r1, #4294967295
 8000da8:	f04f 30ff 	movne.w	r0, #4294967295
 8000dac:	f000 b96a 	b.w	8001084 <__aeabi_idiv0>
 8000db0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000db4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000db8:	f000 f806 	bl	8000dc8 <__udivmoddi4>
 8000dbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000dc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000dc4:	b004      	add	sp, #16
 8000dc6:	4770      	bx	lr

08000dc8 <__udivmoddi4>:
 8000dc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dcc:	9d08      	ldr	r5, [sp, #32]
 8000dce:	460c      	mov	r4, r1
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d14e      	bne.n	8000e72 <__udivmoddi4+0xaa>
 8000dd4:	4694      	mov	ip, r2
 8000dd6:	458c      	cmp	ip, r1
 8000dd8:	4686      	mov	lr, r0
 8000dda:	fab2 f282 	clz	r2, r2
 8000dde:	d962      	bls.n	8000ea6 <__udivmoddi4+0xde>
 8000de0:	b14a      	cbz	r2, 8000df6 <__udivmoddi4+0x2e>
 8000de2:	f1c2 0320 	rsb	r3, r2, #32
 8000de6:	4091      	lsls	r1, r2
 8000de8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dec:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df0:	4319      	orrs	r1, r3
 8000df2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000df6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dfa:	fa1f f68c 	uxth.w	r6, ip
 8000dfe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000e02:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e06:	fb07 1114 	mls	r1, r7, r4, r1
 8000e0a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e0e:	fb04 f106 	mul.w	r1, r4, r6
 8000e12:	4299      	cmp	r1, r3
 8000e14:	d90a      	bls.n	8000e2c <__udivmoddi4+0x64>
 8000e16:	eb1c 0303 	adds.w	r3, ip, r3
 8000e1a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000e1e:	f080 8112 	bcs.w	8001046 <__udivmoddi4+0x27e>
 8000e22:	4299      	cmp	r1, r3
 8000e24:	f240 810f 	bls.w	8001046 <__udivmoddi4+0x27e>
 8000e28:	3c02      	subs	r4, #2
 8000e2a:	4463      	add	r3, ip
 8000e2c:	1a59      	subs	r1, r3, r1
 8000e2e:	fa1f f38e 	uxth.w	r3, lr
 8000e32:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e36:	fb07 1110 	mls	r1, r7, r0, r1
 8000e3a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e3e:	fb00 f606 	mul.w	r6, r0, r6
 8000e42:	429e      	cmp	r6, r3
 8000e44:	d90a      	bls.n	8000e5c <__udivmoddi4+0x94>
 8000e46:	eb1c 0303 	adds.w	r3, ip, r3
 8000e4a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e4e:	f080 80fc 	bcs.w	800104a <__udivmoddi4+0x282>
 8000e52:	429e      	cmp	r6, r3
 8000e54:	f240 80f9 	bls.w	800104a <__udivmoddi4+0x282>
 8000e58:	4463      	add	r3, ip
 8000e5a:	3802      	subs	r0, #2
 8000e5c:	1b9b      	subs	r3, r3, r6
 8000e5e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000e62:	2100      	movs	r1, #0
 8000e64:	b11d      	cbz	r5, 8000e6e <__udivmoddi4+0xa6>
 8000e66:	40d3      	lsrs	r3, r2
 8000e68:	2200      	movs	r2, #0
 8000e6a:	e9c5 3200 	strd	r3, r2, [r5]
 8000e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d905      	bls.n	8000e82 <__udivmoddi4+0xba>
 8000e76:	b10d      	cbz	r5, 8000e7c <__udivmoddi4+0xb4>
 8000e78:	e9c5 0100 	strd	r0, r1, [r5]
 8000e7c:	2100      	movs	r1, #0
 8000e7e:	4608      	mov	r0, r1
 8000e80:	e7f5      	b.n	8000e6e <__udivmoddi4+0xa6>
 8000e82:	fab3 f183 	clz	r1, r3
 8000e86:	2900      	cmp	r1, #0
 8000e88:	d146      	bne.n	8000f18 <__udivmoddi4+0x150>
 8000e8a:	42a3      	cmp	r3, r4
 8000e8c:	d302      	bcc.n	8000e94 <__udivmoddi4+0xcc>
 8000e8e:	4290      	cmp	r0, r2
 8000e90:	f0c0 80f0 	bcc.w	8001074 <__udivmoddi4+0x2ac>
 8000e94:	1a86      	subs	r6, r0, r2
 8000e96:	eb64 0303 	sbc.w	r3, r4, r3
 8000e9a:	2001      	movs	r0, #1
 8000e9c:	2d00      	cmp	r5, #0
 8000e9e:	d0e6      	beq.n	8000e6e <__udivmoddi4+0xa6>
 8000ea0:	e9c5 6300 	strd	r6, r3, [r5]
 8000ea4:	e7e3      	b.n	8000e6e <__udivmoddi4+0xa6>
 8000ea6:	2a00      	cmp	r2, #0
 8000ea8:	f040 8090 	bne.w	8000fcc <__udivmoddi4+0x204>
 8000eac:	eba1 040c 	sub.w	r4, r1, ip
 8000eb0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000eb4:	fa1f f78c 	uxth.w	r7, ip
 8000eb8:	2101      	movs	r1, #1
 8000eba:	fbb4 f6f8 	udiv	r6, r4, r8
 8000ebe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000ec2:	fb08 4416 	mls	r4, r8, r6, r4
 8000ec6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000eca:	fb07 f006 	mul.w	r0, r7, r6
 8000ece:	4298      	cmp	r0, r3
 8000ed0:	d908      	bls.n	8000ee4 <__udivmoddi4+0x11c>
 8000ed2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ed6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000eda:	d202      	bcs.n	8000ee2 <__udivmoddi4+0x11a>
 8000edc:	4298      	cmp	r0, r3
 8000ede:	f200 80cd 	bhi.w	800107c <__udivmoddi4+0x2b4>
 8000ee2:	4626      	mov	r6, r4
 8000ee4:	1a1c      	subs	r4, r3, r0
 8000ee6:	fa1f f38e 	uxth.w	r3, lr
 8000eea:	fbb4 f0f8 	udiv	r0, r4, r8
 8000eee:	fb08 4410 	mls	r4, r8, r0, r4
 8000ef2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ef6:	fb00 f707 	mul.w	r7, r0, r7
 8000efa:	429f      	cmp	r7, r3
 8000efc:	d908      	bls.n	8000f10 <__udivmoddi4+0x148>
 8000efe:	eb1c 0303 	adds.w	r3, ip, r3
 8000f02:	f100 34ff 	add.w	r4, r0, #4294967295
 8000f06:	d202      	bcs.n	8000f0e <__udivmoddi4+0x146>
 8000f08:	429f      	cmp	r7, r3
 8000f0a:	f200 80b0 	bhi.w	800106e <__udivmoddi4+0x2a6>
 8000f0e:	4620      	mov	r0, r4
 8000f10:	1bdb      	subs	r3, r3, r7
 8000f12:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000f16:	e7a5      	b.n	8000e64 <__udivmoddi4+0x9c>
 8000f18:	f1c1 0620 	rsb	r6, r1, #32
 8000f1c:	408b      	lsls	r3, r1
 8000f1e:	fa22 f706 	lsr.w	r7, r2, r6
 8000f22:	431f      	orrs	r7, r3
 8000f24:	fa20 fc06 	lsr.w	ip, r0, r6
 8000f28:	fa04 f301 	lsl.w	r3, r4, r1
 8000f2c:	ea43 030c 	orr.w	r3, r3, ip
 8000f30:	40f4      	lsrs	r4, r6
 8000f32:	fa00 f801 	lsl.w	r8, r0, r1
 8000f36:	0c38      	lsrs	r0, r7, #16
 8000f38:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000f3c:	fbb4 fef0 	udiv	lr, r4, r0
 8000f40:	fa1f fc87 	uxth.w	ip, r7
 8000f44:	fb00 441e 	mls	r4, r0, lr, r4
 8000f48:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f4c:	fb0e f90c 	mul.w	r9, lr, ip
 8000f50:	45a1      	cmp	r9, r4
 8000f52:	fa02 f201 	lsl.w	r2, r2, r1
 8000f56:	d90a      	bls.n	8000f6e <__udivmoddi4+0x1a6>
 8000f58:	193c      	adds	r4, r7, r4
 8000f5a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000f5e:	f080 8084 	bcs.w	800106a <__udivmoddi4+0x2a2>
 8000f62:	45a1      	cmp	r9, r4
 8000f64:	f240 8081 	bls.w	800106a <__udivmoddi4+0x2a2>
 8000f68:	f1ae 0e02 	sub.w	lr, lr, #2
 8000f6c:	443c      	add	r4, r7
 8000f6e:	eba4 0409 	sub.w	r4, r4, r9
 8000f72:	fa1f f983 	uxth.w	r9, r3
 8000f76:	fbb4 f3f0 	udiv	r3, r4, r0
 8000f7a:	fb00 4413 	mls	r4, r0, r3, r4
 8000f7e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000f82:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f86:	45a4      	cmp	ip, r4
 8000f88:	d907      	bls.n	8000f9a <__udivmoddi4+0x1d2>
 8000f8a:	193c      	adds	r4, r7, r4
 8000f8c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000f90:	d267      	bcs.n	8001062 <__udivmoddi4+0x29a>
 8000f92:	45a4      	cmp	ip, r4
 8000f94:	d965      	bls.n	8001062 <__udivmoddi4+0x29a>
 8000f96:	3b02      	subs	r3, #2
 8000f98:	443c      	add	r4, r7
 8000f9a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f9e:	fba0 9302 	umull	r9, r3, r0, r2
 8000fa2:	eba4 040c 	sub.w	r4, r4, ip
 8000fa6:	429c      	cmp	r4, r3
 8000fa8:	46ce      	mov	lr, r9
 8000faa:	469c      	mov	ip, r3
 8000fac:	d351      	bcc.n	8001052 <__udivmoddi4+0x28a>
 8000fae:	d04e      	beq.n	800104e <__udivmoddi4+0x286>
 8000fb0:	b155      	cbz	r5, 8000fc8 <__udivmoddi4+0x200>
 8000fb2:	ebb8 030e 	subs.w	r3, r8, lr
 8000fb6:	eb64 040c 	sbc.w	r4, r4, ip
 8000fba:	fa04 f606 	lsl.w	r6, r4, r6
 8000fbe:	40cb      	lsrs	r3, r1
 8000fc0:	431e      	orrs	r6, r3
 8000fc2:	40cc      	lsrs	r4, r1
 8000fc4:	e9c5 6400 	strd	r6, r4, [r5]
 8000fc8:	2100      	movs	r1, #0
 8000fca:	e750      	b.n	8000e6e <__udivmoddi4+0xa6>
 8000fcc:	f1c2 0320 	rsb	r3, r2, #32
 8000fd0:	fa20 f103 	lsr.w	r1, r0, r3
 8000fd4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000fd8:	fa24 f303 	lsr.w	r3, r4, r3
 8000fdc:	4094      	lsls	r4, r2
 8000fde:	430c      	orrs	r4, r1
 8000fe0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fe4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000fe8:	fa1f f78c 	uxth.w	r7, ip
 8000fec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ff0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ff4:	0c23      	lsrs	r3, r4, #16
 8000ff6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ffa:	fb00 f107 	mul.w	r1, r0, r7
 8000ffe:	4299      	cmp	r1, r3
 8001000:	d908      	bls.n	8001014 <__udivmoddi4+0x24c>
 8001002:	eb1c 0303 	adds.w	r3, ip, r3
 8001006:	f100 36ff 	add.w	r6, r0, #4294967295
 800100a:	d22c      	bcs.n	8001066 <__udivmoddi4+0x29e>
 800100c:	4299      	cmp	r1, r3
 800100e:	d92a      	bls.n	8001066 <__udivmoddi4+0x29e>
 8001010:	3802      	subs	r0, #2
 8001012:	4463      	add	r3, ip
 8001014:	1a5b      	subs	r3, r3, r1
 8001016:	b2a4      	uxth	r4, r4
 8001018:	fbb3 f1f8 	udiv	r1, r3, r8
 800101c:	fb08 3311 	mls	r3, r8, r1, r3
 8001020:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8001024:	fb01 f307 	mul.w	r3, r1, r7
 8001028:	42a3      	cmp	r3, r4
 800102a:	d908      	bls.n	800103e <__udivmoddi4+0x276>
 800102c:	eb1c 0404 	adds.w	r4, ip, r4
 8001030:	f101 36ff 	add.w	r6, r1, #4294967295
 8001034:	d213      	bcs.n	800105e <__udivmoddi4+0x296>
 8001036:	42a3      	cmp	r3, r4
 8001038:	d911      	bls.n	800105e <__udivmoddi4+0x296>
 800103a:	3902      	subs	r1, #2
 800103c:	4464      	add	r4, ip
 800103e:	1ae4      	subs	r4, r4, r3
 8001040:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8001044:	e739      	b.n	8000eba <__udivmoddi4+0xf2>
 8001046:	4604      	mov	r4, r0
 8001048:	e6f0      	b.n	8000e2c <__udivmoddi4+0x64>
 800104a:	4608      	mov	r0, r1
 800104c:	e706      	b.n	8000e5c <__udivmoddi4+0x94>
 800104e:	45c8      	cmp	r8, r9
 8001050:	d2ae      	bcs.n	8000fb0 <__udivmoddi4+0x1e8>
 8001052:	ebb9 0e02 	subs.w	lr, r9, r2
 8001056:	eb63 0c07 	sbc.w	ip, r3, r7
 800105a:	3801      	subs	r0, #1
 800105c:	e7a8      	b.n	8000fb0 <__udivmoddi4+0x1e8>
 800105e:	4631      	mov	r1, r6
 8001060:	e7ed      	b.n	800103e <__udivmoddi4+0x276>
 8001062:	4603      	mov	r3, r0
 8001064:	e799      	b.n	8000f9a <__udivmoddi4+0x1d2>
 8001066:	4630      	mov	r0, r6
 8001068:	e7d4      	b.n	8001014 <__udivmoddi4+0x24c>
 800106a:	46d6      	mov	lr, sl
 800106c:	e77f      	b.n	8000f6e <__udivmoddi4+0x1a6>
 800106e:	4463      	add	r3, ip
 8001070:	3802      	subs	r0, #2
 8001072:	e74d      	b.n	8000f10 <__udivmoddi4+0x148>
 8001074:	4606      	mov	r6, r0
 8001076:	4623      	mov	r3, r4
 8001078:	4608      	mov	r0, r1
 800107a:	e70f      	b.n	8000e9c <__udivmoddi4+0xd4>
 800107c:	3e02      	subs	r6, #2
 800107e:	4463      	add	r3, ip
 8001080:	e730      	b.n	8000ee4 <__udivmoddi4+0x11c>
 8001082:	bf00      	nop

08001084 <__aeabi_idiv0>:
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop

08001088 <TrimRead>:



// Read the Trimming parameters saved in the NVM ROM of the device
void TrimRead(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	b08c      	sub	sp, #48	@ 0x30
 800108c:	af04      	add	r7, sp, #16
	uint8_t trimdata[32];
	// Read NVM from 0x88 to 0xA1
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0x88, 1, trimdata, 25, HAL_MAX_DELAY);
 800108e:	f04f 33ff 	mov.w	r3, #4294967295
 8001092:	9302      	str	r3, [sp, #8]
 8001094:	2319      	movs	r3, #25
 8001096:	9301      	str	r3, [sp, #4]
 8001098:	463b      	mov	r3, r7
 800109a:	9300      	str	r3, [sp, #0]
 800109c:	2301      	movs	r3, #1
 800109e:	2288      	movs	r2, #136	@ 0x88
 80010a0:	21ec      	movs	r1, #236	@ 0xec
 80010a2:	4857      	ldr	r0, [pc, #348]	@ (8001200 <TrimRead+0x178>)
 80010a4:	f003 faf8 	bl	8004698 <HAL_I2C_Mem_Read>

	// Read NVM from 0xE1 to 0xE7
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, 0xE1, 1, (uint8_t *)trimdata+25, 7, HAL_MAX_DELAY);
 80010a8:	463b      	mov	r3, r7
 80010aa:	3319      	adds	r3, #25
 80010ac:	f04f 32ff 	mov.w	r2, #4294967295
 80010b0:	9202      	str	r2, [sp, #8]
 80010b2:	2207      	movs	r2, #7
 80010b4:	9201      	str	r2, [sp, #4]
 80010b6:	9300      	str	r3, [sp, #0]
 80010b8:	2301      	movs	r3, #1
 80010ba:	22e1      	movs	r2, #225	@ 0xe1
 80010bc:	21ec      	movs	r1, #236	@ 0xec
 80010be:	4850      	ldr	r0, [pc, #320]	@ (8001200 <TrimRead+0x178>)
 80010c0:	f003 faea 	bl	8004698 <HAL_I2C_Mem_Read>

	// Arrange the data as per the datasheet (page no. 24)
	dig_T1 = (trimdata[1]<<8) | trimdata[0];
 80010c4:	787b      	ldrb	r3, [r7, #1]
 80010c6:	021b      	lsls	r3, r3, #8
 80010c8:	b21a      	sxth	r2, r3
 80010ca:	783b      	ldrb	r3, [r7, #0]
 80010cc:	b21b      	sxth	r3, r3
 80010ce:	4313      	orrs	r3, r2
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	b29a      	uxth	r2, r3
 80010d4:	4b4b      	ldr	r3, [pc, #300]	@ (8001204 <TrimRead+0x17c>)
 80010d6:	801a      	strh	r2, [r3, #0]
	dig_T2 = (trimdata[3]<<8) | trimdata[2];
 80010d8:	78fb      	ldrb	r3, [r7, #3]
 80010da:	021b      	lsls	r3, r3, #8
 80010dc:	b21a      	sxth	r2, r3
 80010de:	78bb      	ldrb	r3, [r7, #2]
 80010e0:	b21b      	sxth	r3, r3
 80010e2:	4313      	orrs	r3, r2
 80010e4:	b21a      	sxth	r2, r3
 80010e6:	4b48      	ldr	r3, [pc, #288]	@ (8001208 <TrimRead+0x180>)
 80010e8:	801a      	strh	r2, [r3, #0]
	dig_T3 = (trimdata[5]<<8) | trimdata[4];
 80010ea:	797b      	ldrb	r3, [r7, #5]
 80010ec:	021b      	lsls	r3, r3, #8
 80010ee:	b21a      	sxth	r2, r3
 80010f0:	793b      	ldrb	r3, [r7, #4]
 80010f2:	b21b      	sxth	r3, r3
 80010f4:	4313      	orrs	r3, r2
 80010f6:	b21a      	sxth	r2, r3
 80010f8:	4b44      	ldr	r3, [pc, #272]	@ (800120c <TrimRead+0x184>)
 80010fa:	801a      	strh	r2, [r3, #0]
	dig_P1 = (trimdata[7]<<8) | trimdata[5];
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b21a      	sxth	r2, r3
 8001102:	797b      	ldrb	r3, [r7, #5]
 8001104:	b21b      	sxth	r3, r3
 8001106:	4313      	orrs	r3, r2
 8001108:	b21b      	sxth	r3, r3
 800110a:	b29a      	uxth	r2, r3
 800110c:	4b40      	ldr	r3, [pc, #256]	@ (8001210 <TrimRead+0x188>)
 800110e:	801a      	strh	r2, [r3, #0]
	dig_P2 = (trimdata[9]<<8) | trimdata[6];
 8001110:	7a7b      	ldrb	r3, [r7, #9]
 8001112:	021b      	lsls	r3, r3, #8
 8001114:	b21a      	sxth	r2, r3
 8001116:	79bb      	ldrb	r3, [r7, #6]
 8001118:	b21b      	sxth	r3, r3
 800111a:	4313      	orrs	r3, r2
 800111c:	b21a      	sxth	r2, r3
 800111e:	4b3d      	ldr	r3, [pc, #244]	@ (8001214 <TrimRead+0x18c>)
 8001120:	801a      	strh	r2, [r3, #0]
	dig_P3 = (trimdata[11]<<8) | trimdata[10];
 8001122:	7afb      	ldrb	r3, [r7, #11]
 8001124:	021b      	lsls	r3, r3, #8
 8001126:	b21a      	sxth	r2, r3
 8001128:	7abb      	ldrb	r3, [r7, #10]
 800112a:	b21b      	sxth	r3, r3
 800112c:	4313      	orrs	r3, r2
 800112e:	b21a      	sxth	r2, r3
 8001130:	4b39      	ldr	r3, [pc, #228]	@ (8001218 <TrimRead+0x190>)
 8001132:	801a      	strh	r2, [r3, #0]
	dig_P4 = (trimdata[13]<<8) | trimdata[12];
 8001134:	7b7b      	ldrb	r3, [r7, #13]
 8001136:	021b      	lsls	r3, r3, #8
 8001138:	b21a      	sxth	r2, r3
 800113a:	7b3b      	ldrb	r3, [r7, #12]
 800113c:	b21b      	sxth	r3, r3
 800113e:	4313      	orrs	r3, r2
 8001140:	b21a      	sxth	r2, r3
 8001142:	4b36      	ldr	r3, [pc, #216]	@ (800121c <TrimRead+0x194>)
 8001144:	801a      	strh	r2, [r3, #0]
	dig_P5 = (trimdata[15]<<8) | trimdata[14];
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	021b      	lsls	r3, r3, #8
 800114a:	b21a      	sxth	r2, r3
 800114c:	7bbb      	ldrb	r3, [r7, #14]
 800114e:	b21b      	sxth	r3, r3
 8001150:	4313      	orrs	r3, r2
 8001152:	b21a      	sxth	r2, r3
 8001154:	4b32      	ldr	r3, [pc, #200]	@ (8001220 <TrimRead+0x198>)
 8001156:	801a      	strh	r2, [r3, #0]
	dig_P6 = (trimdata[17]<<8) | trimdata[16];
 8001158:	7c7b      	ldrb	r3, [r7, #17]
 800115a:	021b      	lsls	r3, r3, #8
 800115c:	b21a      	sxth	r2, r3
 800115e:	7c3b      	ldrb	r3, [r7, #16]
 8001160:	b21b      	sxth	r3, r3
 8001162:	4313      	orrs	r3, r2
 8001164:	b21a      	sxth	r2, r3
 8001166:	4b2f      	ldr	r3, [pc, #188]	@ (8001224 <TrimRead+0x19c>)
 8001168:	801a      	strh	r2, [r3, #0]
	dig_P7 = (trimdata[19]<<8) | trimdata[18];
 800116a:	7cfb      	ldrb	r3, [r7, #19]
 800116c:	021b      	lsls	r3, r3, #8
 800116e:	b21a      	sxth	r2, r3
 8001170:	7cbb      	ldrb	r3, [r7, #18]
 8001172:	b21b      	sxth	r3, r3
 8001174:	4313      	orrs	r3, r2
 8001176:	b21a      	sxth	r2, r3
 8001178:	4b2b      	ldr	r3, [pc, #172]	@ (8001228 <TrimRead+0x1a0>)
 800117a:	801a      	strh	r2, [r3, #0]
	dig_P8 = (trimdata[21]<<8) | trimdata[20];
 800117c:	7d7b      	ldrb	r3, [r7, #21]
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b21a      	sxth	r2, r3
 8001182:	7d3b      	ldrb	r3, [r7, #20]
 8001184:	b21b      	sxth	r3, r3
 8001186:	4313      	orrs	r3, r2
 8001188:	b21a      	sxth	r2, r3
 800118a:	4b28      	ldr	r3, [pc, #160]	@ (800122c <TrimRead+0x1a4>)
 800118c:	801a      	strh	r2, [r3, #0]
	dig_P9 = (trimdata[23]<<8) | trimdata[22];
 800118e:	7dfb      	ldrb	r3, [r7, #23]
 8001190:	021b      	lsls	r3, r3, #8
 8001192:	b21a      	sxth	r2, r3
 8001194:	7dbb      	ldrb	r3, [r7, #22]
 8001196:	b21b      	sxth	r3, r3
 8001198:	4313      	orrs	r3, r2
 800119a:	b21a      	sxth	r2, r3
 800119c:	4b24      	ldr	r3, [pc, #144]	@ (8001230 <TrimRead+0x1a8>)
 800119e:	801a      	strh	r2, [r3, #0]
	dig_H1 = trimdata[24];
 80011a0:	7e3b      	ldrb	r3, [r7, #24]
 80011a2:	461a      	mov	r2, r3
 80011a4:	4b23      	ldr	r3, [pc, #140]	@ (8001234 <TrimRead+0x1ac>)
 80011a6:	801a      	strh	r2, [r3, #0]
	dig_H2 = (trimdata[26]<<8) | trimdata[25];
 80011a8:	7ebb      	ldrb	r3, [r7, #26]
 80011aa:	021b      	lsls	r3, r3, #8
 80011ac:	b21a      	sxth	r2, r3
 80011ae:	7e7b      	ldrb	r3, [r7, #25]
 80011b0:	b21b      	sxth	r3, r3
 80011b2:	4313      	orrs	r3, r2
 80011b4:	b21a      	sxth	r2, r3
 80011b6:	4b20      	ldr	r3, [pc, #128]	@ (8001238 <TrimRead+0x1b0>)
 80011b8:	801a      	strh	r2, [r3, #0]
	dig_H3 = (trimdata[27]);
 80011ba:	7efb      	ldrb	r3, [r7, #27]
 80011bc:	461a      	mov	r2, r3
 80011be:	4b1f      	ldr	r3, [pc, #124]	@ (800123c <TrimRead+0x1b4>)
 80011c0:	801a      	strh	r2, [r3, #0]
	dig_H4 = (trimdata[28]<<4) | (trimdata[29] & 0x0f);
 80011c2:	7f3b      	ldrb	r3, [r7, #28]
 80011c4:	011b      	lsls	r3, r3, #4
 80011c6:	b21a      	sxth	r2, r3
 80011c8:	7f7b      	ldrb	r3, [r7, #29]
 80011ca:	b21b      	sxth	r3, r3
 80011cc:	f003 030f 	and.w	r3, r3, #15
 80011d0:	b21b      	sxth	r3, r3
 80011d2:	4313      	orrs	r3, r2
 80011d4:	b21a      	sxth	r2, r3
 80011d6:	4b1a      	ldr	r3, [pc, #104]	@ (8001240 <TrimRead+0x1b8>)
 80011d8:	801a      	strh	r2, [r3, #0]
	dig_H5 = (trimdata[30]<<4) | (trimdata[29]>>4);
 80011da:	7fbb      	ldrb	r3, [r7, #30]
 80011dc:	011b      	lsls	r3, r3, #4
 80011de:	b21a      	sxth	r2, r3
 80011e0:	7f7b      	ldrb	r3, [r7, #29]
 80011e2:	091b      	lsrs	r3, r3, #4
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	b21b      	sxth	r3, r3
 80011e8:	4313      	orrs	r3, r2
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	4b15      	ldr	r3, [pc, #84]	@ (8001244 <TrimRead+0x1bc>)
 80011ee:	801a      	strh	r2, [r3, #0]
	dig_H6 = (trimdata[31]);
 80011f0:	7ffb      	ldrb	r3, [r7, #31]
 80011f2:	b21a      	sxth	r2, r3
 80011f4:	4b14      	ldr	r3, [pc, #80]	@ (8001248 <TrimRead+0x1c0>)
 80011f6:	801a      	strh	r2, [r3, #0]
}
 80011f8:	bf00      	nop
 80011fa:	3720      	adds	r7, #32
 80011fc:	46bd      	mov	sp, r7
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	200002b4 	.word	0x200002b4
 8001204:	20000244 	.word	0x20000244
 8001208:	2000024c 	.word	0x2000024c
 800120c:	2000024e 	.word	0x2000024e
 8001210:	20000246 	.word	0x20000246
 8001214:	20000250 	.word	0x20000250
 8001218:	20000252 	.word	0x20000252
 800121c:	20000254 	.word	0x20000254
 8001220:	20000256 	.word	0x20000256
 8001224:	20000258 	.word	0x20000258
 8001228:	2000025a 	.word	0x2000025a
 800122c:	2000025c 	.word	0x2000025c
 8001230:	2000025e 	.word	0x2000025e
 8001234:	20000248 	.word	0x20000248
 8001238:	20000260 	.word	0x20000260
 800123c:	2000024a 	.word	0x2000024a
 8001240:	20000262 	.word	0x20000262
 8001244:	20000264 	.word	0x20000264
 8001248:	20000266 	.word	0x20000266

0800124c <BME280_Config>:
 *         IIR is used to avoid the short term fluctuations
 *         Check datasheet page no 18 and page no 30
 */

int BME280_Config (uint8_t osrs_t, uint8_t osrs_p, uint8_t osrs_h, uint8_t mode, uint8_t t_sb, uint8_t filter)
{
 800124c:	b590      	push	{r4, r7, lr}
 800124e:	b089      	sub	sp, #36	@ 0x24
 8001250:	af04      	add	r7, sp, #16
 8001252:	4604      	mov	r4, r0
 8001254:	4608      	mov	r0, r1
 8001256:	4611      	mov	r1, r2
 8001258:	461a      	mov	r2, r3
 800125a:	4623      	mov	r3, r4
 800125c:	71fb      	strb	r3, [r7, #7]
 800125e:	4603      	mov	r3, r0
 8001260:	71bb      	strb	r3, [r7, #6]
 8001262:	460b      	mov	r3, r1
 8001264:	717b      	strb	r3, [r7, #5]
 8001266:	4613      	mov	r3, r2
 8001268:	713b      	strb	r3, [r7, #4]
	// Read the Trimming parameters
	TrimRead();
 800126a:	f7ff ff0d 	bl	8001088 <TrimRead>


	uint8_t datatowrite = 0;
 800126e:	2300      	movs	r3, #0
 8001270:	73fb      	strb	r3, [r7, #15]
	uint8_t datacheck = 0;
 8001272:	2300      	movs	r3, #0
 8001274:	73bb      	strb	r3, [r7, #14]

	// Reset the device
	datatowrite = 0xB6;  // reset sequence
 8001276:	23b6      	movs	r3, #182	@ 0xb6
 8001278:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, RESET_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800127a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800127e:	9302      	str	r3, [sp, #8]
 8001280:	2301      	movs	r3, #1
 8001282:	9301      	str	r3, [sp, #4]
 8001284:	f107 030f 	add.w	r3, r7, #15
 8001288:	9300      	str	r3, [sp, #0]
 800128a:	2301      	movs	r3, #1
 800128c:	22e0      	movs	r2, #224	@ 0xe0
 800128e:	21ec      	movs	r1, #236	@ 0xec
 8001290:	4858      	ldr	r0, [pc, #352]	@ (80013f4 <BME280_Config+0x1a8>)
 8001292:	f003 f8fb 	bl	800448c <HAL_I2C_Mem_Write>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d002      	beq.n	80012a2 <BME280_Config+0x56>
	{
		return -1;
 800129c:	f04f 33ff 	mov.w	r3, #4294967295
 80012a0:	e0a3      	b.n	80013ea <BME280_Config+0x19e>
	}

	HAL_Delay (100);
 80012a2:	2064      	movs	r0, #100	@ 0x64
 80012a4:	f001 fd36 	bl	8002d14 <HAL_Delay>


	// write the humidity oversampling to 0xF2
	datatowrite = osrs_h;
 80012a8:	797b      	ldrb	r3, [r7, #5]
 80012aa:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 80012ac:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012b0:	9302      	str	r3, [sp, #8]
 80012b2:	2301      	movs	r3, #1
 80012b4:	9301      	str	r3, [sp, #4]
 80012b6:	f107 030f 	add.w	r3, r7, #15
 80012ba:	9300      	str	r3, [sp, #0]
 80012bc:	2301      	movs	r3, #1
 80012be:	22f2      	movs	r2, #242	@ 0xf2
 80012c0:	21ec      	movs	r1, #236	@ 0xec
 80012c2:	484c      	ldr	r0, [pc, #304]	@ (80013f4 <BME280_Config+0x1a8>)
 80012c4:	f003 f8e2 	bl	800448c <HAL_I2C_Mem_Write>
 80012c8:	4603      	mov	r3, r0
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d002      	beq.n	80012d4 <BME280_Config+0x88>
	{
		return -1;
 80012ce:	f04f 33ff 	mov.w	r3, #4294967295
 80012d2:	e08a      	b.n	80013ea <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80012d4:	2064      	movs	r0, #100	@ 0x64
 80012d6:	f001 fd1d 	bl	8002d14 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_HUM_REG, 1, &datacheck, 1, 1000);
 80012da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012de:	9302      	str	r3, [sp, #8]
 80012e0:	2301      	movs	r3, #1
 80012e2:	9301      	str	r3, [sp, #4]
 80012e4:	f107 030e 	add.w	r3, r7, #14
 80012e8:	9300      	str	r3, [sp, #0]
 80012ea:	2301      	movs	r3, #1
 80012ec:	22f2      	movs	r2, #242	@ 0xf2
 80012ee:	21ec      	movs	r1, #236	@ 0xec
 80012f0:	4840      	ldr	r0, [pc, #256]	@ (80013f4 <BME280_Config+0x1a8>)
 80012f2:	f003 f9d1 	bl	8004698 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80012f6:	7bba      	ldrb	r2, [r7, #14]
 80012f8:	7bfb      	ldrb	r3, [r7, #15]
 80012fa:	429a      	cmp	r2, r3
 80012fc:	d002      	beq.n	8001304 <BME280_Config+0xb8>
	{
		return -1;
 80012fe:	f04f 33ff 	mov.w	r3, #4294967295
 8001302:	e072      	b.n	80013ea <BME280_Config+0x19e>
	}


	// write the standby time and IIR filter coeff to 0xF5
	datatowrite = (t_sb <<5) |(filter << 2);
 8001304:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001308:	015b      	lsls	r3, r3, #5
 800130a:	b25a      	sxtb	r2, r3
 800130c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001310:	009b      	lsls	r3, r3, #2
 8001312:	b25b      	sxtb	r3, r3
 8001314:	4313      	orrs	r3, r2
 8001316:	b25b      	sxtb	r3, r3
 8001318:	b2db      	uxtb	r3, r3
 800131a:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 800131c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001320:	9302      	str	r3, [sp, #8]
 8001322:	2301      	movs	r3, #1
 8001324:	9301      	str	r3, [sp, #4]
 8001326:	f107 030f 	add.w	r3, r7, #15
 800132a:	9300      	str	r3, [sp, #0]
 800132c:	2301      	movs	r3, #1
 800132e:	22f5      	movs	r2, #245	@ 0xf5
 8001330:	21ec      	movs	r1, #236	@ 0xec
 8001332:	4830      	ldr	r0, [pc, #192]	@ (80013f4 <BME280_Config+0x1a8>)
 8001334:	f003 f8aa 	bl	800448c <HAL_I2C_Mem_Write>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d002      	beq.n	8001344 <BME280_Config+0xf8>
	{
		return -1;
 800133e:	f04f 33ff 	mov.w	r3, #4294967295
 8001342:	e052      	b.n	80013ea <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 8001344:	2064      	movs	r0, #100	@ 0x64
 8001346:	f001 fce5 	bl	8002d14 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CONFIG_REG, 1, &datacheck, 1, 1000);
 800134a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800134e:	9302      	str	r3, [sp, #8]
 8001350:	2301      	movs	r3, #1
 8001352:	9301      	str	r3, [sp, #4]
 8001354:	f107 030e 	add.w	r3, r7, #14
 8001358:	9300      	str	r3, [sp, #0]
 800135a:	2301      	movs	r3, #1
 800135c:	22f5      	movs	r2, #245	@ 0xf5
 800135e:	21ec      	movs	r1, #236	@ 0xec
 8001360:	4824      	ldr	r0, [pc, #144]	@ (80013f4 <BME280_Config+0x1a8>)
 8001362:	f003 f999 	bl	8004698 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 8001366:	7bba      	ldrb	r2, [r7, #14]
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	429a      	cmp	r2, r3
 800136c:	d002      	beq.n	8001374 <BME280_Config+0x128>
	{
		return -1;
 800136e:	f04f 33ff 	mov.w	r3, #4294967295
 8001372:	e03a      	b.n	80013ea <BME280_Config+0x19e>
	}


	// write the pressure and temp oversampling along with mode to 0xF4
	datatowrite = (osrs_t <<5) |(osrs_p << 2) | mode;
 8001374:	79fb      	ldrb	r3, [r7, #7]
 8001376:	015b      	lsls	r3, r3, #5
 8001378:	b25a      	sxtb	r2, r3
 800137a:	79bb      	ldrb	r3, [r7, #6]
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	b25b      	sxtb	r3, r3
 8001380:	4313      	orrs	r3, r2
 8001382:	b25a      	sxtb	r2, r3
 8001384:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001388:	4313      	orrs	r3, r2
 800138a:	b25b      	sxtb	r3, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	73fb      	strb	r3, [r7, #15]
	if (HAL_I2C_Mem_Write(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datatowrite, 1, 1000) != HAL_OK)
 8001390:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001394:	9302      	str	r3, [sp, #8]
 8001396:	2301      	movs	r3, #1
 8001398:	9301      	str	r3, [sp, #4]
 800139a:	f107 030f 	add.w	r3, r7, #15
 800139e:	9300      	str	r3, [sp, #0]
 80013a0:	2301      	movs	r3, #1
 80013a2:	22f4      	movs	r2, #244	@ 0xf4
 80013a4:	21ec      	movs	r1, #236	@ 0xec
 80013a6:	4813      	ldr	r0, [pc, #76]	@ (80013f4 <BME280_Config+0x1a8>)
 80013a8:	f003 f870 	bl	800448c <HAL_I2C_Mem_Write>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d002      	beq.n	80013b8 <BME280_Config+0x16c>
	{
		return -1;
 80013b2:	f04f 33ff 	mov.w	r3, #4294967295
 80013b6:	e018      	b.n	80013ea <BME280_Config+0x19e>
	}
	HAL_Delay (100);
 80013b8:	2064      	movs	r0, #100	@ 0x64
 80013ba:	f001 fcab 	bl	8002d14 <HAL_Delay>
	HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, CTRL_MEAS_REG, 1, &datacheck, 1, 1000);
 80013be:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80013c2:	9302      	str	r3, [sp, #8]
 80013c4:	2301      	movs	r3, #1
 80013c6:	9301      	str	r3, [sp, #4]
 80013c8:	f107 030e 	add.w	r3, r7, #14
 80013cc:	9300      	str	r3, [sp, #0]
 80013ce:	2301      	movs	r3, #1
 80013d0:	22f4      	movs	r2, #244	@ 0xf4
 80013d2:	21ec      	movs	r1, #236	@ 0xec
 80013d4:	4807      	ldr	r0, [pc, #28]	@ (80013f4 <BME280_Config+0x1a8>)
 80013d6:	f003 f95f 	bl	8004698 <HAL_I2C_Mem_Read>
	if (datacheck != datatowrite)
 80013da:	7bba      	ldrb	r2, [r7, #14]
 80013dc:	7bfb      	ldrb	r3, [r7, #15]
 80013de:	429a      	cmp	r2, r3
 80013e0:	d002      	beq.n	80013e8 <BME280_Config+0x19c>
	{
		return -1;
 80013e2:	f04f 33ff 	mov.w	r3, #4294967295
 80013e6:	e000      	b.n	80013ea <BME280_Config+0x19e>
	}

	return 0;
 80013e8:	2300      	movs	r3, #0
}
 80013ea:	4618      	mov	r0, r3
 80013ec:	3714      	adds	r7, #20
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd90      	pop	{r4, r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200002b4 	.word	0x200002b4

080013f8 <BMEReadRaw>:


int BMEReadRaw(void)
{
 80013f8:	b580      	push	{r7, lr}
 80013fa:	b086      	sub	sp, #24
 80013fc:	af04      	add	r7, sp, #16
	uint8_t RawData[8];

	// Check the chip ID before reading
	HAL_I2C_Mem_Read(&hi2c1, BME280_ADDRESS, ID_REG, 1, &chipID, 1, 1000);
 80013fe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001402:	9302      	str	r3, [sp, #8]
 8001404:	2301      	movs	r3, #1
 8001406:	9301      	str	r3, [sp, #4]
 8001408:	4b1e      	ldr	r3, [pc, #120]	@ (8001484 <BMEReadRaw+0x8c>)
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2301      	movs	r3, #1
 800140e:	22d0      	movs	r2, #208	@ 0xd0
 8001410:	21ec      	movs	r1, #236	@ 0xec
 8001412:	481d      	ldr	r0, [pc, #116]	@ (8001488 <BMEReadRaw+0x90>)
 8001414:	f003 f940 	bl	8004698 <HAL_I2C_Mem_Read>

	if (chipID == 0x60)
 8001418:	4b1a      	ldr	r3, [pc, #104]	@ (8001484 <BMEReadRaw+0x8c>)
 800141a:	781b      	ldrb	r3, [r3, #0]
 800141c:	2b60      	cmp	r3, #96	@ 0x60
 800141e:	d12a      	bne.n	8001476 <BMEReadRaw+0x7e>
	{
		// Read the Registers 0xF7 to 0xFE
		HAL_I2C_Mem_Read(BME280_I2C, BME280_ADDRESS, PRESS_MSB_REG, 1, RawData, 8, HAL_MAX_DELAY);
 8001420:	f04f 33ff 	mov.w	r3, #4294967295
 8001424:	9302      	str	r3, [sp, #8]
 8001426:	2308      	movs	r3, #8
 8001428:	9301      	str	r3, [sp, #4]
 800142a:	463b      	mov	r3, r7
 800142c:	9300      	str	r3, [sp, #0]
 800142e:	2301      	movs	r3, #1
 8001430:	22f7      	movs	r2, #247	@ 0xf7
 8001432:	21ec      	movs	r1, #236	@ 0xec
 8001434:	4814      	ldr	r0, [pc, #80]	@ (8001488 <BMEReadRaw+0x90>)
 8001436:	f003 f92f 	bl	8004698 <HAL_I2C_Mem_Read>

		/* Calculate the Raw data for the parameters
		 * Here the Pressure and Temperature are in 20 bit format and humidity in 16 bit format
		 */
		pRaw = (RawData[0]<<12)|(RawData[1]<<4)|(RawData[2]>>4);
 800143a:	783b      	ldrb	r3, [r7, #0]
 800143c:	031a      	lsls	r2, r3, #12
 800143e:	787b      	ldrb	r3, [r7, #1]
 8001440:	011b      	lsls	r3, r3, #4
 8001442:	4313      	orrs	r3, r2
 8001444:	78ba      	ldrb	r2, [r7, #2]
 8001446:	0912      	lsrs	r2, r2, #4
 8001448:	b2d2      	uxtb	r2, r2
 800144a:	4313      	orrs	r3, r2
 800144c:	4a0f      	ldr	r2, [pc, #60]	@ (800148c <BMEReadRaw+0x94>)
 800144e:	6013      	str	r3, [r2, #0]
		tRaw = (RawData[3]<<12)|(RawData[4]<<4)|(RawData[5]>>4);
 8001450:	78fb      	ldrb	r3, [r7, #3]
 8001452:	031a      	lsls	r2, r3, #12
 8001454:	793b      	ldrb	r3, [r7, #4]
 8001456:	011b      	lsls	r3, r3, #4
 8001458:	4313      	orrs	r3, r2
 800145a:	797a      	ldrb	r2, [r7, #5]
 800145c:	0912      	lsrs	r2, r2, #4
 800145e:	b2d2      	uxtb	r2, r2
 8001460:	4313      	orrs	r3, r2
 8001462:	4a0b      	ldr	r2, [pc, #44]	@ (8001490 <BMEReadRaw+0x98>)
 8001464:	6013      	str	r3, [r2, #0]
		hRaw = (RawData[6]<<8)|(RawData[7]);
 8001466:	79bb      	ldrb	r3, [r7, #6]
 8001468:	021b      	lsls	r3, r3, #8
 800146a:	79fa      	ldrb	r2, [r7, #7]
 800146c:	4313      	orrs	r3, r2
 800146e:	4a09      	ldr	r2, [pc, #36]	@ (8001494 <BMEReadRaw+0x9c>)
 8001470:	6013      	str	r3, [r2, #0]

		return 0;
 8001472:	2300      	movs	r3, #0
 8001474:	e001      	b.n	800147a <BMEReadRaw+0x82>
	}

	else return -1;
 8001476:	f04f 33ff 	mov.w	r3, #4294967295
}
 800147a:	4618      	mov	r0, r3
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	20000234 	.word	0x20000234
 8001488:	200002b4 	.word	0x200002b4
 800148c:	2000023c 	.word	0x2000023c
 8001490:	20000238 	.word	0x20000238
 8001494:	20000240 	.word	0x20000240

08001498 <BME280_compensate_T_int32>:
/* Returns temperature in DegC, resolution is 0.01 DegC. Output value of “5123” equals 51.23 DegC.
   t_fine carries fine temperature as global value
*/
int32_t t_fine;
int32_t BME280_compensate_T_int32(int32_t adc_T)
{
 8001498:	b480      	push	{r7}
 800149a:	b087      	sub	sp, #28
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	int32_t var1, var2, T;
	var1 = ((((adc_T>>3) - ((int32_t)dig_T1<<1))) * ((int32_t)dig_T2)) >> 11;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	10da      	asrs	r2, r3, #3
 80014a4:	4b19      	ldr	r3, [pc, #100]	@ (800150c <BME280_compensate_T_int32+0x74>)
 80014a6:	881b      	ldrh	r3, [r3, #0]
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	1ad3      	subs	r3, r2, r3
 80014ac:	4a18      	ldr	r2, [pc, #96]	@ (8001510 <BME280_compensate_T_int32+0x78>)
 80014ae:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014b2:	fb02 f303 	mul.w	r3, r2, r3
 80014b6:	12db      	asrs	r3, r3, #11
 80014b8:	617b      	str	r3, [r7, #20]
	var2 = (((((adc_T>>4) - ((int32_t)dig_T1)) * ((adc_T>>4) - ((int32_t)dig_T1)))>> 12) *((int32_t)dig_T3)) >> 14;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	111b      	asrs	r3, r3, #4
 80014be:	4a13      	ldr	r2, [pc, #76]	@ (800150c <BME280_compensate_T_int32+0x74>)
 80014c0:	8812      	ldrh	r2, [r2, #0]
 80014c2:	1a9b      	subs	r3, r3, r2
 80014c4:	687a      	ldr	r2, [r7, #4]
 80014c6:	1112      	asrs	r2, r2, #4
 80014c8:	4910      	ldr	r1, [pc, #64]	@ (800150c <BME280_compensate_T_int32+0x74>)
 80014ca:	8809      	ldrh	r1, [r1, #0]
 80014cc:	1a52      	subs	r2, r2, r1
 80014ce:	fb02 f303 	mul.w	r3, r2, r3
 80014d2:	131b      	asrs	r3, r3, #12
 80014d4:	4a0f      	ldr	r2, [pc, #60]	@ (8001514 <BME280_compensate_T_int32+0x7c>)
 80014d6:	f9b2 2000 	ldrsh.w	r2, [r2]
 80014da:	fb02 f303 	mul.w	r3, r2, r3
 80014de:	139b      	asrs	r3, r3, #14
 80014e0:	613b      	str	r3, [r7, #16]
	t_fine = var1 + var2;
 80014e2:	697a      	ldr	r2, [r7, #20]
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4413      	add	r3, r2
 80014e8:	4a0b      	ldr	r2, [pc, #44]	@ (8001518 <BME280_compensate_T_int32+0x80>)
 80014ea:	6013      	str	r3, [r2, #0]
	T = (t_fine * 5 + 128) >> 8;
 80014ec:	4b0a      	ldr	r3, [pc, #40]	@ (8001518 <BME280_compensate_T_int32+0x80>)
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	4613      	mov	r3, r2
 80014f2:	009b      	lsls	r3, r3, #2
 80014f4:	4413      	add	r3, r2
 80014f6:	3380      	adds	r3, #128	@ 0x80
 80014f8:	121b      	asrs	r3, r3, #8
 80014fa:	60fb      	str	r3, [r7, #12]
	return T;
 80014fc:	68fb      	ldr	r3, [r7, #12]
}
 80014fe:	4618      	mov	r0, r3
 8001500:	371c      	adds	r7, #28
 8001502:	46bd      	mov	sp, r7
 8001504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001508:	4770      	bx	lr
 800150a:	bf00      	nop
 800150c:	20000244 	.word	0x20000244
 8001510:	2000024c 	.word	0x2000024c
 8001514:	2000024e 	.word	0x2000024e
 8001518:	20000268 	.word	0x20000268

0800151c <BME280_compensate_P_int64>:
#if SUPPORT_64BIT
/* Returns pressure in Pa as unsigned 32 bit integer in Q24.8 format (24 integer bits and 8 fractional bits).
   Output value of “24674867” represents 24674867/256 = 96386.2 Pa = 963.862 hPa
*/
uint32_t BME280_compensate_P_int64(int32_t adc_P)
{
 800151c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001520:	b0ca      	sub	sp, #296	@ 0x128
 8001522:	af00      	add	r7, sp, #0
 8001524:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	int64_t var1, var2, p;
	var1 = ((int64_t)t_fine) - 128000;
 8001528:	4baf      	ldr	r3, [pc, #700]	@ (80017e8 <BME280_compensate_P_int64+0x2cc>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	17da      	asrs	r2, r3, #31
 800152e:	461c      	mov	r4, r3
 8001530:	4615      	mov	r5, r2
 8001532:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8001536:	f145 3bff 	adc.w	fp, r5, #4294967295
 800153a:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
	var2 = var1 * var1 * (int64_t)dig_P6;
 800153e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001542:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001546:	fb03 f102 	mul.w	r1, r3, r2
 800154a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800154e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	18ca      	adds	r2, r1, r3
 8001558:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800155c:	fba3 8903 	umull	r8, r9, r3, r3
 8001560:	eb02 0309 	add.w	r3, r2, r9
 8001564:	4699      	mov	r9, r3
 8001566:	4ba1      	ldr	r3, [pc, #644]	@ (80017ec <BME280_compensate_P_int64+0x2d0>)
 8001568:	f9b3 3000 	ldrsh.w	r3, [r3]
 800156c:	b21b      	sxth	r3, r3
 800156e:	17da      	asrs	r2, r3, #31
 8001570:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001574:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001578:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 800157c:	4603      	mov	r3, r0
 800157e:	fb03 f209 	mul.w	r2, r3, r9
 8001582:	460b      	mov	r3, r1
 8001584:	fb08 f303 	mul.w	r3, r8, r3
 8001588:	4413      	add	r3, r2
 800158a:	4602      	mov	r2, r0
 800158c:	fba8 1202 	umull	r1, r2, r8, r2
 8001590:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8001594:	460a      	mov	r2, r1
 8001596:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 800159a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800159e:	4413      	add	r3, r2
 80015a0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80015a4:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80015a8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80015ac:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 80015b0:	4b8f      	ldr	r3, [pc, #572]	@ (80017f0 <BME280_compensate_P_int64+0x2d4>)
 80015b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80015b6:	b21b      	sxth	r3, r3
 80015b8:	17da      	asrs	r2, r3, #31
 80015ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80015be:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80015c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015c6:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80015ca:	462a      	mov	r2, r5
 80015cc:	fb02 f203 	mul.w	r2, r2, r3
 80015d0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80015d4:	4621      	mov	r1, r4
 80015d6:	fb01 f303 	mul.w	r3, r1, r3
 80015da:	441a      	add	r2, r3
 80015dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015e0:	4621      	mov	r1, r4
 80015e2:	fba3 1301 	umull	r1, r3, r3, r1
 80015e6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80015ea:	460b      	mov	r3, r1
 80015ec:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80015f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80015f4:	18d3      	adds	r3, r2, r3
 80015f6:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80015fa:	f04f 0000 	mov.w	r0, #0
 80015fe:	f04f 0100 	mov.w	r1, #0
 8001602:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001606:	462b      	mov	r3, r5
 8001608:	0459      	lsls	r1, r3, #17
 800160a:	4623      	mov	r3, r4
 800160c:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8001610:	4623      	mov	r3, r4
 8001612:	0458      	lsls	r0, r3, #17
 8001614:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001618:	1814      	adds	r4, r2, r0
 800161a:	643c      	str	r4, [r7, #64]	@ 0x40
 800161c:	414b      	adcs	r3, r1
 800161e:	647b      	str	r3, [r7, #68]	@ 0x44
 8001620:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001624:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var2 = var2 + (((int64_t)dig_P4)<<35);
 8001628:	4b72      	ldr	r3, [pc, #456]	@ (80017f4 <BME280_compensate_P_int64+0x2d8>)
 800162a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800162e:	b21b      	sxth	r3, r3
 8001630:	17da      	asrs	r2, r3, #31
 8001632:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001636:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800163a:	f04f 0000 	mov.w	r0, #0
 800163e:	f04f 0100 	mov.w	r1, #0
 8001642:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001646:	00d9      	lsls	r1, r3, #3
 8001648:	2000      	movs	r0, #0
 800164a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800164e:	1814      	adds	r4, r2, r0
 8001650:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001652:	414b      	adcs	r3, r1
 8001654:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001656:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800165a:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
	var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 800165e:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001662:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001666:	fb03 f102 	mul.w	r1, r3, r2
 800166a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800166e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	18ca      	adds	r2, r1, r3
 8001678:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800167c:	fba3 1303 	umull	r1, r3, r3, r3
 8001680:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001684:	460b      	mov	r3, r1
 8001686:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800168a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800168e:	18d3      	adds	r3, r2, r3
 8001690:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001694:	4b58      	ldr	r3, [pc, #352]	@ (80017f8 <BME280_compensate_P_int64+0x2dc>)
 8001696:	f9b3 3000 	ldrsh.w	r3, [r3]
 800169a:	b21b      	sxth	r3, r3
 800169c:	17da      	asrs	r2, r3, #31
 800169e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80016a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80016a6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80016aa:	462b      	mov	r3, r5
 80016ac:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80016b0:	4642      	mov	r2, r8
 80016b2:	fb02 f203 	mul.w	r2, r2, r3
 80016b6:	464b      	mov	r3, r9
 80016b8:	4621      	mov	r1, r4
 80016ba:	fb01 f303 	mul.w	r3, r1, r3
 80016be:	4413      	add	r3, r2
 80016c0:	4622      	mov	r2, r4
 80016c2:	4641      	mov	r1, r8
 80016c4:	fba2 1201 	umull	r1, r2, r2, r1
 80016c8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80016cc:	460a      	mov	r2, r1
 80016ce:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80016d2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80016d6:	4413      	add	r3, r2
 80016d8:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80016dc:	f04f 0000 	mov.w	r0, #0
 80016e0:	f04f 0100 	mov.w	r1, #0
 80016e4:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80016e8:	4623      	mov	r3, r4
 80016ea:	0a18      	lsrs	r0, r3, #8
 80016ec:	462b      	mov	r3, r5
 80016ee:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80016f2:	462b      	mov	r3, r5
 80016f4:	1219      	asrs	r1, r3, #8
 80016f6:	4b41      	ldr	r3, [pc, #260]	@ (80017fc <BME280_compensate_P_int64+0x2e0>)
 80016f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80016fc:	b21b      	sxth	r3, r3
 80016fe:	17da      	asrs	r2, r3, #31
 8001700:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001704:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001708:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800170c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001710:	464a      	mov	r2, r9
 8001712:	fb02 f203 	mul.w	r2, r2, r3
 8001716:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800171a:	4644      	mov	r4, r8
 800171c:	fb04 f303 	mul.w	r3, r4, r3
 8001720:	441a      	add	r2, r3
 8001722:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001726:	4644      	mov	r4, r8
 8001728:	fba3 4304 	umull	r4, r3, r3, r4
 800172c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001730:	4623      	mov	r3, r4
 8001732:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001736:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800173a:	18d3      	adds	r3, r2, r3
 800173c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001740:	f04f 0200 	mov.w	r2, #0
 8001744:	f04f 0300 	mov.w	r3, #0
 8001748:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800174c:	464c      	mov	r4, r9
 800174e:	0323      	lsls	r3, r4, #12
 8001750:	4644      	mov	r4, r8
 8001752:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001756:	4644      	mov	r4, r8
 8001758:	0322      	lsls	r2, r4, #12
 800175a:	1884      	adds	r4, r0, r2
 800175c:	633c      	str	r4, [r7, #48]	@ 0x30
 800175e:	eb41 0303 	adc.w	r3, r1, r3
 8001762:	637b      	str	r3, [r7, #52]	@ 0x34
 8001764:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001768:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
	var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33;
 800176c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001770:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001774:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001778:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800177c:	4b20      	ldr	r3, [pc, #128]	@ (8001800 <BME280_compensate_P_int64+0x2e4>)
 800177e:	881b      	ldrh	r3, [r3, #0]
 8001780:	b29b      	uxth	r3, r3
 8001782:	2200      	movs	r2, #0
 8001784:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001788:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800178c:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001790:	462b      	mov	r3, r5
 8001792:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001796:	4642      	mov	r2, r8
 8001798:	fb02 f203 	mul.w	r2, r2, r3
 800179c:	464b      	mov	r3, r9
 800179e:	4621      	mov	r1, r4
 80017a0:	fb01 f303 	mul.w	r3, r1, r3
 80017a4:	4413      	add	r3, r2
 80017a6:	4622      	mov	r2, r4
 80017a8:	4641      	mov	r1, r8
 80017aa:	fba2 1201 	umull	r1, r2, r2, r1
 80017ae:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80017b2:	460a      	mov	r2, r1
 80017b4:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80017b8:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80017bc:	4413      	add	r3, r2
 80017be:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	f04f 0300 	mov.w	r3, #0
 80017ca:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80017ce:	4629      	mov	r1, r5
 80017d0:	104a      	asrs	r2, r1, #1
 80017d2:	4629      	mov	r1, r5
 80017d4:	17cb      	asrs	r3, r1, #31
 80017d6:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	if (var1 == 0)
 80017da:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80017de:	4313      	orrs	r3, r2
 80017e0:	d110      	bne.n	8001804 <BME280_compensate_P_int64+0x2e8>
	{
		return 0; // avoid exception caused by division by zero
 80017e2:	2300      	movs	r3, #0
 80017e4:	e154      	b.n	8001a90 <BME280_compensate_P_int64+0x574>
 80017e6:	bf00      	nop
 80017e8:	20000268 	.word	0x20000268
 80017ec:	20000258 	.word	0x20000258
 80017f0:	20000256 	.word	0x20000256
 80017f4:	20000254 	.word	0x20000254
 80017f8:	20000252 	.word	0x20000252
 80017fc:	20000250 	.word	0x20000250
 8001800:	20000246 	.word	0x20000246
	}
	p = 1048576-adc_P;
 8001804:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001808:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 800180c:	17da      	asrs	r2, r3, #31
 800180e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001810:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001812:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001816:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	p = (((p<<31)-var2)*3125)/var1;
 800181a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800181e:	105b      	asrs	r3, r3, #1
 8001820:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001824:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001828:	07db      	lsls	r3, r3, #31
 800182a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800182e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001832:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001836:	4621      	mov	r1, r4
 8001838:	1a89      	subs	r1, r1, r2
 800183a:	67b9      	str	r1, [r7, #120]	@ 0x78
 800183c:	4629      	mov	r1, r5
 800183e:	eb61 0303 	sbc.w	r3, r1, r3
 8001842:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001844:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001848:	4622      	mov	r2, r4
 800184a:	462b      	mov	r3, r5
 800184c:	1891      	adds	r1, r2, r2
 800184e:	6239      	str	r1, [r7, #32]
 8001850:	415b      	adcs	r3, r3
 8001852:	627b      	str	r3, [r7, #36]	@ 0x24
 8001854:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001858:	4621      	mov	r1, r4
 800185a:	1851      	adds	r1, r2, r1
 800185c:	61b9      	str	r1, [r7, #24]
 800185e:	4629      	mov	r1, r5
 8001860:	414b      	adcs	r3, r1
 8001862:	61fb      	str	r3, [r7, #28]
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001870:	4649      	mov	r1, r9
 8001872:	018b      	lsls	r3, r1, #6
 8001874:	4641      	mov	r1, r8
 8001876:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800187a:	4641      	mov	r1, r8
 800187c:	018a      	lsls	r2, r1, #6
 800187e:	4641      	mov	r1, r8
 8001880:	1889      	adds	r1, r1, r2
 8001882:	6139      	str	r1, [r7, #16]
 8001884:	4649      	mov	r1, r9
 8001886:	eb43 0101 	adc.w	r1, r3, r1
 800188a:	6179      	str	r1, [r7, #20]
 800188c:	f04f 0200 	mov.w	r2, #0
 8001890:	f04f 0300 	mov.w	r3, #0
 8001894:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001898:	4649      	mov	r1, r9
 800189a:	008b      	lsls	r3, r1, #2
 800189c:	4641      	mov	r1, r8
 800189e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018a2:	4641      	mov	r1, r8
 80018a4:	008a      	lsls	r2, r1, #2
 80018a6:	4610      	mov	r0, r2
 80018a8:	4619      	mov	r1, r3
 80018aa:	4603      	mov	r3, r0
 80018ac:	4622      	mov	r2, r4
 80018ae:	189b      	adds	r3, r3, r2
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	460b      	mov	r3, r1
 80018b4:	462a      	mov	r2, r5
 80018b6:	eb42 0303 	adc.w	r3, r2, r3
 80018ba:	60fb      	str	r3, [r7, #12]
 80018bc:	f04f 0200 	mov.w	r2, #0
 80018c0:	f04f 0300 	mov.w	r3, #0
 80018c4:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80018c8:	4649      	mov	r1, r9
 80018ca:	008b      	lsls	r3, r1, #2
 80018cc:	4641      	mov	r1, r8
 80018ce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80018d2:	4641      	mov	r1, r8
 80018d4:	008a      	lsls	r2, r1, #2
 80018d6:	4610      	mov	r0, r2
 80018d8:	4619      	mov	r1, r3
 80018da:	4603      	mov	r3, r0
 80018dc:	4622      	mov	r2, r4
 80018de:	189b      	adds	r3, r3, r2
 80018e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80018e2:	462b      	mov	r3, r5
 80018e4:	460a      	mov	r2, r1
 80018e6:	eb42 0303 	adc.w	r3, r2, r3
 80018ea:	677b      	str	r3, [r7, #116]	@ 0x74
 80018ec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80018f0:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80018f4:	f7ff fa00 	bl	8000cf8 <__aeabi_ldivmod>
 80018f8:	4602      	mov	r2, r0
 80018fa:	460b      	mov	r3, r1
 80018fc:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
	var1 = (((int64_t)dig_P9) * (p>>13) * (p>>13)) >> 25;
 8001900:	4b66      	ldr	r3, [pc, #408]	@ (8001a9c <BME280_compensate_P_int64+0x580>)
 8001902:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001906:	b21b      	sxth	r3, r3
 8001908:	17da      	asrs	r2, r3, #31
 800190a:	66bb      	str	r3, [r7, #104]	@ 0x68
 800190c:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800190e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001912:	f04f 0000 	mov.w	r0, #0
 8001916:	f04f 0100 	mov.w	r1, #0
 800191a:	0b50      	lsrs	r0, r2, #13
 800191c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001920:	1359      	asrs	r1, r3, #13
 8001922:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001926:	462b      	mov	r3, r5
 8001928:	fb00 f203 	mul.w	r2, r0, r3
 800192c:	4623      	mov	r3, r4
 800192e:	fb03 f301 	mul.w	r3, r3, r1
 8001932:	4413      	add	r3, r2
 8001934:	4622      	mov	r2, r4
 8001936:	fba2 1200 	umull	r1, r2, r2, r0
 800193a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800193e:	460a      	mov	r2, r1
 8001940:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001944:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001948:	4413      	add	r3, r2
 800194a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800194e:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001952:	f04f 0000 	mov.w	r0, #0
 8001956:	f04f 0100 	mov.w	r1, #0
 800195a:	0b50      	lsrs	r0, r2, #13
 800195c:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001960:	1359      	asrs	r1, r3, #13
 8001962:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001966:	462b      	mov	r3, r5
 8001968:	fb00 f203 	mul.w	r2, r0, r3
 800196c:	4623      	mov	r3, r4
 800196e:	fb03 f301 	mul.w	r3, r3, r1
 8001972:	4413      	add	r3, r2
 8001974:	4622      	mov	r2, r4
 8001976:	fba2 1200 	umull	r1, r2, r2, r0
 800197a:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800197e:	460a      	mov	r2, r1
 8001980:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001984:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001988:	4413      	add	r3, r2
 800198a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800198e:	f04f 0200 	mov.w	r2, #0
 8001992:	f04f 0300 	mov.w	r3, #0
 8001996:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 800199a:	4621      	mov	r1, r4
 800199c:	0e4a      	lsrs	r2, r1, #25
 800199e:	4629      	mov	r1, r5
 80019a0:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80019a4:	4629      	mov	r1, r5
 80019a6:	164b      	asrs	r3, r1, #25
 80019a8:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
	var2 = (((int64_t)dig_P8) * p) >> 19;
 80019ac:	4b3c      	ldr	r3, [pc, #240]	@ (8001aa0 <BME280_compensate_P_int64+0x584>)
 80019ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019b2:	b21b      	sxth	r3, r3
 80019b4:	17da      	asrs	r2, r3, #31
 80019b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80019b8:	667a      	str	r2, [r7, #100]	@ 0x64
 80019ba:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80019be:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80019c2:	462a      	mov	r2, r5
 80019c4:	fb02 f203 	mul.w	r2, r2, r3
 80019c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80019cc:	4621      	mov	r1, r4
 80019ce:	fb01 f303 	mul.w	r3, r1, r3
 80019d2:	4413      	add	r3, r2
 80019d4:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80019d8:	4621      	mov	r1, r4
 80019da:	fba2 1201 	umull	r1, r2, r2, r1
 80019de:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80019e2:	460a      	mov	r2, r1
 80019e4:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 80019e8:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 80019ec:	4413      	add	r3, r2
 80019ee:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80019f2:	f04f 0200 	mov.w	r2, #0
 80019f6:	f04f 0300 	mov.w	r3, #0
 80019fa:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 80019fe:	4621      	mov	r1, r4
 8001a00:	0cca      	lsrs	r2, r1, #19
 8001a02:	4629      	mov	r1, r5
 8001a04:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a08:	4629      	mov	r1, r5
 8001a0a:	14cb      	asrs	r3, r1, #19
 8001a0c:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
	p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 8001a10:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001a14:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001a18:	1884      	adds	r4, r0, r2
 8001a1a:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001a1c:	eb41 0303 	adc.w	r3, r1, r3
 8001a20:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001a22:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a26:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	1889      	adds	r1, r1, r2
 8001a2e:	6539      	str	r1, [r7, #80]	@ 0x50
 8001a30:	4629      	mov	r1, r5
 8001a32:	eb43 0101 	adc.w	r1, r3, r1
 8001a36:	6579      	str	r1, [r7, #84]	@ 0x54
 8001a38:	f04f 0000 	mov.w	r0, #0
 8001a3c:	f04f 0100 	mov.w	r1, #0
 8001a40:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001a44:	4623      	mov	r3, r4
 8001a46:	0a18      	lsrs	r0, r3, #8
 8001a48:	462b      	mov	r3, r5
 8001a4a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001a4e:	462b      	mov	r3, r5
 8001a50:	1219      	asrs	r1, r3, #8
 8001a52:	4b14      	ldr	r3, [pc, #80]	@ (8001aa4 <BME280_compensate_P_int64+0x588>)
 8001a54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001a58:	b21b      	sxth	r3, r3
 8001a5a:	17da      	asrs	r2, r3, #31
 8001a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001a5e:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001a60:	f04f 0200 	mov.w	r2, #0
 8001a64:	f04f 0300 	mov.w	r3, #0
 8001a68:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001a6c:	464c      	mov	r4, r9
 8001a6e:	0123      	lsls	r3, r4, #4
 8001a70:	4644      	mov	r4, r8
 8001a72:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001a76:	4644      	mov	r4, r8
 8001a78:	0122      	lsls	r2, r4, #4
 8001a7a:	1884      	adds	r4, r0, r2
 8001a7c:	603c      	str	r4, [r7, #0]
 8001a7e:	eb41 0303 	adc.w	r3, r1, r3
 8001a82:	607b      	str	r3, [r7, #4]
 8001a84:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001a88:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
	return (uint32_t)p;
 8001a8c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001a90:	4618      	mov	r0, r3
 8001a92:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001a96:	46bd      	mov	sp, r7
 8001a98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001a9c:	2000025e 	.word	0x2000025e
 8001aa0:	2000025c 	.word	0x2000025c
 8001aa4:	2000025a 	.word	0x2000025a

08001aa8 <bme280_compensate_H_int32>:

/* Returns humidity in %RH as unsigned 32 bit integer in Q22.10 format (22 integer and 10 fractional bits).
   Output value of “47445” represents 47445/1024 = 46.333 %RH
*/
uint32_t bme280_compensate_H_int32(int32_t adc_H)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b085      	sub	sp, #20
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
	int32_t v_x1_u32r;
	v_x1_u32r = (t_fine - ((int32_t)76800));
 8001ab0:	4b2c      	ldr	r3, [pc, #176]	@ (8001b64 <bme280_compensate_H_int32+0xbc>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f5a3 3396 	sub.w	r3, r3, #76800	@ 0x12c00
 8001ab8:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	039a      	lsls	r2, r3, #14
 8001abe:	4b2a      	ldr	r3, [pc, #168]	@ (8001b68 <bme280_compensate_H_int32+0xc0>)
 8001ac0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ac4:	051b      	lsls	r3, r3, #20
 8001ac6:	1ad2      	subs	r2, r2, r3
 8001ac8:	4b28      	ldr	r3, [pc, #160]	@ (8001b6c <bme280_compensate_H_int32+0xc4>)
 8001aca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	fb01 f303 	mul.w	r3, r1, r3
 8001ad6:	1ad3      	subs	r3, r2, r3
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001ad8:	f503 4380 	add.w	r3, r3, #16384	@ 0x4000
 8001adc:	13db      	asrs	r3, r3, #15
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001ade:	4a24      	ldr	r2, [pc, #144]	@ (8001b70 <bme280_compensate_H_int32+0xc8>)
 8001ae0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001ae4:	4611      	mov	r1, r2
			v_x1_u32r)) + ((int32_t)16384)) >> 15) * (((((((v_x1_u32r *\
 8001ae6:	68fa      	ldr	r2, [r7, #12]
 8001ae8:	fb01 f202 	mul.w	r2, r1, r2
					((int32_t)dig_H6)) >> 10) * (((v_x1_u32r * ((int32_t)dig_H3)) >> 11) +\
 8001aec:	1292      	asrs	r2, r2, #10
 8001aee:	4921      	ldr	r1, [pc, #132]	@ (8001b74 <bme280_compensate_H_int32+0xcc>)
 8001af0:	8809      	ldrh	r1, [r1, #0]
 8001af2:	4608      	mov	r0, r1
 8001af4:	68f9      	ldr	r1, [r7, #12]
 8001af6:	fb00 f101 	mul.w	r1, r0, r1
 8001afa:	12c9      	asrs	r1, r1, #11
 8001afc:	f501 4100 	add.w	r1, r1, #32768	@ 0x8000
 8001b00:	fb01 f202 	mul.w	r2, r1, r2
							((int32_t)32768))) >> 10) + ((int32_t)2097152)) * ((int32_t)dig_H2) +\
 8001b04:	1292      	asrs	r2, r2, #10
 8001b06:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 8001b0a:	491b      	ldr	r1, [pc, #108]	@ (8001b78 <bme280_compensate_H_int32+0xd0>)
 8001b0c:	f9b1 1000 	ldrsh.w	r1, [r1]
 8001b10:	fb01 f202 	mul.w	r2, r1, r2
 8001b14:	f502 5200 	add.w	r2, r2, #8192	@ 0x2000
					8192) >> 14));
 8001b18:	1392      	asrs	r2, r2, #14
	v_x1_u32r = (((((adc_H << 14) - (((int32_t)dig_H4) << 20) - (((int32_t)dig_H5) *\
 8001b1a:	fb02 f303 	mul.w	r3, r2, r3
 8001b1e:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	13db      	asrs	r3, r3, #15
 8001b24:	68fa      	ldr	r2, [r7, #12]
 8001b26:	13d2      	asrs	r2, r2, #15
 8001b28:	fb02 f303 	mul.w	r3, r2, r3
 8001b2c:	11db      	asrs	r3, r3, #7
			((int32_t)dig_H1)) >> 4));
 8001b2e:	4a13      	ldr	r2, [pc, #76]	@ (8001b7c <bme280_compensate_H_int32+0xd4>)
 8001b30:	8812      	ldrh	r2, [r2, #0]
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b32:	fb02 f303 	mul.w	r3, r2, r3
			((int32_t)dig_H1)) >> 4));
 8001b36:	111b      	asrs	r3, r3, #4
	v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *\
 8001b38:	68fa      	ldr	r2, [r7, #12]
 8001b3a:	1ad3      	subs	r3, r2, r3
 8001b3c:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r < 0 ? 0 : v_x1_u32r);
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8001b44:	60fb      	str	r3, [r7, #12]
	v_x1_u32r = (v_x1_u32r > 419430400 ? 419430400 : v_x1_u32r);
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	f1b3 5fc8 	cmp.w	r3, #419430400	@ 0x19000000
 8001b4c:	bfa8      	it	ge
 8001b4e:	f04f 53c8 	movge.w	r3, #419430400	@ 0x19000000
 8001b52:	60fb      	str	r3, [r7, #12]
	return (uint32_t)(v_x1_u32r>>12);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	131b      	asrs	r3, r3, #12
}
 8001b58:	4618      	mov	r0, r3
 8001b5a:	3714      	adds	r7, #20
 8001b5c:	46bd      	mov	sp, r7
 8001b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b62:	4770      	bx	lr
 8001b64:	20000268 	.word	0x20000268
 8001b68:	20000262 	.word	0x20000262
 8001b6c:	20000264 	.word	0x20000264
 8001b70:	20000266 	.word	0x20000266
 8001b74:	2000024a 	.word	0x2000024a
 8001b78:	20000260 	.word	0x20000260
 8001b7c:	20000248 	.word	0x20000248

08001b80 <BME280_Measure>:

/* measure the temp, pressure and humidity
 * the values will be stored in the parameters passed to the function
 */
void BME280_Measure (void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
	if (BMEReadRaw() == 0)
 8001b84:	f7ff fc38 	bl	80013f8 <BMEReadRaw>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d16c      	bne.n	8001c68 <BME280_Measure+0xe8>
	{
		  if (tRaw == 0x800000) SD.Temperature = 0; // value in case temp measurement was disabled
 8001b8e:	4b3d      	ldr	r3, [pc, #244]	@ (8001c84 <BME280_Measure+0x104>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001b96:	d104      	bne.n	8001ba2 <BME280_Measure+0x22>
 8001b98:	4b3b      	ldr	r3, [pc, #236]	@ (8001c88 <BME280_Measure+0x108>)
 8001b9a:	f04f 0200 	mov.w	r2, #0
 8001b9e:	601a      	str	r2, [r3, #0]
 8001ba0:	e016      	b.n	8001bd0 <BME280_Measure+0x50>
		  else
		  {
			  SD.Temperature = (BME280_compensate_T_int32 (tRaw))/100.0;  // as per datasheet, the temp is x100
 8001ba2:	4b38      	ldr	r3, [pc, #224]	@ (8001c84 <BME280_Measure+0x104>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	f7ff fc76 	bl	8001498 <BME280_compensate_T_int32>
 8001bac:	4603      	mov	r3, r0
 8001bae:	4618      	mov	r0, r3
 8001bb0:	f7fe fd10 	bl	80005d4 <__aeabi_i2d>
 8001bb4:	f04f 0200 	mov.w	r2, #0
 8001bb8:	4b34      	ldr	r3, [pc, #208]	@ (8001c8c <BME280_Measure+0x10c>)
 8001bba:	f7fe fe9f 	bl	80008fc <__aeabi_ddiv>
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	4610      	mov	r0, r2
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f7ff f847 	bl	8000c58 <__aeabi_d2f>
 8001bca:	4603      	mov	r3, r0
 8001bcc:	4a2e      	ldr	r2, [pc, #184]	@ (8001c88 <BME280_Measure+0x108>)
 8001bce:	6013      	str	r3, [r2, #0]
		  }

		  if (pRaw == 0x800000) SD.Pressure = 0; // value in case temp measurement was disabled
 8001bd0:	4b2f      	ldr	r3, [pc, #188]	@ (8001c90 <BME280_Measure+0x110>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8001bd8:	d104      	bne.n	8001be4 <BME280_Measure+0x64>
 8001bda:	4b2b      	ldr	r3, [pc, #172]	@ (8001c88 <BME280_Measure+0x108>)
 8001bdc:	f04f 0200 	mov.w	r2, #0
 8001be0:	605a      	str	r2, [r3, #4]
 8001be2:	e01f      	b.n	8001c24 <BME280_Measure+0xa4>
		  else
		  {
#if SUPPORT_64BIT
			  SD.Pressure = (((BME280_compensate_P_int64 (pRaw))/256.0)/1000);  // as per datasheet, the pressure is x256
 8001be4:	4b2a      	ldr	r3, [pc, #168]	@ (8001c90 <BME280_Measure+0x110>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff fc97 	bl	800151c <BME280_compensate_P_int64>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	f7fe fcdf 	bl	80005b4 <__aeabi_ui2d>
 8001bf6:	f04f 0200 	mov.w	r2, #0
 8001bfa:	4b26      	ldr	r3, [pc, #152]	@ (8001c94 <BME280_Measure+0x114>)
 8001bfc:	f7fe fe7e 	bl	80008fc <__aeabi_ddiv>
 8001c00:	4602      	mov	r2, r0
 8001c02:	460b      	mov	r3, r1
 8001c04:	4610      	mov	r0, r2
 8001c06:	4619      	mov	r1, r3
 8001c08:	f04f 0200 	mov.w	r2, #0
 8001c0c:	4b22      	ldr	r3, [pc, #136]	@ (8001c98 <BME280_Measure+0x118>)
 8001c0e:	f7fe fe75 	bl	80008fc <__aeabi_ddiv>
 8001c12:	4602      	mov	r2, r0
 8001c14:	460b      	mov	r3, r1
 8001c16:	4610      	mov	r0, r2
 8001c18:	4619      	mov	r1, r3
 8001c1a:	f7ff f81d 	bl	8000c58 <__aeabi_d2f>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	4a19      	ldr	r2, [pc, #100]	@ (8001c88 <BME280_Measure+0x108>)
 8001c22:	6053      	str	r3, [r2, #4]
			  SD.Pressure = (BME280_compensate_P_int32 (pRaw));  // as per datasheet, the pressure is Pa

#endif
		  }

		  if (hRaw == 0x8000) SD.Humidity = 0; // value in case temp measurement was disabled
 8001c24:	4b1d      	ldr	r3, [pc, #116]	@ (8001c9c <BME280_Measure+0x11c>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001c2c:	d104      	bne.n	8001c38 <BME280_Measure+0xb8>
 8001c2e:	4b16      	ldr	r3, [pc, #88]	@ (8001c88 <BME280_Measure+0x108>)
 8001c30:	f04f 0200 	mov.w	r2, #0
 8001c34:	609a      	str	r2, [r3, #8]
	// if the device is detached
	else
	{
		SD.Temperature = SD.Pressure = SD.Humidity = 0;
	}
}
 8001c36:	e023      	b.n	8001c80 <BME280_Measure+0x100>
			  SD.Humidity = (bme280_compensate_H_int32 (hRaw))/1024.0;  // as per datasheet, the temp is x1024
 8001c38:	4b18      	ldr	r3, [pc, #96]	@ (8001c9c <BME280_Measure+0x11c>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4618      	mov	r0, r3
 8001c3e:	f7ff ff33 	bl	8001aa8 <bme280_compensate_H_int32>
 8001c42:	4603      	mov	r3, r0
 8001c44:	4618      	mov	r0, r3
 8001c46:	f7fe fcb5 	bl	80005b4 <__aeabi_ui2d>
 8001c4a:	f04f 0200 	mov.w	r2, #0
 8001c4e:	4b14      	ldr	r3, [pc, #80]	@ (8001ca0 <BME280_Measure+0x120>)
 8001c50:	f7fe fe54 	bl	80008fc <__aeabi_ddiv>
 8001c54:	4602      	mov	r2, r0
 8001c56:	460b      	mov	r3, r1
 8001c58:	4610      	mov	r0, r2
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	f7fe fffc 	bl	8000c58 <__aeabi_d2f>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4a09      	ldr	r2, [pc, #36]	@ (8001c88 <BME280_Measure+0x108>)
 8001c64:	6093      	str	r3, [r2, #8]
}
 8001c66:	e00b      	b.n	8001c80 <BME280_Measure+0x100>
		SD.Temperature = SD.Pressure = SD.Humidity = 0;
 8001c68:	4b07      	ldr	r3, [pc, #28]	@ (8001c88 <BME280_Measure+0x108>)
 8001c6a:	f04f 0200 	mov.w	r2, #0
 8001c6e:	609a      	str	r2, [r3, #8]
 8001c70:	4b05      	ldr	r3, [pc, #20]	@ (8001c88 <BME280_Measure+0x108>)
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4a04      	ldr	r2, [pc, #16]	@ (8001c88 <BME280_Measure+0x108>)
 8001c76:	6053      	str	r3, [r2, #4]
 8001c78:	4b03      	ldr	r3, [pc, #12]	@ (8001c88 <BME280_Measure+0x108>)
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	4a02      	ldr	r2, [pc, #8]	@ (8001c88 <BME280_Measure+0x108>)
 8001c7e:	6013      	str	r3, [r2, #0]
}
 8001c80:	bf00      	nop
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	20000238 	.word	0x20000238
 8001c88:	2000020c 	.word	0x2000020c
 8001c8c:	40590000 	.word	0x40590000
 8001c90:	2000023c 	.word	0x2000023c
 8001c94:	40700000 	.word	0x40700000
 8001c98:	408f4000 	.word	0x408f4000
 8001c9c:	20000240 	.word	0x20000240
 8001ca0:	40900000 	.word	0x40900000

08001ca4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001caa:	f000 fff1 	bl	8002c90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cae:	f000 f863 	bl	8001d78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cb2:	f000 f969 	bl	8001f88 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001cb6:	f000 f8bd 	bl	8001e34 <MX_ADC1_Init>
  MX_I2C1_Init();
 8001cba:	f000 f90d 	bl	8001ed8 <MX_I2C1_Init>
  MX_UART5_Init();
 8001cbe:	f000 f939 	bl	8001f34 <MX_UART5_Init>
  /* USER CODE BEGIN 2 */

  SEGGER_SYSVIEW_Conf();
 8001cc2:	f007 fc63 	bl	800958c <SEGGER_SYSVIEW_Conf>
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);	//ensure proper priority grouping for freeRTOS//?
 8001cc6:	2003      	movs	r0, #3
 8001cc8:	f001 fea8 	bl	8003a1c <HAL_NVIC_SetPriorityGrouping>
  HAL_NVIC_SetPriority(SysTick_IRQn, 15, 0);//?
 8001ccc:	2200      	movs	r2, #0
 8001cce:	210f      	movs	r1, #15
 8001cd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001cd4:	f001 fec2 	bl	8003a5c <HAL_NVIC_SetPriority>


  // Initialize BME280
  BME280_Config(OSRS_2, OSRS_16, OSRS_1, MODE_NORMAL, T_SB_0p5, IIR_16);
 8001cd8:	2304      	movs	r3, #4
 8001cda:	9301      	str	r3, [sp, #4]
 8001cdc:	2300      	movs	r3, #0
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	2105      	movs	r1, #5
 8001ce6:	2002      	movs	r0, #2
 8001ce8:	f7ff fab0 	bl	800124c <BME280_Config>

  // Create RTOS Queue & Semaphore
  SensorDataMutex = xSemaphoreCreateMutex();
 8001cec:	2001      	movs	r0, #1
 8001cee:	f005 fb85 	bl	80073fc <xQueueCreateMutex>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	4a18      	ldr	r2, [pc, #96]	@ (8001d58 <main+0xb4>)
 8001cf6:	6013      	str	r3, [r2, #0]
  assert_param(SensorDataMutex!=NULL);
 8001cf8:	4b17      	ldr	r3, [pc, #92]	@ (8001d58 <main+0xb4>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d103      	bne.n	8001d08 <main+0x64>
 8001d00:	21ab      	movs	r1, #171	@ 0xab
 8001d02:	4816      	ldr	r0, [pc, #88]	@ (8001d5c <main+0xb8>)
 8001d04:	f000 fc5a 	bl	80025bc <assert_failed>

  /* Create RTOS Tasks */
  assert_param(xTaskCreate(Task_SensorRead, "SensorTask", 1024, NULL, 3, &SensorTaskHandle) == pdPASS);
 8001d08:	4b15      	ldr	r3, [pc, #84]	@ (8001d60 <main+0xbc>)
 8001d0a:	9301      	str	r3, [sp, #4]
 8001d0c:	2303      	movs	r3, #3
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	2300      	movs	r3, #0
 8001d12:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d16:	4913      	ldr	r1, [pc, #76]	@ (8001d64 <main+0xc0>)
 8001d18:	4813      	ldr	r0, [pc, #76]	@ (8001d68 <main+0xc4>)
 8001d1a:	f005 fe5b 	bl	80079d4 <xTaskCreate>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b01      	cmp	r3, #1
 8001d22:	d003      	beq.n	8001d2c <main+0x88>
 8001d24:	21ae      	movs	r1, #174	@ 0xae
 8001d26:	480d      	ldr	r0, [pc, #52]	@ (8001d5c <main+0xb8>)
 8001d28:	f000 fc48 	bl	80025bc <assert_failed>
//  assert_param(xTaskCreate(Task_DisplayUpdate, "DisplayTask", 1024, NULL, 2, &DisplayTaskHandle) == pdPASS);
  assert_param(xTaskCreate(Task_UARTSend, "UartTask", 1024, NULL, 1, &UartTaskHandle) == pdPASS);
 8001d2c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d6c <main+0xc8>)
 8001d2e:	9301      	str	r3, [sp, #4]
 8001d30:	2301      	movs	r3, #1
 8001d32:	9300      	str	r3, [sp, #0]
 8001d34:	2300      	movs	r3, #0
 8001d36:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d3a:	490d      	ldr	r1, [pc, #52]	@ (8001d70 <main+0xcc>)
 8001d3c:	480d      	ldr	r0, [pc, #52]	@ (8001d74 <main+0xd0>)
 8001d3e:	f005 fe49 	bl	80079d4 <xTaskCreate>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b01      	cmp	r3, #1
 8001d46:	d003      	beq.n	8001d50 <main+0xac>
 8001d48:	21b0      	movs	r1, #176	@ 0xb0
 8001d4a:	4804      	ldr	r0, [pc, #16]	@ (8001d5c <main+0xb8>)
 8001d4c:	f000 fc36 	bl	80025bc <assert_failed>

  /* Start Scheduler */
  vTaskStartScheduler();
 8001d50:	f006 f800 	bl	8007d54 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001d54:	bf00      	nop
 8001d56:	e7fd      	b.n	8001d54 <main+0xb0>
 8001d58:	20000378 	.word	0x20000378
 8001d5c:	0800ec28 	.word	0x0800ec28
 8001d60:	2000037c 	.word	0x2000037c
 8001d64:	0800ec3c 	.word	0x0800ec3c
 8001d68:	08002079 	.word	0x08002079
 8001d6c:	20000380 	.word	0x20000380
 8001d70:	0800ec48 	.word	0x0800ec48
 8001d74:	08002349 	.word	0x08002349

08001d78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b094      	sub	sp, #80	@ 0x50
 8001d7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001d7e:	f107 0320 	add.w	r3, r7, #32
 8001d82:	2230      	movs	r2, #48	@ 0x30
 8001d84:	2100      	movs	r1, #0
 8001d86:	4618      	mov	r0, r3
 8001d88:	f009 ff1b 	bl	800bbc2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001d8c:	f107 030c 	add.w	r3, r7, #12
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60bb      	str	r3, [r7, #8]
 8001da0:	4b22      	ldr	r3, [pc, #136]	@ (8001e2c <SystemClock_Config+0xb4>)
 8001da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001da4:	4a21      	ldr	r2, [pc, #132]	@ (8001e2c <SystemClock_Config+0xb4>)
 8001da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001daa:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dac:	4b1f      	ldr	r3, [pc, #124]	@ (8001e2c <SystemClock_Config+0xb4>)
 8001dae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001db4:	60bb      	str	r3, [r7, #8]
 8001db6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001db8:	2300      	movs	r3, #0
 8001dba:	607b      	str	r3, [r7, #4]
 8001dbc:	4b1c      	ldr	r3, [pc, #112]	@ (8001e30 <SystemClock_Config+0xb8>)
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8001e30 <SystemClock_Config+0xb8>)
 8001dc2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001dc6:	6013      	str	r3, [r2, #0]
 8001dc8:	4b19      	ldr	r3, [pc, #100]	@ (8001e30 <SystemClock_Config+0xb8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001dd0:	607b      	str	r3, [r7, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ddc:	2310      	movs	r3, #16
 8001dde:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001de0:	2300      	movs	r3, #0
 8001de2:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de4:	f107 0320 	add.w	r3, r7, #32
 8001de8:	4618      	mov	r0, r3
 8001dea:	f003 fa47 	bl	800527c <HAL_RCC_OscConfig>
 8001dee:	4603      	mov	r3, r0
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d001      	beq.n	8001df8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001df4:	f000 fbdc 	bl	80025b0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df8:	230f      	movs	r3, #15
 8001dfa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001e00:	2300      	movs	r3, #0
 8001e02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001e04:	2300      	movs	r3, #0
 8001e06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001e0c:	f107 030c 	add.w	r3, r7, #12
 8001e10:	2100      	movs	r1, #0
 8001e12:	4618      	mov	r0, r3
 8001e14:	f003 fd5e 	bl	80058d4 <HAL_RCC_ClockConfig>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001e1e:	f000 fbc7 	bl	80025b0 <Error_Handler>
  }
}
 8001e22:	bf00      	nop
 8001e24:	3750      	adds	r7, #80	@ 0x50
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40007000 	.word	0x40007000

08001e34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001e3a:	463b      	mov	r3, r7
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	601a      	str	r2, [r3, #0]
 8001e40:	605a      	str	r2, [r3, #4]
 8001e42:	609a      	str	r2, [r3, #8]
 8001e44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001e46:	4b21      	ldr	r3, [pc, #132]	@ (8001ecc <MX_ADC1_Init+0x98>)
 8001e48:	4a21      	ldr	r2, [pc, #132]	@ (8001ed0 <MX_ADC1_Init+0x9c>)
 8001e4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001e4c:	4b1f      	ldr	r3, [pc, #124]	@ (8001ecc <MX_ADC1_Init+0x98>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001e52:	4b1e      	ldr	r3, [pc, #120]	@ (8001ecc <MX_ADC1_Init+0x98>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001e58:	4b1c      	ldr	r3, [pc, #112]	@ (8001ecc <MX_ADC1_Init+0x98>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001e5e:	4b1b      	ldr	r3, [pc, #108]	@ (8001ecc <MX_ADC1_Init+0x98>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001e64:	4b19      	ldr	r3, [pc, #100]	@ (8001ecc <MX_ADC1_Init+0x98>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001e6c:	4b17      	ldr	r3, [pc, #92]	@ (8001ecc <MX_ADC1_Init+0x98>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001e72:	4b16      	ldr	r3, [pc, #88]	@ (8001ecc <MX_ADC1_Init+0x98>)
 8001e74:	4a17      	ldr	r2, [pc, #92]	@ (8001ed4 <MX_ADC1_Init+0xa0>)
 8001e76:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001e78:	4b14      	ldr	r3, [pc, #80]	@ (8001ecc <MX_ADC1_Init+0x98>)
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001e7e:	4b13      	ldr	r3, [pc, #76]	@ (8001ecc <MX_ADC1_Init+0x98>)
 8001e80:	2201      	movs	r2, #1
 8001e82:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001e84:	4b11      	ldr	r3, [pc, #68]	@ (8001ecc <MX_ADC1_Init+0x98>)
 8001e86:	2200      	movs	r2, #0
 8001e88:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001e8c:	4b0f      	ldr	r3, [pc, #60]	@ (8001ecc <MX_ADC1_Init+0x98>)
 8001e8e:	2201      	movs	r2, #1
 8001e90:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001e92:	480e      	ldr	r0, [pc, #56]	@ (8001ecc <MX_ADC1_Init+0x98>)
 8001e94:	f000 ff62 	bl	8002d5c <HAL_ADC_Init>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d001      	beq.n	8001ea2 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8001e9e:	f000 fb87 	bl	80025b0 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001eae:	463b      	mov	r3, r7
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4806      	ldr	r0, [pc, #24]	@ (8001ecc <MX_ADC1_Init+0x98>)
 8001eb4:	f001 fa9c 	bl	80033f0 <HAL_ADC_ConfigChannel>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8001ebe:	f000 fb77 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001ec2:	bf00      	nop
 8001ec4:	3710      	adds	r7, #16
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
 8001eca:	bf00      	nop
 8001ecc:	2000026c 	.word	0x2000026c
 8001ed0:	40012000 	.word	0x40012000
 8001ed4:	0f000001 	.word	0x0f000001

08001ed8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001edc:	4b12      	ldr	r3, [pc, #72]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001ede:	4a13      	ldr	r2, [pc, #76]	@ (8001f2c <MX_I2C1_Init+0x54>)
 8001ee0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001ee2:	4b11      	ldr	r3, [pc, #68]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001ee4:	4a12      	ldr	r2, [pc, #72]	@ (8001f30 <MX_I2C1_Init+0x58>)
 8001ee6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ee8:	4b0f      	ldr	r3, [pc, #60]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001eea:	2200      	movs	r2, #0
 8001eec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 236;
 8001eee:	4b0e      	ldr	r3, [pc, #56]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001ef0:	22ec      	movs	r2, #236	@ 0xec
 8001ef2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_10BIT;
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001ef6:	f44f 4240 	mov.w	r2, #49152	@ 0xc000
 8001efa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001efc:	4b0a      	ldr	r3, [pc, #40]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001f02:	4b09      	ldr	r3, [pc, #36]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001f04:	2200      	movs	r2, #0
 8001f06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001f08:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001f0e:	4b06      	ldr	r3, [pc, #24]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001f14:	4804      	ldr	r0, [pc, #16]	@ (8001f28 <MX_I2C1_Init+0x50>)
 8001f16:	f002 f8f1 	bl	80040fc <HAL_I2C_Init>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001f20:	f000 fb46 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001f24:	bf00      	nop
 8001f26:	bd80      	pop	{r7, pc}
 8001f28:	200002b4 	.word	0x200002b4
 8001f2c:	40005400 	.word	0x40005400
 8001f30:	000186a0 	.word	0x000186a0

08001f34 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001f38:	4b11      	ldr	r3, [pc, #68]	@ (8001f80 <MX_UART5_Init+0x4c>)
 8001f3a:	4a12      	ldr	r2, [pc, #72]	@ (8001f84 <MX_UART5_Init+0x50>)
 8001f3c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001f3e:	4b10      	ldr	r3, [pc, #64]	@ (8001f80 <MX_UART5_Init+0x4c>)
 8001f40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001f44:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001f46:	4b0e      	ldr	r3, [pc, #56]	@ (8001f80 <MX_UART5_Init+0x4c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001f4c:	4b0c      	ldr	r3, [pc, #48]	@ (8001f80 <MX_UART5_Init+0x4c>)
 8001f4e:	2200      	movs	r2, #0
 8001f50:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001f52:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <MX_UART5_Init+0x4c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001f58:	4b09      	ldr	r3, [pc, #36]	@ (8001f80 <MX_UART5_Init+0x4c>)
 8001f5a:	220c      	movs	r2, #12
 8001f5c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f5e:	4b08      	ldr	r3, [pc, #32]	@ (8001f80 <MX_UART5_Init+0x4c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f64:	4b06      	ldr	r3, [pc, #24]	@ (8001f80 <MX_UART5_Init+0x4c>)
 8001f66:	2200      	movs	r2, #0
 8001f68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f6a:	4805      	ldr	r0, [pc, #20]	@ (8001f80 <MX_UART5_Init+0x4c>)
 8001f6c:	f004 fb2c 	bl	80065c8 <HAL_UART_Init>
 8001f70:	4603      	mov	r3, r0
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d001      	beq.n	8001f7a <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001f76:	f000 fb1b 	bl	80025b0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001f7a:	bf00      	nop
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000308 	.word	0x20000308
 8001f84:	40005000 	.word	0x40005000

08001f88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b08a      	sub	sp, #40	@ 0x28
 8001f8c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f8e:	f107 0314 	add.w	r3, r7, #20
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]
 8001f96:	605a      	str	r2, [r3, #4]
 8001f98:	609a      	str	r2, [r3, #8]
 8001f9a:	60da      	str	r2, [r3, #12]
 8001f9c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	613b      	str	r3, [r7, #16]
 8001fa2:	4b32      	ldr	r3, [pc, #200]	@ (800206c <MX_GPIO_Init+0xe4>)
 8001fa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa6:	4a31      	ldr	r2, [pc, #196]	@ (800206c <MX_GPIO_Init+0xe4>)
 8001fa8:	f043 0301 	orr.w	r3, r3, #1
 8001fac:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fae:	4b2f      	ldr	r3, [pc, #188]	@ (800206c <MX_GPIO_Init+0xe4>)
 8001fb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb2:	f003 0301 	and.w	r3, r3, #1
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001fba:	2300      	movs	r3, #0
 8001fbc:	60fb      	str	r3, [r7, #12]
 8001fbe:	4b2b      	ldr	r3, [pc, #172]	@ (800206c <MX_GPIO_Init+0xe4>)
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc2:	4a2a      	ldr	r2, [pc, #168]	@ (800206c <MX_GPIO_Init+0xe4>)
 8001fc4:	f043 0308 	orr.w	r3, r3, #8
 8001fc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fca:	4b28      	ldr	r3, [pc, #160]	@ (800206c <MX_GPIO_Init+0xe4>)
 8001fcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fce:	f003 0308 	and.w	r3, r3, #8
 8001fd2:	60fb      	str	r3, [r7, #12]
 8001fd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	4b24      	ldr	r3, [pc, #144]	@ (800206c <MX_GPIO_Init+0xe4>)
 8001fdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fde:	4a23      	ldr	r2, [pc, #140]	@ (800206c <MX_GPIO_Init+0xe4>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fe6:	4b21      	ldr	r3, [pc, #132]	@ (800206c <MX_GPIO_Init+0xe4>)
 8001fe8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	60bb      	str	r3, [r7, #8]
 8001ff0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	607b      	str	r3, [r7, #4]
 8001ff6:	4b1d      	ldr	r3, [pc, #116]	@ (800206c <MX_GPIO_Init+0xe4>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffa:	4a1c      	ldr	r2, [pc, #112]	@ (800206c <MX_GPIO_Init+0xe4>)
 8001ffc:	f043 0302 	orr.w	r3, r3, #2
 8002000:	6313      	str	r3, [r2, #48]	@ 0x30
 8002002:	4b1a      	ldr	r3, [pc, #104]	@ (800206c <MX_GPIO_Init+0xe4>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002006:	f003 0302 	and.w	r3, r3, #2
 800200a:	607b      	str	r3, [r7, #4]
 800200c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800200e:	2200      	movs	r2, #0
 8002010:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8002014:	4816      	ldr	r0, [pc, #88]	@ (8002070 <MX_GPIO_Init+0xe8>)
 8002016:	f002 f845 	bl	80040a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800201a:	2301      	movs	r3, #1
 800201c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800201e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8002022:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002028:	f107 0314 	add.w	r3, r7, #20
 800202c:	4619      	mov	r1, r3
 800202e:	4811      	ldr	r0, [pc, #68]	@ (8002074 <MX_GPIO_Init+0xec>)
 8002030:	f001 fd58 	bl	8003ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002034:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
 8002038:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800203a:	2301      	movs	r3, #1
 800203c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800203e:	2300      	movs	r3, #0
 8002040:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002042:	2300      	movs	r3, #0
 8002044:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002046:	f107 0314 	add.w	r3, r7, #20
 800204a:	4619      	mov	r1, r3
 800204c:	4808      	ldr	r0, [pc, #32]	@ (8002070 <MX_GPIO_Init+0xe8>)
 800204e:	f001 fd49 	bl	8003ae4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8002052:	2200      	movs	r2, #0
 8002054:	2100      	movs	r1, #0
 8002056:	2006      	movs	r0, #6
 8002058:	f001 fd00 	bl	8003a5c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 800205c:	2006      	movs	r0, #6
 800205e:	f001 fd29 	bl	8003ab4 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002062:	bf00      	nop
 8002064:	3728      	adds	r7, #40	@ 0x28
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
 800206a:	bf00      	nop
 800206c:	40023800 	.word	0x40023800
 8002070:	40020c00 	.word	0x40020c00
 8002074:	40020000 	.word	0x40020000

08002078 <Task_SensorRead>:

/* USER CODE BEGIN 4 */
void Task_SensorRead(void *pvParameters)
{
 8002078:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800207c:	b094      	sub	sp, #80	@ 0x50
 800207e:	af0c      	add	r7, sp, #48	@ 0x30
 8002080:	61f8      	str	r0, [r7, #28]
    while (1)
    {
	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("Task_SensorRead is running");
 8002082:	489d      	ldr	r0, [pc, #628]	@ (80022f8 <Task_SensorRead+0x280>)
 8002084:	f008 ff7c 	bl	800af80 <SEGGER_SYSVIEW_PrintfHost>
    #endif

        BME280_Measure();
 8002088:	f7ff fd7a 	bl	8001b80 <BME280_Measure>

        SD.ADC_Value = Read_ADC_Value(&hadc1);
 800208c:	489b      	ldr	r0, [pc, #620]	@ (80022fc <Task_SensorRead+0x284>)
 800208e:	f000 fb19 	bl	80026c4 <Read_ADC_Value>
 8002092:	eef0 7a40 	vmov.f32	s15, s0
 8002096:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800209a:	ee17 3a90 	vmov	r3, s15
 800209e:	b29a      	uxth	r2, r3
 80020a0:	4b97      	ldr	r3, [pc, #604]	@ (8002300 <Task_SensorRead+0x288>)
 80020a2:	849a      	strh	r2, [r3, #36]	@ 0x24

        SD.mq135_voltage = ((SD.ADC_Value * 5.0) / 4095.0);
 80020a4:	4b96      	ldr	r3, [pc, #600]	@ (8002300 <Task_SensorRead+0x288>)
 80020a6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7fe fa93 	bl	80005d4 <__aeabi_i2d>
 80020ae:	f04f 0200 	mov.w	r2, #0
 80020b2:	4b94      	ldr	r3, [pc, #592]	@ (8002304 <Task_SensorRead+0x28c>)
 80020b4:	f7fe faf8 	bl	80006a8 <__aeabi_dmul>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	4610      	mov	r0, r2
 80020be:	4619      	mov	r1, r3
 80020c0:	a38b      	add	r3, pc, #556	@ (adr r3, 80022f0 <Task_SensorRead+0x278>)
 80020c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020c6:	f7fe fc19 	bl	80008fc <__aeabi_ddiv>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4610      	mov	r0, r2
 80020d0:	4619      	mov	r1, r3
 80020d2:	f7fe fdc1 	bl	8000c58 <__aeabi_d2f>
 80020d6:	4603      	mov	r3, r0
 80020d8:	4a89      	ldr	r2, [pc, #548]	@ (8002300 <Task_SensorRead+0x288>)
 80020da:	60d3      	str	r3, [r2, #12]
        SD.Rs = ((5.0 - SD.mq135_voltage) / SD.mq135_voltage) * RL;
 80020dc:	4b88      	ldr	r3, [pc, #544]	@ (8002300 <Task_SensorRead+0x288>)
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f7fe fa89 	bl	80005f8 <__aeabi_f2d>
 80020e6:	4602      	mov	r2, r0
 80020e8:	460b      	mov	r3, r1
 80020ea:	f04f 0000 	mov.w	r0, #0
 80020ee:	4985      	ldr	r1, [pc, #532]	@ (8002304 <Task_SensorRead+0x28c>)
 80020f0:	f7fe f922 	bl	8000338 <__aeabi_dsub>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	4614      	mov	r4, r2
 80020fa:	461d      	mov	r5, r3
 80020fc:	4b80      	ldr	r3, [pc, #512]	@ (8002300 <Task_SensorRead+0x288>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	4618      	mov	r0, r3
 8002102:	f7fe fa79 	bl	80005f8 <__aeabi_f2d>
 8002106:	4602      	mov	r2, r0
 8002108:	460b      	mov	r3, r1
 800210a:	4620      	mov	r0, r4
 800210c:	4629      	mov	r1, r5
 800210e:	f7fe fbf5 	bl	80008fc <__aeabi_ddiv>
 8002112:	4602      	mov	r2, r0
 8002114:	460b      	mov	r3, r1
 8002116:	4610      	mov	r0, r2
 8002118:	4619      	mov	r1, r3
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	4b7a      	ldr	r3, [pc, #488]	@ (8002308 <Task_SensorRead+0x290>)
 8002120:	f7fe fac2 	bl	80006a8 <__aeabi_dmul>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4610      	mov	r0, r2
 800212a:	4619      	mov	r1, r3
 800212c:	f7fe fd94 	bl	8000c58 <__aeabi_d2f>
 8002130:	4603      	mov	r3, r0
 8002132:	4a73      	ldr	r2, [pc, #460]	@ (8002300 <Task_SensorRead+0x288>)
 8002134:	6113      	str	r3, [r2, #16]

        SD.Co2     = calculate_ppm(SD.Rs, R0_CO2, A_CO2, B_CO2);
 8002136:	4b72      	ldr	r3, [pc, #456]	@ (8002300 <Task_SensorRead+0x288>)
 8002138:	edd3 7a04 	vldr	s15, [r3, #16]
 800213c:	eddf 1a73 	vldr	s3, [pc, #460]	@ 800230c <Task_SensorRead+0x294>
 8002140:	ed9f 1a73 	vldr	s2, [pc, #460]	@ 8002310 <Task_SensorRead+0x298>
 8002144:	eddf 0a73 	vldr	s1, [pc, #460]	@ 8002314 <Task_SensorRead+0x29c>
 8002148:	eeb0 0a67 	vmov.f32	s0, s15
 800214c:	f000 f9e0 	bl	8002510 <calculate_ppm>
 8002150:	eef0 7a40 	vmov.f32	s15, s0
 8002154:	4b6a      	ldr	r3, [pc, #424]	@ (8002300 <Task_SensorRead+0x288>)
 8002156:	edc3 7a05 	vstr	s15, [r3, #20]
        SD.NH3     = calculate_ppm(SD.Rs, R0_NH3, A_NH3, B_NH3);
 800215a:	4b69      	ldr	r3, [pc, #420]	@ (8002300 <Task_SensorRead+0x288>)
 800215c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002160:	eddf 1a6d 	vldr	s3, [pc, #436]	@ 8002318 <Task_SensorRead+0x2a0>
 8002164:	ed9f 1a6d 	vldr	s2, [pc, #436]	@ 800231c <Task_SensorRead+0x2a4>
 8002168:	eddf 0a6d 	vldr	s1, [pc, #436]	@ 8002320 <Task_SensorRead+0x2a8>
 800216c:	eeb0 0a67 	vmov.f32	s0, s15
 8002170:	f000 f9ce 	bl	8002510 <calculate_ppm>
 8002174:	eef0 7a40 	vmov.f32	s15, s0
 8002178:	4b61      	ldr	r3, [pc, #388]	@ (8002300 <Task_SensorRead+0x288>)
 800217a:	edc3 7a06 	vstr	s15, [r3, #24]
        SD.Ethanol = calculate_ppm(SD.Rs, R0_Ethanol, A_Ethanol, B_Ethanol);
 800217e:	4b60      	ldr	r3, [pc, #384]	@ (8002300 <Task_SensorRead+0x288>)
 8002180:	edd3 7a04 	vldr	s15, [r3, #16]
 8002184:	eddf 1a67 	vldr	s3, [pc, #412]	@ 8002324 <Task_SensorRead+0x2ac>
 8002188:	ed9f 1a67 	vldr	s2, [pc, #412]	@ 8002328 <Task_SensorRead+0x2b0>
 800218c:	eef0 0a0e 	vmov.f32	s1, #14	@ 0x40700000  3.750
 8002190:	eeb0 0a67 	vmov.f32	s0, s15
 8002194:	f000 f9bc 	bl	8002510 <calculate_ppm>
 8002198:	eef0 7a40 	vmov.f32	s15, s0
 800219c:	4b58      	ldr	r3, [pc, #352]	@ (8002300 <Task_SensorRead+0x288>)
 800219e:	edc3 7a07 	vstr	s15, [r3, #28]
        SD.AQI = ((SD.Co2 / 10) * 0.5) + ((SD.NH3 * 100) * 0.25) + ((SD.Ethanol * 100) * 0.25);
 80021a2:	4b57      	ldr	r3, [pc, #348]	@ (8002300 <Task_SensorRead+0x288>)
 80021a4:	edd3 7a05 	vldr	s15, [r3, #20]
 80021a8:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 80021ac:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80021b0:	ee16 0a90 	vmov	r0, s13
 80021b4:	f7fe fa20 	bl	80005f8 <__aeabi_f2d>
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	4b5b      	ldr	r3, [pc, #364]	@ (800232c <Task_SensorRead+0x2b4>)
 80021be:	f7fe fa73 	bl	80006a8 <__aeabi_dmul>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4614      	mov	r4, r2
 80021c8:	461d      	mov	r5, r3
 80021ca:	4b4d      	ldr	r3, [pc, #308]	@ (8002300 <Task_SensorRead+0x288>)
 80021cc:	edd3 7a06 	vldr	s15, [r3, #24]
 80021d0:	ed9f 7a57 	vldr	s14, [pc, #348]	@ 8002330 <Task_SensorRead+0x2b8>
 80021d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80021d8:	ee17 0a90 	vmov	r0, s15
 80021dc:	f7fe fa0c 	bl	80005f8 <__aeabi_f2d>
 80021e0:	f04f 0200 	mov.w	r2, #0
 80021e4:	4b53      	ldr	r3, [pc, #332]	@ (8002334 <Task_SensorRead+0x2bc>)
 80021e6:	f7fe fa5f 	bl	80006a8 <__aeabi_dmul>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	4620      	mov	r0, r4
 80021f0:	4629      	mov	r1, r5
 80021f2:	f7fe f8a3 	bl	800033c <__adddf3>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4614      	mov	r4, r2
 80021fc:	461d      	mov	r5, r3
 80021fe:	4b40      	ldr	r3, [pc, #256]	@ (8002300 <Task_SensorRead+0x288>)
 8002200:	edd3 7a07 	vldr	s15, [r3, #28]
 8002204:	ed9f 7a4a 	vldr	s14, [pc, #296]	@ 8002330 <Task_SensorRead+0x2b8>
 8002208:	ee67 7a87 	vmul.f32	s15, s15, s14
 800220c:	ee17 0a90 	vmov	r0, s15
 8002210:	f7fe f9f2 	bl	80005f8 <__aeabi_f2d>
 8002214:	f04f 0200 	mov.w	r2, #0
 8002218:	4b46      	ldr	r3, [pc, #280]	@ (8002334 <Task_SensorRead+0x2bc>)
 800221a:	f7fe fa45 	bl	80006a8 <__aeabi_dmul>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4620      	mov	r0, r4
 8002224:	4629      	mov	r1, r5
 8002226:	f7fe f889 	bl	800033c <__adddf3>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4610      	mov	r0, r2
 8002230:	4619      	mov	r1, r3
 8002232:	f7fe fd11 	bl	8000c58 <__aeabi_d2f>
 8002236:	4603      	mov	r3, r0
 8002238:	4a31      	ldr	r2, [pc, #196]	@ (8002300 <Task_SensorRead+0x288>)
 800223a:	6213      	str	r3, [r2, #32]

	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("Sensor Read Collected");
 800223c:	483e      	ldr	r0, [pc, #248]	@ (8002338 <Task_SensorRead+0x2c0>)
 800223e:	f008 fe9f 	bl	800af80 <SEGGER_SYSVIEW_PrintfHost>
	#endif

        Write_SensorData(&SD);
 8002242:	482f      	ldr	r0, [pc, #188]	@ (8002300 <Task_SensorRead+0x288>)
 8002244:	f000 fa74 	bl	8002730 <Write_SensorData>

	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("T=%.2f,P=%2f,H=.2f,Co2=%.2f,NH3=%2f,Eth=.2f,AQI=%.2f",SD.Temperature,SD.Pressure,SD.Humidity,SD.Co2,SD.NH3,SD.Ethanol,SD.AQI);
 8002248:	4b2d      	ldr	r3, [pc, #180]	@ (8002300 <Task_SensorRead+0x288>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe f9d3 	bl	80005f8 <__aeabi_f2d>
 8002252:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8002256:	4b2a      	ldr	r3, [pc, #168]	@ (8002300 <Task_SensorRead+0x288>)
 8002258:	685b      	ldr	r3, [r3, #4]
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe f9cc 	bl	80005f8 <__aeabi_f2d>
 8002260:	4680      	mov	r8, r0
 8002262:	4689      	mov	r9, r1
 8002264:	4b26      	ldr	r3, [pc, #152]	@ (8002300 <Task_SensorRead+0x288>)
 8002266:	689b      	ldr	r3, [r3, #8]
 8002268:	4618      	mov	r0, r3
 800226a:	f7fe f9c5 	bl	80005f8 <__aeabi_f2d>
 800226e:	4682      	mov	sl, r0
 8002270:	468b      	mov	fp, r1
 8002272:	4b23      	ldr	r3, [pc, #140]	@ (8002300 <Task_SensorRead+0x288>)
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f9be 	bl	80005f8 <__aeabi_f2d>
 800227c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8002280:	4b1f      	ldr	r3, [pc, #124]	@ (8002300 <Task_SensorRead+0x288>)
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	4618      	mov	r0, r3
 8002286:	f7fe f9b7 	bl	80005f8 <__aeabi_f2d>
 800228a:	e9c7 0100 	strd	r0, r1, [r7]
 800228e:	4b1c      	ldr	r3, [pc, #112]	@ (8002300 <Task_SensorRead+0x288>)
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f9b0 	bl	80005f8 <__aeabi_f2d>
 8002298:	4604      	mov	r4, r0
 800229a:	460d      	mov	r5, r1
 800229c:	4b18      	ldr	r3, [pc, #96]	@ (8002300 <Task_SensorRead+0x288>)
 800229e:	6a1b      	ldr	r3, [r3, #32]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe f9a9 	bl	80005f8 <__aeabi_f2d>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
 80022ae:	e9cd 4508 	strd	r4, r5, [sp, #32]
 80022b2:	ed97 7b00 	vldr	d7, [r7]
 80022b6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80022ba:	ed97 7b02 	vldr	d7, [r7, #8]
 80022be:	ed8d 7b04 	vstr	d7, [sp, #16]
 80022c2:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80022c6:	e9cd 8900 	strd	r8, r9, [sp]
 80022ca:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80022ce:	481b      	ldr	r0, [pc, #108]	@ (800233c <Task_SensorRead+0x2c4>)
 80022d0:	f008 fe56 	bl	800af80 <SEGGER_SYSVIEW_PrintfHost>
	#endif

	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("Task_SensorRead Complete Before Delay");
 80022d4:	481a      	ldr	r0, [pc, #104]	@ (8002340 <Task_SensorRead+0x2c8>)
 80022d6:	f008 fe53 	bl	800af80 <SEGGER_SYSVIEW_PrintfHost>
	#endif


        vTaskDelay(500);
 80022da:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80022de:	f005 fd03 	bl	8007ce8 <vTaskDelay>
	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("Task_SensorRead Complete After Delay");
 80022e2:	4818      	ldr	r0, [pc, #96]	@ (8002344 <Task_SensorRead+0x2cc>)
 80022e4:	f008 fe4c 	bl	800af80 <SEGGER_SYSVIEW_PrintfHost>
        SEGGER_SYSVIEW_PrintfHost("Task_SensorRead is running");
 80022e8:	bf00      	nop
 80022ea:	e6ca      	b.n	8002082 <Task_SensorRead+0xa>
 80022ec:	f3af 8000 	nop.w
 80022f0:	00000000 	.word	0x00000000
 80022f4:	40affe00 	.word	0x40affe00
 80022f8:	0800ec54 	.word	0x0800ec54
 80022fc:	2000026c 	.word	0x2000026c
 8002300:	2000020c 	.word	0x2000020c
 8002304:	40140000 	.word	0x40140000
 8002308:	40240000 	.word	0x40240000
 800230c:	c03137de 	.word	0xc03137de
 8002310:	42e93442 	.word	0x42e93442
 8002314:	423e0000 	.word	0x423e0000
 8002318:	c01e45a2 	.word	0xc01e45a2
 800231c:	42cc6666 	.word	0x42cc6666
 8002320:	3fee147b 	.word	0x3fee147b
 8002324:	c04b851f 	.word	0xc04b851f
 8002328:	429a828f 	.word	0x429a828f
 800232c:	3fe00000 	.word	0x3fe00000
 8002330:	42c80000 	.word	0x42c80000
 8002334:	3fd00000 	.word	0x3fd00000
 8002338:	0800ec70 	.word	0x0800ec70
 800233c:	0800ec88 	.word	0x0800ec88
 8002340:	0800ecc0 	.word	0x0800ecc0
 8002344:	0800ece8 	.word	0x0800ece8

08002348 <Task_UARTSend>:
	#endif
    }
}
*/
void Task_UARTSend(void *pvParameters)
{
 8002348:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800234c:	b0a2      	sub	sp, #136	@ 0x88
 800234e:	af0e      	add	r7, sp, #56	@ 0x38
 8002350:	61f8      	str	r0, [r7, #28]
    while (1)
    {
	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("Task_UARTSend Running");
 8002352:	4849      	ldr	r0, [pc, #292]	@ (8002478 <Task_UARTSend+0x130>)
 8002354:	f008 fe14 	bl	800af80 <SEGGER_SYSVIEW_PrintfHost>
	#endif

        Sensordata_t tempData;
        Read_SensorData(&tempData);
 8002358:	f107 0320 	add.w	r3, r7, #32
 800235c:	4618      	mov	r0, r3
 800235e:	f000 fa0d 	bl	800277c <Read_SensorData>

        // Format sensor data as CSV
        snprintf(uartBuff, sizeof(uartBuff), "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
                 tempData.Temperature, tempData.Pressure, tempData.Humidity,
 8002362:	6a3b      	ldr	r3, [r7, #32]
        snprintf(uartBuff, sizeof(uartBuff), "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f947 	bl	80005f8 <__aeabi_f2d>
 800236a:	4680      	mov	r8, r0
 800236c:	4689      	mov	r9, r1
                 tempData.Temperature, tempData.Pressure, tempData.Humidity,
 800236e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        snprintf(uartBuff, sizeof(uartBuff), "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8002370:	4618      	mov	r0, r3
 8002372:	f7fe f941 	bl	80005f8 <__aeabi_f2d>
 8002376:	4682      	mov	sl, r0
 8002378:	468b      	mov	fp, r1
                 tempData.Temperature, tempData.Pressure, tempData.Humidity,
 800237a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
        snprintf(uartBuff, sizeof(uartBuff), "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe f93b 	bl	80005f8 <__aeabi_f2d>
 8002382:	e9c7 0104 	strd	r0, r1, [r7, #16]
                 tempData.Co2, tempData.NH3, tempData.Ethanol, tempData.AQI);
 8002386:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
        snprintf(uartBuff, sizeof(uartBuff), "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8002388:	4618      	mov	r0, r3
 800238a:	f7fe f935 	bl	80005f8 <__aeabi_f2d>
 800238e:	e9c7 0102 	strd	r0, r1, [r7, #8]
                 tempData.Co2, tempData.NH3, tempData.Ethanol, tempData.AQI);
 8002392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
        snprintf(uartBuff, sizeof(uartBuff), "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 8002394:	4618      	mov	r0, r3
 8002396:	f7fe f92f 	bl	80005f8 <__aeabi_f2d>
 800239a:	e9c7 0100 	strd	r0, r1, [r7]
                 tempData.Co2, tempData.NH3, tempData.Ethanol, tempData.AQI);
 800239e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
        snprintf(uartBuff, sizeof(uartBuff), "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 80023a0:	4618      	mov	r0, r3
 80023a2:	f7fe f929 	bl	80005f8 <__aeabi_f2d>
 80023a6:	4604      	mov	r4, r0
 80023a8:	460d      	mov	r5, r1
                 tempData.Co2, tempData.NH3, tempData.Ethanol, tempData.AQI);
 80023aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
        snprintf(uartBuff, sizeof(uartBuff), "@%.2f,%.2f,%.2f,%.2f,%.2f,%.2f,%.2f",
 80023ac:	4618      	mov	r0, r3
 80023ae:	f7fe f923 	bl	80005f8 <__aeabi_f2d>
 80023b2:	4602      	mov	r2, r0
 80023b4:	460b      	mov	r3, r1
 80023b6:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80023ba:	e9cd 450a 	strd	r4, r5, [sp, #40]	@ 0x28
 80023be:	ed97 7b00 	vldr	d7, [r7]
 80023c2:	ed8d 7b08 	vstr	d7, [sp, #32]
 80023c6:	ed97 7b02 	vldr	d7, [r7, #8]
 80023ca:	ed8d 7b06 	vstr	d7, [sp, #24]
 80023ce:	ed97 7b04 	vldr	d7, [r7, #16]
 80023d2:	ed8d 7b04 	vstr	d7, [sp, #16]
 80023d6:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80023da:	e9cd 8900 	strd	r8, r9, [sp]
 80023de:	4a27      	ldr	r2, [pc, #156]	@ (800247c <Task_UARTSend+0x134>)
 80023e0:	2164      	movs	r1, #100	@ 0x64
 80023e2:	4827      	ldr	r0, [pc, #156]	@ (8002480 <Task_UARTSend+0x138>)
 80023e4:	f009 fb66 	bl	800bab4 <sniprintf>

        uint8_t crc = Calculate_CRC8((uint8_t *)uartBuff, strlen(uartBuff)); // Compute CRC
 80023e8:	4825      	ldr	r0, [pc, #148]	@ (8002480 <Task_UARTSend+0x138>)
 80023ea:	f7fd ff99 	bl	8000320 <strlen>
 80023ee:	4603      	mov	r3, r0
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	4619      	mov	r1, r3
 80023f4:	4822      	ldr	r0, [pc, #136]	@ (8002480 <Task_UARTSend+0x138>)
 80023f6:	f000 f84d 	bl	8002494 <Calculate_CRC8>
 80023fa:	4603      	mov	r3, r0
 80023fc:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
        snprintf(uartBuff + strlen(uartBuff), sizeof(uartBuff) - strlen(uartBuff), ",%02X,@", crc);
 8002400:	481f      	ldr	r0, [pc, #124]	@ (8002480 <Task_UARTSend+0x138>)
 8002402:	f7fd ff8d 	bl	8000320 <strlen>
 8002406:	4603      	mov	r3, r0
 8002408:	4a1d      	ldr	r2, [pc, #116]	@ (8002480 <Task_UARTSend+0x138>)
 800240a:	189c      	adds	r4, r3, r2
 800240c:	481c      	ldr	r0, [pc, #112]	@ (8002480 <Task_UARTSend+0x138>)
 800240e:	f7fd ff87 	bl	8000320 <strlen>
 8002412:	4603      	mov	r3, r0
 8002414:	f1c3 0164 	rsb	r1, r3, #100	@ 0x64
 8002418:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800241c:	4a19      	ldr	r2, [pc, #100]	@ (8002484 <Task_UARTSend+0x13c>)
 800241e:	4620      	mov	r0, r4
 8002420:	f009 fb48 	bl	800bab4 <sniprintf>

        UART_Transmit_Service((uint8_t *)uartBuff, strlen(uartBuff));
 8002424:	4816      	ldr	r0, [pc, #88]	@ (8002480 <Task_UARTSend+0x138>)
 8002426:	f7fd ff7b 	bl	8000320 <strlen>
 800242a:	4603      	mov	r3, r0
 800242c:	b29b      	uxth	r3, r3
 800242e:	4619      	mov	r1, r3
 8002430:	4813      	ldr	r0, [pc, #76]	@ (8002480 <Task_UARTSend+0x138>)
 8002432:	f000 f8d1 	bl	80025d8 <UART_Transmit_Service>

        uint8_t rxBuffer[4];
        if (!UART_Receive_Service(rxBuffer, sizeof(rxBuffer)))
 8002436:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800243a:	2104      	movs	r1, #4
 800243c:	4618      	mov	r0, r3
 800243e:	f000 f8eb 	bl	8002618 <UART_Receive_Service>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10b      	bne.n	8002460 <Task_UARTSend+0x118>
        {
            SEGGER_SYSVIEW_PrintfHost("Retrying UART Transmission...");
 8002448:	480f      	ldr	r0, [pc, #60]	@ (8002488 <Task_UARTSend+0x140>)
 800244a:	f008 fd99 	bl	800af80 <SEGGER_SYSVIEW_PrintfHost>
            UART_Transmit_Service((uint8_t *)uartBuff, strlen(uartBuff));
 800244e:	480c      	ldr	r0, [pc, #48]	@ (8002480 <Task_UARTSend+0x138>)
 8002450:	f7fd ff66 	bl	8000320 <strlen>
 8002454:	4603      	mov	r3, r0
 8002456:	b29b      	uxth	r3, r3
 8002458:	4619      	mov	r1, r3
 800245a:	4809      	ldr	r0, [pc, #36]	@ (8002480 <Task_UARTSend+0x138>)
 800245c:	f000 f8bc 	bl	80025d8 <UART_Transmit_Service>
        }

	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("Task_UARTSend Complete Before Delay");
 8002460:	480a      	ldr	r0, [pc, #40]	@ (800248c <Task_UARTSend+0x144>)
 8002462:	f008 fd8d 	bl	800af80 <SEGGER_SYSVIEW_PrintfHost>
	#endif

        vTaskDelay(1000);
 8002466:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800246a:	f005 fc3d 	bl	8007ce8 <vTaskDelay>

	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("Task_UARTSend Complete After Delay");
 800246e:	4808      	ldr	r0, [pc, #32]	@ (8002490 <Task_UARTSend+0x148>)
 8002470:	f008 fd86 	bl	800af80 <SEGGER_SYSVIEW_PrintfHost>
    {
 8002474:	e76d      	b.n	8002352 <Task_UARTSend+0xa>
 8002476:	bf00      	nop
 8002478:	0800ed10 	.word	0x0800ed10
 800247c:	0800ed28 	.word	0x0800ed28
 8002480:	20000384 	.word	0x20000384
 8002484:	0800ed4c 	.word	0x0800ed4c
 8002488:	0800ed54 	.word	0x0800ed54
 800248c:	0800ed74 	.word	0x0800ed74
 8002490:	0800ed98 	.word	0x0800ed98

08002494 <Calculate_CRC8>:
        lastPressTime = HAL_GetTick();
    }
}

uint8_t Calculate_CRC8(const uint8_t *data, uint8_t len)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
 800249c:	460b      	mov	r3, r1
 800249e:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = CRC8_INIT;
 80024a0:	23ff      	movs	r3, #255	@ 0xff
 80024a2:	73fb      	strb	r3, [r7, #15]

    for (uint8_t i = 0; i < len; i++)
 80024a4:	2300      	movs	r3, #0
 80024a6:	73bb      	strb	r3, [r7, #14]
 80024a8:	e021      	b.n	80024ee <Calculate_CRC8+0x5a>
    {
        crc ^= data[i];  // XOR with input byte
 80024aa:	7bbb      	ldrb	r3, [r7, #14]
 80024ac:	687a      	ldr	r2, [r7, #4]
 80024ae:	4413      	add	r3, r2
 80024b0:	781a      	ldrb	r2, [r3, #0]
 80024b2:	7bfb      	ldrb	r3, [r7, #15]
 80024b4:	4053      	eors	r3, r2
 80024b6:	73fb      	strb	r3, [r7, #15]

        for (uint8_t j = 0; j < 8; j++)
 80024b8:	2300      	movs	r3, #0
 80024ba:	737b      	strb	r3, [r7, #13]
 80024bc:	e011      	b.n	80024e2 <Calculate_CRC8+0x4e>
        {  // Process each bit
            if (crc & 0x80)  // If MSB is 1
 80024be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	da07      	bge.n	80024d6 <Calculate_CRC8+0x42>
                crc = (crc << 1) ^ CRC8_POLYNOMIAL;
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	b25b      	sxtb	r3, r3
 80024cc:	f083 0307 	eor.w	r3, r3, #7
 80024d0:	b25b      	sxtb	r3, r3
 80024d2:	73fb      	strb	r3, [r7, #15]
 80024d4:	e002      	b.n	80024dc <Calculate_CRC8+0x48>
            else
                crc = (crc << 1);
 80024d6:	7bfb      	ldrb	r3, [r7, #15]
 80024d8:	005b      	lsls	r3, r3, #1
 80024da:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++)
 80024dc:	7b7b      	ldrb	r3, [r7, #13]
 80024de:	3301      	adds	r3, #1
 80024e0:	737b      	strb	r3, [r7, #13]
 80024e2:	7b7b      	ldrb	r3, [r7, #13]
 80024e4:	2b07      	cmp	r3, #7
 80024e6:	d9ea      	bls.n	80024be <Calculate_CRC8+0x2a>
    for (uint8_t i = 0; i < len; i++)
 80024e8:	7bbb      	ldrb	r3, [r7, #14]
 80024ea:	3301      	adds	r3, #1
 80024ec:	73bb      	strb	r3, [r7, #14]
 80024ee:	7bba      	ldrb	r2, [r7, #14]
 80024f0:	78fb      	ldrb	r3, [r7, #3]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d3d9      	bcc.n	80024aa <Calculate_CRC8+0x16>
        }
    }
	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("CRC = %d",crc);
 80024f6:	7bfb      	ldrb	r3, [r7, #15]
 80024f8:	4619      	mov	r1, r3
 80024fa:	4804      	ldr	r0, [pc, #16]	@ (800250c <Calculate_CRC8+0x78>)
 80024fc:	f008 fd40 	bl	800af80 <SEGGER_SYSVIEW_PrintfHost>
	#endif

    return crc;  // Return final CRC
 8002500:	7bfb      	ldrb	r3, [r7, #15]
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}
 800250a:	bf00      	nop
 800250c:	0800edbc 	.word	0x0800edbc

08002510 <calculate_ppm>:

float calculate_ppm(float Rs, float R0, float A, float B)
{
 8002510:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002514:	b084      	sub	sp, #16
 8002516:	af00      	add	r7, sp, #0
 8002518:	ed87 0a03 	vstr	s0, [r7, #12]
 800251c:	edc7 0a02 	vstr	s1, [r7, #8]
 8002520:	ed87 1a01 	vstr	s2, [r7, #4]
 8002524:	edc7 1a00 	vstr	s3, [r7]
    return A * pow((Rs / R0), B);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7fe f865 	bl	80005f8 <__aeabi_f2d>
 800252e:	4604      	mov	r4, r0
 8002530:	460d      	mov	r5, r1
 8002532:	ed97 7a03 	vldr	s14, [r7, #12]
 8002536:	edd7 7a02 	vldr	s15, [r7, #8]
 800253a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800253e:	ee16 0a90 	vmov	r0, s13
 8002542:	f7fe f859 	bl	80005f8 <__aeabi_f2d>
 8002546:	4680      	mov	r8, r0
 8002548:	4689      	mov	r9, r1
 800254a:	6838      	ldr	r0, [r7, #0]
 800254c:	f7fe f854 	bl	80005f8 <__aeabi_f2d>
 8002550:	4602      	mov	r2, r0
 8002552:	460b      	mov	r3, r1
 8002554:	ec43 2b11 	vmov	d1, r2, r3
 8002558:	ec49 8b10 	vmov	d0, r8, r9
 800255c:	f00b fbea 	bl	800dd34 <pow>
 8002560:	ec53 2b10 	vmov	r2, r3, d0
 8002564:	4620      	mov	r0, r4
 8002566:	4629      	mov	r1, r5
 8002568:	f7fe f89e 	bl	80006a8 <__aeabi_dmul>
 800256c:	4602      	mov	r2, r0
 800256e:	460b      	mov	r3, r1
 8002570:	4610      	mov	r0, r2
 8002572:	4619      	mov	r1, r3
 8002574:	f7fe fb70 	bl	8000c58 <__aeabi_d2f>
 8002578:	4603      	mov	r3, r0
 800257a:	ee07 3a90 	vmov	s15, r3
}
 800257e:	eeb0 0a67 	vmov.f32	s0, s15
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
	...

0800258c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	4a04      	ldr	r2, [pc, #16]	@ (80025ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d101      	bne.n	80025a2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800259e:	f000 fb99 	bl	8002cd4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */


  /* USER CODE END Callback 1 */
}
 80025a2:	bf00      	nop
 80025a4:	3708      	adds	r7, #8
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}
 80025aa:	bf00      	nop
 80025ac:	40010000 	.word	0x40010000

080025b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80025b0:	b480      	push	{r7}
 80025b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80025b4:	b672      	cpsid	i
}
 80025b6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80025b8:	bf00      	nop
 80025ba:	e7fd      	b.n	80025b8 <Error_Handler+0x8>

080025bc <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
 80025c4:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
	SEGGER_SYSVIEW_PrintfHost("Assertion Failed:file %s on line %d\r\n", file, line);
 80025c6:	683a      	ldr	r2, [r7, #0]
 80025c8:	6879      	ldr	r1, [r7, #4]
 80025ca:	4802      	ldr	r0, [pc, #8]	@ (80025d4 <assert_failed+0x18>)
 80025cc:	f008 fcd8 	bl	800af80 <SEGGER_SYSVIEW_PrintfHost>
	while(1);
 80025d0:	bf00      	nop
 80025d2:	e7fd      	b.n	80025d0 <assert_failed+0x14>
 80025d4:	0800edc8 	.word	0x0800edc8

080025d8 <UART_Transmit_Service>:
extern SemaphoreHandle_t SensorDataMutex;
extern Sensordata_t SensorData;

// 🔹 **Service API for UART Transmission**
void UART_Transmit_Service( uint8_t *data, uint16_t len)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
 80025e0:	460b      	mov	r3, r1
 80025e2:	807b      	strh	r3, [r7, #2]
    if (HAL_UART_Transmit(&huart5, data, len, 1000) != HAL_OK)
 80025e4:	887a      	ldrh	r2, [r7, #2]
 80025e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80025ea:	6879      	ldr	r1, [r7, #4]
 80025ec:	4807      	ldr	r0, [pc, #28]	@ (800260c <UART_Transmit_Service+0x34>)
 80025ee:	f004 f8bf 	bl	8006770 <HAL_UART_Transmit>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d002      	beq.n	80025fe <UART_Transmit_Service+0x26>

    {
        SEGGER_SYSVIEW_PrintfHost("UART Transmission Failed");
 80025f8:	4805      	ldr	r0, [pc, #20]	@ (8002610 <UART_Transmit_Service+0x38>)
 80025fa:	f008 fcc1 	bl	800af80 <SEGGER_SYSVIEW_PrintfHost>
    }
	#ifdef DEBUG
        SEGGER_SYSVIEW_PrintfHost("UART Data Sent Successfully");
 80025fe:	4805      	ldr	r0, [pc, #20]	@ (8002614 <UART_Transmit_Service+0x3c>)
 8002600:	f008 fcbe 	bl	800af80 <SEGGER_SYSVIEW_PrintfHost>
	#endif
}
 8002604:	bf00      	nop
 8002606:	3708      	adds	r7, #8
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	20000308 	.word	0x20000308
 8002610:	0800edf0 	.word	0x0800edf0
 8002614:	0800ee0c 	.word	0x0800ee0c

08002618 <UART_Receive_Service>:

// 🔹 **Service API for UART Reception**
uint8_t UART_Receive_Service(uint8_t *rxBuffer, uint16_t len)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b086      	sub	sp, #24
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
 8002620:	460b      	mov	r3, r1
 8002622:	807b      	strh	r3, [r7, #2]
    for (uint8_t attempt = 0; attempt < 3; attempt++)  // Retry up to 3 times
 8002624:	2300      	movs	r3, #0
 8002626:	75fb      	strb	r3, [r7, #23]
 8002628:	e037      	b.n	800269a <UART_Receive_Service+0x82>
    {
        // Receive Data from ESP32
        if (HAL_UART_Receive(&huart5, rxBuffer, len, 50) == HAL_OK)
 800262a:	887a      	ldrh	r2, [r7, #2]
 800262c:	2332      	movs	r3, #50	@ 0x32
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	481f      	ldr	r0, [pc, #124]	@ (80026b0 <UART_Receive_Service+0x98>)
 8002632:	f004 f928 	bl	8006886 <HAL_UART_Receive>
 8002636:	4603      	mov	r3, r0
 8002638:	2b00      	cmp	r3, #0
 800263a:	d12b      	bne.n	8002694 <UART_Receive_Service+0x7c>
        {
            SEGGER_SYSVIEW_PrintfHost("Data Received from ESP32");
 800263c:	481d      	ldr	r0, [pc, #116]	@ (80026b4 <UART_Receive_Service+0x9c>)
 800263e:	f008 fc9f 	bl	800af80 <SEGGER_SYSVIEW_PrintfHost>

            // Send "ACK" to ESP32
            const char *ackMsg = "ACK";
 8002642:	4b1d      	ldr	r3, [pc, #116]	@ (80026b8 <UART_Receive_Service+0xa0>)
 8002644:	613b      	str	r3, [r7, #16]
            HAL_UART_Transmit(&huart5, (uint8_t *)ackMsg, strlen(ackMsg), HAL_MAX_DELAY);
 8002646:	6938      	ldr	r0, [r7, #16]
 8002648:	f7fd fe6a 	bl	8000320 <strlen>
 800264c:	4603      	mov	r3, r0
 800264e:	b29a      	uxth	r2, r3
 8002650:	f04f 33ff 	mov.w	r3, #4294967295
 8002654:	6939      	ldr	r1, [r7, #16]
 8002656:	4816      	ldr	r0, [pc, #88]	@ (80026b0 <UART_Receive_Service+0x98>)
 8002658:	f004 f88a 	bl	8006770 <HAL_UART_Transmit>

            // Wait for "ACK" Confirmation from ESP32 (Max 100ms timeout)
            uint8_t ackBuffer[4] = {0};
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
            if (HAL_UART_Receive(&huart5, ackBuffer, 3, 100) == HAL_OK)
 8002660:	f107 010c 	add.w	r1, r7, #12
 8002664:	2364      	movs	r3, #100	@ 0x64
 8002666:	2203      	movs	r2, #3
 8002668:	4811      	ldr	r0, [pc, #68]	@ (80026b0 <UART_Receive_Service+0x98>)
 800266a:	f004 f90c 	bl	8006886 <HAL_UART_Receive>
 800266e:	4603      	mov	r3, r0
 8002670:	2b00      	cmp	r3, #0
 8002672:	d10f      	bne.n	8002694 <UART_Receive_Service+0x7c>
            {
                ackBuffer[3] = '\0';  // Null-terminate for safety
 8002674:	2300      	movs	r3, #0
 8002676:	73fb      	strb	r3, [r7, #15]
                if (strcmp((char *)ackBuffer, "ACK") == 0)
 8002678:	f107 030c 	add.w	r3, r7, #12
 800267c:	490e      	ldr	r1, [pc, #56]	@ (80026b8 <UART_Receive_Service+0xa0>)
 800267e:	4618      	mov	r0, r3
 8002680:	f7fd fdf0 	bl	8000264 <strcmp>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	d104      	bne.n	8002694 <UART_Receive_Service+0x7c>
                {
                    SEGGER_SYSVIEW_PrintfHost("ESP32 ACK Received: Sending Next Data");
 800268a:	480c      	ldr	r0, [pc, #48]	@ (80026bc <UART_Receive_Service+0xa4>)
 800268c:	f008 fc78 	bl	800af80 <SEGGER_SYSVIEW_PrintfHost>
                    return 1; // Success, move to next data
 8002690:	2301      	movs	r3, #1
 8002692:	e009      	b.n	80026a8 <UART_Receive_Service+0x90>
    for (uint8_t attempt = 0; attempt < 3; attempt++)  // Retry up to 3 times
 8002694:	7dfb      	ldrb	r3, [r7, #23]
 8002696:	3301      	adds	r3, #1
 8002698:	75fb      	strb	r3, [r7, #23]
 800269a:	7dfb      	ldrb	r3, [r7, #23]
 800269c:	2b02      	cmp	r3, #2
 800269e:	d9c4      	bls.n	800262a <UART_Receive_Service+0x12>
            //SEGGER_SYSVIEW_PrintfHost("UART Transmitted Successfully");
        }
    }

    //SEGGER_SYSVIEW_PrintfHost("Failed to Receive ACK After 3 Attempts");
    SEGGER_SYSVIEW_PrintfHost("UART Transmitted Successfully");
 80026a0:	4807      	ldr	r0, [pc, #28]	@ (80026c0 <UART_Receive_Service+0xa8>)
 80026a2:	f008 fc6d 	bl	800af80 <SEGGER_SYSVIEW_PrintfHost>

    return 0; // Final Failure
 80026a6:	2300      	movs	r3, #0
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	20000308 	.word	0x20000308
 80026b4:	0800ee28 	.word	0x0800ee28
 80026b8:	0800ee44 	.word	0x0800ee44
 80026bc:	0800ee48 	.word	0x0800ee48
 80026c0:	0800ee70 	.word	0x0800ee70

080026c4 <Read_ADC_Value>:



// 🔹 **Service API for ADC Read**
float Read_ADC_Value(ADC_HandleTypeDef *hadc)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b084      	sub	sp, #16
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
    volatile uint32_t adcSum = 0;
 80026cc:	2300      	movs	r3, #0
 80026ce:	60bb      	str	r3, [r7, #8]
    const uint8_t numSamples = 10;
 80026d0:	230a      	movs	r3, #10
 80026d2:	73bb      	strb	r3, [r7, #14]

    for (uint8_t i = 0; i < numSamples; i++)
 80026d4:	2300      	movs	r3, #0
 80026d6:	73fb      	strb	r3, [r7, #15]
 80026d8:	e019      	b.n	800270e <Read_ADC_Value+0x4a>
    {
        HAL_ADC_Start(hadc);
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f000 fcaa 	bl	8003034 <HAL_ADC_Start>
        if (HAL_ADC_PollForConversion(hadc, 10) == HAL_OK)
 80026e0:	210a      	movs	r1, #10
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	f000 fdec 	bl	80032c0 <HAL_ADC_PollForConversion>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d106      	bne.n	80026fc <Read_ADC_Value+0x38>
        {
            adcSum += HAL_ADC_GetValue(hadc);
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 fe71 	bl	80033d6 <HAL_ADC_GetValue>
 80026f4:	4602      	mov	r2, r0
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	4413      	add	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
        }
        HAL_ADC_Stop(hadc);
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f000 fd91 	bl	8003224 <HAL_ADC_Stop>
        HAL_Delay(1);
 8002702:	2001      	movs	r0, #1
 8002704:	f000 fb06 	bl	8002d14 <HAL_Delay>
    for (uint8_t i = 0; i < numSamples; i++)
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	3301      	adds	r3, #1
 800270c:	73fb      	strb	r3, [r7, #15]
 800270e:	7bfa      	ldrb	r2, [r7, #15]
 8002710:	7bbb      	ldrb	r3, [r7, #14]
 8002712:	429a      	cmp	r2, r3
 8002714:	d3e1      	bcc.n	80026da <Read_ADC_Value+0x16>
    }

    return (adcSum / numSamples);
 8002716:	68ba      	ldr	r2, [r7, #8]
 8002718:	7bbb      	ldrb	r3, [r7, #14]
 800271a:	fbb2 f3f3 	udiv	r3, r2, r3
 800271e:	ee07 3a90 	vmov	s15, r3
 8002722:	eef8 7a67 	vcvt.f32.u32	s15, s15
}
 8002726:	eeb0 0a67 	vmov.f32	s0, s15
 800272a:	3710      	adds	r7, #16
 800272c:	46bd      	mov	sp, r7
 800272e:	bd80      	pop	{r7, pc}

08002730 <Write_SensorData>:


// 🔹 **Service API for Writing Sensor Data**
void Write_SensorData(Sensordata_t *data)
{
 8002730:	b5b0      	push	{r4, r5, r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
    xSemaphoreTake(SensorDataMutex, portMAX_DELAY);
 8002738:	4b0e      	ldr	r3, [pc, #56]	@ (8002774 <Write_SensorData+0x44>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f04f 31ff 	mov.w	r1, #4294967295
 8002740:	4618      	mov	r0, r3
 8002742:	f004 ff5d 	bl	8007600 <xQueueSemaphoreTake>
    SensorData = *data;
 8002746:	4a0c      	ldr	r2, [pc, #48]	@ (8002778 <Write_SensorData+0x48>)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4614      	mov	r4, r2
 800274c:	461d      	mov	r5, r3
 800274e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002750:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002752:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002754:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002756:	e895 0003 	ldmia.w	r5, {r0, r1}
 800275a:	e884 0003 	stmia.w	r4, {r0, r1}
    xSemaphoreGive(SensorDataMutex);
 800275e:	4b05      	ldr	r3, [pc, #20]	@ (8002774 <Write_SensorData+0x44>)
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	2300      	movs	r3, #0
 8002764:	2200      	movs	r2, #0
 8002766:	2100      	movs	r1, #0
 8002768:	f004 fe60 	bl	800742c <xQueueGenericSend>
}
 800276c:	bf00      	nop
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bdb0      	pop	{r4, r5, r7, pc}
 8002774:	20000378 	.word	0x20000378
 8002778:	20000350 	.word	0x20000350

0800277c <Read_SensorData>:

// 🔹 **Service API for Reading Sensor Data**
void Read_SensorData(Sensordata_t *data)
{
 800277c:	b5b0      	push	{r4, r5, r7, lr}
 800277e:	b082      	sub	sp, #8
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
    xSemaphoreTake(SensorDataMutex, portMAX_DELAY);
 8002784:	4b0e      	ldr	r3, [pc, #56]	@ (80027c0 <Read_SensorData+0x44>)
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f04f 31ff 	mov.w	r1, #4294967295
 800278c:	4618      	mov	r0, r3
 800278e:	f004 ff37 	bl	8007600 <xQueueSemaphoreTake>
    *data = SensorData;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a0b      	ldr	r2, [pc, #44]	@ (80027c4 <Read_SensorData+0x48>)
 8002796:	461c      	mov	r4, r3
 8002798:	4615      	mov	r5, r2
 800279a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800279c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800279e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80027a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80027a2:	e895 0003 	ldmia.w	r5, {r0, r1}
 80027a6:	e884 0003 	stmia.w	r4, {r0, r1}
    xSemaphoreGive(SensorDataMutex);
 80027aa:	4b05      	ldr	r3, [pc, #20]	@ (80027c0 <Read_SensorData+0x44>)
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	2300      	movs	r3, #0
 80027b0:	2200      	movs	r2, #0
 80027b2:	2100      	movs	r1, #0
 80027b4:	f004 fe3a 	bl	800742c <xQueueGenericSend>
}
 80027b8:	bf00      	nop
 80027ba:	3708      	adds	r7, #8
 80027bc:	46bd      	mov	sp, r7
 80027be:	bdb0      	pop	{r4, r5, r7, pc}
 80027c0:	20000378 	.word	0x20000378
 80027c4:	20000350 	.word	0x20000350

080027c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ce:	2300      	movs	r3, #0
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	4b10      	ldr	r3, [pc, #64]	@ (8002814 <HAL_MspInit+0x4c>)
 80027d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d6:	4a0f      	ldr	r2, [pc, #60]	@ (8002814 <HAL_MspInit+0x4c>)
 80027d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80027dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80027de:	4b0d      	ldr	r3, [pc, #52]	@ (8002814 <HAL_MspInit+0x4c>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80027e6:	607b      	str	r3, [r7, #4]
 80027e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80027ea:	2300      	movs	r3, #0
 80027ec:	603b      	str	r3, [r7, #0]
 80027ee:	4b09      	ldr	r3, [pc, #36]	@ (8002814 <HAL_MspInit+0x4c>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	4a08      	ldr	r2, [pc, #32]	@ (8002814 <HAL_MspInit+0x4c>)
 80027f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80027f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80027fa:	4b06      	ldr	r3, [pc, #24]	@ (8002814 <HAL_MspInit+0x4c>)
 80027fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002802:	603b      	str	r3, [r7, #0]
 8002804:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002806:	bf00      	nop
 8002808:	370c      	adds	r7, #12
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	40023800 	.word	0x40023800

08002818 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08a      	sub	sp, #40	@ 0x28
 800281c:	af00      	add	r7, sp, #0
 800281e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002820:	f107 0314 	add.w	r3, r7, #20
 8002824:	2200      	movs	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	605a      	str	r2, [r3, #4]
 800282a:	609a      	str	r2, [r3, #8]
 800282c:	60da      	str	r2, [r3, #12]
 800282e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a17      	ldr	r2, [pc, #92]	@ (8002894 <HAL_ADC_MspInit+0x7c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d127      	bne.n	800288a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800283a:	2300      	movs	r3, #0
 800283c:	613b      	str	r3, [r7, #16]
 800283e:	4b16      	ldr	r3, [pc, #88]	@ (8002898 <HAL_ADC_MspInit+0x80>)
 8002840:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002842:	4a15      	ldr	r2, [pc, #84]	@ (8002898 <HAL_ADC_MspInit+0x80>)
 8002844:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002848:	6453      	str	r3, [r2, #68]	@ 0x44
 800284a:	4b13      	ldr	r3, [pc, #76]	@ (8002898 <HAL_ADC_MspInit+0x80>)
 800284c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800284e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002852:	613b      	str	r3, [r7, #16]
 8002854:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]
 800285a:	4b0f      	ldr	r3, [pc, #60]	@ (8002898 <HAL_ADC_MspInit+0x80>)
 800285c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800285e:	4a0e      	ldr	r2, [pc, #56]	@ (8002898 <HAL_ADC_MspInit+0x80>)
 8002860:	f043 0301 	orr.w	r3, r3, #1
 8002864:	6313      	str	r3, [r2, #48]	@ 0x30
 8002866:	4b0c      	ldr	r3, [pc, #48]	@ (8002898 <HAL_ADC_MspInit+0x80>)
 8002868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	60fb      	str	r3, [r7, #12]
 8002870:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8002872:	2302      	movs	r3, #2
 8002874:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002876:	2303      	movs	r3, #3
 8002878:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800287a:	2300      	movs	r3, #0
 800287c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287e:	f107 0314 	add.w	r3, r7, #20
 8002882:	4619      	mov	r1, r3
 8002884:	4805      	ldr	r0, [pc, #20]	@ (800289c <HAL_ADC_MspInit+0x84>)
 8002886:	f001 f92d 	bl	8003ae4 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800288a:	bf00      	nop
 800288c:	3728      	adds	r7, #40	@ 0x28
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40012000 	.word	0x40012000
 8002898:	40023800 	.word	0x40023800
 800289c:	40020000 	.word	0x40020000

080028a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	@ 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a8:	f107 0314 	add.w	r3, r7, #20
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]
 80028b0:	605a      	str	r2, [r3, #4]
 80028b2:	609a      	str	r2, [r3, #8]
 80028b4:	60da      	str	r2, [r3, #12]
 80028b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	4a19      	ldr	r2, [pc, #100]	@ (8002924 <HAL_I2C_MspInit+0x84>)
 80028be:	4293      	cmp	r3, r2
 80028c0:	d12b      	bne.n	800291a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028c2:	2300      	movs	r3, #0
 80028c4:	613b      	str	r3, [r7, #16]
 80028c6:	4b18      	ldr	r3, [pc, #96]	@ (8002928 <HAL_I2C_MspInit+0x88>)
 80028c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ca:	4a17      	ldr	r2, [pc, #92]	@ (8002928 <HAL_I2C_MspInit+0x88>)
 80028cc:	f043 0302 	orr.w	r3, r3, #2
 80028d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80028d2:	4b15      	ldr	r3, [pc, #84]	@ (8002928 <HAL_I2C_MspInit+0x88>)
 80028d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028d6:	f003 0302 	and.w	r3, r3, #2
 80028da:	613b      	str	r3, [r7, #16]
 80028dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028de:	23c0      	movs	r3, #192	@ 0xc0
 80028e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028e2:	2312      	movs	r3, #18
 80028e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028e6:	2300      	movs	r3, #0
 80028e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028ea:	2303      	movs	r3, #3
 80028ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80028ee:	2304      	movs	r3, #4
 80028f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028f2:	f107 0314 	add.w	r3, r7, #20
 80028f6:	4619      	mov	r1, r3
 80028f8:	480c      	ldr	r0, [pc, #48]	@ (800292c <HAL_I2C_MspInit+0x8c>)
 80028fa:	f001 f8f3 	bl	8003ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80028fe:	2300      	movs	r3, #0
 8002900:	60fb      	str	r3, [r7, #12]
 8002902:	4b09      	ldr	r3, [pc, #36]	@ (8002928 <HAL_I2C_MspInit+0x88>)
 8002904:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002906:	4a08      	ldr	r2, [pc, #32]	@ (8002928 <HAL_I2C_MspInit+0x88>)
 8002908:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800290c:	6413      	str	r3, [r2, #64]	@ 0x40
 800290e:	4b06      	ldr	r3, [pc, #24]	@ (8002928 <HAL_I2C_MspInit+0x88>)
 8002910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002912:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800291a:	bf00      	nop
 800291c:	3728      	adds	r7, #40	@ 0x28
 800291e:	46bd      	mov	sp, r7
 8002920:	bd80      	pop	{r7, pc}
 8002922:	bf00      	nop
 8002924:	40005400 	.word	0x40005400
 8002928:	40023800 	.word	0x40023800
 800292c:	40020400 	.word	0x40020400

08002930 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b08a      	sub	sp, #40	@ 0x28
 8002934:	af00      	add	r7, sp, #0
 8002936:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002938:	f107 0314 	add.w	r3, r7, #20
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
 8002940:	605a      	str	r2, [r3, #4]
 8002942:	609a      	str	r2, [r3, #8]
 8002944:	60da      	str	r2, [r3, #12]
 8002946:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4a28      	ldr	r2, [pc, #160]	@ (80029f0 <HAL_UART_MspInit+0xc0>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d14a      	bne.n	80029e8 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8002952:	2300      	movs	r3, #0
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	4b27      	ldr	r3, [pc, #156]	@ (80029f4 <HAL_UART_MspInit+0xc4>)
 8002958:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295a:	4a26      	ldr	r2, [pc, #152]	@ (80029f4 <HAL_UART_MspInit+0xc4>)
 800295c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002960:	6413      	str	r3, [r2, #64]	@ 0x40
 8002962:	4b24      	ldr	r3, [pc, #144]	@ (80029f4 <HAL_UART_MspInit+0xc4>)
 8002964:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002966:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800296a:	613b      	str	r3, [r7, #16]
 800296c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800296e:	2300      	movs	r3, #0
 8002970:	60fb      	str	r3, [r7, #12]
 8002972:	4b20      	ldr	r3, [pc, #128]	@ (80029f4 <HAL_UART_MspInit+0xc4>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	4a1f      	ldr	r2, [pc, #124]	@ (80029f4 <HAL_UART_MspInit+0xc4>)
 8002978:	f043 0304 	orr.w	r3, r3, #4
 800297c:	6313      	str	r3, [r2, #48]	@ 0x30
 800297e:	4b1d      	ldr	r3, [pc, #116]	@ (80029f4 <HAL_UART_MspInit+0xc4>)
 8002980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002982:	f003 0304 	and.w	r3, r3, #4
 8002986:	60fb      	str	r3, [r7, #12]
 8002988:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800298a:	2300      	movs	r3, #0
 800298c:	60bb      	str	r3, [r7, #8]
 800298e:	4b19      	ldr	r3, [pc, #100]	@ (80029f4 <HAL_UART_MspInit+0xc4>)
 8002990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002992:	4a18      	ldr	r2, [pc, #96]	@ (80029f4 <HAL_UART_MspInit+0xc4>)
 8002994:	f043 0308 	orr.w	r3, r3, #8
 8002998:	6313      	str	r3, [r2, #48]	@ 0x30
 800299a:	4b16      	ldr	r3, [pc, #88]	@ (80029f4 <HAL_UART_MspInit+0xc4>)
 800299c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800299e:	f003 0308 	and.w	r3, r3, #8
 80029a2:	60bb      	str	r3, [r7, #8]
 80029a4:	68bb      	ldr	r3, [r7, #8]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80029a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80029aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029ac:	2302      	movs	r3, #2
 80029ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029b0:	2300      	movs	r3, #0
 80029b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029b4:	2303      	movs	r3, #3
 80029b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80029b8:	2308      	movs	r3, #8
 80029ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029bc:	f107 0314 	add.w	r3, r7, #20
 80029c0:	4619      	mov	r1, r3
 80029c2:	480d      	ldr	r0, [pc, #52]	@ (80029f8 <HAL_UART_MspInit+0xc8>)
 80029c4:	f001 f88e 	bl	8003ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80029c8:	2304      	movs	r3, #4
 80029ca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029cc:	2302      	movs	r3, #2
 80029ce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d0:	2300      	movs	r3, #0
 80029d2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029d4:	2303      	movs	r3, #3
 80029d6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80029d8:	2308      	movs	r3, #8
 80029da:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80029dc:	f107 0314 	add.w	r3, r7, #20
 80029e0:	4619      	mov	r1, r3
 80029e2:	4806      	ldr	r0, [pc, #24]	@ (80029fc <HAL_UART_MspInit+0xcc>)
 80029e4:	f001 f87e 	bl	8003ae4 <HAL_GPIO_Init>

  /* USER CODE END UART5_MspInit 1 */

  }

}
 80029e8:	bf00      	nop
 80029ea:	3728      	adds	r7, #40	@ 0x28
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40005000 	.word	0x40005000
 80029f4:	40023800 	.word	0x40023800
 80029f8:	40020800 	.word	0x40020800
 80029fc:	40020c00 	.word	0x40020c00

08002a00 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b08c      	sub	sp, #48	@ 0x30
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002a08:	2300      	movs	r3, #0
 8002a0a:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002a10:	2300      	movs	r3, #0
 8002a12:	60bb      	str	r3, [r7, #8]
 8002a14:	4b2e      	ldr	r3, [pc, #184]	@ (8002ad0 <HAL_InitTick+0xd0>)
 8002a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a18:	4a2d      	ldr	r2, [pc, #180]	@ (8002ad0 <HAL_InitTick+0xd0>)
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a20:	4b2b      	ldr	r3, [pc, #172]	@ (8002ad0 <HAL_InitTick+0xd0>)
 8002a22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002a2c:	f107 020c 	add.w	r2, r7, #12
 8002a30:	f107 0310 	add.w	r3, r7, #16
 8002a34:	4611      	mov	r1, r2
 8002a36:	4618      	mov	r0, r3
 8002a38:	f003 f9d4 	bl	8005de4 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8002a3c:	f003 f9be 	bl	8005dbc <HAL_RCC_GetPCLK2Freq>
 8002a40:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002a42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002a44:	4a23      	ldr	r2, [pc, #140]	@ (8002ad4 <HAL_InitTick+0xd4>)
 8002a46:	fba2 2303 	umull	r2, r3, r2, r3
 8002a4a:	0c9b      	lsrs	r3, r3, #18
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002a50:	4b21      	ldr	r3, [pc, #132]	@ (8002ad8 <HAL_InitTick+0xd8>)
 8002a52:	4a22      	ldr	r2, [pc, #136]	@ (8002adc <HAL_InitTick+0xdc>)
 8002a54:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002a56:	4b20      	ldr	r3, [pc, #128]	@ (8002ad8 <HAL_InitTick+0xd8>)
 8002a58:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002a5c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002a5e:	4a1e      	ldr	r2, [pc, #120]	@ (8002ad8 <HAL_InitTick+0xd8>)
 8002a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a62:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002a64:	4b1c      	ldr	r3, [pc, #112]	@ (8002ad8 <HAL_InitTick+0xd8>)
 8002a66:	2200      	movs	r2, #0
 8002a68:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a6a:	4b1b      	ldr	r3, [pc, #108]	@ (8002ad8 <HAL_InitTick+0xd8>)
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002a70:	4b19      	ldr	r3, [pc, #100]	@ (8002ad8 <HAL_InitTick+0xd8>)
 8002a72:	2200      	movs	r2, #0
 8002a74:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002a76:	4818      	ldr	r0, [pc, #96]	@ (8002ad8 <HAL_InitTick+0xd8>)
 8002a78:	f003 f9e6 	bl	8005e48 <HAL_TIM_Base_Init>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002a82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d11b      	bne.n	8002ac2 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002a8a:	4813      	ldr	r0, [pc, #76]	@ (8002ad8 <HAL_InitTick+0xd8>)
 8002a8c:	f003 fafe 	bl	800608c <HAL_TIM_Base_Start_IT>
 8002a90:	4603      	mov	r3, r0
 8002a92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002a96:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d111      	bne.n	8002ac2 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002a9e:	2019      	movs	r0, #25
 8002aa0:	f001 f808 	bl	8003ab4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2b0f      	cmp	r3, #15
 8002aa8:	d808      	bhi.n	8002abc <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002aaa:	2200      	movs	r2, #0
 8002aac:	6879      	ldr	r1, [r7, #4]
 8002aae:	2019      	movs	r0, #25
 8002ab0:	f000 ffd4 	bl	8003a5c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ab4:	4a0a      	ldr	r2, [pc, #40]	@ (8002ae0 <HAL_InitTick+0xe0>)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6013      	str	r3, [r2, #0]
 8002aba:	e002      	b.n	8002ac2 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8002abc:	2301      	movs	r3, #1
 8002abe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002ac2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002ac6:	4618      	mov	r0, r3
 8002ac8:	3730      	adds	r7, #48	@ 0x30
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}
 8002ace:	bf00      	nop
 8002ad0:	40023800 	.word	0x40023800
 8002ad4:	431bde83 	.word	0x431bde83
 8002ad8:	200003e8 	.word	0x200003e8
 8002adc:	40010000 	.word	0x40010000
 8002ae0:	20000004 	.word	0x20000004

08002ae4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002ae8:	bf00      	nop
 8002aea:	e7fd      	b.n	8002ae8 <NMI_Handler+0x4>

08002aec <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002aec:	b480      	push	{r7}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002af0:	bf00      	nop
 8002af2:	e7fd      	b.n	8002af0 <HardFault_Handler+0x4>

08002af4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002af4:	b480      	push	{r7}
 8002af6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002af8:	bf00      	nop
 8002afa:	e7fd      	b.n	8002af8 <MemManage_Handler+0x4>

08002afc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002afc:	b480      	push	{r7}
 8002afe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b00:	bf00      	nop
 8002b02:	e7fd      	b.n	8002b00 <BusFault_Handler+0x4>

08002b04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b04:	b480      	push	{r7}
 8002b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b08:	bf00      	nop
 8002b0a:	e7fd      	b.n	8002b08 <UsageFault_Handler+0x4>

08002b0c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b10:	bf00      	nop
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
	...

08002b1c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002b20:	4802      	ldr	r0, [pc, #8]	@ (8002b2c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002b22:	f003 fb79 	bl	8006218 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002b26:	bf00      	nop
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	200003e8 	.word	0x200003e8

08002b30 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002b30:	b480      	push	{r7}
 8002b32:	af00      	add	r7, sp, #0
  return 1;
 8002b34:	2301      	movs	r3, #1
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b3e:	4770      	bx	lr

08002b40 <_kill>:

int _kill(int pid, int sig)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b082      	sub	sp, #8
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
 8002b48:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002b4a:	f009 f87b 	bl	800bc44 <__errno>
 8002b4e:	4603      	mov	r3, r0
 8002b50:	2216      	movs	r2, #22
 8002b52:	601a      	str	r2, [r3, #0]
  return -1;
 8002b54:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}

08002b60 <_exit>:

void _exit (int status)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002b68:	f04f 31ff 	mov.w	r1, #4294967295
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff ffe7 	bl	8002b40 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002b72:	bf00      	nop
 8002b74:	e7fd      	b.n	8002b72 <_exit+0x12>

08002b76 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b76:	b580      	push	{r7, lr}
 8002b78:	b086      	sub	sp, #24
 8002b7a:	af00      	add	r7, sp, #0
 8002b7c:	60f8      	str	r0, [r7, #12]
 8002b7e:	60b9      	str	r1, [r7, #8]
 8002b80:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b82:	2300      	movs	r3, #0
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e00a      	b.n	8002b9e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002b88:	f3af 8000 	nop.w
 8002b8c:	4601      	mov	r1, r0
 8002b8e:	68bb      	ldr	r3, [r7, #8]
 8002b90:	1c5a      	adds	r2, r3, #1
 8002b92:	60ba      	str	r2, [r7, #8]
 8002b94:	b2ca      	uxtb	r2, r1
 8002b96:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b98:	697b      	ldr	r3, [r7, #20]
 8002b9a:	3301      	adds	r3, #1
 8002b9c:	617b      	str	r3, [r7, #20]
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	dbf0      	blt.n	8002b88 <_read+0x12>
  }

  return len;
 8002ba6:	687b      	ldr	r3, [r7, #4]
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3718      	adds	r7, #24
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}

08002bb0 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002bb8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	b083      	sub	sp, #12
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
 8002bd0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002bd8:	605a      	str	r2, [r3, #4]
  return 0;
 8002bda:	2300      	movs	r3, #0
}
 8002bdc:	4618      	mov	r0, r3
 8002bde:	370c      	adds	r7, #12
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr

08002be8 <_isatty>:

int _isatty(int file)
{
 8002be8:	b480      	push	{r7}
 8002bea:	b083      	sub	sp, #12
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002bf0:	2301      	movs	r3, #1
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr

08002bfe <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	b085      	sub	sp, #20
 8002c02:	af00      	add	r7, sp, #0
 8002c04:	60f8      	str	r0, [r7, #12]
 8002c06:	60b9      	str	r1, [r7, #8]
 8002c08:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3714      	adds	r7, #20
 8002c10:	46bd      	mov	sp, r7
 8002c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c16:	4770      	bx	lr

08002c18 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c1c:	4b06      	ldr	r3, [pc, #24]	@ (8002c38 <SystemInit+0x20>)
 8002c1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c22:	4a05      	ldr	r2, [pc, #20]	@ (8002c38 <SystemInit+0x20>)
 8002c24:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c28:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	e000ed00 	.word	0xe000ed00

08002c3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c3c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002c74 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002c40:	f7ff ffea 	bl	8002c18 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002c44:	480c      	ldr	r0, [pc, #48]	@ (8002c78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002c46:	490d      	ldr	r1, [pc, #52]	@ (8002c7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002c48:	4a0d      	ldr	r2, [pc, #52]	@ (8002c80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002c4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c4c:	e002      	b.n	8002c54 <LoopCopyDataInit>

08002c4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c52:	3304      	adds	r3, #4

08002c54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c58:	d3f9      	bcc.n	8002c4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c5a:	4a0a      	ldr	r2, [pc, #40]	@ (8002c84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002c5c:	4c0a      	ldr	r4, [pc, #40]	@ (8002c88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002c5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c60:	e001      	b.n	8002c66 <LoopFillZerobss>

08002c62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c64:	3204      	adds	r2, #4

08002c66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c68:	d3fb      	bcc.n	8002c62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c6a:	f008 fff1 	bl	800bc50 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002c6e:	f7ff f819 	bl	8001ca4 <main>
  bx  lr    
 8002c72:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002c74:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002c78:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c7c:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8002c80:	0800f4d0 	.word	0x0800f4d0
  ldr r2, =_sbss
 8002c84:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8002c88:	20013d24 	.word	0x20013d24

08002c8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002c8c:	e7fe      	b.n	8002c8c <ADC_IRQHandler>
	...

08002c90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002c94:	4b0e      	ldr	r3, [pc, #56]	@ (8002cd0 <HAL_Init+0x40>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a0d      	ldr	r2, [pc, #52]	@ (8002cd0 <HAL_Init+0x40>)
 8002c9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002c9e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ca0:	4b0b      	ldr	r3, [pc, #44]	@ (8002cd0 <HAL_Init+0x40>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a0a      	ldr	r2, [pc, #40]	@ (8002cd0 <HAL_Init+0x40>)
 8002ca6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002caa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cac:	4b08      	ldr	r3, [pc, #32]	@ (8002cd0 <HAL_Init+0x40>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a07      	ldr	r2, [pc, #28]	@ (8002cd0 <HAL_Init+0x40>)
 8002cb2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cb8:	2003      	movs	r0, #3
 8002cba:	f000 feaf 	bl	8003a1c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cbe:	200f      	movs	r0, #15
 8002cc0:	f7ff fe9e 	bl	8002a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cc4:	f7ff fd80 	bl	80027c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	40023c00 	.word	0x40023c00

08002cd4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002cd8:	4b06      	ldr	r3, [pc, #24]	@ (8002cf4 <HAL_IncTick+0x20>)
 8002cda:	781b      	ldrb	r3, [r3, #0]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <HAL_IncTick+0x24>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	4413      	add	r3, r2
 8002ce4:	4a04      	ldr	r2, [pc, #16]	@ (8002cf8 <HAL_IncTick+0x24>)
 8002ce6:	6013      	str	r3, [r2, #0]
}
 8002ce8:	bf00      	nop
 8002cea:	46bd      	mov	sp, r7
 8002cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf0:	4770      	bx	lr
 8002cf2:	bf00      	nop
 8002cf4:	20000008 	.word	0x20000008
 8002cf8:	20000430 	.word	0x20000430

08002cfc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002cfc:	b480      	push	{r7}
 8002cfe:	af00      	add	r7, sp, #0
  return uwTick;
 8002d00:	4b03      	ldr	r3, [pc, #12]	@ (8002d10 <HAL_GetTick+0x14>)
 8002d02:	681b      	ldr	r3, [r3, #0]
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	20000430 	.word	0x20000430

08002d14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b084      	sub	sp, #16
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d1c:	f7ff ffee 	bl	8002cfc <HAL_GetTick>
 8002d20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d2c:	d005      	beq.n	8002d3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d2e:	4b0a      	ldr	r3, [pc, #40]	@ (8002d58 <HAL_Delay+0x44>)
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	461a      	mov	r2, r3
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	4413      	add	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d3a:	bf00      	nop
 8002d3c:	f7ff ffde 	bl	8002cfc <HAL_GetTick>
 8002d40:	4602      	mov	r2, r0
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	1ad3      	subs	r3, r2, r3
 8002d46:	68fa      	ldr	r2, [r7, #12]
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d8f7      	bhi.n	8002d3c <HAL_Delay+0x28>
  {
  }
}
 8002d4c:	bf00      	nop
 8002d4e:	bf00      	nop
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	20000008 	.word	0x20000008

08002d5c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d64:	2300      	movs	r3, #0
 8002d66:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d101      	bne.n	8002d72 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002d6e:	2301      	movs	r3, #1
 8002d70:	e15c      	b.n	800302c <HAL_ADC_Init+0x2d0>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	4a8e      	ldr	r2, [pc, #568]	@ (8002fb0 <HAL_ADC_Init+0x254>)
 8002d78:	4293      	cmp	r3, r2
 8002d7a:	d00e      	beq.n	8002d9a <HAL_ADC_Init+0x3e>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a8c      	ldr	r2, [pc, #560]	@ (8002fb4 <HAL_ADC_Init+0x258>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d009      	beq.n	8002d9a <HAL_ADC_Init+0x3e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a8b      	ldr	r2, [pc, #556]	@ (8002fb8 <HAL_ADC_Init+0x25c>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d004      	beq.n	8002d9a <HAL_ADC_Init+0x3e>
 8002d90:	f44f 71a1 	mov.w	r1, #322	@ 0x142
 8002d94:	4889      	ldr	r0, [pc, #548]	@ (8002fbc <HAL_ADC_Init+0x260>)
 8002d96:	f7ff fc11 	bl	80025bc <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	685b      	ldr	r3, [r3, #4]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d013      	beq.n	8002dca <HAL_ADC_Init+0x6e>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002daa:	d00e      	beq.n	8002dca <HAL_ADC_Init+0x6e>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002db4:	d009      	beq.n	8002dca <HAL_ADC_Init+0x6e>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002dbe:	d004      	beq.n	8002dca <HAL_ADC_Init+0x6e>
 8002dc0:	f240 1143 	movw	r1, #323	@ 0x143
 8002dc4:	487d      	ldr	r0, [pc, #500]	@ (8002fbc <HAL_ADC_Init+0x260>)
 8002dc6:	f7ff fbf9 	bl	80025bc <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d013      	beq.n	8002dfa <HAL_ADC_Init+0x9e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002dda:	d00e      	beq.n	8002dfa <HAL_ADC_Init+0x9e>
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002de4:	d009      	beq.n	8002dfa <HAL_ADC_Init+0x9e>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002dee:	d004      	beq.n	8002dfa <HAL_ADC_Init+0x9e>
 8002df0:	f44f 71a2 	mov.w	r1, #324	@ 0x144
 8002df4:	4871      	ldr	r0, [pc, #452]	@ (8002fbc <HAL_ADC_Init+0x260>)
 8002df6:	f7ff fbe1 	bl	80025bc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ScanConvMode));
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	691b      	ldr	r3, [r3, #16]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d008      	beq.n	8002e14 <HAL_ADC_Init+0xb8>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d004      	beq.n	8002e14 <HAL_ADC_Init+0xb8>
 8002e0a:	f240 1145 	movw	r1, #325	@ 0x145
 8002e0e:	486b      	ldr	r0, [pc, #428]	@ (8002fbc <HAL_ADC_Init+0x260>)
 8002e10:	f7ff fbd4 	bl	80025bc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	7e1b      	ldrb	r3, [r3, #24]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_ADC_Init+0xd2>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	7e1b      	ldrb	r3, [r3, #24]
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d004      	beq.n	8002e2e <HAL_ADC_Init+0xd2>
 8002e24:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8002e28:	4864      	ldr	r0, [pc, #400]	@ (8002fbc <HAL_ADC_Init+0x260>)
 8002e2a:	f7ff fbc7 	bl	80025bc <assert_failed>
  assert_param(IS_ADC_EXT_TRIG(hadc->Init.ExternalTrigConv));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d054      	beq.n	8002ee0 <HAL_ADC_Init+0x184>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e3e:	d04f      	beq.n	8002ee0 <HAL_ADC_Init+0x184>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002e48:	d04a      	beq.n	8002ee0 <HAL_ADC_Init+0x184>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e4e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8002e52:	d045      	beq.n	8002ee0 <HAL_ADC_Init+0x184>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e58:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e5c:	d040      	beq.n	8002ee0 <HAL_ADC_Init+0x184>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e62:	f1b3 6fa0 	cmp.w	r3, #83886080	@ 0x5000000
 8002e66:	d03b      	beq.n	8002ee0 <HAL_ADC_Init+0x184>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e6c:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8002e70:	d036      	beq.n	8002ee0 <HAL_ADC_Init+0x184>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e76:	f1b3 6fe0 	cmp.w	r3, #117440512	@ 0x7000000
 8002e7a:	d031      	beq.n	8002ee0 <HAL_ADC_Init+0x184>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e80:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e84:	d02c      	beq.n	8002ee0 <HAL_ADC_Init+0x184>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e8a:	f1b3 6f10 	cmp.w	r3, #150994944	@ 0x9000000
 8002e8e:	d027      	beq.n	8002ee0 <HAL_ADC_Init+0x184>
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e94:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 8002e98:	d022      	beq.n	8002ee0 <HAL_ADC_Init+0x184>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e9e:	f1b3 6f30 	cmp.w	r3, #184549376	@ 0xb000000
 8002ea2:	d01d      	beq.n	8002ee0 <HAL_ADC_Init+0x184>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ea8:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8002eac:	d018      	beq.n	8002ee0 <HAL_ADC_Init+0x184>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002eb2:	f1b3 6f50 	cmp.w	r3, #218103808	@ 0xd000000
 8002eb6:	d013      	beq.n	8002ee0 <HAL_ADC_Init+0x184>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ebc:	f1b3 6f60 	cmp.w	r3, #234881024	@ 0xe000000
 8002ec0:	d00e      	beq.n	8002ee0 <HAL_ADC_Init+0x184>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8002eca:	d009      	beq.n	8002ee0 <HAL_ADC_Init+0x184>
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed0:	4a3b      	ldr	r2, [pc, #236]	@ (8002fc0 <HAL_ADC_Init+0x264>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d004      	beq.n	8002ee0 <HAL_ADC_Init+0x184>
 8002ed6:	f240 1147 	movw	r1, #327	@ 0x147
 8002eda:	4838      	ldr	r0, [pc, #224]	@ (8002fbc <HAL_ADC_Init+0x260>)
 8002edc:	f7ff fb6e 	bl	80025bc <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d009      	beq.n	8002efc <HAL_ADC_Init+0x1a0>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	68db      	ldr	r3, [r3, #12]
 8002eec:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002ef0:	d004      	beq.n	8002efc <HAL_ADC_Init+0x1a0>
 8002ef2:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8002ef6:	4831      	ldr	r0, [pc, #196]	@ (8002fbc <HAL_ADC_Init+0x260>)
 8002ef8:	f7ff fb60 	bl	80025bc <assert_failed>
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d003      	beq.n	8002f0c <HAL_ADC_Init+0x1b0>
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	69db      	ldr	r3, [r3, #28]
 8002f08:	2b10      	cmp	r3, #16
 8002f0a:	d904      	bls.n	8002f16 <HAL_ADC_Init+0x1ba>
 8002f0c:	f240 1149 	movw	r1, #329	@ 0x149
 8002f10:	482a      	ldr	r0, [pc, #168]	@ (8002fbc <HAL_ADC_Init+0x260>)
 8002f12:	f7ff fb53 	bl	80025bc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d009      	beq.n	8002f34 <HAL_ADC_Init+0x1d8>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002f26:	2b01      	cmp	r3, #1
 8002f28:	d004      	beq.n	8002f34 <HAL_ADC_Init+0x1d8>
 8002f2a:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 8002f2e:	4823      	ldr	r0, [pc, #140]	@ (8002fbc <HAL_ADC_Init+0x260>)
 8002f30:	f7ff fb44 	bl	80025bc <assert_failed>
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	695b      	ldr	r3, [r3, #20]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d00c      	beq.n	8002f56 <HAL_ADC_Init+0x1fa>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	695b      	ldr	r3, [r3, #20]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d008      	beq.n	8002f56 <HAL_ADC_Init+0x1fa>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	695b      	ldr	r3, [r3, #20]
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d004      	beq.n	8002f56 <HAL_ADC_Init+0x1fa>
 8002f4c:	f240 114b 	movw	r1, #331	@ 0x14b
 8002f50:	481a      	ldr	r0, [pc, #104]	@ (8002fbc <HAL_ADC_Init+0x260>)
 8002f52:	f7ff fb33 	bl	80025bc <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d009      	beq.n	8002f74 <HAL_ADC_Init+0x218>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f66:	2b01      	cmp	r3, #1
 8002f68:	d004      	beq.n	8002f74 <HAL_ADC_Init+0x218>
 8002f6a:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8002f6e:	4813      	ldr	r0, [pc, #76]	@ (8002fbc <HAL_ADC_Init+0x260>)
 8002f70:	f7ff fb24 	bl	80025bc <assert_failed>

  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f78:	4a11      	ldr	r2, [pc, #68]	@ (8002fc0 <HAL_ADC_Init+0x264>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d022      	beq.n	8002fc4 <HAL_ADC_Init+0x268>
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d01e      	beq.n	8002fc4 <HAL_ADC_Init+0x268>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f8a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f8e:	d019      	beq.n	8002fc4 <HAL_ADC_Init+0x268>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002f98:	d014      	beq.n	8002fc4 <HAL_ADC_Init+0x268>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f9e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002fa2:	d00f      	beq.n	8002fc4 <HAL_ADC_Init+0x268>
 8002fa4:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8002fa8:	4804      	ldr	r0, [pc, #16]	@ (8002fbc <HAL_ADC_Init+0x260>)
 8002faa:	f7ff fb07 	bl	80025bc <assert_failed>
 8002fae:	e009      	b.n	8002fc4 <HAL_ADC_Init+0x268>
 8002fb0:	40012000 	.word	0x40012000
 8002fb4:	40012100 	.word	0x40012100
 8002fb8:	40012200 	.word	0x40012200
 8002fbc:	0800ee90 	.word	0x0800ee90
 8002fc0:	0f000001 	.word	0x0f000001
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d109      	bne.n	8002fe0 <HAL_ADC_Init+0x284>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f7ff fc23 	bl	8002818 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe4:	f003 0310 	and.w	r3, r3, #16
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d118      	bne.n	800301e <HAL_ADC_Init+0x2c2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002ff4:	f023 0302 	bic.w	r3, r3, #2
 8002ff8:	f043 0202 	orr.w	r2, r3, #2
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f000 fb53 	bl	80036ac <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2200      	movs	r2, #0
 800300a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003010:	f023 0303 	bic.w	r3, r3, #3
 8003014:	f043 0201 	orr.w	r2, r3, #1
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	641a      	str	r2, [r3, #64]	@ 0x40
 800301c:	e001      	b.n	8003022 <HAL_ADC_Init+0x2c6>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2200      	movs	r2, #0
 8003026:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 800302a:	7bfb      	ldrb	r3, [r7, #15]
}
 800302c:	4618      	mov	r0, r3
 800302e:	3710      	adds	r7, #16
 8003030:	46bd      	mov	sp, r7
 8003032:	bd80      	pop	{r7, pc}

08003034 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	7e1b      	ldrb	r3, [r3, #24]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d008      	beq.n	800305a <HAL_ADC_Start+0x26>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	7e1b      	ldrb	r3, [r3, #24]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d004      	beq.n	800305a <HAL_ADC_Start+0x26>
 8003050:	f240 21d2 	movw	r1, #722	@ 0x2d2
 8003054:	486c      	ldr	r0, [pc, #432]	@ (8003208 <HAL_ADC_Start+0x1d4>)
 8003056:	f7ff fab1 	bl	80025bc <assert_failed>
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800305e:	2b00      	cmp	r3, #0
 8003060:	d013      	beq.n	800308a <HAL_ADC_Start+0x56>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003066:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800306a:	d00e      	beq.n	800308a <HAL_ADC_Start+0x56>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003070:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003074:	d009      	beq.n	800308a <HAL_ADC_Start+0x56>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800307a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800307e:	d004      	beq.n	800308a <HAL_ADC_Start+0x56>
 8003080:	f240 21d3 	movw	r1, #723	@ 0x2d3
 8003084:	4860      	ldr	r0, [pc, #384]	@ (8003208 <HAL_ADC_Start+0x1d4>)
 8003086:	f7ff fa99 	bl	80025bc <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003090:	2b01      	cmp	r3, #1
 8003092:	d101      	bne.n	8003098 <HAL_ADC_Start+0x64>
 8003094:	2302      	movs	r3, #2
 8003096:	e0b2      	b.n	80031fe <HAL_ADC_Start+0x1ca>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f003 0301 	and.w	r3, r3, #1
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d018      	beq.n	80030e0 <HAL_ADC_Start+0xac>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f042 0201 	orr.w	r2, r2, #1
 80030bc:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80030be:	4b53      	ldr	r3, [pc, #332]	@ (800320c <HAL_ADC_Start+0x1d8>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a53      	ldr	r2, [pc, #332]	@ (8003210 <HAL_ADC_Start+0x1dc>)
 80030c4:	fba2 2303 	umull	r2, r3, r2, r3
 80030c8:	0c9a      	lsrs	r2, r3, #18
 80030ca:	4613      	mov	r3, r2
 80030cc:	005b      	lsls	r3, r3, #1
 80030ce:	4413      	add	r3, r2
 80030d0:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80030d2:	e002      	b.n	80030da <HAL_ADC_Start+0xa6>
    {
      counter--;
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	3b01      	subs	r3, #1
 80030d8:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 80030da:	68bb      	ldr	r3, [r7, #8]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1f9      	bne.n	80030d4 <HAL_ADC_Start+0xa0>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	689b      	ldr	r3, [r3, #8]
 80030e6:	f003 0301 	and.w	r3, r3, #1
 80030ea:	2b01      	cmp	r3, #1
 80030ec:	d17a      	bne.n	80031e4 <HAL_ADC_Start+0x1b0>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030f2:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 80030f6:	f023 0301 	bic.w	r3, r3, #1
 80030fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800310c:	2b00      	cmp	r3, #0
 800310e:	d007      	beq.n	8003120 <HAL_ADC_Start+0xec>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003114:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8003118:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003124:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003128:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800312c:	d106      	bne.n	800313c <HAL_ADC_Start+0x108>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003132:	f023 0206 	bic.w	r2, r3, #6
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	645a      	str	r2, [r3, #68]	@ 0x44
 800313a:	e002      	b.n	8003142 <HAL_ADC_Start+0x10e>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2200      	movs	r2, #0
 8003140:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	2200      	movs	r2, #0
 8003146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800314a:	4b32      	ldr	r3, [pc, #200]	@ (8003214 <HAL_ADC_Start+0x1e0>)
 800314c:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8003156:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	f003 031f 	and.w	r3, r3, #31
 8003160:	2b00      	cmp	r3, #0
 8003162:	d12a      	bne.n	80031ba <HAL_ADC_Start+0x186>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a2b      	ldr	r2, [pc, #172]	@ (8003218 <HAL_ADC_Start+0x1e4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d015      	beq.n	800319a <HAL_ADC_Start+0x166>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a2a      	ldr	r2, [pc, #168]	@ (800321c <HAL_ADC_Start+0x1e8>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d105      	bne.n	8003184 <HAL_ADC_Start+0x150>
 8003178:	4b26      	ldr	r3, [pc, #152]	@ (8003214 <HAL_ADC_Start+0x1e0>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f003 031f 	and.w	r3, r3, #31
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00a      	beq.n	800319a <HAL_ADC_Start+0x166>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4a25      	ldr	r2, [pc, #148]	@ (8003220 <HAL_ADC_Start+0x1ec>)
 800318a:	4293      	cmp	r3, r2
 800318c:	d136      	bne.n	80031fc <HAL_ADC_Start+0x1c8>
 800318e:	4b21      	ldr	r3, [pc, #132]	@ (8003214 <HAL_ADC_Start+0x1e0>)
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 0310 	and.w	r3, r3, #16
 8003196:	2b00      	cmp	r3, #0
 8003198:	d130      	bne.n	80031fc <HAL_ADC_Start+0x1c8>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d129      	bne.n	80031fc <HAL_ADC_Start+0x1c8>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	689a      	ldr	r2, [r3, #8]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	e020      	b.n	80031fc <HAL_ADC_Start+0x1c8>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a16      	ldr	r2, [pc, #88]	@ (8003218 <HAL_ADC_Start+0x1e4>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d11b      	bne.n	80031fc <HAL_ADC_Start+0x1c8>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d114      	bne.n	80031fc <HAL_ADC_Start+0x1c8>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 80031e0:	609a      	str	r2, [r3, #8]
 80031e2:	e00b      	b.n	80031fc <HAL_ADC_Start+0x1c8>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031e8:	f043 0210 	orr.w	r2, r3, #16
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031f4:	f043 0201 	orr.w	r2, r3, #1
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 80031fc:	2300      	movs	r3, #0
}
 80031fe:	4618      	mov	r0, r3
 8003200:	3710      	adds	r7, #16
 8003202:	46bd      	mov	sp, r7
 8003204:	bd80      	pop	{r7, pc}
 8003206:	bf00      	nop
 8003208:	0800ee90 	.word	0x0800ee90
 800320c:	20000000 	.word	0x20000000
 8003210:	431bde83 	.word	0x431bde83
 8003214:	40012300 	.word	0x40012300
 8003218:	40012000 	.word	0x40012000
 800321c:	40012100 	.word	0x40012100
 8003220:	40012200 	.word	0x40012200

08003224 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	4a1f      	ldr	r2, [pc, #124]	@ (80032b0 <HAL_ADC_Stop+0x8c>)
 8003232:	4293      	cmp	r3, r2
 8003234:	d00e      	beq.n	8003254 <HAL_ADC_Stop+0x30>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4a1e      	ldr	r2, [pc, #120]	@ (80032b4 <HAL_ADC_Stop+0x90>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d009      	beq.n	8003254 <HAL_ADC_Stop+0x30>
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4a1c      	ldr	r2, [pc, #112]	@ (80032b8 <HAL_ADC_Stop+0x94>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d004      	beq.n	8003254 <HAL_ADC_Stop+0x30>
 800324a:	f240 314a 	movw	r1, #842	@ 0x34a
 800324e:	481b      	ldr	r0, [pc, #108]	@ (80032bc <HAL_ADC_Stop+0x98>)
 8003250:	f7ff f9b4 	bl	80025bc <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800325a:	2b01      	cmp	r3, #1
 800325c:	d101      	bne.n	8003262 <HAL_ADC_Stop+0x3e>
 800325e:	2302      	movs	r3, #2
 8003260:	e021      	b.n	80032a6 <HAL_ADC_Stop+0x82>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2201      	movs	r2, #1
 8003266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	f022 0201 	bic.w	r2, r2, #1
 8003278:	609a      	str	r2, [r3, #8]

  /* Check if ADC is effectively disabled */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	689b      	ldr	r3, [r3, #8]
 8003280:	f003 0301 	and.w	r3, r3, #1
 8003284:	2b00      	cmp	r3, #0
 8003286:	d109      	bne.n	800329c <HAL_ADC_Stop+0x78>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800328c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8003290:	f023 0301 	bic.w	r3, r3, #1
 8003294:	f043 0201 	orr.w	r2, r3, #1
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3708      	adds	r7, #8
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
 80032ae:	bf00      	nop
 80032b0:	40012000 	.word	0x40012000
 80032b4:	40012100 	.word	0x40012100
 80032b8:	40012200 	.word	0x40012200
 80032bc:	0800ee90 	.word	0x0800ee90

080032c0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80032ca:	2300      	movs	r3, #0
 80032cc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	689b      	ldr	r3, [r3, #8]
 80032d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80032d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80032dc:	d113      	bne.n	8003306 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80032e8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80032ec:	d10b      	bne.n	8003306 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	f043 0220 	orr.w	r2, r3, #32
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e063      	b.n	80033ce <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8003306:	f7ff fcf9 	bl	8002cfc <HAL_GetTick>
 800330a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800330c:	e021      	b.n	8003352 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003314:	d01d      	beq.n	8003352 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d007      	beq.n	800332c <HAL_ADC_PollForConversion+0x6c>
 800331c:	f7ff fcee 	bl	8002cfc <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	683a      	ldr	r2, [r7, #0]
 8003328:	429a      	cmp	r2, r3
 800332a:	d212      	bcs.n	8003352 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0302 	and.w	r3, r3, #2
 8003336:	2b02      	cmp	r3, #2
 8003338:	d00b      	beq.n	8003352 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800333e:	f043 0204 	orr.w	r2, r3, #4
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2200      	movs	r2, #0
 800334a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e03d      	b.n	80033ce <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	f003 0302 	and.w	r3, r3, #2
 800335c:	2b02      	cmp	r3, #2
 800335e:	d1d6      	bne.n	800330e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f06f 0212 	mvn.w	r2, #18
 8003368:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336e:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d123      	bne.n	80033cc <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003388:	2b00      	cmp	r3, #0
 800338a:	d11f      	bne.n	80033cc <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003392:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8003396:	2b00      	cmp	r3, #0
 8003398:	d006      	beq.n	80033a8 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	689b      	ldr	r3, [r3, #8]
 80033a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d111      	bne.n	80033cc <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ac:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d105      	bne.n	80033cc <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c4:	f043 0201 	orr.w	r2, r3, #1
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80033cc:	2300      	movs	r3, #0
}
 80033ce:	4618      	mov	r0, r3
 80033d0:	3710      	adds	r7, #16
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd80      	pop	{r7, pc}

080033d6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80033d6:	b480      	push	{r7}
 80033d8:	b083      	sub	sp, #12
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	370c      	adds	r7, #12
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr

080033f0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	b084      	sub	sp, #16
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	60bb      	str	r3, [r7, #8]
  ADC_Common_TypeDef *tmpADC_Common;

  /* Check the parameters */
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	2b12      	cmp	r3, #18
 8003404:	d904      	bls.n	8003410 <HAL_ADC_ConfigChannel+0x20>
 8003406:	f240 618b 	movw	r1, #1675	@ 0x68b
 800340a:	486f      	ldr	r0, [pc, #444]	@ (80035c8 <HAL_ADC_ConfigChannel+0x1d8>)
 800340c:	f7ff f8d6 	bl	80025bc <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d003      	beq.n	8003420 <HAL_ADC_ConfigChannel+0x30>
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	2b10      	cmp	r3, #16
 800341e:	d904      	bls.n	800342a <HAL_ADC_ConfigChannel+0x3a>
 8003420:	f240 618c 	movw	r1, #1676	@ 0x68c
 8003424:	4868      	ldr	r0, [pc, #416]	@ (80035c8 <HAL_ADC_ConfigChannel+0x1d8>)
 8003426:	f7ff f8c9 	bl	80025bc <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d020      	beq.n	8003474 <HAL_ADC_ConfigChannel+0x84>
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	2b01      	cmp	r3, #1
 8003438:	d01c      	beq.n	8003474 <HAL_ADC_ConfigChannel+0x84>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	2b02      	cmp	r3, #2
 8003440:	d018      	beq.n	8003474 <HAL_ADC_ConfigChannel+0x84>
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b03      	cmp	r3, #3
 8003448:	d014      	beq.n	8003474 <HAL_ADC_ConfigChannel+0x84>
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b04      	cmp	r3, #4
 8003450:	d010      	beq.n	8003474 <HAL_ADC_ConfigChannel+0x84>
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	2b05      	cmp	r3, #5
 8003458:	d00c      	beq.n	8003474 <HAL_ADC_ConfigChannel+0x84>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	2b06      	cmp	r3, #6
 8003460:	d008      	beq.n	8003474 <HAL_ADC_ConfigChannel+0x84>
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	2b07      	cmp	r3, #7
 8003468:	d004      	beq.n	8003474 <HAL_ADC_ConfigChannel+0x84>
 800346a:	f240 618d 	movw	r1, #1677	@ 0x68d
 800346e:	4856      	ldr	r0, [pc, #344]	@ (80035c8 <HAL_ADC_ConfigChannel+0x1d8>)
 8003470:	f7ff f8a4 	bl	80025bc <assert_failed>

  /* Process locked */
  __HAL_LOCK(hadc);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800347a:	2b01      	cmp	r3, #1
 800347c:	d101      	bne.n	8003482 <HAL_ADC_ConfigChannel+0x92>
 800347e:	2302      	movs	r3, #2
 8003480:	e107      	b.n	8003692 <HAL_ADC_ConfigChannel+0x2a2>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	2201      	movs	r2, #1
 8003486:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	2b09      	cmp	r3, #9
 8003490:	d925      	bls.n	80034de <HAL_ADC_ConfigChannel+0xee>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68d9      	ldr	r1, [r3, #12]
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	b29b      	uxth	r3, r3
 800349e:	461a      	mov	r2, r3
 80034a0:	4613      	mov	r3, r2
 80034a2:	005b      	lsls	r3, r3, #1
 80034a4:	4413      	add	r3, r2
 80034a6:	3b1e      	subs	r3, #30
 80034a8:	2207      	movs	r2, #7
 80034aa:	fa02 f303 	lsl.w	r3, r2, r3
 80034ae:	43da      	mvns	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	400a      	ands	r2, r1
 80034b6:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	68d9      	ldr	r1, [r3, #12]
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	689a      	ldr	r2, [r3, #8]
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	b29b      	uxth	r3, r3
 80034c8:	4618      	mov	r0, r3
 80034ca:	4603      	mov	r3, r0
 80034cc:	005b      	lsls	r3, r3, #1
 80034ce:	4403      	add	r3, r0
 80034d0:	3b1e      	subs	r3, #30
 80034d2:	409a      	lsls	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	430a      	orrs	r2, r1
 80034da:	60da      	str	r2, [r3, #12]
 80034dc:	e022      	b.n	8003524 <HAL_ADC_ConfigChannel+0x134>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	6919      	ldr	r1, [r3, #16]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	b29b      	uxth	r3, r3
 80034ea:	461a      	mov	r2, r3
 80034ec:	4613      	mov	r3, r2
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	4413      	add	r3, r2
 80034f2:	2207      	movs	r2, #7
 80034f4:	fa02 f303 	lsl.w	r3, r2, r3
 80034f8:	43da      	mvns	r2, r3
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	400a      	ands	r2, r1
 8003500:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	6919      	ldr	r1, [r3, #16]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689a      	ldr	r2, [r3, #8]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	b29b      	uxth	r3, r3
 8003512:	4618      	mov	r0, r3
 8003514:	4603      	mov	r3, r0
 8003516:	005b      	lsls	r3, r3, #1
 8003518:	4403      	add	r3, r0
 800351a:	409a      	lsls	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	430a      	orrs	r2, r1
 8003522:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	2b06      	cmp	r3, #6
 800352a:	d824      	bhi.n	8003576 <HAL_ADC_ConfigChannel+0x186>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	685a      	ldr	r2, [r3, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	009b      	lsls	r3, r3, #2
 800353a:	4413      	add	r3, r2
 800353c:	3b05      	subs	r3, #5
 800353e:	221f      	movs	r2, #31
 8003540:	fa02 f303 	lsl.w	r3, r2, r3
 8003544:	43da      	mvns	r2, r3
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	400a      	ands	r2, r1
 800354c:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	b29b      	uxth	r3, r3
 800355a:	4618      	mov	r0, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685a      	ldr	r2, [r3, #4]
 8003560:	4613      	mov	r3, r2
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	4413      	add	r3, r2
 8003566:	3b05      	subs	r3, #5
 8003568:	fa00 f203 	lsl.w	r2, r0, r3
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	430a      	orrs	r2, r1
 8003572:	635a      	str	r2, [r3, #52]	@ 0x34
 8003574:	e04e      	b.n	8003614 <HAL_ADC_ConfigChannel+0x224>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b0c      	cmp	r3, #12
 800357c:	d826      	bhi.n	80035cc <HAL_ADC_ConfigChannel+0x1dc>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685a      	ldr	r2, [r3, #4]
 8003588:	4613      	mov	r3, r2
 800358a:	009b      	lsls	r3, r3, #2
 800358c:	4413      	add	r3, r2
 800358e:	3b23      	subs	r3, #35	@ 0x23
 8003590:	221f      	movs	r2, #31
 8003592:	fa02 f303 	lsl.w	r3, r2, r3
 8003596:	43da      	mvns	r2, r3
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	400a      	ands	r2, r1
 800359e:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	b29b      	uxth	r3, r3
 80035ac:	4618      	mov	r0, r3
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	4613      	mov	r3, r2
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	4413      	add	r3, r2
 80035b8:	3b23      	subs	r3, #35	@ 0x23
 80035ba:	fa00 f203 	lsl.w	r2, r0, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	430a      	orrs	r2, r1
 80035c4:	631a      	str	r2, [r3, #48]	@ 0x30
 80035c6:	e025      	b.n	8003614 <HAL_ADC_ConfigChannel+0x224>
 80035c8:	0800ee90 	.word	0x0800ee90
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	685a      	ldr	r2, [r3, #4]
 80035d6:	4613      	mov	r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	4413      	add	r3, r2
 80035dc:	3b41      	subs	r3, #65	@ 0x41
 80035de:	221f      	movs	r2, #31
 80035e0:	fa02 f303 	lsl.w	r3, r2, r3
 80035e4:	43da      	mvns	r2, r3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	400a      	ands	r2, r1
 80035ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	b29b      	uxth	r3, r3
 80035fa:	4618      	mov	r0, r3
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	685a      	ldr	r2, [r3, #4]
 8003600:	4613      	mov	r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	3b41      	subs	r3, #65	@ 0x41
 8003608:	fa00 f203 	lsl.w	r2, r0, r3
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	430a      	orrs	r2, r1
 8003612:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003614:	4b21      	ldr	r3, [pc, #132]	@ (800369c <HAL_ADC_ConfigChannel+0x2ac>)
 8003616:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	4a20      	ldr	r2, [pc, #128]	@ (80036a0 <HAL_ADC_ConfigChannel+0x2b0>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d109      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x246>
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b12      	cmp	r3, #18
 8003628:	d105      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x246>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a19      	ldr	r2, [pc, #100]	@ (80036a0 <HAL_ADC_ConfigChannel+0x2b0>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d123      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x298>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b10      	cmp	r3, #16
 8003646:	d003      	beq.n	8003650 <HAL_ADC_ConfigChannel+0x260>
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	2b11      	cmp	r3, #17
 800364e:	d11b      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x298>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	2b10      	cmp	r3, #16
 8003662:	d111      	bne.n	8003688 <HAL_ADC_ConfigChannel+0x298>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003664:	4b0f      	ldr	r3, [pc, #60]	@ (80036a4 <HAL_ADC_ConfigChannel+0x2b4>)
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	4a0f      	ldr	r2, [pc, #60]	@ (80036a8 <HAL_ADC_ConfigChannel+0x2b8>)
 800366a:	fba2 2303 	umull	r2, r3, r2, r3
 800366e:	0c9a      	lsrs	r2, r3, #18
 8003670:	4613      	mov	r3, r2
 8003672:	009b      	lsls	r3, r3, #2
 8003674:	4413      	add	r3, r2
 8003676:	005b      	lsls	r3, r3, #1
 8003678:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 800367a:	e002      	b.n	8003682 <HAL_ADC_ConfigChannel+0x292>
      {
        counter--;
 800367c:	68bb      	ldr	r3, [r7, #8]
 800367e:	3b01      	subs	r3, #1
 8003680:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f9      	bne.n	800367c <HAL_ADC_ConfigChannel+0x28c>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8003690:	2300      	movs	r3, #0
}
 8003692:	4618      	mov	r0, r3
 8003694:	3710      	adds	r7, #16
 8003696:	46bd      	mov	sp, r7
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	40012300 	.word	0x40012300
 80036a0:	40012000 	.word	0x40012000
 80036a4:	20000000 	.word	0x20000000
 80036a8:	431bde83 	.word	0x431bde83

080036ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80036b4:	4b7f      	ldr	r3, [pc, #508]	@ (80038b4 <ADC_Init+0x208>)
 80036b6:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	685a      	ldr	r2, [r3, #4]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	431a      	orrs	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	685a      	ldr	r2, [r3, #4]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80036e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	6859      	ldr	r1, [r3, #4]
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	021a      	lsls	r2, r3, #8
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	430a      	orrs	r2, r1
 80036f4:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003704:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	6859      	ldr	r1, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	689a      	ldr	r2, [r3, #8]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003726:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6899      	ldr	r1, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	68da      	ldr	r2, [r3, #12]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	430a      	orrs	r2, r1
 8003738:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800373e:	4a5e      	ldr	r2, [pc, #376]	@ (80038b8 <ADC_Init+0x20c>)
 8003740:	4293      	cmp	r3, r2
 8003742:	d022      	beq.n	800378a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	689a      	ldr	r2, [r3, #8]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003752:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6899      	ldr	r1, [r3, #8]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	430a      	orrs	r2, r1
 8003764:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689a      	ldr	r2, [r3, #8]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003774:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	6899      	ldr	r1, [r3, #8]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	430a      	orrs	r2, r1
 8003786:	609a      	str	r2, [r3, #8]
 8003788:	e00f      	b.n	80037aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	689a      	ldr	r2, [r3, #8]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003798:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	689a      	ldr	r2, [r3, #8]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80037a8:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689a      	ldr	r2, [r3, #8]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0202 	bic.w	r2, r2, #2
 80037b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	6899      	ldr	r1, [r3, #8]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	7e1b      	ldrb	r3, [r3, #24]
 80037c4:	005a      	lsls	r2, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	430a      	orrs	r2, r1
 80037cc:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d028      	beq.n	800382a <ADC_Init+0x17e>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d003      	beq.n	80037e8 <ADC_Init+0x13c>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037e4:	2b08      	cmp	r3, #8
 80037e6:	d904      	bls.n	80037f2 <ADC_Init+0x146>
 80037e8:	f44f 61f5 	mov.w	r1, #1960	@ 0x7a8
 80037ec:	4833      	ldr	r0, [pc, #204]	@ (80038bc <ADC_Init+0x210>)
 80037ee:	f7fe fee5 	bl	80025bc <assert_failed>

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	685a      	ldr	r2, [r3, #4]
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003800:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	685a      	ldr	r2, [r3, #4]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8003810:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6859      	ldr	r1, [r3, #4]
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	3b01      	subs	r3, #1
 800381e:	035a      	lsls	r2, r3, #13
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	605a      	str	r2, [r3, #4]
 8003828:	e007      	b.n	800383a <ADC_Init+0x18e>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	685a      	ldr	r2, [r3, #4]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003838:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003848:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	69db      	ldr	r3, [r3, #28]
 8003854:	3b01      	subs	r3, #1
 8003856:	051a      	lsls	r2, r3, #20
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689a      	ldr	r2, [r3, #8]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800386e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	6899      	ldr	r1, [r3, #8]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800387c:	025a      	lsls	r2, r3, #9
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	430a      	orrs	r2, r1
 8003884:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689a      	ldr	r2, [r3, #8]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003894:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	6899      	ldr	r1, [r3, #8]
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	695b      	ldr	r3, [r3, #20]
 80038a0:	029a      	lsls	r2, r3, #10
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	430a      	orrs	r2, r1
 80038a8:	609a      	str	r2, [r3, #8]
}
 80038aa:	bf00      	nop
 80038ac:	3710      	adds	r7, #16
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40012300 	.word	0x40012300
 80038b8:	0f000001 	.word	0x0f000001
 80038bc:	0800ee90 	.word	0x0800ee90

080038c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038c0:	b480      	push	{r7}
 80038c2:	b085      	sub	sp, #20
 80038c4:	af00      	add	r7, sp, #0
 80038c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f003 0307 	and.w	r3, r3, #7
 80038ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003904 <__NVIC_SetPriorityGrouping+0x44>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038dc:	4013      	ands	r3, r2
 80038de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038f2:	4a04      	ldr	r2, [pc, #16]	@ (8003904 <__NVIC_SetPriorityGrouping+0x44>)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	60d3      	str	r3, [r2, #12]
}
 80038f8:	bf00      	nop
 80038fa:	3714      	adds	r7, #20
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003908:	b480      	push	{r7}
 800390a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800390c:	4b04      	ldr	r3, [pc, #16]	@ (8003920 <__NVIC_GetPriorityGrouping+0x18>)
 800390e:	68db      	ldr	r3, [r3, #12]
 8003910:	0a1b      	lsrs	r3, r3, #8
 8003912:	f003 0307 	and.w	r3, r3, #7
}
 8003916:	4618      	mov	r0, r3
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	e000ed00 	.word	0xe000ed00

08003924 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003924:	b480      	push	{r7}
 8003926:	b083      	sub	sp, #12
 8003928:	af00      	add	r7, sp, #0
 800392a:	4603      	mov	r3, r0
 800392c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800392e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003932:	2b00      	cmp	r3, #0
 8003934:	db0b      	blt.n	800394e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003936:	79fb      	ldrb	r3, [r7, #7]
 8003938:	f003 021f 	and.w	r2, r3, #31
 800393c:	4907      	ldr	r1, [pc, #28]	@ (800395c <__NVIC_EnableIRQ+0x38>)
 800393e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	2001      	movs	r0, #1
 8003946:	fa00 f202 	lsl.w	r2, r0, r2
 800394a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	e000e100 	.word	0xe000e100

08003960 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003960:	b480      	push	{r7}
 8003962:	b083      	sub	sp, #12
 8003964:	af00      	add	r7, sp, #0
 8003966:	4603      	mov	r3, r0
 8003968:	6039      	str	r1, [r7, #0]
 800396a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800396c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003970:	2b00      	cmp	r3, #0
 8003972:	db0a      	blt.n	800398a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	b2da      	uxtb	r2, r3
 8003978:	490c      	ldr	r1, [pc, #48]	@ (80039ac <__NVIC_SetPriority+0x4c>)
 800397a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800397e:	0112      	lsls	r2, r2, #4
 8003980:	b2d2      	uxtb	r2, r2
 8003982:	440b      	add	r3, r1
 8003984:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003988:	e00a      	b.n	80039a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	b2da      	uxtb	r2, r3
 800398e:	4908      	ldr	r1, [pc, #32]	@ (80039b0 <__NVIC_SetPriority+0x50>)
 8003990:	79fb      	ldrb	r3, [r7, #7]
 8003992:	f003 030f 	and.w	r3, r3, #15
 8003996:	3b04      	subs	r3, #4
 8003998:	0112      	lsls	r2, r2, #4
 800399a:	b2d2      	uxtb	r2, r2
 800399c:	440b      	add	r3, r1
 800399e:	761a      	strb	r2, [r3, #24]
}
 80039a0:	bf00      	nop
 80039a2:	370c      	adds	r7, #12
 80039a4:	46bd      	mov	sp, r7
 80039a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039aa:	4770      	bx	lr
 80039ac:	e000e100 	.word	0xe000e100
 80039b0:	e000ed00 	.word	0xe000ed00

080039b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b089      	sub	sp, #36	@ 0x24
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	60f8      	str	r0, [r7, #12]
 80039bc:	60b9      	str	r1, [r7, #8]
 80039be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039c8:	69fb      	ldr	r3, [r7, #28]
 80039ca:	f1c3 0307 	rsb	r3, r3, #7
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	bf28      	it	cs
 80039d2:	2304      	movcs	r3, #4
 80039d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039d6:	69fb      	ldr	r3, [r7, #28]
 80039d8:	3304      	adds	r3, #4
 80039da:	2b06      	cmp	r3, #6
 80039dc:	d902      	bls.n	80039e4 <NVIC_EncodePriority+0x30>
 80039de:	69fb      	ldr	r3, [r7, #28]
 80039e0:	3b03      	subs	r3, #3
 80039e2:	e000      	b.n	80039e6 <NVIC_EncodePriority+0x32>
 80039e4:	2300      	movs	r3, #0
 80039e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e8:	f04f 32ff 	mov.w	r2, #4294967295
 80039ec:	69bb      	ldr	r3, [r7, #24]
 80039ee:	fa02 f303 	lsl.w	r3, r2, r3
 80039f2:	43da      	mvns	r2, r3
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	401a      	ands	r2, r3
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039fc:	f04f 31ff 	mov.w	r1, #4294967295
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	fa01 f303 	lsl.w	r3, r1, r3
 8003a06:	43d9      	mvns	r1, r3
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a0c:	4313      	orrs	r3, r2
         );
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3724      	adds	r7, #36	@ 0x24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a18:	4770      	bx	lr
	...

08003a1c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2b07      	cmp	r3, #7
 8003a28:	d00f      	beq.n	8003a4a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	2b06      	cmp	r3, #6
 8003a2e:	d00c      	beq.n	8003a4a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2b05      	cmp	r3, #5
 8003a34:	d009      	beq.n	8003a4a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d006      	beq.n	8003a4a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2b03      	cmp	r3, #3
 8003a40:	d003      	beq.n	8003a4a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a42:	2190      	movs	r1, #144	@ 0x90
 8003a44:	4804      	ldr	r0, [pc, #16]	@ (8003a58 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003a46:	f7fe fdb9 	bl	80025bc <assert_failed>
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f7ff ff38 	bl	80038c0 <__NVIC_SetPriorityGrouping>
}
 8003a50:	bf00      	nop
 8003a52:	3708      	adds	r7, #8
 8003a54:	46bd      	mov	sp, r7
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	0800eec8 	.word	0x0800eec8

08003a5c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b086      	sub	sp, #24
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	4603      	mov	r3, r0
 8003a64:	60b9      	str	r1, [r7, #8]
 8003a66:	607a      	str	r2, [r7, #4]
 8003a68:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b0f      	cmp	r3, #15
 8003a72:	d903      	bls.n	8003a7c <HAL_NVIC_SetPriority+0x20>
 8003a74:	21a8      	movs	r1, #168	@ 0xa8
 8003a76:	480e      	ldr	r0, [pc, #56]	@ (8003ab0 <HAL_NVIC_SetPriority+0x54>)
 8003a78:	f7fe fda0 	bl	80025bc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003a7c:	68bb      	ldr	r3, [r7, #8]
 8003a7e:	2b0f      	cmp	r3, #15
 8003a80:	d903      	bls.n	8003a8a <HAL_NVIC_SetPriority+0x2e>
 8003a82:	21a9      	movs	r1, #169	@ 0xa9
 8003a84:	480a      	ldr	r0, [pc, #40]	@ (8003ab0 <HAL_NVIC_SetPriority+0x54>)
 8003a86:	f7fe fd99 	bl	80025bc <assert_failed>
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003a8a:	f7ff ff3d 	bl	8003908 <__NVIC_GetPriorityGrouping>
 8003a8e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	68b9      	ldr	r1, [r7, #8]
 8003a94:	6978      	ldr	r0, [r7, #20]
 8003a96:	f7ff ff8d 	bl	80039b4 <NVIC_EncodePriority>
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f7ff ff5c 	bl	8003960 <__NVIC_SetPriority>
}
 8003aa8:	bf00      	nop
 8003aaa:	3718      	adds	r7, #24
 8003aac:	46bd      	mov	sp, r7
 8003aae:	bd80      	pop	{r7, pc}
 8003ab0:	0800eec8 	.word	0x0800eec8

08003ab4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b082      	sub	sp, #8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	4603      	mov	r3, r0
 8003abc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	da03      	bge.n	8003ace <HAL_NVIC_EnableIRQ+0x1a>
 8003ac6:	21bc      	movs	r1, #188	@ 0xbc
 8003ac8:	4805      	ldr	r0, [pc, #20]	@ (8003ae0 <HAL_NVIC_EnableIRQ+0x2c>)
 8003aca:	f7fe fd77 	bl	80025bc <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	f7ff ff26 	bl	8003924 <__NVIC_EnableIRQ>
}
 8003ad8:	bf00      	nop
 8003ada:	3708      	adds	r7, #8
 8003adc:	46bd      	mov	sp, r7
 8003ade:	bd80      	pop	{r7, pc}
 8003ae0:	0800eec8 	.word	0x0800eec8

08003ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b088      	sub	sp, #32
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003aee:	2300      	movs	r3, #0
 8003af0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003af2:	2300      	movs	r3, #0
 8003af4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003af6:	2300      	movs	r3, #0
 8003af8:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a38      	ldr	r2, [pc, #224]	@ (8003be0 <HAL_GPIO_Init+0xfc>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d023      	beq.n	8003b4a <HAL_GPIO_Init+0x66>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a37      	ldr	r2, [pc, #220]	@ (8003be4 <HAL_GPIO_Init+0x100>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d01f      	beq.n	8003b4a <HAL_GPIO_Init+0x66>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a36      	ldr	r2, [pc, #216]	@ (8003be8 <HAL_GPIO_Init+0x104>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d01b      	beq.n	8003b4a <HAL_GPIO_Init+0x66>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a35      	ldr	r2, [pc, #212]	@ (8003bec <HAL_GPIO_Init+0x108>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d017      	beq.n	8003b4a <HAL_GPIO_Init+0x66>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a34      	ldr	r2, [pc, #208]	@ (8003bf0 <HAL_GPIO_Init+0x10c>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d013      	beq.n	8003b4a <HAL_GPIO_Init+0x66>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a33      	ldr	r2, [pc, #204]	@ (8003bf4 <HAL_GPIO_Init+0x110>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d00f      	beq.n	8003b4a <HAL_GPIO_Init+0x66>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a32      	ldr	r2, [pc, #200]	@ (8003bf8 <HAL_GPIO_Init+0x114>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d00b      	beq.n	8003b4a <HAL_GPIO_Init+0x66>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a31      	ldr	r2, [pc, #196]	@ (8003bfc <HAL_GPIO_Init+0x118>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d007      	beq.n	8003b4a <HAL_GPIO_Init+0x66>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a30      	ldr	r2, [pc, #192]	@ (8003c00 <HAL_GPIO_Init+0x11c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d003      	beq.n	8003b4a <HAL_GPIO_Init+0x66>
 8003b42:	21ac      	movs	r1, #172	@ 0xac
 8003b44:	482f      	ldr	r0, [pc, #188]	@ (8003c04 <HAL_GPIO_Init+0x120>)
 8003b46:	f7fe fd39 	bl	80025bc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	b29b      	uxth	r3, r3
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d004      	beq.n	8003b5e <HAL_GPIO_Init+0x7a>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b5c:	d303      	bcc.n	8003b66 <HAL_GPIO_Init+0x82>
 8003b5e:	21ad      	movs	r1, #173	@ 0xad
 8003b60:	4828      	ldr	r0, [pc, #160]	@ (8003c04 <HAL_GPIO_Init+0x120>)
 8003b62:	f7fe fd2b 	bl	80025bc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d035      	beq.n	8003bda <HAL_GPIO_Init+0xf6>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d031      	beq.n	8003bda <HAL_GPIO_Init+0xf6>
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	2b11      	cmp	r3, #17
 8003b7c:	d02d      	beq.n	8003bda <HAL_GPIO_Init+0xf6>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	685b      	ldr	r3, [r3, #4]
 8003b82:	2b02      	cmp	r3, #2
 8003b84:	d029      	beq.n	8003bda <HAL_GPIO_Init+0xf6>
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	2b12      	cmp	r3, #18
 8003b8c:	d025      	beq.n	8003bda <HAL_GPIO_Init+0xf6>
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8003b96:	d020      	beq.n	8003bda <HAL_GPIO_Init+0xf6>
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8003ba0:	d01b      	beq.n	8003bda <HAL_GPIO_Init+0xf6>
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8003baa:	d016      	beq.n	8003bda <HAL_GPIO_Init+0xf6>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8003bb4:	d011      	beq.n	8003bda <HAL_GPIO_Init+0xf6>
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8003bbe:	d00c      	beq.n	8003bda <HAL_GPIO_Init+0xf6>
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8003bc8:	d007      	beq.n	8003bda <HAL_GPIO_Init+0xf6>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	685b      	ldr	r3, [r3, #4]
 8003bce:	2b03      	cmp	r3, #3
 8003bd0:	d003      	beq.n	8003bda <HAL_GPIO_Init+0xf6>
 8003bd2:	21ae      	movs	r1, #174	@ 0xae
 8003bd4:	480b      	ldr	r0, [pc, #44]	@ (8003c04 <HAL_GPIO_Init+0x120>)
 8003bd6:	f7fe fcf1 	bl	80025bc <assert_failed>

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003bda:	2300      	movs	r3, #0
 8003bdc:	61fb      	str	r3, [r7, #28]
 8003bde:	e241      	b.n	8004064 <HAL_GPIO_Init+0x580>
 8003be0:	40020000 	.word	0x40020000
 8003be4:	40020400 	.word	0x40020400
 8003be8:	40020800 	.word	0x40020800
 8003bec:	40020c00 	.word	0x40020c00
 8003bf0:	40021000 	.word	0x40021000
 8003bf4:	40021400 	.word	0x40021400
 8003bf8:	40021800 	.word	0x40021800
 8003bfc:	40021c00 	.word	0x40021c00
 8003c00:	40022000 	.word	0x40022000
 8003c04:	0800ef04 	.word	0x0800ef04
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c08:	2201      	movs	r2, #1
 8003c0a:	69fb      	ldr	r3, [r7, #28]
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	697a      	ldr	r2, [r7, #20]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	429a      	cmp	r2, r3
 8003c22:	f040 821c 	bne.w	800405e <HAL_GPIO_Init+0x57a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	f003 0303 	and.w	r3, r3, #3
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d005      	beq.n	8003c3e <HAL_GPIO_Init+0x15a>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c3a:	2b02      	cmp	r3, #2
 8003c3c:	d144      	bne.n	8003cc8 <HAL_GPIO_Init+0x1e4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	68db      	ldr	r3, [r3, #12]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d00f      	beq.n	8003c66 <HAL_GPIO_Init+0x182>
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	68db      	ldr	r3, [r3, #12]
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d00b      	beq.n	8003c66 <HAL_GPIO_Init+0x182>
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d007      	beq.n	8003c66 <HAL_GPIO_Init+0x182>
 8003c56:	683b      	ldr	r3, [r7, #0]
 8003c58:	68db      	ldr	r3, [r3, #12]
 8003c5a:	2b03      	cmp	r3, #3
 8003c5c:	d003      	beq.n	8003c66 <HAL_GPIO_Init+0x182>
 8003c5e:	21c0      	movs	r1, #192	@ 0xc0
 8003c60:	4881      	ldr	r0, [pc, #516]	@ (8003e68 <HAL_GPIO_Init+0x384>)
 8003c62:	f7fe fcab 	bl	80025bc <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c6c:	69fb      	ldr	r3, [r7, #28]
 8003c6e:	005b      	lsls	r3, r3, #1
 8003c70:	2203      	movs	r2, #3
 8003c72:	fa02 f303 	lsl.w	r3, r2, r3
 8003c76:	43db      	mvns	r3, r3
 8003c78:	69ba      	ldr	r2, [r7, #24]
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c7e:	683b      	ldr	r3, [r7, #0]
 8003c80:	68da      	ldr	r2, [r3, #12]
 8003c82:	69fb      	ldr	r3, [r7, #28]
 8003c84:	005b      	lsls	r3, r3, #1
 8003c86:	fa02 f303 	lsl.w	r3, r2, r3
 8003c8a:	69ba      	ldr	r2, [r7, #24]
 8003c8c:	4313      	orrs	r3, r2
 8003c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	69ba      	ldr	r2, [r7, #24]
 8003c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	69fb      	ldr	r3, [r7, #28]
 8003ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca4:	43db      	mvns	r3, r3
 8003ca6:	69ba      	ldr	r2, [r7, #24]
 8003ca8:	4013      	ands	r3, r2
 8003caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003cac:	683b      	ldr	r3, [r7, #0]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	091b      	lsrs	r3, r3, #4
 8003cb2:	f003 0201 	and.w	r2, r3, #1
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbc:	69ba      	ldr	r2, [r7, #24]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	69ba      	ldr	r2, [r7, #24]
 8003cc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cc8:	683b      	ldr	r3, [r7, #0]
 8003cca:	685b      	ldr	r3, [r3, #4]
 8003ccc:	f003 0303 	and.w	r3, r3, #3
 8003cd0:	2b03      	cmp	r3, #3
 8003cd2:	d027      	beq.n	8003d24 <HAL_GPIO_Init+0x240>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	689b      	ldr	r3, [r3, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00b      	beq.n	8003cf4 <HAL_GPIO_Init+0x210>
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	2b01      	cmp	r3, #1
 8003ce2:	d007      	beq.n	8003cf4 <HAL_GPIO_Init+0x210>
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	2b02      	cmp	r3, #2
 8003cea:	d003      	beq.n	8003cf4 <HAL_GPIO_Init+0x210>
 8003cec:	21d1      	movs	r1, #209	@ 0xd1
 8003cee:	485e      	ldr	r0, [pc, #376]	@ (8003e68 <HAL_GPIO_Init+0x384>)
 8003cf0:	f7fe fc64 	bl	80025bc <assert_failed>
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cfa:	69fb      	ldr	r3, [r7, #28]
 8003cfc:	005b      	lsls	r3, r3, #1
 8003cfe:	2203      	movs	r2, #3
 8003d00:	fa02 f303 	lsl.w	r3, r2, r3
 8003d04:	43db      	mvns	r3, r3
 8003d06:	69ba      	ldr	r2, [r7, #24]
 8003d08:	4013      	ands	r3, r2
 8003d0a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	689a      	ldr	r2, [r3, #8]
 8003d10:	69fb      	ldr	r3, [r7, #28]
 8003d12:	005b      	lsls	r3, r3, #1
 8003d14:	fa02 f303 	lsl.w	r3, r2, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	2b02      	cmp	r3, #2
 8003d2e:	f040 80c1 	bne.w	8003eb4 <HAL_GPIO_Init+0x3d0>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003d32:	683b      	ldr	r3, [r7, #0]
 8003d34:	691b      	ldr	r3, [r3, #16]
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	f000 8098 	beq.w	8003e6c <HAL_GPIO_Init+0x388>
 8003d3c:	683b      	ldr	r3, [r7, #0]
 8003d3e:	691b      	ldr	r3, [r3, #16]
 8003d40:	2b09      	cmp	r3, #9
 8003d42:	f000 8093 	beq.w	8003e6c <HAL_GPIO_Init+0x388>
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	691b      	ldr	r3, [r3, #16]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	f000 808e 	beq.w	8003e6c <HAL_GPIO_Init+0x388>
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	691b      	ldr	r3, [r3, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 8089 	beq.w	8003e6c <HAL_GPIO_Init+0x388>
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	f000 8084 	beq.w	8003e6c <HAL_GPIO_Init+0x388>
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	691b      	ldr	r3, [r3, #16]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d07f      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	691b      	ldr	r3, [r3, #16]
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	d07b      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003d74:	683b      	ldr	r3, [r7, #0]
 8003d76:	691b      	ldr	r3, [r3, #16]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d077      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	691b      	ldr	r3, [r3, #16]
 8003d80:	2b02      	cmp	r3, #2
 8003d82:	d073      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	2b02      	cmp	r3, #2
 8003d8a:	d06f      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	d06b      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	691b      	ldr	r3, [r3, #16]
 8003d98:	2b03      	cmp	r3, #3
 8003d9a:	d067      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	2b04      	cmp	r3, #4
 8003da2:	d063      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	691b      	ldr	r3, [r3, #16]
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d05f      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	691b      	ldr	r3, [r3, #16]
 8003db0:	2b04      	cmp	r3, #4
 8003db2:	d05b      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	691b      	ldr	r3, [r3, #16]
 8003db8:	2b05      	cmp	r3, #5
 8003dba:	d057      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	691b      	ldr	r3, [r3, #16]
 8003dc0:	2b05      	cmp	r3, #5
 8003dc2:	d053      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	691b      	ldr	r3, [r3, #16]
 8003dc8:	2b09      	cmp	r3, #9
 8003dca:	d04f      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	2b06      	cmp	r3, #6
 8003dd2:	d04b      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	691b      	ldr	r3, [r3, #16]
 8003dd8:	2b09      	cmp	r3, #9
 8003dda:	d047      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	691b      	ldr	r3, [r3, #16]
 8003de0:	2b07      	cmp	r3, #7
 8003de2:	d043      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003de4:	683b      	ldr	r3, [r7, #0]
 8003de6:	691b      	ldr	r3, [r3, #16]
 8003de8:	2b07      	cmp	r3, #7
 8003dea:	d03f      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	691b      	ldr	r3, [r3, #16]
 8003df0:	2b07      	cmp	r3, #7
 8003df2:	d03b      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	2b08      	cmp	r3, #8
 8003dfa:	d037      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003dfc:	683b      	ldr	r3, [r7, #0]
 8003dfe:	691b      	ldr	r3, [r3, #16]
 8003e00:	2b08      	cmp	r3, #8
 8003e02:	d033      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003e04:	683b      	ldr	r3, [r7, #0]
 8003e06:	691b      	ldr	r3, [r3, #16]
 8003e08:	2b08      	cmp	r3, #8
 8003e0a:	d02f      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	2b09      	cmp	r3, #9
 8003e12:	d02b      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	691b      	ldr	r3, [r3, #16]
 8003e18:	2b09      	cmp	r3, #9
 8003e1a:	d027      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	2b0a      	cmp	r3, #10
 8003e22:	d023      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	691b      	ldr	r3, [r3, #16]
 8003e28:	2b0a      	cmp	r3, #10
 8003e2a:	d01f      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	691b      	ldr	r3, [r3, #16]
 8003e30:	2b0b      	cmp	r3, #11
 8003e32:	d01b      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	2b0c      	cmp	r3, #12
 8003e3a:	d017      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	2b0c      	cmp	r3, #12
 8003e42:	d013      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	2b0d      	cmp	r3, #13
 8003e4a:	d00f      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	691b      	ldr	r3, [r3, #16]
 8003e50:	2b0c      	cmp	r3, #12
 8003e52:	d00b      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	2b0f      	cmp	r3, #15
 8003e5a:	d007      	beq.n	8003e6c <HAL_GPIO_Init+0x388>
 8003e5c:	21de      	movs	r1, #222	@ 0xde
 8003e5e:	4802      	ldr	r0, [pc, #8]	@ (8003e68 <HAL_GPIO_Init+0x384>)
 8003e60:	f7fe fbac 	bl	80025bc <assert_failed>
 8003e64:	e002      	b.n	8003e6c <HAL_GPIO_Init+0x388>
 8003e66:	bf00      	nop
 8003e68:	0800ef04 	.word	0x0800ef04
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	08da      	lsrs	r2, r3, #3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3208      	adds	r2, #8
 8003e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	220f      	movs	r2, #15
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	08da      	lsrs	r2, r3, #3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3208      	adds	r2, #8
 8003eae:	69b9      	ldr	r1, [r7, #24]
 8003eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 0203 	and.w	r2, r3, #3
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 80b4 	beq.w	800405e <HAL_GPIO_Init+0x57a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	4b5f      	ldr	r3, [pc, #380]	@ (8004078 <HAL_GPIO_Init+0x594>)
 8003efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efe:	4a5e      	ldr	r2, [pc, #376]	@ (8004078 <HAL_GPIO_Init+0x594>)
 8003f00:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f04:	6453      	str	r3, [r2, #68]	@ 0x44
 8003f06:	4b5c      	ldr	r3, [pc, #368]	@ (8004078 <HAL_GPIO_Init+0x594>)
 8003f08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f0a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f12:	4a5a      	ldr	r2, [pc, #360]	@ (800407c <HAL_GPIO_Init+0x598>)
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	089b      	lsrs	r3, r3, #2
 8003f18:	3302      	adds	r3, #2
 8003f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	220f      	movs	r2, #15
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4013      	ands	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a51      	ldr	r2, [pc, #324]	@ (8004080 <HAL_GPIO_Init+0x59c>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d02b      	beq.n	8003f96 <HAL_GPIO_Init+0x4b2>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a50      	ldr	r2, [pc, #320]	@ (8004084 <HAL_GPIO_Init+0x5a0>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d025      	beq.n	8003f92 <HAL_GPIO_Init+0x4ae>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a4f      	ldr	r2, [pc, #316]	@ (8004088 <HAL_GPIO_Init+0x5a4>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d01f      	beq.n	8003f8e <HAL_GPIO_Init+0x4aa>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a4e      	ldr	r2, [pc, #312]	@ (800408c <HAL_GPIO_Init+0x5a8>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d019      	beq.n	8003f8a <HAL_GPIO_Init+0x4a6>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a4d      	ldr	r2, [pc, #308]	@ (8004090 <HAL_GPIO_Init+0x5ac>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d013      	beq.n	8003f86 <HAL_GPIO_Init+0x4a2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a4c      	ldr	r2, [pc, #304]	@ (8004094 <HAL_GPIO_Init+0x5b0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d00d      	beq.n	8003f82 <HAL_GPIO_Init+0x49e>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a4b      	ldr	r2, [pc, #300]	@ (8004098 <HAL_GPIO_Init+0x5b4>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d007      	beq.n	8003f7e <HAL_GPIO_Init+0x49a>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a4a      	ldr	r2, [pc, #296]	@ (800409c <HAL_GPIO_Init+0x5b8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d101      	bne.n	8003f7a <HAL_GPIO_Init+0x496>
 8003f76:	2307      	movs	r3, #7
 8003f78:	e00e      	b.n	8003f98 <HAL_GPIO_Init+0x4b4>
 8003f7a:	2308      	movs	r3, #8
 8003f7c:	e00c      	b.n	8003f98 <HAL_GPIO_Init+0x4b4>
 8003f7e:	2306      	movs	r3, #6
 8003f80:	e00a      	b.n	8003f98 <HAL_GPIO_Init+0x4b4>
 8003f82:	2305      	movs	r3, #5
 8003f84:	e008      	b.n	8003f98 <HAL_GPIO_Init+0x4b4>
 8003f86:	2304      	movs	r3, #4
 8003f88:	e006      	b.n	8003f98 <HAL_GPIO_Init+0x4b4>
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e004      	b.n	8003f98 <HAL_GPIO_Init+0x4b4>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e002      	b.n	8003f98 <HAL_GPIO_Init+0x4b4>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <HAL_GPIO_Init+0x4b4>
 8003f96:	2300      	movs	r3, #0
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	f002 0203 	and.w	r2, r2, #3
 8003f9e:	0092      	lsls	r2, r2, #2
 8003fa0:	4093      	lsls	r3, r2
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fa8:	4934      	ldr	r1, [pc, #208]	@ (800407c <HAL_GPIO_Init+0x598>)
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	089b      	lsrs	r3, r3, #2
 8003fae:	3302      	adds	r3, #2
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003fb6:	4b3a      	ldr	r3, [pc, #232]	@ (80040a0 <HAL_GPIO_Init+0x5bc>)
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_GPIO_Init+0x4f6>
        {
          temp |= iocurrent;
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003fda:	4a31      	ldr	r2, [pc, #196]	@ (80040a0 <HAL_GPIO_Init+0x5bc>)
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003fe0:	4b2f      	ldr	r3, [pc, #188]	@ (80040a0 <HAL_GPIO_Init+0x5bc>)
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_GPIO_Init+0x520>
        {
          temp |= iocurrent;
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004004:	4a26      	ldr	r2, [pc, #152]	@ (80040a0 <HAL_GPIO_Init+0x5bc>)
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800400a:	4b25      	ldr	r3, [pc, #148]	@ (80040a0 <HAL_GPIO_Init+0x5bc>)
 800400c:	685b      	ldr	r3, [r3, #4]
 800400e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	43db      	mvns	r3, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4013      	ands	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_GPIO_Init+0x54a>
        {
          temp |= iocurrent;
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800402e:	4a1c      	ldr	r2, [pc, #112]	@ (80040a0 <HAL_GPIO_Init+0x5bc>)
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004034:	4b1a      	ldr	r3, [pc, #104]	@ (80040a0 <HAL_GPIO_Init+0x5bc>)
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	43db      	mvns	r3, r3
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4013      	ands	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_GPIO_Init+0x574>
        {
          temp |= iocurrent;
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004058:	4a11      	ldr	r2, [pc, #68]	@ (80040a0 <HAL_GPIO_Init+0x5bc>)
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	3301      	adds	r3, #1
 8004062:	61fb      	str	r3, [r7, #28]
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	2b0f      	cmp	r3, #15
 8004068:	f67f adce 	bls.w	8003c08 <HAL_GPIO_Init+0x124>
      }
    }
  }
}
 800406c:	bf00      	nop
 800406e:	bf00      	nop
 8004070:	3720      	adds	r7, #32
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	40023800 	.word	0x40023800
 800407c:	40013800 	.word	0x40013800
 8004080:	40020000 	.word	0x40020000
 8004084:	40020400 	.word	0x40020400
 8004088:	40020800 	.word	0x40020800
 800408c:	40020c00 	.word	0x40020c00
 8004090:	40021000 	.word	0x40021000
 8004094:	40021400 	.word	0x40021400
 8004098:	40021800 	.word	0x40021800
 800409c:	40021c00 	.word	0x40021c00
 80040a0:	40013c00 	.word	0x40013c00

080040a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	b082      	sub	sp, #8
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
 80040ac:	460b      	mov	r3, r1
 80040ae:	807b      	strh	r3, [r7, #2]
 80040b0:	4613      	mov	r3, r2
 80040b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 80040b4:	887b      	ldrh	r3, [r7, #2]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d104      	bne.n	80040c4 <HAL_GPIO_WritePin+0x20>
 80040ba:	f240 119d 	movw	r1, #413	@ 0x19d
 80040be:	480e      	ldr	r0, [pc, #56]	@ (80040f8 <HAL_GPIO_WritePin+0x54>)
 80040c0:	f7fe fa7c 	bl	80025bc <assert_failed>
  assert_param(IS_GPIO_PIN_ACTION(PinState));
 80040c4:	787b      	ldrb	r3, [r7, #1]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d007      	beq.n	80040da <HAL_GPIO_WritePin+0x36>
 80040ca:	787b      	ldrb	r3, [r7, #1]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d004      	beq.n	80040da <HAL_GPIO_WritePin+0x36>
 80040d0:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 80040d4:	4808      	ldr	r0, [pc, #32]	@ (80040f8 <HAL_GPIO_WritePin+0x54>)
 80040d6:	f7fe fa71 	bl	80025bc <assert_failed>

  if(PinState != GPIO_PIN_RESET)
 80040da:	787b      	ldrb	r3, [r7, #1]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d003      	beq.n	80040e8 <HAL_GPIO_WritePin+0x44>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040e0:	887a      	ldrh	r2, [r7, #2]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040e6:	e003      	b.n	80040f0 <HAL_GPIO_WritePin+0x4c>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040e8:	887b      	ldrh	r3, [r7, #2]
 80040ea:	041a      	lsls	r2, r3, #16
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	619a      	str	r2, [r3, #24]
}
 80040f0:	bf00      	nop
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	0800ef04 	.word	0x0800ef04

080040fc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80040fc:	b580      	push	{r7, lr}
 80040fe:	b084      	sub	sp, #16
 8004100:	af00      	add	r7, sp, #0
 8004102:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d101      	bne.n	800410e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800410a:	2301      	movs	r3, #1
 800410c:	e1ba      	b.n	8004484 <HAL_I2C_Init+0x388>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	4a9d      	ldr	r2, [pc, #628]	@ (8004388 <HAL_I2C_Init+0x28c>)
 8004114:	4293      	cmp	r3, r2
 8004116:	d00e      	beq.n	8004136 <HAL_I2C_Init+0x3a>
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4a9b      	ldr	r2, [pc, #620]	@ (800438c <HAL_I2C_Init+0x290>)
 800411e:	4293      	cmp	r3, r2
 8004120:	d009      	beq.n	8004136 <HAL_I2C_Init+0x3a>
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4a9a      	ldr	r2, [pc, #616]	@ (8004390 <HAL_I2C_Init+0x294>)
 8004128:	4293      	cmp	r3, r2
 800412a:	d004      	beq.n	8004136 <HAL_I2C_Init+0x3a>
 800412c:	f240 11c9 	movw	r1, #457	@ 0x1c9
 8004130:	4898      	ldr	r0, [pc, #608]	@ (8004394 <HAL_I2C_Init+0x298>)
 8004132:	f7fe fa43 	bl	80025bc <assert_failed>
  assert_param(IS_I2C_CLOCK_SPEED(hi2c->Init.ClockSpeed));
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	685b      	ldr	r3, [r3, #4]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d004      	beq.n	8004148 <HAL_I2C_Init+0x4c>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	4a95      	ldr	r2, [pc, #596]	@ (8004398 <HAL_I2C_Init+0x29c>)
 8004144:	4293      	cmp	r3, r2
 8004146:	d904      	bls.n	8004152 <HAL_I2C_Init+0x56>
 8004148:	f44f 71e5 	mov.w	r1, #458	@ 0x1ca
 800414c:	4891      	ldr	r0, [pc, #580]	@ (8004394 <HAL_I2C_Init+0x298>)
 800414e:	f7fe fa35 	bl	80025bc <assert_failed>
  assert_param(IS_I2C_DUTY_CYCLE(hi2c->Init.DutyCycle));
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d009      	beq.n	800416e <HAL_I2C_Init+0x72>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004162:	d004      	beq.n	800416e <HAL_I2C_Init+0x72>
 8004164:	f240 11cb 	movw	r1, #459	@ 0x1cb
 8004168:	488a      	ldr	r0, [pc, #552]	@ (8004394 <HAL_I2C_Init+0x298>)
 800416a:	f7fe fa27 	bl	80025bc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	68db      	ldr	r3, [r3, #12]
 8004172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004176:	d304      	bcc.n	8004182 <HAL_I2C_Init+0x86>
 8004178:	f44f 71e6 	mov.w	r1, #460	@ 0x1cc
 800417c:	4885      	ldr	r0, [pc, #532]	@ (8004394 <HAL_I2C_Init+0x298>)
 800417e:	f7fe fa1d 	bl	80025bc <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800418a:	d009      	beq.n	80041a0 <HAL_I2C_Init+0xa4>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	691b      	ldr	r3, [r3, #16]
 8004190:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8004194:	d004      	beq.n	80041a0 <HAL_I2C_Init+0xa4>
 8004196:	f240 11cd 	movw	r1, #461	@ 0x1cd
 800419a:	487e      	ldr	r0, [pc, #504]	@ (8004394 <HAL_I2C_Init+0x298>)
 800419c:	f7fe fa0e 	bl	80025bc <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	695b      	ldr	r3, [r3, #20]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d008      	beq.n	80041ba <HAL_I2C_Init+0xbe>
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	695b      	ldr	r3, [r3, #20]
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d004      	beq.n	80041ba <HAL_I2C_Init+0xbe>
 80041b0:	f44f 71e7 	mov.w	r1, #462	@ 0x1ce
 80041b4:	4877      	ldr	r0, [pc, #476]	@ (8004394 <HAL_I2C_Init+0x298>)
 80041b6:	f7fe fa01 	bl	80025bc <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	699b      	ldr	r3, [r3, #24]
 80041be:	f023 03fe 	bic.w	r3, r3, #254	@ 0xfe
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d004      	beq.n	80041d0 <HAL_I2C_Init+0xd4>
 80041c6:	f240 11cf 	movw	r1, #463	@ 0x1cf
 80041ca:	4872      	ldr	r0, [pc, #456]	@ (8004394 <HAL_I2C_Init+0x298>)
 80041cc:	f7fe f9f6 	bl	80025bc <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	69db      	ldr	r3, [r3, #28]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d008      	beq.n	80041ea <HAL_I2C_Init+0xee>
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	69db      	ldr	r3, [r3, #28]
 80041dc:	2b40      	cmp	r3, #64	@ 0x40
 80041de:	d004      	beq.n	80041ea <HAL_I2C_Init+0xee>
 80041e0:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 80041e4:	486b      	ldr	r0, [pc, #428]	@ (8004394 <HAL_I2C_Init+0x298>)
 80041e6:	f7fe f9e9 	bl	80025bc <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d008      	beq.n	8004204 <HAL_I2C_Init+0x108>
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	2b80      	cmp	r3, #128	@ 0x80
 80041f8:	d004      	beq.n	8004204 <HAL_I2C_Init+0x108>
 80041fa:	f240 11d1 	movw	r1, #465	@ 0x1d1
 80041fe:	4865      	ldr	r0, [pc, #404]	@ (8004394 <HAL_I2C_Init+0x298>)
 8004200:	f7fe f9dc 	bl	80025bc <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b00      	cmp	r3, #0
 800420e:	d106      	bne.n	800421e <HAL_I2C_Init+0x122>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7fe fb41 	bl	80028a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2224      	movs	r2, #36	@ 0x24
 8004222:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 0201 	bic.w	r2, r2, #1
 8004234:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004244:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	681a      	ldr	r2, [r3, #0]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004254:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004256:	f001 fd9d 	bl	8005d94 <HAL_RCC_GetPCLK1Freq>
 800425a:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	4a4e      	ldr	r2, [pc, #312]	@ (800439c <HAL_I2C_Init+0x2a0>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d807      	bhi.n	8004276 <HAL_I2C_Init+0x17a>
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	4a4d      	ldr	r2, [pc, #308]	@ (80043a0 <HAL_I2C_Init+0x2a4>)
 800426a:	4293      	cmp	r3, r2
 800426c:	bf94      	ite	ls
 800426e:	2301      	movls	r3, #1
 8004270:	2300      	movhi	r3, #0
 8004272:	b2db      	uxtb	r3, r3
 8004274:	e006      	b.n	8004284 <HAL_I2C_Init+0x188>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4a4a      	ldr	r2, [pc, #296]	@ (80043a4 <HAL_I2C_Init+0x2a8>)
 800427a:	4293      	cmp	r3, r2
 800427c:	bf94      	ite	ls
 800427e:	2301      	movls	r3, #1
 8004280:	2300      	movhi	r3, #0
 8004282:	b2db      	uxtb	r3, r3
 8004284:	2b00      	cmp	r3, #0
 8004286:	d001      	beq.n	800428c <HAL_I2C_Init+0x190>
  {
    return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e0fb      	b.n	8004484 <HAL_I2C_Init+0x388>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	4a46      	ldr	r2, [pc, #280]	@ (80043a8 <HAL_I2C_Init+0x2ac>)
 8004290:	fba2 2303 	umull	r2, r3, r2, r3
 8004294:	0c9b      	lsrs	r3, r3, #18
 8004296:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	68ba      	ldr	r2, [r7, #8]
 80042a8:	430a      	orrs	r2, r1
 80042aa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6a1b      	ldr	r3, [r3, #32]
 80042b2:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	4a38      	ldr	r2, [pc, #224]	@ (800439c <HAL_I2C_Init+0x2a0>)
 80042bc:	4293      	cmp	r3, r2
 80042be:	d802      	bhi.n	80042c6 <HAL_I2C_Init+0x1ca>
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	3301      	adds	r3, #1
 80042c4:	e009      	b.n	80042da <HAL_I2C_Init+0x1de>
 80042c6:	68bb      	ldr	r3, [r7, #8]
 80042c8:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80042cc:	fb02 f303 	mul.w	r3, r2, r3
 80042d0:	4a36      	ldr	r2, [pc, #216]	@ (80043ac <HAL_I2C_Init+0x2b0>)
 80042d2:	fba2 2303 	umull	r2, r3, r2, r3
 80042d6:	099b      	lsrs	r3, r3, #6
 80042d8:	3301      	adds	r3, #1
 80042da:	687a      	ldr	r2, [r7, #4]
 80042dc:	6812      	ldr	r2, [r2, #0]
 80042de:	430b      	orrs	r3, r1
 80042e0:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	69db      	ldr	r3, [r3, #28]
 80042e8:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80042ec:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	685b      	ldr	r3, [r3, #4]
 80042f4:	4929      	ldr	r1, [pc, #164]	@ (800439c <HAL_I2C_Init+0x2a0>)
 80042f6:	428b      	cmp	r3, r1
 80042f8:	d819      	bhi.n	800432e <HAL_I2C_Init+0x232>
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	1e59      	subs	r1, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	fbb1 f3f3 	udiv	r3, r1, r3
 8004308:	1c59      	adds	r1, r3, #1
 800430a:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800430e:	400b      	ands	r3, r1
 8004310:	2b00      	cmp	r3, #0
 8004312:	d00a      	beq.n	800432a <HAL_I2C_Init+0x22e>
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	1e59      	subs	r1, r3, #1
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	685b      	ldr	r3, [r3, #4]
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	fbb1 f3f3 	udiv	r3, r1, r3
 8004322:	3301      	adds	r3, #1
 8004324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004328:	e065      	b.n	80043f6 <HAL_I2C_Init+0x2fa>
 800432a:	2304      	movs	r3, #4
 800432c:	e063      	b.n	80043f6 <HAL_I2C_Init+0x2fa>
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d111      	bne.n	800435a <HAL_I2C_Init+0x25e>
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	1e58      	subs	r0, r3, #1
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6859      	ldr	r1, [r3, #4]
 800433e:	460b      	mov	r3, r1
 8004340:	005b      	lsls	r3, r3, #1
 8004342:	440b      	add	r3, r1
 8004344:	fbb0 f3f3 	udiv	r3, r0, r3
 8004348:	3301      	adds	r3, #1
 800434a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800434e:	2b00      	cmp	r3, #0
 8004350:	bf0c      	ite	eq
 8004352:	2301      	moveq	r3, #1
 8004354:	2300      	movne	r3, #0
 8004356:	b2db      	uxtb	r3, r3
 8004358:	e012      	b.n	8004380 <HAL_I2C_Init+0x284>
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	1e58      	subs	r0, r3, #1
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6859      	ldr	r1, [r3, #4]
 8004362:	460b      	mov	r3, r1
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	440b      	add	r3, r1
 8004368:	0099      	lsls	r1, r3, #2
 800436a:	440b      	add	r3, r1
 800436c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004370:	3301      	adds	r3, #1
 8004372:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004376:	2b00      	cmp	r3, #0
 8004378:	bf0c      	ite	eq
 800437a:	2301      	moveq	r3, #1
 800437c:	2300      	movne	r3, #0
 800437e:	b2db      	uxtb	r3, r3
 8004380:	2b00      	cmp	r3, #0
 8004382:	d015      	beq.n	80043b0 <HAL_I2C_Init+0x2b4>
 8004384:	2301      	movs	r3, #1
 8004386:	e036      	b.n	80043f6 <HAL_I2C_Init+0x2fa>
 8004388:	40005400 	.word	0x40005400
 800438c:	40005800 	.word	0x40005800
 8004390:	40005c00 	.word	0x40005c00
 8004394:	0800ef40 	.word	0x0800ef40
 8004398:	00061a80 	.word	0x00061a80
 800439c:	000186a0 	.word	0x000186a0
 80043a0:	001e847f 	.word	0x001e847f
 80043a4:	003d08ff 	.word	0x003d08ff
 80043a8:	431bde83 	.word	0x431bde83
 80043ac:	10624dd3 	.word	0x10624dd3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10e      	bne.n	80043d6 <HAL_I2C_Init+0x2da>
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	1e58      	subs	r0, r3, #1
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6859      	ldr	r1, [r3, #4]
 80043c0:	460b      	mov	r3, r1
 80043c2:	005b      	lsls	r3, r3, #1
 80043c4:	440b      	add	r3, r1
 80043c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ca:	3301      	adds	r3, #1
 80043cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80043d4:	e00f      	b.n	80043f6 <HAL_I2C_Init+0x2fa>
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	1e58      	subs	r0, r3, #1
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6859      	ldr	r1, [r3, #4]
 80043de:	460b      	mov	r3, r1
 80043e0:	009b      	lsls	r3, r3, #2
 80043e2:	440b      	add	r3, r1
 80043e4:	0099      	lsls	r1, r3, #2
 80043e6:	440b      	add	r3, r1
 80043e8:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ec:	3301      	adds	r3, #1
 80043ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043f2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	6809      	ldr	r1, [r1, #0]
 80043fa:	4313      	orrs	r3, r2
 80043fc:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	69da      	ldr	r2, [r3, #28]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	6a1b      	ldr	r3, [r3, #32]
 8004410:	431a      	orrs	r2, r3
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	430a      	orrs	r2, r1
 8004418:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689b      	ldr	r3, [r3, #8]
 8004420:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004424:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	6911      	ldr	r1, [r2, #16]
 800442c:	687a      	ldr	r2, [r7, #4]
 800442e:	68d2      	ldr	r2, [r2, #12]
 8004430:	4311      	orrs	r1, r2
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6812      	ldr	r2, [r2, #0]
 8004436:	430b      	orrs	r3, r1
 8004438:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	68db      	ldr	r3, [r3, #12]
 8004440:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	695a      	ldr	r2, [r3, #20]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	431a      	orrs	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f042 0201 	orr.w	r2, r2, #1
 8004464:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2220      	movs	r2, #32
 8004470:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004482:	2300      	movs	r3, #0
}
 8004484:	4618      	mov	r0, r3
 8004486:	3710      	adds	r7, #16
 8004488:	46bd      	mov	sp, r7
 800448a:	bd80      	pop	{r7, pc}

0800448c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b088      	sub	sp, #32
 8004490:	af02      	add	r7, sp, #8
 8004492:	60f8      	str	r0, [r7, #12]
 8004494:	4608      	mov	r0, r1
 8004496:	4611      	mov	r1, r2
 8004498:	461a      	mov	r2, r3
 800449a:	4603      	mov	r3, r0
 800449c:	817b      	strh	r3, [r7, #10]
 800449e:	460b      	mov	r3, r1
 80044a0:	813b      	strh	r3, [r7, #8]
 80044a2:	4613      	mov	r3, r2
 80044a4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80044a6:	f7fe fc29 	bl	8002cfc <HAL_GetTick>
 80044aa:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80044ac:	88fb      	ldrh	r3, [r7, #6]
 80044ae:	2b01      	cmp	r3, #1
 80044b0:	d007      	beq.n	80044c2 <HAL_I2C_Mem_Write+0x36>
 80044b2:	88fb      	ldrh	r3, [r7, #6]
 80044b4:	2b10      	cmp	r3, #16
 80044b6:	d004      	beq.n	80044c2 <HAL_I2C_Mem_Write+0x36>
 80044b8:	f640 11cd 	movw	r1, #2509	@ 0x9cd
 80044bc:	4873      	ldr	r0, [pc, #460]	@ (800468c <HAL_I2C_Mem_Write+0x200>)
 80044be:	f7fe f87d 	bl	80025bc <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b20      	cmp	r3, #32
 80044cc:	f040 80d9 	bne.w	8004682 <HAL_I2C_Mem_Write+0x1f6>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80044d0:	697b      	ldr	r3, [r7, #20]
 80044d2:	9300      	str	r3, [sp, #0]
 80044d4:	2319      	movs	r3, #25
 80044d6:	2201      	movs	r2, #1
 80044d8:	496d      	ldr	r1, [pc, #436]	@ (8004690 <HAL_I2C_Mem_Write+0x204>)
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 fc98 	bl	8004e10 <I2C_WaitOnFlagUntilTimeout>
 80044e0:	4603      	mov	r3, r0
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d001      	beq.n	80044ea <HAL_I2C_Mem_Write+0x5e>
    {
      return HAL_BUSY;
 80044e6:	2302      	movs	r3, #2
 80044e8:	e0cc      	b.n	8004684 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80044f0:	2b01      	cmp	r3, #1
 80044f2:	d101      	bne.n	80044f8 <HAL_I2C_Mem_Write+0x6c>
 80044f4:	2302      	movs	r3, #2
 80044f6:	e0c5      	b.n	8004684 <HAL_I2C_Mem_Write+0x1f8>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0301 	and.w	r3, r3, #1
 800450a:	2b01      	cmp	r3, #1
 800450c:	d007      	beq.n	800451e <HAL_I2C_Mem_Write+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0201 	orr.w	r2, r2, #1
 800451c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800452c:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2221      	movs	r2, #33	@ 0x21
 8004532:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2240      	movs	r2, #64	@ 0x40
 800453a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	2200      	movs	r2, #0
 8004542:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a3a      	ldr	r2, [r7, #32]
 8004548:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800454e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4a4d      	ldr	r2, [pc, #308]	@ (8004694 <HAL_I2C_Mem_Write+0x208>)
 800455e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004560:	88f8      	ldrh	r0, [r7, #6]
 8004562:	893a      	ldrh	r2, [r7, #8]
 8004564:	8979      	ldrh	r1, [r7, #10]
 8004566:	697b      	ldr	r3, [r7, #20]
 8004568:	9301      	str	r3, [sp, #4]
 800456a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800456c:	9300      	str	r3, [sp, #0]
 800456e:	4603      	mov	r3, r0
 8004570:	68f8      	ldr	r0, [r7, #12]
 8004572:	f000 facf 	bl	8004b14 <I2C_RequestMemoryWrite>
 8004576:	4603      	mov	r3, r0
 8004578:	2b00      	cmp	r3, #0
 800457a:	d052      	beq.n	8004622 <HAL_I2C_Mem_Write+0x196>
    {
      return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e081      	b.n	8004684 <HAL_I2C_Mem_Write+0x1f8>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004584:	68f8      	ldr	r0, [r7, #12]
 8004586:	f000 fd5d 	bl	8005044 <I2C_WaitOnTXEFlagUntilTimeout>
 800458a:	4603      	mov	r3, r0
 800458c:	2b00      	cmp	r3, #0
 800458e:	d00d      	beq.n	80045ac <HAL_I2C_Mem_Write+0x120>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004594:	2b04      	cmp	r3, #4
 8004596:	d107      	bne.n	80045a8 <HAL_I2C_Mem_Write+0x11c>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80045a6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e06b      	b.n	8004684 <HAL_I2C_Mem_Write+0x1f8>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045b0:	781a      	ldrb	r2, [r3, #0]
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045bc:	1c5a      	adds	r2, r3, #1
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045c6:	3b01      	subs	r3, #1
 80045c8:	b29a      	uxth	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	695b      	ldr	r3, [r3, #20]
 80045e2:	f003 0304 	and.w	r3, r3, #4
 80045e6:	2b04      	cmp	r3, #4
 80045e8:	d11b      	bne.n	8004622 <HAL_I2C_Mem_Write+0x196>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d017      	beq.n	8004622 <HAL_I2C_Mem_Write+0x196>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045f6:	781a      	ldrb	r2, [r3, #0]
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004602:	1c5a      	adds	r2, r3, #1
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800460c:	3b01      	subs	r3, #1
 800460e:	b29a      	uxth	r2, r3
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004618:	b29b      	uxth	r3, r3
 800461a:	3b01      	subs	r3, #1
 800461c:	b29a      	uxth	r2, r3
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004626:	2b00      	cmp	r3, #0
 8004628:	d1aa      	bne.n	8004580 <HAL_I2C_Mem_Write+0xf4>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800462e:	68f8      	ldr	r0, [r7, #12]
 8004630:	f000 fd50 	bl	80050d4 <I2C_WaitOnBTFFlagUntilTimeout>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d00d      	beq.n	8004656 <HAL_I2C_Mem_Write+0x1ca>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800463e:	2b04      	cmp	r3, #4
 8004640:	d107      	bne.n	8004652 <HAL_I2C_Mem_Write+0x1c6>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004650:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004652:	2301      	movs	r3, #1
 8004654:	e016      	b.n	8004684 <HAL_I2C_Mem_Write+0x1f8>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	681a      	ldr	r2, [r3, #0]
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004664:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	2220      	movs	r2, #32
 800466a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800467e:	2300      	movs	r3, #0
 8004680:	e000      	b.n	8004684 <HAL_I2C_Mem_Write+0x1f8>
  }
  else
  {
    return HAL_BUSY;
 8004682:	2302      	movs	r3, #2
  }
}
 8004684:	4618      	mov	r0, r3
 8004686:	3718      	adds	r7, #24
 8004688:	46bd      	mov	sp, r7
 800468a:	bd80      	pop	{r7, pc}
 800468c:	0800ef40 	.word	0x0800ef40
 8004690:	00100002 	.word	0x00100002
 8004694:	ffff0000 	.word	0xffff0000

08004698 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004698:	b580      	push	{r7, lr}
 800469a:	b08c      	sub	sp, #48	@ 0x30
 800469c:	af02      	add	r7, sp, #8
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	4608      	mov	r0, r1
 80046a2:	4611      	mov	r1, r2
 80046a4:	461a      	mov	r2, r3
 80046a6:	4603      	mov	r3, r0
 80046a8:	817b      	strh	r3, [r7, #10]
 80046aa:	460b      	mov	r3, r1
 80046ac:	813b      	strh	r3, [r7, #8]
 80046ae:	4613      	mov	r3, r2
 80046b0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046b2:	f7fe fb23 	bl	8002cfc <HAL_GetTick>
 80046b6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));
 80046b8:	88fb      	ldrh	r3, [r7, #6]
 80046ba:	2b01      	cmp	r3, #1
 80046bc:	d007      	beq.n	80046ce <HAL_I2C_Mem_Read+0x36>
 80046be:	88fb      	ldrh	r3, [r7, #6]
 80046c0:	2b10      	cmp	r3, #16
 80046c2:	d004      	beq.n	80046ce <HAL_I2C_Mem_Read+0x36>
 80046c4:	f640 2148 	movw	r1, #2632	@ 0xa48
 80046c8:	4881      	ldr	r0, [pc, #516]	@ (80048d0 <HAL_I2C_Mem_Read+0x238>)
 80046ca:	f7fd ff77 	bl	80025bc <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	2b20      	cmp	r3, #32
 80046d8:	f040 8215 	bne.w	8004b06 <HAL_I2C_Mem_Read+0x46e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80046dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	2319      	movs	r3, #25
 80046e2:	2201      	movs	r2, #1
 80046e4:	497b      	ldr	r1, [pc, #492]	@ (80048d4 <HAL_I2C_Mem_Read+0x23c>)
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 fb92 	bl	8004e10 <I2C_WaitOnFlagUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d001      	beq.n	80046f6 <HAL_I2C_Mem_Read+0x5e>
    {
      return HAL_BUSY;
 80046f2:	2302      	movs	r3, #2
 80046f4:	e208      	b.n	8004b08 <HAL_I2C_Mem_Read+0x470>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d101      	bne.n	8004704 <HAL_I2C_Mem_Read+0x6c>
 8004700:	2302      	movs	r3, #2
 8004702:	e201      	b.n	8004b08 <HAL_I2C_Mem_Read+0x470>
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f003 0301 	and.w	r3, r3, #1
 8004716:	2b01      	cmp	r3, #1
 8004718:	d007      	beq.n	800472a <HAL_I2C_Mem_Read+0x92>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681a      	ldr	r2, [r3, #0]
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f042 0201 	orr.w	r2, r2, #1
 8004728:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004738:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	2222      	movs	r2, #34	@ 0x22
 800473e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	2240      	movs	r2, #64	@ 0x40
 8004746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	2200      	movs	r2, #0
 800474e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004754:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 800475a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004760:	b29a      	uxth	r2, r3
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	4a5b      	ldr	r2, [pc, #364]	@ (80048d8 <HAL_I2C_Mem_Read+0x240>)
 800476a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800476c:	88f8      	ldrh	r0, [r7, #6]
 800476e:	893a      	ldrh	r2, [r7, #8]
 8004770:	8979      	ldrh	r1, [r7, #10]
 8004772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004774:	9301      	str	r3, [sp, #4]
 8004776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	4603      	mov	r3, r0
 800477c:	68f8      	ldr	r0, [r7, #12]
 800477e:	f000 fa5f 	bl	8004c40 <I2C_RequestMemoryRead>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d001      	beq.n	800478c <HAL_I2C_Mem_Read+0xf4>
    {
      return HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	e1bd      	b.n	8004b08 <HAL_I2C_Mem_Read+0x470>
    }

    if (hi2c->XferSize == 0U)
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004790:	2b00      	cmp	r3, #0
 8004792:	d113      	bne.n	80047bc <HAL_I2C_Mem_Read+0x124>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004794:	2300      	movs	r3, #0
 8004796:	623b      	str	r3, [r7, #32]
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	695b      	ldr	r3, [r3, #20]
 800479e:	623b      	str	r3, [r7, #32]
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	699b      	ldr	r3, [r3, #24]
 80047a6:	623b      	str	r3, [r7, #32]
 80047a8:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047b8:	601a      	str	r2, [r3, #0]
 80047ba:	e191      	b.n	8004ae0 <HAL_I2C_Mem_Read+0x448>
    }
    else if (hi2c->XferSize == 1U)
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d11b      	bne.n	80047fc <HAL_I2C_Mem_Read+0x164>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80047d2:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047d4:	2300      	movs	r3, #0
 80047d6:	61fb      	str	r3, [r7, #28]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	695b      	ldr	r3, [r3, #20]
 80047de:	61fb      	str	r3, [r7, #28]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	699b      	ldr	r3, [r3, #24]
 80047e6:	61fb      	str	r3, [r7, #28]
 80047e8:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80047f8:	601a      	str	r2, [r3, #0]
 80047fa:	e171      	b.n	8004ae0 <HAL_I2C_Mem_Read+0x448>
    }
    else if (hi2c->XferSize == 2U)
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004800:	2b02      	cmp	r3, #2
 8004802:	d11b      	bne.n	800483c <HAL_I2C_Mem_Read+0x1a4>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	681a      	ldr	r2, [r3, #0]
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004812:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	681a      	ldr	r2, [r3, #0]
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004822:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004824:	2300      	movs	r3, #0
 8004826:	61bb      	str	r3, [r7, #24]
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	695b      	ldr	r3, [r3, #20]
 800482e:	61bb      	str	r3, [r7, #24]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	699b      	ldr	r3, [r3, #24]
 8004836:	61bb      	str	r3, [r7, #24]
 8004838:	69bb      	ldr	r3, [r7, #24]
 800483a:	e151      	b.n	8004ae0 <HAL_I2C_Mem_Read+0x448>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800483c:	2300      	movs	r3, #0
 800483e:	617b      	str	r3, [r7, #20]
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	617b      	str	r3, [r7, #20]
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	617b      	str	r3, [r7, #20]
 8004850:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004852:	e145      	b.n	8004ae0 <HAL_I2C_Mem_Read+0x448>
    {
      if (hi2c->XferSize <= 3U)
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004858:	2b03      	cmp	r3, #3
 800485a:	f200 80f2 	bhi.w	8004a42 <HAL_I2C_Mem_Read+0x3aa>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004862:	2b01      	cmp	r3, #1
 8004864:	d123      	bne.n	80048ae <HAL_I2C_Mem_Read+0x216>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004868:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800486a:	68f8      	ldr	r0, [r7, #12]
 800486c:	f000 fc7a 	bl	8005164 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004870:	4603      	mov	r3, r0
 8004872:	2b00      	cmp	r3, #0
 8004874:	d001      	beq.n	800487a <HAL_I2C_Mem_Read+0x1e2>
          {
            return HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	e146      	b.n	8004b08 <HAL_I2C_Mem_Read+0x470>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004884:	b2d2      	uxtb	r2, r2
 8004886:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800488c:	1c5a      	adds	r2, r3, #1
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004896:	3b01      	subs	r3, #1
 8004898:	b29a      	uxth	r2, r3
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	3b01      	subs	r3, #1
 80048a6:	b29a      	uxth	r2, r3
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80048ac:	e118      	b.n	8004ae0 <HAL_I2C_Mem_Read+0x448>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d14f      	bne.n	8004956 <HAL_I2C_Mem_Read+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80048b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048b8:	9300      	str	r3, [sp, #0]
 80048ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048bc:	2200      	movs	r2, #0
 80048be:	4907      	ldr	r1, [pc, #28]	@ (80048dc <HAL_I2C_Mem_Read+0x244>)
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 faa5 	bl	8004e10 <I2C_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d009      	beq.n	80048e0 <HAL_I2C_Mem_Read+0x248>
          {
            return HAL_ERROR;
 80048cc:	2301      	movs	r3, #1
 80048ce:	e11b      	b.n	8004b08 <HAL_I2C_Mem_Read+0x470>
 80048d0:	0800ef40 	.word	0x0800ef40
 80048d4:	00100002 	.word	0x00100002
 80048d8:	ffff0000 	.word	0xffff0000
 80048dc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	691a      	ldr	r2, [r3, #16]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048fa:	b2d2      	uxtb	r2, r2
 80048fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004902:	1c5a      	adds	r2, r3, #1
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004918:	b29b      	uxth	r3, r3
 800491a:	3b01      	subs	r3, #1
 800491c:	b29a      	uxth	r2, r3
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	691a      	ldr	r2, [r3, #16]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800492c:	b2d2      	uxtb	r2, r2
 800492e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004934:	1c5a      	adds	r2, r3, #1
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800493e:	3b01      	subs	r3, #1
 8004940:	b29a      	uxth	r2, r3
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800494a:	b29b      	uxth	r3, r3
 800494c:	3b01      	subs	r3, #1
 800494e:	b29a      	uxth	r2, r3
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004954:	e0c4      	b.n	8004ae0 <HAL_I2C_Mem_Read+0x448>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004956:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004958:	9300      	str	r3, [sp, #0]
 800495a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800495c:	2200      	movs	r2, #0
 800495e:	496c      	ldr	r1, [pc, #432]	@ (8004b10 <HAL_I2C_Mem_Read+0x478>)
 8004960:	68f8      	ldr	r0, [r7, #12]
 8004962:	f000 fa55 	bl	8004e10 <I2C_WaitOnFlagUntilTimeout>
 8004966:	4603      	mov	r3, r0
 8004968:	2b00      	cmp	r3, #0
 800496a:	d001      	beq.n	8004970 <HAL_I2C_Mem_Read+0x2d8>
          {
            return HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	e0cb      	b.n	8004b08 <HAL_I2C_Mem_Read+0x470>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800497e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	691a      	ldr	r2, [r3, #16]
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800498a:	b2d2      	uxtb	r2, r2
 800498c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004992:	1c5a      	adds	r2, r3, #1
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800499c:	3b01      	subs	r3, #1
 800499e:	b29a      	uxth	r2, r3
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	3b01      	subs	r3, #1
 80049ac:	b29a      	uxth	r2, r3
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80049b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049b4:	9300      	str	r3, [sp, #0]
 80049b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049b8:	2200      	movs	r2, #0
 80049ba:	4955      	ldr	r1, [pc, #340]	@ (8004b10 <HAL_I2C_Mem_Read+0x478>)
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f000 fa27 	bl	8004e10 <I2C_WaitOnFlagUntilTimeout>
 80049c2:	4603      	mov	r3, r0
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d001      	beq.n	80049cc <HAL_I2C_Mem_Read+0x334>
          {
            return HAL_ERROR;
 80049c8:	2301      	movs	r3, #1
 80049ca:	e09d      	b.n	8004b08 <HAL_I2C_Mem_Read+0x470>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80049da:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	691a      	ldr	r2, [r3, #16]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049e6:	b2d2      	uxtb	r2, r2
 80049e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80049ee:	1c5a      	adds	r2, r3, #1
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80049f8:	3b01      	subs	r3, #1
 80049fa:	b29a      	uxth	r2, r3
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a04:	b29b      	uxth	r3, r3
 8004a06:	3b01      	subs	r3, #1
 8004a08:	b29a      	uxth	r2, r3
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	691a      	ldr	r2, [r3, #16]
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a18:	b2d2      	uxtb	r2, r2
 8004a1a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a20:	1c5a      	adds	r2, r3, #1
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a2a:	3b01      	subs	r3, #1
 8004a2c:	b29a      	uxth	r2, r3
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004a40:	e04e      	b.n	8004ae0 <HAL_I2C_Mem_Read+0x448>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a44:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004a46:	68f8      	ldr	r0, [r7, #12]
 8004a48:	f000 fb8c 	bl	8005164 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d001      	beq.n	8004a56 <HAL_I2C_Mem_Read+0x3be>
        {
          return HAL_ERROR;
 8004a52:	2301      	movs	r3, #1
 8004a54:	e058      	b.n	8004b08 <HAL_I2C_Mem_Read+0x470>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691a      	ldr	r2, [r3, #16]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a60:	b2d2      	uxtb	r2, r2
 8004a62:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a68:	1c5a      	adds	r2, r3, #1
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a72:	3b01      	subs	r3, #1
 8004a74:	b29a      	uxth	r2, r3
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004a7e:	b29b      	uxth	r3, r3
 8004a80:	3b01      	subs	r3, #1
 8004a82:	b29a      	uxth	r2, r3
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	f003 0304 	and.w	r3, r3, #4
 8004a92:	2b04      	cmp	r3, #4
 8004a94:	d124      	bne.n	8004ae0 <HAL_I2C_Mem_Read+0x448>
        {
          if (hi2c->XferSize == 3U)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d107      	bne.n	8004aae <HAL_I2C_Mem_Read+0x416>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004aac:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691a      	ldr	r2, [r3, #16]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab8:	b2d2      	uxtb	r2, r2
 8004aba:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ac0:	1c5a      	adds	r2, r3, #1
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004aca:	3b01      	subs	r3, #1
 8004acc:	b29a      	uxth	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ad6:	b29b      	uxth	r3, r3
 8004ad8:	3b01      	subs	r3, #1
 8004ada:	b29a      	uxth	r2, r3
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f47f aeb5 	bne.w	8004854 <HAL_I2C_Mem_Read+0x1bc>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2220      	movs	r2, #32
 8004aee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004afa:	68fb      	ldr	r3, [r7, #12]
 8004afc:	2200      	movs	r2, #0
 8004afe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004b02:	2300      	movs	r3, #0
 8004b04:	e000      	b.n	8004b08 <HAL_I2C_Mem_Read+0x470>
  }
  else
  {
    return HAL_BUSY;
 8004b06:	2302      	movs	r3, #2
  }
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3728      	adds	r7, #40	@ 0x28
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}
 8004b10:	00010004 	.word	0x00010004

08004b14 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b14:	b580      	push	{r7, lr}
 8004b16:	b088      	sub	sp, #32
 8004b18:	af02      	add	r7, sp, #8
 8004b1a:	60f8      	str	r0, [r7, #12]
 8004b1c:	4608      	mov	r0, r1
 8004b1e:	4611      	mov	r1, r2
 8004b20:	461a      	mov	r2, r3
 8004b22:	4603      	mov	r3, r0
 8004b24:	817b      	strh	r3, [r7, #10]
 8004b26:	460b      	mov	r3, r1
 8004b28:	813b      	strh	r3, [r7, #8]
 8004b2a:	4613      	mov	r3, r2
 8004b2c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b3c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b40:	9300      	str	r3, [sp, #0]
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	2200      	movs	r2, #0
 8004b46:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b4a:	68f8      	ldr	r0, [r7, #12]
 8004b4c:	f000 f960 	bl	8004e10 <I2C_WaitOnFlagUntilTimeout>
 8004b50:	4603      	mov	r3, r0
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d00d      	beq.n	8004b72 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b60:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b64:	d103      	bne.n	8004b6e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b6c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e05f      	b.n	8004c32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b72:	897b      	ldrh	r3, [r7, #10]
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	461a      	mov	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b80:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b84:	6a3a      	ldr	r2, [r7, #32]
 8004b86:	492d      	ldr	r1, [pc, #180]	@ (8004c3c <I2C_RequestMemoryWrite+0x128>)
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 f9bb 	bl	8004f04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e04c      	b.n	8004c32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004b98:	2300      	movs	r3, #0
 8004b9a:	617b      	str	r3, [r7, #20]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	617b      	str	r3, [r7, #20]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	617b      	str	r3, [r7, #20]
 8004bac:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bb0:	6a39      	ldr	r1, [r7, #32]
 8004bb2:	68f8      	ldr	r0, [r7, #12]
 8004bb4:	f000 fa46 	bl	8005044 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d00d      	beq.n	8004bda <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bc2:	2b04      	cmp	r3, #4
 8004bc4:	d107      	bne.n	8004bd6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bd4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bd6:	2301      	movs	r3, #1
 8004bd8:	e02b      	b.n	8004c32 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bda:	88fb      	ldrh	r3, [r7, #6]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d105      	bne.n	8004bec <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004be0:	893b      	ldrh	r3, [r7, #8]
 8004be2:	b2da      	uxtb	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	611a      	str	r2, [r3, #16]
 8004bea:	e021      	b.n	8004c30 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004bec:	893b      	ldrh	r3, [r7, #8]
 8004bee:	0a1b      	lsrs	r3, r3, #8
 8004bf0:	b29b      	uxth	r3, r3
 8004bf2:	b2da      	uxtb	r2, r3
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bfa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bfc:	6a39      	ldr	r1, [r7, #32]
 8004bfe:	68f8      	ldr	r0, [r7, #12]
 8004c00:	f000 fa20 	bl	8005044 <I2C_WaitOnTXEFlagUntilTimeout>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d00d      	beq.n	8004c26 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0e:	2b04      	cmp	r3, #4
 8004c10:	d107      	bne.n	8004c22 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c20:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c22:	2301      	movs	r3, #1
 8004c24:	e005      	b.n	8004c32 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c26:	893b      	ldrh	r3, [r7, #8]
 8004c28:	b2da      	uxtb	r2, r3
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004c30:	2300      	movs	r3, #0
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3718      	adds	r7, #24
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
 8004c3a:	bf00      	nop
 8004c3c:	00010002 	.word	0x00010002

08004c40 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af02      	add	r7, sp, #8
 8004c46:	60f8      	str	r0, [r7, #12]
 8004c48:	4608      	mov	r0, r1
 8004c4a:	4611      	mov	r1, r2
 8004c4c:	461a      	mov	r2, r3
 8004c4e:	4603      	mov	r3, r0
 8004c50:	817b      	strh	r3, [r7, #10]
 8004c52:	460b      	mov	r3, r1
 8004c54:	813b      	strh	r3, [r7, #8]
 8004c56:	4613      	mov	r3, r2
 8004c58:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004c68:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	681a      	ldr	r2, [r3, #0]
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c7c:	9300      	str	r3, [sp, #0]
 8004c7e:	6a3b      	ldr	r3, [r7, #32]
 8004c80:	2200      	movs	r2, #0
 8004c82:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c86:	68f8      	ldr	r0, [r7, #12]
 8004c88:	f000 f8c2 	bl	8004e10 <I2C_WaitOnFlagUntilTimeout>
 8004c8c:	4603      	mov	r3, r0
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d00d      	beq.n	8004cae <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ca0:	d103      	bne.n	8004caa <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004ca8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004caa:	2303      	movs	r3, #3
 8004cac:	e0aa      	b.n	8004e04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004cae:	897b      	ldrh	r3, [r7, #10]
 8004cb0:	b2db      	uxtb	r3, r3
 8004cb2:	461a      	mov	r2, r3
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004cbc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc0:	6a3a      	ldr	r2, [r7, #32]
 8004cc2:	4952      	ldr	r1, [pc, #328]	@ (8004e0c <I2C_RequestMemoryRead+0x1cc>)
 8004cc4:	68f8      	ldr	r0, [r7, #12]
 8004cc6:	f000 f91d 	bl	8004f04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cca:	4603      	mov	r3, r0
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d001      	beq.n	8004cd4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	e097      	b.n	8004e04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cd4:	2300      	movs	r3, #0
 8004cd6:	617b      	str	r3, [r7, #20]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	695b      	ldr	r3, [r3, #20]
 8004cde:	617b      	str	r3, [r7, #20]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	699b      	ldr	r3, [r3, #24]
 8004ce6:	617b      	str	r3, [r7, #20]
 8004ce8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004cea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cec:	6a39      	ldr	r1, [r7, #32]
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f000 f9a8 	bl	8005044 <I2C_WaitOnTXEFlagUntilTimeout>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d00d      	beq.n	8004d16 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cfe:	2b04      	cmp	r3, #4
 8004d00:	d107      	bne.n	8004d12 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	681a      	ldr	r2, [r3, #0]
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d12:	2301      	movs	r3, #1
 8004d14:	e076      	b.n	8004e04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004d16:	88fb      	ldrh	r3, [r7, #6]
 8004d18:	2b01      	cmp	r3, #1
 8004d1a:	d105      	bne.n	8004d28 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d1c:	893b      	ldrh	r3, [r7, #8]
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	611a      	str	r2, [r3, #16]
 8004d26:	e021      	b.n	8004d6c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004d28:	893b      	ldrh	r3, [r7, #8]
 8004d2a:	0a1b      	lsrs	r3, r3, #8
 8004d2c:	b29b      	uxth	r3, r3
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d38:	6a39      	ldr	r1, [r7, #32]
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 f982 	bl	8005044 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d40:	4603      	mov	r3, r0
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00d      	beq.n	8004d62 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d4a:	2b04      	cmp	r3, #4
 8004d4c:	d107      	bne.n	8004d5e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	e050      	b.n	8004e04 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004d62:	893b      	ldrh	r3, [r7, #8]
 8004d64:	b2da      	uxtb	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004d6c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d6e:	6a39      	ldr	r1, [r7, #32]
 8004d70:	68f8      	ldr	r0, [r7, #12]
 8004d72:	f000 f967 	bl	8005044 <I2C_WaitOnTXEFlagUntilTimeout>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d00d      	beq.n	8004d98 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d80:	2b04      	cmp	r3, #4
 8004d82:	d107      	bne.n	8004d94 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d92:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	e035      	b.n	8004e04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	681a      	ldr	r2, [r3, #0]
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004da6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004daa:	9300      	str	r3, [sp, #0]
 8004dac:	6a3b      	ldr	r3, [r7, #32]
 8004dae:	2200      	movs	r2, #0
 8004db0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004db4:	68f8      	ldr	r0, [r7, #12]
 8004db6:	f000 f82b 	bl	8004e10 <I2C_WaitOnFlagUntilTimeout>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d00d      	beq.n	8004ddc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004dca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004dce:	d103      	bne.n	8004dd8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004dd6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004dd8:	2303      	movs	r3, #3
 8004dda:	e013      	b.n	8004e04 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004ddc:	897b      	ldrh	r3, [r7, #10]
 8004dde:	b2db      	uxtb	r3, r3
 8004de0:	f043 0301 	orr.w	r3, r3, #1
 8004de4:	b2da      	uxtb	r2, r3
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004dec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004dee:	6a3a      	ldr	r2, [r7, #32]
 8004df0:	4906      	ldr	r1, [pc, #24]	@ (8004e0c <I2C_RequestMemoryRead+0x1cc>)
 8004df2:	68f8      	ldr	r0, [r7, #12]
 8004df4:	f000 f886 	bl	8004f04 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004df8:	4603      	mov	r3, r0
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d001      	beq.n	8004e02 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e000      	b.n	8004e04 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004e02:	2300      	movs	r3, #0
}
 8004e04:	4618      	mov	r0, r3
 8004e06:	3718      	adds	r7, #24
 8004e08:	46bd      	mov	sp, r7
 8004e0a:	bd80      	pop	{r7, pc}
 8004e0c:	00010002 	.word	0x00010002

08004e10 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	60f8      	str	r0, [r7, #12]
 8004e18:	60b9      	str	r1, [r7, #8]
 8004e1a:	603b      	str	r3, [r7, #0]
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004e20:	e048      	b.n	8004eb4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e28:	d044      	beq.n	8004eb4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e2a:	f7fd ff67 	bl	8002cfc <HAL_GetTick>
 8004e2e:	4602      	mov	r2, r0
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	1ad3      	subs	r3, r2, r3
 8004e34:	683a      	ldr	r2, [r7, #0]
 8004e36:	429a      	cmp	r2, r3
 8004e38:	d302      	bcc.n	8004e40 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d139      	bne.n	8004eb4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	0c1b      	lsrs	r3, r3, #16
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d10d      	bne.n	8004e66 <I2C_WaitOnFlagUntilTimeout+0x56>
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	695b      	ldr	r3, [r3, #20]
 8004e50:	43da      	mvns	r2, r3
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	4013      	ands	r3, r2
 8004e56:	b29b      	uxth	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	bf0c      	ite	eq
 8004e5c:	2301      	moveq	r3, #1
 8004e5e:	2300      	movne	r3, #0
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	461a      	mov	r2, r3
 8004e64:	e00c      	b.n	8004e80 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	699b      	ldr	r3, [r3, #24]
 8004e6c:	43da      	mvns	r2, r3
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	4013      	ands	r3, r2
 8004e72:	b29b      	uxth	r3, r3
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	bf0c      	ite	eq
 8004e78:	2301      	moveq	r3, #1
 8004e7a:	2300      	movne	r3, #0
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	461a      	mov	r2, r3
 8004e80:	79fb      	ldrb	r3, [r7, #7]
 8004e82:	429a      	cmp	r2, r3
 8004e84:	d116      	bne.n	8004eb4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2220      	movs	r2, #32
 8004e90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2200      	movs	r2, #0
 8004e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ea0:	f043 0220 	orr.w	r2, r3, #32
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	e023      	b.n	8004efc <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	0c1b      	lsrs	r3, r3, #16
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b01      	cmp	r3, #1
 8004ebc:	d10d      	bne.n	8004eda <I2C_WaitOnFlagUntilTimeout+0xca>
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	695b      	ldr	r3, [r3, #20]
 8004ec4:	43da      	mvns	r2, r3
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	bf0c      	ite	eq
 8004ed0:	2301      	moveq	r3, #1
 8004ed2:	2300      	movne	r3, #0
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	461a      	mov	r2, r3
 8004ed8:	e00c      	b.n	8004ef4 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	699b      	ldr	r3, [r3, #24]
 8004ee0:	43da      	mvns	r2, r3
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	bf0c      	ite	eq
 8004eec:	2301      	moveq	r3, #1
 8004eee:	2300      	movne	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	461a      	mov	r2, r3
 8004ef4:	79fb      	ldrb	r3, [r7, #7]
 8004ef6:	429a      	cmp	r2, r3
 8004ef8:	d093      	beq.n	8004e22 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004efa:	2300      	movs	r3, #0
}
 8004efc:	4618      	mov	r0, r3
 8004efe:	3710      	adds	r7, #16
 8004f00:	46bd      	mov	sp, r7
 8004f02:	bd80      	pop	{r7, pc}

08004f04 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b084      	sub	sp, #16
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
 8004f10:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004f12:	e071      	b.n	8004ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	695b      	ldr	r3, [r3, #20]
 8004f1a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f1e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004f22:	d123      	bne.n	8004f6c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681a      	ldr	r2, [r3, #0]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f32:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004f3c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	2200      	movs	r2, #0
 8004f42:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	2220      	movs	r2, #32
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	2200      	movs	r2, #0
 8004f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f58:	f043 0204 	orr.w	r2, r3, #4
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004f68:	2301      	movs	r3, #1
 8004f6a:	e067      	b.n	800503c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f72:	d041      	beq.n	8004ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f74:	f7fd fec2 	bl	8002cfc <HAL_GetTick>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	1ad3      	subs	r3, r2, r3
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d302      	bcc.n	8004f8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d136      	bne.n	8004ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004f8a:	68bb      	ldr	r3, [r7, #8]
 8004f8c:	0c1b      	lsrs	r3, r3, #16
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	2b01      	cmp	r3, #1
 8004f92:	d10c      	bne.n	8004fae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	43da      	mvns	r2, r3
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	b29b      	uxth	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	bf14      	ite	ne
 8004fa6:	2301      	movne	r3, #1
 8004fa8:	2300      	moveq	r3, #0
 8004faa:	b2db      	uxtb	r3, r3
 8004fac:	e00b      	b.n	8004fc6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	699b      	ldr	r3, [r3, #24]
 8004fb4:	43da      	mvns	r2, r3
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	b29b      	uxth	r3, r3
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	bf14      	ite	ne
 8004fc0:	2301      	movne	r3, #1
 8004fc2:	2300      	moveq	r3, #0
 8004fc4:	b2db      	uxtb	r3, r3
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d016      	beq.n	8004ff8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	2220      	movs	r2, #32
 8004fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe4:	f043 0220 	orr.w	r2, r3, #32
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e021      	b.n	800503c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	0c1b      	lsrs	r3, r3, #16
 8004ffc:	b2db      	uxtb	r3, r3
 8004ffe:	2b01      	cmp	r3, #1
 8005000:	d10c      	bne.n	800501c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	695b      	ldr	r3, [r3, #20]
 8005008:	43da      	mvns	r2, r3
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	4013      	ands	r3, r2
 800500e:	b29b      	uxth	r3, r3
 8005010:	2b00      	cmp	r3, #0
 8005012:	bf14      	ite	ne
 8005014:	2301      	movne	r3, #1
 8005016:	2300      	moveq	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	e00b      	b.n	8005034 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	699b      	ldr	r3, [r3, #24]
 8005022:	43da      	mvns	r2, r3
 8005024:	68bb      	ldr	r3, [r7, #8]
 8005026:	4013      	ands	r3, r2
 8005028:	b29b      	uxth	r3, r3
 800502a:	2b00      	cmp	r3, #0
 800502c:	bf14      	ite	ne
 800502e:	2301      	movne	r3, #1
 8005030:	2300      	moveq	r3, #0
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b00      	cmp	r3, #0
 8005036:	f47f af6d 	bne.w	8004f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800503a:	2300      	movs	r3, #0
}
 800503c:	4618      	mov	r0, r3
 800503e:	3710      	adds	r7, #16
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}

08005044 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b084      	sub	sp, #16
 8005048:	af00      	add	r7, sp, #0
 800504a:	60f8      	str	r0, [r7, #12]
 800504c:	60b9      	str	r1, [r7, #8]
 800504e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005050:	e034      	b.n	80050bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005052:	68f8      	ldr	r0, [r7, #12]
 8005054:	f000 f8e3 	bl	800521e <I2C_IsAcknowledgeFailed>
 8005058:	4603      	mov	r3, r0
 800505a:	2b00      	cmp	r3, #0
 800505c:	d001      	beq.n	8005062 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e034      	b.n	80050cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005062:	68bb      	ldr	r3, [r7, #8]
 8005064:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005068:	d028      	beq.n	80050bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800506a:	f7fd fe47 	bl	8002cfc <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	429a      	cmp	r2, r3
 8005078:	d302      	bcc.n	8005080 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d11d      	bne.n	80050bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	695b      	ldr	r3, [r3, #20]
 8005086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800508a:	2b80      	cmp	r3, #128	@ 0x80
 800508c:	d016      	beq.n	80050bc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	2200      	movs	r2, #0
 8005092:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2220      	movs	r2, #32
 8005098:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	2200      	movs	r2, #0
 80050a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a8:	f043 0220 	orr.w	r2, r3, #32
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80050b8:	2301      	movs	r3, #1
 80050ba:	e007      	b.n	80050cc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695b      	ldr	r3, [r3, #20]
 80050c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c6:	2b80      	cmp	r3, #128	@ 0x80
 80050c8:	d1c3      	bne.n	8005052 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80050ca:	2300      	movs	r3, #0
}
 80050cc:	4618      	mov	r0, r3
 80050ce:	3710      	adds	r7, #16
 80050d0:	46bd      	mov	sp, r7
 80050d2:	bd80      	pop	{r7, pc}

080050d4 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80050d4:	b580      	push	{r7, lr}
 80050d6:	b084      	sub	sp, #16
 80050d8:	af00      	add	r7, sp, #0
 80050da:	60f8      	str	r0, [r7, #12]
 80050dc:	60b9      	str	r1, [r7, #8]
 80050de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80050e0:	e034      	b.n	800514c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80050e2:	68f8      	ldr	r0, [r7, #12]
 80050e4:	f000 f89b 	bl	800521e <I2C_IsAcknowledgeFailed>
 80050e8:	4603      	mov	r3, r0
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d001      	beq.n	80050f2 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e034      	b.n	800515c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050f2:	68bb      	ldr	r3, [r7, #8]
 80050f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050f8:	d028      	beq.n	800514c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050fa:	f7fd fdff 	bl	8002cfc <HAL_GetTick>
 80050fe:	4602      	mov	r2, r0
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	1ad3      	subs	r3, r2, r3
 8005104:	68ba      	ldr	r2, [r7, #8]
 8005106:	429a      	cmp	r2, r3
 8005108:	d302      	bcc.n	8005110 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800510a:	68bb      	ldr	r3, [r7, #8]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d11d      	bne.n	800514c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	695b      	ldr	r3, [r3, #20]
 8005116:	f003 0304 	and.w	r3, r3, #4
 800511a:	2b04      	cmp	r3, #4
 800511c:	d016      	beq.n	800514c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2220      	movs	r2, #32
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005138:	f043 0220 	orr.w	r2, r3, #32
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	2200      	movs	r2, #0
 8005144:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005148:	2301      	movs	r3, #1
 800514a:	e007      	b.n	800515c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	695b      	ldr	r3, [r3, #20]
 8005152:	f003 0304 	and.w	r3, r3, #4
 8005156:	2b04      	cmp	r3, #4
 8005158:	d1c3      	bne.n	80050e2 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800515a:	2300      	movs	r3, #0
}
 800515c:	4618      	mov	r0, r3
 800515e:	3710      	adds	r7, #16
 8005160:	46bd      	mov	sp, r7
 8005162:	bd80      	pop	{r7, pc}

08005164 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005170:	e049      	b.n	8005206 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	695b      	ldr	r3, [r3, #20]
 8005178:	f003 0310 	and.w	r3, r3, #16
 800517c:	2b10      	cmp	r3, #16
 800517e:	d119      	bne.n	80051b4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f06f 0210 	mvn.w	r2, #16
 8005188:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800518a:	68fb      	ldr	r3, [r7, #12]
 800518c:	2200      	movs	r2, #0
 800518e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	2220      	movs	r2, #32
 8005194:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	2200      	movs	r2, #0
 80051ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80051b0:	2301      	movs	r3, #1
 80051b2:	e030      	b.n	8005216 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051b4:	f7fd fda2 	bl	8002cfc <HAL_GetTick>
 80051b8:	4602      	mov	r2, r0
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	1ad3      	subs	r3, r2, r3
 80051be:	68ba      	ldr	r2, [r7, #8]
 80051c0:	429a      	cmp	r2, r3
 80051c2:	d302      	bcc.n	80051ca <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d11d      	bne.n	8005206 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	695b      	ldr	r3, [r3, #20]
 80051d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80051d4:	2b40      	cmp	r3, #64	@ 0x40
 80051d6:	d016      	beq.n	8005206 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2200      	movs	r2, #0
 80051dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	2220      	movs	r2, #32
 80051e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	2200      	movs	r2, #0
 80051ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051f2:	f043 0220 	orr.w	r2, r3, #32
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	2200      	movs	r2, #0
 80051fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e007      	b.n	8005216 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005210:	2b40      	cmp	r3, #64	@ 0x40
 8005212:	d1ae      	bne.n	8005172 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005214:	2300      	movs	r3, #0
}
 8005216:	4618      	mov	r0, r3
 8005218:	3710      	adds	r7, #16
 800521a:	46bd      	mov	sp, r7
 800521c:	bd80      	pop	{r7, pc}

0800521e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800521e:	b480      	push	{r7}
 8005220:	b083      	sub	sp, #12
 8005222:	af00      	add	r7, sp, #0
 8005224:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	695b      	ldr	r3, [r3, #20]
 800522c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005230:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005234:	d11b      	bne.n	800526e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800523e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2200      	movs	r2, #0
 8005244:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	2220      	movs	r2, #32
 800524a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	2200      	movs	r2, #0
 8005252:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800525a:	f043 0204 	orr.w	r2, r3, #4
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800526a:	2301      	movs	r3, #1
 800526c:	e000      	b.n	8005270 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800526e:	2300      	movs	r3, #0
}
 8005270:	4618      	mov	r0, r3
 8005272:	370c      	adds	r7, #12
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b086      	sub	sp, #24
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d101      	bne.n	800528e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800528a:	2301      	movs	r3, #1
 800528c:	e318      	b.n	80058c0 <HAL_RCC_OscConfig+0x644>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	2b0f      	cmp	r3, #15
 8005294:	d903      	bls.n	800529e <HAL_RCC_OscConfig+0x22>
 8005296:	21e6      	movs	r1, #230	@ 0xe6
 8005298:	4897      	ldr	r0, [pc, #604]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 800529a:	f7fd f98f 	bl	80025bc <assert_failed>
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f003 0301 	and.w	r3, r3, #1
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	f000 8088 	beq.w	80053bc <HAL_RCC_OscConfig+0x140>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	685b      	ldr	r3, [r3, #4]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d00d      	beq.n	80052d0 <HAL_RCC_OscConfig+0x54>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	685b      	ldr	r3, [r3, #4]
 80052b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052bc:	d008      	beq.n	80052d0 <HAL_RCC_OscConfig+0x54>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	685b      	ldr	r3, [r3, #4]
 80052c2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052c6:	d003      	beq.n	80052d0 <HAL_RCC_OscConfig+0x54>
 80052c8:	21eb      	movs	r1, #235	@ 0xeb
 80052ca:	488b      	ldr	r0, [pc, #556]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 80052cc:	f7fd f976 	bl	80025bc <assert_failed>
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80052d0:	4b8a      	ldr	r3, [pc, #552]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	f003 030c 	and.w	r3, r3, #12
 80052d8:	2b04      	cmp	r3, #4
 80052da:	d00c      	beq.n	80052f6 <HAL_RCC_OscConfig+0x7a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052dc:	4b87      	ldr	r3, [pc, #540]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80052e4:	2b08      	cmp	r3, #8
 80052e6:	d112      	bne.n	800530e <HAL_RCC_OscConfig+0x92>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80052e8:	4b84      	ldr	r3, [pc, #528]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 80052ea:	685b      	ldr	r3, [r3, #4]
 80052ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80052f4:	d10b      	bne.n	800530e <HAL_RCC_OscConfig+0x92>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80052f6:	4b81      	ldr	r3, [pc, #516]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d05b      	beq.n	80053ba <HAL_RCC_OscConfig+0x13e>
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d157      	bne.n	80053ba <HAL_RCC_OscConfig+0x13e>
      {
        return HAL_ERROR;
 800530a:	2301      	movs	r3, #1
 800530c:	e2d8      	b.n	80058c0 <HAL_RCC_OscConfig+0x644>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005316:	d106      	bne.n	8005326 <HAL_RCC_OscConfig+0xaa>
 8005318:	4b78      	ldr	r3, [pc, #480]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	4a77      	ldr	r2, [pc, #476]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 800531e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005322:	6013      	str	r3, [r2, #0]
 8005324:	e01d      	b.n	8005362 <HAL_RCC_OscConfig+0xe6>
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	685b      	ldr	r3, [r3, #4]
 800532a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800532e:	d10c      	bne.n	800534a <HAL_RCC_OscConfig+0xce>
 8005330:	4b72      	ldr	r3, [pc, #456]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a71      	ldr	r2, [pc, #452]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 8005336:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	4b6f      	ldr	r3, [pc, #444]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a6e      	ldr	r2, [pc, #440]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 8005342:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005346:	6013      	str	r3, [r2, #0]
 8005348:	e00b      	b.n	8005362 <HAL_RCC_OscConfig+0xe6>
 800534a:	4b6c      	ldr	r3, [pc, #432]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a6b      	ldr	r2, [pc, #428]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 8005350:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	4b69      	ldr	r3, [pc, #420]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	4a68      	ldr	r2, [pc, #416]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 800535c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005360:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d013      	beq.n	8005392 <HAL_RCC_OscConfig+0x116>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800536a:	f7fd fcc7 	bl	8002cfc <HAL_GetTick>
 800536e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005370:	e008      	b.n	8005384 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005372:	f7fd fcc3 	bl	8002cfc <HAL_GetTick>
 8005376:	4602      	mov	r2, r0
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	1ad3      	subs	r3, r2, r3
 800537c:	2b64      	cmp	r3, #100	@ 0x64
 800537e:	d901      	bls.n	8005384 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8005380:	2303      	movs	r3, #3
 8005382:	e29d      	b.n	80058c0 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005384:	4b5d      	ldr	r3, [pc, #372]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d0f0      	beq.n	8005372 <HAL_RCC_OscConfig+0xf6>
 8005390:	e014      	b.n	80053bc <HAL_RCC_OscConfig+0x140>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005392:	f7fd fcb3 	bl	8002cfc <HAL_GetTick>
 8005396:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005398:	e008      	b.n	80053ac <HAL_RCC_OscConfig+0x130>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800539a:	f7fd fcaf 	bl	8002cfc <HAL_GetTick>
 800539e:	4602      	mov	r2, r0
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	1ad3      	subs	r3, r2, r3
 80053a4:	2b64      	cmp	r3, #100	@ 0x64
 80053a6:	d901      	bls.n	80053ac <HAL_RCC_OscConfig+0x130>
          {
            return HAL_TIMEOUT;
 80053a8:	2303      	movs	r3, #3
 80053aa:	e289      	b.n	80058c0 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80053ac:	4b53      	ldr	r3, [pc, #332]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1f0      	bne.n	800539a <HAL_RCC_OscConfig+0x11e>
 80053b8:	e000      	b.n	80053bc <HAL_RCC_OscConfig+0x140>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053ba:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f003 0302 	and.w	r3, r3, #2
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d079      	beq.n	80054bc <HAL_RCC_OscConfig+0x240>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	68db      	ldr	r3, [r3, #12]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d008      	beq.n	80053e2 <HAL_RCC_OscConfig+0x166>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	68db      	ldr	r3, [r3, #12]
 80053d4:	2b01      	cmp	r3, #1
 80053d6:	d004      	beq.n	80053e2 <HAL_RCC_OscConfig+0x166>
 80053d8:	f240 111d 	movw	r1, #285	@ 0x11d
 80053dc:	4846      	ldr	r0, [pc, #280]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 80053de:	f7fd f8ed 	bl	80025bc <assert_failed>
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	691b      	ldr	r3, [r3, #16]
 80053e6:	2b1f      	cmp	r3, #31
 80053e8:	d904      	bls.n	80053f4 <HAL_RCC_OscConfig+0x178>
 80053ea:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 80053ee:	4842      	ldr	r0, [pc, #264]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 80053f0:	f7fd f8e4 	bl	80025bc <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80053f4:	4b41      	ldr	r3, [pc, #260]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 030c 	and.w	r3, r3, #12
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00b      	beq.n	8005418 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005400:	4b3e      	ldr	r3, [pc, #248]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 8005402:	689b      	ldr	r3, [r3, #8]
 8005404:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005408:	2b08      	cmp	r3, #8
 800540a:	d11c      	bne.n	8005446 <HAL_RCC_OscConfig+0x1ca>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800540c:	4b3b      	ldr	r3, [pc, #236]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d116      	bne.n	8005446 <HAL_RCC_OscConfig+0x1ca>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005418:	4b38      	ldr	r3, [pc, #224]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f003 0302 	and.w	r3, r3, #2
 8005420:	2b00      	cmp	r3, #0
 8005422:	d005      	beq.n	8005430 <HAL_RCC_OscConfig+0x1b4>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68db      	ldr	r3, [r3, #12]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d001      	beq.n	8005430 <HAL_RCC_OscConfig+0x1b4>
      {
        return HAL_ERROR;
 800542c:	2301      	movs	r3, #1
 800542e:	e247      	b.n	80058c0 <HAL_RCC_OscConfig+0x644>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005430:	4b32      	ldr	r3, [pc, #200]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	00db      	lsls	r3, r3, #3
 800543e:	492f      	ldr	r1, [pc, #188]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 8005440:	4313      	orrs	r3, r2
 8005442:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005444:	e03a      	b.n	80054bc <HAL_RCC_OscConfig+0x240>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	68db      	ldr	r3, [r3, #12]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d020      	beq.n	8005490 <HAL_RCC_OscConfig+0x214>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800544e:	4b2c      	ldr	r3, [pc, #176]	@ (8005500 <HAL_RCC_OscConfig+0x284>)
 8005450:	2201      	movs	r2, #1
 8005452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005454:	f7fd fc52 	bl	8002cfc <HAL_GetTick>
 8005458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800545a:	e008      	b.n	800546e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800545c:	f7fd fc4e 	bl	8002cfc <HAL_GetTick>
 8005460:	4602      	mov	r2, r0
 8005462:	693b      	ldr	r3, [r7, #16]
 8005464:	1ad3      	subs	r3, r2, r3
 8005466:	2b02      	cmp	r3, #2
 8005468:	d901      	bls.n	800546e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800546a:	2303      	movs	r3, #3
 800546c:	e228      	b.n	80058c0 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800546e:	4b23      	ldr	r3, [pc, #140]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f003 0302 	and.w	r3, r3, #2
 8005476:	2b00      	cmp	r3, #0
 8005478:	d0f0      	beq.n	800545c <HAL_RCC_OscConfig+0x1e0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800547a:	4b20      	ldr	r3, [pc, #128]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	691b      	ldr	r3, [r3, #16]
 8005486:	00db      	lsls	r3, r3, #3
 8005488:	491c      	ldr	r1, [pc, #112]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 800548a:	4313      	orrs	r3, r2
 800548c:	600b      	str	r3, [r1, #0]
 800548e:	e015      	b.n	80054bc <HAL_RCC_OscConfig+0x240>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005490:	4b1b      	ldr	r3, [pc, #108]	@ (8005500 <HAL_RCC_OscConfig+0x284>)
 8005492:	2200      	movs	r2, #0
 8005494:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005496:	f7fd fc31 	bl	8002cfc <HAL_GetTick>
 800549a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800549c:	e008      	b.n	80054b0 <HAL_RCC_OscConfig+0x234>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800549e:	f7fd fc2d 	bl	8002cfc <HAL_GetTick>
 80054a2:	4602      	mov	r2, r0
 80054a4:	693b      	ldr	r3, [r7, #16]
 80054a6:	1ad3      	subs	r3, r2, r3
 80054a8:	2b02      	cmp	r3, #2
 80054aa:	d901      	bls.n	80054b0 <HAL_RCC_OscConfig+0x234>
          {
            return HAL_TIMEOUT;
 80054ac:	2303      	movs	r3, #3
 80054ae:	e207      	b.n	80058c0 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80054b0:	4b12      	ldr	r3, [pc, #72]	@ (80054fc <HAL_RCC_OscConfig+0x280>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	f003 0302 	and.w	r3, r3, #2
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d1f0      	bne.n	800549e <HAL_RCC_OscConfig+0x222>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f003 0308 	and.w	r3, r3, #8
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d045      	beq.n	8005554 <HAL_RCC_OscConfig+0x2d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d008      	beq.n	80054e2 <HAL_RCC_OscConfig+0x266>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	695b      	ldr	r3, [r3, #20]
 80054d4:	2b01      	cmp	r3, #1
 80054d6:	d004      	beq.n	80054e2 <HAL_RCC_OscConfig+0x266>
 80054d8:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 80054dc:	4806      	ldr	r0, [pc, #24]	@ (80054f8 <HAL_RCC_OscConfig+0x27c>)
 80054de:	f7fd f86d 	bl	80025bc <assert_failed>

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	695b      	ldr	r3, [r3, #20]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d01e      	beq.n	8005528 <HAL_RCC_OscConfig+0x2ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80054ea:	4b06      	ldr	r3, [pc, #24]	@ (8005504 <HAL_RCC_OscConfig+0x288>)
 80054ec:	2201      	movs	r2, #1
 80054ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054f0:	f7fd fc04 	bl	8002cfc <HAL_GetTick>
 80054f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80054f6:	e010      	b.n	800551a <HAL_RCC_OscConfig+0x29e>
 80054f8:	0800ef78 	.word	0x0800ef78
 80054fc:	40023800 	.word	0x40023800
 8005500:	42470000 	.word	0x42470000
 8005504:	42470e80 	.word	0x42470e80
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005508:	f7fd fbf8 	bl	8002cfc <HAL_GetTick>
 800550c:	4602      	mov	r2, r0
 800550e:	693b      	ldr	r3, [r7, #16]
 8005510:	1ad3      	subs	r3, r2, r3
 8005512:	2b02      	cmp	r3, #2
 8005514:	d901      	bls.n	800551a <HAL_RCC_OscConfig+0x29e>
        {
          return HAL_TIMEOUT;
 8005516:	2303      	movs	r3, #3
 8005518:	e1d2      	b.n	80058c0 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800551a:	4b5e      	ldr	r3, [pc, #376]	@ (8005694 <HAL_RCC_OscConfig+0x418>)
 800551c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800551e:	f003 0302 	and.w	r3, r3, #2
 8005522:	2b00      	cmp	r3, #0
 8005524:	d0f0      	beq.n	8005508 <HAL_RCC_OscConfig+0x28c>
 8005526:	e015      	b.n	8005554 <HAL_RCC_OscConfig+0x2d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005528:	4b5b      	ldr	r3, [pc, #364]	@ (8005698 <HAL_RCC_OscConfig+0x41c>)
 800552a:	2200      	movs	r2, #0
 800552c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800552e:	f7fd fbe5 	bl	8002cfc <HAL_GetTick>
 8005532:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005534:	e008      	b.n	8005548 <HAL_RCC_OscConfig+0x2cc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005536:	f7fd fbe1 	bl	8002cfc <HAL_GetTick>
 800553a:	4602      	mov	r2, r0
 800553c:	693b      	ldr	r3, [r7, #16]
 800553e:	1ad3      	subs	r3, r2, r3
 8005540:	2b02      	cmp	r3, #2
 8005542:	d901      	bls.n	8005548 <HAL_RCC_OscConfig+0x2cc>
        {
          return HAL_TIMEOUT;
 8005544:	2303      	movs	r3, #3
 8005546:	e1bb      	b.n	80058c0 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005548:	4b52      	ldr	r3, [pc, #328]	@ (8005694 <HAL_RCC_OscConfig+0x418>)
 800554a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800554c:	f003 0302 	and.w	r3, r3, #2
 8005550:	2b00      	cmp	r3, #0
 8005552:	d1f0      	bne.n	8005536 <HAL_RCC_OscConfig+0x2ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0304 	and.w	r3, r3, #4
 800555c:	2b00      	cmp	r3, #0
 800555e:	f000 80b0 	beq.w	80056c2 <HAL_RCC_OscConfig+0x446>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005562:	2300      	movs	r3, #0
 8005564:	75fb      	strb	r3, [r7, #23]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
 800556a:	2b00      	cmp	r3, #0
 800556c:	d00c      	beq.n	8005588 <HAL_RCC_OscConfig+0x30c>
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	2b01      	cmp	r3, #1
 8005574:	d008      	beq.n	8005588 <HAL_RCC_OscConfig+0x30c>
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	2b05      	cmp	r3, #5
 800557c:	d004      	beq.n	8005588 <HAL_RCC_OscConfig+0x30c>
 800557e:	f44f 71c5 	mov.w	r1, #394	@ 0x18a
 8005582:	4846      	ldr	r0, [pc, #280]	@ (800569c <HAL_RCC_OscConfig+0x420>)
 8005584:	f7fd f81a 	bl	80025bc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005588:	4b42      	ldr	r3, [pc, #264]	@ (8005694 <HAL_RCC_OscConfig+0x418>)
 800558a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800558c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10f      	bne.n	80055b4 <HAL_RCC_OscConfig+0x338>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005594:	2300      	movs	r3, #0
 8005596:	60bb      	str	r3, [r7, #8]
 8005598:	4b3e      	ldr	r3, [pc, #248]	@ (8005694 <HAL_RCC_OscConfig+0x418>)
 800559a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800559c:	4a3d      	ldr	r2, [pc, #244]	@ (8005694 <HAL_RCC_OscConfig+0x418>)
 800559e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80055a4:	4b3b      	ldr	r3, [pc, #236]	@ (8005694 <HAL_RCC_OscConfig+0x418>)
 80055a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80055ac:	60bb      	str	r3, [r7, #8]
 80055ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80055b0:	2301      	movs	r3, #1
 80055b2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055b4:	4b3a      	ldr	r3, [pc, #232]	@ (80056a0 <HAL_RCC_OscConfig+0x424>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d118      	bne.n	80055f2 <HAL_RCC_OscConfig+0x376>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80055c0:	4b37      	ldr	r3, [pc, #220]	@ (80056a0 <HAL_RCC_OscConfig+0x424>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	4a36      	ldr	r2, [pc, #216]	@ (80056a0 <HAL_RCC_OscConfig+0x424>)
 80055c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80055ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80055cc:	f7fd fb96 	bl	8002cfc <HAL_GetTick>
 80055d0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055d2:	e008      	b.n	80055e6 <HAL_RCC_OscConfig+0x36a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80055d4:	f7fd fb92 	bl	8002cfc <HAL_GetTick>
 80055d8:	4602      	mov	r2, r0
 80055da:	693b      	ldr	r3, [r7, #16]
 80055dc:	1ad3      	subs	r3, r2, r3
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d901      	bls.n	80055e6 <HAL_RCC_OscConfig+0x36a>
        {
          return HAL_TIMEOUT;
 80055e2:	2303      	movs	r3, #3
 80055e4:	e16c      	b.n	80058c0 <HAL_RCC_OscConfig+0x644>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80055e6:	4b2e      	ldr	r3, [pc, #184]	@ (80056a0 <HAL_RCC_OscConfig+0x424>)
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0f0      	beq.n	80055d4 <HAL_RCC_OscConfig+0x358>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689b      	ldr	r3, [r3, #8]
 80055f6:	2b01      	cmp	r3, #1
 80055f8:	d106      	bne.n	8005608 <HAL_RCC_OscConfig+0x38c>
 80055fa:	4b26      	ldr	r3, [pc, #152]	@ (8005694 <HAL_RCC_OscConfig+0x418>)
 80055fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80055fe:	4a25      	ldr	r2, [pc, #148]	@ (8005694 <HAL_RCC_OscConfig+0x418>)
 8005600:	f043 0301 	orr.w	r3, r3, #1
 8005604:	6713      	str	r3, [r2, #112]	@ 0x70
 8005606:	e01c      	b.n	8005642 <HAL_RCC_OscConfig+0x3c6>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	689b      	ldr	r3, [r3, #8]
 800560c:	2b05      	cmp	r3, #5
 800560e:	d10c      	bne.n	800562a <HAL_RCC_OscConfig+0x3ae>
 8005610:	4b20      	ldr	r3, [pc, #128]	@ (8005694 <HAL_RCC_OscConfig+0x418>)
 8005612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005614:	4a1f      	ldr	r2, [pc, #124]	@ (8005694 <HAL_RCC_OscConfig+0x418>)
 8005616:	f043 0304 	orr.w	r3, r3, #4
 800561a:	6713      	str	r3, [r2, #112]	@ 0x70
 800561c:	4b1d      	ldr	r3, [pc, #116]	@ (8005694 <HAL_RCC_OscConfig+0x418>)
 800561e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005620:	4a1c      	ldr	r2, [pc, #112]	@ (8005694 <HAL_RCC_OscConfig+0x418>)
 8005622:	f043 0301 	orr.w	r3, r3, #1
 8005626:	6713      	str	r3, [r2, #112]	@ 0x70
 8005628:	e00b      	b.n	8005642 <HAL_RCC_OscConfig+0x3c6>
 800562a:	4b1a      	ldr	r3, [pc, #104]	@ (8005694 <HAL_RCC_OscConfig+0x418>)
 800562c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800562e:	4a19      	ldr	r2, [pc, #100]	@ (8005694 <HAL_RCC_OscConfig+0x418>)
 8005630:	f023 0301 	bic.w	r3, r3, #1
 8005634:	6713      	str	r3, [r2, #112]	@ 0x70
 8005636:	4b17      	ldr	r3, [pc, #92]	@ (8005694 <HAL_RCC_OscConfig+0x418>)
 8005638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800563a:	4a16      	ldr	r2, [pc, #88]	@ (8005694 <HAL_RCC_OscConfig+0x418>)
 800563c:	f023 0304 	bic.w	r3, r3, #4
 8005640:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	689b      	ldr	r3, [r3, #8]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d015      	beq.n	8005676 <HAL_RCC_OscConfig+0x3fa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800564a:	f7fd fb57 	bl	8002cfc <HAL_GetTick>
 800564e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005650:	e00a      	b.n	8005668 <HAL_RCC_OscConfig+0x3ec>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005652:	f7fd fb53 	bl	8002cfc <HAL_GetTick>
 8005656:	4602      	mov	r2, r0
 8005658:	693b      	ldr	r3, [r7, #16]
 800565a:	1ad3      	subs	r3, r2, r3
 800565c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005660:	4293      	cmp	r3, r2
 8005662:	d901      	bls.n	8005668 <HAL_RCC_OscConfig+0x3ec>
        {
          return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e12b      	b.n	80058c0 <HAL_RCC_OscConfig+0x644>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005668:	4b0a      	ldr	r3, [pc, #40]	@ (8005694 <HAL_RCC_OscConfig+0x418>)
 800566a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d0ee      	beq.n	8005652 <HAL_RCC_OscConfig+0x3d6>
 8005674:	e01c      	b.n	80056b0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005676:	f7fd fb41 	bl	8002cfc <HAL_GetTick>
 800567a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800567c:	e012      	b.n	80056a4 <HAL_RCC_OscConfig+0x428>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800567e:	f7fd fb3d 	bl	8002cfc <HAL_GetTick>
 8005682:	4602      	mov	r2, r0
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	1ad3      	subs	r3, r2, r3
 8005688:	f241 3288 	movw	r2, #5000	@ 0x1388
 800568c:	4293      	cmp	r3, r2
 800568e:	d909      	bls.n	80056a4 <HAL_RCC_OscConfig+0x428>
        {
          return HAL_TIMEOUT;
 8005690:	2303      	movs	r3, #3
 8005692:	e115      	b.n	80058c0 <HAL_RCC_OscConfig+0x644>
 8005694:	40023800 	.word	0x40023800
 8005698:	42470e80 	.word	0x42470e80
 800569c:	0800ef78 	.word	0x0800ef78
 80056a0:	40007000 	.word	0x40007000
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056a4:	4b88      	ldr	r3, [pc, #544]	@ (80058c8 <HAL_RCC_OscConfig+0x64c>)
 80056a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80056a8:	f003 0302 	and.w	r3, r3, #2
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1e6      	bne.n	800567e <HAL_RCC_OscConfig+0x402>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80056b0:	7dfb      	ldrb	r3, [r7, #23]
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d105      	bne.n	80056c2 <HAL_RCC_OscConfig+0x446>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80056b6:	4b84      	ldr	r3, [pc, #528]	@ (80058c8 <HAL_RCC_OscConfig+0x64c>)
 80056b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056ba:	4a83      	ldr	r2, [pc, #524]	@ (80058c8 <HAL_RCC_OscConfig+0x64c>)
 80056bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80056c0:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	699b      	ldr	r3, [r3, #24]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d00c      	beq.n	80056e4 <HAL_RCC_OscConfig+0x468>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	2b01      	cmp	r3, #1
 80056d0:	d008      	beq.n	80056e4 <HAL_RCC_OscConfig+0x468>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	699b      	ldr	r3, [r3, #24]
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d004      	beq.n	80056e4 <HAL_RCC_OscConfig+0x468>
 80056da:	f240 11cd 	movw	r1, #461	@ 0x1cd
 80056de:	487b      	ldr	r0, [pc, #492]	@ (80058cc <HAL_RCC_OscConfig+0x650>)
 80056e0:	f7fc ff6c 	bl	80025bc <assert_failed>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	699b      	ldr	r3, [r3, #24]
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	f000 80e8 	beq.w	80058be <HAL_RCC_OscConfig+0x642>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80056ee:	4b76      	ldr	r3, [pc, #472]	@ (80058c8 <HAL_RCC_OscConfig+0x64c>)
 80056f0:	689b      	ldr	r3, [r3, #8]
 80056f2:	f003 030c 	and.w	r3, r3, #12
 80056f6:	2b08      	cmp	r3, #8
 80056f8:	f000 80a9 	beq.w	800584e <HAL_RCC_OscConfig+0x5d2>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	699b      	ldr	r3, [r3, #24]
 8005700:	2b02      	cmp	r3, #2
 8005702:	f040 808d 	bne.w	8005820 <HAL_RCC_OscConfig+0x5a4>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	69db      	ldr	r3, [r3, #28]
 800570a:	2b00      	cmp	r3, #0
 800570c:	d009      	beq.n	8005722 <HAL_RCC_OscConfig+0x4a6>
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	69db      	ldr	r3, [r3, #28]
 8005712:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005716:	d004      	beq.n	8005722 <HAL_RCC_OscConfig+0x4a6>
 8005718:	f44f 71eb 	mov.w	r1, #470	@ 0x1d6
 800571c:	486b      	ldr	r0, [pc, #428]	@ (80058cc <HAL_RCC_OscConfig+0x650>)
 800571e:	f7fc ff4d 	bl	80025bc <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	2b01      	cmp	r3, #1
 8005728:	d903      	bls.n	8005732 <HAL_RCC_OscConfig+0x4b6>
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	6a1b      	ldr	r3, [r3, #32]
 800572e:	2b3f      	cmp	r3, #63	@ 0x3f
 8005730:	d904      	bls.n	800573c <HAL_RCC_OscConfig+0x4c0>
 8005732:	f240 11d7 	movw	r1, #471	@ 0x1d7
 8005736:	4865      	ldr	r0, [pc, #404]	@ (80058cc <HAL_RCC_OscConfig+0x650>)
 8005738:	f7fc ff40 	bl	80025bc <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005740:	2b31      	cmp	r3, #49	@ 0x31
 8005742:	d904      	bls.n	800574e <HAL_RCC_OscConfig+0x4d2>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005748:	f5b3 7fd8 	cmp.w	r3, #432	@ 0x1b0
 800574c:	d904      	bls.n	8005758 <HAL_RCC_OscConfig+0x4dc>
 800574e:	f44f 71ec 	mov.w	r1, #472	@ 0x1d8
 8005752:	485e      	ldr	r0, [pc, #376]	@ (80058cc <HAL_RCC_OscConfig+0x650>)
 8005754:	f7fc ff32 	bl	80025bc <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800575c:	2b02      	cmp	r3, #2
 800575e:	d010      	beq.n	8005782 <HAL_RCC_OscConfig+0x506>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005764:	2b04      	cmp	r3, #4
 8005766:	d00c      	beq.n	8005782 <HAL_RCC_OscConfig+0x506>
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800576c:	2b06      	cmp	r3, #6
 800576e:	d008      	beq.n	8005782 <HAL_RCC_OscConfig+0x506>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005774:	2b08      	cmp	r3, #8
 8005776:	d004      	beq.n	8005782 <HAL_RCC_OscConfig+0x506>
 8005778:	f240 11d9 	movw	r1, #473	@ 0x1d9
 800577c:	4853      	ldr	r0, [pc, #332]	@ (80058cc <HAL_RCC_OscConfig+0x650>)
 800577e:	f7fc ff1d 	bl	80025bc <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005786:	2b01      	cmp	r3, #1
 8005788:	d903      	bls.n	8005792 <HAL_RCC_OscConfig+0x516>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800578e:	2b0f      	cmp	r3, #15
 8005790:	d904      	bls.n	800579c <HAL_RCC_OscConfig+0x520>
 8005792:	f44f 71ed 	mov.w	r1, #474	@ 0x1da
 8005796:	484d      	ldr	r0, [pc, #308]	@ (80058cc <HAL_RCC_OscConfig+0x650>)
 8005798:	f7fc ff10 	bl	80025bc <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800579c:	4b4c      	ldr	r3, [pc, #304]	@ (80058d0 <HAL_RCC_OscConfig+0x654>)
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057a2:	f7fd faab 	bl	8002cfc <HAL_GetTick>
 80057a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057a8:	e008      	b.n	80057bc <HAL_RCC_OscConfig+0x540>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80057aa:	f7fd faa7 	bl	8002cfc <HAL_GetTick>
 80057ae:	4602      	mov	r2, r0
 80057b0:	693b      	ldr	r3, [r7, #16]
 80057b2:	1ad3      	subs	r3, r2, r3
 80057b4:	2b02      	cmp	r3, #2
 80057b6:	d901      	bls.n	80057bc <HAL_RCC_OscConfig+0x540>
          {
            return HAL_TIMEOUT;
 80057b8:	2303      	movs	r3, #3
 80057ba:	e081      	b.n	80058c0 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057bc:	4b42      	ldr	r3, [pc, #264]	@ (80058c8 <HAL_RCC_OscConfig+0x64c>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d1f0      	bne.n	80057aa <HAL_RCC_OscConfig+0x52e>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	69da      	ldr	r2, [r3, #28]
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6a1b      	ldr	r3, [r3, #32]
 80057d0:	431a      	orrs	r2, r3
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d6:	019b      	lsls	r3, r3, #6
 80057d8:	431a      	orrs	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057de:	085b      	lsrs	r3, r3, #1
 80057e0:	3b01      	subs	r3, #1
 80057e2:	041b      	lsls	r3, r3, #16
 80057e4:	431a      	orrs	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057ea:	061b      	lsls	r3, r3, #24
 80057ec:	4936      	ldr	r1, [pc, #216]	@ (80058c8 <HAL_RCC_OscConfig+0x64c>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80057f2:	4b37      	ldr	r3, [pc, #220]	@ (80058d0 <HAL_RCC_OscConfig+0x654>)
 80057f4:	2201      	movs	r2, #1
 80057f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057f8:	f7fd fa80 	bl	8002cfc <HAL_GetTick>
 80057fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057fe:	e008      	b.n	8005812 <HAL_RCC_OscConfig+0x596>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005800:	f7fd fa7c 	bl	8002cfc <HAL_GetTick>
 8005804:	4602      	mov	r2, r0
 8005806:	693b      	ldr	r3, [r7, #16]
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	2b02      	cmp	r3, #2
 800580c:	d901      	bls.n	8005812 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800580e:	2303      	movs	r3, #3
 8005810:	e056      	b.n	80058c0 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005812:	4b2d      	ldr	r3, [pc, #180]	@ (80058c8 <HAL_RCC_OscConfig+0x64c>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800581a:	2b00      	cmp	r3, #0
 800581c:	d0f0      	beq.n	8005800 <HAL_RCC_OscConfig+0x584>
 800581e:	e04e      	b.n	80058be <HAL_RCC_OscConfig+0x642>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005820:	4b2b      	ldr	r3, [pc, #172]	@ (80058d0 <HAL_RCC_OscConfig+0x654>)
 8005822:	2200      	movs	r2, #0
 8005824:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005826:	f7fd fa69 	bl	8002cfc <HAL_GetTick>
 800582a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800582c:	e008      	b.n	8005840 <HAL_RCC_OscConfig+0x5c4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800582e:	f7fd fa65 	bl	8002cfc <HAL_GetTick>
 8005832:	4602      	mov	r2, r0
 8005834:	693b      	ldr	r3, [r7, #16]
 8005836:	1ad3      	subs	r3, r2, r3
 8005838:	2b02      	cmp	r3, #2
 800583a:	d901      	bls.n	8005840 <HAL_RCC_OscConfig+0x5c4>
          {
            return HAL_TIMEOUT;
 800583c:	2303      	movs	r3, #3
 800583e:	e03f      	b.n	80058c0 <HAL_RCC_OscConfig+0x644>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005840:	4b21      	ldr	r3, [pc, #132]	@ (80058c8 <HAL_RCC_OscConfig+0x64c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005848:	2b00      	cmp	r3, #0
 800584a:	d1f0      	bne.n	800582e <HAL_RCC_OscConfig+0x5b2>
 800584c:	e037      	b.n	80058be <HAL_RCC_OscConfig+0x642>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	699b      	ldr	r3, [r3, #24]
 8005852:	2b01      	cmp	r3, #1
 8005854:	d101      	bne.n	800585a <HAL_RCC_OscConfig+0x5de>
      {
        return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e032      	b.n	80058c0 <HAL_RCC_OscConfig+0x644>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800585a:	4b1b      	ldr	r3, [pc, #108]	@ (80058c8 <HAL_RCC_OscConfig+0x64c>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	699b      	ldr	r3, [r3, #24]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d028      	beq.n	80058ba <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005872:	429a      	cmp	r2, r3
 8005874:	d121      	bne.n	80058ba <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005880:	429a      	cmp	r2, r3
 8005882:	d11a      	bne.n	80058ba <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005884:	68fa      	ldr	r2, [r7, #12]
 8005886:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800588a:	4013      	ands	r3, r2
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005890:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005892:	4293      	cmp	r3, r2
 8005894:	d111      	bne.n	80058ba <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80058a0:	085b      	lsrs	r3, r3, #1
 80058a2:	3b01      	subs	r3, #1
 80058a4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d107      	bne.n	80058ba <HAL_RCC_OscConfig+0x63e>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058b4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d001      	beq.n	80058be <HAL_RCC_OscConfig+0x642>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e000      	b.n	80058c0 <HAL_RCC_OscConfig+0x644>
        }
      }
    }
  }
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3718      	adds	r7, #24
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	40023800 	.word	0x40023800
 80058cc:	0800ef78 	.word	0x0800ef78
 80058d0:	42470060 	.word	0x42470060

080058d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
 80058dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	e174      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x2fe>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d003      	beq.n	80058f8 <HAL_RCC_ClockConfig+0x24>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	2b0f      	cmp	r3, #15
 80058f6:	d904      	bls.n	8005902 <HAL_RCC_ClockConfig+0x2e>
 80058f8:	f240 215a 	movw	r1, #602	@ 0x25a
 80058fc:	487b      	ldr	r0, [pc, #492]	@ (8005aec <HAL_RCC_ClockConfig+0x218>)
 80058fe:	f7fc fe5d 	bl	80025bc <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	2b00      	cmp	r3, #0
 8005906:	d019      	beq.n	800593c <HAL_RCC_ClockConfig+0x68>
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d016      	beq.n	800593c <HAL_RCC_ClockConfig+0x68>
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	2b02      	cmp	r3, #2
 8005912:	d013      	beq.n	800593c <HAL_RCC_ClockConfig+0x68>
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	2b03      	cmp	r3, #3
 8005918:	d010      	beq.n	800593c <HAL_RCC_ClockConfig+0x68>
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	2b04      	cmp	r3, #4
 800591e:	d00d      	beq.n	800593c <HAL_RCC_ClockConfig+0x68>
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	2b05      	cmp	r3, #5
 8005924:	d00a      	beq.n	800593c <HAL_RCC_ClockConfig+0x68>
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	2b06      	cmp	r3, #6
 800592a:	d007      	beq.n	800593c <HAL_RCC_ClockConfig+0x68>
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	2b07      	cmp	r3, #7
 8005930:	d004      	beq.n	800593c <HAL_RCC_ClockConfig+0x68>
 8005932:	f240 215b 	movw	r1, #603	@ 0x25b
 8005936:	486d      	ldr	r0, [pc, #436]	@ (8005aec <HAL_RCC_ClockConfig+0x218>)
 8005938:	f7fc fe40 	bl	80025bc <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800593c:	4b6c      	ldr	r3, [pc, #432]	@ (8005af0 <HAL_RCC_ClockConfig+0x21c>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	f003 0307 	and.w	r3, r3, #7
 8005944:	683a      	ldr	r2, [r7, #0]
 8005946:	429a      	cmp	r2, r3
 8005948:	d90c      	bls.n	8005964 <HAL_RCC_ClockConfig+0x90>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800594a:	4b69      	ldr	r3, [pc, #420]	@ (8005af0 <HAL_RCC_ClockConfig+0x21c>)
 800594c:	683a      	ldr	r2, [r7, #0]
 800594e:	b2d2      	uxtb	r2, r2
 8005950:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005952:	4b67      	ldr	r3, [pc, #412]	@ (8005af0 <HAL_RCC_ClockConfig+0x21c>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	683a      	ldr	r2, [r7, #0]
 800595c:	429a      	cmp	r2, r3
 800595e:	d001      	beq.n	8005964 <HAL_RCC_ClockConfig+0x90>
    {
      return HAL_ERROR;
 8005960:	2301      	movs	r3, #1
 8005962:	e136      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x2fe>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f003 0302 	and.w	r3, r3, #2
 800596c:	2b00      	cmp	r3, #0
 800596e:	d049      	beq.n	8005a04 <HAL_RCC_ClockConfig+0x130>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b00      	cmp	r3, #0
 800597a:	d005      	beq.n	8005988 <HAL_RCC_ClockConfig+0xb4>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800597c:	4b5d      	ldr	r3, [pc, #372]	@ (8005af4 <HAL_RCC_ClockConfig+0x220>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	4a5c      	ldr	r2, [pc, #368]	@ (8005af4 <HAL_RCC_ClockConfig+0x220>)
 8005982:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8005986:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f003 0308 	and.w	r3, r3, #8
 8005990:	2b00      	cmp	r3, #0
 8005992:	d005      	beq.n	80059a0 <HAL_RCC_ClockConfig+0xcc>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005994:	4b57      	ldr	r3, [pc, #348]	@ (8005af4 <HAL_RCC_ClockConfig+0x220>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	4a56      	ldr	r2, [pc, #344]	@ (8005af4 <HAL_RCC_ClockConfig+0x220>)
 800599a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800599e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	689b      	ldr	r3, [r3, #8]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d024      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x11e>
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	2b80      	cmp	r3, #128	@ 0x80
 80059ae:	d020      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x11e>
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	689b      	ldr	r3, [r3, #8]
 80059b4:	2b90      	cmp	r3, #144	@ 0x90
 80059b6:	d01c      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x11e>
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	2ba0      	cmp	r3, #160	@ 0xa0
 80059be:	d018      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x11e>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	689b      	ldr	r3, [r3, #8]
 80059c4:	2bb0      	cmp	r3, #176	@ 0xb0
 80059c6:	d014      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x11e>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	2bc0      	cmp	r3, #192	@ 0xc0
 80059ce:	d010      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x11e>
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	2bd0      	cmp	r3, #208	@ 0xd0
 80059d6:	d00c      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x11e>
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	689b      	ldr	r3, [r3, #8]
 80059dc:	2be0      	cmp	r3, #224	@ 0xe0
 80059de:	d008      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x11e>
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	689b      	ldr	r3, [r3, #8]
 80059e4:	2bf0      	cmp	r3, #240	@ 0xf0
 80059e6:	d004      	beq.n	80059f2 <HAL_RCC_ClockConfig+0x11e>
 80059e8:	f240 217e 	movw	r1, #638	@ 0x27e
 80059ec:	483f      	ldr	r0, [pc, #252]	@ (8005aec <HAL_RCC_ClockConfig+0x218>)
 80059ee:	f7fc fde5 	bl	80025bc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80059f2:	4b40      	ldr	r3, [pc, #256]	@ (8005af4 <HAL_RCC_ClockConfig+0x220>)
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	493d      	ldr	r1, [pc, #244]	@ (8005af4 <HAL_RCC_ClockConfig+0x220>)
 8005a00:	4313      	orrs	r3, r2
 8005a02:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f003 0301 	and.w	r3, r3, #1
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d059      	beq.n	8005ac4 <HAL_RCC_ClockConfig+0x1f0>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	685b      	ldr	r3, [r3, #4]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d010      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x166>
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	685b      	ldr	r3, [r3, #4]
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d00c      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x166>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	685b      	ldr	r3, [r3, #4]
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d008      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x166>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b03      	cmp	r3, #3
 8005a2e:	d004      	beq.n	8005a3a <HAL_RCC_ClockConfig+0x166>
 8005a30:	f240 2185 	movw	r1, #645	@ 0x285
 8005a34:	482d      	ldr	r0, [pc, #180]	@ (8005aec <HAL_RCC_ClockConfig+0x218>)
 8005a36:	f7fc fdc1 	bl	80025bc <assert_failed>

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	2b01      	cmp	r3, #1
 8005a40:	d107      	bne.n	8005a52 <HAL_RCC_ClockConfig+0x17e>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a42:	4b2c      	ldr	r3, [pc, #176]	@ (8005af4 <HAL_RCC_ClockConfig+0x220>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d119      	bne.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e0bf      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x2fe>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	2b02      	cmp	r3, #2
 8005a58:	d003      	beq.n	8005a62 <HAL_RCC_ClockConfig+0x18e>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a5e:	2b03      	cmp	r3, #3
 8005a60:	d107      	bne.n	8005a72 <HAL_RCC_ClockConfig+0x19e>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a62:	4b24      	ldr	r3, [pc, #144]	@ (8005af4 <HAL_RCC_ClockConfig+0x220>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d109      	bne.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e0af      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x2fe>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a72:	4b20      	ldr	r3, [pc, #128]	@ (8005af4 <HAL_RCC_ClockConfig+0x220>)
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <HAL_RCC_ClockConfig+0x1ae>
      {
        return HAL_ERROR;
 8005a7e:	2301      	movs	r3, #1
 8005a80:	e0a7      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x2fe>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a82:	4b1c      	ldr	r3, [pc, #112]	@ (8005af4 <HAL_RCC_ClockConfig+0x220>)
 8005a84:	689b      	ldr	r3, [r3, #8]
 8005a86:	f023 0203 	bic.w	r2, r3, #3
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	685b      	ldr	r3, [r3, #4]
 8005a8e:	4919      	ldr	r1, [pc, #100]	@ (8005af4 <HAL_RCC_ClockConfig+0x220>)
 8005a90:	4313      	orrs	r3, r2
 8005a92:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a94:	f7fd f932 	bl	8002cfc <HAL_GetTick>
 8005a98:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a9a:	e00a      	b.n	8005ab2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a9c:	f7fd f92e 	bl	8002cfc <HAL_GetTick>
 8005aa0:	4602      	mov	r2, r0
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	1ad3      	subs	r3, r2, r3
 8005aa6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d901      	bls.n	8005ab2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005aae:	2303      	movs	r3, #3
 8005ab0:	e08f      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x2fe>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ab2:	4b10      	ldr	r3, [pc, #64]	@ (8005af4 <HAL_RCC_ClockConfig+0x220>)
 8005ab4:	689b      	ldr	r3, [r3, #8]
 8005ab6:	f003 020c 	and.w	r2, r3, #12
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	009b      	lsls	r3, r3, #2
 8005ac0:	429a      	cmp	r2, r3
 8005ac2:	d1eb      	bne.n	8005a9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005ac4:	4b0a      	ldr	r3, [pc, #40]	@ (8005af0 <HAL_RCC_ClockConfig+0x21c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	683a      	ldr	r2, [r7, #0]
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d212      	bcs.n	8005af8 <HAL_RCC_ClockConfig+0x224>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ad2:	4b07      	ldr	r3, [pc, #28]	@ (8005af0 <HAL_RCC_ClockConfig+0x21c>)
 8005ad4:	683a      	ldr	r2, [r7, #0]
 8005ad6:	b2d2      	uxtb	r2, r2
 8005ad8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ada:	4b05      	ldr	r3, [pc, #20]	@ (8005af0 <HAL_RCC_ClockConfig+0x21c>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	683a      	ldr	r2, [r7, #0]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	d007      	beq.n	8005af8 <HAL_RCC_ClockConfig+0x224>
    {
      return HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	e072      	b.n	8005bd2 <HAL_RCC_ClockConfig+0x2fe>
 8005aec:	0800ef78 	.word	0x0800ef78
 8005af0:	40023c00 	.word	0x40023c00
 8005af4:	40023800 	.word	0x40023800
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	f003 0304 	and.w	r3, r3, #4
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d025      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x27c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	68db      	ldr	r3, [r3, #12]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d018      	beq.n	8005b3e <HAL_RCC_ClockConfig+0x26a>
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b14:	d013      	beq.n	8005b3e <HAL_RCC_ClockConfig+0x26a>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	68db      	ldr	r3, [r3, #12]
 8005b1a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005b1e:	d00e      	beq.n	8005b3e <HAL_RCC_ClockConfig+0x26a>
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	68db      	ldr	r3, [r3, #12]
 8005b24:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8005b28:	d009      	beq.n	8005b3e <HAL_RCC_ClockConfig+0x26a>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	68db      	ldr	r3, [r3, #12]
 8005b2e:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8005b32:	d004      	beq.n	8005b3e <HAL_RCC_ClockConfig+0x26a>
 8005b34:	f240 21c3 	movw	r1, #707	@ 0x2c3
 8005b38:	4828      	ldr	r0, [pc, #160]	@ (8005bdc <HAL_RCC_ClockConfig+0x308>)
 8005b3a:	f7fc fd3f 	bl	80025bc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005b3e:	4b28      	ldr	r3, [pc, #160]	@ (8005be0 <HAL_RCC_ClockConfig+0x30c>)
 8005b40:	689b      	ldr	r3, [r3, #8]
 8005b42:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	68db      	ldr	r3, [r3, #12]
 8005b4a:	4925      	ldr	r1, [pc, #148]	@ (8005be0 <HAL_RCC_ClockConfig+0x30c>)
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f003 0308 	and.w	r3, r3, #8
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d026      	beq.n	8005baa <HAL_RCC_ClockConfig+0x2d6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d018      	beq.n	8005b96 <HAL_RCC_ClockConfig+0x2c2>
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	691b      	ldr	r3, [r3, #16]
 8005b68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b6c:	d013      	beq.n	8005b96 <HAL_RCC_ClockConfig+0x2c2>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8005b76:	d00e      	beq.n	8005b96 <HAL_RCC_ClockConfig+0x2c2>
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8005b80:	d009      	beq.n	8005b96 <HAL_RCC_ClockConfig+0x2c2>
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	f5b3 5fe0 	cmp.w	r3, #7168	@ 0x1c00
 8005b8a:	d004      	beq.n	8005b96 <HAL_RCC_ClockConfig+0x2c2>
 8005b8c:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8005b90:	4812      	ldr	r0, [pc, #72]	@ (8005bdc <HAL_RCC_ClockConfig+0x308>)
 8005b92:	f7fc fd13 	bl	80025bc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b96:	4b12      	ldr	r3, [pc, #72]	@ (8005be0 <HAL_RCC_ClockConfig+0x30c>)
 8005b98:	689b      	ldr	r3, [r3, #8]
 8005b9a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	691b      	ldr	r3, [r3, #16]
 8005ba2:	00db      	lsls	r3, r3, #3
 8005ba4:	490e      	ldr	r1, [pc, #56]	@ (8005be0 <HAL_RCC_ClockConfig+0x30c>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005baa:	f000 f821 	bl	8005bf0 <HAL_RCC_GetSysClockFreq>
 8005bae:	4602      	mov	r2, r0
 8005bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8005be0 <HAL_RCC_ClockConfig+0x30c>)
 8005bb2:	689b      	ldr	r3, [r3, #8]
 8005bb4:	091b      	lsrs	r3, r3, #4
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	490a      	ldr	r1, [pc, #40]	@ (8005be4 <HAL_RCC_ClockConfig+0x310>)
 8005bbc:	5ccb      	ldrb	r3, [r1, r3]
 8005bbe:	fa22 f303 	lsr.w	r3, r2, r3
 8005bc2:	4a09      	ldr	r2, [pc, #36]	@ (8005be8 <HAL_RCC_ClockConfig+0x314>)
 8005bc4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005bc6:	4b09      	ldr	r3, [pc, #36]	@ (8005bec <HAL_RCC_ClockConfig+0x318>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f7fc ff18 	bl	8002a00 <HAL_InitTick>

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	0800ef78 	.word	0x0800ef78
 8005be0:	40023800 	.word	0x40023800
 8005be4:	0800f0e4 	.word	0x0800f0e4
 8005be8:	20000000 	.word	0x20000000
 8005bec:	20000004 	.word	0x20000004

08005bf0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005bf0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005bf4:	b090      	sub	sp, #64	@ 0x40
 8005bf6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8005c00:	2300      	movs	r3, #0
 8005c02:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8005c04:	2300      	movs	r3, #0
 8005c06:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005c08:	4b59      	ldr	r3, [pc, #356]	@ (8005d70 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c0a:	689b      	ldr	r3, [r3, #8]
 8005c0c:	f003 030c 	and.w	r3, r3, #12
 8005c10:	2b08      	cmp	r3, #8
 8005c12:	d00d      	beq.n	8005c30 <HAL_RCC_GetSysClockFreq+0x40>
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	f200 80a1 	bhi.w	8005d5c <HAL_RCC_GetSysClockFreq+0x16c>
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d002      	beq.n	8005c24 <HAL_RCC_GetSysClockFreq+0x34>
 8005c1e:	2b04      	cmp	r3, #4
 8005c20:	d003      	beq.n	8005c2a <HAL_RCC_GetSysClockFreq+0x3a>
 8005c22:	e09b      	b.n	8005d5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005c24:	4b53      	ldr	r3, [pc, #332]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0x184>)
 8005c26:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c28:	e09b      	b.n	8005d62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005c2a:	4b53      	ldr	r3, [pc, #332]	@ (8005d78 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c2c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005c2e:	e098      	b.n	8005d62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005c30:	4b4f      	ldr	r3, [pc, #316]	@ (8005d70 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005c38:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005c3a:	4b4d      	ldr	r3, [pc, #308]	@ (8005d70 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c3c:	685b      	ldr	r3, [r3, #4]
 8005c3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d028      	beq.n	8005c98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c46:	4b4a      	ldr	r3, [pc, #296]	@ (8005d70 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	099b      	lsrs	r3, r3, #6
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	623b      	str	r3, [r7, #32]
 8005c50:	627a      	str	r2, [r7, #36]	@ 0x24
 8005c52:	6a3b      	ldr	r3, [r7, #32]
 8005c54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005c58:	2100      	movs	r1, #0
 8005c5a:	4b47      	ldr	r3, [pc, #284]	@ (8005d78 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c5c:	fb03 f201 	mul.w	r2, r3, r1
 8005c60:	2300      	movs	r3, #0
 8005c62:	fb00 f303 	mul.w	r3, r0, r3
 8005c66:	4413      	add	r3, r2
 8005c68:	4a43      	ldr	r2, [pc, #268]	@ (8005d78 <HAL_RCC_GetSysClockFreq+0x188>)
 8005c6a:	fba0 1202 	umull	r1, r2, r0, r2
 8005c6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005c70:	460a      	mov	r2, r1
 8005c72:	62ba      	str	r2, [r7, #40]	@ 0x28
 8005c74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c76:	4413      	add	r3, r2
 8005c78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c7c:	2200      	movs	r2, #0
 8005c7e:	61bb      	str	r3, [r7, #24]
 8005c80:	61fa      	str	r2, [r7, #28]
 8005c82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8005c8a:	f7fb f885 	bl	8000d98 <__aeabi_uldivmod>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	460b      	mov	r3, r1
 8005c92:	4613      	mov	r3, r2
 8005c94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005c96:	e053      	b.n	8005d40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c98:	4b35      	ldr	r3, [pc, #212]	@ (8005d70 <HAL_RCC_GetSysClockFreq+0x180>)
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	099b      	lsrs	r3, r3, #6
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	613b      	str	r3, [r7, #16]
 8005ca2:	617a      	str	r2, [r7, #20]
 8005ca4:	693b      	ldr	r3, [r7, #16]
 8005ca6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005caa:	f04f 0b00 	mov.w	fp, #0
 8005cae:	4652      	mov	r2, sl
 8005cb0:	465b      	mov	r3, fp
 8005cb2:	f04f 0000 	mov.w	r0, #0
 8005cb6:	f04f 0100 	mov.w	r1, #0
 8005cba:	0159      	lsls	r1, r3, #5
 8005cbc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cc0:	0150      	lsls	r0, r2, #5
 8005cc2:	4602      	mov	r2, r0
 8005cc4:	460b      	mov	r3, r1
 8005cc6:	ebb2 080a 	subs.w	r8, r2, sl
 8005cca:	eb63 090b 	sbc.w	r9, r3, fp
 8005cce:	f04f 0200 	mov.w	r2, #0
 8005cd2:	f04f 0300 	mov.w	r3, #0
 8005cd6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8005cda:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005cde:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005ce2:	ebb2 0408 	subs.w	r4, r2, r8
 8005ce6:	eb63 0509 	sbc.w	r5, r3, r9
 8005cea:	f04f 0200 	mov.w	r2, #0
 8005cee:	f04f 0300 	mov.w	r3, #0
 8005cf2:	00eb      	lsls	r3, r5, #3
 8005cf4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cf8:	00e2      	lsls	r2, r4, #3
 8005cfa:	4614      	mov	r4, r2
 8005cfc:	461d      	mov	r5, r3
 8005cfe:	eb14 030a 	adds.w	r3, r4, sl
 8005d02:	603b      	str	r3, [r7, #0]
 8005d04:	eb45 030b 	adc.w	r3, r5, fp
 8005d08:	607b      	str	r3, [r7, #4]
 8005d0a:	f04f 0200 	mov.w	r2, #0
 8005d0e:	f04f 0300 	mov.w	r3, #0
 8005d12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d16:	4629      	mov	r1, r5
 8005d18:	028b      	lsls	r3, r1, #10
 8005d1a:	4621      	mov	r1, r4
 8005d1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d20:	4621      	mov	r1, r4
 8005d22:	028a      	lsls	r2, r1, #10
 8005d24:	4610      	mov	r0, r2
 8005d26:	4619      	mov	r1, r3
 8005d28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	60bb      	str	r3, [r7, #8]
 8005d2e:	60fa      	str	r2, [r7, #12]
 8005d30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005d34:	f7fb f830 	bl	8000d98 <__aeabi_uldivmod>
 8005d38:	4602      	mov	r2, r0
 8005d3a:	460b      	mov	r3, r1
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005d40:	4b0b      	ldr	r3, [pc, #44]	@ (8005d70 <HAL_RCC_GetSysClockFreq+0x180>)
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	0c1b      	lsrs	r3, r3, #16
 8005d46:	f003 0303 	and.w	r3, r3, #3
 8005d4a:	3301      	adds	r3, #1
 8005d4c:	005b      	lsls	r3, r3, #1
 8005d4e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8005d50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d54:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005d5a:	e002      	b.n	8005d62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d5c:	4b05      	ldr	r3, [pc, #20]	@ (8005d74 <HAL_RCC_GetSysClockFreq+0x184>)
 8005d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8005d60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3740      	adds	r7, #64	@ 0x40
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d6e:	bf00      	nop
 8005d70:	40023800 	.word	0x40023800
 8005d74:	00f42400 	.word	0x00f42400
 8005d78:	017d7840 	.word	0x017d7840

08005d7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d7c:	b480      	push	{r7}
 8005d7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d80:	4b03      	ldr	r3, [pc, #12]	@ (8005d90 <HAL_RCC_GetHCLKFreq+0x14>)
 8005d82:	681b      	ldr	r3, [r3, #0]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	46bd      	mov	sp, r7
 8005d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8c:	4770      	bx	lr
 8005d8e:	bf00      	nop
 8005d90:	20000000 	.word	0x20000000

08005d94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d94:	b580      	push	{r7, lr}
 8005d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005d98:	f7ff fff0 	bl	8005d7c <HAL_RCC_GetHCLKFreq>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	4b05      	ldr	r3, [pc, #20]	@ (8005db4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005da0:	689b      	ldr	r3, [r3, #8]
 8005da2:	0a9b      	lsrs	r3, r3, #10
 8005da4:	f003 0307 	and.w	r3, r3, #7
 8005da8:	4903      	ldr	r1, [pc, #12]	@ (8005db8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005daa:	5ccb      	ldrb	r3, [r1, r3]
 8005dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	40023800 	.word	0x40023800
 8005db8:	0800f0f4 	.word	0x0800f0f4

08005dbc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005dc0:	f7ff ffdc 	bl	8005d7c <HAL_RCC_GetHCLKFreq>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	4b05      	ldr	r3, [pc, #20]	@ (8005ddc <HAL_RCC_GetPCLK2Freq+0x20>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	0b5b      	lsrs	r3, r3, #13
 8005dcc:	f003 0307 	and.w	r3, r3, #7
 8005dd0:	4903      	ldr	r1, [pc, #12]	@ (8005de0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005dd2:	5ccb      	ldrb	r3, [r1, r3]
 8005dd4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dd8:	4618      	mov	r0, r3
 8005dda:	bd80      	pop	{r7, pc}
 8005ddc:	40023800 	.word	0x40023800
 8005de0:	0800f0f4 	.word	0x0800f0f4

08005de4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	220f      	movs	r2, #15
 8005df2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005df4:	4b12      	ldr	r3, [pc, #72]	@ (8005e40 <HAL_RCC_GetClockConfig+0x5c>)
 8005df6:	689b      	ldr	r3, [r3, #8]
 8005df8:	f003 0203 	and.w	r2, r3, #3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005e00:	4b0f      	ldr	r3, [pc, #60]	@ (8005e40 <HAL_RCC_GetClockConfig+0x5c>)
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005e0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005e40 <HAL_RCC_GetClockConfig+0x5c>)
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005e18:	4b09      	ldr	r3, [pc, #36]	@ (8005e40 <HAL_RCC_GetClockConfig+0x5c>)
 8005e1a:	689b      	ldr	r3, [r3, #8]
 8005e1c:	08db      	lsrs	r3, r3, #3
 8005e1e:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005e26:	4b07      	ldr	r3, [pc, #28]	@ (8005e44 <HAL_RCC_GetClockConfig+0x60>)
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	f003 0207 	and.w	r2, r3, #7
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	601a      	str	r2, [r3, #0]
}
 8005e32:	bf00      	nop
 8005e34:	370c      	adds	r7, #12
 8005e36:	46bd      	mov	sp, r7
 8005e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3c:	4770      	bx	lr
 8005e3e:	bf00      	nop
 8005e40:	40023800 	.word	0x40023800
 8005e44:	40023c00 	.word	0x40023c00

08005e48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b082      	sub	sp, #8
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d101      	bne.n	8005e5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e56:	2301      	movs	r3, #1
 8005e58:	e0ed      	b.n	8006036 <HAL_TIM_Base_Init+0x1ee>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a78      	ldr	r2, [pc, #480]	@ (8006040 <HAL_TIM_Base_Init+0x1f8>)
 8005e60:	4293      	cmp	r3, r2
 8005e62:	d045      	beq.n	8005ef0 <HAL_TIM_Base_Init+0xa8>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005e6c:	d040      	beq.n	8005ef0 <HAL_TIM_Base_Init+0xa8>
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	4a74      	ldr	r2, [pc, #464]	@ (8006044 <HAL_TIM_Base_Init+0x1fc>)
 8005e74:	4293      	cmp	r3, r2
 8005e76:	d03b      	beq.n	8005ef0 <HAL_TIM_Base_Init+0xa8>
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	4a72      	ldr	r2, [pc, #456]	@ (8006048 <HAL_TIM_Base_Init+0x200>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d036      	beq.n	8005ef0 <HAL_TIM_Base_Init+0xa8>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	4a71      	ldr	r2, [pc, #452]	@ (800604c <HAL_TIM_Base_Init+0x204>)
 8005e88:	4293      	cmp	r3, r2
 8005e8a:	d031      	beq.n	8005ef0 <HAL_TIM_Base_Init+0xa8>
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a6f      	ldr	r2, [pc, #444]	@ (8006050 <HAL_TIM_Base_Init+0x208>)
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d02c      	beq.n	8005ef0 <HAL_TIM_Base_Init+0xa8>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	4a6e      	ldr	r2, [pc, #440]	@ (8006054 <HAL_TIM_Base_Init+0x20c>)
 8005e9c:	4293      	cmp	r3, r2
 8005e9e:	d027      	beq.n	8005ef0 <HAL_TIM_Base_Init+0xa8>
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	4a6c      	ldr	r2, [pc, #432]	@ (8006058 <HAL_TIM_Base_Init+0x210>)
 8005ea6:	4293      	cmp	r3, r2
 8005ea8:	d022      	beq.n	8005ef0 <HAL_TIM_Base_Init+0xa8>
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	4a6b      	ldr	r2, [pc, #428]	@ (800605c <HAL_TIM_Base_Init+0x214>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d01d      	beq.n	8005ef0 <HAL_TIM_Base_Init+0xa8>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	4a69      	ldr	r2, [pc, #420]	@ (8006060 <HAL_TIM_Base_Init+0x218>)
 8005eba:	4293      	cmp	r3, r2
 8005ebc:	d018      	beq.n	8005ef0 <HAL_TIM_Base_Init+0xa8>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	4a68      	ldr	r2, [pc, #416]	@ (8006064 <HAL_TIM_Base_Init+0x21c>)
 8005ec4:	4293      	cmp	r3, r2
 8005ec6:	d013      	beq.n	8005ef0 <HAL_TIM_Base_Init+0xa8>
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	4a66      	ldr	r2, [pc, #408]	@ (8006068 <HAL_TIM_Base_Init+0x220>)
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d00e      	beq.n	8005ef0 <HAL_TIM_Base_Init+0xa8>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	4a65      	ldr	r2, [pc, #404]	@ (800606c <HAL_TIM_Base_Init+0x224>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d009      	beq.n	8005ef0 <HAL_TIM_Base_Init+0xa8>
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4a63      	ldr	r2, [pc, #396]	@ (8006070 <HAL_TIM_Base_Init+0x228>)
 8005ee2:	4293      	cmp	r3, r2
 8005ee4:	d004      	beq.n	8005ef0 <HAL_TIM_Base_Init+0xa8>
 8005ee6:	f240 1113 	movw	r1, #275	@ 0x113
 8005eea:	4862      	ldr	r0, [pc, #392]	@ (8006074 <HAL_TIM_Base_Init+0x22c>)
 8005eec:	f7fc fb66 	bl	80025bc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	689b      	ldr	r3, [r3, #8]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d014      	beq.n	8005f22 <HAL_TIM_Base_Init+0xda>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	2b10      	cmp	r3, #16
 8005efe:	d010      	beq.n	8005f22 <HAL_TIM_Base_Init+0xda>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	689b      	ldr	r3, [r3, #8]
 8005f04:	2b20      	cmp	r3, #32
 8005f06:	d00c      	beq.n	8005f22 <HAL_TIM_Base_Init+0xda>
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	689b      	ldr	r3, [r3, #8]
 8005f0c:	2b40      	cmp	r3, #64	@ 0x40
 8005f0e:	d008      	beq.n	8005f22 <HAL_TIM_Base_Init+0xda>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	689b      	ldr	r3, [r3, #8]
 8005f14:	2b60      	cmp	r3, #96	@ 0x60
 8005f16:	d004      	beq.n	8005f22 <HAL_TIM_Base_Init+0xda>
 8005f18:	f44f 718a 	mov.w	r1, #276	@ 0x114
 8005f1c:	4855      	ldr	r0, [pc, #340]	@ (8006074 <HAL_TIM_Base_Init+0x22c>)
 8005f1e:	f7fc fb4d 	bl	80025bc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	691b      	ldr	r3, [r3, #16]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d00e      	beq.n	8005f48 <HAL_TIM_Base_Init+0x100>
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	691b      	ldr	r3, [r3, #16]
 8005f2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005f32:	d009      	beq.n	8005f48 <HAL_TIM_Base_Init+0x100>
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f3c:	d004      	beq.n	8005f48 <HAL_TIM_Base_Init+0x100>
 8005f3e:	f240 1115 	movw	r1, #277	@ 0x115
 8005f42:	484c      	ldr	r0, [pc, #304]	@ (8006074 <HAL_TIM_Base_Init+0x22c>)
 8005f44:	f7fc fb3a 	bl	80025bc <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005f50:	d004      	beq.n	8005f5c <HAL_TIM_Base_Init+0x114>
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	4a3d      	ldr	r2, [pc, #244]	@ (800604c <HAL_TIM_Base_Init+0x204>)
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d107      	bne.n	8005f6c <HAL_TIM_Base_Init+0x124>
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	bf14      	ite	ne
 8005f64:	2301      	movne	r3, #1
 8005f66:	2300      	moveq	r3, #0
 8005f68:	b2db      	uxtb	r3, r3
 8005f6a:	e00e      	b.n	8005f8a <HAL_TIM_Base_Init+0x142>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d006      	beq.n	8005f82 <HAL_TIM_Base_Init+0x13a>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	68db      	ldr	r3, [r3, #12]
 8005f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005f7c:	d201      	bcs.n	8005f82 <HAL_TIM_Base_Init+0x13a>
 8005f7e:	2301      	movs	r3, #1
 8005f80:	e000      	b.n	8005f84 <HAL_TIM_Base_Init+0x13c>
 8005f82:	2300      	movs	r3, #0
 8005f84:	f003 0301 	and.w	r3, r3, #1
 8005f88:	b2db      	uxtb	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d104      	bne.n	8005f98 <HAL_TIM_Base_Init+0x150>
 8005f8e:	f44f 718b 	mov.w	r1, #278	@ 0x116
 8005f92:	4838      	ldr	r0, [pc, #224]	@ (8006074 <HAL_TIM_Base_Init+0x22c>)
 8005f94:	f7fc fb12 	bl	80025bc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	699b      	ldr	r3, [r3, #24]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d008      	beq.n	8005fb2 <HAL_TIM_Base_Init+0x16a>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	699b      	ldr	r3, [r3, #24]
 8005fa4:	2b80      	cmp	r3, #128	@ 0x80
 8005fa6:	d004      	beq.n	8005fb2 <HAL_TIM_Base_Init+0x16a>
 8005fa8:	f240 1117 	movw	r1, #279	@ 0x117
 8005fac:	4831      	ldr	r0, [pc, #196]	@ (8006074 <HAL_TIM_Base_Init+0x22c>)
 8005fae:	f7fc fb05 	bl	80025bc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d106      	bne.n	8005fcc <HAL_TIM_Base_Init+0x184>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f000 f856 	bl	8006078 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	2202      	movs	r2, #2
 8005fd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681a      	ldr	r2, [r3, #0]
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	3304      	adds	r3, #4
 8005fdc:	4619      	mov	r1, r3
 8005fde:	4610      	mov	r0, r2
 8005fe0:	f000 fa32 	bl	8006448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2201      	movs	r2, #1
 8005ff8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2201      	movs	r2, #1
 8006000:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	2201      	movs	r2, #1
 8006010:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	2201      	movs	r2, #1
 8006018:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	2201      	movs	r2, #1
 8006020:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	2201      	movs	r2, #1
 8006028:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006034:	2300      	movs	r3, #0
}
 8006036:	4618      	mov	r0, r3
 8006038:	3708      	adds	r7, #8
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	40010000 	.word	0x40010000
 8006044:	40000400 	.word	0x40000400
 8006048:	40000800 	.word	0x40000800
 800604c:	40000c00 	.word	0x40000c00
 8006050:	40001000 	.word	0x40001000
 8006054:	40001400 	.word	0x40001400
 8006058:	40010400 	.word	0x40010400
 800605c:	40014000 	.word	0x40014000
 8006060:	40014400 	.word	0x40014400
 8006064:	40014800 	.word	0x40014800
 8006068:	40001800 	.word	0x40001800
 800606c:	40001c00 	.word	0x40001c00
 8006070:	40002000 	.word	0x40002000
 8006074:	0800efb0 	.word	0x0800efb0

08006078 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006078:	b480      	push	{r7}
 800607a:	b083      	sub	sp, #12
 800607c:	af00      	add	r7, sp, #0
 800607e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006080:	bf00      	nop
 8006082:	370c      	adds	r7, #12
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	4a51      	ldr	r2, [pc, #324]	@ (80061e0 <HAL_TIM_Base_Start_IT+0x154>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d045      	beq.n	800612a <HAL_TIM_Base_Start_IT+0x9e>
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060a6:	d040      	beq.n	800612a <HAL_TIM_Base_Start_IT+0x9e>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	4a4d      	ldr	r2, [pc, #308]	@ (80061e4 <HAL_TIM_Base_Start_IT+0x158>)
 80060ae:	4293      	cmp	r3, r2
 80060b0:	d03b      	beq.n	800612a <HAL_TIM_Base_Start_IT+0x9e>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a4c      	ldr	r2, [pc, #304]	@ (80061e8 <HAL_TIM_Base_Start_IT+0x15c>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d036      	beq.n	800612a <HAL_TIM_Base_Start_IT+0x9e>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	4a4a      	ldr	r2, [pc, #296]	@ (80061ec <HAL_TIM_Base_Start_IT+0x160>)
 80060c2:	4293      	cmp	r3, r2
 80060c4:	d031      	beq.n	800612a <HAL_TIM_Base_Start_IT+0x9e>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a49      	ldr	r2, [pc, #292]	@ (80061f0 <HAL_TIM_Base_Start_IT+0x164>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d02c      	beq.n	800612a <HAL_TIM_Base_Start_IT+0x9e>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a47      	ldr	r2, [pc, #284]	@ (80061f4 <HAL_TIM_Base_Start_IT+0x168>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d027      	beq.n	800612a <HAL_TIM_Base_Start_IT+0x9e>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a46      	ldr	r2, [pc, #280]	@ (80061f8 <HAL_TIM_Base_Start_IT+0x16c>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d022      	beq.n	800612a <HAL_TIM_Base_Start_IT+0x9e>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a44      	ldr	r2, [pc, #272]	@ (80061fc <HAL_TIM_Base_Start_IT+0x170>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d01d      	beq.n	800612a <HAL_TIM_Base_Start_IT+0x9e>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a43      	ldr	r2, [pc, #268]	@ (8006200 <HAL_TIM_Base_Start_IT+0x174>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d018      	beq.n	800612a <HAL_TIM_Base_Start_IT+0x9e>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a41      	ldr	r2, [pc, #260]	@ (8006204 <HAL_TIM_Base_Start_IT+0x178>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d013      	beq.n	800612a <HAL_TIM_Base_Start_IT+0x9e>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a40      	ldr	r2, [pc, #256]	@ (8006208 <HAL_TIM_Base_Start_IT+0x17c>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d00e      	beq.n	800612a <HAL_TIM_Base_Start_IT+0x9e>
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	4a3e      	ldr	r2, [pc, #248]	@ (800620c <HAL_TIM_Base_Start_IT+0x180>)
 8006112:	4293      	cmp	r3, r2
 8006114:	d009      	beq.n	800612a <HAL_TIM_Base_Start_IT+0x9e>
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a3d      	ldr	r2, [pc, #244]	@ (8006210 <HAL_TIM_Base_Start_IT+0x184>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d004      	beq.n	800612a <HAL_TIM_Base_Start_IT+0x9e>
 8006120:	f44f 71e8 	mov.w	r1, #464	@ 0x1d0
 8006124:	483b      	ldr	r0, [pc, #236]	@ (8006214 <HAL_TIM_Base_Start_IT+0x188>)
 8006126:	f7fc fa49 	bl	80025bc <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006130:	b2db      	uxtb	r3, r3
 8006132:	2b01      	cmp	r3, #1
 8006134:	d001      	beq.n	800613a <HAL_TIM_Base_Start_IT+0xae>
  {
    return HAL_ERROR;
 8006136:	2301      	movs	r3, #1
 8006138:	e04e      	b.n	80061d8 <HAL_TIM_Base_Start_IT+0x14c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2202      	movs	r2, #2
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	68da      	ldr	r2, [r3, #12]
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	f042 0201 	orr.w	r2, r2, #1
 8006150:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	4a22      	ldr	r2, [pc, #136]	@ (80061e0 <HAL_TIM_Base_Start_IT+0x154>)
 8006158:	4293      	cmp	r3, r2
 800615a:	d022      	beq.n	80061a2 <HAL_TIM_Base_Start_IT+0x116>
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006164:	d01d      	beq.n	80061a2 <HAL_TIM_Base_Start_IT+0x116>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	4a1e      	ldr	r2, [pc, #120]	@ (80061e4 <HAL_TIM_Base_Start_IT+0x158>)
 800616c:	4293      	cmp	r3, r2
 800616e:	d018      	beq.n	80061a2 <HAL_TIM_Base_Start_IT+0x116>
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	4a1c      	ldr	r2, [pc, #112]	@ (80061e8 <HAL_TIM_Base_Start_IT+0x15c>)
 8006176:	4293      	cmp	r3, r2
 8006178:	d013      	beq.n	80061a2 <HAL_TIM_Base_Start_IT+0x116>
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	4a1b      	ldr	r2, [pc, #108]	@ (80061ec <HAL_TIM_Base_Start_IT+0x160>)
 8006180:	4293      	cmp	r3, r2
 8006182:	d00e      	beq.n	80061a2 <HAL_TIM_Base_Start_IT+0x116>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	4a1b      	ldr	r2, [pc, #108]	@ (80061f8 <HAL_TIM_Base_Start_IT+0x16c>)
 800618a:	4293      	cmp	r3, r2
 800618c:	d009      	beq.n	80061a2 <HAL_TIM_Base_Start_IT+0x116>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	4a1a      	ldr	r2, [pc, #104]	@ (80061fc <HAL_TIM_Base_Start_IT+0x170>)
 8006194:	4293      	cmp	r3, r2
 8006196:	d004      	beq.n	80061a2 <HAL_TIM_Base_Start_IT+0x116>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	4a1a      	ldr	r2, [pc, #104]	@ (8006208 <HAL_TIM_Base_Start_IT+0x17c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d111      	bne.n	80061c6 <HAL_TIM_Base_Start_IT+0x13a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	689b      	ldr	r3, [r3, #8]
 80061a8:	f003 0307 	and.w	r3, r3, #7
 80061ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2b06      	cmp	r3, #6
 80061b2:	d010      	beq.n	80061d6 <HAL_TIM_Base_Start_IT+0x14a>
    {
      __HAL_TIM_ENABLE(htim);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	681a      	ldr	r2, [r3, #0]
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	f042 0201 	orr.w	r2, r2, #1
 80061c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061c4:	e007      	b.n	80061d6 <HAL_TIM_Base_Start_IT+0x14a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f042 0201 	orr.w	r2, r2, #1
 80061d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80061d6:	2300      	movs	r3, #0
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3710      	adds	r7, #16
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	40010000 	.word	0x40010000
 80061e4:	40000400 	.word	0x40000400
 80061e8:	40000800 	.word	0x40000800
 80061ec:	40000c00 	.word	0x40000c00
 80061f0:	40001000 	.word	0x40001000
 80061f4:	40001400 	.word	0x40001400
 80061f8:	40010400 	.word	0x40010400
 80061fc:	40014000 	.word	0x40014000
 8006200:	40014400 	.word	0x40014400
 8006204:	40014800 	.word	0x40014800
 8006208:	40001800 	.word	0x40001800
 800620c:	40001c00 	.word	0x40001c00
 8006210:	40002000 	.word	0x40002000
 8006214:	0800efb0 	.word	0x0800efb0

08006218 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	691b      	ldr	r3, [r3, #16]
 800622e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	2b00      	cmp	r3, #0
 8006238:	d020      	beq.n	800627c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f003 0302 	and.w	r3, r3, #2
 8006240:	2b00      	cmp	r3, #0
 8006242:	d01b      	beq.n	800627c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f06f 0202 	mvn.w	r2, #2
 800624c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2201      	movs	r2, #1
 8006252:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	699b      	ldr	r3, [r3, #24]
 800625a:	f003 0303 	and.w	r3, r3, #3
 800625e:	2b00      	cmp	r3, #0
 8006260:	d003      	beq.n	800626a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006262:	6878      	ldr	r0, [r7, #4]
 8006264:	f000 f8d2 	bl	800640c <HAL_TIM_IC_CaptureCallback>
 8006268:	e005      	b.n	8006276 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f8c4 	bl	80063f8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 f8d5 	bl	8006420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2200      	movs	r2, #0
 800627a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	f003 0304 	and.w	r3, r3, #4
 8006282:	2b00      	cmp	r3, #0
 8006284:	d020      	beq.n	80062c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f003 0304 	and.w	r3, r3, #4
 800628c:	2b00      	cmp	r3, #0
 800628e:	d01b      	beq.n	80062c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f06f 0204 	mvn.w	r2, #4
 8006298:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2202      	movs	r2, #2
 800629e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d003      	beq.n	80062b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 f8ac 	bl	800640c <HAL_TIM_IC_CaptureCallback>
 80062b4:	e005      	b.n	80062c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 f89e 	bl	80063f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f8af 	bl	8006420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80062c8:	68bb      	ldr	r3, [r7, #8]
 80062ca:	f003 0308 	and.w	r3, r3, #8
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d020      	beq.n	8006314 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80062d2:	68fb      	ldr	r3, [r7, #12]
 80062d4:	f003 0308 	and.w	r3, r3, #8
 80062d8:	2b00      	cmp	r3, #0
 80062da:	d01b      	beq.n	8006314 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f06f 0208 	mvn.w	r2, #8
 80062e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2204      	movs	r2, #4
 80062ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 f886 	bl	800640c <HAL_TIM_IC_CaptureCallback>
 8006300:	e005      	b.n	800630e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 f878 	bl	80063f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 f889 	bl	8006420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f003 0310 	and.w	r3, r3, #16
 800631a:	2b00      	cmp	r3, #0
 800631c:	d020      	beq.n	8006360 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f003 0310 	and.w	r3, r3, #16
 8006324:	2b00      	cmp	r3, #0
 8006326:	d01b      	beq.n	8006360 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f06f 0210 	mvn.w	r2, #16
 8006330:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	2208      	movs	r2, #8
 8006336:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	69db      	ldr	r3, [r3, #28]
 800633e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006342:	2b00      	cmp	r3, #0
 8006344:	d003      	beq.n	800634e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f000 f860 	bl	800640c <HAL_TIM_IC_CaptureCallback>
 800634c:	e005      	b.n	800635a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 f852 	bl	80063f8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 f863 	bl	8006420 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006360:	68bb      	ldr	r3, [r7, #8]
 8006362:	f003 0301 	and.w	r3, r3, #1
 8006366:	2b00      	cmp	r3, #0
 8006368:	d00c      	beq.n	8006384 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	f003 0301 	and.w	r3, r3, #1
 8006370:	2b00      	cmp	r3, #0
 8006372:	d007      	beq.n	8006384 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	f06f 0201 	mvn.w	r2, #1
 800637c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800637e:	6878      	ldr	r0, [r7, #4]
 8006380:	f7fc f904 	bl	800258c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800638a:	2b00      	cmp	r3, #0
 800638c:	d00c      	beq.n	80063a8 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006394:	2b00      	cmp	r3, #0
 8006396:	d007      	beq.n	80063a8 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80063a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f000 f906 	bl	80065b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80063a8:	68bb      	ldr	r3, [r7, #8]
 80063aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d00c      	beq.n	80063cc <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	d007      	beq.n	80063cc <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80063c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f834 	bl	8006434 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d00c      	beq.n	80063f0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f003 0320 	and.w	r3, r3, #32
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d007      	beq.n	80063f0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f06f 0220 	mvn.w	r2, #32
 80063e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f8d8 	bl	80065a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063f0:	bf00      	nop
 80063f2:	3710      	adds	r7, #16
 80063f4:	46bd      	mov	sp, r7
 80063f6:	bd80      	pop	{r7, pc}

080063f8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006400:	bf00      	nop
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006414:	bf00      	nop
 8006416:	370c      	adds	r7, #12
 8006418:	46bd      	mov	sp, r7
 800641a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641e:	4770      	bx	lr

08006420 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006420:	b480      	push	{r7}
 8006422:	b083      	sub	sp, #12
 8006424:	af00      	add	r7, sp, #0
 8006426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006428:	bf00      	nop
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr

08006448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006448:	b480      	push	{r7}
 800644a:	b085      	sub	sp, #20
 800644c:	af00      	add	r7, sp, #0
 800644e:	6078      	str	r0, [r7, #4]
 8006450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	4a46      	ldr	r2, [pc, #280]	@ (8006574 <TIM_Base_SetConfig+0x12c>)
 800645c:	4293      	cmp	r3, r2
 800645e:	d013      	beq.n	8006488 <TIM_Base_SetConfig+0x40>
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006466:	d00f      	beq.n	8006488 <TIM_Base_SetConfig+0x40>
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	4a43      	ldr	r2, [pc, #268]	@ (8006578 <TIM_Base_SetConfig+0x130>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d00b      	beq.n	8006488 <TIM_Base_SetConfig+0x40>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	4a42      	ldr	r2, [pc, #264]	@ (800657c <TIM_Base_SetConfig+0x134>)
 8006474:	4293      	cmp	r3, r2
 8006476:	d007      	beq.n	8006488 <TIM_Base_SetConfig+0x40>
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	4a41      	ldr	r2, [pc, #260]	@ (8006580 <TIM_Base_SetConfig+0x138>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d003      	beq.n	8006488 <TIM_Base_SetConfig+0x40>
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	4a40      	ldr	r2, [pc, #256]	@ (8006584 <TIM_Base_SetConfig+0x13c>)
 8006484:	4293      	cmp	r3, r2
 8006486:	d108      	bne.n	800649a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800648e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	685b      	ldr	r3, [r3, #4]
 8006494:	68fa      	ldr	r2, [r7, #12]
 8006496:	4313      	orrs	r3, r2
 8006498:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	4a35      	ldr	r2, [pc, #212]	@ (8006574 <TIM_Base_SetConfig+0x12c>)
 800649e:	4293      	cmp	r3, r2
 80064a0:	d02b      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80064a8:	d027      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	4a32      	ldr	r2, [pc, #200]	@ (8006578 <TIM_Base_SetConfig+0x130>)
 80064ae:	4293      	cmp	r3, r2
 80064b0:	d023      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	4a31      	ldr	r2, [pc, #196]	@ (800657c <TIM_Base_SetConfig+0x134>)
 80064b6:	4293      	cmp	r3, r2
 80064b8:	d01f      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	4a30      	ldr	r2, [pc, #192]	@ (8006580 <TIM_Base_SetConfig+0x138>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d01b      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	4a2f      	ldr	r2, [pc, #188]	@ (8006584 <TIM_Base_SetConfig+0x13c>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d017      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	4a2e      	ldr	r2, [pc, #184]	@ (8006588 <TIM_Base_SetConfig+0x140>)
 80064ce:	4293      	cmp	r3, r2
 80064d0:	d013      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	4a2d      	ldr	r2, [pc, #180]	@ (800658c <TIM_Base_SetConfig+0x144>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d00f      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	4a2c      	ldr	r2, [pc, #176]	@ (8006590 <TIM_Base_SetConfig+0x148>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d00b      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	4a2b      	ldr	r2, [pc, #172]	@ (8006594 <TIM_Base_SetConfig+0x14c>)
 80064e6:	4293      	cmp	r3, r2
 80064e8:	d007      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	4a2a      	ldr	r2, [pc, #168]	@ (8006598 <TIM_Base_SetConfig+0x150>)
 80064ee:	4293      	cmp	r3, r2
 80064f0:	d003      	beq.n	80064fa <TIM_Base_SetConfig+0xb2>
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4a29      	ldr	r2, [pc, #164]	@ (800659c <TIM_Base_SetConfig+0x154>)
 80064f6:	4293      	cmp	r3, r2
 80064f8:	d108      	bne.n	800650c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006500:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	68fa      	ldr	r2, [r7, #12]
 8006508:	4313      	orrs	r3, r2
 800650a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006512:	683b      	ldr	r3, [r7, #0]
 8006514:	695b      	ldr	r3, [r3, #20]
 8006516:	4313      	orrs	r3, r2
 8006518:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	68fa      	ldr	r2, [r7, #12]
 800651e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	689a      	ldr	r2, [r3, #8]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006528:	683b      	ldr	r3, [r7, #0]
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	4a10      	ldr	r2, [pc, #64]	@ (8006574 <TIM_Base_SetConfig+0x12c>)
 8006534:	4293      	cmp	r3, r2
 8006536:	d003      	beq.n	8006540 <TIM_Base_SetConfig+0xf8>
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	4a12      	ldr	r2, [pc, #72]	@ (8006584 <TIM_Base_SetConfig+0x13c>)
 800653c:	4293      	cmp	r3, r2
 800653e:	d103      	bne.n	8006548 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	691a      	ldr	r2, [r3, #16]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	f003 0301 	and.w	r3, r3, #1
 8006556:	2b01      	cmp	r3, #1
 8006558:	d105      	bne.n	8006566 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	691b      	ldr	r3, [r3, #16]
 800655e:	f023 0201 	bic.w	r2, r3, #1
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	611a      	str	r2, [r3, #16]
  }
}
 8006566:	bf00      	nop
 8006568:	3714      	adds	r7, #20
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	40010000 	.word	0x40010000
 8006578:	40000400 	.word	0x40000400
 800657c:	40000800 	.word	0x40000800
 8006580:	40000c00 	.word	0x40000c00
 8006584:	40010400 	.word	0x40010400
 8006588:	40014000 	.word	0x40014000
 800658c:	40014400 	.word	0x40014400
 8006590:	40014800 	.word	0x40014800
 8006594:	40001800 	.word	0x40001800
 8006598:	40001c00 	.word	0x40001c00
 800659c:	40002000 	.word	0x40002000

080065a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065a0:	b480      	push	{r7}
 80065a2:	b083      	sub	sp, #12
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065a8:	bf00      	nop
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065bc:	bf00      	nop
 80065be:	370c      	adds	r7, #12
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065c8:	b580      	push	{r7, lr}
 80065ca:	b082      	sub	sp, #8
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d101      	bne.n	80065da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065d6:	2301      	movs	r3, #1
 80065d8:	e0b7      	b.n	800674a <HAL_UART_Init+0x182>
  }

  /* Check the parameters */
  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d031      	beq.n	8006646 <HAL_UART_Init+0x7e>
  {
    /* The hardware flow control is available only for USART1, USART2, USART3 and USART6.
       Except for STM32F446xx devices, that is available for USART1, USART2, USART3, USART6, UART4 and UART5.
    */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a5b      	ldr	r2, [pc, #364]	@ (8006754 <HAL_UART_Init+0x18c>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	d013      	beq.n	8006614 <HAL_UART_Init+0x4c>
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	4a59      	ldr	r2, [pc, #356]	@ (8006758 <HAL_UART_Init+0x190>)
 80065f2:	4293      	cmp	r3, r2
 80065f4:	d00e      	beq.n	8006614 <HAL_UART_Init+0x4c>
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	4a58      	ldr	r2, [pc, #352]	@ (800675c <HAL_UART_Init+0x194>)
 80065fc:	4293      	cmp	r3, r2
 80065fe:	d009      	beq.n	8006614 <HAL_UART_Init+0x4c>
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4a56      	ldr	r2, [pc, #344]	@ (8006760 <HAL_UART_Init+0x198>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d004      	beq.n	8006614 <HAL_UART_Init+0x4c>
 800660a:	f240 1173 	movw	r1, #371	@ 0x173
 800660e:	4855      	ldr	r0, [pc, #340]	@ (8006764 <HAL_UART_Init+0x19c>)
 8006610:	f7fb ffd4 	bl	80025bc <assert_failed>
    assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	699b      	ldr	r3, [r3, #24]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d037      	beq.n	800668c <HAL_UART_Init+0xc4>
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006624:	d032      	beq.n	800668c <HAL_UART_Init+0xc4>
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800662e:	d02d      	beq.n	800668c <HAL_UART_Init+0xc4>
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006638:	d028      	beq.n	800668c <HAL_UART_Init+0xc4>
 800663a:	f44f 71ba 	mov.w	r1, #372	@ 0x174
 800663e:	4849      	ldr	r0, [pc, #292]	@ (8006764 <HAL_UART_Init+0x19c>)
 8006640:	f7fb ffbc 	bl	80025bc <assert_failed>
 8006644:	e022      	b.n	800668c <HAL_UART_Init+0xc4>
  }
  else
  {
    assert_param(IS_UART_INSTANCE(huart->Instance));
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	4a42      	ldr	r2, [pc, #264]	@ (8006754 <HAL_UART_Init+0x18c>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d01d      	beq.n	800668c <HAL_UART_Init+0xc4>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a40      	ldr	r2, [pc, #256]	@ (8006758 <HAL_UART_Init+0x190>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d018      	beq.n	800668c <HAL_UART_Init+0xc4>
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	4a3f      	ldr	r2, [pc, #252]	@ (800675c <HAL_UART_Init+0x194>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d013      	beq.n	800668c <HAL_UART_Init+0xc4>
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	4a3f      	ldr	r2, [pc, #252]	@ (8006768 <HAL_UART_Init+0x1a0>)
 800666a:	4293      	cmp	r3, r2
 800666c:	d00e      	beq.n	800668c <HAL_UART_Init+0xc4>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a3e      	ldr	r2, [pc, #248]	@ (800676c <HAL_UART_Init+0x1a4>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d009      	beq.n	800668c <HAL_UART_Init+0xc4>
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	4a38      	ldr	r2, [pc, #224]	@ (8006760 <HAL_UART_Init+0x198>)
 800667e:	4293      	cmp	r3, r2
 8006680:	d004      	beq.n	800668c <HAL_UART_Init+0xc4>
 8006682:	f44f 71bc 	mov.w	r1, #376	@ 0x178
 8006686:	4837      	ldr	r0, [pc, #220]	@ (8006764 <HAL_UART_Init+0x19c>)
 8006688:	f7fb ff98 	bl	80025bc <assert_failed>
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	689b      	ldr	r3, [r3, #8]
 8006690:	2b00      	cmp	r3, #0
 8006692:	d009      	beq.n	80066a8 <HAL_UART_Init+0xe0>
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	689b      	ldr	r3, [r3, #8]
 8006698:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800669c:	d004      	beq.n	80066a8 <HAL_UART_Init+0xe0>
 800669e:	f44f 71bd 	mov.w	r1, #378	@ 0x17a
 80066a2:	4830      	ldr	r0, [pc, #192]	@ (8006764 <HAL_UART_Init+0x19c>)
 80066a4:	f7fb ff8a 	bl	80025bc <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	69db      	ldr	r3, [r3, #28]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d009      	beq.n	80066c4 <HAL_UART_Init+0xfc>
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	69db      	ldr	r3, [r3, #28]
 80066b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80066b8:	d004      	beq.n	80066c4 <HAL_UART_Init+0xfc>
 80066ba:	f240 117b 	movw	r1, #379	@ 0x17b
 80066be:	4829      	ldr	r0, [pc, #164]	@ (8006764 <HAL_UART_Init+0x19c>)
 80066c0:	f7fb ff7c 	bl	80025bc <assert_failed>

  if (huart->gState == HAL_UART_STATE_RESET)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d106      	bne.n	80066de <HAL_UART_Init+0x116>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80066d8:	6878      	ldr	r0, [r7, #4]
 80066da:	f7fc f929 	bl	8002930 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2224      	movs	r2, #36	@ 0x24
 80066e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	68da      	ldr	r2, [r3, #12]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80066f4:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 fa18 	bl	8006b2c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	691a      	ldr	r2, [r3, #16]
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800670a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	695a      	ldr	r2, [r3, #20]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800671a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	68da      	ldr	r2, [r3, #12]
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800672a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2200      	movs	r2, #0
 8006730:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	2220      	movs	r2, #32
 8006736:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2220      	movs	r2, #32
 800673e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3708      	adds	r7, #8
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}
 8006752:	bf00      	nop
 8006754:	40011000 	.word	0x40011000
 8006758:	40004400 	.word	0x40004400
 800675c:	40004800 	.word	0x40004800
 8006760:	40011400 	.word	0x40011400
 8006764:	0800efe8 	.word	0x0800efe8
 8006768:	40004c00 	.word	0x40004c00
 800676c:	40005000 	.word	0x40005000

08006770 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b08a      	sub	sp, #40	@ 0x28
 8006774:	af02      	add	r7, sp, #8
 8006776:	60f8      	str	r0, [r7, #12]
 8006778:	60b9      	str	r1, [r7, #8]
 800677a:	603b      	str	r3, [r7, #0]
 800677c:	4613      	mov	r3, r2
 800677e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006780:	2300      	movs	r3, #0
 8006782:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800678a:	b2db      	uxtb	r3, r3
 800678c:	2b20      	cmp	r3, #32
 800678e:	d175      	bne.n	800687c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006790:	68bb      	ldr	r3, [r7, #8]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d002      	beq.n	800679c <HAL_UART_Transmit+0x2c>
 8006796:	88fb      	ldrh	r3, [r7, #6]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d101      	bne.n	80067a0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800679c:	2301      	movs	r3, #1
 800679e:	e06e      	b.n	800687e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	2200      	movs	r2, #0
 80067a4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2221      	movs	r2, #33	@ 0x21
 80067aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80067ae:	f7fc faa5 	bl	8002cfc <HAL_GetTick>
 80067b2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	88fa      	ldrh	r2, [r7, #6]
 80067b8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	88fa      	ldrh	r2, [r7, #6]
 80067be:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	689b      	ldr	r3, [r3, #8]
 80067c4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80067c8:	d108      	bne.n	80067dc <HAL_UART_Transmit+0x6c>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	691b      	ldr	r3, [r3, #16]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d104      	bne.n	80067dc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80067d2:	2300      	movs	r3, #0
 80067d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	61bb      	str	r3, [r7, #24]
 80067da:	e003      	b.n	80067e4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80067dc:	68bb      	ldr	r3, [r7, #8]
 80067de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80067e0:	2300      	movs	r3, #0
 80067e2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80067e4:	e02e      	b.n	8006844 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	9300      	str	r3, [sp, #0]
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	2200      	movs	r2, #0
 80067ee:	2180      	movs	r1, #128	@ 0x80
 80067f0:	68f8      	ldr	r0, [r7, #12]
 80067f2:	f000 f8df 	bl	80069b4 <UART_WaitOnFlagUntilTimeout>
 80067f6:	4603      	mov	r3, r0
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d005      	beq.n	8006808 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8006804:	2303      	movs	r3, #3
 8006806:	e03a      	b.n	800687e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8006808:	69fb      	ldr	r3, [r7, #28]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d10b      	bne.n	8006826 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800680e:	69bb      	ldr	r3, [r7, #24]
 8006810:	881b      	ldrh	r3, [r3, #0]
 8006812:	461a      	mov	r2, r3
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800681c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800681e:	69bb      	ldr	r3, [r7, #24]
 8006820:	3302      	adds	r3, #2
 8006822:	61bb      	str	r3, [r7, #24]
 8006824:	e007      	b.n	8006836 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006826:	69fb      	ldr	r3, [r7, #28]
 8006828:	781a      	ldrb	r2, [r3, #0]
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006830:	69fb      	ldr	r3, [r7, #28]
 8006832:	3301      	adds	r3, #1
 8006834:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800683a:	b29b      	uxth	r3, r3
 800683c:	3b01      	subs	r3, #1
 800683e:	b29a      	uxth	r2, r3
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006848:	b29b      	uxth	r3, r3
 800684a:	2b00      	cmp	r3, #0
 800684c:	d1cb      	bne.n	80067e6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	9300      	str	r3, [sp, #0]
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2200      	movs	r2, #0
 8006856:	2140      	movs	r1, #64	@ 0x40
 8006858:	68f8      	ldr	r0, [r7, #12]
 800685a:	f000 f8ab 	bl	80069b4 <UART_WaitOnFlagUntilTimeout>
 800685e:	4603      	mov	r3, r0
 8006860:	2b00      	cmp	r3, #0
 8006862:	d005      	beq.n	8006870 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2220      	movs	r2, #32
 8006868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e006      	b.n	800687e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	2220      	movs	r2, #32
 8006874:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	e000      	b.n	800687e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800687c:	2302      	movs	r3, #2
  }
}
 800687e:	4618      	mov	r0, r3
 8006880:	3720      	adds	r7, #32
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}

08006886 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006886:	b580      	push	{r7, lr}
 8006888:	b08a      	sub	sp, #40	@ 0x28
 800688a:	af02      	add	r7, sp, #8
 800688c:	60f8      	str	r0, [r7, #12]
 800688e:	60b9      	str	r1, [r7, #8]
 8006890:	603b      	str	r3, [r7, #0]
 8006892:	4613      	mov	r3, r2
 8006894:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006896:	2300      	movs	r3, #0
 8006898:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80068a0:	b2db      	uxtb	r3, r3
 80068a2:	2b20      	cmp	r3, #32
 80068a4:	f040 8081 	bne.w	80069aa <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d002      	beq.n	80068b4 <HAL_UART_Receive+0x2e>
 80068ae:	88fb      	ldrh	r3, [r7, #6]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d101      	bne.n	80068b8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80068b4:	2301      	movs	r3, #1
 80068b6:	e079      	b.n	80069ac <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	2200      	movs	r2, #0
 80068bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	2222      	movs	r2, #34	@ 0x22
 80068c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	2200      	movs	r2, #0
 80068ca:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80068cc:	f7fc fa16 	bl	8002cfc <HAL_GetTick>
 80068d0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	88fa      	ldrh	r2, [r7, #6]
 80068d6:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	88fa      	ldrh	r2, [r7, #6]
 80068dc:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80068e6:	d108      	bne.n	80068fa <HAL_UART_Receive+0x74>
 80068e8:	68fb      	ldr	r3, [r7, #12]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d104      	bne.n	80068fa <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 80068f0:	2300      	movs	r3, #0
 80068f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	61bb      	str	r3, [r7, #24]
 80068f8:	e003      	b.n	8006902 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 80068fa:	68bb      	ldr	r3, [r7, #8]
 80068fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068fe:	2300      	movs	r3, #0
 8006900:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8006902:	e047      	b.n	8006994 <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006904:	683b      	ldr	r3, [r7, #0]
 8006906:	9300      	str	r3, [sp, #0]
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	2200      	movs	r2, #0
 800690c:	2120      	movs	r1, #32
 800690e:	68f8      	ldr	r0, [r7, #12]
 8006910:	f000 f850 	bl	80069b4 <UART_WaitOnFlagUntilTimeout>
 8006914:	4603      	mov	r3, r0
 8006916:	2b00      	cmp	r3, #0
 8006918:	d005      	beq.n	8006926 <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	2220      	movs	r2, #32
 800691e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8006922:	2303      	movs	r3, #3
 8006924:	e042      	b.n	80069ac <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8006926:	69fb      	ldr	r3, [r7, #28]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10c      	bne.n	8006946 <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	685b      	ldr	r3, [r3, #4]
 8006932:	b29b      	uxth	r3, r3
 8006934:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006938:	b29a      	uxth	r2, r3
 800693a:	69bb      	ldr	r3, [r7, #24]
 800693c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800693e:	69bb      	ldr	r3, [r7, #24]
 8006940:	3302      	adds	r3, #2
 8006942:	61bb      	str	r3, [r7, #24]
 8006944:	e01f      	b.n	8006986 <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	689b      	ldr	r3, [r3, #8]
 800694a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800694e:	d007      	beq.n	8006960 <HAL_UART_Receive+0xda>
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10a      	bne.n	800696e <HAL_UART_Receive+0xe8>
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	691b      	ldr	r3, [r3, #16]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d106      	bne.n	800696e <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	685b      	ldr	r3, [r3, #4]
 8006966:	b2da      	uxtb	r2, r3
 8006968:	69fb      	ldr	r3, [r7, #28]
 800696a:	701a      	strb	r2, [r3, #0]
 800696c:	e008      	b.n	8006980 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	b2db      	uxtb	r3, r3
 8006976:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800697a:	b2da      	uxtb	r2, r3
 800697c:	69fb      	ldr	r3, [r7, #28]
 800697e:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8006980:	69fb      	ldr	r3, [r7, #28]
 8006982:	3301      	adds	r3, #1
 8006984:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800698a:	b29b      	uxth	r3, r3
 800698c:	3b01      	subs	r3, #1
 800698e:	b29a      	uxth	r2, r3
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006998:	b29b      	uxth	r3, r3
 800699a:	2b00      	cmp	r3, #0
 800699c:	d1b2      	bne.n	8006904 <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	2220      	movs	r2, #32
 80069a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 80069a6:	2300      	movs	r3, #0
 80069a8:	e000      	b.n	80069ac <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 80069aa:	2302      	movs	r3, #2
  }
}
 80069ac:	4618      	mov	r0, r3
 80069ae:	3720      	adds	r7, #32
 80069b0:	46bd      	mov	sp, r7
 80069b2:	bd80      	pop	{r7, pc}

080069b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80069b4:	b580      	push	{r7, lr}
 80069b6:	b086      	sub	sp, #24
 80069b8:	af00      	add	r7, sp, #0
 80069ba:	60f8      	str	r0, [r7, #12]
 80069bc:	60b9      	str	r1, [r7, #8]
 80069be:	603b      	str	r3, [r7, #0]
 80069c0:	4613      	mov	r3, r2
 80069c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069c4:	e03b      	b.n	8006a3e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80069c6:	6a3b      	ldr	r3, [r7, #32]
 80069c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069cc:	d037      	beq.n	8006a3e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80069ce:	f7fc f995 	bl	8002cfc <HAL_GetTick>
 80069d2:	4602      	mov	r2, r0
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	1ad3      	subs	r3, r2, r3
 80069d8:	6a3a      	ldr	r2, [r7, #32]
 80069da:	429a      	cmp	r2, r3
 80069dc:	d302      	bcc.n	80069e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80069de:	6a3b      	ldr	r3, [r7, #32]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d101      	bne.n	80069e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80069e4:	2303      	movs	r3, #3
 80069e6:	e03a      	b.n	8006a5e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f003 0304 	and.w	r3, r3, #4
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d023      	beq.n	8006a3e <UART_WaitOnFlagUntilTimeout+0x8a>
 80069f6:	68bb      	ldr	r3, [r7, #8]
 80069f8:	2b80      	cmp	r3, #128	@ 0x80
 80069fa:	d020      	beq.n	8006a3e <UART_WaitOnFlagUntilTimeout+0x8a>
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	2b40      	cmp	r3, #64	@ 0x40
 8006a00:	d01d      	beq.n	8006a3e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	f003 0308 	and.w	r3, r3, #8
 8006a0c:	2b08      	cmp	r3, #8
 8006a0e:	d116      	bne.n	8006a3e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8006a10:	2300      	movs	r3, #0
 8006a12:	617b      	str	r3, [r7, #20]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	617b      	str	r3, [r7, #20]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	685b      	ldr	r3, [r3, #4]
 8006a22:	617b      	str	r3, [r7, #20]
 8006a24:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 f81d 	bl	8006a66 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	2208      	movs	r2, #8
 8006a30:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	2200      	movs	r2, #0
 8006a36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8006a3a:	2301      	movs	r3, #1
 8006a3c:	e00f      	b.n	8006a5e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	681a      	ldr	r2, [r3, #0]
 8006a44:	68bb      	ldr	r3, [r7, #8]
 8006a46:	4013      	ands	r3, r2
 8006a48:	68ba      	ldr	r2, [r7, #8]
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	bf0c      	ite	eq
 8006a4e:	2301      	moveq	r3, #1
 8006a50:	2300      	movne	r3, #0
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	461a      	mov	r2, r3
 8006a56:	79fb      	ldrb	r3, [r7, #7]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d0b4      	beq.n	80069c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006a5c:	2300      	movs	r3, #0
}
 8006a5e:	4618      	mov	r0, r3
 8006a60:	3718      	adds	r7, #24
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a66:	b480      	push	{r7}
 8006a68:	b095      	sub	sp, #84	@ 0x54
 8006a6a:	af00      	add	r7, sp, #0
 8006a6c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	330c      	adds	r3, #12
 8006a74:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a78:	e853 3f00 	ldrex	r3, [r3]
 8006a7c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006a84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	330c      	adds	r3, #12
 8006a8c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006a8e:	643a      	str	r2, [r7, #64]	@ 0x40
 8006a90:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a92:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006a94:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006a96:	e841 2300 	strex	r3, r2, [r1]
 8006a9a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d1e5      	bne.n	8006a6e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	3314      	adds	r3, #20
 8006aa8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aaa:	6a3b      	ldr	r3, [r7, #32]
 8006aac:	e853 3f00 	ldrex	r3, [r3]
 8006ab0:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ab2:	69fb      	ldr	r3, [r7, #28]
 8006ab4:	f023 0301 	bic.w	r3, r3, #1
 8006ab8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	3314      	adds	r3, #20
 8006ac0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ac2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006ac4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006ac8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006aca:	e841 2300 	strex	r3, r2, [r1]
 8006ace:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006ad0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d1e5      	bne.n	8006aa2 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ada:	2b01      	cmp	r3, #1
 8006adc:	d119      	bne.n	8006b12 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	330c      	adds	r3, #12
 8006ae4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	e853 3f00 	ldrex	r3, [r3]
 8006aec:	60bb      	str	r3, [r7, #8]
   return(result);
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	f023 0310 	bic.w	r3, r3, #16
 8006af4:	647b      	str	r3, [r7, #68]	@ 0x44
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	330c      	adds	r3, #12
 8006afc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006afe:	61ba      	str	r2, [r7, #24]
 8006b00:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b02:	6979      	ldr	r1, [r7, #20]
 8006b04:	69ba      	ldr	r2, [r7, #24]
 8006b06:	e841 2300 	strex	r3, r2, [r1]
 8006b0a:	613b      	str	r3, [r7, #16]
   return(result);
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d1e5      	bne.n	8006ade <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	2220      	movs	r2, #32
 8006b16:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006b20:	bf00      	nop
 8006b22:	3754      	adds	r7, #84	@ 0x54
 8006b24:	46bd      	mov	sp, r7
 8006b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2a:	4770      	bx	lr

08006b2c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b30:	b0c0      	sub	sp, #256	@ 0x100
 8006b32:	af00      	add	r7, sp, #0
 8006b34:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  uint32_t tmpreg;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8006b38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b3c:	685a      	ldr	r2, [r3, #4]
 8006b3e:	4bcf      	ldr	r3, [pc, #828]	@ (8006e7c <UART_SetConfig+0x350>)
 8006b40:	429a      	cmp	r2, r3
 8006b42:	d904      	bls.n	8006b4e <UART_SetConfig+0x22>
 8006b44:	f640 6175 	movw	r1, #3701	@ 0xe75
 8006b48:	48cd      	ldr	r0, [pc, #820]	@ (8006e80 <UART_SetConfig+0x354>)
 8006b4a:	f7fb fd37 	bl	80025bc <assert_failed>
  assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006b4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b52:	68db      	ldr	r3, [r3, #12]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d00a      	beq.n	8006b6e <UART_SetConfig+0x42>
 8006b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b5c:	68db      	ldr	r3, [r3, #12]
 8006b5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006b62:	d004      	beq.n	8006b6e <UART_SetConfig+0x42>
 8006b64:	f640 6176 	movw	r1, #3702	@ 0xe76
 8006b68:	48c5      	ldr	r0, [pc, #788]	@ (8006e80 <UART_SetConfig+0x354>)
 8006b6a:	f7fb fd27 	bl	80025bc <assert_failed>
  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006b6e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d010      	beq.n	8006b9a <UART_SetConfig+0x6e>
 8006b78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b7c:	691b      	ldr	r3, [r3, #16]
 8006b7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006b82:	d00a      	beq.n	8006b9a <UART_SetConfig+0x6e>
 8006b84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b88:	691b      	ldr	r3, [r3, #16]
 8006b8a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8006b8e:	d004      	beq.n	8006b9a <UART_SetConfig+0x6e>
 8006b90:	f640 6177 	movw	r1, #3703	@ 0xe77
 8006b94:	48ba      	ldr	r0, [pc, #744]	@ (8006e80 <UART_SetConfig+0x354>)
 8006b96:	f7fb fd11 	bl	80025bc <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8006b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b9e:	695a      	ldr	r2, [r3, #20]
 8006ba0:	f64f 73f3 	movw	r3, #65523	@ 0xfff3
 8006ba4:	4013      	ands	r3, r2
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d104      	bne.n	8006bb4 <UART_SetConfig+0x88>
 8006baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bae:	695b      	ldr	r3, [r3, #20]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d104      	bne.n	8006bbe <UART_SetConfig+0x92>
 8006bb4:	f640 6178 	movw	r1, #3704	@ 0xe78
 8006bb8:	48b1      	ldr	r0, [pc, #708]	@ (8006e80 <UART_SetConfig+0x354>)
 8006bba:	f7fb fcff 	bl	80025bc <assert_failed>

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	691b      	ldr	r3, [r3, #16]
 8006bc6:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bce:	68d9      	ldr	r1, [r3, #12]
 8006bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	ea40 0301 	orr.w	r3, r0, r1
 8006bda:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006bdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be0:	689a      	ldr	r2, [r3, #8]
 8006be2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be6:	691b      	ldr	r3, [r3, #16]
 8006be8:	431a      	orrs	r2, r3
 8006bea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bee:	695b      	ldr	r3, [r3, #20]
 8006bf0:	431a      	orrs	r2, r3
 8006bf2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006bf6:	69db      	ldr	r3, [r3, #28]
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006bfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68db      	ldr	r3, [r3, #12]
 8006c06:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006c0a:	f021 010c 	bic.w	r1, r1, #12
 8006c0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006c18:	430b      	orrs	r3, r1
 8006c1a:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006c1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	695b      	ldr	r3, [r3, #20]
 8006c24:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006c28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c2c:	6999      	ldr	r1, [r3, #24]
 8006c2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c32:	681a      	ldr	r2, [r3, #0]
 8006c34:	ea40 0301 	orr.w	r3, r0, r1
 8006c38:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006c3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	4b90      	ldr	r3, [pc, #576]	@ (8006e84 <UART_SetConfig+0x358>)
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d005      	beq.n	8006c52 <UART_SetConfig+0x126>
 8006c46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c4a:	681a      	ldr	r2, [r3, #0]
 8006c4c:	4b8e      	ldr	r3, [pc, #568]	@ (8006e88 <UART_SetConfig+0x35c>)
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d104      	bne.n	8006c5c <UART_SetConfig+0x130>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006c52:	f7ff f8b3 	bl	8005dbc <HAL_RCC_GetPCLK2Freq>
 8006c56:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8006c5a:	e003      	b.n	8006c64 <UART_SetConfig+0x138>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c5c:	f7ff f89a 	bl	8005d94 <HAL_RCC_GetPCLK1Freq>
 8006c60:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006c6e:	f040 810f 	bne.w	8006e90 <UART_SetConfig+0x364>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006c72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c76:	2200      	movs	r2, #0
 8006c78:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c7c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c80:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006c84:	4622      	mov	r2, r4
 8006c86:	462b      	mov	r3, r5
 8006c88:	1891      	adds	r1, r2, r2
 8006c8a:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c8c:	415b      	adcs	r3, r3
 8006c8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c90:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006c94:	4621      	mov	r1, r4
 8006c96:	eb12 0801 	adds.w	r8, r2, r1
 8006c9a:	4629      	mov	r1, r5
 8006c9c:	eb43 0901 	adc.w	r9, r3, r1
 8006ca0:	f04f 0200 	mov.w	r2, #0
 8006ca4:	f04f 0300 	mov.w	r3, #0
 8006ca8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006cac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006cb0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006cb4:	4690      	mov	r8, r2
 8006cb6:	4699      	mov	r9, r3
 8006cb8:	4623      	mov	r3, r4
 8006cba:	eb18 0303 	adds.w	r3, r8, r3
 8006cbe:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006cc2:	462b      	mov	r3, r5
 8006cc4:	eb49 0303 	adc.w	r3, r9, r3
 8006cc8:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006cd0:	685b      	ldr	r3, [r3, #4]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006cd8:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006cdc:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ce0:	460b      	mov	r3, r1
 8006ce2:	18db      	adds	r3, r3, r3
 8006ce4:	653b      	str	r3, [r7, #80]	@ 0x50
 8006ce6:	4613      	mov	r3, r2
 8006ce8:	eb42 0303 	adc.w	r3, r2, r3
 8006cec:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cee:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006cf2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006cf6:	f7fa f84f 	bl	8000d98 <__aeabi_uldivmod>
 8006cfa:	4602      	mov	r2, r0
 8006cfc:	460b      	mov	r3, r1
 8006cfe:	4b63      	ldr	r3, [pc, #396]	@ (8006e8c <UART_SetConfig+0x360>)
 8006d00:	fba3 2302 	umull	r2, r3, r3, r2
 8006d04:	095b      	lsrs	r3, r3, #5
 8006d06:	011c      	lsls	r4, r3, #4
 8006d08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006d0c:	2200      	movs	r2, #0
 8006d0e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006d12:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006d16:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d1a:	4642      	mov	r2, r8
 8006d1c:	464b      	mov	r3, r9
 8006d1e:	1891      	adds	r1, r2, r2
 8006d20:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d22:	415b      	adcs	r3, r3
 8006d24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d26:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d2a:	4641      	mov	r1, r8
 8006d2c:	eb12 0a01 	adds.w	sl, r2, r1
 8006d30:	4649      	mov	r1, r9
 8006d32:	eb43 0b01 	adc.w	fp, r3, r1
 8006d36:	f04f 0200 	mov.w	r2, #0
 8006d3a:	f04f 0300 	mov.w	r3, #0
 8006d3e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006d42:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006d46:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006d4a:	4692      	mov	sl, r2
 8006d4c:	469b      	mov	fp, r3
 8006d4e:	4643      	mov	r3, r8
 8006d50:	eb1a 0303 	adds.w	r3, sl, r3
 8006d54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d58:	464b      	mov	r3, r9
 8006d5a:	eb4b 0303 	adc.w	r3, fp, r3
 8006d5e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d62:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	2200      	movs	r2, #0
 8006d6a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d6e:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d72:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d76:	460b      	mov	r3, r1
 8006d78:	18db      	adds	r3, r3, r3
 8006d7a:	643b      	str	r3, [r7, #64]	@ 0x40
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	eb42 0303 	adc.w	r3, r2, r3
 8006d82:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d84:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006d88:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d8c:	f7fa f804 	bl	8000d98 <__aeabi_uldivmod>
 8006d90:	4602      	mov	r2, r0
 8006d92:	460b      	mov	r3, r1
 8006d94:	4611      	mov	r1, r2
 8006d96:	4b3d      	ldr	r3, [pc, #244]	@ (8006e8c <UART_SetConfig+0x360>)
 8006d98:	fba3 2301 	umull	r2, r3, r3, r1
 8006d9c:	095b      	lsrs	r3, r3, #5
 8006d9e:	2264      	movs	r2, #100	@ 0x64
 8006da0:	fb02 f303 	mul.w	r3, r2, r3
 8006da4:	1acb      	subs	r3, r1, r3
 8006da6:	00db      	lsls	r3, r3, #3
 8006da8:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006dac:	4b37      	ldr	r3, [pc, #220]	@ (8006e8c <UART_SetConfig+0x360>)
 8006dae:	fba3 2302 	umull	r2, r3, r3, r2
 8006db2:	095b      	lsrs	r3, r3, #5
 8006db4:	005b      	lsls	r3, r3, #1
 8006db6:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006dba:	441c      	add	r4, r3
 8006dbc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006dc6:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006dca:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006dce:	4642      	mov	r2, r8
 8006dd0:	464b      	mov	r3, r9
 8006dd2:	1891      	adds	r1, r2, r2
 8006dd4:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006dd6:	415b      	adcs	r3, r3
 8006dd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006dda:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006dde:	4641      	mov	r1, r8
 8006de0:	1851      	adds	r1, r2, r1
 8006de2:	6339      	str	r1, [r7, #48]	@ 0x30
 8006de4:	4649      	mov	r1, r9
 8006de6:	414b      	adcs	r3, r1
 8006de8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006dea:	f04f 0200 	mov.w	r2, #0
 8006dee:	f04f 0300 	mov.w	r3, #0
 8006df2:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006df6:	4659      	mov	r1, fp
 8006df8:	00cb      	lsls	r3, r1, #3
 8006dfa:	4651      	mov	r1, sl
 8006dfc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006e00:	4651      	mov	r1, sl
 8006e02:	00ca      	lsls	r2, r1, #3
 8006e04:	4610      	mov	r0, r2
 8006e06:	4619      	mov	r1, r3
 8006e08:	4603      	mov	r3, r0
 8006e0a:	4642      	mov	r2, r8
 8006e0c:	189b      	adds	r3, r3, r2
 8006e0e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e12:	464b      	mov	r3, r9
 8006e14:	460a      	mov	r2, r1
 8006e16:	eb42 0303 	adc.w	r3, r2, r3
 8006e1a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	2200      	movs	r2, #0
 8006e26:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e2a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e2e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e32:	460b      	mov	r3, r1
 8006e34:	18db      	adds	r3, r3, r3
 8006e36:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e38:	4613      	mov	r3, r2
 8006e3a:	eb42 0303 	adc.w	r3, r2, r3
 8006e3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e40:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e44:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e48:	f7f9 ffa6 	bl	8000d98 <__aeabi_uldivmod>
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4b0e      	ldr	r3, [pc, #56]	@ (8006e8c <UART_SetConfig+0x360>)
 8006e52:	fba3 1302 	umull	r1, r3, r3, r2
 8006e56:	095b      	lsrs	r3, r3, #5
 8006e58:	2164      	movs	r1, #100	@ 0x64
 8006e5a:	fb01 f303 	mul.w	r3, r1, r3
 8006e5e:	1ad3      	subs	r3, r2, r3
 8006e60:	00db      	lsls	r3, r3, #3
 8006e62:	3332      	adds	r3, #50	@ 0x32
 8006e64:	4a09      	ldr	r2, [pc, #36]	@ (8006e8c <UART_SetConfig+0x360>)
 8006e66:	fba2 2303 	umull	r2, r3, r2, r3
 8006e6a:	095b      	lsrs	r3, r3, #5
 8006e6c:	f003 0207 	and.w	r2, r3, #7
 8006e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	4422      	add	r2, r4
 8006e78:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e7a:	e109      	b.n	8007090 <UART_SetConfig+0x564>
 8006e7c:	00a037a0 	.word	0x00a037a0
 8006e80:	0800efe8 	.word	0x0800efe8
 8006e84:	40011000 	.word	0x40011000
 8006e88:	40011400 	.word	0x40011400
 8006e8c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006e94:	2200      	movs	r2, #0
 8006e96:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e9a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006e9e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006ea2:	4642      	mov	r2, r8
 8006ea4:	464b      	mov	r3, r9
 8006ea6:	1891      	adds	r1, r2, r2
 8006ea8:	6239      	str	r1, [r7, #32]
 8006eaa:	415b      	adcs	r3, r3
 8006eac:	627b      	str	r3, [r7, #36]	@ 0x24
 8006eae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006eb2:	4641      	mov	r1, r8
 8006eb4:	1854      	adds	r4, r2, r1
 8006eb6:	4649      	mov	r1, r9
 8006eb8:	eb43 0501 	adc.w	r5, r3, r1
 8006ebc:	f04f 0200 	mov.w	r2, #0
 8006ec0:	f04f 0300 	mov.w	r3, #0
 8006ec4:	00eb      	lsls	r3, r5, #3
 8006ec6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006eca:	00e2      	lsls	r2, r4, #3
 8006ecc:	4614      	mov	r4, r2
 8006ece:	461d      	mov	r5, r3
 8006ed0:	4643      	mov	r3, r8
 8006ed2:	18e3      	adds	r3, r4, r3
 8006ed4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ed8:	464b      	mov	r3, r9
 8006eda:	eb45 0303 	adc.w	r3, r5, r3
 8006ede:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006ee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006ee6:	685b      	ldr	r3, [r3, #4]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006eee:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ef2:	f04f 0200 	mov.w	r2, #0
 8006ef6:	f04f 0300 	mov.w	r3, #0
 8006efa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006efe:	4629      	mov	r1, r5
 8006f00:	008b      	lsls	r3, r1, #2
 8006f02:	4621      	mov	r1, r4
 8006f04:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006f08:	4621      	mov	r1, r4
 8006f0a:	008a      	lsls	r2, r1, #2
 8006f0c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006f10:	f7f9 ff42 	bl	8000d98 <__aeabi_uldivmod>
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	4b60      	ldr	r3, [pc, #384]	@ (800709c <UART_SetConfig+0x570>)
 8006f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f1e:	095b      	lsrs	r3, r3, #5
 8006f20:	011c      	lsls	r4, r3, #4
 8006f22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006f26:	2200      	movs	r2, #0
 8006f28:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f2c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f30:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f34:	4642      	mov	r2, r8
 8006f36:	464b      	mov	r3, r9
 8006f38:	1891      	adds	r1, r2, r2
 8006f3a:	61b9      	str	r1, [r7, #24]
 8006f3c:	415b      	adcs	r3, r3
 8006f3e:	61fb      	str	r3, [r7, #28]
 8006f40:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f44:	4641      	mov	r1, r8
 8006f46:	1851      	adds	r1, r2, r1
 8006f48:	6139      	str	r1, [r7, #16]
 8006f4a:	4649      	mov	r1, r9
 8006f4c:	414b      	adcs	r3, r1
 8006f4e:	617b      	str	r3, [r7, #20]
 8006f50:	f04f 0200 	mov.w	r2, #0
 8006f54:	f04f 0300 	mov.w	r3, #0
 8006f58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f5c:	4659      	mov	r1, fp
 8006f5e:	00cb      	lsls	r3, r1, #3
 8006f60:	4651      	mov	r1, sl
 8006f62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f66:	4651      	mov	r1, sl
 8006f68:	00ca      	lsls	r2, r1, #3
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	4603      	mov	r3, r0
 8006f70:	4642      	mov	r2, r8
 8006f72:	189b      	adds	r3, r3, r2
 8006f74:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f78:	464b      	mov	r3, r9
 8006f7a:	460a      	mov	r2, r1
 8006f7c:	eb42 0303 	adc.w	r3, r2, r3
 8006f80:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006f88:	685b      	ldr	r3, [r3, #4]
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f8e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f90:	f04f 0200 	mov.w	r2, #0
 8006f94:	f04f 0300 	mov.w	r3, #0
 8006f98:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006f9c:	4649      	mov	r1, r9
 8006f9e:	008b      	lsls	r3, r1, #2
 8006fa0:	4641      	mov	r1, r8
 8006fa2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006fa6:	4641      	mov	r1, r8
 8006fa8:	008a      	lsls	r2, r1, #2
 8006faa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006fae:	f7f9 fef3 	bl	8000d98 <__aeabi_uldivmod>
 8006fb2:	4602      	mov	r2, r0
 8006fb4:	460b      	mov	r3, r1
 8006fb6:	4611      	mov	r1, r2
 8006fb8:	4b38      	ldr	r3, [pc, #224]	@ (800709c <UART_SetConfig+0x570>)
 8006fba:	fba3 2301 	umull	r2, r3, r3, r1
 8006fbe:	095b      	lsrs	r3, r3, #5
 8006fc0:	2264      	movs	r2, #100	@ 0x64
 8006fc2:	fb02 f303 	mul.w	r3, r2, r3
 8006fc6:	1acb      	subs	r3, r1, r3
 8006fc8:	011b      	lsls	r3, r3, #4
 8006fca:	3332      	adds	r3, #50	@ 0x32
 8006fcc:	4a33      	ldr	r2, [pc, #204]	@ (800709c <UART_SetConfig+0x570>)
 8006fce:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd2:	095b      	lsrs	r3, r3, #5
 8006fd4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006fd8:	441c      	add	r4, r3
 8006fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006fde:	2200      	movs	r2, #0
 8006fe0:	673b      	str	r3, [r7, #112]	@ 0x70
 8006fe2:	677a      	str	r2, [r7, #116]	@ 0x74
 8006fe4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006fe8:	4642      	mov	r2, r8
 8006fea:	464b      	mov	r3, r9
 8006fec:	1891      	adds	r1, r2, r2
 8006fee:	60b9      	str	r1, [r7, #8]
 8006ff0:	415b      	adcs	r3, r3
 8006ff2:	60fb      	str	r3, [r7, #12]
 8006ff4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ff8:	4641      	mov	r1, r8
 8006ffa:	1851      	adds	r1, r2, r1
 8006ffc:	6039      	str	r1, [r7, #0]
 8006ffe:	4649      	mov	r1, r9
 8007000:	414b      	adcs	r3, r1
 8007002:	607b      	str	r3, [r7, #4]
 8007004:	f04f 0200 	mov.w	r2, #0
 8007008:	f04f 0300 	mov.w	r3, #0
 800700c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007010:	4659      	mov	r1, fp
 8007012:	00cb      	lsls	r3, r1, #3
 8007014:	4651      	mov	r1, sl
 8007016:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800701a:	4651      	mov	r1, sl
 800701c:	00ca      	lsls	r2, r1, #3
 800701e:	4610      	mov	r0, r2
 8007020:	4619      	mov	r1, r3
 8007022:	4603      	mov	r3, r0
 8007024:	4642      	mov	r2, r8
 8007026:	189b      	adds	r3, r3, r2
 8007028:	66bb      	str	r3, [r7, #104]	@ 0x68
 800702a:	464b      	mov	r3, r9
 800702c:	460a      	mov	r2, r1
 800702e:	eb42 0303 	adc.w	r3, r2, r3
 8007032:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8007034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007038:	685b      	ldr	r3, [r3, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	663b      	str	r3, [r7, #96]	@ 0x60
 800703e:	667a      	str	r2, [r7, #100]	@ 0x64
 8007040:	f04f 0200 	mov.w	r2, #0
 8007044:	f04f 0300 	mov.w	r3, #0
 8007048:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800704c:	4649      	mov	r1, r9
 800704e:	008b      	lsls	r3, r1, #2
 8007050:	4641      	mov	r1, r8
 8007052:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007056:	4641      	mov	r1, r8
 8007058:	008a      	lsls	r2, r1, #2
 800705a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800705e:	f7f9 fe9b 	bl	8000d98 <__aeabi_uldivmod>
 8007062:	4602      	mov	r2, r0
 8007064:	460b      	mov	r3, r1
 8007066:	4b0d      	ldr	r3, [pc, #52]	@ (800709c <UART_SetConfig+0x570>)
 8007068:	fba3 1302 	umull	r1, r3, r3, r2
 800706c:	095b      	lsrs	r3, r3, #5
 800706e:	2164      	movs	r1, #100	@ 0x64
 8007070:	fb01 f303 	mul.w	r3, r1, r3
 8007074:	1ad3      	subs	r3, r2, r3
 8007076:	011b      	lsls	r3, r3, #4
 8007078:	3332      	adds	r3, #50	@ 0x32
 800707a:	4a08      	ldr	r2, [pc, #32]	@ (800709c <UART_SetConfig+0x570>)
 800707c:	fba2 2303 	umull	r2, r3, r2, r3
 8007080:	095b      	lsrs	r3, r3, #5
 8007082:	f003 020f 	and.w	r2, r3, #15
 8007086:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4422      	add	r2, r4
 800708e:	609a      	str	r2, [r3, #8]
}
 8007090:	bf00      	nop
 8007092:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8007096:	46bd      	mov	sp, r7
 8007098:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800709c:	51eb851f 	.word	0x51eb851f

080070a0 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80070a0:	b480      	push	{r7}
 80070a2:	b083      	sub	sp, #12
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f103 0208 	add.w	r2, r3, #8
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f04f 32ff 	mov.w	r2, #4294967295
 80070b8:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f103 0208 	add.w	r2, r3, #8
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f103 0208 	add.w	r2, r3, #8
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80070d4:	bf00      	nop
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80070e0:	b480      	push	{r7}
 80070e2:	b083      	sub	sp, #12
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2200      	movs	r2, #0
 80070ec:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80070ee:	bf00      	nop
 80070f0:	370c      	adds	r7, #12
 80070f2:	46bd      	mov	sp, r7
 80070f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f8:	4770      	bx	lr

080070fa <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 80070fa:	b480      	push	{r7}
 80070fc:	b085      	sub	sp, #20
 80070fe:	af00      	add	r7, sp, #0
 8007100:	6078      	str	r0, [r7, #4]
 8007102:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007110:	d103      	bne.n	800711a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	691b      	ldr	r3, [r3, #16]
 8007116:	60fb      	str	r3, [r7, #12]
 8007118:	e00c      	b.n	8007134 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	3308      	adds	r3, #8
 800711e:	60fb      	str	r3, [r7, #12]
 8007120:	e002      	b.n	8007128 <vListInsert+0x2e>
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	685b      	ldr	r3, [r3, #4]
 8007126:	60fb      	str	r3, [r7, #12]
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	685b      	ldr	r3, [r3, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	68ba      	ldr	r2, [r7, #8]
 8007130:	429a      	cmp	r2, r3
 8007132:	d2f6      	bcs.n	8007122 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685b      	ldr	r3, [r3, #4]
 8007140:	683a      	ldr	r2, [r7, #0]
 8007142:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8007144:	683b      	ldr	r3, [r7, #0]
 8007146:	68fa      	ldr	r2, [r7, #12]
 8007148:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	683a      	ldr	r2, [r7, #0]
 800714e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	687a      	ldr	r2, [r7, #4]
 8007154:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems )++;
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	1c5a      	adds	r2, r3, #1
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	601a      	str	r2, [r3, #0]
}
 8007160:	bf00      	nop
 8007162:	3714      	adds	r7, #20
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800716c:	b480      	push	{r7}
 800716e:	b085      	sub	sp, #20
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	691b      	ldr	r3, [r3, #16]
 8007178:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	685b      	ldr	r3, [r3, #4]
 800717e:	687a      	ldr	r2, [r7, #4]
 8007180:	6892      	ldr	r2, [r2, #8]
 8007182:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	6852      	ldr	r2, [r2, #4]
 800718c:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 800718e:	68fb      	ldr	r3, [r7, #12]
 8007190:	685b      	ldr	r3, [r3, #4]
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	429a      	cmp	r2, r3
 8007196:	d103      	bne.n	80071a0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	689a      	ldr	r2, [r3, #8]
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	1e5a      	subs	r2, r3, #1
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3714      	adds	r7, #20
 80071b8:	46bd      	mov	sp, r7
 80071ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071be:	4770      	bx	lr

080071c0 <xQueueGenericReset>:
    }
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b086      	sub	sp, #24
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 80071ca:	2301      	movs	r3, #1
 80071cc:	617b      	str	r3, [r7, #20]
    Queue_t * const pxQueue = xQueue;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	613b      	str	r3, [r7, #16]

    configASSERT( pxQueue );
 80071d2:	693b      	ldr	r3, [r7, #16]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d10b      	bne.n	80071f0 <xQueueGenericReset+0x30>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80071d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071dc:	f383 8811 	msr	BASEPRI, r3
 80071e0:	f3bf 8f6f 	isb	sy
 80071e4:	f3bf 8f4f 	dsb	sy
 80071e8:	60fb      	str	r3, [r7, #12]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80071ea:	bf00      	nop
 80071ec:	bf00      	nop
 80071ee:	e7fd      	b.n	80071ec <xQueueGenericReset+0x2c>

    if( ( pxQueue != NULL ) &&
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	d05d      	beq.n	80072b2 <xQueueGenericReset+0xf2>
        ( pxQueue->uxLength >= 1U ) &&
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d059      	beq.n	80072b2 <xQueueGenericReset+0xf2>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80071fe:	693b      	ldr	r3, [r7, #16]
 8007200:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007206:	2100      	movs	r1, #0
 8007208:	fba3 2302 	umull	r2, r3, r3, r2
 800720c:	2b00      	cmp	r3, #0
 800720e:	d000      	beq.n	8007212 <xQueueGenericReset+0x52>
 8007210:	2101      	movs	r1, #1
 8007212:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8007214:	2b00      	cmp	r3, #0
 8007216:	d14c      	bne.n	80072b2 <xQueueGenericReset+0xf2>
    {
        taskENTER_CRITICAL();
 8007218:	f001 feb0 	bl	8008f7c <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	693b      	ldr	r3, [r7, #16]
 8007222:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007224:	6939      	ldr	r1, [r7, #16]
 8007226:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8007228:	fb01 f303 	mul.w	r3, r1, r3
 800722c:	441a      	add	r2, r3
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8007232:	693b      	ldr	r3, [r7, #16]
 8007234:	2200      	movs	r2, #0
 8007236:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	681a      	ldr	r2, [r3, #0]
 800723c:	693b      	ldr	r3, [r7, #16]
 800723e:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007248:	3b01      	subs	r3, #1
 800724a:	6939      	ldr	r1, [r7, #16]
 800724c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800724e:	fb01 f303 	mul.w	r3, r1, r3
 8007252:	441a      	add	r2, r3
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8007258:	693b      	ldr	r3, [r7, #16]
 800725a:	22ff      	movs	r2, #255	@ 0xff
 800725c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	22ff      	movs	r2, #255	@ 0xff
 8007264:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d114      	bne.n	8007298 <xQueueGenericReset+0xd8>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	691b      	ldr	r3, [r3, #16]
 8007272:	2b00      	cmp	r3, #0
 8007274:	d01a      	beq.n	80072ac <xQueueGenericReset+0xec>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	3310      	adds	r3, #16
 800727a:	4618      	mov	r0, r3
 800727c:	f001 f892 	bl	80083a4 <xTaskRemoveFromEventList>
 8007280:	4603      	mov	r3, r0
 8007282:	2b00      	cmp	r3, #0
 8007284:	d012      	beq.n	80072ac <xQueueGenericReset+0xec>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007286:	4b16      	ldr	r3, [pc, #88]	@ (80072e0 <xQueueGenericReset+0x120>)
 8007288:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800728c:	601a      	str	r2, [r3, #0]
 800728e:	f3bf 8f4f 	dsb	sy
 8007292:	f3bf 8f6f 	isb	sy
 8007296:	e009      	b.n	80072ac <xQueueGenericReset+0xec>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8007298:	693b      	ldr	r3, [r7, #16]
 800729a:	3310      	adds	r3, #16
 800729c:	4618      	mov	r0, r3
 800729e:	f7ff feff 	bl	80070a0 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80072a2:	693b      	ldr	r3, [r7, #16]
 80072a4:	3324      	adds	r3, #36	@ 0x24
 80072a6:	4618      	mov	r0, r3
 80072a8:	f7ff fefa 	bl	80070a0 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80072ac:	f001 fe98 	bl	8008fe0 <vPortExitCritical>
 80072b0:	e001      	b.n	80072b6 <xQueueGenericReset+0xf6>
    }
    else
    {
        xReturn = pdFAIL;
 80072b2:	2300      	movs	r3, #0
 80072b4:	617b      	str	r3, [r7, #20]
    }

    configASSERT( xReturn != pdFAIL );
 80072b6:	697b      	ldr	r3, [r7, #20]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10b      	bne.n	80072d4 <xQueueGenericReset+0x114>
        __asm volatile
 80072bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	60bb      	str	r3, [r7, #8]
    }
 80072ce:	bf00      	nop
 80072d0:	bf00      	nop
 80072d2:	e7fd      	b.n	80072d0 <xQueueGenericReset+0x110>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    return xReturn;
 80072d4:	697b      	ldr	r3, [r7, #20]
}
 80072d6:	4618      	mov	r0, r3
 80072d8:	3718      	adds	r7, #24
 80072da:	46bd      	mov	sp, r7
 80072dc:	bd80      	pop	{r7, pc}
 80072de:	bf00      	nop
 80072e0:	e000ed04 	.word	0xe000ed04

080072e4 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b08a      	sub	sp, #40	@ 0x28
 80072e8:	af02      	add	r7, sp, #8
 80072ea:	60f8      	str	r0, [r7, #12]
 80072ec:	60b9      	str	r1, [r7, #8]
 80072ee:	4613      	mov	r3, r2
 80072f0:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 80072f2:	2300      	movs	r3, #0
 80072f4:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d02e      	beq.n	800735a <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 80072fc:	2100      	movs	r1, #0
 80072fe:	68ba      	ldr	r2, [r7, #8]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	fba3 2302 	umull	r2, r3, r3, r2
 8007306:	2b00      	cmp	r3, #0
 8007308:	d000      	beq.n	800730c <xQueueGenericCreate+0x28>
 800730a:	2101      	movs	r1, #1
 800730c:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800730e:	2b00      	cmp	r3, #0
 8007310:	d123      	bne.n	800735a <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	68ba      	ldr	r2, [r7, #8]
 8007316:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 800731a:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 800731e:	d81c      	bhi.n	800735a <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	68ba      	ldr	r2, [r7, #8]
 8007324:	fb02 f303 	mul.w	r3, r2, r3
 8007328:	61bb      	str	r3, [r7, #24]
             * alignment requirements of the Queue_t structure - which in this case
             * is an int8_t *.  Therefore, whenever the stack alignment requirements
             * are greater than or equal to the pointer to char requirements the cast
             * is safe.  In other cases alignment requirements are not strict (one or
             * two bytes). */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800732a:	69bb      	ldr	r3, [r7, #24]
 800732c:	3350      	adds	r3, #80	@ 0x50
 800732e:	4618      	mov	r0, r3
 8007330:	f001 ff4e 	bl	80091d0 <pvPortMalloc>
 8007334:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8007336:	69fb      	ldr	r3, [r7, #28]
 8007338:	2b00      	cmp	r3, #0
 800733a:	d01d      	beq.n	8007378 <xQueueGenericCreate+0x94>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800733c:	69fb      	ldr	r3, [r7, #28]
 800733e:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	3350      	adds	r3, #80	@ 0x50
 8007344:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8007346:	79fa      	ldrb	r2, [r7, #7]
 8007348:	69fb      	ldr	r3, [r7, #28]
 800734a:	9300      	str	r3, [sp, #0]
 800734c:	4613      	mov	r3, r2
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	68b9      	ldr	r1, [r7, #8]
 8007352:	68f8      	ldr	r0, [r7, #12]
 8007354:	f000 f815 	bl	8007382 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8007358:	e00e      	b.n	8007378 <xQueueGenericCreate+0x94>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 800735a:	69fb      	ldr	r3, [r7, #28]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d10b      	bne.n	8007378 <xQueueGenericCreate+0x94>
        __asm volatile
 8007360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007364:	f383 8811 	msr	BASEPRI, r3
 8007368:	f3bf 8f6f 	isb	sy
 800736c:	f3bf 8f4f 	dsb	sy
 8007370:	613b      	str	r3, [r7, #16]
    }
 8007372:	bf00      	nop
 8007374:	bf00      	nop
 8007376:	e7fd      	b.n	8007374 <xQueueGenericCreate+0x90>
            mtCOVERAGE_TEST_MARKER();
        }

        return pxNewQueue;
 8007378:	69fb      	ldr	r3, [r7, #28]
    }
 800737a:	4618      	mov	r0, r3
 800737c:	3720      	adds	r7, #32
 800737e:	46bd      	mov	sp, r7
 8007380:	bd80      	pop	{r7, pc}

08007382 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8007382:	b580      	push	{r7, lr}
 8007384:	b084      	sub	sp, #16
 8007386:	af00      	add	r7, sp, #0
 8007388:	60f8      	str	r0, [r7, #12]
 800738a:	60b9      	str	r1, [r7, #8]
 800738c:	607a      	str	r2, [r7, #4]
 800738e:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d103      	bne.n	800739e <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	69ba      	ldr	r2, [r7, #24]
 800739a:	601a      	str	r2, [r3, #0]
 800739c:	e002      	b.n	80073a4 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800739e:	69bb      	ldr	r3, [r7, #24]
 80073a0:	687a      	ldr	r2, [r7, #4]
 80073a2:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	68fa      	ldr	r2, [r7, #12]
 80073a8:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80073aa:	69bb      	ldr	r3, [r7, #24]
 80073ac:	68ba      	ldr	r2, [r7, #8]
 80073ae:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80073b0:	2101      	movs	r1, #1
 80073b2:	69b8      	ldr	r0, [r7, #24]
 80073b4:	f7ff ff04 	bl	80071c0 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80073b8:	69bb      	ldr	r3, [r7, #24]
 80073ba:	78fa      	ldrb	r2, [r7, #3]
 80073bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80073c0:	bf00      	nop
 80073c2:	3710      	adds	r7, #16
 80073c4:	46bd      	mov	sp, r7
 80073c6:	bd80      	pop	{r7, pc}

080073c8 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 80073c8:	b580      	push	{r7, lr}
 80073ca:	b082      	sub	sp, #8
 80073cc:	af00      	add	r7, sp, #0
 80073ce:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00e      	beq.n	80073f4 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	2200      	movs	r2, #0
 80073da:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2200      	movs	r2, #0
 80073e0:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2200      	movs	r2, #0
 80073e6:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80073e8:	2300      	movs	r3, #0
 80073ea:	2200      	movs	r2, #0
 80073ec:	2100      	movs	r1, #0
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f000 f81c 	bl	800742c <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 80073f4:	bf00      	nop
 80073f6:	3708      	adds	r7, #8
 80073f8:	46bd      	mov	sp, r7
 80073fa:	bd80      	pop	{r7, pc}

080073fc <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	4603      	mov	r3, r0
 8007404:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8007406:	2301      	movs	r3, #1
 8007408:	617b      	str	r3, [r7, #20]
 800740a:	2300      	movs	r3, #0
 800740c:	613b      	str	r3, [r7, #16]

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800740e:	79fb      	ldrb	r3, [r7, #7]
 8007410:	461a      	mov	r2, r3
 8007412:	6939      	ldr	r1, [r7, #16]
 8007414:	6978      	ldr	r0, [r7, #20]
 8007416:	f7ff ff65 	bl	80072e4 <xQueueGenericCreate>
 800741a:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800741c:	68f8      	ldr	r0, [r7, #12]
 800741e:	f7ff ffd3 	bl	80073c8 <prvInitialiseMutex>

        return xNewQueue;
 8007422:	68fb      	ldr	r3, [r7, #12]
    }
 8007424:	4618      	mov	r0, r3
 8007426:	3718      	adds	r7, #24
 8007428:	46bd      	mov	sp, r7
 800742a:	bd80      	pop	{r7, pc}

0800742c <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 800742c:	b580      	push	{r7, lr}
 800742e:	b08c      	sub	sp, #48	@ 0x30
 8007430:	af00      	add	r7, sp, #0
 8007432:	60f8      	str	r0, [r7, #12]
 8007434:	60b9      	str	r1, [r7, #8]
 8007436:	607a      	str	r2, [r7, #4]
 8007438:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800743a:	2300      	movs	r3, #0
 800743c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	62bb      	str	r3, [r7, #40]	@ 0x28

    configASSERT( pxQueue );
 8007442:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007444:	2b00      	cmp	r3, #0
 8007446:	d10b      	bne.n	8007460 <xQueueGenericSend+0x34>
        __asm volatile
 8007448:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	623b      	str	r3, [r7, #32]
    }
 800745a:	bf00      	nop
 800745c:	bf00      	nop
 800745e:	e7fd      	b.n	800745c <xQueueGenericSend+0x30>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2b00      	cmp	r3, #0
 8007464:	d103      	bne.n	800746e <xQueueGenericSend+0x42>
 8007466:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007468:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800746a:	2b00      	cmp	r3, #0
 800746c:	d101      	bne.n	8007472 <xQueueGenericSend+0x46>
 800746e:	2301      	movs	r3, #1
 8007470:	e000      	b.n	8007474 <xQueueGenericSend+0x48>
 8007472:	2300      	movs	r3, #0
 8007474:	2b00      	cmp	r3, #0
 8007476:	d10b      	bne.n	8007490 <xQueueGenericSend+0x64>
        __asm volatile
 8007478:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800747c:	f383 8811 	msr	BASEPRI, r3
 8007480:	f3bf 8f6f 	isb	sy
 8007484:	f3bf 8f4f 	dsb	sy
 8007488:	61fb      	str	r3, [r7, #28]
    }
 800748a:	bf00      	nop
 800748c:	bf00      	nop
 800748e:	e7fd      	b.n	800748c <xQueueGenericSend+0x60>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8007490:	683b      	ldr	r3, [r7, #0]
 8007492:	2b02      	cmp	r3, #2
 8007494:	d103      	bne.n	800749e <xQueueGenericSend+0x72>
 8007496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800749a:	2b01      	cmp	r3, #1
 800749c:	d101      	bne.n	80074a2 <xQueueGenericSend+0x76>
 800749e:	2301      	movs	r3, #1
 80074a0:	e000      	b.n	80074a4 <xQueueGenericSend+0x78>
 80074a2:	2300      	movs	r3, #0
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d10b      	bne.n	80074c0 <xQueueGenericSend+0x94>
        __asm volatile
 80074a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ac:	f383 8811 	msr	BASEPRI, r3
 80074b0:	f3bf 8f6f 	isb	sy
 80074b4:	f3bf 8f4f 	dsb	sy
 80074b8:	61bb      	str	r3, [r7, #24]
    }
 80074ba:	bf00      	nop
 80074bc:	bf00      	nop
 80074be:	e7fd      	b.n	80074bc <xQueueGenericSend+0x90>
    /*lint -save -e904 This function relaxes the coding standard somewhat to
     * allow return statements within the function itself.  This is done in the
     * interest of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 80074c0:	f001 fd5c 	bl	8008f7c <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80074c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80074c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80074cc:	429a      	cmp	r2, r3
 80074ce:	d302      	bcc.n	80074d6 <xQueueGenericSend+0xaa>
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	2b02      	cmp	r3, #2
 80074d4:	d129      	bne.n	800752a <xQueueGenericSend+0xfe>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	68b9      	ldr	r1, [r7, #8]
 80074da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074dc:	f000 f990 	bl	8007800 <prvCopyDataToQueue>
 80074e0:	6278      	str	r0, [r7, #36]	@ 0x24

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80074e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d010      	beq.n	800750c <xQueueGenericSend+0xe0>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80074ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ec:	3324      	adds	r3, #36	@ 0x24
 80074ee:	4618      	mov	r0, r3
 80074f0:	f000 ff58 	bl	80083a4 <xTaskRemoveFromEventList>
 80074f4:	4603      	mov	r3, r0
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d013      	beq.n	8007522 <xQueueGenericSend+0xf6>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 80074fa:	4b40      	ldr	r3, [pc, #256]	@ (80075fc <xQueueGenericSend+0x1d0>)
 80074fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007500:	601a      	str	r2, [r3, #0]
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	e00a      	b.n	8007522 <xQueueGenericSend+0xf6>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800750c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800750e:	2b00      	cmp	r3, #0
 8007510:	d007      	beq.n	8007522 <xQueueGenericSend+0xf6>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8007512:	4b3a      	ldr	r3, [pc, #232]	@ (80075fc <xQueueGenericSend+0x1d0>)
 8007514:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007518:	601a      	str	r2, [r3, #0]
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8007522:	f001 fd5d 	bl	8008fe0 <vPortExitCritical>
                return pdPASS;
 8007526:	2301      	movs	r3, #1
 8007528:	e063      	b.n	80075f2 <xQueueGenericSend+0x1c6>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d103      	bne.n	8007538 <xQueueGenericSend+0x10c>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8007530:	f001 fd56 	bl	8008fe0 <vPortExitCritical>

                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    return errQUEUE_FULL;
 8007534:	2300      	movs	r3, #0
 8007536:	e05c      	b.n	80075f2 <xQueueGenericSend+0x1c6>
                }
                else if( xEntryTimeSet == pdFALSE )
 8007538:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800753a:	2b00      	cmp	r3, #0
 800753c:	d106      	bne.n	800754c <xQueueGenericSend+0x120>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800753e:	f107 0310 	add.w	r3, r7, #16
 8007542:	4618      	mov	r0, r3
 8007544:	f001 f808 	bl	8008558 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8007548:	2301      	movs	r3, #1
 800754a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 800754c:	f001 fd48 	bl	8008fe0 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8007550:	f000 fc5c 	bl	8007e0c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8007554:	f001 fd12 	bl	8008f7c <vPortEnterCritical>
 8007558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800755a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800755e:	b25b      	sxtb	r3, r3
 8007560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007564:	d103      	bne.n	800756e <xQueueGenericSend+0x142>
 8007566:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007568:	2200      	movs	r2, #0
 800756a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800756e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007570:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8007574:	b25b      	sxtb	r3, r3
 8007576:	f1b3 3fff 	cmp.w	r3, #4294967295
 800757a:	d103      	bne.n	8007584 <xQueueGenericSend+0x158>
 800757c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007584:	f001 fd2c 	bl	8008fe0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007588:	1d3a      	adds	r2, r7, #4
 800758a:	f107 0310 	add.w	r3, r7, #16
 800758e:	4611      	mov	r1, r2
 8007590:	4618      	mov	r0, r3
 8007592:	f000 fff7 	bl	8008584 <xTaskCheckForTimeOut>
 8007596:	4603      	mov	r3, r0
 8007598:	2b00      	cmp	r3, #0
 800759a:	d124      	bne.n	80075e6 <xQueueGenericSend+0x1ba>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800759c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800759e:	f000 fa01 	bl	80079a4 <prvIsQueueFull>
 80075a2:	4603      	mov	r3, r0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d018      	beq.n	80075da <xQueueGenericSend+0x1ae>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80075a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075aa:	3310      	adds	r3, #16
 80075ac:	687a      	ldr	r2, [r7, #4]
 80075ae:	4611      	mov	r1, r2
 80075b0:	4618      	mov	r0, r3
 80075b2:	f000 fed1 	bl	8008358 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 80075b6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075b8:	f000 f98c 	bl	80078d4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 80075bc:	f000 fc34 	bl	8007e28 <xTaskResumeAll>
 80075c0:	4603      	mov	r3, r0
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	f47f af7c 	bne.w	80074c0 <xQueueGenericSend+0x94>
                {
                    portYIELD_WITHIN_API();
 80075c8:	4b0c      	ldr	r3, [pc, #48]	@ (80075fc <xQueueGenericSend+0x1d0>)
 80075ca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80075ce:	601a      	str	r2, [r3, #0]
 80075d0:	f3bf 8f4f 	dsb	sy
 80075d4:	f3bf 8f6f 	isb	sy
 80075d8:	e772      	b.n	80074c0 <xQueueGenericSend+0x94>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 80075da:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075dc:	f000 f97a 	bl	80078d4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80075e0:	f000 fc22 	bl	8007e28 <xTaskResumeAll>
 80075e4:	e76c      	b.n	80074c0 <xQueueGenericSend+0x94>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 80075e6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075e8:	f000 f974 	bl	80078d4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80075ec:	f000 fc1c 	bl	8007e28 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            return errQUEUE_FULL;
 80075f0:	2300      	movs	r3, #0
        }
    } /*lint -restore */
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3730      	adds	r7, #48	@ 0x30
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}
 80075fa:	bf00      	nop
 80075fc:	e000ed04 	.word	0xe000ed04

08007600 <xQueueSemaphoreTake>:
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b08c      	sub	sp, #48	@ 0x30
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
 8007608:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800760a:	2300      	movs	r3, #0
 800760c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	627b      	str	r3, [r7, #36]	@ 0x24

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8007612:	2300      	movs	r3, #0
 8007614:	62bb      	str	r3, [r7, #40]	@ 0x28
    #endif

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8007616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007618:	2b00      	cmp	r3, #0
 800761a:	d10b      	bne.n	8007634 <xQueueSemaphoreTake+0x34>
        __asm volatile
 800761c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007620:	f383 8811 	msr	BASEPRI, r3
 8007624:	f3bf 8f6f 	isb	sy
 8007628:	f3bf 8f4f 	dsb	sy
 800762c:	61bb      	str	r3, [r7, #24]
    }
 800762e:	bf00      	nop
 8007630:	bf00      	nop
 8007632:	e7fd      	b.n	8007630 <xQueueSemaphoreTake+0x30>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8007634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007636:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007638:	2b00      	cmp	r3, #0
 800763a:	d00b      	beq.n	8007654 <xQueueSemaphoreTake+0x54>
        __asm volatile
 800763c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	617b      	str	r3, [r7, #20]
    }
 800764e:	bf00      	nop
 8007650:	bf00      	nop
 8007652:	e7fd      	b.n	8007650 <xQueueSemaphoreTake+0x50>
    /*lint -save -e904 This function relaxes the coding standard somewhat to allow return
     * statements within the function itself.  This is done in the interest
     * of execution time efficiency. */
    for( ; ; )
    {
        taskENTER_CRITICAL();
 8007654:	f001 fc92 	bl	8008f7c <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8007658:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800765a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800765c:	623b      	str	r3, [r7, #32]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800765e:	6a3b      	ldr	r3, [r7, #32]
 8007660:	2b00      	cmp	r3, #0
 8007662:	d024      	beq.n	80076ae <xQueueSemaphoreTake+0xae>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8007664:	6a3b      	ldr	r3, [r7, #32]
 8007666:	1e5a      	subs	r2, r3, #1
 8007668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766a:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800766c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d104      	bne.n	800767e <xQueueSemaphoreTake+0x7e>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8007674:	f001 fab8 	bl	8008be8 <pvTaskIncrementMutexHeldCount>
 8007678:	4602      	mov	r2, r0
 800767a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800767c:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800767e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007680:	691b      	ldr	r3, [r3, #16]
 8007682:	2b00      	cmp	r3, #0
 8007684:	d00f      	beq.n	80076a6 <xQueueSemaphoreTake+0xa6>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8007686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007688:	3310      	adds	r3, #16
 800768a:	4618      	mov	r0, r3
 800768c:	f000 fe8a 	bl	80083a4 <xTaskRemoveFromEventList>
 8007690:	4603      	mov	r3, r0
 8007692:	2b00      	cmp	r3, #0
 8007694:	d007      	beq.n	80076a6 <xQueueSemaphoreTake+0xa6>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8007696:	4b4d      	ldr	r3, [pc, #308]	@ (80077cc <xQueueSemaphoreTake+0x1cc>)
 8007698:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800769c:	601a      	str	r2, [r3, #0]
 800769e:	f3bf 8f4f 	dsb	sy
 80076a2:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80076a6:	f001 fc9b 	bl	8008fe0 <vPortExitCritical>
                return pdPASS;
 80076aa:	2301      	movs	r3, #1
 80076ac:	e089      	b.n	80077c2 <xQueueSemaphoreTake+0x1c2>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80076ae:	683b      	ldr	r3, [r7, #0]
 80076b0:	2b00      	cmp	r3, #0
 80076b2:	d103      	bne.n	80076bc <xQueueSemaphoreTake+0xbc>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80076b4:	f001 fc94 	bl	8008fe0 <vPortExitCritical>
                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    return errQUEUE_EMPTY;
 80076b8:	2300      	movs	r3, #0
 80076ba:	e082      	b.n	80077c2 <xQueueSemaphoreTake+0x1c2>
                }
                else if( xEntryTimeSet == pdFALSE )
 80076bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d106      	bne.n	80076d0 <xQueueSemaphoreTake+0xd0>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80076c2:	f107 030c 	add.w	r3, r7, #12
 80076c6:	4618      	mov	r0, r3
 80076c8:	f000 ff46 	bl	8008558 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80076cc:	2301      	movs	r3, #1
 80076ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80076d0:	f001 fc86 	bl	8008fe0 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80076d4:	f000 fb9a 	bl	8007e0c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80076d8:	f001 fc50 	bl	8008f7c <vPortEnterCritical>
 80076dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076de:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80076e2:	b25b      	sxtb	r3, r3
 80076e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076e8:	d103      	bne.n	80076f2 <xQueueSemaphoreTake+0xf2>
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	2200      	movs	r2, #0
 80076ee:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80076f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80076f8:	b25b      	sxtb	r3, r3
 80076fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80076fe:	d103      	bne.n	8007708 <xQueueSemaphoreTake+0x108>
 8007700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007702:	2200      	movs	r2, #0
 8007704:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8007708:	f001 fc6a 	bl	8008fe0 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800770c:	463a      	mov	r2, r7
 800770e:	f107 030c 	add.w	r3, r7, #12
 8007712:	4611      	mov	r1, r2
 8007714:	4618      	mov	r0, r3
 8007716:	f000 ff35 	bl	8008584 <xTaskCheckForTimeOut>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d132      	bne.n	8007786 <xQueueSemaphoreTake+0x186>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007720:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007722:	f000 f929 	bl	8007978 <prvIsQueueEmpty>
 8007726:	4603      	mov	r3, r0
 8007728:	2b00      	cmp	r3, #0
 800772a:	d026      	beq.n	800777a <xQueueSemaphoreTake+0x17a>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800772c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d109      	bne.n	8007748 <xQueueSemaphoreTake+0x148>
                    {
                        taskENTER_CRITICAL();
 8007734:	f001 fc22 	bl	8008f7c <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800773a:	689b      	ldr	r3, [r3, #8]
 800773c:	4618      	mov	r0, r3
 800773e:	f001 f847 	bl	80087d0 <xTaskPriorityInherit>
 8007742:	62b8      	str	r0, [r7, #40]	@ 0x28
                        }
                        taskEXIT_CRITICAL();
 8007744:	f001 fc4c 	bl	8008fe0 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774a:	3324      	adds	r3, #36	@ 0x24
 800774c:	683a      	ldr	r2, [r7, #0]
 800774e:	4611      	mov	r1, r2
 8007750:	4618      	mov	r0, r3
 8007752:	f000 fe01 	bl	8008358 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8007756:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007758:	f000 f8bc 	bl	80078d4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 800775c:	f000 fb64 	bl	8007e28 <xTaskResumeAll>
 8007760:	4603      	mov	r3, r0
 8007762:	2b00      	cmp	r3, #0
 8007764:	f47f af76 	bne.w	8007654 <xQueueSemaphoreTake+0x54>
                {
                    portYIELD_WITHIN_API();
 8007768:	4b18      	ldr	r3, [pc, #96]	@ (80077cc <xQueueSemaphoreTake+0x1cc>)
 800776a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800776e:	601a      	str	r2, [r3, #0]
 8007770:	f3bf 8f4f 	dsb	sy
 8007774:	f3bf 8f6f 	isb	sy
 8007778:	e76c      	b.n	8007654 <xQueueSemaphoreTake+0x54>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 800777a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800777c:	f000 f8aa 	bl	80078d4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8007780:	f000 fb52 	bl	8007e28 <xTaskResumeAll>
 8007784:	e766      	b.n	8007654 <xQueueSemaphoreTake+0x54>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8007786:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007788:	f000 f8a4 	bl	80078d4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 800778c:	f000 fb4c 	bl	8007e28 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007790:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8007792:	f000 f8f1 	bl	8007978 <prvIsQueueEmpty>
 8007796:	4603      	mov	r3, r0
 8007798:	2b00      	cmp	r3, #0
 800779a:	f43f af5b 	beq.w	8007654 <xQueueSemaphoreTake+0x54>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 800779e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d00d      	beq.n	80077c0 <xQueueSemaphoreTake+0x1c0>
                    {
                        taskENTER_CRITICAL();
 80077a4:	f001 fbea 	bl	8008f7c <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80077a8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80077aa:	f000 f811 	bl	80077d0 <prvGetDisinheritPriorityAfterTimeout>
 80077ae:	61f8      	str	r0, [r7, #28]
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80077b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077b2:	689b      	ldr	r3, [r3, #8]
 80077b4:	69f9      	ldr	r1, [r7, #28]
 80077b6:	4618      	mov	r0, r3
 80077b8:	f001 f956 	bl	8008a68 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80077bc:	f001 fc10 	bl	8008fe0 <vPortExitCritical>
                    }
                }
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                return errQUEUE_EMPTY;
 80077c0:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    } /*lint -restore */
}
 80077c2:	4618      	mov	r0, r3
 80077c4:	3730      	adds	r7, #48	@ 0x30
 80077c6:	46bd      	mov	sp, r7
 80077c8:	bd80      	pop	{r7, pc}
 80077ca:	bf00      	nop
 80077cc:	e000ed04 	.word	0xe000ed04

080077d0 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d006      	beq.n	80077ee <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f1c3 0305 	rsb	r3, r3, #5
 80077ea:	60fb      	str	r3, [r7, #12]
 80077ec:	e001      	b.n	80077f2 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80077ee:	2300      	movs	r3, #0
 80077f0:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80077f2:	68fb      	ldr	r3, [r7, #12]
    }
 80077f4:	4618      	mov	r0, r3
 80077f6:	3714      	adds	r7, #20
 80077f8:	46bd      	mov	sp, r7
 80077fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fe:	4770      	bx	lr

08007800 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8007800:	b580      	push	{r7, lr}
 8007802:	b086      	sub	sp, #24
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800780c:	2300      	movs	r3, #0
 800780e:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007814:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800781a:	2b00      	cmp	r3, #0
 800781c:	d10d      	bne.n	800783a <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	2b00      	cmp	r3, #0
 8007824:	d14d      	bne.n	80078c2 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	689b      	ldr	r3, [r3, #8]
 800782a:	4618      	mov	r0, r3
 800782c:	f001 f872 	bl	8008914 <xTaskPriorityDisinherit>
 8007830:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	609a      	str	r2, [r3, #8]
 8007838:	e043      	b.n	80078c2 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d119      	bne.n	8007874 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	6858      	ldr	r0, [r3, #4]
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007848:	461a      	mov	r2, r3
 800784a:	68b9      	ldr	r1, [r7, #8]
 800784c:	f004 fa27 	bl	800bc9e <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	685a      	ldr	r2, [r3, #4]
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007858:	441a      	add	r2, r3
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	689b      	ldr	r3, [r3, #8]
 8007866:	429a      	cmp	r2, r3
 8007868:	d32b      	bcc.n	80078c2 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	605a      	str	r2, [r3, #4]
 8007872:	e026      	b.n	80078c2 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	68d8      	ldr	r0, [r3, #12]
 8007878:	68fb      	ldr	r3, [r7, #12]
 800787a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800787c:	461a      	mov	r2, r3
 800787e:	68b9      	ldr	r1, [r7, #8]
 8007880:	f004 fa0d 	bl	800bc9e <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	68da      	ldr	r2, [r3, #12]
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800788c:	425b      	negs	r3, r3
 800788e:	441a      	add	r2, r3
 8007890:	68fb      	ldr	r3, [r7, #12]
 8007892:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	68da      	ldr	r2, [r3, #12]
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	429a      	cmp	r2, r3
 800789e:	d207      	bcs.n	80078b0 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078a8:	425b      	negs	r3, r3
 80078aa:	441a      	add	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	2b02      	cmp	r3, #2
 80078b4:	d105      	bne.n	80078c2 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80078b6:	693b      	ldr	r3, [r7, #16]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d002      	beq.n	80078c2 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	3b01      	subs	r3, #1
 80078c0:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	1c5a      	adds	r2, r3, #1
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80078ca:	697b      	ldr	r3, [r7, #20]
}
 80078cc:	4618      	mov	r0, r3
 80078ce:	3718      	adds	r7, #24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}

080078d4 <prvUnlockQueue>:
    }
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80078d4:	b580      	push	{r7, lr}
 80078d6:	b084      	sub	sp, #16
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 80078dc:	f001 fb4e 	bl	8008f7c <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80078e6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 80078e8:	e011      	b.n	800790e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d012      	beq.n	8007918 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	3324      	adds	r3, #36	@ 0x24
 80078f6:	4618      	mov	r0, r3
 80078f8:	f000 fd54 	bl	80083a4 <xTaskRemoveFromEventList>
 80078fc:	4603      	mov	r3, r0
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d001      	beq.n	8007906 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8007902:	f000 fea7 	bl	8008654 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8007906:	7bfb      	ldrb	r3, [r7, #15]
 8007908:	3b01      	subs	r3, #1
 800790a:	b2db      	uxtb	r3, r3
 800790c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800790e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007912:	2b00      	cmp	r3, #0
 8007914:	dce9      	bgt.n	80078ea <prvUnlockQueue+0x16>
 8007916:	e000      	b.n	800791a <prvUnlockQueue+0x46>
                    break;
 8007918:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	22ff      	movs	r2, #255	@ 0xff
 800791e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8007922:	f001 fb5d 	bl	8008fe0 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8007926:	f001 fb29 	bl	8008f7c <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8007930:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007932:	e011      	b.n	8007958 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	691b      	ldr	r3, [r3, #16]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d012      	beq.n	8007962 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	3310      	adds	r3, #16
 8007940:	4618      	mov	r0, r3
 8007942:	f000 fd2f 	bl	80083a4 <xTaskRemoveFromEventList>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800794c:	f000 fe82 	bl	8008654 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8007950:	7bbb      	ldrb	r3, [r7, #14]
 8007952:	3b01      	subs	r3, #1
 8007954:	b2db      	uxtb	r3, r3
 8007956:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8007958:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800795c:	2b00      	cmp	r3, #0
 800795e:	dce9      	bgt.n	8007934 <prvUnlockQueue+0x60>
 8007960:	e000      	b.n	8007964 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8007962:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	22ff      	movs	r2, #255	@ 0xff
 8007968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800796c:	f001 fb38 	bl	8008fe0 <vPortExitCritical>
}
 8007970:	bf00      	nop
 8007972:	3710      	adds	r7, #16
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}

08007978 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b084      	sub	sp, #16
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8007980:	f001 fafc 	bl	8008f7c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007988:	2b00      	cmp	r3, #0
 800798a:	d102      	bne.n	8007992 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800798c:	2301      	movs	r3, #1
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	e001      	b.n	8007996 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 8007992:	2300      	movs	r3, #0
 8007994:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 8007996:	f001 fb23 	bl	8008fe0 <vPortExitCritical>

    return xReturn;
 800799a:	68fb      	ldr	r3, [r7, #12]
}
 800799c:	4618      	mov	r0, r3
 800799e:	3710      	adds	r7, #16
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <prvIsQueueFull>:
    return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b084      	sub	sp, #16
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80079ac:	f001 fae6 	bl	8008f7c <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80079b8:	429a      	cmp	r2, r3
 80079ba:	d102      	bne.n	80079c2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80079bc:	2301      	movs	r3, #1
 80079be:	60fb      	str	r3, [r7, #12]
 80079c0:	e001      	b.n	80079c6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80079c2:	2300      	movs	r3, #0
 80079c4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80079c6:	f001 fb0b 	bl	8008fe0 <vPortExitCritical>

    return xReturn;
 80079ca:	68fb      	ldr	r3, [r7, #12]
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b08c      	sub	sp, #48	@ 0x30
 80079d8:	af04      	add	r7, sp, #16
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	603b      	str	r3, [r7, #0]
 80079e0:	4613      	mov	r3, r2
 80079e2:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
        {
            StackType_t * pxStack;

            /* Allocate space for the stack used by the task being created. */
            pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80079e4:	88fb      	ldrh	r3, [r7, #6]
 80079e6:	009b      	lsls	r3, r3, #2
 80079e8:	4618      	mov	r0, r3
 80079ea:	f001 fbf1 	bl	80091d0 <pvPortMalloc>
 80079ee:	6178      	str	r0, [r7, #20]

            if( pxStack != NULL )
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d013      	beq.n	8007a1e <xTaskCreate+0x4a>
            {
                /* Allocate space for the TCB. */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80079f6:	2058      	movs	r0, #88	@ 0x58
 80079f8:	f001 fbea 	bl	80091d0 <pvPortMalloc>
 80079fc:	61f8      	str	r0, [r7, #28]

                if( pxNewTCB != NULL )
 80079fe:	69fb      	ldr	r3, [r7, #28]
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d008      	beq.n	8007a16 <xTaskCreate+0x42>
                {
                    memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8007a04:	2258      	movs	r2, #88	@ 0x58
 8007a06:	2100      	movs	r1, #0
 8007a08:	69f8      	ldr	r0, [r7, #28]
 8007a0a:	f004 f8da 	bl	800bbc2 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8007a0e:	69fb      	ldr	r3, [r7, #28]
 8007a10:	697a      	ldr	r2, [r7, #20]
 8007a12:	631a      	str	r2, [r3, #48]	@ 0x30
 8007a14:	e005      	b.n	8007a22 <xTaskCreate+0x4e>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8007a16:	6978      	ldr	r0, [r7, #20]
 8007a18:	f001 fc96 	bl	8009348 <vPortFree>
 8007a1c:	e001      	b.n	8007a22 <xTaskCreate+0x4e>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	61fb      	str	r3, [r7, #28]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8007a22:	69fb      	ldr	r3, [r7, #28]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d013      	beq.n	8007a50 <xTaskCreate+0x7c>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007a28:	88fa      	ldrh	r2, [r7, #6]
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	9303      	str	r3, [sp, #12]
 8007a2e:	69fb      	ldr	r3, [r7, #28]
 8007a30:	9302      	str	r3, [sp, #8]
 8007a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a34:	9301      	str	r3, [sp, #4]
 8007a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a38:	9300      	str	r3, [sp, #0]
 8007a3a:	683b      	ldr	r3, [r7, #0]
 8007a3c:	68b9      	ldr	r1, [r7, #8]
 8007a3e:	68f8      	ldr	r0, [r7, #12]
 8007a40:	f000 f80e 	bl	8007a60 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 8007a44:	69f8      	ldr	r0, [r7, #28]
 8007a46:	f000 f89b 	bl	8007b80 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	61bb      	str	r3, [r7, #24]
 8007a4e:	e002      	b.n	8007a56 <xTaskCreate+0x82>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8007a50:	f04f 33ff 	mov.w	r3, #4294967295
 8007a54:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 8007a56:	69bb      	ldr	r3, [r7, #24]
    }
 8007a58:	4618      	mov	r0, r3
 8007a5a:	3720      	adds	r7, #32
 8007a5c:	46bd      	mov	sp, r7
 8007a5e:	bd80      	pop	{r7, pc}

08007a60 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b088      	sub	sp, #32
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
 8007a6c:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8007a6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a70:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	009b      	lsls	r3, r3, #2
 8007a76:	461a      	mov	r2, r3
 8007a78:	21a5      	movs	r1, #165	@ 0xa5
 8007a7a:	f004 f8a2 	bl	800bbc2 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8007a7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a80:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	009b      	lsls	r3, r3, #2
 8007a8c:	4413      	add	r3, r2
 8007a8e:	61bb      	str	r3, [r7, #24]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	f023 0307 	bic.w	r3, r3, #7
 8007a96:	61bb      	str	r3, [r7, #24]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007a98:	69bb      	ldr	r3, [r7, #24]
 8007a9a:	f003 0307 	and.w	r3, r3, #7
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00b      	beq.n	8007aba <prvInitialiseNewTask+0x5a>
        __asm volatile
 8007aa2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007aa6:	f383 8811 	msr	BASEPRI, r3
 8007aaa:	f3bf 8f6f 	isb	sy
 8007aae:	f3bf 8f4f 	dsb	sy
 8007ab2:	617b      	str	r3, [r7, #20]
    }
 8007ab4:	bf00      	nop
 8007ab6:	bf00      	nop
 8007ab8:	e7fd      	b.n	8007ab6 <prvInitialiseNewTask+0x56>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8007aba:	68bb      	ldr	r3, [r7, #8]
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d01e      	beq.n	8007afe <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	61fb      	str	r3, [r7, #28]
 8007ac4:	e012      	b.n	8007aec <prvInitialiseNewTask+0x8c>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007ac6:	68ba      	ldr	r2, [r7, #8]
 8007ac8:	69fb      	ldr	r3, [r7, #28]
 8007aca:	4413      	add	r3, r2
 8007acc:	7819      	ldrb	r1, [r3, #0]
 8007ace:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007ad0:	69fb      	ldr	r3, [r7, #28]
 8007ad2:	4413      	add	r3, r2
 8007ad4:	3334      	adds	r3, #52	@ 0x34
 8007ad6:	460a      	mov	r2, r1
 8007ad8:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	69fb      	ldr	r3, [r7, #28]
 8007ade:	4413      	add	r3, r2
 8007ae0:	781b      	ldrb	r3, [r3, #0]
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d006      	beq.n	8007af4 <prvInitialiseNewTask+0x94>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007ae6:	69fb      	ldr	r3, [r7, #28]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	61fb      	str	r3, [r7, #28]
 8007aec:	69fb      	ldr	r3, [r7, #28]
 8007aee:	2b09      	cmp	r3, #9
 8007af0:	d9e9      	bls.n	8007ac6 <prvInitialiseNewTask+0x66>
 8007af2:	e000      	b.n	8007af6 <prvInitialiseNewTask+0x96>
            {
                break;
 8007af4:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007af6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007af8:	2200      	movs	r2, #0
 8007afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8007afe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b00:	2b04      	cmp	r3, #4
 8007b02:	d90b      	bls.n	8007b1c <prvInitialiseNewTask+0xbc>
        __asm volatile
 8007b04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b08:	f383 8811 	msr	BASEPRI, r3
 8007b0c:	f3bf 8f6f 	isb	sy
 8007b10:	f3bf 8f4f 	dsb	sy
 8007b14:	613b      	str	r3, [r7, #16]
    }
 8007b16:	bf00      	nop
 8007b18:	bf00      	nop
 8007b1a:	e7fd      	b.n	8007b18 <prvInitialiseNewTask+0xb8>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b1e:	2b04      	cmp	r3, #4
 8007b20:	d901      	bls.n	8007b26 <prvInitialiseNewTask+0xc6>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007b22:	2304      	movs	r3, #4
 8007b24:	62bb      	str	r3, [r7, #40]	@ 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8007b26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b2a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8007b2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b2e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007b30:	649a      	str	r2, [r3, #72]	@ 0x48
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007b32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b34:	3304      	adds	r3, #4
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7ff fad2 	bl	80070e0 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007b3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b3e:	3318      	adds	r3, #24
 8007b40:	4618      	mov	r0, r3
 8007b42:	f7ff facd 	bl	80070e0 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b48:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b4a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4e:	f1c3 0205 	rsb	r2, r3, #5
 8007b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b54:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b5a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	68f9      	ldr	r1, [r7, #12]
 8007b60:	69b8      	ldr	r0, [r7, #24]
 8007b62:	f001 f8d5 	bl	8008d10 <pxPortInitialiseStack>
 8007b66:	4602      	mov	r2, r0
 8007b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b6a:	601a      	str	r2, [r3, #0]
        }
        #endif /* portHAS_STACK_OVERFLOW_CHECKING */
    }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8007b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d002      	beq.n	8007b78 <prvInitialiseNewTask+0x118>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8007b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007b74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b76:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007b78:	bf00      	nop
 8007b7a:	3720      	adds	r7, #32
 8007b7c:	46bd      	mov	sp, r7
 8007b7e:	bd80      	pop	{r7, pc}

08007b80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8007b80:	b5b0      	push	{r4, r5, r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af02      	add	r7, sp, #8
 8007b86:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8007b88:	f001 f9f8 	bl	8008f7c <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8007b8c:	4b4f      	ldr	r3, [pc, #316]	@ (8007ccc <prvAddNewTaskToReadyList+0x14c>)
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	3301      	adds	r3, #1
 8007b92:	4a4e      	ldr	r2, [pc, #312]	@ (8007ccc <prvAddNewTaskToReadyList+0x14c>)
 8007b94:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 8007b96:	4b4e      	ldr	r3, [pc, #312]	@ (8007cd0 <prvAddNewTaskToReadyList+0x150>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d109      	bne.n	8007bb2 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8007b9e:	4a4c      	ldr	r2, [pc, #304]	@ (8007cd0 <prvAddNewTaskToReadyList+0x150>)
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007ba4:	4b49      	ldr	r3, [pc, #292]	@ (8007ccc <prvAddNewTaskToReadyList+0x14c>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	2b01      	cmp	r3, #1
 8007baa:	d110      	bne.n	8007bce <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8007bac:	f000 fd76 	bl	800869c <prvInitialiseTaskLists>
 8007bb0:	e00d      	b.n	8007bce <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8007bb2:	4b48      	ldr	r3, [pc, #288]	@ (8007cd4 <prvAddNewTaskToReadyList+0x154>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d109      	bne.n	8007bce <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8007bba:	4b45      	ldr	r3, [pc, #276]	@ (8007cd0 <prvAddNewTaskToReadyList+0x150>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d802      	bhi.n	8007bce <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8007bc8:	4a41      	ldr	r2, [pc, #260]	@ (8007cd0 <prvAddNewTaskToReadyList+0x150>)
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8007bce:	4b42      	ldr	r3, [pc, #264]	@ (8007cd8 <prvAddNewTaskToReadyList+0x158>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	4a40      	ldr	r2, [pc, #256]	@ (8007cd8 <prvAddNewTaskToReadyList+0x158>)
 8007bd6:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
        {
            /* Add a counter into the TCB for tracing only. */
            pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007bd8:	4b3f      	ldr	r3, [pc, #252]	@ (8007cd8 <prvAddNewTaskToReadyList+0x158>)
 8007bda:	681a      	ldr	r2, [r3, #0]
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d016      	beq.n	8007c14 <prvAddNewTaskToReadyList+0x94>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4618      	mov	r0, r3
 8007bea:	f003 f81d 	bl	800ac28 <SEGGER_SYSVIEW_OnTaskCreate>
 8007bee:	6878      	ldr	r0, [r7, #4]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f103 0134 	add.w	r1, r3, #52	@ 0x34
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bfe:	461d      	mov	r5, r3
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	461c      	mov	r4, r3
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007c0a:	1ae3      	subs	r3, r4, r3
 8007c0c:	9300      	str	r3, [sp, #0]
 8007c0e:	462b      	mov	r3, r5
 8007c10:	f001 fd5e 	bl	80096d0 <SYSVIEW_AddTask>

        prvAddTaskToReadyList( pxNewTCB );
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f003 f88a 	bl	800ad30 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c20:	2201      	movs	r2, #1
 8007c22:	409a      	lsls	r2, r3
 8007c24:	4b2d      	ldr	r3, [pc, #180]	@ (8007cdc <prvAddNewTaskToReadyList+0x15c>)
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	4313      	orrs	r3, r2
 8007c2a:	4a2c      	ldr	r2, [pc, #176]	@ (8007cdc <prvAddNewTaskToReadyList+0x15c>)
 8007c2c:	6013      	str	r3, [r2, #0]
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c32:	492b      	ldr	r1, [pc, #172]	@ (8007ce0 <prvAddNewTaskToReadyList+0x160>)
 8007c34:	4613      	mov	r3, r2
 8007c36:	009b      	lsls	r3, r3, #2
 8007c38:	4413      	add	r3, r2
 8007c3a:	009b      	lsls	r3, r3, #2
 8007c3c:	440b      	add	r3, r1
 8007c3e:	3304      	adds	r3, #4
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	60fb      	str	r3, [r7, #12]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	68fa      	ldr	r2, [r7, #12]
 8007c48:	609a      	str	r2, [r3, #8]
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	689a      	ldr	r2, [r3, #8]
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	60da      	str	r2, [r3, #12]
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	689b      	ldr	r3, [r3, #8]
 8007c56:	687a      	ldr	r2, [r7, #4]
 8007c58:	3204      	adds	r2, #4
 8007c5a:	605a      	str	r2, [r3, #4]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	1d1a      	adds	r2, r3, #4
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	609a      	str	r2, [r3, #8]
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c68:	4613      	mov	r3, r2
 8007c6a:	009b      	lsls	r3, r3, #2
 8007c6c:	4413      	add	r3, r2
 8007c6e:	009b      	lsls	r3, r3, #2
 8007c70:	4a1b      	ldr	r2, [pc, #108]	@ (8007ce0 <prvAddNewTaskToReadyList+0x160>)
 8007c72:	441a      	add	r2, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	615a      	str	r2, [r3, #20]
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007c7c:	4918      	ldr	r1, [pc, #96]	@ (8007ce0 <prvAddNewTaskToReadyList+0x160>)
 8007c7e:	4613      	mov	r3, r2
 8007c80:	009b      	lsls	r3, r3, #2
 8007c82:	4413      	add	r3, r2
 8007c84:	009b      	lsls	r3, r3, #2
 8007c86:	440b      	add	r3, r1
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	1c59      	adds	r1, r3, #1
 8007c8c:	4814      	ldr	r0, [pc, #80]	@ (8007ce0 <prvAddNewTaskToReadyList+0x160>)
 8007c8e:	4613      	mov	r3, r2
 8007c90:	009b      	lsls	r3, r3, #2
 8007c92:	4413      	add	r3, r2
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	4403      	add	r3, r0
 8007c98:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8007c9a:	f001 f9a1 	bl	8008fe0 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8007c9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007cd4 <prvAddNewTaskToReadyList+0x154>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d00e      	beq.n	8007cc4 <prvAddNewTaskToReadyList+0x144>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8007cd0 <prvAddNewTaskToReadyList+0x150>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d207      	bcs.n	8007cc4 <prvAddNewTaskToReadyList+0x144>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8007cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8007ce4 <prvAddNewTaskToReadyList+0x164>)
 8007cb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007cba:	601a      	str	r2, [r3, #0]
 8007cbc:	f3bf 8f4f 	dsb	sy
 8007cc0:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8007cc4:	bf00      	nop
 8007cc6:	3710      	adds	r7, #16
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bdb0      	pop	{r4, r5, r7, pc}
 8007ccc:	2000050c 	.word	0x2000050c
 8007cd0:	20000434 	.word	0x20000434
 8007cd4:	20000518 	.word	0x20000518
 8007cd8:	20000528 	.word	0x20000528
 8007cdc:	20000514 	.word	0x20000514
 8007ce0:	20000438 	.word	0x20000438
 8007ce4:	e000ed04 	.word	0xe000ed04

08007ce8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b084      	sub	sp, #16
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	60fb      	str	r3, [r7, #12]

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d018      	beq.n	8007d2c <vTaskDelay+0x44>
        {
            configASSERT( uxSchedulerSuspended == 0 );
 8007cfa:	4b14      	ldr	r3, [pc, #80]	@ (8007d4c <vTaskDelay+0x64>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d00b      	beq.n	8007d1a <vTaskDelay+0x32>
        __asm volatile
 8007d02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d06:	f383 8811 	msr	BASEPRI, r3
 8007d0a:	f3bf 8f6f 	isb	sy
 8007d0e:	f3bf 8f4f 	dsb	sy
 8007d12:	60bb      	str	r3, [r7, #8]
    }
 8007d14:	bf00      	nop
 8007d16:	bf00      	nop
 8007d18:	e7fd      	b.n	8007d16 <vTaskDelay+0x2e>
            vTaskSuspendAll();
 8007d1a:	f000 f877 	bl	8007e0c <vTaskSuspendAll>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007d1e:	2100      	movs	r1, #0
 8007d20:	6878      	ldr	r0, [r7, #4]
 8007d22:	f000 ff75 	bl	8008c10 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8007d26:	f000 f87f 	bl	8007e28 <xTaskResumeAll>
 8007d2a:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8007d2c:	68fb      	ldr	r3, [r7, #12]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d107      	bne.n	8007d42 <vTaskDelay+0x5a>
        {
            portYIELD_WITHIN_API();
 8007d32:	4b07      	ldr	r3, [pc, #28]	@ (8007d50 <vTaskDelay+0x68>)
 8007d34:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007d38:	601a      	str	r2, [r3, #0]
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8007d42:	bf00      	nop
 8007d44:	3710      	adds	r7, #16
 8007d46:	46bd      	mov	sp, r7
 8007d48:	bd80      	pop	{r7, pc}
 8007d4a:	bf00      	nop
 8007d4c:	20000534 	.word	0x20000534
 8007d50:	e000ed04 	.word	0xe000ed04

08007d54 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007d54:	b580      	push	{r7, lr}
 8007d56:	b086      	sub	sp, #24
 8007d58:	af02      	add	r7, sp, #8
        }
    }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
    {
        /* The Idle task is being created using dynamically allocated RAM. */
        xReturn = xTaskCreate( prvIdleTask,
 8007d5a:	4b24      	ldr	r3, [pc, #144]	@ (8007dec <vTaskStartScheduler+0x98>)
 8007d5c:	9301      	str	r3, [sp, #4]
 8007d5e:	2300      	movs	r3, #0
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	2300      	movs	r3, #0
 8007d64:	2282      	movs	r2, #130	@ 0x82
 8007d66:	4922      	ldr	r1, [pc, #136]	@ (8007df0 <vTaskStartScheduler+0x9c>)
 8007d68:	4822      	ldr	r0, [pc, #136]	@ (8007df4 <vTaskStartScheduler+0xa0>)
 8007d6a:	f7ff fe33 	bl	80079d4 <xTaskCreate>
 8007d6e:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	2b01      	cmp	r3, #1
 8007d74:	d124      	bne.n	8007dc0 <vTaskStartScheduler+0x6c>
        __asm volatile
 8007d76:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d7a:	f383 8811 	msr	BASEPRI, r3
 8007d7e:	f3bf 8f6f 	isb	sy
 8007d82:	f3bf 8f4f 	dsb	sy
 8007d86:	60bb      	str	r3, [r7, #8]
    }
 8007d88:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8007d8a:	4b1b      	ldr	r3, [pc, #108]	@ (8007df8 <vTaskStartScheduler+0xa4>)
 8007d8c:	f04f 32ff 	mov.w	r2, #4294967295
 8007d90:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8007d92:	4b1a      	ldr	r3, [pc, #104]	@ (8007dfc <vTaskStartScheduler+0xa8>)
 8007d94:	2201      	movs	r2, #1
 8007d96:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007d98:	4b19      	ldr	r3, [pc, #100]	@ (8007e00 <vTaskStartScheduler+0xac>)
 8007d9a:	2200      	movs	r2, #0
 8007d9c:	601a      	str	r2, [r3, #0]
         * is set to 0 and the following line fails to build then ensure you do not
         * have portCONFIGURE_TIMER_FOR_RUN_TIME_STATS() defined in your
         * FreeRTOSConfig.h file. */
        portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

        traceTASK_SWITCHED_IN();
 8007d9e:	4b19      	ldr	r3, [pc, #100]	@ (8007e04 <vTaskStartScheduler+0xb0>)
 8007da0:	681a      	ldr	r2, [r3, #0]
 8007da2:	4b12      	ldr	r3, [pc, #72]	@ (8007dec <vTaskStartScheduler+0x98>)
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d102      	bne.n	8007db0 <vTaskStartScheduler+0x5c>
 8007daa:	f002 ff21 	bl	800abf0 <SEGGER_SYSVIEW_OnIdle>
 8007dae:	e004      	b.n	8007dba <vTaskStartScheduler+0x66>
 8007db0:	4b14      	ldr	r3, [pc, #80]	@ (8007e04 <vTaskStartScheduler+0xb0>)
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	4618      	mov	r0, r3
 8007db6:	f002 ff79 	bl	800acac <SEGGER_SYSVIEW_OnTaskStartExec>

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        xPortStartScheduler();
 8007dba:	f001 f83b 	bl	8008e34 <xPortStartScheduler>
 8007dbe:	e00f      	b.n	8007de0 <vTaskStartScheduler+0x8c>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007dc6:	d10b      	bne.n	8007de0 <vTaskStartScheduler+0x8c>
        __asm volatile
 8007dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dcc:	f383 8811 	msr	BASEPRI, r3
 8007dd0:	f3bf 8f6f 	isb	sy
 8007dd4:	f3bf 8f4f 	dsb	sy
 8007dd8:	607b      	str	r3, [r7, #4]
    }
 8007dda:	bf00      	nop
 8007ddc:	bf00      	nop
 8007dde:	e7fd      	b.n	8007ddc <vTaskStartScheduler+0x88>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8007de0:	4b09      	ldr	r3, [pc, #36]	@ (8007e08 <vTaskStartScheduler+0xb4>)
 8007de2:	681b      	ldr	r3, [r3, #0]
}
 8007de4:	bf00      	nop
 8007de6:	3710      	adds	r7, #16
 8007de8:	46bd      	mov	sp, r7
 8007dea:	bd80      	pop	{r7, pc}
 8007dec:	20000530 	.word	0x20000530
 8007df0:	0800f024 	.word	0x0800f024
 8007df4:	0800866d 	.word	0x0800866d
 8007df8:	2000052c 	.word	0x2000052c
 8007dfc:	20000518 	.word	0x20000518
 8007e00:	20000510 	.word	0x20000510
 8007e04:	20000434 	.word	0x20000434
 8007e08:	2000000c 	.word	0x2000000c

08007e0c <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8007e10:	4b04      	ldr	r3, [pc, #16]	@ (8007e24 <vTaskSuspendAll+0x18>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3301      	adds	r3, #1
 8007e16:	4a03      	ldr	r2, [pc, #12]	@ (8007e24 <vTaskSuspendAll+0x18>)
 8007e18:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8007e1a:	bf00      	nop
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	20000534 	.word	0x20000534

08007e28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007e28:	b580      	push	{r7, lr}
 8007e2a:	b088      	sub	sp, #32
 8007e2c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8007e32:	2300      	movs	r3, #0
 8007e34:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8007e36:	4b73      	ldr	r3, [pc, #460]	@ (8008004 <xTaskResumeAll+0x1dc>)
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d10b      	bne.n	8007e56 <xTaskResumeAll+0x2e>
        __asm volatile
 8007e3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e42:	f383 8811 	msr	BASEPRI, r3
 8007e46:	f3bf 8f6f 	isb	sy
 8007e4a:	f3bf 8f4f 	dsb	sy
 8007e4e:	607b      	str	r3, [r7, #4]
    }
 8007e50:	bf00      	nop
 8007e52:	bf00      	nop
 8007e54:	e7fd      	b.n	8007e52 <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8007e56:	f001 f891 	bl	8008f7c <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8007e5a:	4b6a      	ldr	r3, [pc, #424]	@ (8008004 <xTaskResumeAll+0x1dc>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	3b01      	subs	r3, #1
 8007e60:	4a68      	ldr	r2, [pc, #416]	@ (8008004 <xTaskResumeAll+0x1dc>)
 8007e62:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007e64:	4b67      	ldr	r3, [pc, #412]	@ (8008004 <xTaskResumeAll+0x1dc>)
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	f040 80c4 	bne.w	8007ff6 <xTaskResumeAll+0x1ce>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007e6e:	4b66      	ldr	r3, [pc, #408]	@ (8008008 <xTaskResumeAll+0x1e0>)
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	f000 80bf 	beq.w	8007ff6 <xTaskResumeAll+0x1ce>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007e78:	e08e      	b.n	8007f98 <xTaskResumeAll+0x170>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e7a:	4b64      	ldr	r3, [pc, #400]	@ (800800c <xTaskResumeAll+0x1e4>)
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8007e82:	69fb      	ldr	r3, [r7, #28]
 8007e84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e86:	613b      	str	r3, [r7, #16]
 8007e88:	69fb      	ldr	r3, [r7, #28]
 8007e8a:	69db      	ldr	r3, [r3, #28]
 8007e8c:	69fa      	ldr	r2, [r7, #28]
 8007e8e:	6a12      	ldr	r2, [r2, #32]
 8007e90:	609a      	str	r2, [r3, #8]
 8007e92:	69fb      	ldr	r3, [r7, #28]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	69fa      	ldr	r2, [r7, #28]
 8007e98:	69d2      	ldr	r2, [r2, #28]
 8007e9a:	605a      	str	r2, [r3, #4]
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	685a      	ldr	r2, [r3, #4]
 8007ea0:	69fb      	ldr	r3, [r7, #28]
 8007ea2:	3318      	adds	r3, #24
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d103      	bne.n	8007eb0 <xTaskResumeAll+0x88>
 8007ea8:	69fb      	ldr	r3, [r7, #28]
 8007eaa:	6a1a      	ldr	r2, [r3, #32]
 8007eac:	693b      	ldr	r3, [r7, #16]
 8007eae:	605a      	str	r2, [r3, #4]
 8007eb0:	69fb      	ldr	r3, [r7, #28]
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	629a      	str	r2, [r3, #40]	@ 0x28
 8007eb6:	693b      	ldr	r3, [r7, #16]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	1e5a      	subs	r2, r3, #1
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8007ec0:	69fb      	ldr	r3, [r7, #28]
 8007ec2:	695b      	ldr	r3, [r3, #20]
 8007ec4:	60fb      	str	r3, [r7, #12]
 8007ec6:	69fb      	ldr	r3, [r7, #28]
 8007ec8:	689b      	ldr	r3, [r3, #8]
 8007eca:	69fa      	ldr	r2, [r7, #28]
 8007ecc:	68d2      	ldr	r2, [r2, #12]
 8007ece:	609a      	str	r2, [r3, #8]
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	68db      	ldr	r3, [r3, #12]
 8007ed4:	69fa      	ldr	r2, [r7, #28]
 8007ed6:	6892      	ldr	r2, [r2, #8]
 8007ed8:	605a      	str	r2, [r3, #4]
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	685a      	ldr	r2, [r3, #4]
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	429a      	cmp	r2, r3
 8007ee4:	d103      	bne.n	8007eee <xTaskResumeAll+0xc6>
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	68da      	ldr	r2, [r3, #12]
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	605a      	str	r2, [r3, #4]
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	615a      	str	r2, [r3, #20]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	1e5a      	subs	r2, r3, #1
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	4618      	mov	r0, r3
 8007f02:	f002 ff15 	bl	800ad30 <SEGGER_SYSVIEW_OnTaskStartReady>
 8007f06:	69fb      	ldr	r3, [r7, #28]
 8007f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f0a:	2201      	movs	r2, #1
 8007f0c:	409a      	lsls	r2, r3
 8007f0e:	4b40      	ldr	r3, [pc, #256]	@ (8008010 <xTaskResumeAll+0x1e8>)
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	4313      	orrs	r3, r2
 8007f14:	4a3e      	ldr	r2, [pc, #248]	@ (8008010 <xTaskResumeAll+0x1e8>)
 8007f16:	6013      	str	r3, [r2, #0]
 8007f18:	69fb      	ldr	r3, [r7, #28]
 8007f1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f1c:	493d      	ldr	r1, [pc, #244]	@ (8008014 <xTaskResumeAll+0x1ec>)
 8007f1e:	4613      	mov	r3, r2
 8007f20:	009b      	lsls	r3, r3, #2
 8007f22:	4413      	add	r3, r2
 8007f24:	009b      	lsls	r3, r3, #2
 8007f26:	440b      	add	r3, r1
 8007f28:	3304      	adds	r3, #4
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	60bb      	str	r3, [r7, #8]
 8007f2e:	69fb      	ldr	r3, [r7, #28]
 8007f30:	68ba      	ldr	r2, [r7, #8]
 8007f32:	609a      	str	r2, [r3, #8]
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	689a      	ldr	r2, [r3, #8]
 8007f38:	69fb      	ldr	r3, [r7, #28]
 8007f3a:	60da      	str	r2, [r3, #12]
 8007f3c:	68bb      	ldr	r3, [r7, #8]
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	69fa      	ldr	r2, [r7, #28]
 8007f42:	3204      	adds	r2, #4
 8007f44:	605a      	str	r2, [r3, #4]
 8007f46:	69fb      	ldr	r3, [r7, #28]
 8007f48:	1d1a      	adds	r2, r3, #4
 8007f4a:	68bb      	ldr	r3, [r7, #8]
 8007f4c:	609a      	str	r2, [r3, #8]
 8007f4e:	69fb      	ldr	r3, [r7, #28]
 8007f50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f52:	4613      	mov	r3, r2
 8007f54:	009b      	lsls	r3, r3, #2
 8007f56:	4413      	add	r3, r2
 8007f58:	009b      	lsls	r3, r3, #2
 8007f5a:	4a2e      	ldr	r2, [pc, #184]	@ (8008014 <xTaskResumeAll+0x1ec>)
 8007f5c:	441a      	add	r2, r3
 8007f5e:	69fb      	ldr	r3, [r7, #28]
 8007f60:	615a      	str	r2, [r3, #20]
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f66:	492b      	ldr	r1, [pc, #172]	@ (8008014 <xTaskResumeAll+0x1ec>)
 8007f68:	4613      	mov	r3, r2
 8007f6a:	009b      	lsls	r3, r3, #2
 8007f6c:	4413      	add	r3, r2
 8007f6e:	009b      	lsls	r3, r3, #2
 8007f70:	440b      	add	r3, r1
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	1c59      	adds	r1, r3, #1
 8007f76:	4827      	ldr	r0, [pc, #156]	@ (8008014 <xTaskResumeAll+0x1ec>)
 8007f78:	4613      	mov	r3, r2
 8007f7a:	009b      	lsls	r3, r3, #2
 8007f7c:	4413      	add	r3, r2
 8007f7e:	009b      	lsls	r3, r3, #2
 8007f80:	4403      	add	r3, r0
 8007f82:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007f84:	69fb      	ldr	r3, [r7, #28]
 8007f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007f88:	4b23      	ldr	r3, [pc, #140]	@ (8008018 <xTaskResumeAll+0x1f0>)
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d302      	bcc.n	8007f98 <xTaskResumeAll+0x170>
                    {
                        xYieldPending = pdTRUE;
 8007f92:	4b22      	ldr	r3, [pc, #136]	@ (800801c <xTaskResumeAll+0x1f4>)
 8007f94:	2201      	movs	r2, #1
 8007f96:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007f98:	4b1c      	ldr	r3, [pc, #112]	@ (800800c <xTaskResumeAll+0x1e4>)
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	f47f af6c 	bne.w	8007e7a <xTaskResumeAll+0x52>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8007fa2:	69fb      	ldr	r3, [r7, #28]
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d001      	beq.n	8007fac <xTaskResumeAll+0x184>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 8007fa8:	f000 fbf6 	bl	8008798 <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007fac:	4b1c      	ldr	r3, [pc, #112]	@ (8008020 <xTaskResumeAll+0x1f8>)
 8007fae:	681b      	ldr	r3, [r3, #0]
 8007fb0:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8007fb2:	697b      	ldr	r3, [r7, #20]
 8007fb4:	2b00      	cmp	r3, #0
 8007fb6:	d010      	beq.n	8007fda <xTaskResumeAll+0x1b2>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 8007fb8:	f000 f848 	bl	800804c <xTaskIncrementTick>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d002      	beq.n	8007fc8 <xTaskResumeAll+0x1a0>
                            {
                                xYieldPending = pdTRUE;
 8007fc2:	4b16      	ldr	r3, [pc, #88]	@ (800801c <xTaskResumeAll+0x1f4>)
 8007fc4:	2201      	movs	r2, #1
 8007fc6:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 8007fc8:	697b      	ldr	r3, [r7, #20]
 8007fca:	3b01      	subs	r3, #1
 8007fcc:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8007fce:	697b      	ldr	r3, [r7, #20]
 8007fd0:	2b00      	cmp	r3, #0
 8007fd2:	d1f1      	bne.n	8007fb8 <xTaskResumeAll+0x190>

                        xPendedTicks = 0;
 8007fd4:	4b12      	ldr	r3, [pc, #72]	@ (8008020 <xTaskResumeAll+0x1f8>)
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 8007fda:	4b10      	ldr	r3, [pc, #64]	@ (800801c <xTaskResumeAll+0x1f4>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d009      	beq.n	8007ff6 <xTaskResumeAll+0x1ce>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                    {
                        xAlreadyYielded = pdTRUE;
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	61bb      	str	r3, [r7, #24]
                    }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8007fe6:	4b0f      	ldr	r3, [pc, #60]	@ (8008024 <xTaskResumeAll+0x1fc>)
 8007fe8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007fec:	601a      	str	r2, [r3, #0]
 8007fee:	f3bf 8f4f 	dsb	sy
 8007ff2:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8007ff6:	f000 fff3 	bl	8008fe0 <vPortExitCritical>

    return xAlreadyYielded;
 8007ffa:	69bb      	ldr	r3, [r7, #24]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3720      	adds	r7, #32
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	20000534 	.word	0x20000534
 8008008:	2000050c 	.word	0x2000050c
 800800c:	200004cc 	.word	0x200004cc
 8008010:	20000514 	.word	0x20000514
 8008014:	20000438 	.word	0x20000438
 8008018:	20000434 	.word	0x20000434
 800801c:	20000520 	.word	0x20000520
 8008020:	2000051c 	.word	0x2000051c
 8008024:	e000ed04 	.word	0xe000ed04

08008028 <xTaskGetTickCountFromISR>:
    return xTicks;
}
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
     * that have been assigned a priority at or (logically) below the maximum
     * system call  interrupt priority.  FreeRTOS maintains a separate interrupt
     * safe API to ensure interrupt entry is as fast and as simple as possible.
     * More information (albeit Cortex-M specific) is provided on the following
     * link: https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
    portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800802e:	f001 f88d 	bl	800914c <vPortValidateInterruptPriority>

    uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8008032:	2300      	movs	r3, #0
 8008034:	607b      	str	r3, [r7, #4]
    {
        xReturn = xTickCount;
 8008036:	4b04      	ldr	r3, [pc, #16]	@ (8008048 <xTaskGetTickCountFromISR+0x20>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	603b      	str	r3, [r7, #0]
    }
    portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

    return xReturn;
 800803c:	683b      	ldr	r3, [r7, #0]
}
 800803e:	4618      	mov	r0, r3
 8008040:	3708      	adds	r7, #8
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	20000510 	.word	0x20000510

0800804c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b08a      	sub	sp, #40	@ 0x28
 8008050:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8008052:	2300      	movs	r3, #0
 8008054:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008056:	4b80      	ldr	r3, [pc, #512]	@ (8008258 <xTaskIncrementTick+0x20c>)
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	2b00      	cmp	r3, #0
 800805c:	f040 80f1 	bne.w	8008242 <xTaskIncrementTick+0x1f6>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8008060:	4b7e      	ldr	r3, [pc, #504]	@ (800825c <xTaskIncrementTick+0x210>)
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	3301      	adds	r3, #1
 8008066:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8008068:	4a7c      	ldr	r2, [pc, #496]	@ (800825c <xTaskIncrementTick+0x210>)
 800806a:	6a3b      	ldr	r3, [r7, #32]
 800806c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800806e:	6a3b      	ldr	r3, [r7, #32]
 8008070:	2b00      	cmp	r3, #0
 8008072:	d121      	bne.n	80080b8 <xTaskIncrementTick+0x6c>
        {
            taskSWITCH_DELAYED_LISTS();
 8008074:	4b7a      	ldr	r3, [pc, #488]	@ (8008260 <xTaskIncrementTick+0x214>)
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	2b00      	cmp	r3, #0
 800807c:	d00b      	beq.n	8008096 <xTaskIncrementTick+0x4a>
        __asm volatile
 800807e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008082:	f383 8811 	msr	BASEPRI, r3
 8008086:	f3bf 8f6f 	isb	sy
 800808a:	f3bf 8f4f 	dsb	sy
 800808e:	607b      	str	r3, [r7, #4]
    }
 8008090:	bf00      	nop
 8008092:	bf00      	nop
 8008094:	e7fd      	b.n	8008092 <xTaskIncrementTick+0x46>
 8008096:	4b72      	ldr	r3, [pc, #456]	@ (8008260 <xTaskIncrementTick+0x214>)
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	61fb      	str	r3, [r7, #28]
 800809c:	4b71      	ldr	r3, [pc, #452]	@ (8008264 <xTaskIncrementTick+0x218>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	4a6f      	ldr	r2, [pc, #444]	@ (8008260 <xTaskIncrementTick+0x214>)
 80080a2:	6013      	str	r3, [r2, #0]
 80080a4:	4a6f      	ldr	r2, [pc, #444]	@ (8008264 <xTaskIncrementTick+0x218>)
 80080a6:	69fb      	ldr	r3, [r7, #28]
 80080a8:	6013      	str	r3, [r2, #0]
 80080aa:	4b6f      	ldr	r3, [pc, #444]	@ (8008268 <xTaskIncrementTick+0x21c>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3301      	adds	r3, #1
 80080b0:	4a6d      	ldr	r2, [pc, #436]	@ (8008268 <xTaskIncrementTick+0x21c>)
 80080b2:	6013      	str	r3, [r2, #0]
 80080b4:	f000 fb70 	bl	8008798 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80080b8:	4b6c      	ldr	r3, [pc, #432]	@ (800826c <xTaskIncrementTick+0x220>)
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6a3a      	ldr	r2, [r7, #32]
 80080be:	429a      	cmp	r2, r3
 80080c0:	f0c0 80aa 	bcc.w	8008218 <xTaskIncrementTick+0x1cc>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080c4:	4b66      	ldr	r3, [pc, #408]	@ (8008260 <xTaskIncrementTick+0x214>)
 80080c6:	681b      	ldr	r3, [r3, #0]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d104      	bne.n	80080d8 <xTaskIncrementTick+0x8c>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080ce:	4b67      	ldr	r3, [pc, #412]	@ (800826c <xTaskIncrementTick+0x220>)
 80080d0:	f04f 32ff 	mov.w	r2, #4294967295
 80080d4:	601a      	str	r2, [r3, #0]
                    break;
 80080d6:	e09f      	b.n	8008218 <xTaskIncrementTick+0x1cc>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080d8:	4b61      	ldr	r3, [pc, #388]	@ (8008260 <xTaskIncrementTick+0x214>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68db      	ldr	r3, [r3, #12]
 80080de:	68db      	ldr	r3, [r3, #12]
 80080e0:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80080e2:	69bb      	ldr	r3, [r7, #24]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80080e8:	6a3a      	ldr	r2, [r7, #32]
 80080ea:	697b      	ldr	r3, [r7, #20]
 80080ec:	429a      	cmp	r2, r3
 80080ee:	d203      	bcs.n	80080f8 <xTaskIncrementTick+0xac>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80080f0:	4a5e      	ldr	r2, [pc, #376]	@ (800826c <xTaskIncrementTick+0x220>)
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80080f6:	e08f      	b.n	8008218 <xTaskIncrementTick+0x1cc>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80080f8:	69bb      	ldr	r3, [r7, #24]
 80080fa:	695b      	ldr	r3, [r3, #20]
 80080fc:	613b      	str	r3, [r7, #16]
 80080fe:	69bb      	ldr	r3, [r7, #24]
 8008100:	689b      	ldr	r3, [r3, #8]
 8008102:	69ba      	ldr	r2, [r7, #24]
 8008104:	68d2      	ldr	r2, [r2, #12]
 8008106:	609a      	str	r2, [r3, #8]
 8008108:	69bb      	ldr	r3, [r7, #24]
 800810a:	68db      	ldr	r3, [r3, #12]
 800810c:	69ba      	ldr	r2, [r7, #24]
 800810e:	6892      	ldr	r2, [r2, #8]
 8008110:	605a      	str	r2, [r3, #4]
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	685a      	ldr	r2, [r3, #4]
 8008116:	69bb      	ldr	r3, [r7, #24]
 8008118:	3304      	adds	r3, #4
 800811a:	429a      	cmp	r2, r3
 800811c:	d103      	bne.n	8008126 <xTaskIncrementTick+0xda>
 800811e:	69bb      	ldr	r3, [r7, #24]
 8008120:	68da      	ldr	r2, [r3, #12]
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	605a      	str	r2, [r3, #4]
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	2200      	movs	r2, #0
 800812a:	615a      	str	r2, [r3, #20]
 800812c:	693b      	ldr	r3, [r7, #16]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	1e5a      	subs	r2, r3, #1
 8008132:	693b      	ldr	r3, [r7, #16]
 8008134:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008136:	69bb      	ldr	r3, [r7, #24]
 8008138:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800813a:	2b00      	cmp	r3, #0
 800813c:	d01e      	beq.n	800817c <xTaskIncrementTick+0x130>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800813e:	69bb      	ldr	r3, [r7, #24]
 8008140:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008142:	60fb      	str	r3, [r7, #12]
 8008144:	69bb      	ldr	r3, [r7, #24]
 8008146:	69db      	ldr	r3, [r3, #28]
 8008148:	69ba      	ldr	r2, [r7, #24]
 800814a:	6a12      	ldr	r2, [r2, #32]
 800814c:	609a      	str	r2, [r3, #8]
 800814e:	69bb      	ldr	r3, [r7, #24]
 8008150:	6a1b      	ldr	r3, [r3, #32]
 8008152:	69ba      	ldr	r2, [r7, #24]
 8008154:	69d2      	ldr	r2, [r2, #28]
 8008156:	605a      	str	r2, [r3, #4]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	685a      	ldr	r2, [r3, #4]
 800815c:	69bb      	ldr	r3, [r7, #24]
 800815e:	3318      	adds	r3, #24
 8008160:	429a      	cmp	r2, r3
 8008162:	d103      	bne.n	800816c <xTaskIncrementTick+0x120>
 8008164:	69bb      	ldr	r3, [r7, #24]
 8008166:	6a1a      	ldr	r2, [r3, #32]
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	605a      	str	r2, [r3, #4]
 800816c:	69bb      	ldr	r3, [r7, #24]
 800816e:	2200      	movs	r2, #0
 8008170:	629a      	str	r2, [r3, #40]	@ 0x28
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	1e5a      	subs	r2, r3, #1
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 800817c:	69bb      	ldr	r3, [r7, #24]
 800817e:	4618      	mov	r0, r3
 8008180:	f002 fdd6 	bl	800ad30 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008184:	69bb      	ldr	r3, [r7, #24]
 8008186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008188:	2201      	movs	r2, #1
 800818a:	409a      	lsls	r2, r3
 800818c:	4b38      	ldr	r3, [pc, #224]	@ (8008270 <xTaskIncrementTick+0x224>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4313      	orrs	r3, r2
 8008192:	4a37      	ldr	r2, [pc, #220]	@ (8008270 <xTaskIncrementTick+0x224>)
 8008194:	6013      	str	r3, [r2, #0]
 8008196:	69bb      	ldr	r3, [r7, #24]
 8008198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800819a:	4936      	ldr	r1, [pc, #216]	@ (8008274 <xTaskIncrementTick+0x228>)
 800819c:	4613      	mov	r3, r2
 800819e:	009b      	lsls	r3, r3, #2
 80081a0:	4413      	add	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	440b      	add	r3, r1
 80081a6:	3304      	adds	r3, #4
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	60bb      	str	r3, [r7, #8]
 80081ac:	69bb      	ldr	r3, [r7, #24]
 80081ae:	68ba      	ldr	r2, [r7, #8]
 80081b0:	609a      	str	r2, [r3, #8]
 80081b2:	68bb      	ldr	r3, [r7, #8]
 80081b4:	689a      	ldr	r2, [r3, #8]
 80081b6:	69bb      	ldr	r3, [r7, #24]
 80081b8:	60da      	str	r2, [r3, #12]
 80081ba:	68bb      	ldr	r3, [r7, #8]
 80081bc:	689b      	ldr	r3, [r3, #8]
 80081be:	69ba      	ldr	r2, [r7, #24]
 80081c0:	3204      	adds	r2, #4
 80081c2:	605a      	str	r2, [r3, #4]
 80081c4:	69bb      	ldr	r3, [r7, #24]
 80081c6:	1d1a      	adds	r2, r3, #4
 80081c8:	68bb      	ldr	r3, [r7, #8]
 80081ca:	609a      	str	r2, [r3, #8]
 80081cc:	69bb      	ldr	r3, [r7, #24]
 80081ce:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081d0:	4613      	mov	r3, r2
 80081d2:	009b      	lsls	r3, r3, #2
 80081d4:	4413      	add	r3, r2
 80081d6:	009b      	lsls	r3, r3, #2
 80081d8:	4a26      	ldr	r2, [pc, #152]	@ (8008274 <xTaskIncrementTick+0x228>)
 80081da:	441a      	add	r2, r3
 80081dc:	69bb      	ldr	r3, [r7, #24]
 80081de:	615a      	str	r2, [r3, #20]
 80081e0:	69bb      	ldr	r3, [r7, #24]
 80081e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80081e4:	4923      	ldr	r1, [pc, #140]	@ (8008274 <xTaskIncrementTick+0x228>)
 80081e6:	4613      	mov	r3, r2
 80081e8:	009b      	lsls	r3, r3, #2
 80081ea:	4413      	add	r3, r2
 80081ec:	009b      	lsls	r3, r3, #2
 80081ee:	440b      	add	r3, r1
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	1c59      	adds	r1, r3, #1
 80081f4:	481f      	ldr	r0, [pc, #124]	@ (8008274 <xTaskIncrementTick+0x228>)
 80081f6:	4613      	mov	r3, r2
 80081f8:	009b      	lsls	r3, r3, #2
 80081fa:	4413      	add	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	4403      	add	r3, r0
 8008200:	6019      	str	r1, [r3, #0]
                         * task.
                         * The case of equal priority tasks sharing
                         * processing time (which happens when both
                         * preemption and time slicing are on) is
                         * handled below.*/
                        if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008202:	69bb      	ldr	r3, [r7, #24]
 8008204:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008206:	4b1c      	ldr	r3, [pc, #112]	@ (8008278 <xTaskIncrementTick+0x22c>)
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800820c:	429a      	cmp	r2, r3
 800820e:	f67f af59 	bls.w	80080c4 <xTaskIncrementTick+0x78>
                        {
                            xSwitchRequired = pdTRUE;
 8008212:	2301      	movs	r3, #1
 8008214:	627b      	str	r3, [r7, #36]	@ 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008216:	e755      	b.n	80080c4 <xTaskIncrementTick+0x78>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008218:	4b17      	ldr	r3, [pc, #92]	@ (8008278 <xTaskIncrementTick+0x22c>)
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800821e:	4915      	ldr	r1, [pc, #84]	@ (8008274 <xTaskIncrementTick+0x228>)
 8008220:	4613      	mov	r3, r2
 8008222:	009b      	lsls	r3, r3, #2
 8008224:	4413      	add	r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	440b      	add	r3, r1
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	2b01      	cmp	r3, #1
 800822e:	d901      	bls.n	8008234 <xTaskIncrementTick+0x1e8>
            {
                xSwitchRequired = pdTRUE;
 8008230:	2301      	movs	r3, #1
 8008232:	627b      	str	r3, [r7, #36]	@ 0x24
        }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
        {
            if( xYieldPending != pdFALSE )
 8008234:	4b11      	ldr	r3, [pc, #68]	@ (800827c <xTaskIncrementTick+0x230>)
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	2b00      	cmp	r3, #0
 800823a:	d007      	beq.n	800824c <xTaskIncrementTick+0x200>
            {
                xSwitchRequired = pdTRUE;
 800823c:	2301      	movs	r3, #1
 800823e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008240:	e004      	b.n	800824c <xTaskIncrementTick+0x200>
        }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8008242:	4b0f      	ldr	r3, [pc, #60]	@ (8008280 <xTaskIncrementTick+0x234>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3301      	adds	r3, #1
 8008248:	4a0d      	ldr	r2, [pc, #52]	@ (8008280 <xTaskIncrementTick+0x234>)
 800824a:	6013      	str	r3, [r2, #0]
            vApplicationTickHook();
        }
        #endif
    }

    return xSwitchRequired;
 800824c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800824e:	4618      	mov	r0, r3
 8008250:	3728      	adds	r7, #40	@ 0x28
 8008252:	46bd      	mov	sp, r7
 8008254:	bd80      	pop	{r7, pc}
 8008256:	bf00      	nop
 8008258:	20000534 	.word	0x20000534
 800825c:	20000510 	.word	0x20000510
 8008260:	200004c4 	.word	0x200004c4
 8008264:	200004c8 	.word	0x200004c8
 8008268:	20000524 	.word	0x20000524
 800826c:	2000052c 	.word	0x2000052c
 8008270:	20000514 	.word	0x20000514
 8008274:	20000438 	.word	0x20000438
 8008278:	20000434 	.word	0x20000434
 800827c:	20000520 	.word	0x20000520
 8008280:	2000051c 	.word	0x2000051c

08008284 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800828a:	4b2d      	ldr	r3, [pc, #180]	@ (8008340 <vTaskSwitchContext+0xbc>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	2b00      	cmp	r3, #0
 8008290:	d003      	beq.n	800829a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8008292:	4b2c      	ldr	r3, [pc, #176]	@ (8008344 <vTaskSwitchContext+0xc0>)
 8008294:	2201      	movs	r2, #1
 8008296:	601a      	str	r2, [r3, #0]
             * Block specific to this task. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif
    }
}
 8008298:	e04e      	b.n	8008338 <vTaskSwitchContext+0xb4>
        xYieldPending = pdFALSE;
 800829a:	4b2a      	ldr	r3, [pc, #168]	@ (8008344 <vTaskSwitchContext+0xc0>)
 800829c:	2200      	movs	r2, #0
 800829e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80082a0:	4b29      	ldr	r3, [pc, #164]	@ (8008348 <vTaskSwitchContext+0xc4>)
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	fab3 f383 	clz	r3, r3
 80082ac:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 80082ae:	7afb      	ldrb	r3, [r7, #11]
 80082b0:	f1c3 031f 	rsb	r3, r3, #31
 80082b4:	617b      	str	r3, [r7, #20]
 80082b6:	4925      	ldr	r1, [pc, #148]	@ (800834c <vTaskSwitchContext+0xc8>)
 80082b8:	697a      	ldr	r2, [r7, #20]
 80082ba:	4613      	mov	r3, r2
 80082bc:	009b      	lsls	r3, r3, #2
 80082be:	4413      	add	r3, r2
 80082c0:	009b      	lsls	r3, r3, #2
 80082c2:	440b      	add	r3, r1
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d10b      	bne.n	80082e2 <vTaskSwitchContext+0x5e>
        __asm volatile
 80082ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	607b      	str	r3, [r7, #4]
    }
 80082dc:	bf00      	nop
 80082de:	bf00      	nop
 80082e0:	e7fd      	b.n	80082de <vTaskSwitchContext+0x5a>
 80082e2:	697a      	ldr	r2, [r7, #20]
 80082e4:	4613      	mov	r3, r2
 80082e6:	009b      	lsls	r3, r3, #2
 80082e8:	4413      	add	r3, r2
 80082ea:	009b      	lsls	r3, r3, #2
 80082ec:	4a17      	ldr	r2, [pc, #92]	@ (800834c <vTaskSwitchContext+0xc8>)
 80082ee:	4413      	add	r3, r2
 80082f0:	613b      	str	r3, [r7, #16]
 80082f2:	693b      	ldr	r3, [r7, #16]
 80082f4:	685b      	ldr	r3, [r3, #4]
 80082f6:	685a      	ldr	r2, [r3, #4]
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	605a      	str	r2, [r3, #4]
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	693b      	ldr	r3, [r7, #16]
 8008302:	3308      	adds	r3, #8
 8008304:	429a      	cmp	r2, r3
 8008306:	d104      	bne.n	8008312 <vTaskSwitchContext+0x8e>
 8008308:	693b      	ldr	r3, [r7, #16]
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	685a      	ldr	r2, [r3, #4]
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	605a      	str	r2, [r3, #4]
 8008312:	693b      	ldr	r3, [r7, #16]
 8008314:	685b      	ldr	r3, [r3, #4]
 8008316:	68db      	ldr	r3, [r3, #12]
 8008318:	4a0d      	ldr	r2, [pc, #52]	@ (8008350 <vTaskSwitchContext+0xcc>)
 800831a:	6013      	str	r3, [r2, #0]
        traceTASK_SWITCHED_IN();
 800831c:	4b0c      	ldr	r3, [pc, #48]	@ (8008350 <vTaskSwitchContext+0xcc>)
 800831e:	681a      	ldr	r2, [r3, #0]
 8008320:	4b0c      	ldr	r3, [pc, #48]	@ (8008354 <vTaskSwitchContext+0xd0>)
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	429a      	cmp	r2, r3
 8008326:	d102      	bne.n	800832e <vTaskSwitchContext+0xaa>
 8008328:	f002 fc62 	bl	800abf0 <SEGGER_SYSVIEW_OnIdle>
}
 800832c:	e004      	b.n	8008338 <vTaskSwitchContext+0xb4>
        traceTASK_SWITCHED_IN();
 800832e:	4b08      	ldr	r3, [pc, #32]	@ (8008350 <vTaskSwitchContext+0xcc>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	4618      	mov	r0, r3
 8008334:	f002 fcba 	bl	800acac <SEGGER_SYSVIEW_OnTaskStartExec>
}
 8008338:	bf00      	nop
 800833a:	3718      	adds	r7, #24
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}
 8008340:	20000534 	.word	0x20000534
 8008344:	20000520 	.word	0x20000520
 8008348:	20000514 	.word	0x20000514
 800834c:	20000438 	.word	0x20000438
 8008350:	20000434 	.word	0x20000434
 8008354:	20000530 	.word	0x20000530

08008358 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
 8008360:	6039      	str	r1, [r7, #0]
    configASSERT( pxEventList );
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d10b      	bne.n	8008380 <vTaskPlaceOnEventList+0x28>
        __asm volatile
 8008368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800836c:	f383 8811 	msr	BASEPRI, r3
 8008370:	f3bf 8f6f 	isb	sy
 8008374:	f3bf 8f4f 	dsb	sy
 8008378:	60fb      	str	r3, [r7, #12]
    }
 800837a:	bf00      	nop
 800837c:	bf00      	nop
 800837e:	e7fd      	b.n	800837c <vTaskPlaceOnEventList+0x24>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8008380:	4b07      	ldr	r3, [pc, #28]	@ (80083a0 <vTaskPlaceOnEventList+0x48>)
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	3318      	adds	r3, #24
 8008386:	4619      	mov	r1, r3
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f7fe feb6 	bl	80070fa <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800838e:	2101      	movs	r1, #1
 8008390:	6838      	ldr	r0, [r7, #0]
 8008392:	f000 fc3d 	bl	8008c10 <prvAddCurrentTaskToDelayedList>
}
 8008396:	bf00      	nop
 8008398:	3710      	adds	r7, #16
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}
 800839e:	bf00      	nop
 80083a0:	20000434 	.word	0x20000434

080083a4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b08a      	sub	sp, #40	@ 0x28
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
     * get called - the lock count on the queue will get modified instead.  This
     * means exclusive access to the event list is guaranteed here.
     *
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	68db      	ldr	r3, [r3, #12]
 80083b0:	68db      	ldr	r3, [r3, #12]
 80083b2:	623b      	str	r3, [r7, #32]
    configASSERT( pxUnblockedTCB );
 80083b4:	6a3b      	ldr	r3, [r7, #32]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d10b      	bne.n	80083d2 <xTaskRemoveFromEventList+0x2e>
        __asm volatile
 80083ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80083be:	f383 8811 	msr	BASEPRI, r3
 80083c2:	f3bf 8f6f 	isb	sy
 80083c6:	f3bf 8f4f 	dsb	sy
 80083ca:	60fb      	str	r3, [r7, #12]
    }
 80083cc:	bf00      	nop
 80083ce:	bf00      	nop
 80083d0:	e7fd      	b.n	80083ce <xTaskRemoveFromEventList+0x2a>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80083d2:	6a3b      	ldr	r3, [r7, #32]
 80083d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083d6:	61fb      	str	r3, [r7, #28]
 80083d8:	6a3b      	ldr	r3, [r7, #32]
 80083da:	69db      	ldr	r3, [r3, #28]
 80083dc:	6a3a      	ldr	r2, [r7, #32]
 80083de:	6a12      	ldr	r2, [r2, #32]
 80083e0:	609a      	str	r2, [r3, #8]
 80083e2:	6a3b      	ldr	r3, [r7, #32]
 80083e4:	6a1b      	ldr	r3, [r3, #32]
 80083e6:	6a3a      	ldr	r2, [r7, #32]
 80083e8:	69d2      	ldr	r2, [r2, #28]
 80083ea:	605a      	str	r2, [r3, #4]
 80083ec:	69fb      	ldr	r3, [r7, #28]
 80083ee:	685a      	ldr	r2, [r3, #4]
 80083f0:	6a3b      	ldr	r3, [r7, #32]
 80083f2:	3318      	adds	r3, #24
 80083f4:	429a      	cmp	r2, r3
 80083f6:	d103      	bne.n	8008400 <xTaskRemoveFromEventList+0x5c>
 80083f8:	6a3b      	ldr	r3, [r7, #32]
 80083fa:	6a1a      	ldr	r2, [r3, #32]
 80083fc:	69fb      	ldr	r3, [r7, #28]
 80083fe:	605a      	str	r2, [r3, #4]
 8008400:	6a3b      	ldr	r3, [r7, #32]
 8008402:	2200      	movs	r2, #0
 8008404:	629a      	str	r2, [r3, #40]	@ 0x28
 8008406:	69fb      	ldr	r3, [r7, #28]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	1e5a      	subs	r2, r3, #1
 800840c:	69fb      	ldr	r3, [r7, #28]
 800840e:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008410:	4b4b      	ldr	r3, [pc, #300]	@ (8008540 <xTaskRemoveFromEventList+0x19c>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d162      	bne.n	80084de <xTaskRemoveFromEventList+0x13a>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8008418:	6a3b      	ldr	r3, [r7, #32]
 800841a:	695b      	ldr	r3, [r3, #20]
 800841c:	617b      	str	r3, [r7, #20]
 800841e:	6a3b      	ldr	r3, [r7, #32]
 8008420:	689b      	ldr	r3, [r3, #8]
 8008422:	6a3a      	ldr	r2, [r7, #32]
 8008424:	68d2      	ldr	r2, [r2, #12]
 8008426:	609a      	str	r2, [r3, #8]
 8008428:	6a3b      	ldr	r3, [r7, #32]
 800842a:	68db      	ldr	r3, [r3, #12]
 800842c:	6a3a      	ldr	r2, [r7, #32]
 800842e:	6892      	ldr	r2, [r2, #8]
 8008430:	605a      	str	r2, [r3, #4]
 8008432:	697b      	ldr	r3, [r7, #20]
 8008434:	685a      	ldr	r2, [r3, #4]
 8008436:	6a3b      	ldr	r3, [r7, #32]
 8008438:	3304      	adds	r3, #4
 800843a:	429a      	cmp	r2, r3
 800843c:	d103      	bne.n	8008446 <xTaskRemoveFromEventList+0xa2>
 800843e:	6a3b      	ldr	r3, [r7, #32]
 8008440:	68da      	ldr	r2, [r3, #12]
 8008442:	697b      	ldr	r3, [r7, #20]
 8008444:	605a      	str	r2, [r3, #4]
 8008446:	6a3b      	ldr	r3, [r7, #32]
 8008448:	2200      	movs	r2, #0
 800844a:	615a      	str	r2, [r3, #20]
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	1e5a      	subs	r2, r3, #1
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8008456:	6a3b      	ldr	r3, [r7, #32]
 8008458:	4618      	mov	r0, r3
 800845a:	f002 fc69 	bl	800ad30 <SEGGER_SYSVIEW_OnTaskStartReady>
 800845e:	6a3b      	ldr	r3, [r7, #32]
 8008460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008462:	2201      	movs	r2, #1
 8008464:	409a      	lsls	r2, r3
 8008466:	4b37      	ldr	r3, [pc, #220]	@ (8008544 <xTaskRemoveFromEventList+0x1a0>)
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4313      	orrs	r3, r2
 800846c:	4a35      	ldr	r2, [pc, #212]	@ (8008544 <xTaskRemoveFromEventList+0x1a0>)
 800846e:	6013      	str	r3, [r2, #0]
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008474:	4934      	ldr	r1, [pc, #208]	@ (8008548 <xTaskRemoveFromEventList+0x1a4>)
 8008476:	4613      	mov	r3, r2
 8008478:	009b      	lsls	r3, r3, #2
 800847a:	4413      	add	r3, r2
 800847c:	009b      	lsls	r3, r3, #2
 800847e:	440b      	add	r3, r1
 8008480:	3304      	adds	r3, #4
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	613b      	str	r3, [r7, #16]
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	693a      	ldr	r2, [r7, #16]
 800848a:	609a      	str	r2, [r3, #8]
 800848c:	693b      	ldr	r3, [r7, #16]
 800848e:	689a      	ldr	r2, [r3, #8]
 8008490:	6a3b      	ldr	r3, [r7, #32]
 8008492:	60da      	str	r2, [r3, #12]
 8008494:	693b      	ldr	r3, [r7, #16]
 8008496:	689b      	ldr	r3, [r3, #8]
 8008498:	6a3a      	ldr	r2, [r7, #32]
 800849a:	3204      	adds	r2, #4
 800849c:	605a      	str	r2, [r3, #4]
 800849e:	6a3b      	ldr	r3, [r7, #32]
 80084a0:	1d1a      	adds	r2, r3, #4
 80084a2:	693b      	ldr	r3, [r7, #16]
 80084a4:	609a      	str	r2, [r3, #8]
 80084a6:	6a3b      	ldr	r3, [r7, #32]
 80084a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084aa:	4613      	mov	r3, r2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	4413      	add	r3, r2
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4a25      	ldr	r2, [pc, #148]	@ (8008548 <xTaskRemoveFromEventList+0x1a4>)
 80084b4:	441a      	add	r2, r3
 80084b6:	6a3b      	ldr	r3, [r7, #32]
 80084b8:	615a      	str	r2, [r3, #20]
 80084ba:	6a3b      	ldr	r3, [r7, #32]
 80084bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084be:	4922      	ldr	r1, [pc, #136]	@ (8008548 <xTaskRemoveFromEventList+0x1a4>)
 80084c0:	4613      	mov	r3, r2
 80084c2:	009b      	lsls	r3, r3, #2
 80084c4:	4413      	add	r3, r2
 80084c6:	009b      	lsls	r3, r3, #2
 80084c8:	440b      	add	r3, r1
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	1c59      	adds	r1, r3, #1
 80084ce:	481e      	ldr	r0, [pc, #120]	@ (8008548 <xTaskRemoveFromEventList+0x1a4>)
 80084d0:	4613      	mov	r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	4413      	add	r3, r2
 80084d6:	009b      	lsls	r3, r3, #2
 80084d8:	4403      	add	r3, r0
 80084da:	6019      	str	r1, [r3, #0]
 80084dc:	e01b      	b.n	8008516 <xTaskRemoveFromEventList+0x172>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80084de:	4b1b      	ldr	r3, [pc, #108]	@ (800854c <xTaskRemoveFromEventList+0x1a8>)
 80084e0:	685b      	ldr	r3, [r3, #4]
 80084e2:	61bb      	str	r3, [r7, #24]
 80084e4:	6a3b      	ldr	r3, [r7, #32]
 80084e6:	69ba      	ldr	r2, [r7, #24]
 80084e8:	61da      	str	r2, [r3, #28]
 80084ea:	69bb      	ldr	r3, [r7, #24]
 80084ec:	689a      	ldr	r2, [r3, #8]
 80084ee:	6a3b      	ldr	r3, [r7, #32]
 80084f0:	621a      	str	r2, [r3, #32]
 80084f2:	69bb      	ldr	r3, [r7, #24]
 80084f4:	689b      	ldr	r3, [r3, #8]
 80084f6:	6a3a      	ldr	r2, [r7, #32]
 80084f8:	3218      	adds	r2, #24
 80084fa:	605a      	str	r2, [r3, #4]
 80084fc:	6a3b      	ldr	r3, [r7, #32]
 80084fe:	f103 0218 	add.w	r2, r3, #24
 8008502:	69bb      	ldr	r3, [r7, #24]
 8008504:	609a      	str	r2, [r3, #8]
 8008506:	6a3b      	ldr	r3, [r7, #32]
 8008508:	4a10      	ldr	r2, [pc, #64]	@ (800854c <xTaskRemoveFromEventList+0x1a8>)
 800850a:	629a      	str	r2, [r3, #40]	@ 0x28
 800850c:	4b0f      	ldr	r3, [pc, #60]	@ (800854c <xTaskRemoveFromEventList+0x1a8>)
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	3301      	adds	r3, #1
 8008512:	4a0e      	ldr	r2, [pc, #56]	@ (800854c <xTaskRemoveFromEventList+0x1a8>)
 8008514:	6013      	str	r3, [r2, #0]
    }

    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008516:	6a3b      	ldr	r3, [r7, #32]
 8008518:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800851a:	4b0d      	ldr	r3, [pc, #52]	@ (8008550 <xTaskRemoveFromEventList+0x1ac>)
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008520:	429a      	cmp	r2, r3
 8008522:	d905      	bls.n	8008530 <xTaskRemoveFromEventList+0x18c>
    {
        /* Return true if the task removed from the event list has a higher
         * priority than the calling task.  This allows the calling task to know if
         * it should force a context switch now. */
        xReturn = pdTRUE;
 8008524:	2301      	movs	r3, #1
 8008526:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Mark that a yield is pending in case the user is not using the
         * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
        xYieldPending = pdTRUE;
 8008528:	4b0a      	ldr	r3, [pc, #40]	@ (8008554 <xTaskRemoveFromEventList+0x1b0>)
 800852a:	2201      	movs	r2, #1
 800852c:	601a      	str	r2, [r3, #0]
 800852e:	e001      	b.n	8008534 <xTaskRemoveFromEventList+0x190>
    }
    else
    {
        xReturn = pdFALSE;
 8008530:	2300      	movs	r3, #0
 8008532:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return xReturn;
 8008534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8008536:	4618      	mov	r0, r3
 8008538:	3728      	adds	r7, #40	@ 0x28
 800853a:	46bd      	mov	sp, r7
 800853c:	bd80      	pop	{r7, pc}
 800853e:	bf00      	nop
 8008540:	20000534 	.word	0x20000534
 8008544:	20000514 	.word	0x20000514
 8008548:	20000438 	.word	0x20000438
 800854c:	200004cc 	.word	0x200004cc
 8008550:	20000434 	.word	0x20000434
 8008554:	20000520 	.word	0x20000520

08008558 <vTaskInternalSetTimeOutState>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008560:	4b06      	ldr	r3, [pc, #24]	@ (800857c <vTaskInternalSetTimeOutState+0x24>)
 8008562:	681a      	ldr	r2, [r3, #0]
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8008568:	4b05      	ldr	r3, [pc, #20]	@ (8008580 <vTaskInternalSetTimeOutState+0x28>)
 800856a:	681a      	ldr	r2, [r3, #0]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	605a      	str	r2, [r3, #4]
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	20000524 	.word	0x20000524
 8008580:	20000510 	.word	0x20000510

08008584 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8008584:	b580      	push	{r7, lr}
 8008586:	b088      	sub	sp, #32
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
 800858c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    configASSERT( pxTimeOut );
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10b      	bne.n	80085ac <xTaskCheckForTimeOut+0x28>
        __asm volatile
 8008594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008598:	f383 8811 	msr	BASEPRI, r3
 800859c:	f3bf 8f6f 	isb	sy
 80085a0:	f3bf 8f4f 	dsb	sy
 80085a4:	613b      	str	r3, [r7, #16]
    }
 80085a6:	bf00      	nop
 80085a8:	bf00      	nop
 80085aa:	e7fd      	b.n	80085a8 <xTaskCheckForTimeOut+0x24>
    configASSERT( pxTicksToWait );
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d10b      	bne.n	80085ca <xTaskCheckForTimeOut+0x46>
        __asm volatile
 80085b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085b6:	f383 8811 	msr	BASEPRI, r3
 80085ba:	f3bf 8f6f 	isb	sy
 80085be:	f3bf 8f4f 	dsb	sy
 80085c2:	60fb      	str	r3, [r7, #12]
    }
 80085c4:	bf00      	nop
 80085c6:	bf00      	nop
 80085c8:	e7fd      	b.n	80085c6 <xTaskCheckForTimeOut+0x42>

    taskENTER_CRITICAL();
 80085ca:	f000 fcd7 	bl	8008f7c <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 80085ce:	4b1f      	ldr	r3, [pc, #124]	@ (800864c <xTaskCheckForTimeOut+0xc8>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	61bb      	str	r3, [r7, #24]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	685b      	ldr	r3, [r3, #4]
 80085d8:	69ba      	ldr	r2, [r7, #24]
 80085da:	1ad3      	subs	r3, r2, r3
 80085dc:	617b      	str	r3, [r7, #20]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085e6:	d102      	bne.n	80085ee <xTaskCheckForTimeOut+0x6a>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 80085e8:	2300      	movs	r3, #0
 80085ea:	61fb      	str	r3, [r7, #28]
 80085ec:	e026      	b.n	800863c <xTaskCheckForTimeOut+0xb8>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681a      	ldr	r2, [r3, #0]
 80085f2:	4b17      	ldr	r3, [pc, #92]	@ (8008650 <xTaskCheckForTimeOut+0xcc>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d00a      	beq.n	8008610 <xTaskCheckForTimeOut+0x8c>
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	685b      	ldr	r3, [r3, #4]
 80085fe:	69ba      	ldr	r2, [r7, #24]
 8008600:	429a      	cmp	r2, r3
 8008602:	d305      	bcc.n	8008610 <xTaskCheckForTimeOut+0x8c>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 8008604:	2301      	movs	r3, #1
 8008606:	61fb      	str	r3, [r7, #28]
            *pxTicksToWait = ( TickType_t ) 0;
 8008608:	683b      	ldr	r3, [r7, #0]
 800860a:	2200      	movs	r2, #0
 800860c:	601a      	str	r2, [r3, #0]
 800860e:	e015      	b.n	800863c <xTaskCheckForTimeOut+0xb8>
        }
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	697a      	ldr	r2, [r7, #20]
 8008616:	429a      	cmp	r2, r3
 8008618:	d20b      	bcs.n	8008632 <xTaskCheckForTimeOut+0xae>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 800861a:	683b      	ldr	r3, [r7, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	697b      	ldr	r3, [r7, #20]
 8008620:	1ad2      	subs	r2, r2, r3
 8008622:	683b      	ldr	r3, [r7, #0]
 8008624:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f7ff ff96 	bl	8008558 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 800862c:	2300      	movs	r3, #0
 800862e:	61fb      	str	r3, [r7, #28]
 8008630:	e004      	b.n	800863c <xTaskCheckForTimeOut+0xb8>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 8008632:	683b      	ldr	r3, [r7, #0]
 8008634:	2200      	movs	r2, #0
 8008636:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 8008638:	2301      	movs	r3, #1
 800863a:	61fb      	str	r3, [r7, #28]
        }
    }
    taskEXIT_CRITICAL();
 800863c:	f000 fcd0 	bl	8008fe0 <vPortExitCritical>

    return xReturn;
 8008640:	69fb      	ldr	r3, [r7, #28]
}
 8008642:	4618      	mov	r0, r3
 8008644:	3720      	adds	r7, #32
 8008646:	46bd      	mov	sp, r7
 8008648:	bd80      	pop	{r7, pc}
 800864a:	bf00      	nop
 800864c:	20000510 	.word	0x20000510
 8008650:	20000524 	.word	0x20000524

08008654 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8008654:	b480      	push	{r7}
 8008656:	af00      	add	r7, sp, #0
    xYieldPending = pdTRUE;
 8008658:	4b03      	ldr	r3, [pc, #12]	@ (8008668 <vTaskMissedYield+0x14>)
 800865a:	2201      	movs	r2, #1
 800865c:	601a      	str	r2, [r3, #0]
}
 800865e:	bf00      	nop
 8008660:	46bd      	mov	sp, r7
 8008662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008666:	4770      	bx	lr
 8008668:	20000520 	.word	0x20000520

0800866c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800866c:	b580      	push	{r7, lr}
 800866e:	b082      	sub	sp, #8
 8008670:	af00      	add	r7, sp, #0
 8008672:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8008674:	f000 f852 	bl	800871c <prvCheckTasksWaitingTermination>
             *
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains more than one task
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008678:	4b06      	ldr	r3, [pc, #24]	@ (8008694 <prvIdleTask+0x28>)
 800867a:	681b      	ldr	r3, [r3, #0]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d9f9      	bls.n	8008674 <prvIdleTask+0x8>
            {
                taskYIELD();
 8008680:	4b05      	ldr	r3, [pc, #20]	@ (8008698 <prvIdleTask+0x2c>)
 8008682:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008686:	601a      	str	r2, [r3, #0]
 8008688:	f3bf 8f4f 	dsb	sy
 800868c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8008690:	e7f0      	b.n	8008674 <prvIdleTask+0x8>
 8008692:	bf00      	nop
 8008694:	20000438 	.word	0x20000438
 8008698:	e000ed04 	.word	0xe000ed04

0800869c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800869c:	b580      	push	{r7, lr}
 800869e:	b082      	sub	sp, #8
 80086a0:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086a2:	2300      	movs	r3, #0
 80086a4:	607b      	str	r3, [r7, #4]
 80086a6:	e00c      	b.n	80086c2 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	4613      	mov	r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4413      	add	r3, r2
 80086b0:	009b      	lsls	r3, r3, #2
 80086b2:	4a12      	ldr	r2, [pc, #72]	@ (80086fc <prvInitialiseTaskLists+0x60>)
 80086b4:	4413      	add	r3, r2
 80086b6:	4618      	mov	r0, r3
 80086b8:	f7fe fcf2 	bl	80070a0 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	3301      	adds	r3, #1
 80086c0:	607b      	str	r3, [r7, #4]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2b04      	cmp	r3, #4
 80086c6:	d9ef      	bls.n	80086a8 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 80086c8:	480d      	ldr	r0, [pc, #52]	@ (8008700 <prvInitialiseTaskLists+0x64>)
 80086ca:	f7fe fce9 	bl	80070a0 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 80086ce:	480d      	ldr	r0, [pc, #52]	@ (8008704 <prvInitialiseTaskLists+0x68>)
 80086d0:	f7fe fce6 	bl	80070a0 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 80086d4:	480c      	ldr	r0, [pc, #48]	@ (8008708 <prvInitialiseTaskLists+0x6c>)
 80086d6:	f7fe fce3 	bl	80070a0 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 80086da:	480c      	ldr	r0, [pc, #48]	@ (800870c <prvInitialiseTaskLists+0x70>)
 80086dc:	f7fe fce0 	bl	80070a0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 80086e0:	480b      	ldr	r0, [pc, #44]	@ (8008710 <prvInitialiseTaskLists+0x74>)
 80086e2:	f7fe fcdd 	bl	80070a0 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 80086e6:	4b0b      	ldr	r3, [pc, #44]	@ (8008714 <prvInitialiseTaskLists+0x78>)
 80086e8:	4a05      	ldr	r2, [pc, #20]	@ (8008700 <prvInitialiseTaskLists+0x64>)
 80086ea:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80086ec:	4b0a      	ldr	r3, [pc, #40]	@ (8008718 <prvInitialiseTaskLists+0x7c>)
 80086ee:	4a05      	ldr	r2, [pc, #20]	@ (8008704 <prvInitialiseTaskLists+0x68>)
 80086f0:	601a      	str	r2, [r3, #0]
}
 80086f2:	bf00      	nop
 80086f4:	3708      	adds	r7, #8
 80086f6:	46bd      	mov	sp, r7
 80086f8:	bd80      	pop	{r7, pc}
 80086fa:	bf00      	nop
 80086fc:	20000438 	.word	0x20000438
 8008700:	2000049c 	.word	0x2000049c
 8008704:	200004b0 	.word	0x200004b0
 8008708:	200004cc 	.word	0x200004cc
 800870c:	200004e0 	.word	0x200004e0
 8008710:	200004f8 	.word	0x200004f8
 8008714:	200004c4 	.word	0x200004c4
 8008718:	200004c8 	.word	0x200004c8

0800871c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800871c:	b580      	push	{r7, lr}
 800871e:	b082      	sub	sp, #8
 8008720:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008722:	e019      	b.n	8008758 <prvCheckTasksWaitingTermination+0x3c>
        {
            taskENTER_CRITICAL();
 8008724:	f000 fc2a 	bl	8008f7c <vPortEnterCritical>
            {
                pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008728:	4b10      	ldr	r3, [pc, #64]	@ (800876c <prvCheckTasksWaitingTermination+0x50>)
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	607b      	str	r3, [r7, #4]
                ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	3304      	adds	r3, #4
 8008734:	4618      	mov	r0, r3
 8008736:	f7fe fd19 	bl	800716c <uxListRemove>
                --uxCurrentNumberOfTasks;
 800873a:	4b0d      	ldr	r3, [pc, #52]	@ (8008770 <prvCheckTasksWaitingTermination+0x54>)
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	3b01      	subs	r3, #1
 8008740:	4a0b      	ldr	r2, [pc, #44]	@ (8008770 <prvCheckTasksWaitingTermination+0x54>)
 8008742:	6013      	str	r3, [r2, #0]
                --uxDeletedTasksWaitingCleanUp;
 8008744:	4b0b      	ldr	r3, [pc, #44]	@ (8008774 <prvCheckTasksWaitingTermination+0x58>)
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	3b01      	subs	r3, #1
 800874a:	4a0a      	ldr	r2, [pc, #40]	@ (8008774 <prvCheckTasksWaitingTermination+0x58>)
 800874c:	6013      	str	r3, [r2, #0]
            }
            taskEXIT_CRITICAL();
 800874e:	f000 fc47 	bl	8008fe0 <vPortExitCritical>

            prvDeleteTCB( pxTCB );
 8008752:	6878      	ldr	r0, [r7, #4]
 8008754:	f000 f810 	bl	8008778 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008758:	4b06      	ldr	r3, [pc, #24]	@ (8008774 <prvCheckTasksWaitingTermination+0x58>)
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2b00      	cmp	r3, #0
 800875e:	d1e1      	bne.n	8008724 <prvCheckTasksWaitingTermination+0x8>
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8008760:	bf00      	nop
 8008762:	bf00      	nop
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}
 800876a:	bf00      	nop
 800876c:	200004e0 	.word	0x200004e0
 8008770:	2000050c 	.word	0x2000050c
 8008774:	200004f4 	.word	0x200004f4

08008778 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008784:	4618      	mov	r0, r3
 8008786:	f000 fddf 	bl	8009348 <vPortFree>
            vPortFree( pxTCB );
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fddc 	bl	8009348 <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8008790:	bf00      	nop
 8008792:	3708      	adds	r7, #8
 8008794:	46bd      	mov	sp, r7
 8008796:	bd80      	pop	{r7, pc}

08008798 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008798:	b480      	push	{r7}
 800879a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800879c:	4b0a      	ldr	r3, [pc, #40]	@ (80087c8 <prvResetNextTaskUnblockTime+0x30>)
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d104      	bne.n	80087b0 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80087a6:	4b09      	ldr	r3, [pc, #36]	@ (80087cc <prvResetNextTaskUnblockTime+0x34>)
 80087a8:	f04f 32ff 	mov.w	r2, #4294967295
 80087ac:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80087ae:	e005      	b.n	80087bc <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80087b0:	4b05      	ldr	r3, [pc, #20]	@ (80087c8 <prvResetNextTaskUnblockTime+0x30>)
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68db      	ldr	r3, [r3, #12]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a04      	ldr	r2, [pc, #16]	@ (80087cc <prvResetNextTaskUnblockTime+0x34>)
 80087ba:	6013      	str	r3, [r2, #0]
}
 80087bc:	bf00      	nop
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr
 80087c6:	bf00      	nop
 80087c8:	200004c4 	.word	0x200004c4
 80087cc:	2000052c 	.word	0x2000052c

080087d0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b086      	sub	sp, #24
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80087dc:	2300      	movs	r3, #0
 80087de:	617b      	str	r3, [r7, #20]

        /* If the mutex was given back by an interrupt while the queue was
         * locked then the mutex holder might now be NULL.  _RB_ Is this still
         * needed as interrupts can no longer use mutexes? */
        if( pxMutexHolder != NULL )
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	2b00      	cmp	r3, #0
 80087e4:	f000 808b 	beq.w	80088fe <xTaskPriorityInherit+0x12e>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087ec:	4b46      	ldr	r3, [pc, #280]	@ (8008908 <xTaskPriorityInherit+0x138>)
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d27a      	bcs.n	80088ec <xTaskPriorityInherit+0x11c>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	699b      	ldr	r3, [r3, #24]
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	db06      	blt.n	800880c <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80087fe:	4b42      	ldr	r3, [pc, #264]	@ (8008908 <xTaskPriorityInherit+0x138>)
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008804:	f1c3 0205 	rsb	r2, r3, #5
 8008808:	693b      	ldr	r3, [r7, #16]
 800880a:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800880c:	693b      	ldr	r3, [r7, #16]
 800880e:	6959      	ldr	r1, [r3, #20]
 8008810:	693b      	ldr	r3, [r7, #16]
 8008812:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008814:	4613      	mov	r3, r2
 8008816:	009b      	lsls	r3, r3, #2
 8008818:	4413      	add	r3, r2
 800881a:	009b      	lsls	r3, r3, #2
 800881c:	4a3b      	ldr	r2, [pc, #236]	@ (800890c <xTaskPriorityInherit+0x13c>)
 800881e:	4413      	add	r3, r2
 8008820:	4299      	cmp	r1, r3
 8008822:	d15b      	bne.n	80088dc <xTaskPriorityInherit+0x10c>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008824:	693b      	ldr	r3, [r7, #16]
 8008826:	3304      	adds	r3, #4
 8008828:	4618      	mov	r0, r3
 800882a:	f7fe fc9f 	bl	800716c <uxListRemove>
 800882e:	4603      	mov	r3, r0
 8008830:	2b00      	cmp	r3, #0
 8008832:	d10a      	bne.n	800884a <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008838:	2201      	movs	r2, #1
 800883a:	fa02 f303 	lsl.w	r3, r2, r3
 800883e:	43da      	mvns	r2, r3
 8008840:	4b33      	ldr	r3, [pc, #204]	@ (8008910 <xTaskPriorityInherit+0x140>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4013      	ands	r3, r2
 8008846:	4a32      	ldr	r2, [pc, #200]	@ (8008910 <xTaskPriorityInherit+0x140>)
 8008848:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800884a:	4b2f      	ldr	r3, [pc, #188]	@ (8008908 <xTaskPriorityInherit+0x138>)
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008850:	693b      	ldr	r3, [r7, #16]
 8008852:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8008854:	693b      	ldr	r3, [r7, #16]
 8008856:	4618      	mov	r0, r3
 8008858:	f002 fa6a 	bl	800ad30 <SEGGER_SYSVIEW_OnTaskStartReady>
 800885c:	693b      	ldr	r3, [r7, #16]
 800885e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008860:	2201      	movs	r2, #1
 8008862:	409a      	lsls	r2, r3
 8008864:	4b2a      	ldr	r3, [pc, #168]	@ (8008910 <xTaskPriorityInherit+0x140>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4313      	orrs	r3, r2
 800886a:	4a29      	ldr	r2, [pc, #164]	@ (8008910 <xTaskPriorityInherit+0x140>)
 800886c:	6013      	str	r3, [r2, #0]
 800886e:	693b      	ldr	r3, [r7, #16]
 8008870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008872:	4926      	ldr	r1, [pc, #152]	@ (800890c <xTaskPriorityInherit+0x13c>)
 8008874:	4613      	mov	r3, r2
 8008876:	009b      	lsls	r3, r3, #2
 8008878:	4413      	add	r3, r2
 800887a:	009b      	lsls	r3, r3, #2
 800887c:	440b      	add	r3, r1
 800887e:	3304      	adds	r3, #4
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	60fb      	str	r3, [r7, #12]
 8008884:	693b      	ldr	r3, [r7, #16]
 8008886:	68fa      	ldr	r2, [r7, #12]
 8008888:	609a      	str	r2, [r3, #8]
 800888a:	68fb      	ldr	r3, [r7, #12]
 800888c:	689a      	ldr	r2, [r3, #8]
 800888e:	693b      	ldr	r3, [r7, #16]
 8008890:	60da      	str	r2, [r3, #12]
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	689b      	ldr	r3, [r3, #8]
 8008896:	693a      	ldr	r2, [r7, #16]
 8008898:	3204      	adds	r2, #4
 800889a:	605a      	str	r2, [r3, #4]
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	1d1a      	adds	r2, r3, #4
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	609a      	str	r2, [r3, #8]
 80088a4:	693b      	ldr	r3, [r7, #16]
 80088a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088a8:	4613      	mov	r3, r2
 80088aa:	009b      	lsls	r3, r3, #2
 80088ac:	4413      	add	r3, r2
 80088ae:	009b      	lsls	r3, r3, #2
 80088b0:	4a16      	ldr	r2, [pc, #88]	@ (800890c <xTaskPriorityInherit+0x13c>)
 80088b2:	441a      	add	r2, r3
 80088b4:	693b      	ldr	r3, [r7, #16]
 80088b6:	615a      	str	r2, [r3, #20]
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088bc:	4913      	ldr	r1, [pc, #76]	@ (800890c <xTaskPriorityInherit+0x13c>)
 80088be:	4613      	mov	r3, r2
 80088c0:	009b      	lsls	r3, r3, #2
 80088c2:	4413      	add	r3, r2
 80088c4:	009b      	lsls	r3, r3, #2
 80088c6:	440b      	add	r3, r1
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	1c59      	adds	r1, r3, #1
 80088cc:	480f      	ldr	r0, [pc, #60]	@ (800890c <xTaskPriorityInherit+0x13c>)
 80088ce:	4613      	mov	r3, r2
 80088d0:	009b      	lsls	r3, r3, #2
 80088d2:	4413      	add	r3, r2
 80088d4:	009b      	lsls	r3, r3, #2
 80088d6:	4403      	add	r3, r0
 80088d8:	6019      	str	r1, [r3, #0]
 80088da:	e004      	b.n	80088e6 <xTaskPriorityInherit+0x116>
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80088dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008908 <xTaskPriorityInherit+0x138>)
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80088e2:	693b      	ldr	r3, [r7, #16]
 80088e4:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80088e6:	2301      	movs	r3, #1
 80088e8:	617b      	str	r3, [r7, #20]
 80088ea:	e008      	b.n	80088fe <xTaskPriorityInherit+0x12e>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80088ec:	693b      	ldr	r3, [r7, #16]
 80088ee:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80088f0:	4b05      	ldr	r3, [pc, #20]	@ (8008908 <xTaskPriorityInherit+0x138>)
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80088f6:	429a      	cmp	r2, r3
 80088f8:	d201      	bcs.n	80088fe <xTaskPriorityInherit+0x12e>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80088fa:	2301      	movs	r3, #1
 80088fc:	617b      	str	r3, [r7, #20]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 80088fe:	697b      	ldr	r3, [r7, #20]
    }
 8008900:	4618      	mov	r0, r3
 8008902:	3718      	adds	r7, #24
 8008904:	46bd      	mov	sp, r7
 8008906:	bd80      	pop	{r7, pc}
 8008908:	20000434 	.word	0x20000434
 800890c:	20000438 	.word	0x20000438
 8008910:	20000514 	.word	0x20000514

08008914 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 8008914:	b580      	push	{r7, lr}
 8008916:	b088      	sub	sp, #32
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	61bb      	str	r3, [r7, #24]
        BaseType_t xReturn = pdFALSE;
 8008920:	2300      	movs	r3, #0
 8008922:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	2b00      	cmp	r3, #0
 8008928:	f000 8092 	beq.w	8008a50 <xTaskPriorityDisinherit+0x13c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 800892c:	4b4b      	ldr	r3, [pc, #300]	@ (8008a5c <xTaskPriorityDisinherit+0x148>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	69ba      	ldr	r2, [r7, #24]
 8008932:	429a      	cmp	r2, r3
 8008934:	d00b      	beq.n	800894e <xTaskPriorityDisinherit+0x3a>
        __asm volatile
 8008936:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800893a:	f383 8811 	msr	BASEPRI, r3
 800893e:	f3bf 8f6f 	isb	sy
 8008942:	f3bf 8f4f 	dsb	sy
 8008946:	613b      	str	r3, [r7, #16]
    }
 8008948:	bf00      	nop
 800894a:	bf00      	nop
 800894c:	e7fd      	b.n	800894a <xTaskPriorityDisinherit+0x36>
            configASSERT( pxTCB->uxMutexesHeld );
 800894e:	69bb      	ldr	r3, [r7, #24]
 8008950:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008952:	2b00      	cmp	r3, #0
 8008954:	d10b      	bne.n	800896e <xTaskPriorityDisinherit+0x5a>
        __asm volatile
 8008956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800895a:	f383 8811 	msr	BASEPRI, r3
 800895e:	f3bf 8f6f 	isb	sy
 8008962:	f3bf 8f4f 	dsb	sy
 8008966:	60fb      	str	r3, [r7, #12]
    }
 8008968:	bf00      	nop
 800896a:	bf00      	nop
 800896c:	e7fd      	b.n	800896a <xTaskPriorityDisinherit+0x56>
            ( pxTCB->uxMutexesHeld )--;
 800896e:	69bb      	ldr	r3, [r7, #24]
 8008970:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008972:	1e5a      	subs	r2, r3, #1
 8008974:	69bb      	ldr	r3, [r7, #24]
 8008976:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8008978:	69bb      	ldr	r3, [r7, #24]
 800897a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800897c:	69bb      	ldr	r3, [r7, #24]
 800897e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008980:	429a      	cmp	r2, r3
 8008982:	d065      	beq.n	8008a50 <xTaskPriorityDisinherit+0x13c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8008984:	69bb      	ldr	r3, [r7, #24]
 8008986:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008988:	2b00      	cmp	r3, #0
 800898a:	d161      	bne.n	8008a50 <xTaskPriorityDisinherit+0x13c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800898c:	69bb      	ldr	r3, [r7, #24]
 800898e:	3304      	adds	r3, #4
 8008990:	4618      	mov	r0, r3
 8008992:	f7fe fbeb 	bl	800716c <uxListRemove>
 8008996:	4603      	mov	r3, r0
 8008998:	2b00      	cmp	r3, #0
 800899a:	d10a      	bne.n	80089b2 <xTaskPriorityDisinherit+0x9e>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 800899c:	69bb      	ldr	r3, [r7, #24]
 800899e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089a0:	2201      	movs	r2, #1
 80089a2:	fa02 f303 	lsl.w	r3, r2, r3
 80089a6:	43da      	mvns	r2, r3
 80089a8:	4b2d      	ldr	r3, [pc, #180]	@ (8008a60 <xTaskPriorityDisinherit+0x14c>)
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4013      	ands	r3, r2
 80089ae:	4a2c      	ldr	r2, [pc, #176]	@ (8008a60 <xTaskPriorityDisinherit+0x14c>)
 80089b0:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 80089b2:	69bb      	ldr	r3, [r7, #24]
 80089b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80089b6:	69bb      	ldr	r3, [r7, #24]
 80089b8:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80089ba:	69bb      	ldr	r3, [r7, #24]
 80089bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089be:	f1c3 0205 	rsb	r2, r3, #5
 80089c2:	69bb      	ldr	r3, [r7, #24]
 80089c4:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80089c6:	69bb      	ldr	r3, [r7, #24]
 80089c8:	4618      	mov	r0, r3
 80089ca:	f002 f9b1 	bl	800ad30 <SEGGER_SYSVIEW_OnTaskStartReady>
 80089ce:	69bb      	ldr	r3, [r7, #24]
 80089d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089d2:	2201      	movs	r2, #1
 80089d4:	409a      	lsls	r2, r3
 80089d6:	4b22      	ldr	r3, [pc, #136]	@ (8008a60 <xTaskPriorityDisinherit+0x14c>)
 80089d8:	681b      	ldr	r3, [r3, #0]
 80089da:	4313      	orrs	r3, r2
 80089dc:	4a20      	ldr	r2, [pc, #128]	@ (8008a60 <xTaskPriorityDisinherit+0x14c>)
 80089de:	6013      	str	r3, [r2, #0]
 80089e0:	69bb      	ldr	r3, [r7, #24]
 80089e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80089e4:	491f      	ldr	r1, [pc, #124]	@ (8008a64 <xTaskPriorityDisinherit+0x150>)
 80089e6:	4613      	mov	r3, r2
 80089e8:	009b      	lsls	r3, r3, #2
 80089ea:	4413      	add	r3, r2
 80089ec:	009b      	lsls	r3, r3, #2
 80089ee:	440b      	add	r3, r1
 80089f0:	3304      	adds	r3, #4
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	617b      	str	r3, [r7, #20]
 80089f6:	69bb      	ldr	r3, [r7, #24]
 80089f8:	697a      	ldr	r2, [r7, #20]
 80089fa:	609a      	str	r2, [r3, #8]
 80089fc:	697b      	ldr	r3, [r7, #20]
 80089fe:	689a      	ldr	r2, [r3, #8]
 8008a00:	69bb      	ldr	r3, [r7, #24]
 8008a02:	60da      	str	r2, [r3, #12]
 8008a04:	697b      	ldr	r3, [r7, #20]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	69ba      	ldr	r2, [r7, #24]
 8008a0a:	3204      	adds	r2, #4
 8008a0c:	605a      	str	r2, [r3, #4]
 8008a0e:	69bb      	ldr	r3, [r7, #24]
 8008a10:	1d1a      	adds	r2, r3, #4
 8008a12:	697b      	ldr	r3, [r7, #20]
 8008a14:	609a      	str	r2, [r3, #8]
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a1a:	4613      	mov	r3, r2
 8008a1c:	009b      	lsls	r3, r3, #2
 8008a1e:	4413      	add	r3, r2
 8008a20:	009b      	lsls	r3, r3, #2
 8008a22:	4a10      	ldr	r2, [pc, #64]	@ (8008a64 <xTaskPriorityDisinherit+0x150>)
 8008a24:	441a      	add	r2, r3
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	615a      	str	r2, [r3, #20]
 8008a2a:	69bb      	ldr	r3, [r7, #24]
 8008a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008a2e:	490d      	ldr	r1, [pc, #52]	@ (8008a64 <xTaskPriorityDisinherit+0x150>)
 8008a30:	4613      	mov	r3, r2
 8008a32:	009b      	lsls	r3, r3, #2
 8008a34:	4413      	add	r3, r2
 8008a36:	009b      	lsls	r3, r3, #2
 8008a38:	440b      	add	r3, r1
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	1c59      	adds	r1, r3, #1
 8008a3e:	4809      	ldr	r0, [pc, #36]	@ (8008a64 <xTaskPriorityDisinherit+0x150>)
 8008a40:	4613      	mov	r3, r2
 8008a42:	009b      	lsls	r3, r3, #2
 8008a44:	4413      	add	r3, r2
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	4403      	add	r3, r0
 8008a4a:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8008a4c:	2301      	movs	r3, #1
 8008a4e:	61fb      	str	r3, [r7, #28]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        return xReturn;
 8008a50:	69fb      	ldr	r3, [r7, #28]
    }
 8008a52:	4618      	mov	r0, r3
 8008a54:	3720      	adds	r7, #32
 8008a56:	46bd      	mov	sp, r7
 8008a58:	bd80      	pop	{r7, pc}
 8008a5a:	bf00      	nop
 8008a5c:	20000434 	.word	0x20000434
 8008a60:	20000514 	.word	0x20000514
 8008a64:	20000438 	.word	0x20000438

08008a68 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8008a68:	b580      	push	{r7, lr}
 8008a6a:	b08a      	sub	sp, #40	@ 0x28
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	623b      	str	r3, [r7, #32]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8008a76:	2301      	movs	r3, #1
 8008a78:	61fb      	str	r3, [r7, #28]

        if( pxMutexHolder != NULL )
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	f000 80a8 	beq.w	8008bd2 <vTaskPriorityDisinheritAfterTimeout+0x16a>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 8008a82:	6a3b      	ldr	r3, [r7, #32]
 8008a84:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d10b      	bne.n	8008aa2 <vTaskPriorityDisinheritAfterTimeout+0x3a>
        __asm volatile
 8008a8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a8e:	f383 8811 	msr	BASEPRI, r3
 8008a92:	f3bf 8f6f 	isb	sy
 8008a96:	f3bf 8f4f 	dsb	sy
 8008a9a:	613b      	str	r3, [r7, #16]
    }
 8008a9c:	bf00      	nop
 8008a9e:	bf00      	nop
 8008aa0:	e7fd      	b.n	8008a9e <vTaskPriorityDisinheritAfterTimeout+0x36>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008aa2:	6a3b      	ldr	r3, [r7, #32]
 8008aa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008aa6:	683a      	ldr	r2, [r7, #0]
 8008aa8:	429a      	cmp	r2, r3
 8008aaa:	d902      	bls.n	8008ab2 <vTaskPriorityDisinheritAfterTimeout+0x4a>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008aac:	683b      	ldr	r3, [r7, #0]
 8008aae:	627b      	str	r3, [r7, #36]	@ 0x24
 8008ab0:	e002      	b.n	8008ab8 <vTaskPriorityDisinheritAfterTimeout+0x50>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8008ab2:	6a3b      	ldr	r3, [r7, #32]
 8008ab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008ab6:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8008ab8:	6a3b      	ldr	r3, [r7, #32]
 8008aba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008abc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008abe:	429a      	cmp	r2, r3
 8008ac0:	f000 8087 	beq.w	8008bd2 <vTaskPriorityDisinheritAfterTimeout+0x16a>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008ac4:	6a3b      	ldr	r3, [r7, #32]
 8008ac6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008ac8:	69fa      	ldr	r2, [r7, #28]
 8008aca:	429a      	cmp	r2, r3
 8008acc:	f040 8081 	bne.w	8008bd2 <vTaskPriorityDisinheritAfterTimeout+0x16a>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8008ad0:	4b42      	ldr	r3, [pc, #264]	@ (8008bdc <vTaskPriorityDisinheritAfterTimeout+0x174>)
 8008ad2:	681b      	ldr	r3, [r3, #0]
 8008ad4:	6a3a      	ldr	r2, [r7, #32]
 8008ad6:	429a      	cmp	r2, r3
 8008ad8:	d10b      	bne.n	8008af2 <vTaskPriorityDisinheritAfterTimeout+0x8a>
        __asm volatile
 8008ada:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ade:	f383 8811 	msr	BASEPRI, r3
 8008ae2:	f3bf 8f6f 	isb	sy
 8008ae6:	f3bf 8f4f 	dsb	sy
 8008aea:	60fb      	str	r3, [r7, #12]
    }
 8008aec:	bf00      	nop
 8008aee:	bf00      	nop
 8008af0:	e7fd      	b.n	8008aee <vTaskPriorityDisinheritAfterTimeout+0x86>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8008af2:	6a3b      	ldr	r3, [r7, #32]
 8008af4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008af6:	61bb      	str	r3, [r7, #24]
                    pxTCB->uxPriority = uxPriorityToUse;
 8008af8:	6a3b      	ldr	r3, [r7, #32]
 8008afa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008afc:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8008afe:	6a3b      	ldr	r3, [r7, #32]
 8008b00:	699b      	ldr	r3, [r3, #24]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	db04      	blt.n	8008b10 <vTaskPriorityDisinheritAfterTimeout+0xa8>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008b06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b08:	f1c3 0205 	rsb	r2, r3, #5
 8008b0c:	6a3b      	ldr	r3, [r7, #32]
 8008b0e:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8008b10:	6a3b      	ldr	r3, [r7, #32]
 8008b12:	6959      	ldr	r1, [r3, #20]
 8008b14:	69ba      	ldr	r2, [r7, #24]
 8008b16:	4613      	mov	r3, r2
 8008b18:	009b      	lsls	r3, r3, #2
 8008b1a:	4413      	add	r3, r2
 8008b1c:	009b      	lsls	r3, r3, #2
 8008b1e:	4a30      	ldr	r2, [pc, #192]	@ (8008be0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8008b20:	4413      	add	r3, r2
 8008b22:	4299      	cmp	r1, r3
 8008b24:	d155      	bne.n	8008bd2 <vTaskPriorityDisinheritAfterTimeout+0x16a>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008b26:	6a3b      	ldr	r3, [r7, #32]
 8008b28:	3304      	adds	r3, #4
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	f7fe fb1e 	bl	800716c <uxListRemove>
 8008b30:	4603      	mov	r3, r0
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d10a      	bne.n	8008b4c <vTaskPriorityDisinheritAfterTimeout+0xe4>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8008b36:	6a3b      	ldr	r3, [r7, #32]
 8008b38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b3a:	2201      	movs	r2, #1
 8008b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008b40:	43da      	mvns	r2, r3
 8008b42:	4b28      	ldr	r3, [pc, #160]	@ (8008be4 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4013      	ands	r3, r2
 8008b48:	4a26      	ldr	r2, [pc, #152]	@ (8008be4 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8008b4a:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8008b4c:	6a3b      	ldr	r3, [r7, #32]
 8008b4e:	4618      	mov	r0, r3
 8008b50:	f002 f8ee 	bl	800ad30 <SEGGER_SYSVIEW_OnTaskStartReady>
 8008b54:	6a3b      	ldr	r3, [r7, #32]
 8008b56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008b58:	2201      	movs	r2, #1
 8008b5a:	409a      	lsls	r2, r3
 8008b5c:	4b21      	ldr	r3, [pc, #132]	@ (8008be4 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	4313      	orrs	r3, r2
 8008b62:	4a20      	ldr	r2, [pc, #128]	@ (8008be4 <vTaskPriorityDisinheritAfterTimeout+0x17c>)
 8008b64:	6013      	str	r3, [r2, #0]
 8008b66:	6a3b      	ldr	r3, [r7, #32]
 8008b68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008b6a:	491d      	ldr	r1, [pc, #116]	@ (8008be0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8008b6c:	4613      	mov	r3, r2
 8008b6e:	009b      	lsls	r3, r3, #2
 8008b70:	4413      	add	r3, r2
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	440b      	add	r3, r1
 8008b76:	3304      	adds	r3, #4
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	617b      	str	r3, [r7, #20]
 8008b7c:	6a3b      	ldr	r3, [r7, #32]
 8008b7e:	697a      	ldr	r2, [r7, #20]
 8008b80:	609a      	str	r2, [r3, #8]
 8008b82:	697b      	ldr	r3, [r7, #20]
 8008b84:	689a      	ldr	r2, [r3, #8]
 8008b86:	6a3b      	ldr	r3, [r7, #32]
 8008b88:	60da      	str	r2, [r3, #12]
 8008b8a:	697b      	ldr	r3, [r7, #20]
 8008b8c:	689b      	ldr	r3, [r3, #8]
 8008b8e:	6a3a      	ldr	r2, [r7, #32]
 8008b90:	3204      	adds	r2, #4
 8008b92:	605a      	str	r2, [r3, #4]
 8008b94:	6a3b      	ldr	r3, [r7, #32]
 8008b96:	1d1a      	adds	r2, r3, #4
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	609a      	str	r2, [r3, #8]
 8008b9c:	6a3b      	ldr	r3, [r7, #32]
 8008b9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008ba0:	4613      	mov	r3, r2
 8008ba2:	009b      	lsls	r3, r3, #2
 8008ba4:	4413      	add	r3, r2
 8008ba6:	009b      	lsls	r3, r3, #2
 8008ba8:	4a0d      	ldr	r2, [pc, #52]	@ (8008be0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8008baa:	441a      	add	r2, r3
 8008bac:	6a3b      	ldr	r3, [r7, #32]
 8008bae:	615a      	str	r2, [r3, #20]
 8008bb0:	6a3b      	ldr	r3, [r7, #32]
 8008bb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008bb4:	490a      	ldr	r1, [pc, #40]	@ (8008be0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8008bb6:	4613      	mov	r3, r2
 8008bb8:	009b      	lsls	r3, r3, #2
 8008bba:	4413      	add	r3, r2
 8008bbc:	009b      	lsls	r3, r3, #2
 8008bbe:	440b      	add	r3, r1
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	1c59      	adds	r1, r3, #1
 8008bc4:	4806      	ldr	r0, [pc, #24]	@ (8008be0 <vTaskPriorityDisinheritAfterTimeout+0x178>)
 8008bc6:	4613      	mov	r3, r2
 8008bc8:	009b      	lsls	r3, r3, #2
 8008bca:	4413      	add	r3, r2
 8008bcc:	009b      	lsls	r3, r3, #2
 8008bce:	4403      	add	r3, r0
 8008bd0:	6019      	str	r1, [r3, #0]
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 8008bd2:	bf00      	nop
 8008bd4:	3728      	adds	r7, #40	@ 0x28
 8008bd6:	46bd      	mov	sp, r7
 8008bd8:	bd80      	pop	{r7, pc}
 8008bda:	bf00      	nop
 8008bdc:	20000434 	.word	0x20000434
 8008be0:	20000438 	.word	0x20000438
 8008be4:	20000514 	.word	0x20000514

08008be8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8008be8:	b480      	push	{r7}
 8008bea:	af00      	add	r7, sp, #0
        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxCurrentTCB != NULL )
 8008bec:	4b07      	ldr	r3, [pc, #28]	@ (8008c0c <pvTaskIncrementMutexHeldCount+0x24>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d004      	beq.n	8008bfe <pvTaskIncrementMutexHeldCount+0x16>
        {
            ( pxCurrentTCB->uxMutexesHeld )++;
 8008bf4:	4b05      	ldr	r3, [pc, #20]	@ (8008c0c <pvTaskIncrementMutexHeldCount+0x24>)
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8008bfa:	3201      	adds	r2, #1
 8008bfc:	64da      	str	r2, [r3, #76]	@ 0x4c
        }

        return pxCurrentTCB;
 8008bfe:	4b03      	ldr	r3, [pc, #12]	@ (8008c0c <pvTaskIncrementMutexHeldCount+0x24>)
 8008c00:	681b      	ldr	r3, [r3, #0]
    }
 8008c02:	4618      	mov	r0, r3
 8008c04:	46bd      	mov	sp, r7
 8008c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0a:	4770      	bx	lr
 8008c0c:	20000434 	.word	0x20000434

08008c10 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b086      	sub	sp, #24
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8008c1a:	4b36      	ldr	r3, [pc, #216]	@ (8008cf4 <prvAddCurrentTaskToDelayedList+0xe4>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008c20:	4b35      	ldr	r3, [pc, #212]	@ (8008cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	3304      	adds	r3, #4
 8008c26:	4618      	mov	r0, r3
 8008c28:	f7fe faa0 	bl	800716c <uxListRemove>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d10b      	bne.n	8008c4a <prvAddCurrentTaskToDelayedList+0x3a>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008c32:	4b31      	ldr	r3, [pc, #196]	@ (8008cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c38:	2201      	movs	r2, #1
 8008c3a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c3e:	43da      	mvns	r2, r3
 8008c40:	4b2e      	ldr	r3, [pc, #184]	@ (8008cfc <prvAddCurrentTaskToDelayedList+0xec>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4013      	ands	r3, r2
 8008c46:	4a2d      	ldr	r2, [pc, #180]	@ (8008cfc <prvAddCurrentTaskToDelayedList+0xec>)
 8008c48:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c50:	d124      	bne.n	8008c9c <prvAddCurrentTaskToDelayedList+0x8c>
 8008c52:	683b      	ldr	r3, [r7, #0]
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d021      	beq.n	8008c9c <prvAddCurrentTaskToDelayedList+0x8c>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c58:	4b29      	ldr	r3, [pc, #164]	@ (8008d00 <prvAddCurrentTaskToDelayedList+0xf0>)
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	613b      	str	r3, [r7, #16]
 8008c5e:	4b26      	ldr	r3, [pc, #152]	@ (8008cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	693a      	ldr	r2, [r7, #16]
 8008c64:	609a      	str	r2, [r3, #8]
 8008c66:	4b24      	ldr	r3, [pc, #144]	@ (8008cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	693a      	ldr	r2, [r7, #16]
 8008c6c:	6892      	ldr	r2, [r2, #8]
 8008c6e:	60da      	str	r2, [r3, #12]
 8008c70:	4b21      	ldr	r3, [pc, #132]	@ (8008cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	689b      	ldr	r3, [r3, #8]
 8008c78:	3204      	adds	r2, #4
 8008c7a:	605a      	str	r2, [r3, #4]
 8008c7c:	4b1e      	ldr	r3, [pc, #120]	@ (8008cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	1d1a      	adds	r2, r3, #4
 8008c82:	693b      	ldr	r3, [r7, #16]
 8008c84:	609a      	str	r2, [r3, #8]
 8008c86:	4b1c      	ldr	r3, [pc, #112]	@ (8008cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8008d00 <prvAddCurrentTaskToDelayedList+0xf0>)
 8008c8c:	615a      	str	r2, [r3, #20]
 8008c8e:	4b1c      	ldr	r3, [pc, #112]	@ (8008d00 <prvAddCurrentTaskToDelayedList+0xf0>)
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	3301      	adds	r3, #1
 8008c94:	4a1a      	ldr	r2, [pc, #104]	@ (8008d00 <prvAddCurrentTaskToDelayedList+0xf0>)
 8008c96:	6013      	str	r3, [r2, #0]
 8008c98:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8008c9a:	e026      	b.n	8008cea <prvAddCurrentTaskToDelayedList+0xda>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8008c9c:	697a      	ldr	r2, [r7, #20]
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008ca4:	4b14      	ldr	r3, [pc, #80]	@ (8008cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	68fa      	ldr	r2, [r7, #12]
 8008caa:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8008cac:	68fa      	ldr	r2, [r7, #12]
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	429a      	cmp	r2, r3
 8008cb2:	d209      	bcs.n	8008cc8 <prvAddCurrentTaskToDelayedList+0xb8>
                vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cb4:	4b13      	ldr	r3, [pc, #76]	@ (8008d04 <prvAddCurrentTaskToDelayedList+0xf4>)
 8008cb6:	681a      	ldr	r2, [r3, #0]
 8008cb8:	4b0f      	ldr	r3, [pc, #60]	@ (8008cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	3304      	adds	r3, #4
 8008cbe:	4619      	mov	r1, r3
 8008cc0:	4610      	mov	r0, r2
 8008cc2:	f7fe fa1a 	bl	80070fa <vListInsert>
}
 8008cc6:	e010      	b.n	8008cea <prvAddCurrentTaskToDelayedList+0xda>
                vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8008d08 <prvAddCurrentTaskToDelayedList+0xf8>)
 8008cca:	681a      	ldr	r2, [r3, #0]
 8008ccc:	4b0a      	ldr	r3, [pc, #40]	@ (8008cf8 <prvAddCurrentTaskToDelayedList+0xe8>)
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	3304      	adds	r3, #4
 8008cd2:	4619      	mov	r1, r3
 8008cd4:	4610      	mov	r0, r2
 8008cd6:	f7fe fa10 	bl	80070fa <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8008cda:	4b0c      	ldr	r3, [pc, #48]	@ (8008d0c <prvAddCurrentTaskToDelayedList+0xfc>)
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68fa      	ldr	r2, [r7, #12]
 8008ce0:	429a      	cmp	r2, r3
 8008ce2:	d202      	bcs.n	8008cea <prvAddCurrentTaskToDelayedList+0xda>
                    xNextTaskUnblockTime = xTimeToWake;
 8008ce4:	4a09      	ldr	r2, [pc, #36]	@ (8008d0c <prvAddCurrentTaskToDelayedList+0xfc>)
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	6013      	str	r3, [r2, #0]
}
 8008cea:	bf00      	nop
 8008cec:	3718      	adds	r7, #24
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	bd80      	pop	{r7, pc}
 8008cf2:	bf00      	nop
 8008cf4:	20000510 	.word	0x20000510
 8008cf8:	20000434 	.word	0x20000434
 8008cfc:	20000514 	.word	0x20000514
 8008d00:	200004f8 	.word	0x200004f8
 8008d04:	200004c8 	.word	0x200004c8
 8008d08:	200004c4 	.word	0x200004c4
 8008d0c:	2000052c 	.word	0x2000052c

08008d10 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8008d10:	b480      	push	{r7}
 8008d12:	b085      	sub	sp, #20
 8008d14:	af00      	add	r7, sp, #0
 8008d16:	60f8      	str	r0, [r7, #12]
 8008d18:	60b9      	str	r1, [r7, #8]
 8008d1a:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	3b04      	subs	r3, #4
 8008d20:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008d28:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	3b04      	subs	r3, #4
 8008d2e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	f023 0201 	bic.w	r2, r3, #1
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	3b04      	subs	r3, #4
 8008d3e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8008d40:	4a0c      	ldr	r2, [pc, #48]	@ (8008d74 <pxPortInitialiseStack+0x64>)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	3b14      	subs	r3, #20
 8008d4a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8008d4c:	687a      	ldr	r2, [r7, #4]
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	3b04      	subs	r3, #4
 8008d56:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8008d58:	68fb      	ldr	r3, [r7, #12]
 8008d5a:	f06f 0202 	mvn.w	r2, #2
 8008d5e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	3b20      	subs	r3, #32
 8008d64:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8008d66:	68fb      	ldr	r3, [r7, #12]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	3714      	adds	r7, #20
 8008d6c:	46bd      	mov	sp, r7
 8008d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d72:	4770      	bx	lr
 8008d74:	08008d79 	.word	0x08008d79

08008d78 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b085      	sub	sp, #20
 8008d7c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8008d7e:	2300      	movs	r3, #0
 8008d80:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8008d82:	4b13      	ldr	r3, [pc, #76]	@ (8008dd0 <prvTaskExitError+0x58>)
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d8a:	d00b      	beq.n	8008da4 <prvTaskExitError+0x2c>
        __asm volatile
 8008d8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d90:	f383 8811 	msr	BASEPRI, r3
 8008d94:	f3bf 8f6f 	isb	sy
 8008d98:	f3bf 8f4f 	dsb	sy
 8008d9c:	60fb      	str	r3, [r7, #12]
    }
 8008d9e:	bf00      	nop
 8008da0:	bf00      	nop
 8008da2:	e7fd      	b.n	8008da0 <prvTaskExitError+0x28>
        __asm volatile
 8008da4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008da8:	f383 8811 	msr	BASEPRI, r3
 8008dac:	f3bf 8f6f 	isb	sy
 8008db0:	f3bf 8f4f 	dsb	sy
 8008db4:	60bb      	str	r3, [r7, #8]
    }
 8008db6:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8008db8:	bf00      	nop
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d0fc      	beq.n	8008dba <prvTaskExitError+0x42>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8008dc0:	bf00      	nop
 8008dc2:	bf00      	nop
 8008dc4:	3714      	adds	r7, #20
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dcc:	4770      	bx	lr
 8008dce:	bf00      	nop
 8008dd0:	20000010 	.word	0x20000010
	...

08008de0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8008de0:	4b07      	ldr	r3, [pc, #28]	@ (8008e00 <pxCurrentTCBConst2>)
 8008de2:	6819      	ldr	r1, [r3, #0]
 8008de4:	6808      	ldr	r0, [r1, #0]
 8008de6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008dea:	f380 8809 	msr	PSP, r0
 8008dee:	f3bf 8f6f 	isb	sy
 8008df2:	f04f 0000 	mov.w	r0, #0
 8008df6:	f380 8811 	msr	BASEPRI, r0
 8008dfa:	4770      	bx	lr
 8008dfc:	f3af 8000 	nop.w

08008e00 <pxCurrentTCBConst2>:
 8008e00:	20000434 	.word	0x20000434
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8008e04:	bf00      	nop
 8008e06:	bf00      	nop

08008e08 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8008e08:	4808      	ldr	r0, [pc, #32]	@ (8008e2c <prvPortStartFirstTask+0x24>)
 8008e0a:	6800      	ldr	r0, [r0, #0]
 8008e0c:	6800      	ldr	r0, [r0, #0]
 8008e0e:	f380 8808 	msr	MSP, r0
 8008e12:	f04f 0000 	mov.w	r0, #0
 8008e16:	f380 8814 	msr	CONTROL, r0
 8008e1a:	b662      	cpsie	i
 8008e1c:	b661      	cpsie	f
 8008e1e:	f3bf 8f4f 	dsb	sy
 8008e22:	f3bf 8f6f 	isb	sy
 8008e26:	df00      	svc	0
 8008e28:	bf00      	nop
 8008e2a:	0000      	.short	0x0000
 8008e2c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8008e30:	bf00      	nop
 8008e32:	bf00      	nop

08008e34 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008e34:	b580      	push	{r7, lr}
 8008e36:	b086      	sub	sp, #24
 8008e38:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008e3a:	4b47      	ldr	r3, [pc, #284]	@ (8008f58 <xPortStartScheduler+0x124>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	4a47      	ldr	r2, [pc, #284]	@ (8008f5c <xPortStartScheduler+0x128>)
 8008e40:	4293      	cmp	r3, r2
 8008e42:	d10b      	bne.n	8008e5c <xPortStartScheduler+0x28>
        __asm volatile
 8008e44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e48:	f383 8811 	msr	BASEPRI, r3
 8008e4c:	f3bf 8f6f 	isb	sy
 8008e50:	f3bf 8f4f 	dsb	sy
 8008e54:	613b      	str	r3, [r7, #16]
    }
 8008e56:	bf00      	nop
 8008e58:	bf00      	nop
 8008e5a:	e7fd      	b.n	8008e58 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008e5c:	4b3e      	ldr	r3, [pc, #248]	@ (8008f58 <xPortStartScheduler+0x124>)
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	4a3f      	ldr	r2, [pc, #252]	@ (8008f60 <xPortStartScheduler+0x12c>)
 8008e62:	4293      	cmp	r3, r2
 8008e64:	d10b      	bne.n	8008e7e <xPortStartScheduler+0x4a>
        __asm volatile
 8008e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	60fb      	str	r3, [r7, #12]
    }
 8008e78:	bf00      	nop
 8008e7a:	bf00      	nop
 8008e7c:	e7fd      	b.n	8008e7a <xPortStartScheduler+0x46>

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint32_t ulOriginalPriority;
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e7e:	4b39      	ldr	r3, [pc, #228]	@ (8008f64 <xPortStartScheduler+0x130>)
 8008e80:	617b      	str	r3, [r7, #20]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	781b      	ldrb	r3, [r3, #0]
 8008e86:	b2db      	uxtb	r3, r3
 8008e88:	607b      	str	r3, [r7, #4]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e8a:	697b      	ldr	r3, [r7, #20]
 8008e8c:	22ff      	movs	r2, #255	@ 0xff
 8008e8e:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e90:	697b      	ldr	r3, [r7, #20]
 8008e92:	781b      	ldrb	r3, [r3, #0]
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	70fb      	strb	r3, [r7, #3]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e98:	78fb      	ldrb	r3, [r7, #3]
 8008e9a:	b2db      	uxtb	r3, r3
 8008e9c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008ea0:	b2da      	uxtb	r2, r3
 8008ea2:	4b31      	ldr	r3, [pc, #196]	@ (8008f68 <xPortStartScheduler+0x134>)
 8008ea4:	701a      	strb	r2, [r3, #0]

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */
        ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008ea6:	4b31      	ldr	r3, [pc, #196]	@ (8008f6c <xPortStartScheduler+0x138>)
 8008ea8:	2207      	movs	r2, #7
 8008eaa:	601a      	str	r2, [r3, #0]

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008eac:	e009      	b.n	8008ec2 <xPortStartScheduler+0x8e>
        {
            ulMaxPRIGROUPValue--;
 8008eae:	4b2f      	ldr	r3, [pc, #188]	@ (8008f6c <xPortStartScheduler+0x138>)
 8008eb0:	681b      	ldr	r3, [r3, #0]
 8008eb2:	3b01      	subs	r3, #1
 8008eb4:	4a2d      	ldr	r2, [pc, #180]	@ (8008f6c <xPortStartScheduler+0x138>)
 8008eb6:	6013      	str	r3, [r2, #0]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008eb8:	78fb      	ldrb	r3, [r7, #3]
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	005b      	lsls	r3, r3, #1
 8008ebe:	b2db      	uxtb	r3, r3
 8008ec0:	70fb      	strb	r3, [r7, #3]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008ec2:	78fb      	ldrb	r3, [r7, #3]
 8008ec4:	b2db      	uxtb	r3, r3
 8008ec6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eca:	2b80      	cmp	r3, #128	@ 0x80
 8008ecc:	d0ef      	beq.n	8008eae <xPortStartScheduler+0x7a>
        #ifdef configPRIO_BITS
        {
            /* Check the FreeRTOS configuration that defines the number of
             * priority bits matches the number of priority bits actually queried
             * from the hardware. */
            configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008ece:	4b27      	ldr	r3, [pc, #156]	@ (8008f6c <xPortStartScheduler+0x138>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	f1c3 0307 	rsb	r3, r3, #7
 8008ed6:	2b04      	cmp	r3, #4
 8008ed8:	d00b      	beq.n	8008ef2 <xPortStartScheduler+0xbe>
        __asm volatile
 8008eda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ede:	f383 8811 	msr	BASEPRI, r3
 8008ee2:	f3bf 8f6f 	isb	sy
 8008ee6:	f3bf 8f4f 	dsb	sy
 8008eea:	60bb      	str	r3, [r7, #8]
    }
 8008eec:	bf00      	nop
 8008eee:	bf00      	nop
 8008ef0:	e7fd      	b.n	8008eee <xPortStartScheduler+0xba>
        }
        #endif

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ef2:	4b1e      	ldr	r3, [pc, #120]	@ (8008f6c <xPortStartScheduler+0x138>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	021b      	lsls	r3, r3, #8
 8008ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8008f6c <xPortStartScheduler+0x138>)
 8008efa:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008efc:	4b1b      	ldr	r3, [pc, #108]	@ (8008f6c <xPortStartScheduler+0x138>)
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008f04:	4a19      	ldr	r2, [pc, #100]	@ (8008f6c <xPortStartScheduler+0x138>)
 8008f06:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	b2da      	uxtb	r2, r3
 8008f0c:	697b      	ldr	r3, [r7, #20]
 8008f0e:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8008f10:	4b17      	ldr	r3, [pc, #92]	@ (8008f70 <xPortStartScheduler+0x13c>)
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	4a16      	ldr	r2, [pc, #88]	@ (8008f70 <xPortStartScheduler+0x13c>)
 8008f16:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008f1a:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8008f1c:	4b14      	ldr	r3, [pc, #80]	@ (8008f70 <xPortStartScheduler+0x13c>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	4a13      	ldr	r2, [pc, #76]	@ (8008f70 <xPortStartScheduler+0x13c>)
 8008f22:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008f26:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8008f28:	f000 f8e0 	bl	80090ec <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8008f2c:	4b11      	ldr	r3, [pc, #68]	@ (8008f74 <xPortStartScheduler+0x140>)
 8008f2e:	2200      	movs	r2, #0
 8008f30:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8008f32:	f000 f8ff 	bl	8009134 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008f36:	4b10      	ldr	r3, [pc, #64]	@ (8008f78 <xPortStartScheduler+0x144>)
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	4a0f      	ldr	r2, [pc, #60]	@ (8008f78 <xPortStartScheduler+0x144>)
 8008f3c:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008f40:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8008f42:	f7ff ff61 	bl	8008e08 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8008f46:	f7ff f99d 	bl	8008284 <vTaskSwitchContext>
    prvTaskExitError();
 8008f4a:	f7ff ff15 	bl	8008d78 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8008f4e:	2300      	movs	r3, #0
}
 8008f50:	4618      	mov	r0, r3
 8008f52:	3718      	adds	r7, #24
 8008f54:	46bd      	mov	sp, r7
 8008f56:	bd80      	pop	{r7, pc}
 8008f58:	e000ed00 	.word	0xe000ed00
 8008f5c:	410fc271 	.word	0x410fc271
 8008f60:	410fc270 	.word	0x410fc270
 8008f64:	e000e400 	.word	0xe000e400
 8008f68:	20000538 	.word	0x20000538
 8008f6c:	2000053c 	.word	0x2000053c
 8008f70:	e000ed20 	.word	0xe000ed20
 8008f74:	20000010 	.word	0x20000010
 8008f78:	e000ef34 	.word	0xe000ef34

08008f7c <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
        __asm volatile
 8008f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	607b      	str	r3, [r7, #4]
    }
 8008f94:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8008f96:	4b10      	ldr	r3, [pc, #64]	@ (8008fd8 <vPortEnterCritical+0x5c>)
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	3301      	adds	r3, #1
 8008f9c:	4a0e      	ldr	r2, [pc, #56]	@ (8008fd8 <vPortEnterCritical+0x5c>)
 8008f9e:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8008fa0:	4b0d      	ldr	r3, [pc, #52]	@ (8008fd8 <vPortEnterCritical+0x5c>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d110      	bne.n	8008fca <vPortEnterCritical+0x4e>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008fa8:	4b0c      	ldr	r3, [pc, #48]	@ (8008fdc <vPortEnterCritical+0x60>)
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	b2db      	uxtb	r3, r3
 8008fae:	2b00      	cmp	r3, #0
 8008fb0:	d00b      	beq.n	8008fca <vPortEnterCritical+0x4e>
        __asm volatile
 8008fb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fb6:	f383 8811 	msr	BASEPRI, r3
 8008fba:	f3bf 8f6f 	isb	sy
 8008fbe:	f3bf 8f4f 	dsb	sy
 8008fc2:	603b      	str	r3, [r7, #0]
    }
 8008fc4:	bf00      	nop
 8008fc6:	bf00      	nop
 8008fc8:	e7fd      	b.n	8008fc6 <vPortEnterCritical+0x4a>
    }
}
 8008fca:	bf00      	nop
 8008fcc:	370c      	adds	r7, #12
 8008fce:	46bd      	mov	sp, r7
 8008fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fd4:	4770      	bx	lr
 8008fd6:	bf00      	nop
 8008fd8:	20000010 	.word	0x20000010
 8008fdc:	e000ed04 	.word	0xe000ed04

08008fe0 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008fe0:	b480      	push	{r7}
 8008fe2:	b083      	sub	sp, #12
 8008fe4:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8008fe6:	4b12      	ldr	r3, [pc, #72]	@ (8009030 <vPortExitCritical+0x50>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d10b      	bne.n	8009006 <vPortExitCritical+0x26>
        __asm volatile
 8008fee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ff2:	f383 8811 	msr	BASEPRI, r3
 8008ff6:	f3bf 8f6f 	isb	sy
 8008ffa:	f3bf 8f4f 	dsb	sy
 8008ffe:	607b      	str	r3, [r7, #4]
    }
 8009000:	bf00      	nop
 8009002:	bf00      	nop
 8009004:	e7fd      	b.n	8009002 <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8009006:	4b0a      	ldr	r3, [pc, #40]	@ (8009030 <vPortExitCritical+0x50>)
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	3b01      	subs	r3, #1
 800900c:	4a08      	ldr	r2, [pc, #32]	@ (8009030 <vPortExitCritical+0x50>)
 800900e:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8009010:	4b07      	ldr	r3, [pc, #28]	@ (8009030 <vPortExitCritical+0x50>)
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d105      	bne.n	8009024 <vPortExitCritical+0x44>
 8009018:	2300      	movs	r3, #0
 800901a:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8009022:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8009024:	bf00      	nop
 8009026:	370c      	adds	r7, #12
 8009028:	46bd      	mov	sp, r7
 800902a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902e:	4770      	bx	lr
 8009030:	20000010 	.word	0x20000010
	...

08009040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8009040:	f3ef 8009 	mrs	r0, PSP
 8009044:	f3bf 8f6f 	isb	sy
 8009048:	4b15      	ldr	r3, [pc, #84]	@ (80090a0 <pxCurrentTCBConst>)
 800904a:	681a      	ldr	r2, [r3, #0]
 800904c:	f01e 0f10 	tst.w	lr, #16
 8009050:	bf08      	it	eq
 8009052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800905a:	6010      	str	r0, [r2, #0]
 800905c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009060:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8009064:	f380 8811 	msr	BASEPRI, r0
 8009068:	f3bf 8f4f 	dsb	sy
 800906c:	f3bf 8f6f 	isb	sy
 8009070:	f7ff f908 	bl	8008284 <vTaskSwitchContext>
 8009074:	f04f 0000 	mov.w	r0, #0
 8009078:	f380 8811 	msr	BASEPRI, r0
 800907c:	bc09      	pop	{r0, r3}
 800907e:	6819      	ldr	r1, [r3, #0]
 8009080:	6808      	ldr	r0, [r1, #0]
 8009082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009086:	f01e 0f10 	tst.w	lr, #16
 800908a:	bf08      	it	eq
 800908c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009090:	f380 8809 	msr	PSP, r0
 8009094:	f3bf 8f6f 	isb	sy
 8009098:	4770      	bx	lr
 800909a:	bf00      	nop
 800909c:	f3af 8000 	nop.w

080090a0 <pxCurrentTCBConst>:
 80090a0:	20000434 	.word	0x20000434
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80090a4:	bf00      	nop
 80090a6:	bf00      	nop

080090a8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80090a8:	b580      	push	{r7, lr}
 80090aa:	b082      	sub	sp, #8
 80090ac:	af00      	add	r7, sp, #0
        __asm volatile
 80090ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090b2:	f383 8811 	msr	BASEPRI, r3
 80090b6:	f3bf 8f6f 	isb	sy
 80090ba:	f3bf 8f4f 	dsb	sy
 80090be:	607b      	str	r3, [r7, #4]
    }
 80090c0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80090c2:	f7fe ffc3 	bl	800804c <xTaskIncrementTick>
 80090c6:	4603      	mov	r3, r0
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	d003      	beq.n	80090d4 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80090cc:	4b06      	ldr	r3, [pc, #24]	@ (80090e8 <SysTick_Handler+0x40>)
 80090ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80090d2:	601a      	str	r2, [r3, #0]
 80090d4:	2300      	movs	r3, #0
 80090d6:	603b      	str	r3, [r7, #0]
        __asm volatile
 80090d8:	683b      	ldr	r3, [r7, #0]
 80090da:	f383 8811 	msr	BASEPRI, r3
    }
 80090de:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 80090e0:	bf00      	nop
 80090e2:	3708      	adds	r7, #8
 80090e4:	46bd      	mov	sp, r7
 80090e6:	bd80      	pop	{r7, pc}
 80090e8:	e000ed04 	.word	0xe000ed04

080090ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80090ec:	b480      	push	{r7}
 80090ee:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80090f0:	4b0b      	ldr	r3, [pc, #44]	@ (8009120 <vPortSetupTimerInterrupt+0x34>)
 80090f2:	2200      	movs	r2, #0
 80090f4:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80090f6:	4b0b      	ldr	r3, [pc, #44]	@ (8009124 <vPortSetupTimerInterrupt+0x38>)
 80090f8:	2200      	movs	r2, #0
 80090fa:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80090fc:	4b0a      	ldr	r3, [pc, #40]	@ (8009128 <vPortSetupTimerInterrupt+0x3c>)
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	4a0a      	ldr	r2, [pc, #40]	@ (800912c <vPortSetupTimerInterrupt+0x40>)
 8009102:	fba2 2303 	umull	r2, r3, r2, r3
 8009106:	099b      	lsrs	r3, r3, #6
 8009108:	4a09      	ldr	r2, [pc, #36]	@ (8009130 <vPortSetupTimerInterrupt+0x44>)
 800910a:	3b01      	subs	r3, #1
 800910c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800910e:	4b04      	ldr	r3, [pc, #16]	@ (8009120 <vPortSetupTimerInterrupt+0x34>)
 8009110:	2207      	movs	r2, #7
 8009112:	601a      	str	r2, [r3, #0]
}
 8009114:	bf00      	nop
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	e000e010 	.word	0xe000e010
 8009124:	e000e018 	.word	0xe000e018
 8009128:	20000000 	.word	0x20000000
 800912c:	10624dd3 	.word	0x10624dd3
 8009130:	e000e014 	.word	0xe000e014

08009134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8009134:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8009144 <vPortEnableVFP+0x10>
 8009138:	6801      	ldr	r1, [r0, #0]
 800913a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800913e:	6001      	str	r1, [r0, #0]
 8009140:	4770      	bx	lr
 8009142:	0000      	.short	0x0000
 8009144:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8009148:	bf00      	nop
 800914a:	bf00      	nop

0800914c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 800914c:	b480      	push	{r7}
 800914e:	b085      	sub	sp, #20
 8009150:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 8009152:	f3ef 8305 	mrs	r3, IPSR
 8009156:	60fb      	str	r3, [r7, #12]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	2b0f      	cmp	r3, #15
 800915c:	d915      	bls.n	800918a <vPortValidateInterruptPriority+0x3e>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800915e:	4a18      	ldr	r2, [pc, #96]	@ (80091c0 <vPortValidateInterruptPriority+0x74>)
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	4413      	add	r3, r2
 8009164:	781b      	ldrb	r3, [r3, #0]
 8009166:	72fb      	strb	r3, [r7, #11]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009168:	4b16      	ldr	r3, [pc, #88]	@ (80091c4 <vPortValidateInterruptPriority+0x78>)
 800916a:	781b      	ldrb	r3, [r3, #0]
 800916c:	7afa      	ldrb	r2, [r7, #11]
 800916e:	429a      	cmp	r2, r3
 8009170:	d20b      	bcs.n	800918a <vPortValidateInterruptPriority+0x3e>
        __asm volatile
 8009172:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009176:	f383 8811 	msr	BASEPRI, r3
 800917a:	f3bf 8f6f 	isb	sy
 800917e:	f3bf 8f4f 	dsb	sy
 8009182:	607b      	str	r3, [r7, #4]
    }
 8009184:	bf00      	nop
 8009186:	bf00      	nop
 8009188:	e7fd      	b.n	8009186 <vPortValidateInterruptPriority+0x3a>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800918a:	4b0f      	ldr	r3, [pc, #60]	@ (80091c8 <vPortValidateInterruptPriority+0x7c>)
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8009192:	4b0e      	ldr	r3, [pc, #56]	@ (80091cc <vPortValidateInterruptPriority+0x80>)
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	429a      	cmp	r2, r3
 8009198:	d90b      	bls.n	80091b2 <vPortValidateInterruptPriority+0x66>
        __asm volatile
 800919a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800919e:	f383 8811 	msr	BASEPRI, r3
 80091a2:	f3bf 8f6f 	isb	sy
 80091a6:	f3bf 8f4f 	dsb	sy
 80091aa:	603b      	str	r3, [r7, #0]
    }
 80091ac:	bf00      	nop
 80091ae:	bf00      	nop
 80091b0:	e7fd      	b.n	80091ae <vPortValidateInterruptPriority+0x62>
    }
 80091b2:	bf00      	nop
 80091b4:	3714      	adds	r7, #20
 80091b6:	46bd      	mov	sp, r7
 80091b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091bc:	4770      	bx	lr
 80091be:	bf00      	nop
 80091c0:	e000e3f0 	.word	0xe000e3f0
 80091c4:	20000538 	.word	0x20000538
 80091c8:	e000ed0c 	.word	0xe000ed0c
 80091cc:	2000053c 	.word	0x2000053c

080091d0 <pvPortMalloc>:
PRIVILEGED_DATA static size_t xNumberOfSuccessfulFrees = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b08a      	sub	sp, #40	@ 0x28
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 80091d8:	2300      	movs	r3, #0
 80091da:	61fb      	str	r3, [r7, #28]
    size_t xAdditionalRequiredSize;

    vTaskSuspendAll();
 80091dc:	f7fe fe16 	bl	8007e0c <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 80091e0:	4b54      	ldr	r3, [pc, #336]	@ (8009334 <pvPortMalloc+0x164>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d101      	bne.n	80091ec <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 80091e8:	f000 f90c 	bl	8009404 <prvHeapInit>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xWantedSize > 0 )
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d012      	beq.n	8009218 <pvPortMalloc+0x48>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. Some
             * additional increment may also be needed for alignment. */
            xAdditionalRequiredSize = xHeapStructSize + portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 80091f2:	2208      	movs	r2, #8
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	f003 0307 	and.w	r3, r3, #7
 80091fa:	1ad3      	subs	r3, r2, r3
 80091fc:	3308      	adds	r3, #8
 80091fe:	61bb      	str	r3, [r7, #24]

            if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 8009200:	69bb      	ldr	r3, [r7, #24]
 8009202:	43db      	mvns	r3, r3
 8009204:	687a      	ldr	r2, [r7, #4]
 8009206:	429a      	cmp	r2, r3
 8009208:	d804      	bhi.n	8009214 <pvPortMalloc+0x44>
            {
                xWantedSize += xAdditionalRequiredSize;
 800920a:	687a      	ldr	r2, [r7, #4]
 800920c:	69bb      	ldr	r3, [r7, #24]
 800920e:	4413      	add	r3, r2
 8009210:	607b      	str	r3, [r7, #4]
 8009212:	e001      	b.n	8009218 <pvPortMalloc+0x48>
            }
            else
            {
                xWantedSize = 0;
 8009214:	2300      	movs	r3, #0
 8009216:	607b      	str	r3, [r7, #4]

        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2b00      	cmp	r3, #0
 800921c:	db71      	blt.n	8009302 <pvPortMalloc+0x132>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d06e      	beq.n	8009302 <pvPortMalloc+0x132>
 8009224:	4b44      	ldr	r3, [pc, #272]	@ (8009338 <pvPortMalloc+0x168>)
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	687a      	ldr	r2, [r7, #4]
 800922a:	429a      	cmp	r2, r3
 800922c:	d869      	bhi.n	8009302 <pvPortMalloc+0x132>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 800922e:	4b43      	ldr	r3, [pc, #268]	@ (800933c <pvPortMalloc+0x16c>)
 8009230:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8009232:	4b42      	ldr	r3, [pc, #264]	@ (800933c <pvPortMalloc+0x16c>)
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	627b      	str	r3, [r7, #36]	@ 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009238:	e004      	b.n	8009244 <pvPortMalloc+0x74>
                {
                    pxPreviousBlock = pxBlock;
 800923a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800923c:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 800923e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	627b      	str	r3, [r7, #36]	@ 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009246:	685b      	ldr	r3, [r3, #4]
 8009248:	687a      	ldr	r2, [r7, #4]
 800924a:	429a      	cmp	r2, r3
 800924c:	d903      	bls.n	8009256 <pvPortMalloc+0x86>
 800924e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	2b00      	cmp	r3, #0
 8009254:	d1f1      	bne.n	800923a <pvPortMalloc+0x6a>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8009256:	4b37      	ldr	r3, [pc, #220]	@ (8009334 <pvPortMalloc+0x164>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800925c:	429a      	cmp	r2, r3
 800925e:	d050      	beq.n	8009302 <pvPortMalloc+0x132>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009260:	6a3b      	ldr	r3, [r7, #32]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	2208      	movs	r2, #8
 8009266:	4413      	add	r3, r2
 8009268:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800926a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800926c:	681a      	ldr	r2, [r3, #0]
 800926e:	6a3b      	ldr	r3, [r7, #32]
 8009270:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009274:	685a      	ldr	r2, [r3, #4]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	1ad2      	subs	r2, r2, r3
 800927a:	2308      	movs	r3, #8
 800927c:	005b      	lsls	r3, r3, #1
 800927e:	429a      	cmp	r2, r3
 8009280:	d920      	bls.n	80092c4 <pvPortMalloc+0xf4>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009282:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	4413      	add	r3, r2
 8009288:	617b      	str	r3, [r7, #20]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800928a:	697b      	ldr	r3, [r7, #20]
 800928c:	f003 0307 	and.w	r3, r3, #7
 8009290:	2b00      	cmp	r3, #0
 8009292:	d00b      	beq.n	80092ac <pvPortMalloc+0xdc>
        __asm volatile
 8009294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009298:	f383 8811 	msr	BASEPRI, r3
 800929c:	f3bf 8f6f 	isb	sy
 80092a0:	f3bf 8f4f 	dsb	sy
 80092a4:	613b      	str	r3, [r7, #16]
    }
 80092a6:	bf00      	nop
 80092a8:	bf00      	nop
 80092aa:	e7fd      	b.n	80092a8 <pvPortMalloc+0xd8>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80092ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ae:	685a      	ldr	r2, [r3, #4]
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	1ad2      	subs	r2, r2, r3
 80092b4:	697b      	ldr	r3, [r7, #20]
 80092b6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80092b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ba:	687a      	ldr	r2, [r7, #4]
 80092bc:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80092be:	6978      	ldr	r0, [r7, #20]
 80092c0:	f000 f8fc 	bl	80094bc <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80092c4:	4b1c      	ldr	r3, [pc, #112]	@ (8009338 <pvPortMalloc+0x168>)
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	1ad3      	subs	r3, r2, r3
 80092ce:	4a1a      	ldr	r2, [pc, #104]	@ (8009338 <pvPortMalloc+0x168>)
 80092d0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80092d2:	4b19      	ldr	r3, [pc, #100]	@ (8009338 <pvPortMalloc+0x168>)
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	4b1a      	ldr	r3, [pc, #104]	@ (8009340 <pvPortMalloc+0x170>)
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	429a      	cmp	r2, r3
 80092dc:	d203      	bcs.n	80092e6 <pvPortMalloc+0x116>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80092de:	4b16      	ldr	r3, [pc, #88]	@ (8009338 <pvPortMalloc+0x168>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a17      	ldr	r2, [pc, #92]	@ (8009340 <pvPortMalloc+0x170>)
 80092e4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 80092e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092e8:	685b      	ldr	r3, [r3, #4]
 80092ea:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80092ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f0:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80092f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80092f4:	2200      	movs	r2, #0
 80092f6:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80092f8:	4b12      	ldr	r3, [pc, #72]	@ (8009344 <pvPortMalloc+0x174>)
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	3301      	adds	r3, #1
 80092fe:	4a11      	ldr	r2, [pc, #68]	@ (8009344 <pvPortMalloc+0x174>)
 8009300:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8009302:	f7fe fd91 	bl	8007e28 <xTaskResumeAll>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009306:	69fb      	ldr	r3, [r7, #28]
 8009308:	f003 0307 	and.w	r3, r3, #7
 800930c:	2b00      	cmp	r3, #0
 800930e:	d00b      	beq.n	8009328 <pvPortMalloc+0x158>
        __asm volatile
 8009310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009314:	f383 8811 	msr	BASEPRI, r3
 8009318:	f3bf 8f6f 	isb	sy
 800931c:	f3bf 8f4f 	dsb	sy
 8009320:	60fb      	str	r3, [r7, #12]
    }
 8009322:	bf00      	nop
 8009324:	bf00      	nop
 8009326:	e7fd      	b.n	8009324 <pvPortMalloc+0x154>
    return pvReturn;
 8009328:	69fb      	ldr	r3, [r7, #28]
}
 800932a:	4618      	mov	r0, r3
 800932c:	3728      	adds	r7, #40	@ 0x28
 800932e:	46bd      	mov	sp, r7
 8009330:	bd80      	pop	{r7, pc}
 8009332:	bf00      	nop
 8009334:	20013148 	.word	0x20013148
 8009338:	2001314c 	.word	0x2001314c
 800933c:	20013140 	.word	0x20013140
 8009340:	20013150 	.word	0x20013150
 8009344:	20013154 	.word	0x20013154

08009348 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b086      	sub	sp, #24
 800934c:	af00      	add	r7, sp, #0
 800934e:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d04b      	beq.n	80093f2 <vPortFree+0xaa>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800935a:	2308      	movs	r3, #8
 800935c:	425b      	negs	r3, r3
 800935e:	697a      	ldr	r2, [r7, #20]
 8009360:	4413      	add	r3, r2
 8009362:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8009364:	697b      	ldr	r3, [r7, #20]
 8009366:	613b      	str	r3, [r7, #16]

        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	685b      	ldr	r3, [r3, #4]
 800936c:	2b00      	cmp	r3, #0
 800936e:	db0b      	blt.n	8009388 <vPortFree+0x40>
        __asm volatile
 8009370:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009374:	f383 8811 	msr	BASEPRI, r3
 8009378:	f3bf 8f6f 	isb	sy
 800937c:	f3bf 8f4f 	dsb	sy
 8009380:	60fb      	str	r3, [r7, #12]
    }
 8009382:	bf00      	nop
 8009384:	bf00      	nop
 8009386:	e7fd      	b.n	8009384 <vPortFree+0x3c>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009388:	693b      	ldr	r3, [r7, #16]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	2b00      	cmp	r3, #0
 800938e:	d00b      	beq.n	80093a8 <vPortFree+0x60>
        __asm volatile
 8009390:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009394:	f383 8811 	msr	BASEPRI, r3
 8009398:	f3bf 8f6f 	isb	sy
 800939c:	f3bf 8f4f 	dsb	sy
 80093a0:	60bb      	str	r3, [r7, #8]
    }
 80093a2:	bf00      	nop
 80093a4:	bf00      	nop
 80093a6:	e7fd      	b.n	80093a4 <vPortFree+0x5c>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 80093a8:	693b      	ldr	r3, [r7, #16]
 80093aa:	685b      	ldr	r3, [r3, #4]
 80093ac:	0fdb      	lsrs	r3, r3, #31
 80093ae:	f003 0301 	and.w	r3, r3, #1
 80093b2:	b2db      	uxtb	r3, r3
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d01c      	beq.n	80093f2 <vPortFree+0xaa>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80093b8:	693b      	ldr	r3, [r7, #16]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d118      	bne.n	80093f2 <vPortFree+0xaa>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 80093c0:	693b      	ldr	r3, [r7, #16]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80093c8:	693b      	ldr	r3, [r7, #16]
 80093ca:	605a      	str	r2, [r3, #4]
                {
                    ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                }
                #endif

                vTaskSuspendAll();
 80093cc:	f7fe fd1e 	bl	8007e0c <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80093d0:	693b      	ldr	r3, [r7, #16]
 80093d2:	685a      	ldr	r2, [r3, #4]
 80093d4:	4b09      	ldr	r3, [pc, #36]	@ (80093fc <vPortFree+0xb4>)
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	4413      	add	r3, r2
 80093da:	4a08      	ldr	r2, [pc, #32]	@ (80093fc <vPortFree+0xb4>)
 80093dc:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80093de:	6938      	ldr	r0, [r7, #16]
 80093e0:	f000 f86c 	bl	80094bc <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80093e4:	4b06      	ldr	r3, [pc, #24]	@ (8009400 <vPortFree+0xb8>)
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	3301      	adds	r3, #1
 80093ea:	4a05      	ldr	r2, [pc, #20]	@ (8009400 <vPortFree+0xb8>)
 80093ec:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80093ee:	f7fe fd1b 	bl	8007e28 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80093f2:	bf00      	nop
 80093f4:	3718      	adds	r7, #24
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	2001314c 	.word	0x2001314c
 8009400:	20013158 	.word	0x20013158

08009404 <prvHeapInit>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8009404:	b480      	push	{r7}
 8009406:	b085      	sub	sp, #20
 8009408:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    portPOINTER_SIZE_TYPE uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800940a:	f44f 3396 	mov.w	r3, #76800	@ 0x12c00
 800940e:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( portPOINTER_SIZE_TYPE ) ucHeap;
 8009410:	4b25      	ldr	r3, [pc, #148]	@ (80094a8 <prvHeapInit+0xa4>)
 8009412:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	f003 0307 	and.w	r3, r3, #7
 800941a:	2b00      	cmp	r3, #0
 800941c:	d00c      	beq.n	8009438 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	3307      	adds	r3, #7
 8009422:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8009424:	68fb      	ldr	r3, [r7, #12]
 8009426:	f023 0307 	bic.w	r3, r3, #7
 800942a:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( portPOINTER_SIZE_TYPE ) ucHeap;
 800942c:	68ba      	ldr	r2, [r7, #8]
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	1ad3      	subs	r3, r2, r3
 8009432:	4a1d      	ldr	r2, [pc, #116]	@ (80094a8 <prvHeapInit+0xa4>)
 8009434:	4413      	add	r3, r2
 8009436:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800943c:	4a1b      	ldr	r2, [pc, #108]	@ (80094ac <prvHeapInit+0xa8>)
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8009442:	4b1a      	ldr	r3, [pc, #104]	@ (80094ac <prvHeapInit+0xa8>)
 8009444:	2200      	movs	r2, #0
 8009446:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( portPOINTER_SIZE_TYPE ) pucAlignedHeap ) + xTotalHeapSize;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	4413      	add	r3, r2
 800944e:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8009450:	2208      	movs	r2, #8
 8009452:	68fb      	ldr	r3, [r7, #12]
 8009454:	1a9b      	subs	r3, r3, r2
 8009456:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	f023 0307 	bic.w	r3, r3, #7
 800945e:	60fb      	str	r3, [r7, #12]
    pxEnd = ( BlockLink_t * ) uxAddress;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	4a13      	ldr	r2, [pc, #76]	@ (80094b0 <prvHeapInit+0xac>)
 8009464:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8009466:	4b12      	ldr	r3, [pc, #72]	@ (80094b0 <prvHeapInit+0xac>)
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	2200      	movs	r2, #0
 800946c:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800946e:	4b10      	ldr	r3, [pc, #64]	@ (80094b0 <prvHeapInit+0xac>)
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	2200      	movs	r2, #0
 8009474:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( BlockLink_t * ) pucAlignedHeap;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = ( size_t ) ( uxAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlock );
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	68fa      	ldr	r2, [r7, #12]
 800947e:	1ad2      	subs	r2, r2, r3
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009484:	4b0a      	ldr	r3, [pc, #40]	@ (80094b0 <prvHeapInit+0xac>)
 8009486:	681a      	ldr	r2, [r3, #0]
 8009488:	683b      	ldr	r3, [r7, #0]
 800948a:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800948c:	683b      	ldr	r3, [r7, #0]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	4a08      	ldr	r2, [pc, #32]	@ (80094b4 <prvHeapInit+0xb0>)
 8009492:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009494:	683b      	ldr	r3, [r7, #0]
 8009496:	685b      	ldr	r3, [r3, #4]
 8009498:	4a07      	ldr	r2, [pc, #28]	@ (80094b8 <prvHeapInit+0xb4>)
 800949a:	6013      	str	r3, [r2, #0]
}
 800949c:	bf00      	nop
 800949e:	3714      	adds	r7, #20
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr
 80094a8:	20000540 	.word	0x20000540
 80094ac:	20013140 	.word	0x20013140
 80094b0:	20013148 	.word	0x20013148
 80094b4:	20013150 	.word	0x20013150
 80094b8:	2001314c 	.word	0x2001314c

080094bc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80094bc:	b480      	push	{r7}
 80094be:	b085      	sub	sp, #20
 80094c0:	af00      	add	r7, sp, #0
 80094c2:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80094c4:	4b28      	ldr	r3, [pc, #160]	@ (8009568 <prvInsertBlockIntoFreeList+0xac>)
 80094c6:	60fb      	str	r3, [r7, #12]
 80094c8:	e002      	b.n	80094d0 <prvInsertBlockIntoFreeList+0x14>
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	60fb      	str	r3, [r7, #12]
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	687a      	ldr	r2, [r7, #4]
 80094d6:	429a      	cmp	r2, r3
 80094d8:	d8f7      	bhi.n	80094ca <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	685b      	ldr	r3, [r3, #4]
 80094e2:	68ba      	ldr	r2, [r7, #8]
 80094e4:	4413      	add	r3, r2
 80094e6:	687a      	ldr	r2, [r7, #4]
 80094e8:	429a      	cmp	r2, r3
 80094ea:	d108      	bne.n	80094fe <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	685a      	ldr	r2, [r3, #4]
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	685b      	ldr	r3, [r3, #4]
 80094f4:	441a      	add	r2, r3
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	685b      	ldr	r3, [r3, #4]
 8009506:	68ba      	ldr	r2, [r7, #8]
 8009508:	441a      	add	r2, r3
 800950a:	68fb      	ldr	r3, [r7, #12]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	429a      	cmp	r2, r3
 8009510:	d118      	bne.n	8009544 <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8009512:	68fb      	ldr	r3, [r7, #12]
 8009514:	681a      	ldr	r2, [r3, #0]
 8009516:	4b15      	ldr	r3, [pc, #84]	@ (800956c <prvInsertBlockIntoFreeList+0xb0>)
 8009518:	681b      	ldr	r3, [r3, #0]
 800951a:	429a      	cmp	r2, r3
 800951c:	d00d      	beq.n	800953a <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	685a      	ldr	r2, [r3, #4]
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	441a      	add	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	681a      	ldr	r2, [r3, #0]
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	601a      	str	r2, [r3, #0]
 8009538:	e008      	b.n	800954c <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800953a:	4b0c      	ldr	r3, [pc, #48]	@ (800956c <prvInsertBlockIntoFreeList+0xb0>)
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	601a      	str	r2, [r3, #0]
 8009542:	e003      	b.n	800954c <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681a      	ldr	r2, [r3, #0]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 800954c:	68fa      	ldr	r2, [r7, #12]
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	429a      	cmp	r2, r3
 8009552:	d002      	beq.n	800955a <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	687a      	ldr	r2, [r7, #4]
 8009558:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800955a:	bf00      	nop
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	20013140 	.word	0x20013140
 800956c:	20013148 	.word	0x20013148

08009570 <_cbSendSystemDesc>:
*       _cbSendSystemDesc()
*
*  Function description
*    Sends SystemView description strings.
*/
static void _cbSendSystemDesc(void) {
 8009570:	b580      	push	{r7, lr}
 8009572:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_SendSysDesc("N="SYSVIEW_APP_NAME",D="SYSVIEW_DEVICE_NAME",O=FreeRTOS");
 8009574:	4803      	ldr	r0, [pc, #12]	@ (8009584 <_cbSendSystemDesc+0x14>)
 8009576:	f001 fae5 	bl	800ab44 <SEGGER_SYSVIEW_SendSysDesc>
  SEGGER_SYSVIEW_SendSysDesc("I#15=SysTick");
 800957a:	4803      	ldr	r0, [pc, #12]	@ (8009588 <_cbSendSystemDesc+0x18>)
 800957c:	f001 fae2 	bl	800ab44 <SEGGER_SYSVIEW_SendSysDesc>
}
 8009580:	bf00      	nop
 8009582:	bd80      	pop	{r7, pc}
 8009584:	0800f02c 	.word	0x0800f02c
 8009588:	0800f060 	.word	0x0800f060

0800958c <SEGGER_SYSVIEW_Conf>:
*
*       Global functions
*
**********************************************************************
*/
void SEGGER_SYSVIEW_Conf(void) {
 800958c:	b580      	push	{r7, lr}
 800958e:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_Init(SYSVIEW_TIMESTAMP_FREQ, SYSVIEW_CPU_FREQ, 
 8009590:	4b06      	ldr	r3, [pc, #24]	@ (80095ac <SEGGER_SYSVIEW_Conf+0x20>)
 8009592:	6818      	ldr	r0, [r3, #0]
 8009594:	4b05      	ldr	r3, [pc, #20]	@ (80095ac <SEGGER_SYSVIEW_Conf+0x20>)
 8009596:	6819      	ldr	r1, [r3, #0]
 8009598:	4b05      	ldr	r3, [pc, #20]	@ (80095b0 <SEGGER_SYSVIEW_Conf+0x24>)
 800959a:	4a06      	ldr	r2, [pc, #24]	@ (80095b4 <SEGGER_SYSVIEW_Conf+0x28>)
 800959c:	f000 ff58 	bl	800a450 <SEGGER_SYSVIEW_Init>
                      &SYSVIEW_X_OS_TraceAPI, _cbSendSystemDesc);
  SEGGER_SYSVIEW_SetRAMBase(SYSVIEW_RAM_BASE);
 80095a0:	f04f 5080 	mov.w	r0, #268435456	@ 0x10000000
 80095a4:	f000 ff98 	bl	800a4d8 <SEGGER_SYSVIEW_SetRAMBase>
}
 80095a8:	bf00      	nop
 80095aa:	bd80      	pop	{r7, pc}
 80095ac:	20000000 	.word	0x20000000
 80095b0:	08009571 	.word	0x08009571
 80095b4:	0800f0fc 	.word	0x0800f0fc

080095b8 <_cbSendTaskList>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, it uses SYSVIEW
*    functions to send the entire task list to the host.
*/
static void _cbSendTaskList(void) {
 80095b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80095ba:	b085      	sub	sp, #20
 80095bc:	af02      	add	r7, sp, #8
  unsigned n;

  for (n = 0; n < _NumTasks; n++) {
 80095be:	2300      	movs	r3, #0
 80095c0:	607b      	str	r3, [r7, #4]
 80095c2:	e033      	b.n	800962c <_cbSendTaskList+0x74>
#if INCLUDE_uxTaskGetStackHighWaterMark // Report Task Stack High Watermark
    _aTasks[n].uStackHighWaterMark = uxTaskGetStackHighWaterMark((TaskHandle_t)_aTasks[n].xHandle);
#endif
    SYSVIEW_SendTaskInfo((U32)_aTasks[n].xHandle, _aTasks[n].pcTaskName, (unsigned)_aTasks[n].uxCurrentPriority, (U32)_aTasks[n].pxStack, (unsigned)_aTasks[n].uStackHighWaterMark);
 80095c4:	491e      	ldr	r1, [pc, #120]	@ (8009640 <_cbSendTaskList+0x88>)
 80095c6:	687a      	ldr	r2, [r7, #4]
 80095c8:	4613      	mov	r3, r2
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	4413      	add	r3, r2
 80095ce:	009b      	lsls	r3, r3, #2
 80095d0:	440b      	add	r3, r1
 80095d2:	6818      	ldr	r0, [r3, #0]
 80095d4:	491a      	ldr	r1, [pc, #104]	@ (8009640 <_cbSendTaskList+0x88>)
 80095d6:	687a      	ldr	r2, [r7, #4]
 80095d8:	4613      	mov	r3, r2
 80095da:	009b      	lsls	r3, r3, #2
 80095dc:	4413      	add	r3, r2
 80095de:	009b      	lsls	r3, r3, #2
 80095e0:	440b      	add	r3, r1
 80095e2:	3304      	adds	r3, #4
 80095e4:	6819      	ldr	r1, [r3, #0]
 80095e6:	4c16      	ldr	r4, [pc, #88]	@ (8009640 <_cbSendTaskList+0x88>)
 80095e8:	687a      	ldr	r2, [r7, #4]
 80095ea:	4613      	mov	r3, r2
 80095ec:	009b      	lsls	r3, r3, #2
 80095ee:	4413      	add	r3, r2
 80095f0:	009b      	lsls	r3, r3, #2
 80095f2:	4423      	add	r3, r4
 80095f4:	3308      	adds	r3, #8
 80095f6:	681c      	ldr	r4, [r3, #0]
 80095f8:	4d11      	ldr	r5, [pc, #68]	@ (8009640 <_cbSendTaskList+0x88>)
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	4613      	mov	r3, r2
 80095fe:	009b      	lsls	r3, r3, #2
 8009600:	4413      	add	r3, r2
 8009602:	009b      	lsls	r3, r3, #2
 8009604:	442b      	add	r3, r5
 8009606:	330c      	adds	r3, #12
 8009608:	681d      	ldr	r5, [r3, #0]
 800960a:	4e0d      	ldr	r6, [pc, #52]	@ (8009640 <_cbSendTaskList+0x88>)
 800960c:	687a      	ldr	r2, [r7, #4]
 800960e:	4613      	mov	r3, r2
 8009610:	009b      	lsls	r3, r3, #2
 8009612:	4413      	add	r3, r2
 8009614:	009b      	lsls	r3, r3, #2
 8009616:	4433      	add	r3, r6
 8009618:	3310      	adds	r3, #16
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	462b      	mov	r3, r5
 8009620:	4622      	mov	r2, r4
 8009622:	f000 f8bd 	bl	80097a0 <SYSVIEW_SendTaskInfo>
  for (n = 0; n < _NumTasks; n++) {
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	3301      	adds	r3, #1
 800962a:	607b      	str	r3, [r7, #4]
 800962c:	4b05      	ldr	r3, [pc, #20]	@ (8009644 <_cbSendTaskList+0x8c>)
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	687a      	ldr	r2, [r7, #4]
 8009632:	429a      	cmp	r2, r3
 8009634:	d3c6      	bcc.n	80095c4 <_cbSendTaskList+0xc>
  }
}
 8009636:	bf00      	nop
 8009638:	bf00      	nop
 800963a:	370c      	adds	r7, #12
 800963c:	46bd      	mov	sp, r7
 800963e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009640:	2001315c 	.word	0x2001315c
 8009644:	200131fc 	.word	0x200131fc

08009648 <_cbGetTime>:
*  Function description
*    This function is part of the link between FreeRTOS and SYSVIEW.
*    Called from SystemView when asked by the host, returns the
*    current system time in micro seconds.
*/
static U64 _cbGetTime(void) {
 8009648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800964c:	b082      	sub	sp, #8
 800964e:	af00      	add	r7, sp, #0
  U64 Time;

  Time = xTaskGetTickCountFromISR();
 8009650:	f7fe fcea 	bl	8008028 <xTaskGetTickCountFromISR>
 8009654:	4603      	mov	r3, r0
 8009656:	2200      	movs	r2, #0
 8009658:	469a      	mov	sl, r3
 800965a:	4693      	mov	fp, r2
 800965c:	e9c7 ab00 	strd	sl, fp, [r7]
  Time *= portTICK_PERIOD_MS;
  Time *= 1000;
 8009660:	e9d7 0100 	ldrd	r0, r1, [r7]
 8009664:	4602      	mov	r2, r0
 8009666:	460b      	mov	r3, r1
 8009668:	f04f 0a00 	mov.w	sl, #0
 800966c:	f04f 0b00 	mov.w	fp, #0
 8009670:	ea4f 1b43 	mov.w	fp, r3, lsl #5
 8009674:	ea4b 6bd2 	orr.w	fp, fp, r2, lsr #27
 8009678:	ea4f 1a42 	mov.w	sl, r2, lsl #5
 800967c:	4652      	mov	r2, sl
 800967e:	465b      	mov	r3, fp
 8009680:	1a14      	subs	r4, r2, r0
 8009682:	eb63 0501 	sbc.w	r5, r3, r1
 8009686:	f04f 0200 	mov.w	r2, #0
 800968a:	f04f 0300 	mov.w	r3, #0
 800968e:	00ab      	lsls	r3, r5, #2
 8009690:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8009694:	00a2      	lsls	r2, r4, #2
 8009696:	4614      	mov	r4, r2
 8009698:	461d      	mov	r5, r3
 800969a:	eb14 0800 	adds.w	r8, r4, r0
 800969e:	eb45 0901 	adc.w	r9, r5, r1
 80096a2:	f04f 0200 	mov.w	r2, #0
 80096a6:	f04f 0300 	mov.w	r3, #0
 80096aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80096ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80096b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80096b6:	4690      	mov	r8, r2
 80096b8:	4699      	mov	r9, r3
 80096ba:	e9c7 8900 	strd	r8, r9, [r7]
  return Time;
 80096be:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 80096c2:	4610      	mov	r0, r2
 80096c4:	4619      	mov	r1, r3
 80096c6:	3708      	adds	r7, #8
 80096c8:	46bd      	mov	sp, r7
 80096ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

080096d0 <SYSVIEW_AddTask>:
*       SYSVIEW_AddTask()
*
*  Function description
*    Add a task to the internal list and record its information.
*/
void SYSVIEW_AddTask(U32 xHandle, const char* pcTaskName, unsigned uxCurrentPriority, U32  pxStack, unsigned uStackHighWaterMark) {
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b086      	sub	sp, #24
 80096d4:	af02      	add	r7, sp, #8
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	607a      	str	r2, [r7, #4]
 80096dc:	603b      	str	r3, [r7, #0]
  
  if (memcmp(pcTaskName, "IDLE", 5) == 0) {
 80096de:	2205      	movs	r2, #5
 80096e0:	492b      	ldr	r1, [pc, #172]	@ (8009790 <SYSVIEW_AddTask+0xc0>)
 80096e2:	68b8      	ldr	r0, [r7, #8]
 80096e4:	f002 fa5d 	bl	800bba2 <memcmp>
 80096e8:	4603      	mov	r3, r0
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d04b      	beq.n	8009786 <SYSVIEW_AddTask+0xb6>
    return;
  }
  
  if (_NumTasks >= SYSVIEW_FREERTOS_MAX_NOF_TASKS) {
 80096ee:	4b29      	ldr	r3, [pc, #164]	@ (8009794 <SYSVIEW_AddTask+0xc4>)
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	2b07      	cmp	r3, #7
 80096f4:	d903      	bls.n	80096fe <SYSVIEW_AddTask+0x2e>
    SEGGER_SYSVIEW_Warn("SYSTEMVIEW: Could not record task information. Maximum number of tasks reached.");
 80096f6:	4828      	ldr	r0, [pc, #160]	@ (8009798 <SYSVIEW_AddTask+0xc8>)
 80096f8:	f001 fc56 	bl	800afa8 <SEGGER_SYSVIEW_Warn>
    return;
 80096fc:	e044      	b.n	8009788 <SYSVIEW_AddTask+0xb8>
  }

  _aTasks[_NumTasks].xHandle = xHandle;
 80096fe:	4b25      	ldr	r3, [pc, #148]	@ (8009794 <SYSVIEW_AddTask+0xc4>)
 8009700:	681a      	ldr	r2, [r3, #0]
 8009702:	4926      	ldr	r1, [pc, #152]	@ (800979c <SYSVIEW_AddTask+0xcc>)
 8009704:	4613      	mov	r3, r2
 8009706:	009b      	lsls	r3, r3, #2
 8009708:	4413      	add	r3, r2
 800970a:	009b      	lsls	r3, r3, #2
 800970c:	440b      	add	r3, r1
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pcTaskName = pcTaskName;
 8009712:	4b20      	ldr	r3, [pc, #128]	@ (8009794 <SYSVIEW_AddTask+0xc4>)
 8009714:	681a      	ldr	r2, [r3, #0]
 8009716:	4921      	ldr	r1, [pc, #132]	@ (800979c <SYSVIEW_AddTask+0xcc>)
 8009718:	4613      	mov	r3, r2
 800971a:	009b      	lsls	r3, r3, #2
 800971c:	4413      	add	r3, r2
 800971e:	009b      	lsls	r3, r3, #2
 8009720:	440b      	add	r3, r1
 8009722:	3304      	adds	r3, #4
 8009724:	68ba      	ldr	r2, [r7, #8]
 8009726:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uxCurrentPriority = uxCurrentPriority;
 8009728:	4b1a      	ldr	r3, [pc, #104]	@ (8009794 <SYSVIEW_AddTask+0xc4>)
 800972a:	681a      	ldr	r2, [r3, #0]
 800972c:	491b      	ldr	r1, [pc, #108]	@ (800979c <SYSVIEW_AddTask+0xcc>)
 800972e:	4613      	mov	r3, r2
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	4413      	add	r3, r2
 8009734:	009b      	lsls	r3, r3, #2
 8009736:	440b      	add	r3, r1
 8009738:	3308      	adds	r3, #8
 800973a:	687a      	ldr	r2, [r7, #4]
 800973c:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].pxStack = pxStack;
 800973e:	4b15      	ldr	r3, [pc, #84]	@ (8009794 <SYSVIEW_AddTask+0xc4>)
 8009740:	681a      	ldr	r2, [r3, #0]
 8009742:	4916      	ldr	r1, [pc, #88]	@ (800979c <SYSVIEW_AddTask+0xcc>)
 8009744:	4613      	mov	r3, r2
 8009746:	009b      	lsls	r3, r3, #2
 8009748:	4413      	add	r3, r2
 800974a:	009b      	lsls	r3, r3, #2
 800974c:	440b      	add	r3, r1
 800974e:	330c      	adds	r3, #12
 8009750:	683a      	ldr	r2, [r7, #0]
 8009752:	601a      	str	r2, [r3, #0]
  _aTasks[_NumTasks].uStackHighWaterMark = uStackHighWaterMark;
 8009754:	4b0f      	ldr	r3, [pc, #60]	@ (8009794 <SYSVIEW_AddTask+0xc4>)
 8009756:	681a      	ldr	r2, [r3, #0]
 8009758:	4910      	ldr	r1, [pc, #64]	@ (800979c <SYSVIEW_AddTask+0xcc>)
 800975a:	4613      	mov	r3, r2
 800975c:	009b      	lsls	r3, r3, #2
 800975e:	4413      	add	r3, r2
 8009760:	009b      	lsls	r3, r3, #2
 8009762:	440b      	add	r3, r1
 8009764:	3310      	adds	r3, #16
 8009766:	69ba      	ldr	r2, [r7, #24]
 8009768:	601a      	str	r2, [r3, #0]

  _NumTasks++;
 800976a:	4b0a      	ldr	r3, [pc, #40]	@ (8009794 <SYSVIEW_AddTask+0xc4>)
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	3301      	adds	r3, #1
 8009770:	4a08      	ldr	r2, [pc, #32]	@ (8009794 <SYSVIEW_AddTask+0xc4>)
 8009772:	6013      	str	r3, [r2, #0]

  SYSVIEW_SendTaskInfo(xHandle, pcTaskName,uxCurrentPriority, pxStack, uStackHighWaterMark);
 8009774:	69bb      	ldr	r3, [r7, #24]
 8009776:	9300      	str	r3, [sp, #0]
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	687a      	ldr	r2, [r7, #4]
 800977c:	68b9      	ldr	r1, [r7, #8]
 800977e:	68f8      	ldr	r0, [r7, #12]
 8009780:	f000 f80e 	bl	80097a0 <SYSVIEW_SendTaskInfo>
 8009784:	e000      	b.n	8009788 <SYSVIEW_AddTask+0xb8>
    return;
 8009786:	bf00      	nop

}
 8009788:	3710      	adds	r7, #16
 800978a:	46bd      	mov	sp, r7
 800978c:	bd80      	pop	{r7, pc}
 800978e:	bf00      	nop
 8009790:	0800f070 	.word	0x0800f070
 8009794:	200131fc 	.word	0x200131fc
 8009798:	0800f078 	.word	0x0800f078
 800979c:	2001315c 	.word	0x2001315c

080097a0 <SYSVIEW_SendTaskInfo>:
*       SYSVIEW_SendTaskInfo()
*
*  Function description
*    Record task information.
*/
void SYSVIEW_SendTaskInfo(U32 TaskID, const char* sName, unsigned Prio, U32 StackBase, unsigned StackSize) {
 80097a0:	b580      	push	{r7, lr}
 80097a2:	b08a      	sub	sp, #40	@ 0x28
 80097a4:	af00      	add	r7, sp, #0
 80097a6:	60f8      	str	r0, [r7, #12]
 80097a8:	60b9      	str	r1, [r7, #8]
 80097aa:	607a      	str	r2, [r7, #4]
 80097ac:	603b      	str	r3, [r7, #0]
  SEGGER_SYSVIEW_TASKINFO TaskInfo;

  memset(&TaskInfo, 0, sizeof(TaskInfo)); // Fill all elements with 0 to allow extending the structure in future version without breaking the code
 80097ae:	f107 0314 	add.w	r3, r7, #20
 80097b2:	2214      	movs	r2, #20
 80097b4:	2100      	movs	r1, #0
 80097b6:	4618      	mov	r0, r3
 80097b8:	f002 fa03 	bl	800bbc2 <memset>
  TaskInfo.TaskID     = TaskID;
 80097bc:	68fb      	ldr	r3, [r7, #12]
 80097be:	617b      	str	r3, [r7, #20]
  TaskInfo.sName      = sName;
 80097c0:	68bb      	ldr	r3, [r7, #8]
 80097c2:	61bb      	str	r3, [r7, #24]
  TaskInfo.Prio       = Prio;
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	61fb      	str	r3, [r7, #28]
  TaskInfo.StackBase  = StackBase;
 80097c8:	683b      	ldr	r3, [r7, #0]
 80097ca:	623b      	str	r3, [r7, #32]
  TaskInfo.StackSize  = StackSize;
 80097cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80097ce:	627b      	str	r3, [r7, #36]	@ 0x24
  SEGGER_SYSVIEW_SendTaskInfo(&TaskInfo);
 80097d0:	f107 0314 	add.w	r3, r7, #20
 80097d4:	4618      	mov	r0, r3
 80097d6:	f001 f8bd 	bl	800a954 <SEGGER_SYSVIEW_SendTaskInfo>
}
 80097da:	bf00      	nop
 80097dc:	3728      	adds	r7, #40	@ 0x28
 80097de:	46bd      	mov	sp, r7
 80097e0:	bd80      	pop	{r7, pc}
	...

080097e4 <_DoInit>:
      if (pRTTCBInit->acID[0] != 'S') {                                                      \
        _DoInit();                                                                           \
      }                                                                                      \
    } while (0)

static void _DoInit(void) {
 80097e4:	b580      	push	{r7, lr}
 80097e6:	b082      	sub	sp, #8
 80097e8:	af00      	add	r7, sp, #0
  static const char _aInitStr[] = "\0\0\0\0\0\0TTR REGGES";  // Init complete ID string to make sure that things also work if RTT is linked to a no-init memory area
  unsigned i;
  //
  // Initialize control block
  //
  p                     = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access control block uncached so that nothing in the cache ever becomes dirty and all changes are visible in HW directly
 80097ea:	4b26      	ldr	r3, [pc, #152]	@ (8009884 <_DoInit+0xa0>)
 80097ec:	603b      	str	r3, [r7, #0]
  memset((SEGGER_RTT_CB*)p, 0, sizeof(_SEGGER_RTT));         // Make sure that the RTT CB is always zero initialized.
 80097ee:	22a8      	movs	r2, #168	@ 0xa8
 80097f0:	2100      	movs	r1, #0
 80097f2:	6838      	ldr	r0, [r7, #0]
 80097f4:	f002 f9e5 	bl	800bbc2 <memset>
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
 80097f8:	683b      	ldr	r3, [r7, #0]
 80097fa:	2203      	movs	r2, #3
 80097fc:	611a      	str	r2, [r3, #16]
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
 80097fe:	683b      	ldr	r3, [r7, #0]
 8009800:	2203      	movs	r2, #3
 8009802:	615a      	str	r2, [r3, #20]
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
 8009804:	683b      	ldr	r3, [r7, #0]
 8009806:	4a20      	ldr	r2, [pc, #128]	@ (8009888 <_DoInit+0xa4>)
 8009808:	619a      	str	r2, [r3, #24]
  p->aUp[0].pBuffer       = _acUpBuffer;
 800980a:	683b      	ldr	r3, [r7, #0]
 800980c:	4a1f      	ldr	r2, [pc, #124]	@ (800988c <_DoInit+0xa8>)
 800980e:	61da      	str	r2, [r3, #28]
  p->aUp[0].SizeOfBuffer  = BUFFER_SIZE_UP;
 8009810:	683b      	ldr	r3, [r7, #0]
 8009812:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8009816:	621a      	str	r2, [r3, #32]
  p->aUp[0].RdOff         = 0u;
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	2200      	movs	r2, #0
 800981c:	629a      	str	r2, [r3, #40]	@ 0x28
  p->aUp[0].WrOff         = 0u;
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	2200      	movs	r2, #0
 8009822:	625a      	str	r2, [r3, #36]	@ 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8009824:	683b      	ldr	r3, [r7, #0]
 8009826:	2200      	movs	r2, #0
 8009828:	62da      	str	r2, [r3, #44]	@ 0x2c
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
 800982a:	683b      	ldr	r3, [r7, #0]
 800982c:	4a16      	ldr	r2, [pc, #88]	@ (8009888 <_DoInit+0xa4>)
 800982e:	661a      	str	r2, [r3, #96]	@ 0x60
  p->aDown[0].pBuffer       = _acDownBuffer;
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	4a17      	ldr	r2, [pc, #92]	@ (8009890 <_DoInit+0xac>)
 8009834:	665a      	str	r2, [r3, #100]	@ 0x64
  p->aDown[0].SizeOfBuffer  = BUFFER_SIZE_DOWN;
 8009836:	683b      	ldr	r3, [r7, #0]
 8009838:	2210      	movs	r2, #16
 800983a:	669a      	str	r2, [r3, #104]	@ 0x68
  p->aDown[0].RdOff         = 0u;
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	2200      	movs	r2, #0
 8009840:	671a      	str	r2, [r3, #112]	@ 0x70
  p->aDown[0].WrOff         = 0u;
 8009842:	683b      	ldr	r3, [r7, #0]
 8009844:	2200      	movs	r2, #0
 8009846:	66da      	str	r2, [r3, #108]	@ 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
 8009848:	683b      	ldr	r3, [r7, #0]
 800984a:	2200      	movs	r2, #0
 800984c:	675a      	str	r2, [r3, #116]	@ 0x74
  //
  // Finish initialization of the control block.
  // Copy Id string backwards to make sure that "SEGGER RTT" is not found in initializer memory (usually flash),
  // as this would cause J-Link to "find" the control block at a wrong address.
  //
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 800984e:	f3bf 8f5f 	dmb	sy
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 8009852:	2300      	movs	r3, #0
 8009854:	607b      	str	r3, [r7, #4]
 8009856:	e00c      	b.n	8009872 <_DoInit+0x8e>
    p->acID[i] = _aInitStr[sizeof(_aInitStr) - 2 - i];  // Skip terminating \0 at the end of the array
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	f1c3 030f 	rsb	r3, r3, #15
 800985e:	4a0d      	ldr	r2, [pc, #52]	@ (8009894 <_DoInit+0xb0>)
 8009860:	5cd1      	ldrb	r1, [r2, r3]
 8009862:	683a      	ldr	r2, [r7, #0]
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	4413      	add	r3, r2
 8009868:	460a      	mov	r2, r1
 800986a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < sizeof(_aInitStr) - 1; ++i) {
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	3301      	adds	r3, #1
 8009870:	607b      	str	r3, [r7, #4]
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	2b0f      	cmp	r3, #15
 8009876:	d9ef      	bls.n	8009858 <_DoInit+0x74>
  }
  RTT__DMB();                       // Force order of memory accesses for cores that may perform out-of-order memory accesses
 8009878:	f3bf 8f5f 	dmb	sy
}
 800987c:	bf00      	nop
 800987e:	3708      	adds	r7, #8
 8009880:	46bd      	mov	sp, r7
 8009882:	bd80      	pop	{r7, pc}
 8009884:	20013200 	.word	0x20013200
 8009888:	0800f0c8 	.word	0x0800f0c8
 800988c:	200132a8 	.word	0x200132a8
 8009890:	200136a8 	.word	0x200136a8
 8009894:	0800f104 	.word	0x0800f104

08009898 <_WriteBlocking>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Return value
*    >= 0 - Number of bytes written into buffer.
*/
static unsigned _WriteBlocking(SEGGER_RTT_BUFFER_UP* pRing, const char* pBuffer, unsigned NumBytes) {
 8009898:	b580      	push	{r7, lr}
 800989a:	b08a      	sub	sp, #40	@ 0x28
 800989c:	af00      	add	r7, sp, #0
 800989e:	60f8      	str	r0, [r7, #12]
 80098a0:	60b9      	str	r1, [r7, #8]
 80098a2:	607a      	str	r2, [r7, #4]
  unsigned WrOff;
  volatile char* pDst;
  //
  // Write data to buffer and handle wrap-around if necessary
  //
  NumBytesWritten = 0u;
 80098a4:	2300      	movs	r3, #0
 80098a6:	623b      	str	r3, [r7, #32]
  WrOff = pRing->WrOff;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	68db      	ldr	r3, [r3, #12]
 80098ac:	61fb      	str	r3, [r7, #28]
  do {
    RdOff = pRing->RdOff;                         // May be changed by host (debug probe) in the meantime
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	691b      	ldr	r3, [r3, #16]
 80098b2:	61bb      	str	r3, [r7, #24]
    if (RdOff > WrOff) {
 80098b4:	69ba      	ldr	r2, [r7, #24]
 80098b6:	69fb      	ldr	r3, [r7, #28]
 80098b8:	429a      	cmp	r2, r3
 80098ba:	d905      	bls.n	80098c8 <_WriteBlocking+0x30>
      NumBytesToWrite = RdOff - WrOff - 1u;
 80098bc:	69ba      	ldr	r2, [r7, #24]
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	1ad3      	subs	r3, r2, r3
 80098c2:	3b01      	subs	r3, #1
 80098c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80098c6:	e007      	b.n	80098d8 <_WriteBlocking+0x40>
    } else {
      NumBytesToWrite = pRing->SizeOfBuffer - (WrOff - RdOff + 1u);
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	689a      	ldr	r2, [r3, #8]
 80098cc:	69b9      	ldr	r1, [r7, #24]
 80098ce:	69fb      	ldr	r3, [r7, #28]
 80098d0:	1acb      	subs	r3, r1, r3
 80098d2:	4413      	add	r3, r2
 80098d4:	3b01      	subs	r3, #1
 80098d6:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    NumBytesToWrite = MIN(NumBytesToWrite, (pRing->SizeOfBuffer - WrOff));      // Number of bytes that can be written until buffer wrap-around
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	689a      	ldr	r2, [r3, #8]
 80098dc:	69fb      	ldr	r3, [r7, #28]
 80098de:	1ad3      	subs	r3, r2, r3
 80098e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098e2:	4293      	cmp	r3, r2
 80098e4:	bf28      	it	cs
 80098e6:	4613      	movcs	r3, r2
 80098e8:	627b      	str	r3, [r7, #36]	@ 0x24
    NumBytesToWrite = MIN(NumBytesToWrite, NumBytes);
 80098ea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	4293      	cmp	r3, r2
 80098f0:	bf28      	it	cs
 80098f2:	4613      	movcs	r3, r2
 80098f4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	685a      	ldr	r2, [r3, #4]
 80098fa:	69fb      	ldr	r3, [r7, #28]
 80098fc:	4413      	add	r3, r2
 80098fe:	617b      	str	r3, [r7, #20]
    WrOff           += NumBytesToWrite;
    while (NumBytesToWrite--) {
      *pDst++ = *pBuffer++;
    };
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pBuffer, NumBytesToWrite);
 8009900:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009902:	68b9      	ldr	r1, [r7, #8]
 8009904:	6978      	ldr	r0, [r7, #20]
 8009906:	f002 f9ca 	bl	800bc9e <memcpy>
    NumBytesWritten += NumBytesToWrite;
 800990a:	6a3a      	ldr	r2, [r7, #32]
 800990c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990e:	4413      	add	r3, r2
 8009910:	623b      	str	r3, [r7, #32]
    pBuffer         += NumBytesToWrite;
 8009912:	68ba      	ldr	r2, [r7, #8]
 8009914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009916:	4413      	add	r3, r2
 8009918:	60bb      	str	r3, [r7, #8]
    NumBytes        -= NumBytesToWrite;
 800991a:	687a      	ldr	r2, [r7, #4]
 800991c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800991e:	1ad3      	subs	r3, r2, r3
 8009920:	607b      	str	r3, [r7, #4]
    WrOff           += NumBytesToWrite;
 8009922:	69fa      	ldr	r2, [r7, #28]
 8009924:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009926:	4413      	add	r3, r2
 8009928:	61fb      	str	r3, [r7, #28]
#endif
    if (WrOff == pRing->SizeOfBuffer) {
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	689b      	ldr	r3, [r3, #8]
 800992e:	69fa      	ldr	r2, [r7, #28]
 8009930:	429a      	cmp	r2, r3
 8009932:	d101      	bne.n	8009938 <_WriteBlocking+0xa0>
      WrOff = 0u;
 8009934:	2300      	movs	r3, #0
 8009936:	61fb      	str	r3, [r7, #28]
    }
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8009938:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff;
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	69fa      	ldr	r2, [r7, #28]
 8009940:	60da      	str	r2, [r3, #12]
  } while (NumBytes);
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d1b2      	bne.n	80098ae <_WriteBlocking+0x16>
  return NumBytesWritten;
 8009948:	6a3b      	ldr	r3, [r7, #32]
}
 800994a:	4618      	mov	r0, r3
 800994c:	3728      	adds	r7, #40	@ 0x28
 800994e:	46bd      	mov	sp, r7
 8009950:	bd80      	pop	{r7, pc}

08009952 <_WriteNoCheck>:
*    NumBytes     Number of bytes to be stored in the SEGGER RTT control block.
*
*  Notes
*    (1) If there might not be enough space in the "Up"-buffer, call _WriteBlocking
*/
static void _WriteNoCheck(SEGGER_RTT_BUFFER_UP* pRing, const char* pData, unsigned NumBytes) {
 8009952:	b580      	push	{r7, lr}
 8009954:	b088      	sub	sp, #32
 8009956:	af00      	add	r7, sp, #0
 8009958:	60f8      	str	r0, [r7, #12]
 800995a:	60b9      	str	r1, [r7, #8]
 800995c:	607a      	str	r2, [r7, #4]
  unsigned NumBytesAtOnce;
  unsigned WrOff;
  unsigned Rem;
  volatile char* pDst;

  WrOff = pRing->WrOff;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	68db      	ldr	r3, [r3, #12]
 8009962:	61fb      	str	r3, [r7, #28]
  Rem = pRing->SizeOfBuffer - WrOff;
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	689a      	ldr	r2, [r3, #8]
 8009968:	69fb      	ldr	r3, [r7, #28]
 800996a:	1ad3      	subs	r3, r2, r3
 800996c:	61bb      	str	r3, [r7, #24]
  if (Rem > NumBytes) {
 800996e:	69ba      	ldr	r2, [r7, #24]
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	429a      	cmp	r2, r3
 8009974:	d911      	bls.n	800999a <_WriteNoCheck+0x48>
    //
    // All data fits before wrap around
    //
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 8009976:	68fb      	ldr	r3, [r7, #12]
 8009978:	685a      	ldr	r2, [r3, #4]
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	4413      	add	r3, r2
 800997e:	613b      	str	r3, [r7, #16]
      *pDst++ = *pData++;
    };
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = WrOff;
#else
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytes);
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	68b9      	ldr	r1, [r7, #8]
 8009984:	6938      	ldr	r0, [r7, #16]
 8009986:	f002 f98a 	bl	800bc9e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 800998a:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = WrOff + NumBytes;
 800998e:	69fa      	ldr	r2, [r7, #28]
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	441a      	add	r2, r3
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	60da      	str	r2, [r3, #12]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
    pRing->WrOff = NumBytesAtOnce;
#endif
  }
}
 8009998:	e01f      	b.n	80099da <_WriteNoCheck+0x88>
    NumBytesAtOnce = Rem;
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	617b      	str	r3, [r7, #20]
    pDst = (pRing->pBuffer + WrOff) + SEGGER_RTT_UNCACHED_OFF;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	685a      	ldr	r2, [r3, #4]
 80099a2:	69fb      	ldr	r3, [r7, #28]
 80099a4:	4413      	add	r3, r2
 80099a6:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData, NumBytesAtOnce);
 80099a8:	697a      	ldr	r2, [r7, #20]
 80099aa:	68b9      	ldr	r1, [r7, #8]
 80099ac:	6938      	ldr	r0, [r7, #16]
 80099ae:	f002 f976 	bl	800bc9e <memcpy>
    NumBytesAtOnce = NumBytes - Rem;
 80099b2:	687a      	ldr	r2, [r7, #4]
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	617b      	str	r3, [r7, #20]
    pDst = pRing->pBuffer + SEGGER_RTT_UNCACHED_OFF;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	685b      	ldr	r3, [r3, #4]
 80099be:	613b      	str	r3, [r7, #16]
    SEGGER_RTT_MEMCPY((void*)pDst, pData + Rem, NumBytesAtOnce);
 80099c0:	68ba      	ldr	r2, [r7, #8]
 80099c2:	69bb      	ldr	r3, [r7, #24]
 80099c4:	4413      	add	r3, r2
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	4619      	mov	r1, r3
 80099ca:	6938      	ldr	r0, [r7, #16]
 80099cc:	f002 f967 	bl	800bc9e <memcpy>
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 80099d0:	f3bf 8f5f 	dmb	sy
    pRing->WrOff = NumBytesAtOnce;
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	697a      	ldr	r2, [r7, #20]
 80099d8:	60da      	str	r2, [r3, #12]
}
 80099da:	bf00      	nop
 80099dc:	3720      	adds	r7, #32
 80099de:	46bd      	mov	sp, r7
 80099e0:	bd80      	pop	{r7, pc}

080099e2 <_GetAvailWriteSpace>:
*    pRing        Ring buffer to check.
*
*  Return value
*    Number of bytes that are free in the buffer.
*/
static unsigned _GetAvailWriteSpace(SEGGER_RTT_BUFFER_UP* pRing) {
 80099e2:	b480      	push	{r7}
 80099e4:	b087      	sub	sp, #28
 80099e6:	af00      	add	r7, sp, #0
 80099e8:	6078      	str	r0, [r7, #4]
  unsigned r;
  //
  // Avoid warnings regarding volatile access order.  It's not a problem
  // in this case, but dampen compiler enthusiasm.
  //
  RdOff = pRing->RdOff;
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	691b      	ldr	r3, [r3, #16]
 80099ee:	613b      	str	r3, [r7, #16]
  WrOff = pRing->WrOff;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	68db      	ldr	r3, [r3, #12]
 80099f4:	60fb      	str	r3, [r7, #12]
  if (RdOff <= WrOff) {
 80099f6:	693a      	ldr	r2, [r7, #16]
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	429a      	cmp	r2, r3
 80099fc:	d808      	bhi.n	8009a10 <_GetAvailWriteSpace+0x2e>
    r = pRing->SizeOfBuffer - 1u - WrOff + RdOff;
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	689a      	ldr	r2, [r3, #8]
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	1ad2      	subs	r2, r2, r3
 8009a06:	693b      	ldr	r3, [r7, #16]
 8009a08:	4413      	add	r3, r2
 8009a0a:	3b01      	subs	r3, #1
 8009a0c:	617b      	str	r3, [r7, #20]
 8009a0e:	e004      	b.n	8009a1a <_GetAvailWriteSpace+0x38>
  } else {
    r = RdOff - WrOff - 1u;
 8009a10:	693a      	ldr	r2, [r7, #16]
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	1ad3      	subs	r3, r2, r3
 8009a16:	3b01      	subs	r3, #1
 8009a18:	617b      	str	r3, [r7, #20]
  }
  return r;
 8009a1a:	697b      	ldr	r3, [r7, #20]
}
 8009a1c:	4618      	mov	r0, r3
 8009a1e:	371c      	adds	r7, #28
 8009a20:	46bd      	mov	sp, r7
 8009a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a26:	4770      	bx	lr

08009a28 <SEGGER_RTT_ReadNoLock>:
*    BufferSize   Size of the target application buffer.
*
*  Return value
*    Number of bytes that have been read.
*/
unsigned SEGGER_RTT_ReadNoLock(unsigned BufferIndex, void* pData, unsigned BufferSize) {
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b08c      	sub	sp, #48	@ 0x30
 8009a2c:	af00      	add	r7, sp, #0
 8009a2e:	60f8      	str	r0, [r7, #12]
 8009a30:	60b9      	str	r1, [r7, #8]
 8009a32:	607a      	str	r2, [r7, #4]
  unsigned                WrOff;
  unsigned char*          pBuffer;
  SEGGER_RTT_BUFFER_DOWN* pRing;
  volatile char*          pSrc;
  //
  INIT();
 8009a34:	4b3e      	ldr	r3, [pc, #248]	@ (8009b30 <SEGGER_RTT_ReadNoLock+0x108>)
 8009a36:	623b      	str	r3, [r7, #32]
 8009a38:	6a3b      	ldr	r3, [r7, #32]
 8009a3a:	781b      	ldrb	r3, [r3, #0]
 8009a3c:	b2db      	uxtb	r3, r3
 8009a3e:	2b53      	cmp	r3, #83	@ 0x53
 8009a40:	d001      	beq.n	8009a46 <SEGGER_RTT_ReadNoLock+0x1e>
 8009a42:	f7ff fecf 	bl	80097e4 <_DoInit>
  pRing = (SEGGER_RTT_BUFFER_DOWN*)((uintptr_t)&_SEGGER_RTT.aDown[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009a46:	68fa      	ldr	r2, [r7, #12]
 8009a48:	4613      	mov	r3, r2
 8009a4a:	005b      	lsls	r3, r3, #1
 8009a4c:	4413      	add	r3, r2
 8009a4e:	00db      	lsls	r3, r3, #3
 8009a50:	3360      	adds	r3, #96	@ 0x60
 8009a52:	4a37      	ldr	r2, [pc, #220]	@ (8009b30 <SEGGER_RTT_ReadNoLock+0x108>)
 8009a54:	4413      	add	r3, r2
 8009a56:	61fb      	str	r3, [r7, #28]
  pBuffer = (unsigned char*)pData;
 8009a58:	68bb      	ldr	r3, [r7, #8]
 8009a5a:	627b      	str	r3, [r7, #36]	@ 0x24
  RdOff = pRing->RdOff;
 8009a5c:	69fb      	ldr	r3, [r7, #28]
 8009a5e:	691b      	ldr	r3, [r3, #16]
 8009a60:	62bb      	str	r3, [r7, #40]	@ 0x28
  WrOff = pRing->WrOff;
 8009a62:	69fb      	ldr	r3, [r7, #28]
 8009a64:	68db      	ldr	r3, [r3, #12]
 8009a66:	61bb      	str	r3, [r7, #24]
  NumBytesRead = 0u;
 8009a68:	2300      	movs	r3, #0
 8009a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  //
  // Read from current read position to wrap-around of buffer, first
  //
  if (RdOff > WrOff) {
 8009a6c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	429a      	cmp	r2, r3
 8009a72:	d92b      	bls.n	8009acc <SEGGER_RTT_ReadNoLock+0xa4>
    NumBytesRem = pRing->SizeOfBuffer - RdOff;
 8009a74:	69fb      	ldr	r3, [r7, #28]
 8009a76:	689a      	ldr	r2, [r3, #8]
 8009a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a7a:	1ad3      	subs	r3, r2, r3
 8009a7c:	617b      	str	r3, [r7, #20]
    NumBytesRem = MIN(NumBytesRem, BufferSize);
 8009a7e:	697a      	ldr	r2, [r7, #20]
 8009a80:	687b      	ldr	r3, [r7, #4]
 8009a82:	4293      	cmp	r3, r2
 8009a84:	bf28      	it	cs
 8009a86:	4613      	movcs	r3, r2
 8009a88:	617b      	str	r3, [r7, #20]
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8009a8a:	69fb      	ldr	r3, [r7, #28]
 8009a8c:	685a      	ldr	r2, [r3, #4]
 8009a8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a90:	4413      	add	r3, r2
 8009a92:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8009a94:	697a      	ldr	r2, [r7, #20]
 8009a96:	6939      	ldr	r1, [r7, #16]
 8009a98:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009a9a:	f002 f900 	bl	800bc9e <memcpy>
    NumBytesRead += NumBytesRem;
 8009a9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009aa0:	697b      	ldr	r3, [r7, #20]
 8009aa2:	4413      	add	r3, r2
 8009aa4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8009aa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009aa8:	697b      	ldr	r3, [r7, #20]
 8009aaa:	4413      	add	r3, r2
 8009aac:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8009aae:	687a      	ldr	r2, [r7, #4]
 8009ab0:	697b      	ldr	r3, [r7, #20]
 8009ab2:	1ad3      	subs	r3, r2, r3
 8009ab4:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8009ab6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	4413      	add	r3, r2
 8009abc:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
    //
    // Handle wrap-around of buffer
    //
    if (RdOff == pRing->SizeOfBuffer) {
 8009abe:	69fb      	ldr	r3, [r7, #28]
 8009ac0:	689b      	ldr	r3, [r3, #8]
 8009ac2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009ac4:	429a      	cmp	r2, r3
 8009ac6:	d101      	bne.n	8009acc <SEGGER_RTT_ReadNoLock+0xa4>
      RdOff = 0u;
 8009ac8:	2300      	movs	r3, #0
 8009aca:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  //
  // Read remaining items of buffer
  //
  NumBytesRem = WrOff - RdOff;
 8009acc:	69ba      	ldr	r2, [r7, #24]
 8009ace:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009ad0:	1ad3      	subs	r3, r2, r3
 8009ad2:	617b      	str	r3, [r7, #20]
  NumBytesRem = MIN(NumBytesRem, BufferSize);
 8009ad4:	697a      	ldr	r2, [r7, #20]
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	4293      	cmp	r3, r2
 8009ada:	bf28      	it	cs
 8009adc:	4613      	movcs	r3, r2
 8009ade:	617b      	str	r3, [r7, #20]
  if (NumBytesRem > 0u) {
 8009ae0:	697b      	ldr	r3, [r7, #20]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d019      	beq.n	8009b1a <SEGGER_RTT_ReadNoLock+0xf2>
    pSrc = (pRing->pBuffer + RdOff) + SEGGER_RTT_UNCACHED_OFF;
 8009ae6:	69fb      	ldr	r3, [r7, #28]
 8009ae8:	685a      	ldr	r2, [r3, #4]
 8009aea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009aec:	4413      	add	r3, r2
 8009aee:	613b      	str	r3, [r7, #16]
    RdOff        += NumBytesRem;
    while (NumBytesRem--) {
      *pBuffer++ = *pSrc++;
    };
#else
    SEGGER_RTT_MEMCPY(pBuffer, (void*)pSrc, NumBytesRem);
 8009af0:	697a      	ldr	r2, [r7, #20]
 8009af2:	6939      	ldr	r1, [r7, #16]
 8009af4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8009af6:	f002 f8d2 	bl	800bc9e <memcpy>
    NumBytesRead += NumBytesRem;
 8009afa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	4413      	add	r3, r2
 8009b00:	62fb      	str	r3, [r7, #44]	@ 0x2c
    pBuffer      += NumBytesRem;
 8009b02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009b04:	697b      	ldr	r3, [r7, #20]
 8009b06:	4413      	add	r3, r2
 8009b08:	627b      	str	r3, [r7, #36]	@ 0x24
    BufferSize   -= NumBytesRem;
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	697b      	ldr	r3, [r7, #20]
 8009b0e:	1ad3      	subs	r3, r2, r3
 8009b10:	607b      	str	r3, [r7, #4]
    RdOff        += NumBytesRem;
 8009b12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b14:	697b      	ldr	r3, [r7, #20]
 8009b16:	4413      	add	r3, r2
 8009b18:	62bb      	str	r3, [r7, #40]	@ 0x28
#endif
  }
  if (NumBytesRead) {
 8009b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d002      	beq.n	8009b26 <SEGGER_RTT_ReadNoLock+0xfe>
    pRing->RdOff = RdOff;
 8009b20:	69fb      	ldr	r3, [r7, #28]
 8009b22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009b24:	611a      	str	r2, [r3, #16]
  }
  //
  return NumBytesRead;
 8009b26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8009b28:	4618      	mov	r0, r3
 8009b2a:	3730      	adds	r7, #48	@ 0x30
 8009b2c:	46bd      	mov	sp, r7
 8009b2e:	bd80      	pop	{r7, pc}
 8009b30:	20013200 	.word	0x20013200

08009b34 <SEGGER_RTT_WriteNoLock>:
*    (1) Data is stored according to buffer flags.
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
unsigned SEGGER_RTT_WriteNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b088      	sub	sp, #32
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
  const char*           pData;
  SEGGER_RTT_BUFFER_UP* pRing;
  //
  // Get "to-host" ring buffer.
  //
  pData = (const char *)pBuffer;
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	61bb      	str	r3, [r7, #24]
  pRing = (SEGGER_RTT_BUFFER_UP*)((uintptr_t)&_SEGGER_RTT.aUp[BufferIndex] + SEGGER_RTT_UNCACHED_OFF);  // Access uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	1c5a      	adds	r2, r3, #1
 8009b48:	4613      	mov	r3, r2
 8009b4a:	005b      	lsls	r3, r3, #1
 8009b4c:	4413      	add	r3, r2
 8009b4e:	00db      	lsls	r3, r3, #3
 8009b50:	4a1f      	ldr	r2, [pc, #124]	@ (8009bd0 <SEGGER_RTT_WriteNoLock+0x9c>)
 8009b52:	4413      	add	r3, r2
 8009b54:	617b      	str	r3, [r7, #20]
  //
  // How we output depends upon the mode...
  //
  switch (pRing->Flags) {
 8009b56:	697b      	ldr	r3, [r7, #20]
 8009b58:	695b      	ldr	r3, [r3, #20]
 8009b5a:	2b02      	cmp	r3, #2
 8009b5c:	d029      	beq.n	8009bb2 <SEGGER_RTT_WriteNoLock+0x7e>
 8009b5e:	2b02      	cmp	r3, #2
 8009b60:	d82e      	bhi.n	8009bc0 <SEGGER_RTT_WriteNoLock+0x8c>
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d002      	beq.n	8009b6c <SEGGER_RTT_WriteNoLock+0x38>
 8009b66:	2b01      	cmp	r3, #1
 8009b68:	d013      	beq.n	8009b92 <SEGGER_RTT_WriteNoLock+0x5e>
 8009b6a:	e029      	b.n	8009bc0 <SEGGER_RTT_WriteNoLock+0x8c>
  case SEGGER_RTT_MODE_NO_BLOCK_SKIP:
    //
    // If we are in skip mode and there is no space for the whole
    // of this output, don't bother.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8009b6c:	6978      	ldr	r0, [r7, #20]
 8009b6e:	f7ff ff38 	bl	80099e2 <_GetAvailWriteSpace>
 8009b72:	6138      	str	r0, [r7, #16]
    if (Avail < NumBytes) {
 8009b74:	693a      	ldr	r2, [r7, #16]
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	429a      	cmp	r2, r3
 8009b7a:	d202      	bcs.n	8009b82 <SEGGER_RTT_WriteNoLock+0x4e>
      Status = 0u;
 8009b7c:	2300      	movs	r3, #0
 8009b7e:	61fb      	str	r3, [r7, #28]
    } else {
      Status = NumBytes;
      _WriteNoCheck(pRing, pData, NumBytes);
    }
    break;
 8009b80:	e021      	b.n	8009bc6 <SEGGER_RTT_WriteNoLock+0x92>
      Status = NumBytes;
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	61fb      	str	r3, [r7, #28]
      _WriteNoCheck(pRing, pData, NumBytes);
 8009b86:	687a      	ldr	r2, [r7, #4]
 8009b88:	69b9      	ldr	r1, [r7, #24]
 8009b8a:	6978      	ldr	r0, [r7, #20]
 8009b8c:	f7ff fee1 	bl	8009952 <_WriteNoCheck>
    break;
 8009b90:	e019      	b.n	8009bc6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_NO_BLOCK_TRIM:
    //
    // If we are in trim mode, trim to what we can output without blocking.
    //
    Avail = _GetAvailWriteSpace(pRing);
 8009b92:	6978      	ldr	r0, [r7, #20]
 8009b94:	f7ff ff25 	bl	80099e2 <_GetAvailWriteSpace>
 8009b98:	6138      	str	r0, [r7, #16]
    Status = Avail < NumBytes ? Avail : NumBytes;
 8009b9a:	687a      	ldr	r2, [r7, #4]
 8009b9c:	693b      	ldr	r3, [r7, #16]
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	bf28      	it	cs
 8009ba2:	4613      	movcs	r3, r2
 8009ba4:	61fb      	str	r3, [r7, #28]
    _WriteNoCheck(pRing, pData, Status);
 8009ba6:	69fa      	ldr	r2, [r7, #28]
 8009ba8:	69b9      	ldr	r1, [r7, #24]
 8009baa:	6978      	ldr	r0, [r7, #20]
 8009bac:	f7ff fed1 	bl	8009952 <_WriteNoCheck>
    break;
 8009bb0:	e009      	b.n	8009bc6 <SEGGER_RTT_WriteNoLock+0x92>
  case SEGGER_RTT_MODE_BLOCK_IF_FIFO_FULL:
    //
    // If we are in blocking mode, output everything.
    //
    Status = _WriteBlocking(pRing, pData, NumBytes);
 8009bb2:	687a      	ldr	r2, [r7, #4]
 8009bb4:	69b9      	ldr	r1, [r7, #24]
 8009bb6:	6978      	ldr	r0, [r7, #20]
 8009bb8:	f7ff fe6e 	bl	8009898 <_WriteBlocking>
 8009bbc:	61f8      	str	r0, [r7, #28]
    break;
 8009bbe:	e002      	b.n	8009bc6 <SEGGER_RTT_WriteNoLock+0x92>
  default:
    Status = 0u;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	61fb      	str	r3, [r7, #28]
    break;
 8009bc4:	bf00      	nop
  }
  //
  // Finish up.
  //
  return Status;
 8009bc6:	69fb      	ldr	r3, [r7, #28]
}
 8009bc8:	4618      	mov	r0, r3
 8009bca:	3720      	adds	r7, #32
 8009bcc:	46bd      	mov	sp, r7
 8009bce:	bd80      	pop	{r7, pc}
 8009bd0:	20013200 	.word	0x20013200

08009bd4 <SEGGER_RTT_Write>:
*    Number of bytes which have been stored in the "Up"-buffer.
*
*  Notes
*    (1) Data is stored according to buffer flags.
*/
unsigned SEGGER_RTT_Write(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b088      	sub	sp, #32
 8009bd8:	af00      	add	r7, sp, #0
 8009bda:	60f8      	str	r0, [r7, #12]
 8009bdc:	60b9      	str	r1, [r7, #8]
 8009bde:	607a      	str	r2, [r7, #4]
  unsigned Status;

  INIT();
 8009be0:	4b0e      	ldr	r3, [pc, #56]	@ (8009c1c <SEGGER_RTT_Write+0x48>)
 8009be2:	61fb      	str	r3, [r7, #28]
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	b2db      	uxtb	r3, r3
 8009bea:	2b53      	cmp	r3, #83	@ 0x53
 8009bec:	d001      	beq.n	8009bf2 <SEGGER_RTT_Write+0x1e>
 8009bee:	f7ff fdf9 	bl	80097e4 <_DoInit>
  SEGGER_RTT_LOCK();
 8009bf2:	f3ef 8311 	mrs	r3, BASEPRI
 8009bf6:	f04f 0120 	mov.w	r1, #32
 8009bfa:	f381 8811 	msr	BASEPRI, r1
 8009bfe:	61bb      	str	r3, [r7, #24]
  Status = SEGGER_RTT_WriteNoLock(BufferIndex, pBuffer, NumBytes);  // Call the non-locking write function
 8009c00:	687a      	ldr	r2, [r7, #4]
 8009c02:	68b9      	ldr	r1, [r7, #8]
 8009c04:	68f8      	ldr	r0, [r7, #12]
 8009c06:	f7ff ff95 	bl	8009b34 <SEGGER_RTT_WriteNoLock>
 8009c0a:	6178      	str	r0, [r7, #20]
  SEGGER_RTT_UNLOCK();
 8009c0c:	69bb      	ldr	r3, [r7, #24]
 8009c0e:	f383 8811 	msr	BASEPRI, r3
  return Status;
 8009c12:	697b      	ldr	r3, [r7, #20]
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3720      	adds	r7, #32
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}
 8009c1c:	20013200 	.word	0x20013200

08009c20 <SEGGER_RTT_AllocUpBuffer>:
*
*  Return value
*    >= 0 - O.K. Buffer Index
*     < 0 - Error
*/
int SEGGER_RTT_AllocUpBuffer(const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b088      	sub	sp, #32
 8009c24:	af00      	add	r7, sp, #0
 8009c26:	60f8      	str	r0, [r7, #12]
 8009c28:	60b9      	str	r1, [r7, #8]
 8009c2a:	607a      	str	r2, [r7, #4]
 8009c2c:	603b      	str	r3, [r7, #0]
  int BufferIndex;
  volatile SEGGER_RTT_CB* pRTTCB;

  INIT();
 8009c2e:	4b3d      	ldr	r3, [pc, #244]	@ (8009d24 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8009c30:	61bb      	str	r3, [r7, #24]
 8009c32:	69bb      	ldr	r3, [r7, #24]
 8009c34:	781b      	ldrb	r3, [r3, #0]
 8009c36:	b2db      	uxtb	r3, r3
 8009c38:	2b53      	cmp	r3, #83	@ 0x53
 8009c3a:	d001      	beq.n	8009c40 <SEGGER_RTT_AllocUpBuffer+0x20>
 8009c3c:	f7ff fdd2 	bl	80097e4 <_DoInit>
  SEGGER_RTT_LOCK();
 8009c40:	f3ef 8311 	mrs	r3, BASEPRI
 8009c44:	f04f 0120 	mov.w	r1, #32
 8009c48:	f381 8811 	msr	BASEPRI, r1
 8009c4c:	617b      	str	r3, [r7, #20]
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009c4e:	4b35      	ldr	r3, [pc, #212]	@ (8009d24 <SEGGER_RTT_AllocUpBuffer+0x104>)
 8009c50:	613b      	str	r3, [r7, #16]
  BufferIndex = 0;
 8009c52:	2300      	movs	r3, #0
 8009c54:	61fb      	str	r3, [r7, #28]
  do {
    if (pRTTCB->aUp[BufferIndex].pBuffer == NULL) {
 8009c56:	6939      	ldr	r1, [r7, #16]
 8009c58:	69fb      	ldr	r3, [r7, #28]
 8009c5a:	1c5a      	adds	r2, r3, #1
 8009c5c:	4613      	mov	r3, r2
 8009c5e:	005b      	lsls	r3, r3, #1
 8009c60:	4413      	add	r3, r2
 8009c62:	00db      	lsls	r3, r3, #3
 8009c64:	440b      	add	r3, r1
 8009c66:	3304      	adds	r3, #4
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	2b00      	cmp	r3, #0
 8009c6c:	d008      	beq.n	8009c80 <SEGGER_RTT_AllocUpBuffer+0x60>
      break;
    }
    BufferIndex++;
 8009c6e:	69fb      	ldr	r3, [r7, #28]
 8009c70:	3301      	adds	r3, #1
 8009c72:	61fb      	str	r3, [r7, #28]
  } while (BufferIndex < pRTTCB->MaxNumUpBuffers);
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	691b      	ldr	r3, [r3, #16]
 8009c78:	69fa      	ldr	r2, [r7, #28]
 8009c7a:	429a      	cmp	r2, r3
 8009c7c:	dbeb      	blt.n	8009c56 <SEGGER_RTT_AllocUpBuffer+0x36>
 8009c7e:	e000      	b.n	8009c82 <SEGGER_RTT_AllocUpBuffer+0x62>
      break;
 8009c80:	bf00      	nop
  if (BufferIndex < pRTTCB->MaxNumUpBuffers) {
 8009c82:	693b      	ldr	r3, [r7, #16]
 8009c84:	691b      	ldr	r3, [r3, #16]
 8009c86:	69fa      	ldr	r2, [r7, #28]
 8009c88:	429a      	cmp	r2, r3
 8009c8a:	da3f      	bge.n	8009d0c <SEGGER_RTT_AllocUpBuffer+0xec>
    pRTTCB->aUp[BufferIndex].sName        = sName;
 8009c8c:	6939      	ldr	r1, [r7, #16]
 8009c8e:	69fb      	ldr	r3, [r7, #28]
 8009c90:	1c5a      	adds	r2, r3, #1
 8009c92:	4613      	mov	r3, r2
 8009c94:	005b      	lsls	r3, r3, #1
 8009c96:	4413      	add	r3, r2
 8009c98:	00db      	lsls	r3, r3, #3
 8009c9a:	440b      	add	r3, r1
 8009c9c:	68fa      	ldr	r2, [r7, #12]
 8009c9e:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].pBuffer      = (char*)pBuffer;
 8009ca0:	6939      	ldr	r1, [r7, #16]
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	1c5a      	adds	r2, r3, #1
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	005b      	lsls	r3, r3, #1
 8009caa:	4413      	add	r3, r2
 8009cac:	00db      	lsls	r3, r3, #3
 8009cae:	440b      	add	r3, r1
 8009cb0:	3304      	adds	r3, #4
 8009cb2:	68ba      	ldr	r2, [r7, #8]
 8009cb4:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].SizeOfBuffer = BufferSize;
 8009cb6:	6939      	ldr	r1, [r7, #16]
 8009cb8:	69fa      	ldr	r2, [r7, #28]
 8009cba:	4613      	mov	r3, r2
 8009cbc:	005b      	lsls	r3, r3, #1
 8009cbe:	4413      	add	r3, r2
 8009cc0:	00db      	lsls	r3, r3, #3
 8009cc2:	440b      	add	r3, r1
 8009cc4:	3320      	adds	r3, #32
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].RdOff        = 0u;
 8009cca:	6939      	ldr	r1, [r7, #16]
 8009ccc:	69fa      	ldr	r2, [r7, #28]
 8009cce:	4613      	mov	r3, r2
 8009cd0:	005b      	lsls	r3, r3, #1
 8009cd2:	4413      	add	r3, r2
 8009cd4:	00db      	lsls	r3, r3, #3
 8009cd6:	440b      	add	r3, r1
 8009cd8:	3328      	adds	r3, #40	@ 0x28
 8009cda:	2200      	movs	r2, #0
 8009cdc:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].WrOff        = 0u;
 8009cde:	6939      	ldr	r1, [r7, #16]
 8009ce0:	69fa      	ldr	r2, [r7, #28]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	005b      	lsls	r3, r3, #1
 8009ce6:	4413      	add	r3, r2
 8009ce8:	00db      	lsls	r3, r3, #3
 8009cea:	440b      	add	r3, r1
 8009cec:	3324      	adds	r3, #36	@ 0x24
 8009cee:	2200      	movs	r2, #0
 8009cf0:	601a      	str	r2, [r3, #0]
    pRTTCB->aUp[BufferIndex].Flags        = Flags;
 8009cf2:	6939      	ldr	r1, [r7, #16]
 8009cf4:	69fa      	ldr	r2, [r7, #28]
 8009cf6:	4613      	mov	r3, r2
 8009cf8:	005b      	lsls	r3, r3, #1
 8009cfa:	4413      	add	r3, r2
 8009cfc:	00db      	lsls	r3, r3, #3
 8009cfe:	440b      	add	r3, r1
 8009d00:	332c      	adds	r3, #44	@ 0x2c
 8009d02:	683a      	ldr	r2, [r7, #0]
 8009d04:	601a      	str	r2, [r3, #0]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8009d06:	f3bf 8f5f 	dmb	sy
 8009d0a:	e002      	b.n	8009d12 <SEGGER_RTT_AllocUpBuffer+0xf2>
  } else {
    BufferIndex = -1;
 8009d0c:	f04f 33ff 	mov.w	r3, #4294967295
 8009d10:	61fb      	str	r3, [r7, #28]
  }
  SEGGER_RTT_UNLOCK();
 8009d12:	697b      	ldr	r3, [r7, #20]
 8009d14:	f383 8811 	msr	BASEPRI, r3
  return BufferIndex;
 8009d18:	69fb      	ldr	r3, [r7, #28]
}
 8009d1a:	4618      	mov	r0, r3
 8009d1c:	3720      	adds	r7, #32
 8009d1e:	46bd      	mov	sp, r7
 8009d20:	bd80      	pop	{r7, pc}
 8009d22:	bf00      	nop
 8009d24:	20013200 	.word	0x20013200

08009d28 <SEGGER_RTT_ConfigDownBuffer>:
*  Additional information
*    Buffer 0 is configured on compile-time.
*    May only be called once per buffer.
*    Buffer name and flags can be reconfigured using the appropriate functions.
*/
int SEGGER_RTT_ConfigDownBuffer(unsigned BufferIndex, const char* sName, void* pBuffer, unsigned BufferSize, unsigned Flags) {
 8009d28:	b580      	push	{r7, lr}
 8009d2a:	b08a      	sub	sp, #40	@ 0x28
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	60f8      	str	r0, [r7, #12]
 8009d30:	60b9      	str	r1, [r7, #8]
 8009d32:	607a      	str	r2, [r7, #4]
 8009d34:	603b      	str	r3, [r7, #0]
  int r;
  volatile SEGGER_RTT_CB* pRTTCB;
  volatile SEGGER_RTT_BUFFER_DOWN* pDown;

  INIT();
 8009d36:	4b21      	ldr	r3, [pc, #132]	@ (8009dbc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8009d38:	623b      	str	r3, [r7, #32]
 8009d3a:	6a3b      	ldr	r3, [r7, #32]
 8009d3c:	781b      	ldrb	r3, [r3, #0]
 8009d3e:	b2db      	uxtb	r3, r3
 8009d40:	2b53      	cmp	r3, #83	@ 0x53
 8009d42:	d001      	beq.n	8009d48 <SEGGER_RTT_ConfigDownBuffer+0x20>
 8009d44:	f7ff fd4e 	bl	80097e4 <_DoInit>
  pRTTCB = (volatile SEGGER_RTT_CB*)((uintptr_t)&_SEGGER_RTT + SEGGER_RTT_UNCACHED_OFF);  // Access RTTCB uncached to make sure we see changes made by the J-Link side and all of our changes go into HW directly
 8009d48:	4b1c      	ldr	r3, [pc, #112]	@ (8009dbc <SEGGER_RTT_ConfigDownBuffer+0x94>)
 8009d4a:	61fb      	str	r3, [r7, #28]
  if (BufferIndex < SEGGER_RTT_MAX_NUM_DOWN_BUFFERS) {
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	2b02      	cmp	r3, #2
 8009d50:	d82c      	bhi.n	8009dac <SEGGER_RTT_ConfigDownBuffer+0x84>
    SEGGER_RTT_LOCK();
 8009d52:	f3ef 8311 	mrs	r3, BASEPRI
 8009d56:	f04f 0120 	mov.w	r1, #32
 8009d5a:	f381 8811 	msr	BASEPRI, r1
 8009d5e:	61bb      	str	r3, [r7, #24]
    pDown = &pRTTCB->aDown[BufferIndex];
 8009d60:	68fa      	ldr	r2, [r7, #12]
 8009d62:	4613      	mov	r3, r2
 8009d64:	005b      	lsls	r3, r3, #1
 8009d66:	4413      	add	r3, r2
 8009d68:	00db      	lsls	r3, r3, #3
 8009d6a:	3360      	adds	r3, #96	@ 0x60
 8009d6c:	69fa      	ldr	r2, [r7, #28]
 8009d6e:	4413      	add	r3, r2
 8009d70:	617b      	str	r3, [r7, #20]
    if (BufferIndex) {
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00e      	beq.n	8009d96 <SEGGER_RTT_ConfigDownBuffer+0x6e>
      pDown->sName        = sName;
 8009d78:	697b      	ldr	r3, [r7, #20]
 8009d7a:	68ba      	ldr	r2, [r7, #8]
 8009d7c:	601a      	str	r2, [r3, #0]
      pDown->pBuffer      = (char*)pBuffer;
 8009d7e:	697b      	ldr	r3, [r7, #20]
 8009d80:	687a      	ldr	r2, [r7, #4]
 8009d82:	605a      	str	r2, [r3, #4]
      pDown->SizeOfBuffer = BufferSize;
 8009d84:	697b      	ldr	r3, [r7, #20]
 8009d86:	683a      	ldr	r2, [r7, #0]
 8009d88:	609a      	str	r2, [r3, #8]
      pDown->RdOff        = 0u;
 8009d8a:	697b      	ldr	r3, [r7, #20]
 8009d8c:	2200      	movs	r2, #0
 8009d8e:	611a      	str	r2, [r3, #16]
      pDown->WrOff        = 0u;
 8009d90:	697b      	ldr	r3, [r7, #20]
 8009d92:	2200      	movs	r2, #0
 8009d94:	60da      	str	r2, [r3, #12]
    }
    pDown->Flags          = Flags;
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d9a:	615a      	str	r2, [r3, #20]
    RTT__DMB();                     // Force data write to be complete before writing the <WrOff>, in case CPU is allowed to change the order of memory accesses
 8009d9c:	f3bf 8f5f 	dmb	sy
    SEGGER_RTT_UNLOCK();
 8009da0:	69bb      	ldr	r3, [r7, #24]
 8009da2:	f383 8811 	msr	BASEPRI, r3
    r =  0;
 8009da6:	2300      	movs	r3, #0
 8009da8:	627b      	str	r3, [r7, #36]	@ 0x24
 8009daa:	e002      	b.n	8009db2 <SEGGER_RTT_ConfigDownBuffer+0x8a>
  } else {
    r = -1;
 8009dac:	f04f 33ff 	mov.w	r3, #4294967295
 8009db0:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  return r;
 8009db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	3728      	adds	r7, #40	@ 0x28
 8009db8:	46bd      	mov	sp, r7
 8009dba:	bd80      	pop	{r7, pc}
 8009dbc:	20013200 	.word	0x20013200

08009dc0 <_EncodeStr>:
*  Additional information
*    The string is encoded as a count byte followed by the contents
*    of the string.
*    No more than 1 + Limit bytes will be encoded to the payload.
*/
static U8 *_EncodeStr(U8 *pPayload, const char *pText, unsigned int Limit) {
 8009dc0:	b480      	push	{r7}
 8009dc2:	b087      	sub	sp, #28
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	607a      	str	r2, [r7, #4]
  U8* pLen;
  const char* sStart;

  sStart = pText; // Remember start of string.
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	617b      	str	r3, [r7, #20]
  //
  // Save space to store count byte(s).
  //
  pLen = pPayload++;
 8009dd0:	68fb      	ldr	r3, [r7, #12]
 8009dd2:	1c5a      	adds	r2, r3, #1
 8009dd4:	60fa      	str	r2, [r7, #12]
 8009dd6:	613b      	str	r3, [r7, #16]
  pPayload += 2;
#endif
  //
  // Limit string to maximum length and copy into payload buffer.
  //
  if (Limit > SEGGER_SYSVIEW_MAX_STRING_LEN) {
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	2b80      	cmp	r3, #128	@ 0x80
 8009ddc:	d90a      	bls.n	8009df4 <_EncodeStr+0x34>
    Limit = SEGGER_SYSVIEW_MAX_STRING_LEN;
 8009dde:	2380      	movs	r3, #128	@ 0x80
 8009de0:	607b      	str	r3, [r7, #4]
  }
  while ((Limit-- > 0) && (*pText != '\0')) {
 8009de2:	e007      	b.n	8009df4 <_EncodeStr+0x34>
    *pPayload++ = *pText++;
 8009de4:	68ba      	ldr	r2, [r7, #8]
 8009de6:	1c53      	adds	r3, r2, #1
 8009de8:	60bb      	str	r3, [r7, #8]
 8009dea:	68fb      	ldr	r3, [r7, #12]
 8009dec:	1c59      	adds	r1, r3, #1
 8009dee:	60f9      	str	r1, [r7, #12]
 8009df0:	7812      	ldrb	r2, [r2, #0]
 8009df2:	701a      	strb	r2, [r3, #0]
  while ((Limit-- > 0) && (*pText != '\0')) {
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	1e5a      	subs	r2, r3, #1
 8009df8:	607a      	str	r2, [r7, #4]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d003      	beq.n	8009e06 <_EncodeStr+0x46>
 8009dfe:	68bb      	ldr	r3, [r7, #8]
 8009e00:	781b      	ldrb	r3, [r3, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d1ee      	bne.n	8009de4 <_EncodeStr+0x24>
  Limit = (unsigned int)(pText - sStart);
  *pLen++ = (U8)255;
  *pLen++ = (U8)((Limit >> 8) & 255);
  *pLen++ = (U8)(Limit & 255);
#else   // Length always encodes in 1 byte
  *pLen = (U8)(pText - sStart);
 8009e06:	68ba      	ldr	r2, [r7, #8]
 8009e08:	697b      	ldr	r3, [r7, #20]
 8009e0a:	1ad3      	subs	r3, r2, r3
 8009e0c:	b2da      	uxtb	r2, r3
 8009e0e:	693b      	ldr	r3, [r7, #16]
 8009e10:	701a      	strb	r2, [r3, #0]
#endif
  //
  return pPayload;
 8009e12:	68fb      	ldr	r3, [r7, #12]
}
 8009e14:	4618      	mov	r0, r3
 8009e16:	371c      	adds	r7, #28
 8009e18:	46bd      	mov	sp, r7
 8009e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1e:	4770      	bx	lr

08009e20 <_PreparePacket>:
*  Additional information
*    The payload length and evnetId are not initialized.
*    PreparePacket only reserves space for them and they are
*    computed and filled in by the sending function.
*/
static U8* _PreparePacket(U8* pPacket) {
 8009e20:	b480      	push	{r7}
 8009e22:	b083      	sub	sp, #12
 8009e24:	af00      	add	r7, sp, #0
 8009e26:	6078      	str	r0, [r7, #4]
  return pPacket + _MAX_ID_BYTES + _MAX_DATA_BYTES;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	3307      	adds	r3, #7
}
 8009e2c:	4618      	mov	r0, r3
 8009e2e:	370c      	adds	r7, #12
 8009e30:	46bd      	mov	sp, r7
 8009e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e36:	4770      	bx	lr

08009e38 <_HandleIncomingPacket>:
*    This function is called each time after sending a packet.
*    Processing incoming packets is done asynchronous. SystemView might
*    already have sent event packets after the host has sent a command.
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static void _HandleIncomingPacket(void) {
 8009e38:	b580      	push	{r7, lr}
 8009e3a:	b082      	sub	sp, #8
 8009e3c:	af00      	add	r7, sp, #0
  U8  Cmd;
  unsigned int Status;
  //
  Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009e3e:	4b34      	ldr	r3, [pc, #208]	@ (8009f10 <_HandleIncomingPacket+0xd8>)
 8009e40:	7e1b      	ldrb	r3, [r3, #24]
 8009e42:	4618      	mov	r0, r3
 8009e44:	1cfb      	adds	r3, r7, #3
 8009e46:	2201      	movs	r2, #1
 8009e48:	4619      	mov	r1, r3
 8009e4a:	f7ff fded 	bl	8009a28 <SEGGER_RTT_ReadNoLock>
 8009e4e:	6078      	str	r0, [r7, #4]
  if (Status > 0) {
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d057      	beq.n	8009f06 <_HandleIncomingPacket+0xce>
    switch (Cmd) {
 8009e56:	78fb      	ldrb	r3, [r7, #3]
 8009e58:	2b80      	cmp	r3, #128	@ 0x80
 8009e5a:	d031      	beq.n	8009ec0 <_HandleIncomingPacket+0x88>
 8009e5c:	2b80      	cmp	r3, #128	@ 0x80
 8009e5e:	dc40      	bgt.n	8009ee2 <_HandleIncomingPacket+0xaa>
 8009e60:	2b07      	cmp	r3, #7
 8009e62:	dc15      	bgt.n	8009e90 <_HandleIncomingPacket+0x58>
 8009e64:	2b00      	cmp	r3, #0
 8009e66:	dd3c      	ble.n	8009ee2 <_HandleIncomingPacket+0xaa>
 8009e68:	3b01      	subs	r3, #1
 8009e6a:	2b06      	cmp	r3, #6
 8009e6c:	d839      	bhi.n	8009ee2 <_HandleIncomingPacket+0xaa>
 8009e6e:	a201      	add	r2, pc, #4	@ (adr r2, 8009e74 <_HandleIncomingPacket+0x3c>)
 8009e70:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e74:	08009e97 	.word	0x08009e97
 8009e78:	08009e9d 	.word	0x08009e9d
 8009e7c:	08009ea3 	.word	0x08009ea3
 8009e80:	08009ea9 	.word	0x08009ea9
 8009e84:	08009eaf 	.word	0x08009eaf
 8009e88:	08009eb5 	.word	0x08009eb5
 8009e8c:	08009ebb 	.word	0x08009ebb
 8009e90:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e92:	d033      	beq.n	8009efc <_HandleIncomingPacket+0xc4>
 8009e94:	e025      	b.n	8009ee2 <_HandleIncomingPacket+0xaa>
    case SEGGER_SYSVIEW_COMMAND_ID_START:
      SEGGER_SYSVIEW_Start();
 8009e96:	f000 fbe3 	bl	800a660 <SEGGER_SYSVIEW_Start>
      break;
 8009e9a:	e034      	b.n	8009f06 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_STOP:
      SEGGER_SYSVIEW_Stop();
 8009e9c:	f000 fc9a 	bl	800a7d4 <SEGGER_SYSVIEW_Stop>
      break;
 8009ea0:	e031      	b.n	8009f06 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSTIME:
      SEGGER_SYSVIEW_RecordSystime();
 8009ea2:	f000 fe73 	bl	800ab8c <SEGGER_SYSVIEW_RecordSystime>
      break;
 8009ea6:	e02e      	b.n	8009f06 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_TASKLIST:
      SEGGER_SYSVIEW_SendTaskList();
 8009ea8:	f000 fe38 	bl	800ab1c <SEGGER_SYSVIEW_SendTaskList>
      break;
 8009eac:	e02b      	b.n	8009f06 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_SYSDESC:
      SEGGER_SYSVIEW_GetSysDesc();
 8009eae:	f000 fcb7 	bl	800a820 <SEGGER_SYSVIEW_GetSysDesc>
      break;
 8009eb2:	e028      	b.n	8009f06 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_NUMMODULES:
      SEGGER_SYSVIEW_SendNumModules();
 8009eb4:	f001 f826 	bl	800af04 <SEGGER_SYSVIEW_SendNumModules>
      break;
 8009eb8:	e025      	b.n	8009f06 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULEDESC:
      SEGGER_SYSVIEW_SendModuleDescription();
 8009eba:	f001 f805 	bl	800aec8 <SEGGER_SYSVIEW_SendModuleDescription>
      break;
 8009ebe:	e022      	b.n	8009f06 <_HandleIncomingPacket+0xce>
    case SEGGER_SYSVIEW_COMMAND_ID_GET_MODULE:
      Status = SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009ec0:	4b13      	ldr	r3, [pc, #76]	@ (8009f10 <_HandleIncomingPacket+0xd8>)
 8009ec2:	7e1b      	ldrb	r3, [r3, #24]
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	1cfb      	adds	r3, r7, #3
 8009ec8:	2201      	movs	r2, #1
 8009eca:	4619      	mov	r1, r3
 8009ecc:	f7ff fdac 	bl	8009a28 <SEGGER_RTT_ReadNoLock>
 8009ed0:	6078      	str	r0, [r7, #4]
      if (Status > 0) {
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	2b00      	cmp	r3, #0
 8009ed6:	d013      	beq.n	8009f00 <_HandleIncomingPacket+0xc8>
        SEGGER_SYSVIEW_SendModule(Cmd);
 8009ed8:	78fb      	ldrb	r3, [r7, #3]
 8009eda:	4618      	mov	r0, r3
 8009edc:	f000 ff6a 	bl	800adb4 <SEGGER_SYSVIEW_SendModule>
      }
      break;
 8009ee0:	e00e      	b.n	8009f00 <_HandleIncomingPacket+0xc8>
    case SEGGER_SYSVIEW_COMMAND_ID_HEARTBEAT:
      break;
    default:
      if (Cmd >= 128) { // Unknown extended command. Dummy read its parameter.
 8009ee2:	78fb      	ldrb	r3, [r7, #3]
 8009ee4:	b25b      	sxtb	r3, r3
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	da0c      	bge.n	8009f04 <_HandleIncomingPacket+0xcc>
        SEGGER_RTT_ReadNoLock(CHANNEL_ID_DOWN, &Cmd, 1);
 8009eea:	4b09      	ldr	r3, [pc, #36]	@ (8009f10 <_HandleIncomingPacket+0xd8>)
 8009eec:	7e1b      	ldrb	r3, [r3, #24]
 8009eee:	4618      	mov	r0, r3
 8009ef0:	1cfb      	adds	r3, r7, #3
 8009ef2:	2201      	movs	r2, #1
 8009ef4:	4619      	mov	r1, r3
 8009ef6:	f7ff fd97 	bl	8009a28 <SEGGER_RTT_ReadNoLock>
      }
      break;
 8009efa:	e003      	b.n	8009f04 <_HandleIncomingPacket+0xcc>
      break;
 8009efc:	bf00      	nop
 8009efe:	e002      	b.n	8009f06 <_HandleIncomingPacket+0xce>
      break;
 8009f00:	bf00      	nop
 8009f02:	e000      	b.n	8009f06 <_HandleIncomingPacket+0xce>
      break;
 8009f04:	bf00      	nop
    }
  }
}
 8009f06:	bf00      	nop
 8009f08:	3708      	adds	r7, #8
 8009f0a:	46bd      	mov	sp, r7
 8009f0c:	bd80      	pop	{r7, pc}
 8009f0e:	bf00      	nop
 8009f10:	20013ac0 	.word	0x20013ac0

08009f14 <_TrySendOverflowPacket>:
*    !=0:  Success, Message sent (stored in RTT-Buffer)
*    ==0:  Buffer full, Message *NOT* stored
*
*/
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE != 1)
static int _TrySendOverflowPacket(void) {
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b08c      	sub	sp, #48	@ 0x30
 8009f18:	af00      	add	r7, sp, #0
  I32 Delta;
  int Status;
  U8  aPacket[11];
  U8* pPayload;

  aPacket[0] = SYSVIEW_EVTID_OVERFLOW;      // 1
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	713b      	strb	r3, [r7, #4]
  pPayload   = &aPacket[1];
 8009f1e:	1d3b      	adds	r3, r7, #4
 8009f20:	3301      	adds	r3, #1
 8009f22:	61fb      	str	r3, [r7, #28]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.DropCount);
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009f28:	4b31      	ldr	r3, [pc, #196]	@ (8009ff0 <_TrySendOverflowPacket+0xdc>)
 8009f2a:	695b      	ldr	r3, [r3, #20]
 8009f2c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f2e:	e00b      	b.n	8009f48 <_TrySendOverflowPacket+0x34>
 8009f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f32:	b2da      	uxtb	r2, r3
 8009f34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f36:	1c59      	adds	r1, r3, #1
 8009f38:	62f9      	str	r1, [r7, #44]	@ 0x2c
 8009f3a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009f3e:	b2d2      	uxtb	r2, r2
 8009f40:	701a      	strb	r2, [r3, #0]
 8009f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f44:	09db      	lsrs	r3, r3, #7
 8009f46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009f48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009f4a:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f4c:	d8f0      	bhi.n	8009f30 <_TrySendOverflowPacket+0x1c>
 8009f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f50:	1c5a      	adds	r2, r3, #1
 8009f52:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009f54:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009f56:	b2d2      	uxtb	r2, r2
 8009f58:	701a      	strb	r2, [r3, #0]
 8009f5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009f5c:	61fb      	str	r3, [r7, #28]
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 8009f5e:	4b25      	ldr	r3, [pc, #148]	@ (8009ff4 <_TrySendOverflowPacket+0xe0>)
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 8009f64:	4b22      	ldr	r3, [pc, #136]	@ (8009ff0 <_TrySendOverflowPacket+0xdc>)
 8009f66:	68db      	ldr	r3, [r3, #12]
 8009f68:	69ba      	ldr	r2, [r7, #24]
 8009f6a:	1ad3      	subs	r3, r2, r3
 8009f6c:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pPayload, Delta);
 8009f6e:	69fb      	ldr	r3, [r7, #28]
 8009f70:	627b      	str	r3, [r7, #36]	@ 0x24
 8009f72:	697b      	ldr	r3, [r7, #20]
 8009f74:	623b      	str	r3, [r7, #32]
 8009f76:	e00b      	b.n	8009f90 <_TrySendOverflowPacket+0x7c>
 8009f78:	6a3b      	ldr	r3, [r7, #32]
 8009f7a:	b2da      	uxtb	r2, r3
 8009f7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f7e:	1c59      	adds	r1, r3, #1
 8009f80:	6279      	str	r1, [r7, #36]	@ 0x24
 8009f82:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 8009f86:	b2d2      	uxtb	r2, r2
 8009f88:	701a      	strb	r2, [r3, #0]
 8009f8a:	6a3b      	ldr	r3, [r7, #32]
 8009f8c:	09db      	lsrs	r3, r3, #7
 8009f8e:	623b      	str	r3, [r7, #32]
 8009f90:	6a3b      	ldr	r3, [r7, #32]
 8009f92:	2b7f      	cmp	r3, #127	@ 0x7f
 8009f94:	d8f0      	bhi.n	8009f78 <_TrySendOverflowPacket+0x64>
 8009f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009f98:	1c5a      	adds	r2, r3, #1
 8009f9a:	627a      	str	r2, [r7, #36]	@ 0x24
 8009f9c:	6a3a      	ldr	r2, [r7, #32]
 8009f9e:	b2d2      	uxtb	r2, r2
 8009fa0:	701a      	strb	r2, [r3, #0]
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009fa4:	61fb      	str	r3, [r7, #28]
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = (int)SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, aPacket, (unsigned int)(pPayload - aPacket));
 8009fa6:	4b12      	ldr	r3, [pc, #72]	@ (8009ff0 <_TrySendOverflowPacket+0xdc>)
 8009fa8:	785b      	ldrb	r3, [r3, #1]
 8009faa:	4618      	mov	r0, r3
 8009fac:	1d3b      	adds	r3, r7, #4
 8009fae:	69fa      	ldr	r2, [r7, #28]
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	461a      	mov	r2, r3
 8009fb4:	1d3b      	adds	r3, r7, #4
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	f7f6 f90a 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 8009fbc:	4603      	mov	r3, r0
 8009fbe:	613b      	str	r3, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pPayload - aPacket);
  if (Status) {
 8009fc0:	693b      	ldr	r3, [r7, #16]
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	d009      	beq.n	8009fda <_TrySendOverflowPacket+0xc6>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 8009fc6:	4a0a      	ldr	r2, [pc, #40]	@ (8009ff0 <_TrySendOverflowPacket+0xdc>)
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	60d3      	str	r3, [r2, #12]
    _SYSVIEW_Globals.EnableState--; // EnableState has been 2, will be 1. Always.
 8009fcc:	4b08      	ldr	r3, [pc, #32]	@ (8009ff0 <_TrySendOverflowPacket+0xdc>)
 8009fce:	781b      	ldrb	r3, [r3, #0]
 8009fd0:	3b01      	subs	r3, #1
 8009fd2:	b2da      	uxtb	r2, r3
 8009fd4:	4b06      	ldr	r3, [pc, #24]	@ (8009ff0 <_TrySendOverflowPacket+0xdc>)
 8009fd6:	701a      	strb	r2, [r3, #0]
 8009fd8:	e004      	b.n	8009fe4 <_TrySendOverflowPacket+0xd0>
  } else {
    _SYSVIEW_Globals.DropCount++;
 8009fda:	4b05      	ldr	r3, [pc, #20]	@ (8009ff0 <_TrySendOverflowPacket+0xdc>)
 8009fdc:	695b      	ldr	r3, [r3, #20]
 8009fde:	3301      	adds	r3, #1
 8009fe0:	4a03      	ldr	r2, [pc, #12]	@ (8009ff0 <_TrySendOverflowPacket+0xdc>)
 8009fe2:	6153      	str	r3, [r2, #20]
  }
  //
  return Status;
 8009fe4:	693b      	ldr	r3, [r7, #16]
}
 8009fe6:	4618      	mov	r0, r3
 8009fe8:	3730      	adds	r7, #48	@ 0x30
 8009fea:	46bd      	mov	sp, r7
 8009fec:	bd80      	pop	{r7, pc}
 8009fee:	bf00      	nop
 8009ff0:	20013ac0 	.word	0x20013ac0
 8009ff4:	e0001004 	.word	0xe0001004

08009ff8 <_SendPacket>:
*                   There must be at least 4 bytes free to prepend Id and Length.
*    pEndPacket   - Pointer to end of packet payload.
*    EventId      - Id of the event to send.
*
*/
static void _SendPacket(U8* pStartPacket, U8* pEndPacket, unsigned int EventId) {
 8009ff8:	b580      	push	{r7, lr}
 8009ffa:	b08a      	sub	sp, #40	@ 0x28
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	60f8      	str	r0, [r7, #12]
 800a000:	60b9      	str	r1, [r7, #8]
 800a002:	607a      	str	r2, [r7, #4]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
  if (_SYSVIEW_Globals.EnableState == 0) {
    goto SendDone;
  }
#else
  if (_SYSVIEW_Globals.EnableState == 1) {  // Enabled, no dropped packets remaining
 800a004:	4b98      	ldr	r3, [pc, #608]	@ (800a268 <_SendPacket+0x270>)
 800a006:	781b      	ldrb	r3, [r3, #0]
 800a008:	2b01      	cmp	r3, #1
 800a00a:	d010      	beq.n	800a02e <_SendPacket+0x36>
    goto Send;
  }
  if (_SYSVIEW_Globals.EnableState == 0) {
 800a00c:	4b96      	ldr	r3, [pc, #600]	@ (800a268 <_SendPacket+0x270>)
 800a00e:	781b      	ldrb	r3, [r3, #0]
 800a010:	2b00      	cmp	r3, #0
 800a012:	f000 812d 	beq.w	800a270 <_SendPacket+0x278>
  //
  // Handle buffer full situations:
  // Have packets been dropped before because buffer was full?
  // In this case try to send and overflow packet.
  //
  if (_SYSVIEW_Globals.EnableState == 2) {
 800a016:	4b94      	ldr	r3, [pc, #592]	@ (800a268 <_SendPacket+0x270>)
 800a018:	781b      	ldrb	r3, [r3, #0]
 800a01a:	2b02      	cmp	r3, #2
 800a01c:	d109      	bne.n	800a032 <_SendPacket+0x3a>
    _TrySendOverflowPacket();
 800a01e:	f7ff ff79 	bl	8009f14 <_TrySendOverflowPacket>
    if (_SYSVIEW_Globals.EnableState != 1) {
 800a022:	4b91      	ldr	r3, [pc, #580]	@ (800a268 <_SendPacket+0x270>)
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	2b01      	cmp	r3, #1
 800a028:	f040 8124 	bne.w	800a274 <_SendPacket+0x27c>
      goto SendDone;
    }
  }
Send:
 800a02c:	e001      	b.n	800a032 <_SendPacket+0x3a>
    goto Send;
 800a02e:	bf00      	nop
 800a030:	e000      	b.n	800a034 <_SendPacket+0x3c>
Send:
 800a032:	bf00      	nop
#endif
  //
  // Check if event is disabled from being recorded.
  //
  if (EventId < 32) {
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	2b1f      	cmp	r3, #31
 800a038:	d809      	bhi.n	800a04e <_SendPacket+0x56>
    if (_SYSVIEW_Globals.DisabledEvents & ((U32)1u << EventId)) {
 800a03a:	4b8b      	ldr	r3, [pc, #556]	@ (800a268 <_SendPacket+0x270>)
 800a03c:	69da      	ldr	r2, [r3, #28]
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	fa22 f303 	lsr.w	r3, r2, r3
 800a044:	f003 0301 	and.w	r3, r3, #1
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f040 8115 	bne.w	800a278 <_SendPacket+0x280>
  //
  // Prepare actual packet.
  // If it is a known packet, prepend eventId only,
  // otherwise prepend packet length and eventId.
  //
  if (EventId < 24) {
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2b17      	cmp	r3, #23
 800a052:	d807      	bhi.n	800a064 <_SendPacket+0x6c>
    *--pStartPacket = (U8)EventId;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	3b01      	subs	r3, #1
 800a058:	60fb      	str	r3, [r7, #12]
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	b2da      	uxtb	r2, r3
 800a05e:	68fb      	ldr	r3, [r7, #12]
 800a060:	701a      	strb	r2, [r3, #0]
 800a062:	e0c4      	b.n	800a1ee <_SendPacket+0x1f6>
  } else {
    //
    // Get data length and prepend it.
    //
    NumBytes = (unsigned int)(pEndPacket - pStartPacket);
 800a064:	68ba      	ldr	r2, [r7, #8]
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	1ad3      	subs	r3, r2, r3
 800a06a:	61fb      	str	r3, [r7, #28]
        *--pStartPacket = (U8)((NumBytes >>  7) | 0x80);
        *--pStartPacket = (U8)(NumBytes | 0x80);
      }
    }
#else
    if (NumBytes > 127) {
 800a06c:	69fb      	ldr	r3, [r7, #28]
 800a06e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a070:	d912      	bls.n	800a098 <_SendPacket+0xa0>
      *--pStartPacket = (U8)(NumBytes >> 7);
 800a072:	69fb      	ldr	r3, [r7, #28]
 800a074:	09da      	lsrs	r2, r3, #7
 800a076:	68fb      	ldr	r3, [r7, #12]
 800a078:	3b01      	subs	r3, #1
 800a07a:	60fb      	str	r3, [r7, #12]
 800a07c:	b2d2      	uxtb	r2, r2
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	701a      	strb	r2, [r3, #0]
      *--pStartPacket = (U8)(NumBytes | 0x80);
 800a082:	69fb      	ldr	r3, [r7, #28]
 800a084:	b2db      	uxtb	r3, r3
 800a086:	68fa      	ldr	r2, [r7, #12]
 800a088:	3a01      	subs	r2, #1
 800a08a:	60fa      	str	r2, [r7, #12]
 800a08c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a090:	b2da      	uxtb	r2, r3
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	701a      	strb	r2, [r3, #0]
 800a096:	e006      	b.n	800a0a6 <_SendPacket+0xae>
    } else {
      *--pStartPacket = (U8)NumBytes;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	3b01      	subs	r3, #1
 800a09c:	60fb      	str	r3, [r7, #12]
 800a09e:	69fb      	ldr	r3, [r7, #28]
 800a0a0:	b2da      	uxtb	r2, r3
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	701a      	strb	r2, [r3, #0]
#endif
    //
    // Prepend EventId.
    //
#if SEGGER_SYSVIEW_SUPPORT_LONG_ID
    if (EventId < 127) {
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2b7e      	cmp	r3, #126	@ 0x7e
 800a0aa:	d807      	bhi.n	800a0bc <_SendPacket+0xc4>
      *--pStartPacket = (U8)EventId;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	3b01      	subs	r3, #1
 800a0b0:	60fb      	str	r3, [r7, #12]
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	b2da      	uxtb	r2, r3
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	701a      	strb	r2, [r3, #0]
 800a0ba:	e098      	b.n	800a1ee <_SendPacket+0x1f6>
    } else {
      //
      // Backwards U32 encode EventId.
      //
      if (EventId < (1u << 14)) { // Encodes in 2 bytes
 800a0bc:	687b      	ldr	r3, [r7, #4]
 800a0be:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a0c2:	d212      	bcs.n	800a0ea <_SendPacket+0xf2>
        *--pStartPacket = (U8)(EventId >>  7);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	09da      	lsrs	r2, r3, #7
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	3b01      	subs	r3, #1
 800a0cc:	60fb      	str	r3, [r7, #12]
 800a0ce:	b2d2      	uxtb	r2, r2
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	b2db      	uxtb	r3, r3
 800a0d8:	68fa      	ldr	r2, [r7, #12]
 800a0da:	3a01      	subs	r2, #1
 800a0dc:	60fa      	str	r2, [r7, #12]
 800a0de:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a0e2:	b2da      	uxtb	r2, r3
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	701a      	strb	r2, [r3, #0]
 800a0e8:	e081      	b.n	800a1ee <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 21)) {    // Encodes in 3 bytes
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a0f0:	d21d      	bcs.n	800a12e <_SendPacket+0x136>
        *--pStartPacket = (U8)(EventId >> 14);
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	0b9a      	lsrs	r2, r3, #14
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	3b01      	subs	r3, #1
 800a0fa:	60fb      	str	r3, [r7, #12]
 800a0fc:	b2d2      	uxtb	r2, r2
 800a0fe:	68fb      	ldr	r3, [r7, #12]
 800a100:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	09db      	lsrs	r3, r3, #7
 800a106:	b2db      	uxtb	r3, r3
 800a108:	68fa      	ldr	r2, [r7, #12]
 800a10a:	3a01      	subs	r2, #1
 800a10c:	60fa      	str	r2, [r7, #12]
 800a10e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a112:	b2da      	uxtb	r2, r3
 800a114:	68fb      	ldr	r3, [r7, #12]
 800a116:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	b2db      	uxtb	r3, r3
 800a11c:	68fa      	ldr	r2, [r7, #12]
 800a11e:	3a01      	subs	r2, #1
 800a120:	60fa      	str	r2, [r7, #12]
 800a122:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a126:	b2da      	uxtb	r2, r3
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	701a      	strb	r2, [r3, #0]
 800a12c:	e05f      	b.n	800a1ee <_SendPacket+0x1f6>
      } else if (EventId < (1ul << 28)) {    // Encodes in 4 bytes
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a134:	d228      	bcs.n	800a188 <_SendPacket+0x190>
        *--pStartPacket = (U8)(EventId >> 21);
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	0d5a      	lsrs	r2, r3, #21
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	3b01      	subs	r3, #1
 800a13e:	60fb      	str	r3, [r7, #12]
 800a140:	b2d2      	uxtb	r2, r2
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	0b9b      	lsrs	r3, r3, #14
 800a14a:	b2db      	uxtb	r3, r3
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	3a01      	subs	r2, #1
 800a150:	60fa      	str	r2, [r7, #12]
 800a152:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a156:	b2da      	uxtb	r2, r3
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	09db      	lsrs	r3, r3, #7
 800a160:	b2db      	uxtb	r3, r3
 800a162:	68fa      	ldr	r2, [r7, #12]
 800a164:	3a01      	subs	r2, #1
 800a166:	60fa      	str	r2, [r7, #12]
 800a168:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a16c:	b2da      	uxtb	r2, r3
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	b2db      	uxtb	r3, r3
 800a176:	68fa      	ldr	r2, [r7, #12]
 800a178:	3a01      	subs	r2, #1
 800a17a:	60fa      	str	r2, [r7, #12]
 800a17c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a180:	b2da      	uxtb	r2, r3
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	701a      	strb	r2, [r3, #0]
 800a186:	e032      	b.n	800a1ee <_SendPacket+0x1f6>
      } else {                              // Encodes in 5 bytes
        *--pStartPacket = (U8)(EventId >> 28);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	0f1a      	lsrs	r2, r3, #28
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	3b01      	subs	r3, #1
 800a190:	60fb      	str	r3, [r7, #12]
 800a192:	b2d2      	uxtb	r2, r2
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 21) | 0x80);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	0d5b      	lsrs	r3, r3, #21
 800a19c:	b2db      	uxtb	r3, r3
 800a19e:	68fa      	ldr	r2, [r7, #12]
 800a1a0:	3a01      	subs	r2, #1
 800a1a2:	60fa      	str	r2, [r7, #12]
 800a1a4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a1a8:	b2da      	uxtb	r2, r3
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >> 14) | 0x80);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	0b9b      	lsrs	r3, r3, #14
 800a1b2:	b2db      	uxtb	r3, r3
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	3a01      	subs	r2, #1
 800a1b8:	60fa      	str	r2, [r7, #12]
 800a1ba:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a1be:	b2da      	uxtb	r2, r3
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)((EventId >>  7) | 0x80);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	09db      	lsrs	r3, r3, #7
 800a1c8:	b2db      	uxtb	r3, r3
 800a1ca:	68fa      	ldr	r2, [r7, #12]
 800a1cc:	3a01      	subs	r2, #1
 800a1ce:	60fa      	str	r2, [r7, #12]
 800a1d0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a1d4:	b2da      	uxtb	r2, r3
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	701a      	strb	r2, [r3, #0]
        *--pStartPacket = (U8)(EventId | 0x80);
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	b2db      	uxtb	r3, r3
 800a1de:	68fa      	ldr	r2, [r7, #12]
 800a1e0:	3a01      	subs	r2, #1
 800a1e2:	60fa      	str	r2, [r7, #12]
 800a1e4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a1e8:	b2da      	uxtb	r2, r3
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	701a      	strb	r2, [r3, #0]
#endif
  }
  //
  // Compute time stamp delta and append it to packet.
  //
  TimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800a1ee:	4b1f      	ldr	r3, [pc, #124]	@ (800a26c <_SendPacket+0x274>)
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	61bb      	str	r3, [r7, #24]
  Delta = TimeStamp - _SYSVIEW_Globals.LastTxTimeStamp;
 800a1f4:	4b1c      	ldr	r3, [pc, #112]	@ (800a268 <_SendPacket+0x270>)
 800a1f6:	68db      	ldr	r3, [r3, #12]
 800a1f8:	69ba      	ldr	r2, [r7, #24]
 800a1fa:	1ad3      	subs	r3, r2, r3
 800a1fc:	617b      	str	r3, [r7, #20]
  MAKE_DELTA_32BIT(Delta);
  ENCODE_U32(pEndPacket, Delta);
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	627b      	str	r3, [r7, #36]	@ 0x24
 800a202:	697b      	ldr	r3, [r7, #20]
 800a204:	623b      	str	r3, [r7, #32]
 800a206:	e00b      	b.n	800a220 <_SendPacket+0x228>
 800a208:	6a3b      	ldr	r3, [r7, #32]
 800a20a:	b2da      	uxtb	r2, r3
 800a20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a20e:	1c59      	adds	r1, r3, #1
 800a210:	6279      	str	r1, [r7, #36]	@ 0x24
 800a212:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a216:	b2d2      	uxtb	r2, r2
 800a218:	701a      	strb	r2, [r3, #0]
 800a21a:	6a3b      	ldr	r3, [r7, #32]
 800a21c:	09db      	lsrs	r3, r3, #7
 800a21e:	623b      	str	r3, [r7, #32]
 800a220:	6a3b      	ldr	r3, [r7, #32]
 800a222:	2b7f      	cmp	r3, #127	@ 0x7f
 800a224:	d8f0      	bhi.n	800a208 <_SendPacket+0x210>
 800a226:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a228:	1c5a      	adds	r2, r3, #1
 800a22a:	627a      	str	r2, [r7, #36]	@ 0x24
 800a22c:	6a3a      	ldr	r2, [r7, #32]
 800a22e:	b2d2      	uxtb	r2, r2
 800a230:	701a      	strb	r2, [r3, #0]
 800a232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a234:	60bb      	str	r3, [r7, #8]
  _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
#else
  //
  // Try to store packet in RTT buffer and update time stamp when this was successful
  //
  Status = SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, pStartPacket, (unsigned int)(pEndPacket - pStartPacket));
 800a236:	4b0c      	ldr	r3, [pc, #48]	@ (800a268 <_SendPacket+0x270>)
 800a238:	785b      	ldrb	r3, [r3, #1]
 800a23a:	4618      	mov	r0, r3
 800a23c:	68ba      	ldr	r2, [r7, #8]
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	1ad3      	subs	r3, r2, r3
 800a242:	461a      	mov	r2, r3
 800a244:	68f9      	ldr	r1, [r7, #12]
 800a246:	f7f5 ffc3 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
 800a24a:	6138      	str	r0, [r7, #16]
  SEGGER_SYSVIEW_ON_EVENT_RECORDED(pEndPacket - pStartPacket);
  if (Status) {
 800a24c:	693b      	ldr	r3, [r7, #16]
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d003      	beq.n	800a25a <_SendPacket+0x262>
    _SYSVIEW_Globals.LastTxTimeStamp = TimeStamp;
 800a252:	4a05      	ldr	r2, [pc, #20]	@ (800a268 <_SendPacket+0x270>)
 800a254:	69bb      	ldr	r3, [r7, #24]
 800a256:	60d3      	str	r3, [r2, #12]
 800a258:	e00f      	b.n	800a27a <_SendPacket+0x282>
  } else {
    _SYSVIEW_Globals.EnableState++; // EnableState has been 1, will be 2. Always.
 800a25a:	4b03      	ldr	r3, [pc, #12]	@ (800a268 <_SendPacket+0x270>)
 800a25c:	781b      	ldrb	r3, [r3, #0]
 800a25e:	3301      	adds	r3, #1
 800a260:	b2da      	uxtb	r2, r3
 800a262:	4b01      	ldr	r3, [pc, #4]	@ (800a268 <_SendPacket+0x270>)
 800a264:	701a      	strb	r2, [r3, #0]
 800a266:	e008      	b.n	800a27a <_SendPacket+0x282>
 800a268:	20013ac0 	.word	0x20013ac0
 800a26c:	e0001004 	.word	0xe0001004
    goto SendDone;
 800a270:	bf00      	nop
 800a272:	e002      	b.n	800a27a <_SendPacket+0x282>
      goto SendDone;
 800a274:	bf00      	nop
 800a276:	e000      	b.n	800a27a <_SendPacket+0x282>
      goto SendDone;
 800a278:	bf00      	nop
  //
  // Check if host is sending data which needs to be processed.
  // Note that since this code is called for every packet, it is very time critical, so we do
  // only what is really needed here, which is checking if there is any data
  //
  if (SEGGER_RTT_HASDATA(CHANNEL_ID_DOWN)) {
 800a27a:	4b14      	ldr	r3, [pc, #80]	@ (800a2cc <_SendPacket+0x2d4>)
 800a27c:	7e1b      	ldrb	r3, [r3, #24]
 800a27e:	4619      	mov	r1, r3
 800a280:	4a13      	ldr	r2, [pc, #76]	@ (800a2d0 <_SendPacket+0x2d8>)
 800a282:	460b      	mov	r3, r1
 800a284:	005b      	lsls	r3, r3, #1
 800a286:	440b      	add	r3, r1
 800a288:	00db      	lsls	r3, r3, #3
 800a28a:	4413      	add	r3, r2
 800a28c:	336c      	adds	r3, #108	@ 0x6c
 800a28e:	681a      	ldr	r2, [r3, #0]
 800a290:	4b0e      	ldr	r3, [pc, #56]	@ (800a2cc <_SendPacket+0x2d4>)
 800a292:	7e1b      	ldrb	r3, [r3, #24]
 800a294:	4618      	mov	r0, r3
 800a296:	490e      	ldr	r1, [pc, #56]	@ (800a2d0 <_SendPacket+0x2d8>)
 800a298:	4603      	mov	r3, r0
 800a29a:	005b      	lsls	r3, r3, #1
 800a29c:	4403      	add	r3, r0
 800a29e:	00db      	lsls	r3, r3, #3
 800a2a0:	440b      	add	r3, r1
 800a2a2:	3370      	adds	r3, #112	@ 0x70
 800a2a4:	681b      	ldr	r3, [r3, #0]
 800a2a6:	429a      	cmp	r2, r3
 800a2a8:	d00b      	beq.n	800a2c2 <_SendPacket+0x2ca>
    if (_SYSVIEW_Globals.RecursionCnt == 0) {   // Avoid uncontrolled nesting. This way, this routine can call itself once, but no more often than that.
 800a2aa:	4b08      	ldr	r3, [pc, #32]	@ (800a2cc <_SendPacket+0x2d4>)
 800a2ac:	789b      	ldrb	r3, [r3, #2]
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d107      	bne.n	800a2c2 <_SendPacket+0x2ca>
      _SYSVIEW_Globals.RecursionCnt = 1;
 800a2b2:	4b06      	ldr	r3, [pc, #24]	@ (800a2cc <_SendPacket+0x2d4>)
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	709a      	strb	r2, [r3, #2]
      _HandleIncomingPacket();
 800a2b8:	f7ff fdbe 	bl	8009e38 <_HandleIncomingPacket>
      _SYSVIEW_Globals.RecursionCnt = 0;
 800a2bc:	4b03      	ldr	r3, [pc, #12]	@ (800a2cc <_SendPacket+0x2d4>)
 800a2be:	2200      	movs	r2, #0
 800a2c0:	709a      	strb	r2, [r3, #2]
#endif
  //
#if (SEGGER_SYSVIEW_USE_STATIC_BUFFER == 0)
  SEGGER_SYSVIEW_UNLOCK();  // We are done. Unlock and return
#endif
}
 800a2c2:	bf00      	nop
 800a2c4:	3728      	adds	r7, #40	@ 0x28
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	20013ac0 	.word	0x20013ac0
 800a2d0:	20013200 	.word	0x20013200

0800a2d4 <_VPrintHost>:
*  Parameters
*    s            Pointer to format string.
*    Options      Options to be sent to the host.
*    pParamList   Pointer to the list of arguments for the format string.
*/
static int _VPrintHost(const char* s, U32 Options, va_list* pParamList) {
 800a2d4:	b580      	push	{r7, lr}
 800a2d6:	b0a2      	sub	sp, #136	@ 0x88
 800a2d8:	af00      	add	r7, sp, #0
 800a2da:	60f8      	str	r0, [r7, #12]
 800a2dc:	60b9      	str	r1, [r7, #8]
 800a2de:	607a      	str	r2, [r7, #4]
#endif
  //
  // Count number of arguments by counting '%' characters in string.
  // If enabled, check for non-scalar modifier flags to format string on the target.
  //
  p = s;
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	67fb      	str	r3, [r7, #124]	@ 0x7c
  NumArguments = 0;
 800a2e4:	2300      	movs	r3, #0
 800a2e6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  for (;;) {
    c = *p++;
 800a2ea:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a2ec:	1c5a      	adds	r2, r3, #1
 800a2ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800a2f0:	781b      	ldrb	r3, [r3, #0]
 800a2f2:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    if (c == 0) {
 800a2f6:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d01d      	beq.n	800a33a <_VPrintHost+0x66>
      break;
    }
    if (c == '%') {
 800a2fe:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 800a302:	2b25      	cmp	r3, #37	@ 0x25
 800a304:	d1f1      	bne.n	800a2ea <_VPrintHost+0x16>
      c = *p;
 800a306:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800a308:	781b      	ldrb	r3, [r3, #0]
 800a30a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
#if SEGGER_SYSVIEW_PRINTF_IMPLICIT_FORMAT == 0
      aParas[NumArguments++] = (U32)(va_arg(*pParamList, int));
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	681b      	ldr	r3, [r3, #0]
 800a312:	1d19      	adds	r1, r3, #4
 800a314:	687a      	ldr	r2, [r7, #4]
 800a316:	6011      	str	r1, [r2, #0]
 800a318:	6819      	ldr	r1, [r3, #0]
 800a31a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a31e:	1c5a      	adds	r2, r3, #1
 800a320:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a324:	460a      	mov	r2, r1
 800a326:	009b      	lsls	r3, r3, #2
 800a328:	3388      	adds	r3, #136	@ 0x88
 800a32a:	443b      	add	r3, r7
 800a32c:	f843 2c74 	str.w	r2, [r3, #-116]
      if (NumArguments == SEGGER_SYSVIEW_MAX_ARGUMENTS) {
 800a330:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a334:	2b10      	cmp	r3, #16
 800a336:	d002      	beq.n	800a33e <_VPrintHost+0x6a>
    c = *p++;
 800a338:	e7d7      	b.n	800a2ea <_VPrintHost+0x16>
      break;
 800a33a:	bf00      	nop
 800a33c:	e000      	b.n	800a340 <_VPrintHost+0x6c>
        break;
 800a33e:	bf00      	nop
#endif
  //
  // Send string and parameters to host
  //
  {
    RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_MAX_STRING_LEN + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_ARGUMENTS * SEGGER_SYSVIEW_QUANTA_U32);
 800a340:	f3ef 8311 	mrs	r3, BASEPRI
 800a344:	f04f 0120 	mov.w	r1, #32
 800a348:	f381 8811 	msr	BASEPRI, r1
 800a34c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800a34e:	483f      	ldr	r0, [pc, #252]	@ (800a44c <_VPrintHost+0x178>)
 800a350:	f7ff fd66 	bl	8009e20 <_PreparePacket>
 800a354:	6578      	str	r0, [r7, #84]	@ 0x54
    pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800a356:	2280      	movs	r2, #128	@ 0x80
 800a358:	68f9      	ldr	r1, [r7, #12]
 800a35a:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a35c:	f7ff fd30 	bl	8009dc0 <_EncodeStr>
 800a360:	67b8      	str	r0, [r7, #120]	@ 0x78
    ENCODE_U32(pPayload, Options);
 800a362:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a364:	677b      	str	r3, [r7, #116]	@ 0x74
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	673b      	str	r3, [r7, #112]	@ 0x70
 800a36a:	e00b      	b.n	800a384 <_VPrintHost+0xb0>
 800a36c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a36e:	b2da      	uxtb	r2, r3
 800a370:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a372:	1c59      	adds	r1, r3, #1
 800a374:	6779      	str	r1, [r7, #116]	@ 0x74
 800a376:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a37a:	b2d2      	uxtb	r2, r2
 800a37c:	701a      	strb	r2, [r3, #0]
 800a37e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a380:	09db      	lsrs	r3, r3, #7
 800a382:	673b      	str	r3, [r7, #112]	@ 0x70
 800a384:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800a386:	2b7f      	cmp	r3, #127	@ 0x7f
 800a388:	d8f0      	bhi.n	800a36c <_VPrintHost+0x98>
 800a38a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a38c:	1c5a      	adds	r2, r3, #1
 800a38e:	677a      	str	r2, [r7, #116]	@ 0x74
 800a390:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800a392:	b2d2      	uxtb	r2, r2
 800a394:	701a      	strb	r2, [r3, #0]
 800a396:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800a398:	67bb      	str	r3, [r7, #120]	@ 0x78
    ENCODE_U32(pPayload, NumArguments);
 800a39a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a39c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800a39e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a3a2:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3a4:	e00b      	b.n	800a3be <_VPrintHost+0xea>
 800a3a6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a3a8:	b2da      	uxtb	r2, r3
 800a3aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3ac:	1c59      	adds	r1, r3, #1
 800a3ae:	66f9      	str	r1, [r7, #108]	@ 0x6c
 800a3b0:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a3b4:	b2d2      	uxtb	r2, r2
 800a3b6:	701a      	strb	r2, [r3, #0]
 800a3b8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a3ba:	09db      	lsrs	r3, r3, #7
 800a3bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 800a3be:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800a3c0:	2b7f      	cmp	r3, #127	@ 0x7f
 800a3c2:	d8f0      	bhi.n	800a3a6 <_VPrintHost+0xd2>
 800a3c4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3c6:	1c5a      	adds	r2, r3, #1
 800a3c8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800a3ca:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800a3cc:	b2d2      	uxtb	r2, r2
 800a3ce:	701a      	strb	r2, [r3, #0]
 800a3d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a3d2:	67bb      	str	r3, [r7, #120]	@ 0x78
    pParas = aParas;
 800a3d4:	f107 0314 	add.w	r3, r7, #20
 800a3d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (NumArguments--) {
 800a3dc:	e022      	b.n	800a424 <_VPrintHost+0x150>
      ENCODE_U32(pPayload, (*pParas));
 800a3de:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800a3e0:	667b      	str	r3, [r7, #100]	@ 0x64
 800a3e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	663b      	str	r3, [r7, #96]	@ 0x60
 800a3ea:	e00b      	b.n	800a404 <_VPrintHost+0x130>
 800a3ec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a3ee:	b2da      	uxtb	r2, r3
 800a3f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a3f2:	1c59      	adds	r1, r3, #1
 800a3f4:	6679      	str	r1, [r7, #100]	@ 0x64
 800a3f6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a3fa:	b2d2      	uxtb	r2, r2
 800a3fc:	701a      	strb	r2, [r3, #0]
 800a3fe:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a400:	09db      	lsrs	r3, r3, #7
 800a402:	663b      	str	r3, [r7, #96]	@ 0x60
 800a404:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800a406:	2b7f      	cmp	r3, #127	@ 0x7f
 800a408:	d8f0      	bhi.n	800a3ec <_VPrintHost+0x118>
 800a40a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a40c:	1c5a      	adds	r2, r3, #1
 800a40e:	667a      	str	r2, [r7, #100]	@ 0x64
 800a410:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800a412:	b2d2      	uxtb	r2, r2
 800a414:	701a      	strb	r2, [r3, #0]
 800a416:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800a418:	67bb      	str	r3, [r7, #120]	@ 0x78
      pParas++;
 800a41a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800a41e:	3304      	adds	r3, #4
 800a420:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    while (NumArguments--) {
 800a424:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800a428:	1e5a      	subs	r2, r3, #1
 800a42a:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d1d5      	bne.n	800a3de <_VPrintHost+0x10a>
    }
    _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800a432:	221a      	movs	r2, #26
 800a434:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800a436:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800a438:	f7ff fdde 	bl	8009ff8 <_SendPacket>
    RECORD_END();
 800a43c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800a43e:	f383 8811 	msr	BASEPRI, r3
  }
  return 0;
 800a442:	2300      	movs	r3, #0
}
 800a444:	4618      	mov	r0, r3
 800a446:	3788      	adds	r7, #136	@ 0x88
 800a448:	46bd      	mov	sp, r7
 800a44a:	bd80      	pop	{r7, pc}
 800a44c:	20013af0 	.word	0x20013af0

0800a450 <SEGGER_SYSVIEW_Init>:
*    The channel is assigned the label "SysView" for client software
*    to identify the SystemView channel.
*
*    The channel is configured with the macro SEGGER_SYSVIEW_RTT_CHANNEL.
*/
void SEGGER_SYSVIEW_Init(U32 SysFreq, U32 CPUFreq, const SEGGER_SYSVIEW_OS_API *pOSAPI, SEGGER_SYSVIEW_SEND_SYS_DESC_FUNC pfSendSysDesc) {
 800a450:	b580      	push	{r7, lr}
 800a452:	b086      	sub	sp, #24
 800a454:	af02      	add	r7, sp, #8
 800a456:	60f8      	str	r0, [r7, #12]
 800a458:	60b9      	str	r1, [r7, #8]
 800a45a:	607a      	str	r2, [r7, #4]
 800a45c:	603b      	str	r3, [r7, #0]
#else // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
#if SEGGER_SYSVIEW_RTT_CHANNEL > 0
  SEGGER_RTT_ConfigUpBuffer   (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
  SEGGER_RTT_ConfigDownBuffer (SEGGER_SYSVIEW_RTT_CHANNEL, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
#else
  _SYSVIEW_Globals.UpChannel = (U8)SEGGER_RTT_AllocUpBuffer  ("SysView", &_UpBuffer[0],   sizeof(_UpBuffer),   SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800a45e:	2300      	movs	r3, #0
 800a460:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800a464:	4917      	ldr	r1, [pc, #92]	@ (800a4c4 <SEGGER_SYSVIEW_Init+0x74>)
 800a466:	4818      	ldr	r0, [pc, #96]	@ (800a4c8 <SEGGER_SYSVIEW_Init+0x78>)
 800a468:	f7ff fbda 	bl	8009c20 <SEGGER_RTT_AllocUpBuffer>
 800a46c:	4603      	mov	r3, r0
 800a46e:	b2da      	uxtb	r2, r3
 800a470:	4b16      	ldr	r3, [pc, #88]	@ (800a4cc <SEGGER_SYSVIEW_Init+0x7c>)
 800a472:	705a      	strb	r2, [r3, #1]
  _SYSVIEW_Globals.DownChannel = _SYSVIEW_Globals.UpChannel;
 800a474:	4b15      	ldr	r3, [pc, #84]	@ (800a4cc <SEGGER_SYSVIEW_Init+0x7c>)
 800a476:	785a      	ldrb	r2, [r3, #1]
 800a478:	4b14      	ldr	r3, [pc, #80]	@ (800a4cc <SEGGER_SYSVIEW_Init+0x7c>)
 800a47a:	761a      	strb	r2, [r3, #24]
  SEGGER_RTT_ConfigDownBuffer (_SYSVIEW_Globals.DownChannel, "SysView", &_DownBuffer[0], sizeof(_DownBuffer), SEGGER_RTT_MODE_NO_BLOCK_SKIP);
 800a47c:	4b13      	ldr	r3, [pc, #76]	@ (800a4cc <SEGGER_SYSVIEW_Init+0x7c>)
 800a47e:	7e1b      	ldrb	r3, [r3, #24]
 800a480:	4618      	mov	r0, r3
 800a482:	2300      	movs	r3, #0
 800a484:	9300      	str	r3, [sp, #0]
 800a486:	2308      	movs	r3, #8
 800a488:	4a11      	ldr	r2, [pc, #68]	@ (800a4d0 <SEGGER_SYSVIEW_Init+0x80>)
 800a48a:	490f      	ldr	r1, [pc, #60]	@ (800a4c8 <SEGGER_SYSVIEW_Init+0x78>)
 800a48c:	f7ff fc4c 	bl	8009d28 <SEGGER_RTT_ConfigDownBuffer>
#endif
  _SYSVIEW_Globals.RAMBaseAddress   = SEGGER_SYSVIEW_ID_BASE;
 800a490:	4b0e      	ldr	r3, [pc, #56]	@ (800a4cc <SEGGER_SYSVIEW_Init+0x7c>)
 800a492:	2200      	movs	r2, #0
 800a494:	611a      	str	r2, [r3, #16]
  _SYSVIEW_Globals.LastTxTimeStamp  = SEGGER_SYSVIEW_GET_TIMESTAMP();
 800a496:	4b0f      	ldr	r3, [pc, #60]	@ (800a4d4 <SEGGER_SYSVIEW_Init+0x84>)
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	4a0c      	ldr	r2, [pc, #48]	@ (800a4cc <SEGGER_SYSVIEW_Init+0x7c>)
 800a49c:	60d3      	str	r3, [r2, #12]
  _SYSVIEW_Globals.pOSAPI           = pOSAPI;
 800a49e:	4a0b      	ldr	r2, [pc, #44]	@ (800a4cc <SEGGER_SYSVIEW_Init+0x7c>)
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	6213      	str	r3, [r2, #32]
  _SYSVIEW_Globals.SysFreq          = SysFreq;
 800a4a4:	4a09      	ldr	r2, [pc, #36]	@ (800a4cc <SEGGER_SYSVIEW_Init+0x7c>)
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	6053      	str	r3, [r2, #4]
  _SYSVIEW_Globals.CPUFreq          = CPUFreq;
 800a4aa:	4a08      	ldr	r2, [pc, #32]	@ (800a4cc <SEGGER_SYSVIEW_Init+0x7c>)
 800a4ac:	68bb      	ldr	r3, [r7, #8]
 800a4ae:	6093      	str	r3, [r2, #8]
  _SYSVIEW_Globals.pfSendSysDesc    = pfSendSysDesc;
 800a4b0:	4a06      	ldr	r2, [pc, #24]	@ (800a4cc <SEGGER_SYSVIEW_Init+0x7c>)
 800a4b2:	683b      	ldr	r3, [r7, #0]
 800a4b4:	6253      	str	r3, [r2, #36]	@ 0x24
  _SYSVIEW_Globals.EnableState      = 0;
 800a4b6:	4b05      	ldr	r3, [pc, #20]	@ (800a4cc <SEGGER_SYSVIEW_Init+0x7c>)
 800a4b8:	2200      	movs	r2, #0
 800a4ba:	701a      	strb	r2, [r3, #0]
#endif  // (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
}
 800a4bc:	bf00      	nop
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}
 800a4c4:	200136b8 	.word	0x200136b8
 800a4c8:	0800f0dc 	.word	0x0800f0dc
 800a4cc:	20013ac0 	.word	0x20013ac0
 800a4d0:	20013ab8 	.word	0x20013ab8
 800a4d4:	e0001004 	.word	0xe0001004

0800a4d8 <SEGGER_SYSVIEW_SetRAMBase>:
*     to save bandwidth.
*
*  Parameters
*    RAMBaseAddress - Lowest RAM Address. (i.e. 0x20000000 on most Cortex-M)
*/
void SEGGER_SYSVIEW_SetRAMBase(U32 RAMBaseAddress) {
 800a4d8:	b480      	push	{r7}
 800a4da:	b083      	sub	sp, #12
 800a4dc:	af00      	add	r7, sp, #0
 800a4de:	6078      	str	r0, [r7, #4]
  _SYSVIEW_Globals.RAMBaseAddress = RAMBaseAddress;
 800a4e0:	4a04      	ldr	r2, [pc, #16]	@ (800a4f4 <SEGGER_SYSVIEW_SetRAMBase+0x1c>)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	6113      	str	r3, [r2, #16]
}
 800a4e6:	bf00      	nop
 800a4e8:	370c      	adds	r7, #12
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4f0:	4770      	bx	lr
 800a4f2:	bf00      	nop
 800a4f4:	20013ac0 	.word	0x20013ac0

0800a4f8 <SEGGER_SYSVIEW_RecordVoid>:
*    Formats and sends a SystemView packet with an empty payload.
*
*  Parameters
*    EventID - SystemView event ID.
*/
void SEGGER_SYSVIEW_RecordVoid(unsigned int EventID) {
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b084      	sub	sp, #16
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a500:	f3ef 8311 	mrs	r3, BASEPRI
 800a504:	f04f 0120 	mov.w	r1, #32
 800a508:	f381 8811 	msr	BASEPRI, r1
 800a50c:	60fb      	str	r3, [r7, #12]
 800a50e:	4808      	ldr	r0, [pc, #32]	@ (800a530 <SEGGER_SYSVIEW_RecordVoid+0x38>)
 800a510:	f7ff fc86 	bl	8009e20 <_PreparePacket>
 800a514:	60b8      	str	r0, [r7, #8]
  //
  _SendPacket(pPayloadStart, pPayloadStart, EventID);
 800a516:	687a      	ldr	r2, [r7, #4]
 800a518:	68b9      	ldr	r1, [r7, #8]
 800a51a:	68b8      	ldr	r0, [r7, #8]
 800a51c:	f7ff fd6c 	bl	8009ff8 <_SendPacket>
  RECORD_END();
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f383 8811 	msr	BASEPRI, r3
}
 800a526:	bf00      	nop
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	20013af0 	.word	0x20013af0

0800a534 <SEGGER_SYSVIEW_RecordU32>:
*
*  Parameters
*    EventID - SystemView event ID.
*    Value   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32(unsigned int EventID, U32 Value) {
 800a534:	b580      	push	{r7, lr}
 800a536:	b088      	sub	sp, #32
 800a538:	af00      	add	r7, sp, #0
 800a53a:	6078      	str	r0, [r7, #4]
 800a53c:	6039      	str	r1, [r7, #0]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800a53e:	f3ef 8311 	mrs	r3, BASEPRI
 800a542:	f04f 0120 	mov.w	r1, #32
 800a546:	f381 8811 	msr	BASEPRI, r1
 800a54a:	617b      	str	r3, [r7, #20]
 800a54c:	4816      	ldr	r0, [pc, #88]	@ (800a5a8 <SEGGER_SYSVIEW_RecordU32+0x74>)
 800a54e:	f7ff fc67 	bl	8009e20 <_PreparePacket>
 800a552:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a554:	693b      	ldr	r3, [r7, #16]
 800a556:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, Value);
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	61fb      	str	r3, [r7, #28]
 800a55c:	683b      	ldr	r3, [r7, #0]
 800a55e:	61bb      	str	r3, [r7, #24]
 800a560:	e00b      	b.n	800a57a <SEGGER_SYSVIEW_RecordU32+0x46>
 800a562:	69bb      	ldr	r3, [r7, #24]
 800a564:	b2da      	uxtb	r2, r3
 800a566:	69fb      	ldr	r3, [r7, #28]
 800a568:	1c59      	adds	r1, r3, #1
 800a56a:	61f9      	str	r1, [r7, #28]
 800a56c:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a570:	b2d2      	uxtb	r2, r2
 800a572:	701a      	strb	r2, [r3, #0]
 800a574:	69bb      	ldr	r3, [r7, #24]
 800a576:	09db      	lsrs	r3, r3, #7
 800a578:	61bb      	str	r3, [r7, #24]
 800a57a:	69bb      	ldr	r3, [r7, #24]
 800a57c:	2b7f      	cmp	r3, #127	@ 0x7f
 800a57e:	d8f0      	bhi.n	800a562 <SEGGER_SYSVIEW_RecordU32+0x2e>
 800a580:	69fb      	ldr	r3, [r7, #28]
 800a582:	1c5a      	adds	r2, r3, #1
 800a584:	61fa      	str	r2, [r7, #28]
 800a586:	69ba      	ldr	r2, [r7, #24]
 800a588:	b2d2      	uxtb	r2, r2
 800a58a:	701a      	strb	r2, [r3, #0]
 800a58c:	69fb      	ldr	r3, [r7, #28]
 800a58e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800a590:	687a      	ldr	r2, [r7, #4]
 800a592:	68f9      	ldr	r1, [r7, #12]
 800a594:	6938      	ldr	r0, [r7, #16]
 800a596:	f7ff fd2f 	bl	8009ff8 <_SendPacket>
  RECORD_END();
 800a59a:	697b      	ldr	r3, [r7, #20]
 800a59c:	f383 8811 	msr	BASEPRI, r3
}
 800a5a0:	bf00      	nop
 800a5a2:	3720      	adds	r7, #32
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}
 800a5a8:	20013af0 	.word	0x20013af0

0800a5ac <SEGGER_SYSVIEW_RecordU32x2>:
*  Parameters
*    EventID - SystemView event ID.
*    Para0   - The 32-bit parameter encoded to SystemView packet payload.
*    Para1   - The 32-bit parameter encoded to SystemView packet payload.
*/
void SEGGER_SYSVIEW_RecordU32x2(unsigned int EventID, U32 Para0, U32 Para1) {
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b08c      	sub	sp, #48	@ 0x30
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	60f8      	str	r0, [r7, #12]
 800a5b4:	60b9      	str	r1, [r7, #8]
 800a5b6:	607a      	str	r2, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32);
 800a5b8:	f3ef 8311 	mrs	r3, BASEPRI
 800a5bc:	f04f 0120 	mov.w	r1, #32
 800a5c0:	f381 8811 	msr	BASEPRI, r1
 800a5c4:	61fb      	str	r3, [r7, #28]
 800a5c6:	4825      	ldr	r0, [pc, #148]	@ (800a65c <SEGGER_SYSVIEW_RecordU32x2+0xb0>)
 800a5c8:	f7ff fc2a 	bl	8009e20 <_PreparePacket>
 800a5cc:	61b8      	str	r0, [r7, #24]
  //
  pPayload = pPayloadStart;
 800a5ce:	69bb      	ldr	r3, [r7, #24]
 800a5d0:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para0);
 800a5d2:	697b      	ldr	r3, [r7, #20]
 800a5d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a5da:	e00b      	b.n	800a5f4 <SEGGER_SYSVIEW_RecordU32x2+0x48>
 800a5dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5de:	b2da      	uxtb	r2, r3
 800a5e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5e2:	1c59      	adds	r1, r3, #1
 800a5e4:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800a5e6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a5ea:	b2d2      	uxtb	r2, r2
 800a5ec:	701a      	strb	r2, [r3, #0]
 800a5ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f0:	09db      	lsrs	r3, r3, #7
 800a5f2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a5f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5f6:	2b7f      	cmp	r3, #127	@ 0x7f
 800a5f8:	d8f0      	bhi.n	800a5dc <SEGGER_SYSVIEW_RecordU32x2+0x30>
 800a5fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a5fc:	1c5a      	adds	r2, r3, #1
 800a5fe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a600:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a602:	b2d2      	uxtb	r2, r2
 800a604:	701a      	strb	r2, [r3, #0]
 800a606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a608:	617b      	str	r3, [r7, #20]
  ENCODE_U32(pPayload, Para1);
 800a60a:	697b      	ldr	r3, [r7, #20]
 800a60c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	623b      	str	r3, [r7, #32]
 800a612:	e00b      	b.n	800a62c <SEGGER_SYSVIEW_RecordU32x2+0x80>
 800a614:	6a3b      	ldr	r3, [r7, #32]
 800a616:	b2da      	uxtb	r2, r3
 800a618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a61a:	1c59      	adds	r1, r3, #1
 800a61c:	6279      	str	r1, [r7, #36]	@ 0x24
 800a61e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a622:	b2d2      	uxtb	r2, r2
 800a624:	701a      	strb	r2, [r3, #0]
 800a626:	6a3b      	ldr	r3, [r7, #32]
 800a628:	09db      	lsrs	r3, r3, #7
 800a62a:	623b      	str	r3, [r7, #32]
 800a62c:	6a3b      	ldr	r3, [r7, #32]
 800a62e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a630:	d8f0      	bhi.n	800a614 <SEGGER_SYSVIEW_RecordU32x2+0x68>
 800a632:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a634:	1c5a      	adds	r2, r3, #1
 800a636:	627a      	str	r2, [r7, #36]	@ 0x24
 800a638:	6a3a      	ldr	r2, [r7, #32]
 800a63a:	b2d2      	uxtb	r2, r2
 800a63c:	701a      	strb	r2, [r3, #0]
 800a63e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a640:	617b      	str	r3, [r7, #20]
  _SendPacket(pPayloadStart, pPayload, EventID);
 800a642:	68fa      	ldr	r2, [r7, #12]
 800a644:	6979      	ldr	r1, [r7, #20]
 800a646:	69b8      	ldr	r0, [r7, #24]
 800a648:	f7ff fcd6 	bl	8009ff8 <_SendPacket>
  RECORD_END();
 800a64c:	69fb      	ldr	r3, [r7, #28]
 800a64e:	f383 8811 	msr	BASEPRI, r3
}
 800a652:	bf00      	nop
 800a654:	3730      	adds	r7, #48	@ 0x30
 800a656:	46bd      	mov	sp, r7
 800a658:	bd80      	pop	{r7, pc}
 800a65a:	bf00      	nop
 800a65c:	20013af0 	.word	0x20013af0

0800a660 <SEGGER_SYSVIEW_Start>:
*    When SEGGER_SYSVIEW_CAN_RESTART is 1, each received start command
*    records the system information. This is required to enable restart
*    of recordings when SystemView unexpectedly disconnects without sending
*    a stop command before.
*/
void SEGGER_SYSVIEW_Start(void) {
 800a660:	b580      	push	{r7, lr}
 800a662:	b08c      	sub	sp, #48	@ 0x30
 800a664:	af00      	add	r7, sp, #0
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  if (_SYSVIEW_Globals.EnableState == 0) {
#endif
    _SYSVIEW_Globals.EnableState = 1;
 800a666:	4b58      	ldr	r3, [pc, #352]	@ (800a7c8 <SEGGER_SYSVIEW_Start+0x168>)
 800a668:	2201      	movs	r2, #1
 800a66a:	701a      	strb	r2, [r3, #0]
#if (SEGGER_SYSVIEW_POST_MORTEM_MODE == 1)
    _SendSyncInfo();
#else
    SEGGER_SYSVIEW_LOCK();
 800a66c:	f3ef 8311 	mrs	r3, BASEPRI
 800a670:	f04f 0120 	mov.w	r1, #32
 800a674:	f381 8811 	msr	BASEPRI, r1
 800a678:	60fb      	str	r3, [r7, #12]
    SEGGER_RTT_WriteSkipNoLock(CHANNEL_ID_UP, _abSync, 10);
 800a67a:	4b53      	ldr	r3, [pc, #332]	@ (800a7c8 <SEGGER_SYSVIEW_Start+0x168>)
 800a67c:	785b      	ldrb	r3, [r3, #1]
 800a67e:	220a      	movs	r2, #10
 800a680:	4952      	ldr	r1, [pc, #328]	@ (800a7cc <SEGGER_SYSVIEW_Start+0x16c>)
 800a682:	4618      	mov	r0, r3
 800a684:	f7f5 fda4 	bl	80001d0 <SEGGER_RTT_ASM_WriteSkipNoLock>
    SEGGER_SYSVIEW_UNLOCK();
 800a688:	68fb      	ldr	r3, [r7, #12]
 800a68a:	f383 8811 	msr	BASEPRI, r3
    SEGGER_SYSVIEW_ON_EVENT_RECORDED(10);
    SEGGER_SYSVIEW_RecordVoid(SYSVIEW_EVTID_TRACE_START);
 800a68e:	200a      	movs	r0, #10
 800a690:	f7ff ff32 	bl	800a4f8 <SEGGER_SYSVIEW_RecordVoid>
    {
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800a694:	f3ef 8311 	mrs	r3, BASEPRI
 800a698:	f04f 0120 	mov.w	r1, #32
 800a69c:	f381 8811 	msr	BASEPRI, r1
 800a6a0:	60bb      	str	r3, [r7, #8]
 800a6a2:	484b      	ldr	r0, [pc, #300]	@ (800a7d0 <SEGGER_SYSVIEW_Start+0x170>)
 800a6a4:	f7ff fbbc 	bl	8009e20 <_PreparePacket>
 800a6a8:	6078      	str	r0, [r7, #4]
      //
      pPayload = pPayloadStart;
 800a6aa:	687b      	ldr	r3, [r7, #4]
 800a6ac:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800a6ae:	683b      	ldr	r3, [r7, #0]
 800a6b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a6b2:	4b45      	ldr	r3, [pc, #276]	@ (800a7c8 <SEGGER_SYSVIEW_Start+0x168>)
 800a6b4:	685b      	ldr	r3, [r3, #4]
 800a6b6:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a6b8:	e00b      	b.n	800a6d2 <SEGGER_SYSVIEW_Start+0x72>
 800a6ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6bc:	b2da      	uxtb	r2, r3
 800a6be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6c0:	1c59      	adds	r1, r3, #1
 800a6c2:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800a6c4:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a6c8:	b2d2      	uxtb	r2, r2
 800a6ca:	701a      	strb	r2, [r3, #0]
 800a6cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6ce:	09db      	lsrs	r3, r3, #7
 800a6d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a6d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6d4:	2b7f      	cmp	r3, #127	@ 0x7f
 800a6d6:	d8f0      	bhi.n	800a6ba <SEGGER_SYSVIEW_Start+0x5a>
 800a6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6da:	1c5a      	adds	r2, r3, #1
 800a6dc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a6de:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a6e0:	b2d2      	uxtb	r2, r2
 800a6e2:	701a      	strb	r2, [r3, #0]
 800a6e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6e6:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6ec:	4b36      	ldr	r3, [pc, #216]	@ (800a7c8 <SEGGER_SYSVIEW_Start+0x168>)
 800a6ee:	689b      	ldr	r3, [r3, #8]
 800a6f0:	623b      	str	r3, [r7, #32]
 800a6f2:	e00b      	b.n	800a70c <SEGGER_SYSVIEW_Start+0xac>
 800a6f4:	6a3b      	ldr	r3, [r7, #32]
 800a6f6:	b2da      	uxtb	r2, r3
 800a6f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6fa:	1c59      	adds	r1, r3, #1
 800a6fc:	6279      	str	r1, [r7, #36]	@ 0x24
 800a6fe:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a702:	b2d2      	uxtb	r2, r2
 800a704:	701a      	strb	r2, [r3, #0]
 800a706:	6a3b      	ldr	r3, [r7, #32]
 800a708:	09db      	lsrs	r3, r3, #7
 800a70a:	623b      	str	r3, [r7, #32]
 800a70c:	6a3b      	ldr	r3, [r7, #32]
 800a70e:	2b7f      	cmp	r3, #127	@ 0x7f
 800a710:	d8f0      	bhi.n	800a6f4 <SEGGER_SYSVIEW_Start+0x94>
 800a712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a714:	1c5a      	adds	r2, r3, #1
 800a716:	627a      	str	r2, [r7, #36]	@ 0x24
 800a718:	6a3a      	ldr	r2, [r7, #32]
 800a71a:	b2d2      	uxtb	r2, r2
 800a71c:	701a      	strb	r2, [r3, #0]
 800a71e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a720:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800a722:	683b      	ldr	r3, [r7, #0]
 800a724:	61fb      	str	r3, [r7, #28]
 800a726:	4b28      	ldr	r3, [pc, #160]	@ (800a7c8 <SEGGER_SYSVIEW_Start+0x168>)
 800a728:	691b      	ldr	r3, [r3, #16]
 800a72a:	61bb      	str	r3, [r7, #24]
 800a72c:	e00b      	b.n	800a746 <SEGGER_SYSVIEW_Start+0xe6>
 800a72e:	69bb      	ldr	r3, [r7, #24]
 800a730:	b2da      	uxtb	r2, r3
 800a732:	69fb      	ldr	r3, [r7, #28]
 800a734:	1c59      	adds	r1, r3, #1
 800a736:	61f9      	str	r1, [r7, #28]
 800a738:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a73c:	b2d2      	uxtb	r2, r2
 800a73e:	701a      	strb	r2, [r3, #0]
 800a740:	69bb      	ldr	r3, [r7, #24]
 800a742:	09db      	lsrs	r3, r3, #7
 800a744:	61bb      	str	r3, [r7, #24]
 800a746:	69bb      	ldr	r3, [r7, #24]
 800a748:	2b7f      	cmp	r3, #127	@ 0x7f
 800a74a:	d8f0      	bhi.n	800a72e <SEGGER_SYSVIEW_Start+0xce>
 800a74c:	69fb      	ldr	r3, [r7, #28]
 800a74e:	1c5a      	adds	r2, r3, #1
 800a750:	61fa      	str	r2, [r7, #28]
 800a752:	69ba      	ldr	r2, [r7, #24]
 800a754:	b2d2      	uxtb	r2, r2
 800a756:	701a      	strb	r2, [r3, #0]
 800a758:	69fb      	ldr	r3, [r7, #28]
 800a75a:	603b      	str	r3, [r7, #0]
      ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800a75c:	683b      	ldr	r3, [r7, #0]
 800a75e:	617b      	str	r3, [r7, #20]
 800a760:	2300      	movs	r3, #0
 800a762:	613b      	str	r3, [r7, #16]
 800a764:	e00b      	b.n	800a77e <SEGGER_SYSVIEW_Start+0x11e>
 800a766:	693b      	ldr	r3, [r7, #16]
 800a768:	b2da      	uxtb	r2, r3
 800a76a:	697b      	ldr	r3, [r7, #20]
 800a76c:	1c59      	adds	r1, r3, #1
 800a76e:	6179      	str	r1, [r7, #20]
 800a770:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a774:	b2d2      	uxtb	r2, r2
 800a776:	701a      	strb	r2, [r3, #0]
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	09db      	lsrs	r3, r3, #7
 800a77c:	613b      	str	r3, [r7, #16]
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	2b7f      	cmp	r3, #127	@ 0x7f
 800a782:	d8f0      	bhi.n	800a766 <SEGGER_SYSVIEW_Start+0x106>
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	1c5a      	adds	r2, r3, #1
 800a788:	617a      	str	r2, [r7, #20]
 800a78a:	693a      	ldr	r2, [r7, #16]
 800a78c:	b2d2      	uxtb	r2, r2
 800a78e:	701a      	strb	r2, [r3, #0]
 800a790:	697b      	ldr	r3, [r7, #20]
 800a792:	603b      	str	r3, [r7, #0]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800a794:	2218      	movs	r2, #24
 800a796:	6839      	ldr	r1, [r7, #0]
 800a798:	6878      	ldr	r0, [r7, #4]
 800a79a:	f7ff fc2d 	bl	8009ff8 <_SendPacket>
      RECORD_END();
 800a79e:	68bb      	ldr	r3, [r7, #8]
 800a7a0:	f383 8811 	msr	BASEPRI, r3
    }
    if (_SYSVIEW_Globals.pfSendSysDesc) {
 800a7a4:	4b08      	ldr	r3, [pc, #32]	@ (800a7c8 <SEGGER_SYSVIEW_Start+0x168>)
 800a7a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7a8:	2b00      	cmp	r3, #0
 800a7aa:	d002      	beq.n	800a7b2 <SEGGER_SYSVIEW_Start+0x152>
      _SYSVIEW_Globals.pfSendSysDesc();
 800a7ac:	4b06      	ldr	r3, [pc, #24]	@ (800a7c8 <SEGGER_SYSVIEW_Start+0x168>)
 800a7ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a7b0:	4798      	blx	r3
    }
    SEGGER_SYSVIEW_RecordSystime();
 800a7b2:	f000 f9eb 	bl	800ab8c <SEGGER_SYSVIEW_RecordSystime>
    SEGGER_SYSVIEW_SendTaskList();
 800a7b6:	f000 f9b1 	bl	800ab1c <SEGGER_SYSVIEW_SendTaskList>
    SEGGER_SYSVIEW_SendNumModules();
 800a7ba:	f000 fba3 	bl	800af04 <SEGGER_SYSVIEW_SendNumModules>
#endif
#if (SEGGER_SYSVIEW_CAN_RESTART == 0)
  }
#endif
}
 800a7be:	bf00      	nop
 800a7c0:	3730      	adds	r7, #48	@ 0x30
 800a7c2:	46bd      	mov	sp, r7
 800a7c4:	bd80      	pop	{r7, pc}
 800a7c6:	bf00      	nop
 800a7c8:	20013ac0 	.word	0x20013ac0
 800a7cc:	0800f118 	.word	0x0800f118
 800a7d0:	20013af0 	.word	0x20013af0

0800a7d4 <SEGGER_SYSVIEW_Stop>:
*    This function disables transmission of SystemView packets recorded
*    by subsequent trace calls.  If transmission is enabled when
*    this function is called, a single SystemView Stop event is recorded
*    to the trace, send, and then trace transmission is halted.
*/
void SEGGER_SYSVIEW_Stop(void) {
 800a7d4:	b580      	push	{r7, lr}
 800a7d6:	b082      	sub	sp, #8
 800a7d8:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800a7da:	f3ef 8311 	mrs	r3, BASEPRI
 800a7de:	f04f 0120 	mov.w	r1, #32
 800a7e2:	f381 8811 	msr	BASEPRI, r1
 800a7e6:	607b      	str	r3, [r7, #4]
 800a7e8:	480b      	ldr	r0, [pc, #44]	@ (800a818 <SEGGER_SYSVIEW_Stop+0x44>)
 800a7ea:	f7ff fb19 	bl	8009e20 <_PreparePacket>
 800a7ee:	6038      	str	r0, [r7, #0]
  //
  if (_SYSVIEW_Globals.EnableState) {
 800a7f0:	4b0a      	ldr	r3, [pc, #40]	@ (800a81c <SEGGER_SYSVIEW_Stop+0x48>)
 800a7f2:	781b      	ldrb	r3, [r3, #0]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d007      	beq.n	800a808 <SEGGER_SYSVIEW_Stop+0x34>
    _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_TRACE_STOP);
 800a7f8:	220b      	movs	r2, #11
 800a7fa:	6839      	ldr	r1, [r7, #0]
 800a7fc:	6838      	ldr	r0, [r7, #0]
 800a7fe:	f7ff fbfb 	bl	8009ff8 <_SendPacket>
    _SYSVIEW_Globals.EnableState = 0;
 800a802:	4b06      	ldr	r3, [pc, #24]	@ (800a81c <SEGGER_SYSVIEW_Stop+0x48>)
 800a804:	2200      	movs	r2, #0
 800a806:	701a      	strb	r2, [r3, #0]
  }
  RECORD_END();
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	f383 8811 	msr	BASEPRI, r3
}
 800a80e:	bf00      	nop
 800a810:	3708      	adds	r7, #8
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	20013af0 	.word	0x20013af0
 800a81c:	20013ac0 	.word	0x20013ac0

0800a820 <SEGGER_SYSVIEW_GetSysDesc>:
*
*  Function description
*    Triggers a send of the system information and description.
*
*/
void SEGGER_SYSVIEW_GetSysDesc(void) {
 800a820:	b580      	push	{r7, lr}
 800a822:	b08c      	sub	sp, #48	@ 0x30
 800a824:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 4 * SEGGER_SYSVIEW_QUANTA_U32);
 800a826:	f3ef 8311 	mrs	r3, BASEPRI
 800a82a:	f04f 0120 	mov.w	r1, #32
 800a82e:	f381 8811 	msr	BASEPRI, r1
 800a832:	60fb      	str	r3, [r7, #12]
 800a834:	4845      	ldr	r0, [pc, #276]	@ (800a94c <SEGGER_SYSVIEW_GetSysDesc+0x12c>)
 800a836:	f7ff faf3 	bl	8009e20 <_PreparePacket>
 800a83a:	60b8      	str	r0, [r7, #8]
  //
  pPayload = pPayloadStart;
 800a83c:	68bb      	ldr	r3, [r7, #8]
 800a83e:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.SysFreq);
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800a844:	4b42      	ldr	r3, [pc, #264]	@ (800a950 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a84a:	e00b      	b.n	800a864 <SEGGER_SYSVIEW_GetSysDesc+0x44>
 800a84c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a84e:	b2da      	uxtb	r2, r3
 800a850:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a852:	1c59      	adds	r1, r3, #1
 800a854:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800a856:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a85a:	b2d2      	uxtb	r2, r2
 800a85c:	701a      	strb	r2, [r3, #0]
 800a85e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a860:	09db      	lsrs	r3, r3, #7
 800a862:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a864:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a866:	2b7f      	cmp	r3, #127	@ 0x7f
 800a868:	d8f0      	bhi.n	800a84c <SEGGER_SYSVIEW_GetSysDesc+0x2c>
 800a86a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a86c:	1c5a      	adds	r2, r3, #1
 800a86e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a870:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a872:	b2d2      	uxtb	r2, r2
 800a874:	701a      	strb	r2, [r3, #0]
 800a876:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a878:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.CPUFreq);
 800a87a:	687b      	ldr	r3, [r7, #4]
 800a87c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a87e:	4b34      	ldr	r3, [pc, #208]	@ (800a950 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	623b      	str	r3, [r7, #32]
 800a884:	e00b      	b.n	800a89e <SEGGER_SYSVIEW_GetSysDesc+0x7e>
 800a886:	6a3b      	ldr	r3, [r7, #32]
 800a888:	b2da      	uxtb	r2, r3
 800a88a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a88c:	1c59      	adds	r1, r3, #1
 800a88e:	6279      	str	r1, [r7, #36]	@ 0x24
 800a890:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a894:	b2d2      	uxtb	r2, r2
 800a896:	701a      	strb	r2, [r3, #0]
 800a898:	6a3b      	ldr	r3, [r7, #32]
 800a89a:	09db      	lsrs	r3, r3, #7
 800a89c:	623b      	str	r3, [r7, #32]
 800a89e:	6a3b      	ldr	r3, [r7, #32]
 800a8a0:	2b7f      	cmp	r3, #127	@ 0x7f
 800a8a2:	d8f0      	bhi.n	800a886 <SEGGER_SYSVIEW_GetSysDesc+0x66>
 800a8a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8a6:	1c5a      	adds	r2, r3, #1
 800a8a8:	627a      	str	r2, [r7, #36]	@ 0x24
 800a8aa:	6a3a      	ldr	r2, [r7, #32]
 800a8ac:	b2d2      	uxtb	r2, r2
 800a8ae:	701a      	strb	r2, [r3, #0]
 800a8b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a8b2:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _SYSVIEW_Globals.RAMBaseAddress);
 800a8b4:	687b      	ldr	r3, [r7, #4]
 800a8b6:	61fb      	str	r3, [r7, #28]
 800a8b8:	4b25      	ldr	r3, [pc, #148]	@ (800a950 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a8ba:	691b      	ldr	r3, [r3, #16]
 800a8bc:	61bb      	str	r3, [r7, #24]
 800a8be:	e00b      	b.n	800a8d8 <SEGGER_SYSVIEW_GetSysDesc+0xb8>
 800a8c0:	69bb      	ldr	r3, [r7, #24]
 800a8c2:	b2da      	uxtb	r2, r3
 800a8c4:	69fb      	ldr	r3, [r7, #28]
 800a8c6:	1c59      	adds	r1, r3, #1
 800a8c8:	61f9      	str	r1, [r7, #28]
 800a8ca:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a8ce:	b2d2      	uxtb	r2, r2
 800a8d0:	701a      	strb	r2, [r3, #0]
 800a8d2:	69bb      	ldr	r3, [r7, #24]
 800a8d4:	09db      	lsrs	r3, r3, #7
 800a8d6:	61bb      	str	r3, [r7, #24]
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	2b7f      	cmp	r3, #127	@ 0x7f
 800a8dc:	d8f0      	bhi.n	800a8c0 <SEGGER_SYSVIEW_GetSysDesc+0xa0>
 800a8de:	69fb      	ldr	r3, [r7, #28]
 800a8e0:	1c5a      	adds	r2, r3, #1
 800a8e2:	61fa      	str	r2, [r7, #28]
 800a8e4:	69ba      	ldr	r2, [r7, #24]
 800a8e6:	b2d2      	uxtb	r2, r2
 800a8e8:	701a      	strb	r2, [r3, #0]
 800a8ea:	69fb      	ldr	r3, [r7, #28]
 800a8ec:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_ID_SHIFT);
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	617b      	str	r3, [r7, #20]
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	613b      	str	r3, [r7, #16]
 800a8f6:	e00b      	b.n	800a910 <SEGGER_SYSVIEW_GetSysDesc+0xf0>
 800a8f8:	693b      	ldr	r3, [r7, #16]
 800a8fa:	b2da      	uxtb	r2, r3
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	1c59      	adds	r1, r3, #1
 800a900:	6179      	str	r1, [r7, #20]
 800a902:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a906:	b2d2      	uxtb	r2, r2
 800a908:	701a      	strb	r2, [r3, #0]
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	09db      	lsrs	r3, r3, #7
 800a90e:	613b      	str	r3, [r7, #16]
 800a910:	693b      	ldr	r3, [r7, #16]
 800a912:	2b7f      	cmp	r3, #127	@ 0x7f
 800a914:	d8f0      	bhi.n	800a8f8 <SEGGER_SYSVIEW_GetSysDesc+0xd8>
 800a916:	697b      	ldr	r3, [r7, #20]
 800a918:	1c5a      	adds	r2, r3, #1
 800a91a:	617a      	str	r2, [r7, #20]
 800a91c:	693a      	ldr	r2, [r7, #16]
 800a91e:	b2d2      	uxtb	r2, r2
 800a920:	701a      	strb	r2, [r3, #0]
 800a922:	697b      	ldr	r3, [r7, #20]
 800a924:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_INIT);
 800a926:	2218      	movs	r2, #24
 800a928:	6879      	ldr	r1, [r7, #4]
 800a92a:	68b8      	ldr	r0, [r7, #8]
 800a92c:	f7ff fb64 	bl	8009ff8 <_SendPacket>
  RECORD_END();
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	f383 8811 	msr	BASEPRI, r3
  if (_SYSVIEW_Globals.pfSendSysDesc) {
 800a936:	4b06      	ldr	r3, [pc, #24]	@ (800a950 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a938:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d002      	beq.n	800a944 <SEGGER_SYSVIEW_GetSysDesc+0x124>
    _SYSVIEW_Globals.pfSendSysDesc();
 800a93e:	4b04      	ldr	r3, [pc, #16]	@ (800a950 <SEGGER_SYSVIEW_GetSysDesc+0x130>)
 800a940:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a942:	4798      	blx	r3
  }
}
 800a944:	bf00      	nop
 800a946:	3730      	adds	r7, #48	@ 0x30
 800a948:	46bd      	mov	sp, r7
 800a94a:	bd80      	pop	{r7, pc}
 800a94c:	20013af0 	.word	0x20013af0
 800a950:	20013ac0 	.word	0x20013ac0

0800a954 <SEGGER_SYSVIEW_SendTaskInfo>:
*    task priority and task name.
*
*  Parameters
*    pInfo - Pointer to task information to send.
*/
void SEGGER_SYSVIEW_SendTaskInfo(const SEGGER_SYSVIEW_TASKINFO *pInfo) {
 800a954:	b580      	push	{r7, lr}
 800a956:	b092      	sub	sp, #72	@ 0x48
 800a958:	af00      	add	r7, sp, #0
 800a95a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32 + 1 + 32);
 800a95c:	f3ef 8311 	mrs	r3, BASEPRI
 800a960:	f04f 0120 	mov.w	r1, #32
 800a964:	f381 8811 	msr	BASEPRI, r1
 800a968:	617b      	str	r3, [r7, #20]
 800a96a:	486a      	ldr	r0, [pc, #424]	@ (800ab14 <SEGGER_SYSVIEW_SendTaskInfo+0x1c0>)
 800a96c:	f7ff fa58 	bl	8009e20 <_PreparePacket>
 800a970:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800a972:	693b      	ldr	r3, [r7, #16]
 800a974:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	647b      	str	r3, [r7, #68]	@ 0x44
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681a      	ldr	r2, [r3, #0]
 800a97e:	4b66      	ldr	r3, [pc, #408]	@ (800ab18 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800a980:	691b      	ldr	r3, [r3, #16]
 800a982:	1ad3      	subs	r3, r2, r3
 800a984:	643b      	str	r3, [r7, #64]	@ 0x40
 800a986:	e00b      	b.n	800a9a0 <SEGGER_SYSVIEW_SendTaskInfo+0x4c>
 800a988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a98a:	b2da      	uxtb	r2, r3
 800a98c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a98e:	1c59      	adds	r1, r3, #1
 800a990:	6479      	str	r1, [r7, #68]	@ 0x44
 800a992:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a996:	b2d2      	uxtb	r2, r2
 800a998:	701a      	strb	r2, [r3, #0]
 800a99a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a99c:	09db      	lsrs	r3, r3, #7
 800a99e:	643b      	str	r3, [r7, #64]	@ 0x40
 800a9a0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800a9a2:	2b7f      	cmp	r3, #127	@ 0x7f
 800a9a4:	d8f0      	bhi.n	800a988 <SEGGER_SYSVIEW_SendTaskInfo+0x34>
 800a9a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9a8:	1c5a      	adds	r2, r3, #1
 800a9aa:	647a      	str	r2, [r7, #68]	@ 0x44
 800a9ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a9ae:	b2d2      	uxtb	r2, r2
 800a9b0:	701a      	strb	r2, [r3, #0]
 800a9b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a9b4:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->Prio);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a9c0:	e00b      	b.n	800a9da <SEGGER_SYSVIEW_SendTaskInfo+0x86>
 800a9c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9c4:	b2da      	uxtb	r2, r3
 800a9c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9c8:	1c59      	adds	r1, r3, #1
 800a9ca:	63f9      	str	r1, [r7, #60]	@ 0x3c
 800a9cc:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800a9d0:	b2d2      	uxtb	r2, r2
 800a9d2:	701a      	strb	r2, [r3, #0]
 800a9d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9d6:	09db      	lsrs	r3, r3, #7
 800a9d8:	63bb      	str	r3, [r7, #56]	@ 0x38
 800a9da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a9dc:	2b7f      	cmp	r3, #127	@ 0x7f
 800a9de:	d8f0      	bhi.n	800a9c2 <SEGGER_SYSVIEW_SendTaskInfo+0x6e>
 800a9e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9e2:	1c5a      	adds	r2, r3, #1
 800a9e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800a9e6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a9e8:	b2d2      	uxtb	r2, r2
 800a9ea:	701a      	strb	r2, [r3, #0]
 800a9ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a9ee:	60fb      	str	r3, [r7, #12]
  pPayload = _EncodeStr(pPayload, pInfo->sName, 32);
 800a9f0:	687b      	ldr	r3, [r7, #4]
 800a9f2:	685b      	ldr	r3, [r3, #4]
 800a9f4:	2220      	movs	r2, #32
 800a9f6:	4619      	mov	r1, r3
 800a9f8:	68f8      	ldr	r0, [r7, #12]
 800a9fa:	f7ff f9e1 	bl	8009dc0 <_EncodeStr>
 800a9fe:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_INFO);
 800aa00:	2209      	movs	r2, #9
 800aa02:	68f9      	ldr	r1, [r7, #12]
 800aa04:	6938      	ldr	r0, [r7, #16]
 800aa06:	f7ff faf7 	bl	8009ff8 <_SendPacket>
  //
  pPayload = pPayloadStart;
 800aa0a:	693b      	ldr	r3, [r7, #16]
 800aa0c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, SHRINK_ID(pInfo->TaskID));
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	637b      	str	r3, [r7, #52]	@ 0x34
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	681a      	ldr	r2, [r3, #0]
 800aa16:	4b40      	ldr	r3, [pc, #256]	@ (800ab18 <SEGGER_SYSVIEW_SendTaskInfo+0x1c4>)
 800aa18:	691b      	ldr	r3, [r3, #16]
 800aa1a:	1ad3      	subs	r3, r2, r3
 800aa1c:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa1e:	e00b      	b.n	800aa38 <SEGGER_SYSVIEW_SendTaskInfo+0xe4>
 800aa20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa22:	b2da      	uxtb	r2, r3
 800aa24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa26:	1c59      	adds	r1, r3, #1
 800aa28:	6379      	str	r1, [r7, #52]	@ 0x34
 800aa2a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800aa2e:	b2d2      	uxtb	r2, r2
 800aa30:	701a      	strb	r2, [r3, #0]
 800aa32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa34:	09db      	lsrs	r3, r3, #7
 800aa36:	633b      	str	r3, [r7, #48]	@ 0x30
 800aa38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa3a:	2b7f      	cmp	r3, #127	@ 0x7f
 800aa3c:	d8f0      	bhi.n	800aa20 <SEGGER_SYSVIEW_SendTaskInfo+0xcc>
 800aa3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa40:	1c5a      	adds	r2, r3, #1
 800aa42:	637a      	str	r2, [r7, #52]	@ 0x34
 800aa44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aa46:	b2d2      	uxtb	r2, r2
 800aa48:	701a      	strb	r2, [r3, #0]
 800aa4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800aa4c:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackBase);
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	68db      	ldr	r3, [r3, #12]
 800aa56:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aa58:	e00b      	b.n	800aa72 <SEGGER_SYSVIEW_SendTaskInfo+0x11e>
 800aa5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa5c:	b2da      	uxtb	r2, r3
 800aa5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa60:	1c59      	adds	r1, r3, #1
 800aa62:	62f9      	str	r1, [r7, #44]	@ 0x2c
 800aa64:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800aa68:	b2d2      	uxtb	r2, r2
 800aa6a:	701a      	strb	r2, [r3, #0]
 800aa6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa6e:	09db      	lsrs	r3, r3, #7
 800aa70:	62bb      	str	r3, [r7, #40]	@ 0x28
 800aa72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa74:	2b7f      	cmp	r3, #127	@ 0x7f
 800aa76:	d8f0      	bhi.n	800aa5a <SEGGER_SYSVIEW_SendTaskInfo+0x106>
 800aa78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa7a:	1c5a      	adds	r2, r3, #1
 800aa7c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800aa7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa80:	b2d2      	uxtb	r2, r2
 800aa82:	701a      	strb	r2, [r3, #0]
 800aa84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa86:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, pInfo->StackSize);
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	691b      	ldr	r3, [r3, #16]
 800aa90:	623b      	str	r3, [r7, #32]
 800aa92:	e00b      	b.n	800aaac <SEGGER_SYSVIEW_SendTaskInfo+0x158>
 800aa94:	6a3b      	ldr	r3, [r7, #32]
 800aa96:	b2da      	uxtb	r2, r3
 800aa98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa9a:	1c59      	adds	r1, r3, #1
 800aa9c:	6279      	str	r1, [r7, #36]	@ 0x24
 800aa9e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800aaa2:	b2d2      	uxtb	r2, r2
 800aaa4:	701a      	strb	r2, [r3, #0]
 800aaa6:	6a3b      	ldr	r3, [r7, #32]
 800aaa8:	09db      	lsrs	r3, r3, #7
 800aaaa:	623b      	str	r3, [r7, #32]
 800aaac:	6a3b      	ldr	r3, [r7, #32]
 800aaae:	2b7f      	cmp	r3, #127	@ 0x7f
 800aab0:	d8f0      	bhi.n	800aa94 <SEGGER_SYSVIEW_SendTaskInfo+0x140>
 800aab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab4:	1c5a      	adds	r2, r3, #1
 800aab6:	627a      	str	r2, [r7, #36]	@ 0x24
 800aab8:	6a3a      	ldr	r2, [r7, #32]
 800aaba:	b2d2      	uxtb	r2, r2
 800aabc:	701a      	strb	r2, [r3, #0]
 800aabe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aac0:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0); // Stack End, future use
 800aac2:	68fb      	ldr	r3, [r7, #12]
 800aac4:	61fb      	str	r3, [r7, #28]
 800aac6:	2300      	movs	r3, #0
 800aac8:	61bb      	str	r3, [r7, #24]
 800aaca:	e00b      	b.n	800aae4 <SEGGER_SYSVIEW_SendTaskInfo+0x190>
 800aacc:	69bb      	ldr	r3, [r7, #24]
 800aace:	b2da      	uxtb	r2, r3
 800aad0:	69fb      	ldr	r3, [r7, #28]
 800aad2:	1c59      	adds	r1, r3, #1
 800aad4:	61f9      	str	r1, [r7, #28]
 800aad6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800aada:	b2d2      	uxtb	r2, r2
 800aadc:	701a      	strb	r2, [r3, #0]
 800aade:	69bb      	ldr	r3, [r7, #24]
 800aae0:	09db      	lsrs	r3, r3, #7
 800aae2:	61bb      	str	r3, [r7, #24]
 800aae4:	69bb      	ldr	r3, [r7, #24]
 800aae6:	2b7f      	cmp	r3, #127	@ 0x7f
 800aae8:	d8f0      	bhi.n	800aacc <SEGGER_SYSVIEW_SendTaskInfo+0x178>
 800aaea:	69fb      	ldr	r3, [r7, #28]
 800aaec:	1c5a      	adds	r2, r3, #1
 800aaee:	61fa      	str	r2, [r7, #28]
 800aaf0:	69ba      	ldr	r2, [r7, #24]
 800aaf2:	b2d2      	uxtb	r2, r2
 800aaf4:	701a      	strb	r2, [r3, #0]
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_STACK_INFO);
 800aafa:	2215      	movs	r2, #21
 800aafc:	68f9      	ldr	r1, [r7, #12]
 800aafe:	6938      	ldr	r0, [r7, #16]
 800ab00:	f7ff fa7a 	bl	8009ff8 <_SendPacket>
  RECORD_END();
 800ab04:	697b      	ldr	r3, [r7, #20]
 800ab06:	f383 8811 	msr	BASEPRI, r3
}
 800ab0a:	bf00      	nop
 800ab0c:	3748      	adds	r7, #72	@ 0x48
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	20013af0 	.word	0x20013af0
 800ab18:	20013ac0 	.word	0x20013ac0

0800ab1c <SEGGER_SYSVIEW_SendTaskList>:
*       SEGGER_SYSVIEW_SendTaskList()
*
*  Function description
*    Send all tasks descriptors to the host.
*/
void SEGGER_SYSVIEW_SendTaskList(void) {
 800ab1c:	b580      	push	{r7, lr}
 800ab1e:	af00      	add	r7, sp, #0
  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfSendTaskList) {
 800ab20:	4b07      	ldr	r3, [pc, #28]	@ (800ab40 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800ab22:	6a1b      	ldr	r3, [r3, #32]
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	d008      	beq.n	800ab3a <SEGGER_SYSVIEW_SendTaskList+0x1e>
 800ab28:	4b05      	ldr	r3, [pc, #20]	@ (800ab40 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800ab2a:	6a1b      	ldr	r3, [r3, #32]
 800ab2c:	685b      	ldr	r3, [r3, #4]
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d003      	beq.n	800ab3a <SEGGER_SYSVIEW_SendTaskList+0x1e>
    _SYSVIEW_Globals.pOSAPI->pfSendTaskList();
 800ab32:	4b03      	ldr	r3, [pc, #12]	@ (800ab40 <SEGGER_SYSVIEW_SendTaskList+0x24>)
 800ab34:	6a1b      	ldr	r3, [r3, #32]
 800ab36:	685b      	ldr	r3, [r3, #4]
 800ab38:	4798      	blx	r3
  }
}
 800ab3a:	bf00      	nop
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	20013ac0 	.word	0x20013ac0

0800ab44 <SEGGER_SYSVIEW_SendSysDesc>:
*
*    The Following items can be described in a system description string.
*    Each item is identified by its identifier, followed by '=' and the value.
*    Items are separated by ','.
*/
void SEGGER_SYSVIEW_SendSysDesc(const char *sSysDesc) {
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b086      	sub	sp, #24
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ab4c:	f3ef 8311 	mrs	r3, BASEPRI
 800ab50:	f04f 0120 	mov.w	r1, #32
 800ab54:	f381 8811 	msr	BASEPRI, r1
 800ab58:	617b      	str	r3, [r7, #20]
 800ab5a:	480b      	ldr	r0, [pc, #44]	@ (800ab88 <SEGGER_SYSVIEW_SendSysDesc+0x44>)
 800ab5c:	f7ff f960 	bl	8009e20 <_PreparePacket>
 800ab60:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, sSysDesc, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ab62:	2280      	movs	r2, #128	@ 0x80
 800ab64:	6879      	ldr	r1, [r7, #4]
 800ab66:	6938      	ldr	r0, [r7, #16]
 800ab68:	f7ff f92a 	bl	8009dc0 <_EncodeStr>
 800ab6c:	60f8      	str	r0, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_SYSDESC);
 800ab6e:	220e      	movs	r2, #14
 800ab70:	68f9      	ldr	r1, [r7, #12]
 800ab72:	6938      	ldr	r0, [r7, #16]
 800ab74:	f7ff fa40 	bl	8009ff8 <_SendPacket>
  RECORD_END();
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	f383 8811 	msr	BASEPRI, r3
}
 800ab7e:	bf00      	nop
 800ab80:	3718      	adds	r7, #24
 800ab82:	46bd      	mov	sp, r7
 800ab84:	bd80      	pop	{r7, pc}
 800ab86:	bf00      	nop
 800ab88:	20013af0 	.word	0x20013af0

0800ab8c <SEGGER_SYSVIEW_RecordSystime>:
*
*  Function description
*    Formats and sends a SystemView Systime containing a single U64 or U32
*    parameter payload.
*/
void SEGGER_SYSVIEW_RecordSystime(void) {
 800ab8c:	b590      	push	{r4, r7, lr}
 800ab8e:	b083      	sub	sp, #12
 800ab90:	af00      	add	r7, sp, #0
  U64 Systime;

  if (_SYSVIEW_Globals.pOSAPI && _SYSVIEW_Globals.pOSAPI->pfGetTime) {
 800ab92:	4b15      	ldr	r3, [pc, #84]	@ (800abe8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800ab94:	6a1b      	ldr	r3, [r3, #32]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d01a      	beq.n	800abd0 <SEGGER_SYSVIEW_RecordSystime+0x44>
 800ab9a:	4b13      	ldr	r3, [pc, #76]	@ (800abe8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800ab9c:	6a1b      	ldr	r3, [r3, #32]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d015      	beq.n	800abd0 <SEGGER_SYSVIEW_RecordSystime+0x44>
    Systime = _SYSVIEW_Globals.pOSAPI->pfGetTime();
 800aba4:	4b10      	ldr	r3, [pc, #64]	@ (800abe8 <SEGGER_SYSVIEW_RecordSystime+0x5c>)
 800aba6:	6a1b      	ldr	r3, [r3, #32]
 800aba8:	681b      	ldr	r3, [r3, #0]
 800abaa:	4798      	blx	r3
 800abac:	e9c7 0100 	strd	r0, r1, [r7]
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800abb0:	683c      	ldr	r4, [r7, #0]
                               (U32)(Systime),
                               (U32)(Systime >> 32));
 800abb2:	e9d7 0100 	ldrd	r0, r1, [r7]
 800abb6:	f04f 0200 	mov.w	r2, #0
 800abba:	f04f 0300 	mov.w	r3, #0
 800abbe:	000a      	movs	r2, r1
 800abc0:	2300      	movs	r3, #0
    SEGGER_SYSVIEW_RecordU32x2(SYSVIEW_EVTID_SYSTIME_US,
 800abc2:	4613      	mov	r3, r2
 800abc4:	461a      	mov	r2, r3
 800abc6:	4621      	mov	r1, r4
 800abc8:	200d      	movs	r0, #13
 800abca:	f7ff fcef 	bl	800a5ac <SEGGER_SYSVIEW_RecordU32x2>
 800abce:	e006      	b.n	800abde <SEGGER_SYSVIEW_RecordSystime+0x52>
  } else {
    SEGGER_SYSVIEW_RecordU32(SYSVIEW_EVTID_SYSTIME_CYCLES, SEGGER_SYSVIEW_GET_TIMESTAMP());
 800abd0:	4b06      	ldr	r3, [pc, #24]	@ (800abec <SEGGER_SYSVIEW_RecordSystime+0x60>)
 800abd2:	681b      	ldr	r3, [r3, #0]
 800abd4:	4619      	mov	r1, r3
 800abd6:	200c      	movs	r0, #12
 800abd8:	f7ff fcac 	bl	800a534 <SEGGER_SYSVIEW_RecordU32>
  }
}
 800abdc:	bf00      	nop
 800abde:	bf00      	nop
 800abe0:	370c      	adds	r7, #12
 800abe2:	46bd      	mov	sp, r7
 800abe4:	bd90      	pop	{r4, r7, pc}
 800abe6:	bf00      	nop
 800abe8:	20013ac0 	.word	0x20013ac0
 800abec:	e0001004 	.word	0xe0001004

0800abf0 <SEGGER_SYSVIEW_OnIdle>:
*       SEGGER_SYSVIEW_OnIdle()
*
*  Function description
*    Record an Idle event.
*/
void SEGGER_SYSVIEW_OnIdle(void) {
 800abf0:	b580      	push	{r7, lr}
 800abf2:	b082      	sub	sp, #8
 800abf4:	af00      	add	r7, sp, #0
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE);
 800abf6:	f3ef 8311 	mrs	r3, BASEPRI
 800abfa:	f04f 0120 	mov.w	r1, #32
 800abfe:	f381 8811 	msr	BASEPRI, r1
 800ac02:	607b      	str	r3, [r7, #4]
 800ac04:	4807      	ldr	r0, [pc, #28]	@ (800ac24 <SEGGER_SYSVIEW_OnIdle+0x34>)
 800ac06:	f7ff f90b 	bl	8009e20 <_PreparePacket>
 800ac0a:	6038      	str	r0, [r7, #0]
  //
  _SendPacket(pPayloadStart, pPayloadStart, SYSVIEW_EVTID_IDLE);
 800ac0c:	2211      	movs	r2, #17
 800ac0e:	6839      	ldr	r1, [r7, #0]
 800ac10:	6838      	ldr	r0, [r7, #0]
 800ac12:	f7ff f9f1 	bl	8009ff8 <_SendPacket>
  RECORD_END();
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	f383 8811 	msr	BASEPRI, r3
}
 800ac1c:	bf00      	nop
 800ac1e:	3708      	adds	r7, #8
 800ac20:	46bd      	mov	sp, r7
 800ac22:	bd80      	pop	{r7, pc}
 800ac24:	20013af0 	.word	0x20013af0

0800ac28 <SEGGER_SYSVIEW_OnTaskCreate>:
*    to creating a task in the OS.
*
*  Parameters
*    TaskId        - Task ID of created task.
*/
void SEGGER_SYSVIEW_OnTaskCreate(U32 TaskId) {
 800ac28:	b580      	push	{r7, lr}
 800ac2a:	b088      	sub	sp, #32
 800ac2c:	af00      	add	r7, sp, #0
 800ac2e:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ac30:	f3ef 8311 	mrs	r3, BASEPRI
 800ac34:	f04f 0120 	mov.w	r1, #32
 800ac38:	f381 8811 	msr	BASEPRI, r1
 800ac3c:	617b      	str	r3, [r7, #20]
 800ac3e:	4819      	ldr	r0, [pc, #100]	@ (800aca4 <SEGGER_SYSVIEW_OnTaskCreate+0x7c>)
 800ac40:	f7ff f8ee 	bl	8009e20 <_PreparePacket>
 800ac44:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ac46:	693b      	ldr	r3, [r7, #16]
 800ac48:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800ac4a:	4b17      	ldr	r3, [pc, #92]	@ (800aca8 <SEGGER_SYSVIEW_OnTaskCreate+0x80>)
 800ac4c:	691b      	ldr	r3, [r3, #16]
 800ac4e:	687a      	ldr	r2, [r7, #4]
 800ac50:	1ad3      	subs	r3, r2, r3
 800ac52:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800ac54:	68fb      	ldr	r3, [r7, #12]
 800ac56:	61fb      	str	r3, [r7, #28]
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	61bb      	str	r3, [r7, #24]
 800ac5c:	e00b      	b.n	800ac76 <SEGGER_SYSVIEW_OnTaskCreate+0x4e>
 800ac5e:	69bb      	ldr	r3, [r7, #24]
 800ac60:	b2da      	uxtb	r2, r3
 800ac62:	69fb      	ldr	r3, [r7, #28]
 800ac64:	1c59      	adds	r1, r3, #1
 800ac66:	61f9      	str	r1, [r7, #28]
 800ac68:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ac6c:	b2d2      	uxtb	r2, r2
 800ac6e:	701a      	strb	r2, [r3, #0]
 800ac70:	69bb      	ldr	r3, [r7, #24]
 800ac72:	09db      	lsrs	r3, r3, #7
 800ac74:	61bb      	str	r3, [r7, #24]
 800ac76:	69bb      	ldr	r3, [r7, #24]
 800ac78:	2b7f      	cmp	r3, #127	@ 0x7f
 800ac7a:	d8f0      	bhi.n	800ac5e <SEGGER_SYSVIEW_OnTaskCreate+0x36>
 800ac7c:	69fb      	ldr	r3, [r7, #28]
 800ac7e:	1c5a      	adds	r2, r3, #1
 800ac80:	61fa      	str	r2, [r7, #28]
 800ac82:	69ba      	ldr	r2, [r7, #24]
 800ac84:	b2d2      	uxtb	r2, r2
 800ac86:	701a      	strb	r2, [r3, #0]
 800ac88:	69fb      	ldr	r3, [r7, #28]
 800ac8a:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_CREATE);
 800ac8c:	2208      	movs	r2, #8
 800ac8e:	68f9      	ldr	r1, [r7, #12]
 800ac90:	6938      	ldr	r0, [r7, #16]
 800ac92:	f7ff f9b1 	bl	8009ff8 <_SendPacket>
  RECORD_END();
 800ac96:	697b      	ldr	r3, [r7, #20]
 800ac98:	f383 8811 	msr	BASEPRI, r3
}
 800ac9c:	bf00      	nop
 800ac9e:	3720      	adds	r7, #32
 800aca0:	46bd      	mov	sp, r7
 800aca2:	bd80      	pop	{r7, pc}
 800aca4:	20013af0 	.word	0x20013af0
 800aca8:	20013ac0 	.word	0x20013ac0

0800acac <SEGGER_SYSVIEW_OnTaskStartExec>:
*    when it is ready to execute.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartExec(U32 TaskId) {
 800acac:	b580      	push	{r7, lr}
 800acae:	b088      	sub	sp, #32
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800acb4:	f3ef 8311 	mrs	r3, BASEPRI
 800acb8:	f04f 0120 	mov.w	r1, #32
 800acbc:	f381 8811 	msr	BASEPRI, r1
 800acc0:	617b      	str	r3, [r7, #20]
 800acc2:	4819      	ldr	r0, [pc, #100]	@ (800ad28 <SEGGER_SYSVIEW_OnTaskStartExec+0x7c>)
 800acc4:	f7ff f8ac 	bl	8009e20 <_PreparePacket>
 800acc8:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800acca:	693b      	ldr	r3, [r7, #16]
 800accc:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800acce:	4b17      	ldr	r3, [pc, #92]	@ (800ad2c <SEGGER_SYSVIEW_OnTaskStartExec+0x80>)
 800acd0:	691b      	ldr	r3, [r3, #16]
 800acd2:	687a      	ldr	r2, [r7, #4]
 800acd4:	1ad3      	subs	r3, r2, r3
 800acd6:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800acd8:	68fb      	ldr	r3, [r7, #12]
 800acda:	61fb      	str	r3, [r7, #28]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	61bb      	str	r3, [r7, #24]
 800ace0:	e00b      	b.n	800acfa <SEGGER_SYSVIEW_OnTaskStartExec+0x4e>
 800ace2:	69bb      	ldr	r3, [r7, #24]
 800ace4:	b2da      	uxtb	r2, r3
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	1c59      	adds	r1, r3, #1
 800acea:	61f9      	str	r1, [r7, #28]
 800acec:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800acf0:	b2d2      	uxtb	r2, r2
 800acf2:	701a      	strb	r2, [r3, #0]
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	09db      	lsrs	r3, r3, #7
 800acf8:	61bb      	str	r3, [r7, #24]
 800acfa:	69bb      	ldr	r3, [r7, #24]
 800acfc:	2b7f      	cmp	r3, #127	@ 0x7f
 800acfe:	d8f0      	bhi.n	800ace2 <SEGGER_SYSVIEW_OnTaskStartExec+0x36>
 800ad00:	69fb      	ldr	r3, [r7, #28]
 800ad02:	1c5a      	adds	r2, r3, #1
 800ad04:	61fa      	str	r2, [r7, #28]
 800ad06:	69ba      	ldr	r2, [r7, #24]
 800ad08:	b2d2      	uxtb	r2, r2
 800ad0a:	701a      	strb	r2, [r3, #0]
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_EXEC);
 800ad10:	2204      	movs	r2, #4
 800ad12:	68f9      	ldr	r1, [r7, #12]
 800ad14:	6938      	ldr	r0, [r7, #16]
 800ad16:	f7ff f96f 	bl	8009ff8 <_SendPacket>
  RECORD_END();
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	f383 8811 	msr	BASEPRI, r3
}
 800ad20:	bf00      	nop
 800ad22:	3720      	adds	r7, #32
 800ad24:	46bd      	mov	sp, r7
 800ad26:	bd80      	pop	{r7, pc}
 800ad28:	20013af0 	.word	0x20013af0
 800ad2c:	20013ac0 	.word	0x20013ac0

0800ad30 <SEGGER_SYSVIEW_OnTaskStartReady>:
*    Record a Task Start Ready event.
*
*  Parameters
*    TaskId - Task ID of task that started to execute.
*/
void SEGGER_SYSVIEW_OnTaskStartReady(U32 TaskId) {
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b088      	sub	sp, #32
 800ad34:	af00      	add	r7, sp, #0
 800ad36:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + SEGGER_SYSVIEW_QUANTA_U32);
 800ad38:	f3ef 8311 	mrs	r3, BASEPRI
 800ad3c:	f04f 0120 	mov.w	r1, #32
 800ad40:	f381 8811 	msr	BASEPRI, r1
 800ad44:	617b      	str	r3, [r7, #20]
 800ad46:	4819      	ldr	r0, [pc, #100]	@ (800adac <SEGGER_SYSVIEW_OnTaskStartReady+0x7c>)
 800ad48:	f7ff f86a 	bl	8009e20 <_PreparePacket>
 800ad4c:	6138      	str	r0, [r7, #16]
  //
  pPayload = pPayloadStart;
 800ad4e:	693b      	ldr	r3, [r7, #16]
 800ad50:	60fb      	str	r3, [r7, #12]
  TaskId = SHRINK_ID(TaskId);
 800ad52:	4b17      	ldr	r3, [pc, #92]	@ (800adb0 <SEGGER_SYSVIEW_OnTaskStartReady+0x80>)
 800ad54:	691b      	ldr	r3, [r3, #16]
 800ad56:	687a      	ldr	r2, [r7, #4]
 800ad58:	1ad3      	subs	r3, r2, r3
 800ad5a:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, TaskId);
 800ad5c:	68fb      	ldr	r3, [r7, #12]
 800ad5e:	61fb      	str	r3, [r7, #28]
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	61bb      	str	r3, [r7, #24]
 800ad64:	e00b      	b.n	800ad7e <SEGGER_SYSVIEW_OnTaskStartReady+0x4e>
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	b2da      	uxtb	r2, r3
 800ad6a:	69fb      	ldr	r3, [r7, #28]
 800ad6c:	1c59      	adds	r1, r3, #1
 800ad6e:	61f9      	str	r1, [r7, #28]
 800ad70:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ad74:	b2d2      	uxtb	r2, r2
 800ad76:	701a      	strb	r2, [r3, #0]
 800ad78:	69bb      	ldr	r3, [r7, #24]
 800ad7a:	09db      	lsrs	r3, r3, #7
 800ad7c:	61bb      	str	r3, [r7, #24]
 800ad7e:	69bb      	ldr	r3, [r7, #24]
 800ad80:	2b7f      	cmp	r3, #127	@ 0x7f
 800ad82:	d8f0      	bhi.n	800ad66 <SEGGER_SYSVIEW_OnTaskStartReady+0x36>
 800ad84:	69fb      	ldr	r3, [r7, #28]
 800ad86:	1c5a      	adds	r2, r3, #1
 800ad88:	61fa      	str	r2, [r7, #28]
 800ad8a:	69ba      	ldr	r2, [r7, #24]
 800ad8c:	b2d2      	uxtb	r2, r2
 800ad8e:	701a      	strb	r2, [r3, #0]
 800ad90:	69fb      	ldr	r3, [r7, #28]
 800ad92:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_TASK_START_READY);
 800ad94:	2206      	movs	r2, #6
 800ad96:	68f9      	ldr	r1, [r7, #12]
 800ad98:	6938      	ldr	r0, [r7, #16]
 800ad9a:	f7ff f92d 	bl	8009ff8 <_SendPacket>
  RECORD_END();
 800ad9e:	697b      	ldr	r3, [r7, #20]
 800ada0:	f383 8811 	msr	BASEPRI, r3
}
 800ada4:	bf00      	nop
 800ada6:	3720      	adds	r7, #32
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}
 800adac:	20013af0 	.word	0x20013af0
 800adb0:	20013ac0 	.word	0x20013ac0

0800adb4 <SEGGER_SYSVIEW_SendModule>:
*    Sends the information of a registered module to the host.
*
*  Parameters
*    ModuleId   - Id of the requested module.
*/
void SEGGER_SYSVIEW_SendModule(U8 ModuleId) {
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b08c      	sub	sp, #48	@ 0x30
 800adb8:	af00      	add	r7, sp, #0
 800adba:	4603      	mov	r3, r0
 800adbc:	71fb      	strb	r3, [r7, #7]
  SEGGER_SYSVIEW_MODULE* pModule;
  U32 n;

  if (_pFirstModule != 0) {
 800adbe:	4b40      	ldr	r3, [pc, #256]	@ (800aec0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d077      	beq.n	800aeb6 <SEGGER_SYSVIEW_SendModule+0x102>
    pModule = _pFirstModule;
 800adc6:	4b3e      	ldr	r3, [pc, #248]	@ (800aec0 <SEGGER_SYSVIEW_SendModule+0x10c>)
 800adc8:	681b      	ldr	r3, [r3, #0]
 800adca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    for (n = 0; n < ModuleId; n++) {
 800adcc:	2300      	movs	r3, #0
 800adce:	62bb      	str	r3, [r7, #40]	@ 0x28
 800add0:	e008      	b.n	800ade4 <SEGGER_SYSVIEW_SendModule+0x30>
      pModule = pModule->pNext;
 800add2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800add4:	691b      	ldr	r3, [r3, #16]
 800add6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      if (pModule == 0) {
 800add8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adda:	2b00      	cmp	r3, #0
 800addc:	d007      	beq.n	800adee <SEGGER_SYSVIEW_SendModule+0x3a>
    for (n = 0; n < ModuleId; n++) {
 800adde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ade0:	3301      	adds	r3, #1
 800ade2:	62bb      	str	r3, [r7, #40]	@ 0x28
 800ade4:	79fb      	ldrb	r3, [r7, #7]
 800ade6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ade8:	429a      	cmp	r2, r3
 800adea:	d3f2      	bcc.n	800add2 <SEGGER_SYSVIEW_SendModule+0x1e>
 800adec:	e000      	b.n	800adf0 <SEGGER_SYSVIEW_SendModule+0x3c>
        break;
 800adee:	bf00      	nop
      }
    }
    if (pModule != 0) {
 800adf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d055      	beq.n	800aea2 <SEGGER_SYSVIEW_SendModule+0xee>
      U8* pPayload;
      U8* pPayloadStart;
      RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + 1 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800adf6:	f3ef 8311 	mrs	r3, BASEPRI
 800adfa:	f04f 0120 	mov.w	r1, #32
 800adfe:	f381 8811 	msr	BASEPRI, r1
 800ae02:	617b      	str	r3, [r7, #20]
 800ae04:	482f      	ldr	r0, [pc, #188]	@ (800aec4 <SEGGER_SYSVIEW_SendModule+0x110>)
 800ae06:	f7ff f80b 	bl	8009e20 <_PreparePacket>
 800ae0a:	6138      	str	r0, [r7, #16]
      //
      pPayload = pPayloadStart;
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	60fb      	str	r3, [r7, #12]
      //
      // Send module description
      // Send event offset and number of events
      //
      ENCODE_U32(pPayload, ModuleId);
 800ae10:	68fb      	ldr	r3, [r7, #12]
 800ae12:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae14:	79fb      	ldrb	r3, [r7, #7]
 800ae16:	623b      	str	r3, [r7, #32]
 800ae18:	e00b      	b.n	800ae32 <SEGGER_SYSVIEW_SendModule+0x7e>
 800ae1a:	6a3b      	ldr	r3, [r7, #32]
 800ae1c:	b2da      	uxtb	r2, r3
 800ae1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae20:	1c59      	adds	r1, r3, #1
 800ae22:	6279      	str	r1, [r7, #36]	@ 0x24
 800ae24:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ae28:	b2d2      	uxtb	r2, r2
 800ae2a:	701a      	strb	r2, [r3, #0]
 800ae2c:	6a3b      	ldr	r3, [r7, #32]
 800ae2e:	09db      	lsrs	r3, r3, #7
 800ae30:	623b      	str	r3, [r7, #32]
 800ae32:	6a3b      	ldr	r3, [r7, #32]
 800ae34:	2b7f      	cmp	r3, #127	@ 0x7f
 800ae36:	d8f0      	bhi.n	800ae1a <SEGGER_SYSVIEW_SendModule+0x66>
 800ae38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3a:	1c5a      	adds	r2, r3, #1
 800ae3c:	627a      	str	r2, [r7, #36]	@ 0x24
 800ae3e:	6a3a      	ldr	r2, [r7, #32]
 800ae40:	b2d2      	uxtb	r2, r2
 800ae42:	701a      	strb	r2, [r3, #0]
 800ae44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae46:	60fb      	str	r3, [r7, #12]
      ENCODE_U32(pPayload, (pModule->EventOffset));
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	61fb      	str	r3, [r7, #28]
 800ae4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae4e:	689b      	ldr	r3, [r3, #8]
 800ae50:	61bb      	str	r3, [r7, #24]
 800ae52:	e00b      	b.n	800ae6c <SEGGER_SYSVIEW_SendModule+0xb8>
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	b2da      	uxtb	r2, r3
 800ae58:	69fb      	ldr	r3, [r7, #28]
 800ae5a:	1c59      	adds	r1, r3, #1
 800ae5c:	61f9      	str	r1, [r7, #28]
 800ae5e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800ae62:	b2d2      	uxtb	r2, r2
 800ae64:	701a      	strb	r2, [r3, #0]
 800ae66:	69bb      	ldr	r3, [r7, #24]
 800ae68:	09db      	lsrs	r3, r3, #7
 800ae6a:	61bb      	str	r3, [r7, #24]
 800ae6c:	69bb      	ldr	r3, [r7, #24]
 800ae6e:	2b7f      	cmp	r3, #127	@ 0x7f
 800ae70:	d8f0      	bhi.n	800ae54 <SEGGER_SYSVIEW_SendModule+0xa0>
 800ae72:	69fb      	ldr	r3, [r7, #28]
 800ae74:	1c5a      	adds	r2, r3, #1
 800ae76:	61fa      	str	r2, [r7, #28]
 800ae78:	69ba      	ldr	r2, [r7, #24]
 800ae7a:	b2d2      	uxtb	r2, r2
 800ae7c:	701a      	strb	r2, [r3, #0]
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	60fb      	str	r3, [r7, #12]
      pPayload = _EncodeStr(pPayload, pModule->sModule, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800ae82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	2280      	movs	r2, #128	@ 0x80
 800ae88:	4619      	mov	r1, r3
 800ae8a:	68f8      	ldr	r0, [r7, #12]
 800ae8c:	f7fe ff98 	bl	8009dc0 <_EncodeStr>
 800ae90:	60f8      	str	r0, [r7, #12]
      _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_MODULEDESC);
 800ae92:	2216      	movs	r2, #22
 800ae94:	68f9      	ldr	r1, [r7, #12]
 800ae96:	6938      	ldr	r0, [r7, #16]
 800ae98:	f7ff f8ae 	bl	8009ff8 <_SendPacket>
      RECORD_END();
 800ae9c:	697b      	ldr	r3, [r7, #20]
 800ae9e:	f383 8811 	msr	BASEPRI, r3
    }
    if (pModule && pModule->pfSendModuleDesc) {
 800aea2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d006      	beq.n	800aeb6 <SEGGER_SYSVIEW_SendModule+0x102>
 800aea8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeaa:	68db      	ldr	r3, [r3, #12]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	d002      	beq.n	800aeb6 <SEGGER_SYSVIEW_SendModule+0x102>
      pModule->pfSendModuleDesc();
 800aeb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeb2:	68db      	ldr	r3, [r3, #12]
 800aeb4:	4798      	blx	r3
    }
  }
}
 800aeb6:	bf00      	nop
 800aeb8:	3730      	adds	r7, #48	@ 0x30
 800aeba:	46bd      	mov	sp, r7
 800aebc:	bd80      	pop	{r7, pc}
 800aebe:	bf00      	nop
 800aec0:	20013ae8 	.word	0x20013ae8
 800aec4:	20013af0 	.word	0x20013af0

0800aec8 <SEGGER_SYSVIEW_SendModuleDescription>:
*
*  Function description
*    Triggers a send of the registered module descriptions.
*
*/
void SEGGER_SYSVIEW_SendModuleDescription(void) {
 800aec8:	b580      	push	{r7, lr}
 800aeca:	b082      	sub	sp, #8
 800aecc:	af00      	add	r7, sp, #0
  SEGGER_SYSVIEW_MODULE* pModule;

  if (_pFirstModule != 0) {
 800aece:	4b0c      	ldr	r3, [pc, #48]	@ (800af00 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	2b00      	cmp	r3, #0
 800aed4:	d00f      	beq.n	800aef6 <SEGGER_SYSVIEW_SendModuleDescription+0x2e>
    pModule = _pFirstModule;
 800aed6:	4b0a      	ldr	r3, [pc, #40]	@ (800af00 <SEGGER_SYSVIEW_SendModuleDescription+0x38>)
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	607b      	str	r3, [r7, #4]
    do {
      if (pModule->pfSendModuleDesc) {
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	68db      	ldr	r3, [r3, #12]
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d002      	beq.n	800aeea <SEGGER_SYSVIEW_SendModuleDescription+0x22>
        pModule->pfSendModuleDesc();
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	68db      	ldr	r3, [r3, #12]
 800aee8:	4798      	blx	r3
      }
      pModule = pModule->pNext;
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	691b      	ldr	r3, [r3, #16]
 800aeee:	607b      	str	r3, [r7, #4]
    } while (pModule);
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d1f2      	bne.n	800aedc <SEGGER_SYSVIEW_SendModuleDescription+0x14>
  }
}
 800aef6:	bf00      	nop
 800aef8:	3708      	adds	r7, #8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	20013ae8 	.word	0x20013ae8

0800af04 <SEGGER_SYSVIEW_SendNumModules>:
*       SEGGER_SYSVIEW_SendNumModules()
*
*  Function description
*    Send the number of registered modules to the host.
*/
void SEGGER_SYSVIEW_SendNumModules(void) {
 800af04:	b580      	push	{r7, lr}
 800af06:	b086      	sub	sp, #24
 800af08:	af00      	add	r7, sp, #0
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2*SEGGER_SYSVIEW_QUANTA_U32);
 800af0a:	f3ef 8311 	mrs	r3, BASEPRI
 800af0e:	f04f 0120 	mov.w	r1, #32
 800af12:	f381 8811 	msr	BASEPRI, r1
 800af16:	60fb      	str	r3, [r7, #12]
 800af18:	4817      	ldr	r0, [pc, #92]	@ (800af78 <SEGGER_SYSVIEW_SendNumModules+0x74>)
 800af1a:	f7fe ff81 	bl	8009e20 <_PreparePacket>
 800af1e:	60b8      	str	r0, [r7, #8]
  pPayload = pPayloadStart;
 800af20:	68bb      	ldr	r3, [r7, #8]
 800af22:	607b      	str	r3, [r7, #4]
  ENCODE_U32(pPayload, _NumModules);
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	617b      	str	r3, [r7, #20]
 800af28:	4b14      	ldr	r3, [pc, #80]	@ (800af7c <SEGGER_SYSVIEW_SendNumModules+0x78>)
 800af2a:	781b      	ldrb	r3, [r3, #0]
 800af2c:	613b      	str	r3, [r7, #16]
 800af2e:	e00b      	b.n	800af48 <SEGGER_SYSVIEW_SendNumModules+0x44>
 800af30:	693b      	ldr	r3, [r7, #16]
 800af32:	b2da      	uxtb	r2, r3
 800af34:	697b      	ldr	r3, [r7, #20]
 800af36:	1c59      	adds	r1, r3, #1
 800af38:	6179      	str	r1, [r7, #20]
 800af3a:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800af3e:	b2d2      	uxtb	r2, r2
 800af40:	701a      	strb	r2, [r3, #0]
 800af42:	693b      	ldr	r3, [r7, #16]
 800af44:	09db      	lsrs	r3, r3, #7
 800af46:	613b      	str	r3, [r7, #16]
 800af48:	693b      	ldr	r3, [r7, #16]
 800af4a:	2b7f      	cmp	r3, #127	@ 0x7f
 800af4c:	d8f0      	bhi.n	800af30 <SEGGER_SYSVIEW_SendNumModules+0x2c>
 800af4e:	697b      	ldr	r3, [r7, #20]
 800af50:	1c5a      	adds	r2, r3, #1
 800af52:	617a      	str	r2, [r7, #20]
 800af54:	693a      	ldr	r2, [r7, #16]
 800af56:	b2d2      	uxtb	r2, r2
 800af58:	701a      	strb	r2, [r3, #0]
 800af5a:	697b      	ldr	r3, [r7, #20]
 800af5c:	607b      	str	r3, [r7, #4]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_NUMMODULES);
 800af5e:	221b      	movs	r2, #27
 800af60:	6879      	ldr	r1, [r7, #4]
 800af62:	68b8      	ldr	r0, [r7, #8]
 800af64:	f7ff f848 	bl	8009ff8 <_SendPacket>
  RECORD_END();
 800af68:	68fb      	ldr	r3, [r7, #12]
 800af6a:	f383 8811 	msr	BASEPRI, r3
}
 800af6e:	bf00      	nop
 800af70:	3718      	adds	r7, #24
 800af72:	46bd      	mov	sp, r7
 800af74:	bd80      	pop	{r7, pc}
 800af76:	bf00      	nop
 800af78:	20013af0 	.word	0x20013af0
 800af7c:	20013aec 	.word	0x20013aec

0800af80 <SEGGER_SYSVIEW_PrintfHost>:
*    s        - String to be formatted.
*
*  Additional information
*    All format arguments are treated as 32-bit scalar values.
*/
void SEGGER_SYSVIEW_PrintfHost(const char* s, ...) {
 800af80:	b40f      	push	{r0, r1, r2, r3}
 800af82:	b580      	push	{r7, lr}
 800af84:	b082      	sub	sp, #8
 800af86:	af00      	add	r7, sp, #0
    va_start(ParamList, s);
    _VPrintTarget(s, SEGGER_SYSVIEW_LOG, &ParamList);
    va_end(ParamList);
  }
#else
  va_start(ParamList, s);
 800af88:	f107 0314 	add.w	r3, r7, #20
 800af8c:	607b      	str	r3, [r7, #4]
  _VPrintHost(s, SEGGER_SYSVIEW_LOG, &ParamList);
 800af8e:	1d3b      	adds	r3, r7, #4
 800af90:	461a      	mov	r2, r3
 800af92:	2100      	movs	r1, #0
 800af94:	6938      	ldr	r0, [r7, #16]
 800af96:	f7ff f99d 	bl	800a2d4 <_VPrintHost>
  va_end(ParamList);
#endif
}
 800af9a:	bf00      	nop
 800af9c:	3708      	adds	r7, #8
 800af9e:	46bd      	mov	sp, r7
 800afa0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800afa4:	b004      	add	sp, #16
 800afa6:	4770      	bx	lr

0800afa8 <SEGGER_SYSVIEW_Warn>:
*    Print a warning string to the host.
*
*  Parameters
*    s        - String to sent.
*/
void SEGGER_SYSVIEW_Warn(const char* s) {
 800afa8:	b580      	push	{r7, lr}
 800afaa:	b08a      	sub	sp, #40	@ 0x28
 800afac:	af00      	add	r7, sp, #0
 800afae:	6078      	str	r0, [r7, #4]
  U8* pPayload;
  U8* pPayloadStart;
  RECORD_START(SEGGER_SYSVIEW_INFO_SIZE + 2 * SEGGER_SYSVIEW_QUANTA_U32 + SEGGER_SYSVIEW_MAX_STRING_LEN);
 800afb0:	f3ef 8311 	mrs	r3, BASEPRI
 800afb4:	f04f 0120 	mov.w	r1, #32
 800afb8:	f381 8811 	msr	BASEPRI, r1
 800afbc:	617b      	str	r3, [r7, #20]
 800afbe:	4827      	ldr	r0, [pc, #156]	@ (800b05c <SEGGER_SYSVIEW_Warn+0xb4>)
 800afc0:	f7fe ff2e 	bl	8009e20 <_PreparePacket>
 800afc4:	6138      	str	r0, [r7, #16]
  //
  pPayload = _EncodeStr(pPayloadStart, s, SEGGER_SYSVIEW_MAX_STRING_LEN);
 800afc6:	2280      	movs	r2, #128	@ 0x80
 800afc8:	6879      	ldr	r1, [r7, #4]
 800afca:	6938      	ldr	r0, [r7, #16]
 800afcc:	f7fe fef8 	bl	8009dc0 <_EncodeStr>
 800afd0:	60f8      	str	r0, [r7, #12]
  ENCODE_U32(pPayload, SEGGER_SYSVIEW_WARNING);
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	627b      	str	r3, [r7, #36]	@ 0x24
 800afd6:	2301      	movs	r3, #1
 800afd8:	623b      	str	r3, [r7, #32]
 800afda:	e00b      	b.n	800aff4 <SEGGER_SYSVIEW_Warn+0x4c>
 800afdc:	6a3b      	ldr	r3, [r7, #32]
 800afde:	b2da      	uxtb	r2, r3
 800afe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800afe2:	1c59      	adds	r1, r3, #1
 800afe4:	6279      	str	r1, [r7, #36]	@ 0x24
 800afe6:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800afea:	b2d2      	uxtb	r2, r2
 800afec:	701a      	strb	r2, [r3, #0]
 800afee:	6a3b      	ldr	r3, [r7, #32]
 800aff0:	09db      	lsrs	r3, r3, #7
 800aff2:	623b      	str	r3, [r7, #32]
 800aff4:	6a3b      	ldr	r3, [r7, #32]
 800aff6:	2b7f      	cmp	r3, #127	@ 0x7f
 800aff8:	d8f0      	bhi.n	800afdc <SEGGER_SYSVIEW_Warn+0x34>
 800affa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800affc:	1c5a      	adds	r2, r3, #1
 800affe:	627a      	str	r2, [r7, #36]	@ 0x24
 800b000:	6a3a      	ldr	r2, [r7, #32]
 800b002:	b2d2      	uxtb	r2, r2
 800b004:	701a      	strb	r2, [r3, #0]
 800b006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b008:	60fb      	str	r3, [r7, #12]
  ENCODE_U32(pPayload, 0);
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	61fb      	str	r3, [r7, #28]
 800b00e:	2300      	movs	r3, #0
 800b010:	61bb      	str	r3, [r7, #24]
 800b012:	e00b      	b.n	800b02c <SEGGER_SYSVIEW_Warn+0x84>
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	b2da      	uxtb	r2, r3
 800b018:	69fb      	ldr	r3, [r7, #28]
 800b01a:	1c59      	adds	r1, r3, #1
 800b01c:	61f9      	str	r1, [r7, #28]
 800b01e:	f062 027f 	orn	r2, r2, #127	@ 0x7f
 800b022:	b2d2      	uxtb	r2, r2
 800b024:	701a      	strb	r2, [r3, #0]
 800b026:	69bb      	ldr	r3, [r7, #24]
 800b028:	09db      	lsrs	r3, r3, #7
 800b02a:	61bb      	str	r3, [r7, #24]
 800b02c:	69bb      	ldr	r3, [r7, #24]
 800b02e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b030:	d8f0      	bhi.n	800b014 <SEGGER_SYSVIEW_Warn+0x6c>
 800b032:	69fb      	ldr	r3, [r7, #28]
 800b034:	1c5a      	adds	r2, r3, #1
 800b036:	61fa      	str	r2, [r7, #28]
 800b038:	69ba      	ldr	r2, [r7, #24]
 800b03a:	b2d2      	uxtb	r2, r2
 800b03c:	701a      	strb	r2, [r3, #0]
 800b03e:	69fb      	ldr	r3, [r7, #28]
 800b040:	60fb      	str	r3, [r7, #12]
  _SendPacket(pPayloadStart, pPayload, SYSVIEW_EVTID_PRINT_FORMATTED);
 800b042:	221a      	movs	r2, #26
 800b044:	68f9      	ldr	r1, [r7, #12]
 800b046:	6938      	ldr	r0, [r7, #16]
 800b048:	f7fe ffd6 	bl	8009ff8 <_SendPacket>
  RECORD_END();
 800b04c:	697b      	ldr	r3, [r7, #20]
 800b04e:	f383 8811 	msr	BASEPRI, r3
}
 800b052:	bf00      	nop
 800b054:	3728      	adds	r7, #40	@ 0x28
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
 800b05a:	bf00      	nop
 800b05c:	20013af0 	.word	0x20013af0

0800b060 <_write_r>:
*   Low-level reentrant write function.
*   libc subroutines will use this system routine for output to all files,
*   including stdout.
*   Write data via RTT.
*/
_ssize_t _write_r(struct _reent *r, int file, const void *ptr, size_t len) {
 800b060:	b580      	push	{r7, lr}
 800b062:	b084      	sub	sp, #16
 800b064:	af00      	add	r7, sp, #0
 800b066:	60f8      	str	r0, [r7, #12]
 800b068:	60b9      	str	r1, [r7, #8]
 800b06a:	607a      	str	r2, [r7, #4]
 800b06c:	603b      	str	r3, [r7, #0]
  (void) file;  /* Not used, avoid warning */
  (void) r;     /* Not used, avoid warning */
  SEGGER_RTT_Write(0, ptr, len);
 800b06e:	683a      	ldr	r2, [r7, #0]
 800b070:	6879      	ldr	r1, [r7, #4]
 800b072:	2000      	movs	r0, #0
 800b074:	f7fe fdae 	bl	8009bd4 <SEGGER_RTT_Write>
  return len;
 800b078:	683b      	ldr	r3, [r7, #0]
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3710      	adds	r7, #16
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}

0800b082 <__cvt>:
 800b082:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b086:	ec57 6b10 	vmov	r6, r7, d0
 800b08a:	2f00      	cmp	r7, #0
 800b08c:	460c      	mov	r4, r1
 800b08e:	4619      	mov	r1, r3
 800b090:	463b      	mov	r3, r7
 800b092:	bfbb      	ittet	lt
 800b094:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800b098:	461f      	movlt	r7, r3
 800b09a:	2300      	movge	r3, #0
 800b09c:	232d      	movlt	r3, #45	@ 0x2d
 800b09e:	700b      	strb	r3, [r1, #0]
 800b0a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800b0a2:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800b0a6:	4691      	mov	r9, r2
 800b0a8:	f023 0820 	bic.w	r8, r3, #32
 800b0ac:	bfbc      	itt	lt
 800b0ae:	4632      	movlt	r2, r6
 800b0b0:	4616      	movlt	r6, r2
 800b0b2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b0b6:	d005      	beq.n	800b0c4 <__cvt+0x42>
 800b0b8:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800b0bc:	d100      	bne.n	800b0c0 <__cvt+0x3e>
 800b0be:	3401      	adds	r4, #1
 800b0c0:	2102      	movs	r1, #2
 800b0c2:	e000      	b.n	800b0c6 <__cvt+0x44>
 800b0c4:	2103      	movs	r1, #3
 800b0c6:	ab03      	add	r3, sp, #12
 800b0c8:	9301      	str	r3, [sp, #4]
 800b0ca:	ab02      	add	r3, sp, #8
 800b0cc:	9300      	str	r3, [sp, #0]
 800b0ce:	ec47 6b10 	vmov	d0, r6, r7
 800b0d2:	4653      	mov	r3, sl
 800b0d4:	4622      	mov	r2, r4
 800b0d6:	f000 fe7b 	bl	800bdd0 <_dtoa_r>
 800b0da:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800b0de:	4605      	mov	r5, r0
 800b0e0:	d119      	bne.n	800b116 <__cvt+0x94>
 800b0e2:	f019 0f01 	tst.w	r9, #1
 800b0e6:	d00e      	beq.n	800b106 <__cvt+0x84>
 800b0e8:	eb00 0904 	add.w	r9, r0, r4
 800b0ec:	2200      	movs	r2, #0
 800b0ee:	2300      	movs	r3, #0
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	4639      	mov	r1, r7
 800b0f4:	f7f5 fd40 	bl	8000b78 <__aeabi_dcmpeq>
 800b0f8:	b108      	cbz	r0, 800b0fe <__cvt+0x7c>
 800b0fa:	f8cd 900c 	str.w	r9, [sp, #12]
 800b0fe:	2230      	movs	r2, #48	@ 0x30
 800b100:	9b03      	ldr	r3, [sp, #12]
 800b102:	454b      	cmp	r3, r9
 800b104:	d31e      	bcc.n	800b144 <__cvt+0xc2>
 800b106:	9b03      	ldr	r3, [sp, #12]
 800b108:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800b10a:	1b5b      	subs	r3, r3, r5
 800b10c:	4628      	mov	r0, r5
 800b10e:	6013      	str	r3, [r2, #0]
 800b110:	b004      	add	sp, #16
 800b112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b116:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800b11a:	eb00 0904 	add.w	r9, r0, r4
 800b11e:	d1e5      	bne.n	800b0ec <__cvt+0x6a>
 800b120:	7803      	ldrb	r3, [r0, #0]
 800b122:	2b30      	cmp	r3, #48	@ 0x30
 800b124:	d10a      	bne.n	800b13c <__cvt+0xba>
 800b126:	2200      	movs	r2, #0
 800b128:	2300      	movs	r3, #0
 800b12a:	4630      	mov	r0, r6
 800b12c:	4639      	mov	r1, r7
 800b12e:	f7f5 fd23 	bl	8000b78 <__aeabi_dcmpeq>
 800b132:	b918      	cbnz	r0, 800b13c <__cvt+0xba>
 800b134:	f1c4 0401 	rsb	r4, r4, #1
 800b138:	f8ca 4000 	str.w	r4, [sl]
 800b13c:	f8da 3000 	ldr.w	r3, [sl]
 800b140:	4499      	add	r9, r3
 800b142:	e7d3      	b.n	800b0ec <__cvt+0x6a>
 800b144:	1c59      	adds	r1, r3, #1
 800b146:	9103      	str	r1, [sp, #12]
 800b148:	701a      	strb	r2, [r3, #0]
 800b14a:	e7d9      	b.n	800b100 <__cvt+0x7e>

0800b14c <__exponent>:
 800b14c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b14e:	2900      	cmp	r1, #0
 800b150:	bfba      	itte	lt
 800b152:	4249      	neglt	r1, r1
 800b154:	232d      	movlt	r3, #45	@ 0x2d
 800b156:	232b      	movge	r3, #43	@ 0x2b
 800b158:	2909      	cmp	r1, #9
 800b15a:	7002      	strb	r2, [r0, #0]
 800b15c:	7043      	strb	r3, [r0, #1]
 800b15e:	dd29      	ble.n	800b1b4 <__exponent+0x68>
 800b160:	f10d 0307 	add.w	r3, sp, #7
 800b164:	461d      	mov	r5, r3
 800b166:	270a      	movs	r7, #10
 800b168:	461a      	mov	r2, r3
 800b16a:	fbb1 f6f7 	udiv	r6, r1, r7
 800b16e:	fb07 1416 	mls	r4, r7, r6, r1
 800b172:	3430      	adds	r4, #48	@ 0x30
 800b174:	f802 4c01 	strb.w	r4, [r2, #-1]
 800b178:	460c      	mov	r4, r1
 800b17a:	2c63      	cmp	r4, #99	@ 0x63
 800b17c:	f103 33ff 	add.w	r3, r3, #4294967295
 800b180:	4631      	mov	r1, r6
 800b182:	dcf1      	bgt.n	800b168 <__exponent+0x1c>
 800b184:	3130      	adds	r1, #48	@ 0x30
 800b186:	1e94      	subs	r4, r2, #2
 800b188:	f803 1c01 	strb.w	r1, [r3, #-1]
 800b18c:	1c41      	adds	r1, r0, #1
 800b18e:	4623      	mov	r3, r4
 800b190:	42ab      	cmp	r3, r5
 800b192:	d30a      	bcc.n	800b1aa <__exponent+0x5e>
 800b194:	f10d 0309 	add.w	r3, sp, #9
 800b198:	1a9b      	subs	r3, r3, r2
 800b19a:	42ac      	cmp	r4, r5
 800b19c:	bf88      	it	hi
 800b19e:	2300      	movhi	r3, #0
 800b1a0:	3302      	adds	r3, #2
 800b1a2:	4403      	add	r3, r0
 800b1a4:	1a18      	subs	r0, r3, r0
 800b1a6:	b003      	add	sp, #12
 800b1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b1aa:	f813 6b01 	ldrb.w	r6, [r3], #1
 800b1ae:	f801 6f01 	strb.w	r6, [r1, #1]!
 800b1b2:	e7ed      	b.n	800b190 <__exponent+0x44>
 800b1b4:	2330      	movs	r3, #48	@ 0x30
 800b1b6:	3130      	adds	r1, #48	@ 0x30
 800b1b8:	7083      	strb	r3, [r0, #2]
 800b1ba:	70c1      	strb	r1, [r0, #3]
 800b1bc:	1d03      	adds	r3, r0, #4
 800b1be:	e7f1      	b.n	800b1a4 <__exponent+0x58>

0800b1c0 <_printf_float>:
 800b1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1c4:	b08d      	sub	sp, #52	@ 0x34
 800b1c6:	460c      	mov	r4, r1
 800b1c8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800b1cc:	4616      	mov	r6, r2
 800b1ce:	461f      	mov	r7, r3
 800b1d0:	4605      	mov	r5, r0
 800b1d2:	f000 fcff 	bl	800bbd4 <_localeconv_r>
 800b1d6:	6803      	ldr	r3, [r0, #0]
 800b1d8:	9304      	str	r3, [sp, #16]
 800b1da:	4618      	mov	r0, r3
 800b1dc:	f7f5 f8a0 	bl	8000320 <strlen>
 800b1e0:	2300      	movs	r3, #0
 800b1e2:	930a      	str	r3, [sp, #40]	@ 0x28
 800b1e4:	f8d8 3000 	ldr.w	r3, [r8]
 800b1e8:	9005      	str	r0, [sp, #20]
 800b1ea:	3307      	adds	r3, #7
 800b1ec:	f023 0307 	bic.w	r3, r3, #7
 800b1f0:	f103 0208 	add.w	r2, r3, #8
 800b1f4:	f894 a018 	ldrb.w	sl, [r4, #24]
 800b1f8:	f8d4 b000 	ldr.w	fp, [r4]
 800b1fc:	f8c8 2000 	str.w	r2, [r8]
 800b200:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b204:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800b208:	9307      	str	r3, [sp, #28]
 800b20a:	f8cd 8018 	str.w	r8, [sp, #24]
 800b20e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800b212:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b216:	4b9c      	ldr	r3, [pc, #624]	@ (800b488 <_printf_float+0x2c8>)
 800b218:	f04f 32ff 	mov.w	r2, #4294967295
 800b21c:	f7f5 fcde 	bl	8000bdc <__aeabi_dcmpun>
 800b220:	bb70      	cbnz	r0, 800b280 <_printf_float+0xc0>
 800b222:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b226:	4b98      	ldr	r3, [pc, #608]	@ (800b488 <_printf_float+0x2c8>)
 800b228:	f04f 32ff 	mov.w	r2, #4294967295
 800b22c:	f7f5 fcb8 	bl	8000ba0 <__aeabi_dcmple>
 800b230:	bb30      	cbnz	r0, 800b280 <_printf_float+0xc0>
 800b232:	2200      	movs	r2, #0
 800b234:	2300      	movs	r3, #0
 800b236:	4640      	mov	r0, r8
 800b238:	4649      	mov	r1, r9
 800b23a:	f7f5 fca7 	bl	8000b8c <__aeabi_dcmplt>
 800b23e:	b110      	cbz	r0, 800b246 <_printf_float+0x86>
 800b240:	232d      	movs	r3, #45	@ 0x2d
 800b242:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b246:	4a91      	ldr	r2, [pc, #580]	@ (800b48c <_printf_float+0x2cc>)
 800b248:	4b91      	ldr	r3, [pc, #580]	@ (800b490 <_printf_float+0x2d0>)
 800b24a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800b24e:	bf94      	ite	ls
 800b250:	4690      	movls	r8, r2
 800b252:	4698      	movhi	r8, r3
 800b254:	2303      	movs	r3, #3
 800b256:	6123      	str	r3, [r4, #16]
 800b258:	f02b 0304 	bic.w	r3, fp, #4
 800b25c:	6023      	str	r3, [r4, #0]
 800b25e:	f04f 0900 	mov.w	r9, #0
 800b262:	9700      	str	r7, [sp, #0]
 800b264:	4633      	mov	r3, r6
 800b266:	aa0b      	add	r2, sp, #44	@ 0x2c
 800b268:	4621      	mov	r1, r4
 800b26a:	4628      	mov	r0, r5
 800b26c:	f000 f9d2 	bl	800b614 <_printf_common>
 800b270:	3001      	adds	r0, #1
 800b272:	f040 808d 	bne.w	800b390 <_printf_float+0x1d0>
 800b276:	f04f 30ff 	mov.w	r0, #4294967295
 800b27a:	b00d      	add	sp, #52	@ 0x34
 800b27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b280:	4642      	mov	r2, r8
 800b282:	464b      	mov	r3, r9
 800b284:	4640      	mov	r0, r8
 800b286:	4649      	mov	r1, r9
 800b288:	f7f5 fca8 	bl	8000bdc <__aeabi_dcmpun>
 800b28c:	b140      	cbz	r0, 800b2a0 <_printf_float+0xe0>
 800b28e:	464b      	mov	r3, r9
 800b290:	2b00      	cmp	r3, #0
 800b292:	bfbc      	itt	lt
 800b294:	232d      	movlt	r3, #45	@ 0x2d
 800b296:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800b29a:	4a7e      	ldr	r2, [pc, #504]	@ (800b494 <_printf_float+0x2d4>)
 800b29c:	4b7e      	ldr	r3, [pc, #504]	@ (800b498 <_printf_float+0x2d8>)
 800b29e:	e7d4      	b.n	800b24a <_printf_float+0x8a>
 800b2a0:	6863      	ldr	r3, [r4, #4]
 800b2a2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800b2a6:	9206      	str	r2, [sp, #24]
 800b2a8:	1c5a      	adds	r2, r3, #1
 800b2aa:	d13b      	bne.n	800b324 <_printf_float+0x164>
 800b2ac:	2306      	movs	r3, #6
 800b2ae:	6063      	str	r3, [r4, #4]
 800b2b0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	6022      	str	r2, [r4, #0]
 800b2b8:	9303      	str	r3, [sp, #12]
 800b2ba:	ab0a      	add	r3, sp, #40	@ 0x28
 800b2bc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800b2c0:	ab09      	add	r3, sp, #36	@ 0x24
 800b2c2:	9300      	str	r3, [sp, #0]
 800b2c4:	6861      	ldr	r1, [r4, #4]
 800b2c6:	ec49 8b10 	vmov	d0, r8, r9
 800b2ca:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800b2ce:	4628      	mov	r0, r5
 800b2d0:	f7ff fed7 	bl	800b082 <__cvt>
 800b2d4:	9b06      	ldr	r3, [sp, #24]
 800b2d6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800b2d8:	2b47      	cmp	r3, #71	@ 0x47
 800b2da:	4680      	mov	r8, r0
 800b2dc:	d129      	bne.n	800b332 <_printf_float+0x172>
 800b2de:	1cc8      	adds	r0, r1, #3
 800b2e0:	db02      	blt.n	800b2e8 <_printf_float+0x128>
 800b2e2:	6863      	ldr	r3, [r4, #4]
 800b2e4:	4299      	cmp	r1, r3
 800b2e6:	dd41      	ble.n	800b36c <_printf_float+0x1ac>
 800b2e8:	f1aa 0a02 	sub.w	sl, sl, #2
 800b2ec:	fa5f fa8a 	uxtb.w	sl, sl
 800b2f0:	3901      	subs	r1, #1
 800b2f2:	4652      	mov	r2, sl
 800b2f4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800b2f8:	9109      	str	r1, [sp, #36]	@ 0x24
 800b2fa:	f7ff ff27 	bl	800b14c <__exponent>
 800b2fe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b300:	1813      	adds	r3, r2, r0
 800b302:	2a01      	cmp	r2, #1
 800b304:	4681      	mov	r9, r0
 800b306:	6123      	str	r3, [r4, #16]
 800b308:	dc02      	bgt.n	800b310 <_printf_float+0x150>
 800b30a:	6822      	ldr	r2, [r4, #0]
 800b30c:	07d2      	lsls	r2, r2, #31
 800b30e:	d501      	bpl.n	800b314 <_printf_float+0x154>
 800b310:	3301      	adds	r3, #1
 800b312:	6123      	str	r3, [r4, #16]
 800b314:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d0a2      	beq.n	800b262 <_printf_float+0xa2>
 800b31c:	232d      	movs	r3, #45	@ 0x2d
 800b31e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b322:	e79e      	b.n	800b262 <_printf_float+0xa2>
 800b324:	9a06      	ldr	r2, [sp, #24]
 800b326:	2a47      	cmp	r2, #71	@ 0x47
 800b328:	d1c2      	bne.n	800b2b0 <_printf_float+0xf0>
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d1c0      	bne.n	800b2b0 <_printf_float+0xf0>
 800b32e:	2301      	movs	r3, #1
 800b330:	e7bd      	b.n	800b2ae <_printf_float+0xee>
 800b332:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b336:	d9db      	bls.n	800b2f0 <_printf_float+0x130>
 800b338:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800b33c:	d118      	bne.n	800b370 <_printf_float+0x1b0>
 800b33e:	2900      	cmp	r1, #0
 800b340:	6863      	ldr	r3, [r4, #4]
 800b342:	dd0b      	ble.n	800b35c <_printf_float+0x19c>
 800b344:	6121      	str	r1, [r4, #16]
 800b346:	b913      	cbnz	r3, 800b34e <_printf_float+0x18e>
 800b348:	6822      	ldr	r2, [r4, #0]
 800b34a:	07d0      	lsls	r0, r2, #31
 800b34c:	d502      	bpl.n	800b354 <_printf_float+0x194>
 800b34e:	3301      	adds	r3, #1
 800b350:	440b      	add	r3, r1
 800b352:	6123      	str	r3, [r4, #16]
 800b354:	65a1      	str	r1, [r4, #88]	@ 0x58
 800b356:	f04f 0900 	mov.w	r9, #0
 800b35a:	e7db      	b.n	800b314 <_printf_float+0x154>
 800b35c:	b913      	cbnz	r3, 800b364 <_printf_float+0x1a4>
 800b35e:	6822      	ldr	r2, [r4, #0]
 800b360:	07d2      	lsls	r2, r2, #31
 800b362:	d501      	bpl.n	800b368 <_printf_float+0x1a8>
 800b364:	3302      	adds	r3, #2
 800b366:	e7f4      	b.n	800b352 <_printf_float+0x192>
 800b368:	2301      	movs	r3, #1
 800b36a:	e7f2      	b.n	800b352 <_printf_float+0x192>
 800b36c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800b370:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b372:	4299      	cmp	r1, r3
 800b374:	db05      	blt.n	800b382 <_printf_float+0x1c2>
 800b376:	6823      	ldr	r3, [r4, #0]
 800b378:	6121      	str	r1, [r4, #16]
 800b37a:	07d8      	lsls	r0, r3, #31
 800b37c:	d5ea      	bpl.n	800b354 <_printf_float+0x194>
 800b37e:	1c4b      	adds	r3, r1, #1
 800b380:	e7e7      	b.n	800b352 <_printf_float+0x192>
 800b382:	2900      	cmp	r1, #0
 800b384:	bfd4      	ite	le
 800b386:	f1c1 0202 	rsble	r2, r1, #2
 800b38a:	2201      	movgt	r2, #1
 800b38c:	4413      	add	r3, r2
 800b38e:	e7e0      	b.n	800b352 <_printf_float+0x192>
 800b390:	6823      	ldr	r3, [r4, #0]
 800b392:	055a      	lsls	r2, r3, #21
 800b394:	d407      	bmi.n	800b3a6 <_printf_float+0x1e6>
 800b396:	6923      	ldr	r3, [r4, #16]
 800b398:	4642      	mov	r2, r8
 800b39a:	4631      	mov	r1, r6
 800b39c:	4628      	mov	r0, r5
 800b39e:	47b8      	blx	r7
 800b3a0:	3001      	adds	r0, #1
 800b3a2:	d12b      	bne.n	800b3fc <_printf_float+0x23c>
 800b3a4:	e767      	b.n	800b276 <_printf_float+0xb6>
 800b3a6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b3aa:	f240 80dd 	bls.w	800b568 <_printf_float+0x3a8>
 800b3ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	f7f5 fbdf 	bl	8000b78 <__aeabi_dcmpeq>
 800b3ba:	2800      	cmp	r0, #0
 800b3bc:	d033      	beq.n	800b426 <_printf_float+0x266>
 800b3be:	4a37      	ldr	r2, [pc, #220]	@ (800b49c <_printf_float+0x2dc>)
 800b3c0:	2301      	movs	r3, #1
 800b3c2:	4631      	mov	r1, r6
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	47b8      	blx	r7
 800b3c8:	3001      	adds	r0, #1
 800b3ca:	f43f af54 	beq.w	800b276 <_printf_float+0xb6>
 800b3ce:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b3d2:	4543      	cmp	r3, r8
 800b3d4:	db02      	blt.n	800b3dc <_printf_float+0x21c>
 800b3d6:	6823      	ldr	r3, [r4, #0]
 800b3d8:	07d8      	lsls	r0, r3, #31
 800b3da:	d50f      	bpl.n	800b3fc <_printf_float+0x23c>
 800b3dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b3e0:	4631      	mov	r1, r6
 800b3e2:	4628      	mov	r0, r5
 800b3e4:	47b8      	blx	r7
 800b3e6:	3001      	adds	r0, #1
 800b3e8:	f43f af45 	beq.w	800b276 <_printf_float+0xb6>
 800b3ec:	f04f 0900 	mov.w	r9, #0
 800b3f0:	f108 38ff 	add.w	r8, r8, #4294967295
 800b3f4:	f104 0a1a 	add.w	sl, r4, #26
 800b3f8:	45c8      	cmp	r8, r9
 800b3fa:	dc09      	bgt.n	800b410 <_printf_float+0x250>
 800b3fc:	6823      	ldr	r3, [r4, #0]
 800b3fe:	079b      	lsls	r3, r3, #30
 800b400:	f100 8103 	bmi.w	800b60a <_printf_float+0x44a>
 800b404:	68e0      	ldr	r0, [r4, #12]
 800b406:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b408:	4298      	cmp	r0, r3
 800b40a:	bfb8      	it	lt
 800b40c:	4618      	movlt	r0, r3
 800b40e:	e734      	b.n	800b27a <_printf_float+0xba>
 800b410:	2301      	movs	r3, #1
 800b412:	4652      	mov	r2, sl
 800b414:	4631      	mov	r1, r6
 800b416:	4628      	mov	r0, r5
 800b418:	47b8      	blx	r7
 800b41a:	3001      	adds	r0, #1
 800b41c:	f43f af2b 	beq.w	800b276 <_printf_float+0xb6>
 800b420:	f109 0901 	add.w	r9, r9, #1
 800b424:	e7e8      	b.n	800b3f8 <_printf_float+0x238>
 800b426:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b428:	2b00      	cmp	r3, #0
 800b42a:	dc39      	bgt.n	800b4a0 <_printf_float+0x2e0>
 800b42c:	4a1b      	ldr	r2, [pc, #108]	@ (800b49c <_printf_float+0x2dc>)
 800b42e:	2301      	movs	r3, #1
 800b430:	4631      	mov	r1, r6
 800b432:	4628      	mov	r0, r5
 800b434:	47b8      	blx	r7
 800b436:	3001      	adds	r0, #1
 800b438:	f43f af1d 	beq.w	800b276 <_printf_float+0xb6>
 800b43c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b440:	ea59 0303 	orrs.w	r3, r9, r3
 800b444:	d102      	bne.n	800b44c <_printf_float+0x28c>
 800b446:	6823      	ldr	r3, [r4, #0]
 800b448:	07d9      	lsls	r1, r3, #31
 800b44a:	d5d7      	bpl.n	800b3fc <_printf_float+0x23c>
 800b44c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b450:	4631      	mov	r1, r6
 800b452:	4628      	mov	r0, r5
 800b454:	47b8      	blx	r7
 800b456:	3001      	adds	r0, #1
 800b458:	f43f af0d 	beq.w	800b276 <_printf_float+0xb6>
 800b45c:	f04f 0a00 	mov.w	sl, #0
 800b460:	f104 0b1a 	add.w	fp, r4, #26
 800b464:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b466:	425b      	negs	r3, r3
 800b468:	4553      	cmp	r3, sl
 800b46a:	dc01      	bgt.n	800b470 <_printf_float+0x2b0>
 800b46c:	464b      	mov	r3, r9
 800b46e:	e793      	b.n	800b398 <_printf_float+0x1d8>
 800b470:	2301      	movs	r3, #1
 800b472:	465a      	mov	r2, fp
 800b474:	4631      	mov	r1, r6
 800b476:	4628      	mov	r0, r5
 800b478:	47b8      	blx	r7
 800b47a:	3001      	adds	r0, #1
 800b47c:	f43f aefb 	beq.w	800b276 <_printf_float+0xb6>
 800b480:	f10a 0a01 	add.w	sl, sl, #1
 800b484:	e7ee      	b.n	800b464 <_printf_float+0x2a4>
 800b486:	bf00      	nop
 800b488:	7fefffff 	.word	0x7fefffff
 800b48c:	0800f122 	.word	0x0800f122
 800b490:	0800f126 	.word	0x0800f126
 800b494:	0800f12a 	.word	0x0800f12a
 800b498:	0800f12e 	.word	0x0800f12e
 800b49c:	0800f132 	.word	0x0800f132
 800b4a0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b4a2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b4a6:	4553      	cmp	r3, sl
 800b4a8:	bfa8      	it	ge
 800b4aa:	4653      	movge	r3, sl
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	4699      	mov	r9, r3
 800b4b0:	dc36      	bgt.n	800b520 <_printf_float+0x360>
 800b4b2:	f04f 0b00 	mov.w	fp, #0
 800b4b6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4ba:	f104 021a 	add.w	r2, r4, #26
 800b4be:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b4c0:	9306      	str	r3, [sp, #24]
 800b4c2:	eba3 0309 	sub.w	r3, r3, r9
 800b4c6:	455b      	cmp	r3, fp
 800b4c8:	dc31      	bgt.n	800b52e <_printf_float+0x36e>
 800b4ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4cc:	459a      	cmp	sl, r3
 800b4ce:	dc3a      	bgt.n	800b546 <_printf_float+0x386>
 800b4d0:	6823      	ldr	r3, [r4, #0]
 800b4d2:	07da      	lsls	r2, r3, #31
 800b4d4:	d437      	bmi.n	800b546 <_printf_float+0x386>
 800b4d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4d8:	ebaa 0903 	sub.w	r9, sl, r3
 800b4dc:	9b06      	ldr	r3, [sp, #24]
 800b4de:	ebaa 0303 	sub.w	r3, sl, r3
 800b4e2:	4599      	cmp	r9, r3
 800b4e4:	bfa8      	it	ge
 800b4e6:	4699      	movge	r9, r3
 800b4e8:	f1b9 0f00 	cmp.w	r9, #0
 800b4ec:	dc33      	bgt.n	800b556 <_printf_float+0x396>
 800b4ee:	f04f 0800 	mov.w	r8, #0
 800b4f2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b4f6:	f104 0b1a 	add.w	fp, r4, #26
 800b4fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b4fc:	ebaa 0303 	sub.w	r3, sl, r3
 800b500:	eba3 0309 	sub.w	r3, r3, r9
 800b504:	4543      	cmp	r3, r8
 800b506:	f77f af79 	ble.w	800b3fc <_printf_float+0x23c>
 800b50a:	2301      	movs	r3, #1
 800b50c:	465a      	mov	r2, fp
 800b50e:	4631      	mov	r1, r6
 800b510:	4628      	mov	r0, r5
 800b512:	47b8      	blx	r7
 800b514:	3001      	adds	r0, #1
 800b516:	f43f aeae 	beq.w	800b276 <_printf_float+0xb6>
 800b51a:	f108 0801 	add.w	r8, r8, #1
 800b51e:	e7ec      	b.n	800b4fa <_printf_float+0x33a>
 800b520:	4642      	mov	r2, r8
 800b522:	4631      	mov	r1, r6
 800b524:	4628      	mov	r0, r5
 800b526:	47b8      	blx	r7
 800b528:	3001      	adds	r0, #1
 800b52a:	d1c2      	bne.n	800b4b2 <_printf_float+0x2f2>
 800b52c:	e6a3      	b.n	800b276 <_printf_float+0xb6>
 800b52e:	2301      	movs	r3, #1
 800b530:	4631      	mov	r1, r6
 800b532:	4628      	mov	r0, r5
 800b534:	9206      	str	r2, [sp, #24]
 800b536:	47b8      	blx	r7
 800b538:	3001      	adds	r0, #1
 800b53a:	f43f ae9c 	beq.w	800b276 <_printf_float+0xb6>
 800b53e:	9a06      	ldr	r2, [sp, #24]
 800b540:	f10b 0b01 	add.w	fp, fp, #1
 800b544:	e7bb      	b.n	800b4be <_printf_float+0x2fe>
 800b546:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b54a:	4631      	mov	r1, r6
 800b54c:	4628      	mov	r0, r5
 800b54e:	47b8      	blx	r7
 800b550:	3001      	adds	r0, #1
 800b552:	d1c0      	bne.n	800b4d6 <_printf_float+0x316>
 800b554:	e68f      	b.n	800b276 <_printf_float+0xb6>
 800b556:	9a06      	ldr	r2, [sp, #24]
 800b558:	464b      	mov	r3, r9
 800b55a:	4442      	add	r2, r8
 800b55c:	4631      	mov	r1, r6
 800b55e:	4628      	mov	r0, r5
 800b560:	47b8      	blx	r7
 800b562:	3001      	adds	r0, #1
 800b564:	d1c3      	bne.n	800b4ee <_printf_float+0x32e>
 800b566:	e686      	b.n	800b276 <_printf_float+0xb6>
 800b568:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b56c:	f1ba 0f01 	cmp.w	sl, #1
 800b570:	dc01      	bgt.n	800b576 <_printf_float+0x3b6>
 800b572:	07db      	lsls	r3, r3, #31
 800b574:	d536      	bpl.n	800b5e4 <_printf_float+0x424>
 800b576:	2301      	movs	r3, #1
 800b578:	4642      	mov	r2, r8
 800b57a:	4631      	mov	r1, r6
 800b57c:	4628      	mov	r0, r5
 800b57e:	47b8      	blx	r7
 800b580:	3001      	adds	r0, #1
 800b582:	f43f ae78 	beq.w	800b276 <_printf_float+0xb6>
 800b586:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b58a:	4631      	mov	r1, r6
 800b58c:	4628      	mov	r0, r5
 800b58e:	47b8      	blx	r7
 800b590:	3001      	adds	r0, #1
 800b592:	f43f ae70 	beq.w	800b276 <_printf_float+0xb6>
 800b596:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b59a:	2200      	movs	r2, #0
 800b59c:	2300      	movs	r3, #0
 800b59e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b5a2:	f7f5 fae9 	bl	8000b78 <__aeabi_dcmpeq>
 800b5a6:	b9c0      	cbnz	r0, 800b5da <_printf_float+0x41a>
 800b5a8:	4653      	mov	r3, sl
 800b5aa:	f108 0201 	add.w	r2, r8, #1
 800b5ae:	4631      	mov	r1, r6
 800b5b0:	4628      	mov	r0, r5
 800b5b2:	47b8      	blx	r7
 800b5b4:	3001      	adds	r0, #1
 800b5b6:	d10c      	bne.n	800b5d2 <_printf_float+0x412>
 800b5b8:	e65d      	b.n	800b276 <_printf_float+0xb6>
 800b5ba:	2301      	movs	r3, #1
 800b5bc:	465a      	mov	r2, fp
 800b5be:	4631      	mov	r1, r6
 800b5c0:	4628      	mov	r0, r5
 800b5c2:	47b8      	blx	r7
 800b5c4:	3001      	adds	r0, #1
 800b5c6:	f43f ae56 	beq.w	800b276 <_printf_float+0xb6>
 800b5ca:	f108 0801 	add.w	r8, r8, #1
 800b5ce:	45d0      	cmp	r8, sl
 800b5d0:	dbf3      	blt.n	800b5ba <_printf_float+0x3fa>
 800b5d2:	464b      	mov	r3, r9
 800b5d4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b5d8:	e6df      	b.n	800b39a <_printf_float+0x1da>
 800b5da:	f04f 0800 	mov.w	r8, #0
 800b5de:	f104 0b1a 	add.w	fp, r4, #26
 800b5e2:	e7f4      	b.n	800b5ce <_printf_float+0x40e>
 800b5e4:	2301      	movs	r3, #1
 800b5e6:	4642      	mov	r2, r8
 800b5e8:	e7e1      	b.n	800b5ae <_printf_float+0x3ee>
 800b5ea:	2301      	movs	r3, #1
 800b5ec:	464a      	mov	r2, r9
 800b5ee:	4631      	mov	r1, r6
 800b5f0:	4628      	mov	r0, r5
 800b5f2:	47b8      	blx	r7
 800b5f4:	3001      	adds	r0, #1
 800b5f6:	f43f ae3e 	beq.w	800b276 <_printf_float+0xb6>
 800b5fa:	f108 0801 	add.w	r8, r8, #1
 800b5fe:	68e3      	ldr	r3, [r4, #12]
 800b600:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b602:	1a5b      	subs	r3, r3, r1
 800b604:	4543      	cmp	r3, r8
 800b606:	dcf0      	bgt.n	800b5ea <_printf_float+0x42a>
 800b608:	e6fc      	b.n	800b404 <_printf_float+0x244>
 800b60a:	f04f 0800 	mov.w	r8, #0
 800b60e:	f104 0919 	add.w	r9, r4, #25
 800b612:	e7f4      	b.n	800b5fe <_printf_float+0x43e>

0800b614 <_printf_common>:
 800b614:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b618:	4616      	mov	r6, r2
 800b61a:	4698      	mov	r8, r3
 800b61c:	688a      	ldr	r2, [r1, #8]
 800b61e:	690b      	ldr	r3, [r1, #16]
 800b620:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b624:	4293      	cmp	r3, r2
 800b626:	bfb8      	it	lt
 800b628:	4613      	movlt	r3, r2
 800b62a:	6033      	str	r3, [r6, #0]
 800b62c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b630:	4607      	mov	r7, r0
 800b632:	460c      	mov	r4, r1
 800b634:	b10a      	cbz	r2, 800b63a <_printf_common+0x26>
 800b636:	3301      	adds	r3, #1
 800b638:	6033      	str	r3, [r6, #0]
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	0699      	lsls	r1, r3, #26
 800b63e:	bf42      	ittt	mi
 800b640:	6833      	ldrmi	r3, [r6, #0]
 800b642:	3302      	addmi	r3, #2
 800b644:	6033      	strmi	r3, [r6, #0]
 800b646:	6825      	ldr	r5, [r4, #0]
 800b648:	f015 0506 	ands.w	r5, r5, #6
 800b64c:	d106      	bne.n	800b65c <_printf_common+0x48>
 800b64e:	f104 0a19 	add.w	sl, r4, #25
 800b652:	68e3      	ldr	r3, [r4, #12]
 800b654:	6832      	ldr	r2, [r6, #0]
 800b656:	1a9b      	subs	r3, r3, r2
 800b658:	42ab      	cmp	r3, r5
 800b65a:	dc26      	bgt.n	800b6aa <_printf_common+0x96>
 800b65c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b660:	6822      	ldr	r2, [r4, #0]
 800b662:	3b00      	subs	r3, #0
 800b664:	bf18      	it	ne
 800b666:	2301      	movne	r3, #1
 800b668:	0692      	lsls	r2, r2, #26
 800b66a:	d42b      	bmi.n	800b6c4 <_printf_common+0xb0>
 800b66c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b670:	4641      	mov	r1, r8
 800b672:	4638      	mov	r0, r7
 800b674:	47c8      	blx	r9
 800b676:	3001      	adds	r0, #1
 800b678:	d01e      	beq.n	800b6b8 <_printf_common+0xa4>
 800b67a:	6823      	ldr	r3, [r4, #0]
 800b67c:	6922      	ldr	r2, [r4, #16]
 800b67e:	f003 0306 	and.w	r3, r3, #6
 800b682:	2b04      	cmp	r3, #4
 800b684:	bf02      	ittt	eq
 800b686:	68e5      	ldreq	r5, [r4, #12]
 800b688:	6833      	ldreq	r3, [r6, #0]
 800b68a:	1aed      	subeq	r5, r5, r3
 800b68c:	68a3      	ldr	r3, [r4, #8]
 800b68e:	bf0c      	ite	eq
 800b690:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b694:	2500      	movne	r5, #0
 800b696:	4293      	cmp	r3, r2
 800b698:	bfc4      	itt	gt
 800b69a:	1a9b      	subgt	r3, r3, r2
 800b69c:	18ed      	addgt	r5, r5, r3
 800b69e:	2600      	movs	r6, #0
 800b6a0:	341a      	adds	r4, #26
 800b6a2:	42b5      	cmp	r5, r6
 800b6a4:	d11a      	bne.n	800b6dc <_printf_common+0xc8>
 800b6a6:	2000      	movs	r0, #0
 800b6a8:	e008      	b.n	800b6bc <_printf_common+0xa8>
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	4652      	mov	r2, sl
 800b6ae:	4641      	mov	r1, r8
 800b6b0:	4638      	mov	r0, r7
 800b6b2:	47c8      	blx	r9
 800b6b4:	3001      	adds	r0, #1
 800b6b6:	d103      	bne.n	800b6c0 <_printf_common+0xac>
 800b6b8:	f04f 30ff 	mov.w	r0, #4294967295
 800b6bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b6c0:	3501      	adds	r5, #1
 800b6c2:	e7c6      	b.n	800b652 <_printf_common+0x3e>
 800b6c4:	18e1      	adds	r1, r4, r3
 800b6c6:	1c5a      	adds	r2, r3, #1
 800b6c8:	2030      	movs	r0, #48	@ 0x30
 800b6ca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b6ce:	4422      	add	r2, r4
 800b6d0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b6d4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b6d8:	3302      	adds	r3, #2
 800b6da:	e7c7      	b.n	800b66c <_printf_common+0x58>
 800b6dc:	2301      	movs	r3, #1
 800b6de:	4622      	mov	r2, r4
 800b6e0:	4641      	mov	r1, r8
 800b6e2:	4638      	mov	r0, r7
 800b6e4:	47c8      	blx	r9
 800b6e6:	3001      	adds	r0, #1
 800b6e8:	d0e6      	beq.n	800b6b8 <_printf_common+0xa4>
 800b6ea:	3601      	adds	r6, #1
 800b6ec:	e7d9      	b.n	800b6a2 <_printf_common+0x8e>
	...

0800b6f0 <_printf_i>:
 800b6f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b6f4:	7e0f      	ldrb	r7, [r1, #24]
 800b6f6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b6f8:	2f78      	cmp	r7, #120	@ 0x78
 800b6fa:	4691      	mov	r9, r2
 800b6fc:	4680      	mov	r8, r0
 800b6fe:	460c      	mov	r4, r1
 800b700:	469a      	mov	sl, r3
 800b702:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b706:	d807      	bhi.n	800b718 <_printf_i+0x28>
 800b708:	2f62      	cmp	r7, #98	@ 0x62
 800b70a:	d80a      	bhi.n	800b722 <_printf_i+0x32>
 800b70c:	2f00      	cmp	r7, #0
 800b70e:	f000 80d2 	beq.w	800b8b6 <_printf_i+0x1c6>
 800b712:	2f58      	cmp	r7, #88	@ 0x58
 800b714:	f000 80b9 	beq.w	800b88a <_printf_i+0x19a>
 800b718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b71c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b720:	e03a      	b.n	800b798 <_printf_i+0xa8>
 800b722:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b726:	2b15      	cmp	r3, #21
 800b728:	d8f6      	bhi.n	800b718 <_printf_i+0x28>
 800b72a:	a101      	add	r1, pc, #4	@ (adr r1, 800b730 <_printf_i+0x40>)
 800b72c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b730:	0800b789 	.word	0x0800b789
 800b734:	0800b79d 	.word	0x0800b79d
 800b738:	0800b719 	.word	0x0800b719
 800b73c:	0800b719 	.word	0x0800b719
 800b740:	0800b719 	.word	0x0800b719
 800b744:	0800b719 	.word	0x0800b719
 800b748:	0800b79d 	.word	0x0800b79d
 800b74c:	0800b719 	.word	0x0800b719
 800b750:	0800b719 	.word	0x0800b719
 800b754:	0800b719 	.word	0x0800b719
 800b758:	0800b719 	.word	0x0800b719
 800b75c:	0800b89d 	.word	0x0800b89d
 800b760:	0800b7c7 	.word	0x0800b7c7
 800b764:	0800b857 	.word	0x0800b857
 800b768:	0800b719 	.word	0x0800b719
 800b76c:	0800b719 	.word	0x0800b719
 800b770:	0800b8bf 	.word	0x0800b8bf
 800b774:	0800b719 	.word	0x0800b719
 800b778:	0800b7c7 	.word	0x0800b7c7
 800b77c:	0800b719 	.word	0x0800b719
 800b780:	0800b719 	.word	0x0800b719
 800b784:	0800b85f 	.word	0x0800b85f
 800b788:	6833      	ldr	r3, [r6, #0]
 800b78a:	1d1a      	adds	r2, r3, #4
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	6032      	str	r2, [r6, #0]
 800b790:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b794:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b798:	2301      	movs	r3, #1
 800b79a:	e09d      	b.n	800b8d8 <_printf_i+0x1e8>
 800b79c:	6833      	ldr	r3, [r6, #0]
 800b79e:	6820      	ldr	r0, [r4, #0]
 800b7a0:	1d19      	adds	r1, r3, #4
 800b7a2:	6031      	str	r1, [r6, #0]
 800b7a4:	0606      	lsls	r6, r0, #24
 800b7a6:	d501      	bpl.n	800b7ac <_printf_i+0xbc>
 800b7a8:	681d      	ldr	r5, [r3, #0]
 800b7aa:	e003      	b.n	800b7b4 <_printf_i+0xc4>
 800b7ac:	0645      	lsls	r5, r0, #25
 800b7ae:	d5fb      	bpl.n	800b7a8 <_printf_i+0xb8>
 800b7b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b7b4:	2d00      	cmp	r5, #0
 800b7b6:	da03      	bge.n	800b7c0 <_printf_i+0xd0>
 800b7b8:	232d      	movs	r3, #45	@ 0x2d
 800b7ba:	426d      	negs	r5, r5
 800b7bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b7c0:	4859      	ldr	r0, [pc, #356]	@ (800b928 <_printf_i+0x238>)
 800b7c2:	230a      	movs	r3, #10
 800b7c4:	e011      	b.n	800b7ea <_printf_i+0xfa>
 800b7c6:	6821      	ldr	r1, [r4, #0]
 800b7c8:	6833      	ldr	r3, [r6, #0]
 800b7ca:	0608      	lsls	r0, r1, #24
 800b7cc:	f853 5b04 	ldr.w	r5, [r3], #4
 800b7d0:	d402      	bmi.n	800b7d8 <_printf_i+0xe8>
 800b7d2:	0649      	lsls	r1, r1, #25
 800b7d4:	bf48      	it	mi
 800b7d6:	b2ad      	uxthmi	r5, r5
 800b7d8:	2f6f      	cmp	r7, #111	@ 0x6f
 800b7da:	4853      	ldr	r0, [pc, #332]	@ (800b928 <_printf_i+0x238>)
 800b7dc:	6033      	str	r3, [r6, #0]
 800b7de:	bf14      	ite	ne
 800b7e0:	230a      	movne	r3, #10
 800b7e2:	2308      	moveq	r3, #8
 800b7e4:	2100      	movs	r1, #0
 800b7e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b7ea:	6866      	ldr	r6, [r4, #4]
 800b7ec:	60a6      	str	r6, [r4, #8]
 800b7ee:	2e00      	cmp	r6, #0
 800b7f0:	bfa2      	ittt	ge
 800b7f2:	6821      	ldrge	r1, [r4, #0]
 800b7f4:	f021 0104 	bicge.w	r1, r1, #4
 800b7f8:	6021      	strge	r1, [r4, #0]
 800b7fa:	b90d      	cbnz	r5, 800b800 <_printf_i+0x110>
 800b7fc:	2e00      	cmp	r6, #0
 800b7fe:	d04b      	beq.n	800b898 <_printf_i+0x1a8>
 800b800:	4616      	mov	r6, r2
 800b802:	fbb5 f1f3 	udiv	r1, r5, r3
 800b806:	fb03 5711 	mls	r7, r3, r1, r5
 800b80a:	5dc7      	ldrb	r7, [r0, r7]
 800b80c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b810:	462f      	mov	r7, r5
 800b812:	42bb      	cmp	r3, r7
 800b814:	460d      	mov	r5, r1
 800b816:	d9f4      	bls.n	800b802 <_printf_i+0x112>
 800b818:	2b08      	cmp	r3, #8
 800b81a:	d10b      	bne.n	800b834 <_printf_i+0x144>
 800b81c:	6823      	ldr	r3, [r4, #0]
 800b81e:	07df      	lsls	r7, r3, #31
 800b820:	d508      	bpl.n	800b834 <_printf_i+0x144>
 800b822:	6923      	ldr	r3, [r4, #16]
 800b824:	6861      	ldr	r1, [r4, #4]
 800b826:	4299      	cmp	r1, r3
 800b828:	bfde      	ittt	le
 800b82a:	2330      	movle	r3, #48	@ 0x30
 800b82c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b830:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b834:	1b92      	subs	r2, r2, r6
 800b836:	6122      	str	r2, [r4, #16]
 800b838:	f8cd a000 	str.w	sl, [sp]
 800b83c:	464b      	mov	r3, r9
 800b83e:	aa03      	add	r2, sp, #12
 800b840:	4621      	mov	r1, r4
 800b842:	4640      	mov	r0, r8
 800b844:	f7ff fee6 	bl	800b614 <_printf_common>
 800b848:	3001      	adds	r0, #1
 800b84a:	d14a      	bne.n	800b8e2 <_printf_i+0x1f2>
 800b84c:	f04f 30ff 	mov.w	r0, #4294967295
 800b850:	b004      	add	sp, #16
 800b852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b856:	6823      	ldr	r3, [r4, #0]
 800b858:	f043 0320 	orr.w	r3, r3, #32
 800b85c:	6023      	str	r3, [r4, #0]
 800b85e:	4833      	ldr	r0, [pc, #204]	@ (800b92c <_printf_i+0x23c>)
 800b860:	2778      	movs	r7, #120	@ 0x78
 800b862:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b866:	6823      	ldr	r3, [r4, #0]
 800b868:	6831      	ldr	r1, [r6, #0]
 800b86a:	061f      	lsls	r7, r3, #24
 800b86c:	f851 5b04 	ldr.w	r5, [r1], #4
 800b870:	d402      	bmi.n	800b878 <_printf_i+0x188>
 800b872:	065f      	lsls	r7, r3, #25
 800b874:	bf48      	it	mi
 800b876:	b2ad      	uxthmi	r5, r5
 800b878:	6031      	str	r1, [r6, #0]
 800b87a:	07d9      	lsls	r1, r3, #31
 800b87c:	bf44      	itt	mi
 800b87e:	f043 0320 	orrmi.w	r3, r3, #32
 800b882:	6023      	strmi	r3, [r4, #0]
 800b884:	b11d      	cbz	r5, 800b88e <_printf_i+0x19e>
 800b886:	2310      	movs	r3, #16
 800b888:	e7ac      	b.n	800b7e4 <_printf_i+0xf4>
 800b88a:	4827      	ldr	r0, [pc, #156]	@ (800b928 <_printf_i+0x238>)
 800b88c:	e7e9      	b.n	800b862 <_printf_i+0x172>
 800b88e:	6823      	ldr	r3, [r4, #0]
 800b890:	f023 0320 	bic.w	r3, r3, #32
 800b894:	6023      	str	r3, [r4, #0]
 800b896:	e7f6      	b.n	800b886 <_printf_i+0x196>
 800b898:	4616      	mov	r6, r2
 800b89a:	e7bd      	b.n	800b818 <_printf_i+0x128>
 800b89c:	6833      	ldr	r3, [r6, #0]
 800b89e:	6825      	ldr	r5, [r4, #0]
 800b8a0:	6961      	ldr	r1, [r4, #20]
 800b8a2:	1d18      	adds	r0, r3, #4
 800b8a4:	6030      	str	r0, [r6, #0]
 800b8a6:	062e      	lsls	r6, r5, #24
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	d501      	bpl.n	800b8b0 <_printf_i+0x1c0>
 800b8ac:	6019      	str	r1, [r3, #0]
 800b8ae:	e002      	b.n	800b8b6 <_printf_i+0x1c6>
 800b8b0:	0668      	lsls	r0, r5, #25
 800b8b2:	d5fb      	bpl.n	800b8ac <_printf_i+0x1bc>
 800b8b4:	8019      	strh	r1, [r3, #0]
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	6123      	str	r3, [r4, #16]
 800b8ba:	4616      	mov	r6, r2
 800b8bc:	e7bc      	b.n	800b838 <_printf_i+0x148>
 800b8be:	6833      	ldr	r3, [r6, #0]
 800b8c0:	1d1a      	adds	r2, r3, #4
 800b8c2:	6032      	str	r2, [r6, #0]
 800b8c4:	681e      	ldr	r6, [r3, #0]
 800b8c6:	6862      	ldr	r2, [r4, #4]
 800b8c8:	2100      	movs	r1, #0
 800b8ca:	4630      	mov	r0, r6
 800b8cc:	f7f4 fcd8 	bl	8000280 <memchr>
 800b8d0:	b108      	cbz	r0, 800b8d6 <_printf_i+0x1e6>
 800b8d2:	1b80      	subs	r0, r0, r6
 800b8d4:	6060      	str	r0, [r4, #4]
 800b8d6:	6863      	ldr	r3, [r4, #4]
 800b8d8:	6123      	str	r3, [r4, #16]
 800b8da:	2300      	movs	r3, #0
 800b8dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b8e0:	e7aa      	b.n	800b838 <_printf_i+0x148>
 800b8e2:	6923      	ldr	r3, [r4, #16]
 800b8e4:	4632      	mov	r2, r6
 800b8e6:	4649      	mov	r1, r9
 800b8e8:	4640      	mov	r0, r8
 800b8ea:	47d0      	blx	sl
 800b8ec:	3001      	adds	r0, #1
 800b8ee:	d0ad      	beq.n	800b84c <_printf_i+0x15c>
 800b8f0:	6823      	ldr	r3, [r4, #0]
 800b8f2:	079b      	lsls	r3, r3, #30
 800b8f4:	d413      	bmi.n	800b91e <_printf_i+0x22e>
 800b8f6:	68e0      	ldr	r0, [r4, #12]
 800b8f8:	9b03      	ldr	r3, [sp, #12]
 800b8fa:	4298      	cmp	r0, r3
 800b8fc:	bfb8      	it	lt
 800b8fe:	4618      	movlt	r0, r3
 800b900:	e7a6      	b.n	800b850 <_printf_i+0x160>
 800b902:	2301      	movs	r3, #1
 800b904:	4632      	mov	r2, r6
 800b906:	4649      	mov	r1, r9
 800b908:	4640      	mov	r0, r8
 800b90a:	47d0      	blx	sl
 800b90c:	3001      	adds	r0, #1
 800b90e:	d09d      	beq.n	800b84c <_printf_i+0x15c>
 800b910:	3501      	adds	r5, #1
 800b912:	68e3      	ldr	r3, [r4, #12]
 800b914:	9903      	ldr	r1, [sp, #12]
 800b916:	1a5b      	subs	r3, r3, r1
 800b918:	42ab      	cmp	r3, r5
 800b91a:	dcf2      	bgt.n	800b902 <_printf_i+0x212>
 800b91c:	e7eb      	b.n	800b8f6 <_printf_i+0x206>
 800b91e:	2500      	movs	r5, #0
 800b920:	f104 0619 	add.w	r6, r4, #25
 800b924:	e7f5      	b.n	800b912 <_printf_i+0x222>
 800b926:	bf00      	nop
 800b928:	0800f134 	.word	0x0800f134
 800b92c:	0800f145 	.word	0x0800f145

0800b930 <std>:
 800b930:	2300      	movs	r3, #0
 800b932:	b510      	push	{r4, lr}
 800b934:	4604      	mov	r4, r0
 800b936:	e9c0 3300 	strd	r3, r3, [r0]
 800b93a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b93e:	6083      	str	r3, [r0, #8]
 800b940:	8181      	strh	r1, [r0, #12]
 800b942:	6643      	str	r3, [r0, #100]	@ 0x64
 800b944:	81c2      	strh	r2, [r0, #14]
 800b946:	6183      	str	r3, [r0, #24]
 800b948:	4619      	mov	r1, r3
 800b94a:	2208      	movs	r2, #8
 800b94c:	305c      	adds	r0, #92	@ 0x5c
 800b94e:	f000 f938 	bl	800bbc2 <memset>
 800b952:	4b0d      	ldr	r3, [pc, #52]	@ (800b988 <std+0x58>)
 800b954:	6263      	str	r3, [r4, #36]	@ 0x24
 800b956:	4b0d      	ldr	r3, [pc, #52]	@ (800b98c <std+0x5c>)
 800b958:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b95a:	4b0d      	ldr	r3, [pc, #52]	@ (800b990 <std+0x60>)
 800b95c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b95e:	4b0d      	ldr	r3, [pc, #52]	@ (800b994 <std+0x64>)
 800b960:	6323      	str	r3, [r4, #48]	@ 0x30
 800b962:	4b0d      	ldr	r3, [pc, #52]	@ (800b998 <std+0x68>)
 800b964:	6224      	str	r4, [r4, #32]
 800b966:	429c      	cmp	r4, r3
 800b968:	d006      	beq.n	800b978 <std+0x48>
 800b96a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b96e:	4294      	cmp	r4, r2
 800b970:	d002      	beq.n	800b978 <std+0x48>
 800b972:	33d0      	adds	r3, #208	@ 0xd0
 800b974:	429c      	cmp	r4, r3
 800b976:	d105      	bne.n	800b984 <std+0x54>
 800b978:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b97c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b980:	f000 b98a 	b.w	800bc98 <__retarget_lock_init_recursive>
 800b984:	bd10      	pop	{r4, pc}
 800b986:	bf00      	nop
 800b988:	0800bb1d 	.word	0x0800bb1d
 800b98c:	0800bb3f 	.word	0x0800bb3f
 800b990:	0800bb77 	.word	0x0800bb77
 800b994:	0800bb9b 	.word	0x0800bb9b
 800b998:	20013bd4 	.word	0x20013bd4

0800b99c <stdio_exit_handler>:
 800b99c:	4a02      	ldr	r2, [pc, #8]	@ (800b9a8 <stdio_exit_handler+0xc>)
 800b99e:	4903      	ldr	r1, [pc, #12]	@ (800b9ac <stdio_exit_handler+0x10>)
 800b9a0:	4803      	ldr	r0, [pc, #12]	@ (800b9b0 <stdio_exit_handler+0x14>)
 800b9a2:	f000 b869 	b.w	800ba78 <_fwalk_sglue>
 800b9a6:	bf00      	nop
 800b9a8:	20000014 	.word	0x20000014
 800b9ac:	0800d615 	.word	0x0800d615
 800b9b0:	20000024 	.word	0x20000024

0800b9b4 <cleanup_stdio>:
 800b9b4:	6841      	ldr	r1, [r0, #4]
 800b9b6:	4b0c      	ldr	r3, [pc, #48]	@ (800b9e8 <cleanup_stdio+0x34>)
 800b9b8:	4299      	cmp	r1, r3
 800b9ba:	b510      	push	{r4, lr}
 800b9bc:	4604      	mov	r4, r0
 800b9be:	d001      	beq.n	800b9c4 <cleanup_stdio+0x10>
 800b9c0:	f001 fe28 	bl	800d614 <_fflush_r>
 800b9c4:	68a1      	ldr	r1, [r4, #8]
 800b9c6:	4b09      	ldr	r3, [pc, #36]	@ (800b9ec <cleanup_stdio+0x38>)
 800b9c8:	4299      	cmp	r1, r3
 800b9ca:	d002      	beq.n	800b9d2 <cleanup_stdio+0x1e>
 800b9cc:	4620      	mov	r0, r4
 800b9ce:	f001 fe21 	bl	800d614 <_fflush_r>
 800b9d2:	68e1      	ldr	r1, [r4, #12]
 800b9d4:	4b06      	ldr	r3, [pc, #24]	@ (800b9f0 <cleanup_stdio+0x3c>)
 800b9d6:	4299      	cmp	r1, r3
 800b9d8:	d004      	beq.n	800b9e4 <cleanup_stdio+0x30>
 800b9da:	4620      	mov	r0, r4
 800b9dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b9e0:	f001 be18 	b.w	800d614 <_fflush_r>
 800b9e4:	bd10      	pop	{r4, pc}
 800b9e6:	bf00      	nop
 800b9e8:	20013bd4 	.word	0x20013bd4
 800b9ec:	20013c3c 	.word	0x20013c3c
 800b9f0:	20013ca4 	.word	0x20013ca4

0800b9f4 <global_stdio_init.part.0>:
 800b9f4:	b510      	push	{r4, lr}
 800b9f6:	4b0b      	ldr	r3, [pc, #44]	@ (800ba24 <global_stdio_init.part.0+0x30>)
 800b9f8:	4c0b      	ldr	r4, [pc, #44]	@ (800ba28 <global_stdio_init.part.0+0x34>)
 800b9fa:	4a0c      	ldr	r2, [pc, #48]	@ (800ba2c <global_stdio_init.part.0+0x38>)
 800b9fc:	601a      	str	r2, [r3, #0]
 800b9fe:	4620      	mov	r0, r4
 800ba00:	2200      	movs	r2, #0
 800ba02:	2104      	movs	r1, #4
 800ba04:	f7ff ff94 	bl	800b930 <std>
 800ba08:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ba0c:	2201      	movs	r2, #1
 800ba0e:	2109      	movs	r1, #9
 800ba10:	f7ff ff8e 	bl	800b930 <std>
 800ba14:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ba18:	2202      	movs	r2, #2
 800ba1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba1e:	2112      	movs	r1, #18
 800ba20:	f7ff bf86 	b.w	800b930 <std>
 800ba24:	20013d0c 	.word	0x20013d0c
 800ba28:	20013bd4 	.word	0x20013bd4
 800ba2c:	0800b99d 	.word	0x0800b99d

0800ba30 <__sfp_lock_acquire>:
 800ba30:	4801      	ldr	r0, [pc, #4]	@ (800ba38 <__sfp_lock_acquire+0x8>)
 800ba32:	f000 b932 	b.w	800bc9a <__retarget_lock_acquire_recursive>
 800ba36:	bf00      	nop
 800ba38:	20013d15 	.word	0x20013d15

0800ba3c <__sfp_lock_release>:
 800ba3c:	4801      	ldr	r0, [pc, #4]	@ (800ba44 <__sfp_lock_release+0x8>)
 800ba3e:	f000 b92d 	b.w	800bc9c <__retarget_lock_release_recursive>
 800ba42:	bf00      	nop
 800ba44:	20013d15 	.word	0x20013d15

0800ba48 <__sinit>:
 800ba48:	b510      	push	{r4, lr}
 800ba4a:	4604      	mov	r4, r0
 800ba4c:	f7ff fff0 	bl	800ba30 <__sfp_lock_acquire>
 800ba50:	6a23      	ldr	r3, [r4, #32]
 800ba52:	b11b      	cbz	r3, 800ba5c <__sinit+0x14>
 800ba54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ba58:	f7ff bff0 	b.w	800ba3c <__sfp_lock_release>
 800ba5c:	4b04      	ldr	r3, [pc, #16]	@ (800ba70 <__sinit+0x28>)
 800ba5e:	6223      	str	r3, [r4, #32]
 800ba60:	4b04      	ldr	r3, [pc, #16]	@ (800ba74 <__sinit+0x2c>)
 800ba62:	681b      	ldr	r3, [r3, #0]
 800ba64:	2b00      	cmp	r3, #0
 800ba66:	d1f5      	bne.n	800ba54 <__sinit+0xc>
 800ba68:	f7ff ffc4 	bl	800b9f4 <global_stdio_init.part.0>
 800ba6c:	e7f2      	b.n	800ba54 <__sinit+0xc>
 800ba6e:	bf00      	nop
 800ba70:	0800b9b5 	.word	0x0800b9b5
 800ba74:	20013d0c 	.word	0x20013d0c

0800ba78 <_fwalk_sglue>:
 800ba78:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ba7c:	4607      	mov	r7, r0
 800ba7e:	4688      	mov	r8, r1
 800ba80:	4614      	mov	r4, r2
 800ba82:	2600      	movs	r6, #0
 800ba84:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800ba88:	f1b9 0901 	subs.w	r9, r9, #1
 800ba8c:	d505      	bpl.n	800ba9a <_fwalk_sglue+0x22>
 800ba8e:	6824      	ldr	r4, [r4, #0]
 800ba90:	2c00      	cmp	r4, #0
 800ba92:	d1f7      	bne.n	800ba84 <_fwalk_sglue+0xc>
 800ba94:	4630      	mov	r0, r6
 800ba96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba9a:	89ab      	ldrh	r3, [r5, #12]
 800ba9c:	2b01      	cmp	r3, #1
 800ba9e:	d907      	bls.n	800bab0 <_fwalk_sglue+0x38>
 800baa0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800baa4:	3301      	adds	r3, #1
 800baa6:	d003      	beq.n	800bab0 <_fwalk_sglue+0x38>
 800baa8:	4629      	mov	r1, r5
 800baaa:	4638      	mov	r0, r7
 800baac:	47c0      	blx	r8
 800baae:	4306      	orrs	r6, r0
 800bab0:	3568      	adds	r5, #104	@ 0x68
 800bab2:	e7e9      	b.n	800ba88 <_fwalk_sglue+0x10>

0800bab4 <sniprintf>:
 800bab4:	b40c      	push	{r2, r3}
 800bab6:	b530      	push	{r4, r5, lr}
 800bab8:	4b17      	ldr	r3, [pc, #92]	@ (800bb18 <sniprintf+0x64>)
 800baba:	1e0c      	subs	r4, r1, #0
 800babc:	681d      	ldr	r5, [r3, #0]
 800babe:	b09d      	sub	sp, #116	@ 0x74
 800bac0:	da08      	bge.n	800bad4 <sniprintf+0x20>
 800bac2:	238b      	movs	r3, #139	@ 0x8b
 800bac4:	602b      	str	r3, [r5, #0]
 800bac6:	f04f 30ff 	mov.w	r0, #4294967295
 800baca:	b01d      	add	sp, #116	@ 0x74
 800bacc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800bad0:	b002      	add	sp, #8
 800bad2:	4770      	bx	lr
 800bad4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800bad8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800badc:	bf14      	ite	ne
 800bade:	f104 33ff 	addne.w	r3, r4, #4294967295
 800bae2:	4623      	moveq	r3, r4
 800bae4:	9304      	str	r3, [sp, #16]
 800bae6:	9307      	str	r3, [sp, #28]
 800bae8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800baec:	9002      	str	r0, [sp, #8]
 800baee:	9006      	str	r0, [sp, #24]
 800baf0:	f8ad 3016 	strh.w	r3, [sp, #22]
 800baf4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800baf6:	ab21      	add	r3, sp, #132	@ 0x84
 800baf8:	a902      	add	r1, sp, #8
 800bafa:	4628      	mov	r0, r5
 800bafc:	9301      	str	r3, [sp, #4]
 800bafe:	f001 fc09 	bl	800d314 <_svfiprintf_r>
 800bb02:	1c43      	adds	r3, r0, #1
 800bb04:	bfbc      	itt	lt
 800bb06:	238b      	movlt	r3, #139	@ 0x8b
 800bb08:	602b      	strlt	r3, [r5, #0]
 800bb0a:	2c00      	cmp	r4, #0
 800bb0c:	d0dd      	beq.n	800baca <sniprintf+0x16>
 800bb0e:	9b02      	ldr	r3, [sp, #8]
 800bb10:	2200      	movs	r2, #0
 800bb12:	701a      	strb	r2, [r3, #0]
 800bb14:	e7d9      	b.n	800baca <sniprintf+0x16>
 800bb16:	bf00      	nop
 800bb18:	20000020 	.word	0x20000020

0800bb1c <__sread>:
 800bb1c:	b510      	push	{r4, lr}
 800bb1e:	460c      	mov	r4, r1
 800bb20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb24:	f000 f87c 	bl	800bc20 <_read_r>
 800bb28:	2800      	cmp	r0, #0
 800bb2a:	bfab      	itete	ge
 800bb2c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800bb2e:	89a3      	ldrhlt	r3, [r4, #12]
 800bb30:	181b      	addge	r3, r3, r0
 800bb32:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800bb36:	bfac      	ite	ge
 800bb38:	6563      	strge	r3, [r4, #84]	@ 0x54
 800bb3a:	81a3      	strhlt	r3, [r4, #12]
 800bb3c:	bd10      	pop	{r4, pc}

0800bb3e <__swrite>:
 800bb3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb42:	461f      	mov	r7, r3
 800bb44:	898b      	ldrh	r3, [r1, #12]
 800bb46:	05db      	lsls	r3, r3, #23
 800bb48:	4605      	mov	r5, r0
 800bb4a:	460c      	mov	r4, r1
 800bb4c:	4616      	mov	r6, r2
 800bb4e:	d505      	bpl.n	800bb5c <__swrite+0x1e>
 800bb50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb54:	2302      	movs	r3, #2
 800bb56:	2200      	movs	r2, #0
 800bb58:	f000 f850 	bl	800bbfc <_lseek_r>
 800bb5c:	89a3      	ldrh	r3, [r4, #12]
 800bb5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bb62:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800bb66:	81a3      	strh	r3, [r4, #12]
 800bb68:	4632      	mov	r2, r6
 800bb6a:	463b      	mov	r3, r7
 800bb6c:	4628      	mov	r0, r5
 800bb6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bb72:	f7ff ba75 	b.w	800b060 <_write_r>

0800bb76 <__sseek>:
 800bb76:	b510      	push	{r4, lr}
 800bb78:	460c      	mov	r4, r1
 800bb7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb7e:	f000 f83d 	bl	800bbfc <_lseek_r>
 800bb82:	1c43      	adds	r3, r0, #1
 800bb84:	89a3      	ldrh	r3, [r4, #12]
 800bb86:	bf15      	itete	ne
 800bb88:	6560      	strne	r0, [r4, #84]	@ 0x54
 800bb8a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800bb8e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800bb92:	81a3      	strheq	r3, [r4, #12]
 800bb94:	bf18      	it	ne
 800bb96:	81a3      	strhne	r3, [r4, #12]
 800bb98:	bd10      	pop	{r4, pc}

0800bb9a <__sclose>:
 800bb9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bb9e:	f000 b81d 	b.w	800bbdc <_close_r>

0800bba2 <memcmp>:
 800bba2:	b510      	push	{r4, lr}
 800bba4:	3901      	subs	r1, #1
 800bba6:	4402      	add	r2, r0
 800bba8:	4290      	cmp	r0, r2
 800bbaa:	d101      	bne.n	800bbb0 <memcmp+0xe>
 800bbac:	2000      	movs	r0, #0
 800bbae:	e005      	b.n	800bbbc <memcmp+0x1a>
 800bbb0:	7803      	ldrb	r3, [r0, #0]
 800bbb2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800bbb6:	42a3      	cmp	r3, r4
 800bbb8:	d001      	beq.n	800bbbe <memcmp+0x1c>
 800bbba:	1b18      	subs	r0, r3, r4
 800bbbc:	bd10      	pop	{r4, pc}
 800bbbe:	3001      	adds	r0, #1
 800bbc0:	e7f2      	b.n	800bba8 <memcmp+0x6>

0800bbc2 <memset>:
 800bbc2:	4402      	add	r2, r0
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	4293      	cmp	r3, r2
 800bbc8:	d100      	bne.n	800bbcc <memset+0xa>
 800bbca:	4770      	bx	lr
 800bbcc:	f803 1b01 	strb.w	r1, [r3], #1
 800bbd0:	e7f9      	b.n	800bbc6 <memset+0x4>
	...

0800bbd4 <_localeconv_r>:
 800bbd4:	4800      	ldr	r0, [pc, #0]	@ (800bbd8 <_localeconv_r+0x4>)
 800bbd6:	4770      	bx	lr
 800bbd8:	20000160 	.word	0x20000160

0800bbdc <_close_r>:
 800bbdc:	b538      	push	{r3, r4, r5, lr}
 800bbde:	4d06      	ldr	r5, [pc, #24]	@ (800bbf8 <_close_r+0x1c>)
 800bbe0:	2300      	movs	r3, #0
 800bbe2:	4604      	mov	r4, r0
 800bbe4:	4608      	mov	r0, r1
 800bbe6:	602b      	str	r3, [r5, #0]
 800bbe8:	f7f6 ffe2 	bl	8002bb0 <_close>
 800bbec:	1c43      	adds	r3, r0, #1
 800bbee:	d102      	bne.n	800bbf6 <_close_r+0x1a>
 800bbf0:	682b      	ldr	r3, [r5, #0]
 800bbf2:	b103      	cbz	r3, 800bbf6 <_close_r+0x1a>
 800bbf4:	6023      	str	r3, [r4, #0]
 800bbf6:	bd38      	pop	{r3, r4, r5, pc}
 800bbf8:	20013d10 	.word	0x20013d10

0800bbfc <_lseek_r>:
 800bbfc:	b538      	push	{r3, r4, r5, lr}
 800bbfe:	4d07      	ldr	r5, [pc, #28]	@ (800bc1c <_lseek_r+0x20>)
 800bc00:	4604      	mov	r4, r0
 800bc02:	4608      	mov	r0, r1
 800bc04:	4611      	mov	r1, r2
 800bc06:	2200      	movs	r2, #0
 800bc08:	602a      	str	r2, [r5, #0]
 800bc0a:	461a      	mov	r2, r3
 800bc0c:	f7f6 fff7 	bl	8002bfe <_lseek>
 800bc10:	1c43      	adds	r3, r0, #1
 800bc12:	d102      	bne.n	800bc1a <_lseek_r+0x1e>
 800bc14:	682b      	ldr	r3, [r5, #0]
 800bc16:	b103      	cbz	r3, 800bc1a <_lseek_r+0x1e>
 800bc18:	6023      	str	r3, [r4, #0]
 800bc1a:	bd38      	pop	{r3, r4, r5, pc}
 800bc1c:	20013d10 	.word	0x20013d10

0800bc20 <_read_r>:
 800bc20:	b538      	push	{r3, r4, r5, lr}
 800bc22:	4d07      	ldr	r5, [pc, #28]	@ (800bc40 <_read_r+0x20>)
 800bc24:	4604      	mov	r4, r0
 800bc26:	4608      	mov	r0, r1
 800bc28:	4611      	mov	r1, r2
 800bc2a:	2200      	movs	r2, #0
 800bc2c:	602a      	str	r2, [r5, #0]
 800bc2e:	461a      	mov	r2, r3
 800bc30:	f7f6 ffa1 	bl	8002b76 <_read>
 800bc34:	1c43      	adds	r3, r0, #1
 800bc36:	d102      	bne.n	800bc3e <_read_r+0x1e>
 800bc38:	682b      	ldr	r3, [r5, #0]
 800bc3a:	b103      	cbz	r3, 800bc3e <_read_r+0x1e>
 800bc3c:	6023      	str	r3, [r4, #0]
 800bc3e:	bd38      	pop	{r3, r4, r5, pc}
 800bc40:	20013d10 	.word	0x20013d10

0800bc44 <__errno>:
 800bc44:	4b01      	ldr	r3, [pc, #4]	@ (800bc4c <__errno+0x8>)
 800bc46:	6818      	ldr	r0, [r3, #0]
 800bc48:	4770      	bx	lr
 800bc4a:	bf00      	nop
 800bc4c:	20000020 	.word	0x20000020

0800bc50 <__libc_init_array>:
 800bc50:	b570      	push	{r4, r5, r6, lr}
 800bc52:	4d0d      	ldr	r5, [pc, #52]	@ (800bc88 <__libc_init_array+0x38>)
 800bc54:	4c0d      	ldr	r4, [pc, #52]	@ (800bc8c <__libc_init_array+0x3c>)
 800bc56:	1b64      	subs	r4, r4, r5
 800bc58:	10a4      	asrs	r4, r4, #2
 800bc5a:	2600      	movs	r6, #0
 800bc5c:	42a6      	cmp	r6, r4
 800bc5e:	d109      	bne.n	800bc74 <__libc_init_array+0x24>
 800bc60:	4d0b      	ldr	r5, [pc, #44]	@ (800bc90 <__libc_init_array+0x40>)
 800bc62:	4c0c      	ldr	r4, [pc, #48]	@ (800bc94 <__libc_init_array+0x44>)
 800bc64:	f002 ffd4 	bl	800ec10 <_init>
 800bc68:	1b64      	subs	r4, r4, r5
 800bc6a:	10a4      	asrs	r4, r4, #2
 800bc6c:	2600      	movs	r6, #0
 800bc6e:	42a6      	cmp	r6, r4
 800bc70:	d105      	bne.n	800bc7e <__libc_init_array+0x2e>
 800bc72:	bd70      	pop	{r4, r5, r6, pc}
 800bc74:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc78:	4798      	blx	r3
 800bc7a:	3601      	adds	r6, #1
 800bc7c:	e7ee      	b.n	800bc5c <__libc_init_array+0xc>
 800bc7e:	f855 3b04 	ldr.w	r3, [r5], #4
 800bc82:	4798      	blx	r3
 800bc84:	3601      	adds	r6, #1
 800bc86:	e7f2      	b.n	800bc6e <__libc_init_array+0x1e>
 800bc88:	0800f4c8 	.word	0x0800f4c8
 800bc8c:	0800f4c8 	.word	0x0800f4c8
 800bc90:	0800f4c8 	.word	0x0800f4c8
 800bc94:	0800f4cc 	.word	0x0800f4cc

0800bc98 <__retarget_lock_init_recursive>:
 800bc98:	4770      	bx	lr

0800bc9a <__retarget_lock_acquire_recursive>:
 800bc9a:	4770      	bx	lr

0800bc9c <__retarget_lock_release_recursive>:
 800bc9c:	4770      	bx	lr

0800bc9e <memcpy>:
 800bc9e:	440a      	add	r2, r1
 800bca0:	4291      	cmp	r1, r2
 800bca2:	f100 33ff 	add.w	r3, r0, #4294967295
 800bca6:	d100      	bne.n	800bcaa <memcpy+0xc>
 800bca8:	4770      	bx	lr
 800bcaa:	b510      	push	{r4, lr}
 800bcac:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bcb0:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bcb4:	4291      	cmp	r1, r2
 800bcb6:	d1f9      	bne.n	800bcac <memcpy+0xe>
 800bcb8:	bd10      	pop	{r4, pc}

0800bcba <quorem>:
 800bcba:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcbe:	6903      	ldr	r3, [r0, #16]
 800bcc0:	690c      	ldr	r4, [r1, #16]
 800bcc2:	42a3      	cmp	r3, r4
 800bcc4:	4607      	mov	r7, r0
 800bcc6:	db7e      	blt.n	800bdc6 <quorem+0x10c>
 800bcc8:	3c01      	subs	r4, #1
 800bcca:	f101 0814 	add.w	r8, r1, #20
 800bcce:	00a3      	lsls	r3, r4, #2
 800bcd0:	f100 0514 	add.w	r5, r0, #20
 800bcd4:	9300      	str	r3, [sp, #0]
 800bcd6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bcda:	9301      	str	r3, [sp, #4]
 800bcdc:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bce0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bce4:	3301      	adds	r3, #1
 800bce6:	429a      	cmp	r2, r3
 800bce8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bcec:	fbb2 f6f3 	udiv	r6, r2, r3
 800bcf0:	d32e      	bcc.n	800bd50 <quorem+0x96>
 800bcf2:	f04f 0a00 	mov.w	sl, #0
 800bcf6:	46c4      	mov	ip, r8
 800bcf8:	46ae      	mov	lr, r5
 800bcfa:	46d3      	mov	fp, sl
 800bcfc:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bd00:	b298      	uxth	r0, r3
 800bd02:	fb06 a000 	mla	r0, r6, r0, sl
 800bd06:	0c02      	lsrs	r2, r0, #16
 800bd08:	0c1b      	lsrs	r3, r3, #16
 800bd0a:	fb06 2303 	mla	r3, r6, r3, r2
 800bd0e:	f8de 2000 	ldr.w	r2, [lr]
 800bd12:	b280      	uxth	r0, r0
 800bd14:	b292      	uxth	r2, r2
 800bd16:	1a12      	subs	r2, r2, r0
 800bd18:	445a      	add	r2, fp
 800bd1a:	f8de 0000 	ldr.w	r0, [lr]
 800bd1e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bd22:	b29b      	uxth	r3, r3
 800bd24:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bd28:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bd2c:	b292      	uxth	r2, r2
 800bd2e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bd32:	45e1      	cmp	r9, ip
 800bd34:	f84e 2b04 	str.w	r2, [lr], #4
 800bd38:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bd3c:	d2de      	bcs.n	800bcfc <quorem+0x42>
 800bd3e:	9b00      	ldr	r3, [sp, #0]
 800bd40:	58eb      	ldr	r3, [r5, r3]
 800bd42:	b92b      	cbnz	r3, 800bd50 <quorem+0x96>
 800bd44:	9b01      	ldr	r3, [sp, #4]
 800bd46:	3b04      	subs	r3, #4
 800bd48:	429d      	cmp	r5, r3
 800bd4a:	461a      	mov	r2, r3
 800bd4c:	d32f      	bcc.n	800bdae <quorem+0xf4>
 800bd4e:	613c      	str	r4, [r7, #16]
 800bd50:	4638      	mov	r0, r7
 800bd52:	f001 f97b 	bl	800d04c <__mcmp>
 800bd56:	2800      	cmp	r0, #0
 800bd58:	db25      	blt.n	800bda6 <quorem+0xec>
 800bd5a:	4629      	mov	r1, r5
 800bd5c:	2000      	movs	r0, #0
 800bd5e:	f858 2b04 	ldr.w	r2, [r8], #4
 800bd62:	f8d1 c000 	ldr.w	ip, [r1]
 800bd66:	fa1f fe82 	uxth.w	lr, r2
 800bd6a:	fa1f f38c 	uxth.w	r3, ip
 800bd6e:	eba3 030e 	sub.w	r3, r3, lr
 800bd72:	4403      	add	r3, r0
 800bd74:	0c12      	lsrs	r2, r2, #16
 800bd76:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bd7a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bd7e:	b29b      	uxth	r3, r3
 800bd80:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bd84:	45c1      	cmp	r9, r8
 800bd86:	f841 3b04 	str.w	r3, [r1], #4
 800bd8a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bd8e:	d2e6      	bcs.n	800bd5e <quorem+0xa4>
 800bd90:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bd94:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bd98:	b922      	cbnz	r2, 800bda4 <quorem+0xea>
 800bd9a:	3b04      	subs	r3, #4
 800bd9c:	429d      	cmp	r5, r3
 800bd9e:	461a      	mov	r2, r3
 800bda0:	d30b      	bcc.n	800bdba <quorem+0x100>
 800bda2:	613c      	str	r4, [r7, #16]
 800bda4:	3601      	adds	r6, #1
 800bda6:	4630      	mov	r0, r6
 800bda8:	b003      	add	sp, #12
 800bdaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdae:	6812      	ldr	r2, [r2, #0]
 800bdb0:	3b04      	subs	r3, #4
 800bdb2:	2a00      	cmp	r2, #0
 800bdb4:	d1cb      	bne.n	800bd4e <quorem+0x94>
 800bdb6:	3c01      	subs	r4, #1
 800bdb8:	e7c6      	b.n	800bd48 <quorem+0x8e>
 800bdba:	6812      	ldr	r2, [r2, #0]
 800bdbc:	3b04      	subs	r3, #4
 800bdbe:	2a00      	cmp	r2, #0
 800bdc0:	d1ef      	bne.n	800bda2 <quorem+0xe8>
 800bdc2:	3c01      	subs	r4, #1
 800bdc4:	e7ea      	b.n	800bd9c <quorem+0xe2>
 800bdc6:	2000      	movs	r0, #0
 800bdc8:	e7ee      	b.n	800bda8 <quorem+0xee>
 800bdca:	0000      	movs	r0, r0
 800bdcc:	0000      	movs	r0, r0
	...

0800bdd0 <_dtoa_r>:
 800bdd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bdd4:	69c7      	ldr	r7, [r0, #28]
 800bdd6:	b099      	sub	sp, #100	@ 0x64
 800bdd8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bddc:	ec55 4b10 	vmov	r4, r5, d0
 800bde0:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bde2:	9109      	str	r1, [sp, #36]	@ 0x24
 800bde4:	4683      	mov	fp, r0
 800bde6:	920e      	str	r2, [sp, #56]	@ 0x38
 800bde8:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bdea:	b97f      	cbnz	r7, 800be0c <_dtoa_r+0x3c>
 800bdec:	2010      	movs	r0, #16
 800bdee:	f000 fdfd 	bl	800c9ec <malloc>
 800bdf2:	4602      	mov	r2, r0
 800bdf4:	f8cb 001c 	str.w	r0, [fp, #28]
 800bdf8:	b920      	cbnz	r0, 800be04 <_dtoa_r+0x34>
 800bdfa:	4ba7      	ldr	r3, [pc, #668]	@ (800c098 <_dtoa_r+0x2c8>)
 800bdfc:	21ef      	movs	r1, #239	@ 0xef
 800bdfe:	48a7      	ldr	r0, [pc, #668]	@ (800c09c <_dtoa_r+0x2cc>)
 800be00:	f001 fc5a 	bl	800d6b8 <__assert_func>
 800be04:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800be08:	6007      	str	r7, [r0, #0]
 800be0a:	60c7      	str	r7, [r0, #12]
 800be0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be10:	6819      	ldr	r1, [r3, #0]
 800be12:	b159      	cbz	r1, 800be2c <_dtoa_r+0x5c>
 800be14:	685a      	ldr	r2, [r3, #4]
 800be16:	604a      	str	r2, [r1, #4]
 800be18:	2301      	movs	r3, #1
 800be1a:	4093      	lsls	r3, r2
 800be1c:	608b      	str	r3, [r1, #8]
 800be1e:	4658      	mov	r0, fp
 800be20:	f000 feda 	bl	800cbd8 <_Bfree>
 800be24:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be28:	2200      	movs	r2, #0
 800be2a:	601a      	str	r2, [r3, #0]
 800be2c:	1e2b      	subs	r3, r5, #0
 800be2e:	bfb9      	ittee	lt
 800be30:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800be34:	9303      	strlt	r3, [sp, #12]
 800be36:	2300      	movge	r3, #0
 800be38:	6033      	strge	r3, [r6, #0]
 800be3a:	9f03      	ldr	r7, [sp, #12]
 800be3c:	4b98      	ldr	r3, [pc, #608]	@ (800c0a0 <_dtoa_r+0x2d0>)
 800be3e:	bfbc      	itt	lt
 800be40:	2201      	movlt	r2, #1
 800be42:	6032      	strlt	r2, [r6, #0]
 800be44:	43bb      	bics	r3, r7
 800be46:	d112      	bne.n	800be6e <_dtoa_r+0x9e>
 800be48:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800be4a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800be4e:	6013      	str	r3, [r2, #0]
 800be50:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800be54:	4323      	orrs	r3, r4
 800be56:	f000 854d 	beq.w	800c8f4 <_dtoa_r+0xb24>
 800be5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800be5c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800c0b4 <_dtoa_r+0x2e4>
 800be60:	2b00      	cmp	r3, #0
 800be62:	f000 854f 	beq.w	800c904 <_dtoa_r+0xb34>
 800be66:	f10a 0303 	add.w	r3, sl, #3
 800be6a:	f000 bd49 	b.w	800c900 <_dtoa_r+0xb30>
 800be6e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800be72:	2200      	movs	r2, #0
 800be74:	ec51 0b17 	vmov	r0, r1, d7
 800be78:	2300      	movs	r3, #0
 800be7a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800be7e:	f7f4 fe7b 	bl	8000b78 <__aeabi_dcmpeq>
 800be82:	4680      	mov	r8, r0
 800be84:	b158      	cbz	r0, 800be9e <_dtoa_r+0xce>
 800be86:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800be88:	2301      	movs	r3, #1
 800be8a:	6013      	str	r3, [r2, #0]
 800be8c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800be8e:	b113      	cbz	r3, 800be96 <_dtoa_r+0xc6>
 800be90:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800be92:	4b84      	ldr	r3, [pc, #528]	@ (800c0a4 <_dtoa_r+0x2d4>)
 800be94:	6013      	str	r3, [r2, #0]
 800be96:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800c0b8 <_dtoa_r+0x2e8>
 800be9a:	f000 bd33 	b.w	800c904 <_dtoa_r+0xb34>
 800be9e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bea2:	aa16      	add	r2, sp, #88	@ 0x58
 800bea4:	a917      	add	r1, sp, #92	@ 0x5c
 800bea6:	4658      	mov	r0, fp
 800bea8:	f001 f980 	bl	800d1ac <__d2b>
 800beac:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800beb0:	4681      	mov	r9, r0
 800beb2:	2e00      	cmp	r6, #0
 800beb4:	d077      	beq.n	800bfa6 <_dtoa_r+0x1d6>
 800beb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800beb8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bebc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bec0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bec4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bec8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800becc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bed0:	4619      	mov	r1, r3
 800bed2:	2200      	movs	r2, #0
 800bed4:	4b74      	ldr	r3, [pc, #464]	@ (800c0a8 <_dtoa_r+0x2d8>)
 800bed6:	f7f4 fa2f 	bl	8000338 <__aeabi_dsub>
 800beda:	a369      	add	r3, pc, #420	@ (adr r3, 800c080 <_dtoa_r+0x2b0>)
 800bedc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bee0:	f7f4 fbe2 	bl	80006a8 <__aeabi_dmul>
 800bee4:	a368      	add	r3, pc, #416	@ (adr r3, 800c088 <_dtoa_r+0x2b8>)
 800bee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beea:	f7f4 fa27 	bl	800033c <__adddf3>
 800beee:	4604      	mov	r4, r0
 800bef0:	4630      	mov	r0, r6
 800bef2:	460d      	mov	r5, r1
 800bef4:	f7f4 fb6e 	bl	80005d4 <__aeabi_i2d>
 800bef8:	a365      	add	r3, pc, #404	@ (adr r3, 800c090 <_dtoa_r+0x2c0>)
 800befa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800befe:	f7f4 fbd3 	bl	80006a8 <__aeabi_dmul>
 800bf02:	4602      	mov	r2, r0
 800bf04:	460b      	mov	r3, r1
 800bf06:	4620      	mov	r0, r4
 800bf08:	4629      	mov	r1, r5
 800bf0a:	f7f4 fa17 	bl	800033c <__adddf3>
 800bf0e:	4604      	mov	r4, r0
 800bf10:	460d      	mov	r5, r1
 800bf12:	f7f4 fe79 	bl	8000c08 <__aeabi_d2iz>
 800bf16:	2200      	movs	r2, #0
 800bf18:	4607      	mov	r7, r0
 800bf1a:	2300      	movs	r3, #0
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	4629      	mov	r1, r5
 800bf20:	f7f4 fe34 	bl	8000b8c <__aeabi_dcmplt>
 800bf24:	b140      	cbz	r0, 800bf38 <_dtoa_r+0x168>
 800bf26:	4638      	mov	r0, r7
 800bf28:	f7f4 fb54 	bl	80005d4 <__aeabi_i2d>
 800bf2c:	4622      	mov	r2, r4
 800bf2e:	462b      	mov	r3, r5
 800bf30:	f7f4 fe22 	bl	8000b78 <__aeabi_dcmpeq>
 800bf34:	b900      	cbnz	r0, 800bf38 <_dtoa_r+0x168>
 800bf36:	3f01      	subs	r7, #1
 800bf38:	2f16      	cmp	r7, #22
 800bf3a:	d851      	bhi.n	800bfe0 <_dtoa_r+0x210>
 800bf3c:	4b5b      	ldr	r3, [pc, #364]	@ (800c0ac <_dtoa_r+0x2dc>)
 800bf3e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bf42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf46:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf4a:	f7f4 fe1f 	bl	8000b8c <__aeabi_dcmplt>
 800bf4e:	2800      	cmp	r0, #0
 800bf50:	d048      	beq.n	800bfe4 <_dtoa_r+0x214>
 800bf52:	3f01      	subs	r7, #1
 800bf54:	2300      	movs	r3, #0
 800bf56:	9312      	str	r3, [sp, #72]	@ 0x48
 800bf58:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bf5a:	1b9b      	subs	r3, r3, r6
 800bf5c:	1e5a      	subs	r2, r3, #1
 800bf5e:	bf44      	itt	mi
 800bf60:	f1c3 0801 	rsbmi	r8, r3, #1
 800bf64:	2300      	movmi	r3, #0
 800bf66:	9208      	str	r2, [sp, #32]
 800bf68:	bf54      	ite	pl
 800bf6a:	f04f 0800 	movpl.w	r8, #0
 800bf6e:	9308      	strmi	r3, [sp, #32]
 800bf70:	2f00      	cmp	r7, #0
 800bf72:	db39      	blt.n	800bfe8 <_dtoa_r+0x218>
 800bf74:	9b08      	ldr	r3, [sp, #32]
 800bf76:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bf78:	443b      	add	r3, r7
 800bf7a:	9308      	str	r3, [sp, #32]
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf82:	2b09      	cmp	r3, #9
 800bf84:	d864      	bhi.n	800c050 <_dtoa_r+0x280>
 800bf86:	2b05      	cmp	r3, #5
 800bf88:	bfc4      	itt	gt
 800bf8a:	3b04      	subgt	r3, #4
 800bf8c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bf8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bf90:	f1a3 0302 	sub.w	r3, r3, #2
 800bf94:	bfcc      	ite	gt
 800bf96:	2400      	movgt	r4, #0
 800bf98:	2401      	movle	r4, #1
 800bf9a:	2b03      	cmp	r3, #3
 800bf9c:	d863      	bhi.n	800c066 <_dtoa_r+0x296>
 800bf9e:	e8df f003 	tbb	[pc, r3]
 800bfa2:	372a      	.short	0x372a
 800bfa4:	5535      	.short	0x5535
 800bfa6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bfaa:	441e      	add	r6, r3
 800bfac:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bfb0:	2b20      	cmp	r3, #32
 800bfb2:	bfc1      	itttt	gt
 800bfb4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bfb8:	409f      	lslgt	r7, r3
 800bfba:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bfbe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bfc2:	bfd6      	itet	le
 800bfc4:	f1c3 0320 	rsble	r3, r3, #32
 800bfc8:	ea47 0003 	orrgt.w	r0, r7, r3
 800bfcc:	fa04 f003 	lslle.w	r0, r4, r3
 800bfd0:	f7f4 faf0 	bl	80005b4 <__aeabi_ui2d>
 800bfd4:	2201      	movs	r2, #1
 800bfd6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bfda:	3e01      	subs	r6, #1
 800bfdc:	9214      	str	r2, [sp, #80]	@ 0x50
 800bfde:	e777      	b.n	800bed0 <_dtoa_r+0x100>
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	e7b8      	b.n	800bf56 <_dtoa_r+0x186>
 800bfe4:	9012      	str	r0, [sp, #72]	@ 0x48
 800bfe6:	e7b7      	b.n	800bf58 <_dtoa_r+0x188>
 800bfe8:	427b      	negs	r3, r7
 800bfea:	930a      	str	r3, [sp, #40]	@ 0x28
 800bfec:	2300      	movs	r3, #0
 800bfee:	eba8 0807 	sub.w	r8, r8, r7
 800bff2:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bff4:	e7c4      	b.n	800bf80 <_dtoa_r+0x1b0>
 800bff6:	2300      	movs	r3, #0
 800bff8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bffa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	dc35      	bgt.n	800c06c <_dtoa_r+0x29c>
 800c000:	2301      	movs	r3, #1
 800c002:	9300      	str	r3, [sp, #0]
 800c004:	9307      	str	r3, [sp, #28]
 800c006:	461a      	mov	r2, r3
 800c008:	920e      	str	r2, [sp, #56]	@ 0x38
 800c00a:	e00b      	b.n	800c024 <_dtoa_r+0x254>
 800c00c:	2301      	movs	r3, #1
 800c00e:	e7f3      	b.n	800bff8 <_dtoa_r+0x228>
 800c010:	2300      	movs	r3, #0
 800c012:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c014:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c016:	18fb      	adds	r3, r7, r3
 800c018:	9300      	str	r3, [sp, #0]
 800c01a:	3301      	adds	r3, #1
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	9307      	str	r3, [sp, #28]
 800c020:	bfb8      	it	lt
 800c022:	2301      	movlt	r3, #1
 800c024:	f8db 001c 	ldr.w	r0, [fp, #28]
 800c028:	2100      	movs	r1, #0
 800c02a:	2204      	movs	r2, #4
 800c02c:	f102 0514 	add.w	r5, r2, #20
 800c030:	429d      	cmp	r5, r3
 800c032:	d91f      	bls.n	800c074 <_dtoa_r+0x2a4>
 800c034:	6041      	str	r1, [r0, #4]
 800c036:	4658      	mov	r0, fp
 800c038:	f000 fd8e 	bl	800cb58 <_Balloc>
 800c03c:	4682      	mov	sl, r0
 800c03e:	2800      	cmp	r0, #0
 800c040:	d13c      	bne.n	800c0bc <_dtoa_r+0x2ec>
 800c042:	4b1b      	ldr	r3, [pc, #108]	@ (800c0b0 <_dtoa_r+0x2e0>)
 800c044:	4602      	mov	r2, r0
 800c046:	f240 11af 	movw	r1, #431	@ 0x1af
 800c04a:	e6d8      	b.n	800bdfe <_dtoa_r+0x2e>
 800c04c:	2301      	movs	r3, #1
 800c04e:	e7e0      	b.n	800c012 <_dtoa_r+0x242>
 800c050:	2401      	movs	r4, #1
 800c052:	2300      	movs	r3, #0
 800c054:	9309      	str	r3, [sp, #36]	@ 0x24
 800c056:	940b      	str	r4, [sp, #44]	@ 0x2c
 800c058:	f04f 33ff 	mov.w	r3, #4294967295
 800c05c:	9300      	str	r3, [sp, #0]
 800c05e:	9307      	str	r3, [sp, #28]
 800c060:	2200      	movs	r2, #0
 800c062:	2312      	movs	r3, #18
 800c064:	e7d0      	b.n	800c008 <_dtoa_r+0x238>
 800c066:	2301      	movs	r3, #1
 800c068:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c06a:	e7f5      	b.n	800c058 <_dtoa_r+0x288>
 800c06c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c06e:	9300      	str	r3, [sp, #0]
 800c070:	9307      	str	r3, [sp, #28]
 800c072:	e7d7      	b.n	800c024 <_dtoa_r+0x254>
 800c074:	3101      	adds	r1, #1
 800c076:	0052      	lsls	r2, r2, #1
 800c078:	e7d8      	b.n	800c02c <_dtoa_r+0x25c>
 800c07a:	bf00      	nop
 800c07c:	f3af 8000 	nop.w
 800c080:	636f4361 	.word	0x636f4361
 800c084:	3fd287a7 	.word	0x3fd287a7
 800c088:	8b60c8b3 	.word	0x8b60c8b3
 800c08c:	3fc68a28 	.word	0x3fc68a28
 800c090:	509f79fb 	.word	0x509f79fb
 800c094:	3fd34413 	.word	0x3fd34413
 800c098:	0800f163 	.word	0x0800f163
 800c09c:	0800f17a 	.word	0x0800f17a
 800c0a0:	7ff00000 	.word	0x7ff00000
 800c0a4:	0800f133 	.word	0x0800f133
 800c0a8:	3ff80000 	.word	0x3ff80000
 800c0ac:	0800f270 	.word	0x0800f270
 800c0b0:	0800f1d2 	.word	0x0800f1d2
 800c0b4:	0800f15f 	.word	0x0800f15f
 800c0b8:	0800f132 	.word	0x0800f132
 800c0bc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800c0c0:	6018      	str	r0, [r3, #0]
 800c0c2:	9b07      	ldr	r3, [sp, #28]
 800c0c4:	2b0e      	cmp	r3, #14
 800c0c6:	f200 80a4 	bhi.w	800c212 <_dtoa_r+0x442>
 800c0ca:	2c00      	cmp	r4, #0
 800c0cc:	f000 80a1 	beq.w	800c212 <_dtoa_r+0x442>
 800c0d0:	2f00      	cmp	r7, #0
 800c0d2:	dd33      	ble.n	800c13c <_dtoa_r+0x36c>
 800c0d4:	4bad      	ldr	r3, [pc, #692]	@ (800c38c <_dtoa_r+0x5bc>)
 800c0d6:	f007 020f 	and.w	r2, r7, #15
 800c0da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0de:	ed93 7b00 	vldr	d7, [r3]
 800c0e2:	05f8      	lsls	r0, r7, #23
 800c0e4:	ed8d 7b04 	vstr	d7, [sp, #16]
 800c0e8:	ea4f 1427 	mov.w	r4, r7, asr #4
 800c0ec:	d516      	bpl.n	800c11c <_dtoa_r+0x34c>
 800c0ee:	4ba8      	ldr	r3, [pc, #672]	@ (800c390 <_dtoa_r+0x5c0>)
 800c0f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c0f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800c0f8:	f7f4 fc00 	bl	80008fc <__aeabi_ddiv>
 800c0fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c100:	f004 040f 	and.w	r4, r4, #15
 800c104:	2603      	movs	r6, #3
 800c106:	4da2      	ldr	r5, [pc, #648]	@ (800c390 <_dtoa_r+0x5c0>)
 800c108:	b954      	cbnz	r4, 800c120 <_dtoa_r+0x350>
 800c10a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c10e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c112:	f7f4 fbf3 	bl	80008fc <__aeabi_ddiv>
 800c116:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c11a:	e028      	b.n	800c16e <_dtoa_r+0x39e>
 800c11c:	2602      	movs	r6, #2
 800c11e:	e7f2      	b.n	800c106 <_dtoa_r+0x336>
 800c120:	07e1      	lsls	r1, r4, #31
 800c122:	d508      	bpl.n	800c136 <_dtoa_r+0x366>
 800c124:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c128:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c12c:	f7f4 fabc 	bl	80006a8 <__aeabi_dmul>
 800c130:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c134:	3601      	adds	r6, #1
 800c136:	1064      	asrs	r4, r4, #1
 800c138:	3508      	adds	r5, #8
 800c13a:	e7e5      	b.n	800c108 <_dtoa_r+0x338>
 800c13c:	f000 80d2 	beq.w	800c2e4 <_dtoa_r+0x514>
 800c140:	427c      	negs	r4, r7
 800c142:	4b92      	ldr	r3, [pc, #584]	@ (800c38c <_dtoa_r+0x5bc>)
 800c144:	4d92      	ldr	r5, [pc, #584]	@ (800c390 <_dtoa_r+0x5c0>)
 800c146:	f004 020f 	and.w	r2, r4, #15
 800c14a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c152:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800c156:	f7f4 faa7 	bl	80006a8 <__aeabi_dmul>
 800c15a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c15e:	1124      	asrs	r4, r4, #4
 800c160:	2300      	movs	r3, #0
 800c162:	2602      	movs	r6, #2
 800c164:	2c00      	cmp	r4, #0
 800c166:	f040 80b2 	bne.w	800c2ce <_dtoa_r+0x4fe>
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d1d3      	bne.n	800c116 <_dtoa_r+0x346>
 800c16e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c170:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c174:	2b00      	cmp	r3, #0
 800c176:	f000 80b7 	beq.w	800c2e8 <_dtoa_r+0x518>
 800c17a:	4b86      	ldr	r3, [pc, #536]	@ (800c394 <_dtoa_r+0x5c4>)
 800c17c:	2200      	movs	r2, #0
 800c17e:	4620      	mov	r0, r4
 800c180:	4629      	mov	r1, r5
 800c182:	f7f4 fd03 	bl	8000b8c <__aeabi_dcmplt>
 800c186:	2800      	cmp	r0, #0
 800c188:	f000 80ae 	beq.w	800c2e8 <_dtoa_r+0x518>
 800c18c:	9b07      	ldr	r3, [sp, #28]
 800c18e:	2b00      	cmp	r3, #0
 800c190:	f000 80aa 	beq.w	800c2e8 <_dtoa_r+0x518>
 800c194:	9b00      	ldr	r3, [sp, #0]
 800c196:	2b00      	cmp	r3, #0
 800c198:	dd37      	ble.n	800c20a <_dtoa_r+0x43a>
 800c19a:	1e7b      	subs	r3, r7, #1
 800c19c:	9304      	str	r3, [sp, #16]
 800c19e:	4620      	mov	r0, r4
 800c1a0:	4b7d      	ldr	r3, [pc, #500]	@ (800c398 <_dtoa_r+0x5c8>)
 800c1a2:	2200      	movs	r2, #0
 800c1a4:	4629      	mov	r1, r5
 800c1a6:	f7f4 fa7f 	bl	80006a8 <__aeabi_dmul>
 800c1aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1ae:	9c00      	ldr	r4, [sp, #0]
 800c1b0:	3601      	adds	r6, #1
 800c1b2:	4630      	mov	r0, r6
 800c1b4:	f7f4 fa0e 	bl	80005d4 <__aeabi_i2d>
 800c1b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c1bc:	f7f4 fa74 	bl	80006a8 <__aeabi_dmul>
 800c1c0:	4b76      	ldr	r3, [pc, #472]	@ (800c39c <_dtoa_r+0x5cc>)
 800c1c2:	2200      	movs	r2, #0
 800c1c4:	f7f4 f8ba 	bl	800033c <__adddf3>
 800c1c8:	4605      	mov	r5, r0
 800c1ca:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800c1ce:	2c00      	cmp	r4, #0
 800c1d0:	f040 808d 	bne.w	800c2ee <_dtoa_r+0x51e>
 800c1d4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1d8:	4b71      	ldr	r3, [pc, #452]	@ (800c3a0 <_dtoa_r+0x5d0>)
 800c1da:	2200      	movs	r2, #0
 800c1dc:	f7f4 f8ac 	bl	8000338 <__aeabi_dsub>
 800c1e0:	4602      	mov	r2, r0
 800c1e2:	460b      	mov	r3, r1
 800c1e4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c1e8:	462a      	mov	r2, r5
 800c1ea:	4633      	mov	r3, r6
 800c1ec:	f7f4 fcec 	bl	8000bc8 <__aeabi_dcmpgt>
 800c1f0:	2800      	cmp	r0, #0
 800c1f2:	f040 828b 	bne.w	800c70c <_dtoa_r+0x93c>
 800c1f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1fa:	462a      	mov	r2, r5
 800c1fc:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c200:	f7f4 fcc4 	bl	8000b8c <__aeabi_dcmplt>
 800c204:	2800      	cmp	r0, #0
 800c206:	f040 8128 	bne.w	800c45a <_dtoa_r+0x68a>
 800c20a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c20e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c212:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c214:	2b00      	cmp	r3, #0
 800c216:	f2c0 815a 	blt.w	800c4ce <_dtoa_r+0x6fe>
 800c21a:	2f0e      	cmp	r7, #14
 800c21c:	f300 8157 	bgt.w	800c4ce <_dtoa_r+0x6fe>
 800c220:	4b5a      	ldr	r3, [pc, #360]	@ (800c38c <_dtoa_r+0x5bc>)
 800c222:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c226:	ed93 7b00 	vldr	d7, [r3]
 800c22a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	ed8d 7b00 	vstr	d7, [sp]
 800c232:	da03      	bge.n	800c23c <_dtoa_r+0x46c>
 800c234:	9b07      	ldr	r3, [sp, #28]
 800c236:	2b00      	cmp	r3, #0
 800c238:	f340 8101 	ble.w	800c43e <_dtoa_r+0x66e>
 800c23c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c240:	4656      	mov	r6, sl
 800c242:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c246:	4620      	mov	r0, r4
 800c248:	4629      	mov	r1, r5
 800c24a:	f7f4 fb57 	bl	80008fc <__aeabi_ddiv>
 800c24e:	f7f4 fcdb 	bl	8000c08 <__aeabi_d2iz>
 800c252:	4680      	mov	r8, r0
 800c254:	f7f4 f9be 	bl	80005d4 <__aeabi_i2d>
 800c258:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c25c:	f7f4 fa24 	bl	80006a8 <__aeabi_dmul>
 800c260:	4602      	mov	r2, r0
 800c262:	460b      	mov	r3, r1
 800c264:	4620      	mov	r0, r4
 800c266:	4629      	mov	r1, r5
 800c268:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c26c:	f7f4 f864 	bl	8000338 <__aeabi_dsub>
 800c270:	f806 4b01 	strb.w	r4, [r6], #1
 800c274:	9d07      	ldr	r5, [sp, #28]
 800c276:	eba6 040a 	sub.w	r4, r6, sl
 800c27a:	42a5      	cmp	r5, r4
 800c27c:	4602      	mov	r2, r0
 800c27e:	460b      	mov	r3, r1
 800c280:	f040 8117 	bne.w	800c4b2 <_dtoa_r+0x6e2>
 800c284:	f7f4 f85a 	bl	800033c <__adddf3>
 800c288:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c28c:	4604      	mov	r4, r0
 800c28e:	460d      	mov	r5, r1
 800c290:	f7f4 fc9a 	bl	8000bc8 <__aeabi_dcmpgt>
 800c294:	2800      	cmp	r0, #0
 800c296:	f040 80f9 	bne.w	800c48c <_dtoa_r+0x6bc>
 800c29a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c29e:	4620      	mov	r0, r4
 800c2a0:	4629      	mov	r1, r5
 800c2a2:	f7f4 fc69 	bl	8000b78 <__aeabi_dcmpeq>
 800c2a6:	b118      	cbz	r0, 800c2b0 <_dtoa_r+0x4e0>
 800c2a8:	f018 0f01 	tst.w	r8, #1
 800c2ac:	f040 80ee 	bne.w	800c48c <_dtoa_r+0x6bc>
 800c2b0:	4649      	mov	r1, r9
 800c2b2:	4658      	mov	r0, fp
 800c2b4:	f000 fc90 	bl	800cbd8 <_Bfree>
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	7033      	strb	r3, [r6, #0]
 800c2bc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c2be:	3701      	adds	r7, #1
 800c2c0:	601f      	str	r7, [r3, #0]
 800c2c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	f000 831d 	beq.w	800c904 <_dtoa_r+0xb34>
 800c2ca:	601e      	str	r6, [r3, #0]
 800c2cc:	e31a      	b.n	800c904 <_dtoa_r+0xb34>
 800c2ce:	07e2      	lsls	r2, r4, #31
 800c2d0:	d505      	bpl.n	800c2de <_dtoa_r+0x50e>
 800c2d2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c2d6:	f7f4 f9e7 	bl	80006a8 <__aeabi_dmul>
 800c2da:	3601      	adds	r6, #1
 800c2dc:	2301      	movs	r3, #1
 800c2de:	1064      	asrs	r4, r4, #1
 800c2e0:	3508      	adds	r5, #8
 800c2e2:	e73f      	b.n	800c164 <_dtoa_r+0x394>
 800c2e4:	2602      	movs	r6, #2
 800c2e6:	e742      	b.n	800c16e <_dtoa_r+0x39e>
 800c2e8:	9c07      	ldr	r4, [sp, #28]
 800c2ea:	9704      	str	r7, [sp, #16]
 800c2ec:	e761      	b.n	800c1b2 <_dtoa_r+0x3e2>
 800c2ee:	4b27      	ldr	r3, [pc, #156]	@ (800c38c <_dtoa_r+0x5bc>)
 800c2f0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c2f2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c2f6:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c2fa:	4454      	add	r4, sl
 800c2fc:	2900      	cmp	r1, #0
 800c2fe:	d053      	beq.n	800c3a8 <_dtoa_r+0x5d8>
 800c300:	4928      	ldr	r1, [pc, #160]	@ (800c3a4 <_dtoa_r+0x5d4>)
 800c302:	2000      	movs	r0, #0
 800c304:	f7f4 fafa 	bl	80008fc <__aeabi_ddiv>
 800c308:	4633      	mov	r3, r6
 800c30a:	462a      	mov	r2, r5
 800c30c:	f7f4 f814 	bl	8000338 <__aeabi_dsub>
 800c310:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c314:	4656      	mov	r6, sl
 800c316:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c31a:	f7f4 fc75 	bl	8000c08 <__aeabi_d2iz>
 800c31e:	4605      	mov	r5, r0
 800c320:	f7f4 f958 	bl	80005d4 <__aeabi_i2d>
 800c324:	4602      	mov	r2, r0
 800c326:	460b      	mov	r3, r1
 800c328:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c32c:	f7f4 f804 	bl	8000338 <__aeabi_dsub>
 800c330:	3530      	adds	r5, #48	@ 0x30
 800c332:	4602      	mov	r2, r0
 800c334:	460b      	mov	r3, r1
 800c336:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c33a:	f806 5b01 	strb.w	r5, [r6], #1
 800c33e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c342:	f7f4 fc23 	bl	8000b8c <__aeabi_dcmplt>
 800c346:	2800      	cmp	r0, #0
 800c348:	d171      	bne.n	800c42e <_dtoa_r+0x65e>
 800c34a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c34e:	4911      	ldr	r1, [pc, #68]	@ (800c394 <_dtoa_r+0x5c4>)
 800c350:	2000      	movs	r0, #0
 800c352:	f7f3 fff1 	bl	8000338 <__aeabi_dsub>
 800c356:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c35a:	f7f4 fc17 	bl	8000b8c <__aeabi_dcmplt>
 800c35e:	2800      	cmp	r0, #0
 800c360:	f040 8095 	bne.w	800c48e <_dtoa_r+0x6be>
 800c364:	42a6      	cmp	r6, r4
 800c366:	f43f af50 	beq.w	800c20a <_dtoa_r+0x43a>
 800c36a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c36e:	4b0a      	ldr	r3, [pc, #40]	@ (800c398 <_dtoa_r+0x5c8>)
 800c370:	2200      	movs	r2, #0
 800c372:	f7f4 f999 	bl	80006a8 <__aeabi_dmul>
 800c376:	4b08      	ldr	r3, [pc, #32]	@ (800c398 <_dtoa_r+0x5c8>)
 800c378:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c37c:	2200      	movs	r2, #0
 800c37e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c382:	f7f4 f991 	bl	80006a8 <__aeabi_dmul>
 800c386:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c38a:	e7c4      	b.n	800c316 <_dtoa_r+0x546>
 800c38c:	0800f270 	.word	0x0800f270
 800c390:	0800f248 	.word	0x0800f248
 800c394:	3ff00000 	.word	0x3ff00000
 800c398:	40240000 	.word	0x40240000
 800c39c:	401c0000 	.word	0x401c0000
 800c3a0:	40140000 	.word	0x40140000
 800c3a4:	3fe00000 	.word	0x3fe00000
 800c3a8:	4631      	mov	r1, r6
 800c3aa:	4628      	mov	r0, r5
 800c3ac:	f7f4 f97c 	bl	80006a8 <__aeabi_dmul>
 800c3b0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c3b4:	9415      	str	r4, [sp, #84]	@ 0x54
 800c3b6:	4656      	mov	r6, sl
 800c3b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3bc:	f7f4 fc24 	bl	8000c08 <__aeabi_d2iz>
 800c3c0:	4605      	mov	r5, r0
 800c3c2:	f7f4 f907 	bl	80005d4 <__aeabi_i2d>
 800c3c6:	4602      	mov	r2, r0
 800c3c8:	460b      	mov	r3, r1
 800c3ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3ce:	f7f3 ffb3 	bl	8000338 <__aeabi_dsub>
 800c3d2:	3530      	adds	r5, #48	@ 0x30
 800c3d4:	f806 5b01 	strb.w	r5, [r6], #1
 800c3d8:	4602      	mov	r2, r0
 800c3da:	460b      	mov	r3, r1
 800c3dc:	42a6      	cmp	r6, r4
 800c3de:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c3e2:	f04f 0200 	mov.w	r2, #0
 800c3e6:	d124      	bne.n	800c432 <_dtoa_r+0x662>
 800c3e8:	4bac      	ldr	r3, [pc, #688]	@ (800c69c <_dtoa_r+0x8cc>)
 800c3ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c3ee:	f7f3 ffa5 	bl	800033c <__adddf3>
 800c3f2:	4602      	mov	r2, r0
 800c3f4:	460b      	mov	r3, r1
 800c3f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c3fa:	f7f4 fbe5 	bl	8000bc8 <__aeabi_dcmpgt>
 800c3fe:	2800      	cmp	r0, #0
 800c400:	d145      	bne.n	800c48e <_dtoa_r+0x6be>
 800c402:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c406:	49a5      	ldr	r1, [pc, #660]	@ (800c69c <_dtoa_r+0x8cc>)
 800c408:	2000      	movs	r0, #0
 800c40a:	f7f3 ff95 	bl	8000338 <__aeabi_dsub>
 800c40e:	4602      	mov	r2, r0
 800c410:	460b      	mov	r3, r1
 800c412:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c416:	f7f4 fbb9 	bl	8000b8c <__aeabi_dcmplt>
 800c41a:	2800      	cmp	r0, #0
 800c41c:	f43f aef5 	beq.w	800c20a <_dtoa_r+0x43a>
 800c420:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c422:	1e73      	subs	r3, r6, #1
 800c424:	9315      	str	r3, [sp, #84]	@ 0x54
 800c426:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c42a:	2b30      	cmp	r3, #48	@ 0x30
 800c42c:	d0f8      	beq.n	800c420 <_dtoa_r+0x650>
 800c42e:	9f04      	ldr	r7, [sp, #16]
 800c430:	e73e      	b.n	800c2b0 <_dtoa_r+0x4e0>
 800c432:	4b9b      	ldr	r3, [pc, #620]	@ (800c6a0 <_dtoa_r+0x8d0>)
 800c434:	f7f4 f938 	bl	80006a8 <__aeabi_dmul>
 800c438:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c43c:	e7bc      	b.n	800c3b8 <_dtoa_r+0x5e8>
 800c43e:	d10c      	bne.n	800c45a <_dtoa_r+0x68a>
 800c440:	4b98      	ldr	r3, [pc, #608]	@ (800c6a4 <_dtoa_r+0x8d4>)
 800c442:	2200      	movs	r2, #0
 800c444:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c448:	f7f4 f92e 	bl	80006a8 <__aeabi_dmul>
 800c44c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c450:	f7f4 fbb0 	bl	8000bb4 <__aeabi_dcmpge>
 800c454:	2800      	cmp	r0, #0
 800c456:	f000 8157 	beq.w	800c708 <_dtoa_r+0x938>
 800c45a:	2400      	movs	r4, #0
 800c45c:	4625      	mov	r5, r4
 800c45e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c460:	43db      	mvns	r3, r3
 800c462:	9304      	str	r3, [sp, #16]
 800c464:	4656      	mov	r6, sl
 800c466:	2700      	movs	r7, #0
 800c468:	4621      	mov	r1, r4
 800c46a:	4658      	mov	r0, fp
 800c46c:	f000 fbb4 	bl	800cbd8 <_Bfree>
 800c470:	2d00      	cmp	r5, #0
 800c472:	d0dc      	beq.n	800c42e <_dtoa_r+0x65e>
 800c474:	b12f      	cbz	r7, 800c482 <_dtoa_r+0x6b2>
 800c476:	42af      	cmp	r7, r5
 800c478:	d003      	beq.n	800c482 <_dtoa_r+0x6b2>
 800c47a:	4639      	mov	r1, r7
 800c47c:	4658      	mov	r0, fp
 800c47e:	f000 fbab 	bl	800cbd8 <_Bfree>
 800c482:	4629      	mov	r1, r5
 800c484:	4658      	mov	r0, fp
 800c486:	f000 fba7 	bl	800cbd8 <_Bfree>
 800c48a:	e7d0      	b.n	800c42e <_dtoa_r+0x65e>
 800c48c:	9704      	str	r7, [sp, #16]
 800c48e:	4633      	mov	r3, r6
 800c490:	461e      	mov	r6, r3
 800c492:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c496:	2a39      	cmp	r2, #57	@ 0x39
 800c498:	d107      	bne.n	800c4aa <_dtoa_r+0x6da>
 800c49a:	459a      	cmp	sl, r3
 800c49c:	d1f8      	bne.n	800c490 <_dtoa_r+0x6c0>
 800c49e:	9a04      	ldr	r2, [sp, #16]
 800c4a0:	3201      	adds	r2, #1
 800c4a2:	9204      	str	r2, [sp, #16]
 800c4a4:	2230      	movs	r2, #48	@ 0x30
 800c4a6:	f88a 2000 	strb.w	r2, [sl]
 800c4aa:	781a      	ldrb	r2, [r3, #0]
 800c4ac:	3201      	adds	r2, #1
 800c4ae:	701a      	strb	r2, [r3, #0]
 800c4b0:	e7bd      	b.n	800c42e <_dtoa_r+0x65e>
 800c4b2:	4b7b      	ldr	r3, [pc, #492]	@ (800c6a0 <_dtoa_r+0x8d0>)
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	f7f4 f8f7 	bl	80006a8 <__aeabi_dmul>
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	2300      	movs	r3, #0
 800c4be:	4604      	mov	r4, r0
 800c4c0:	460d      	mov	r5, r1
 800c4c2:	f7f4 fb59 	bl	8000b78 <__aeabi_dcmpeq>
 800c4c6:	2800      	cmp	r0, #0
 800c4c8:	f43f aebb 	beq.w	800c242 <_dtoa_r+0x472>
 800c4cc:	e6f0      	b.n	800c2b0 <_dtoa_r+0x4e0>
 800c4ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c4d0:	2a00      	cmp	r2, #0
 800c4d2:	f000 80db 	beq.w	800c68c <_dtoa_r+0x8bc>
 800c4d6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c4d8:	2a01      	cmp	r2, #1
 800c4da:	f300 80bf 	bgt.w	800c65c <_dtoa_r+0x88c>
 800c4de:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c4e0:	2a00      	cmp	r2, #0
 800c4e2:	f000 80b7 	beq.w	800c654 <_dtoa_r+0x884>
 800c4e6:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c4ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c4ec:	4646      	mov	r6, r8
 800c4ee:	9a08      	ldr	r2, [sp, #32]
 800c4f0:	2101      	movs	r1, #1
 800c4f2:	441a      	add	r2, r3
 800c4f4:	4658      	mov	r0, fp
 800c4f6:	4498      	add	r8, r3
 800c4f8:	9208      	str	r2, [sp, #32]
 800c4fa:	f000 fc21 	bl	800cd40 <__i2b>
 800c4fe:	4605      	mov	r5, r0
 800c500:	b15e      	cbz	r6, 800c51a <_dtoa_r+0x74a>
 800c502:	9b08      	ldr	r3, [sp, #32]
 800c504:	2b00      	cmp	r3, #0
 800c506:	dd08      	ble.n	800c51a <_dtoa_r+0x74a>
 800c508:	42b3      	cmp	r3, r6
 800c50a:	9a08      	ldr	r2, [sp, #32]
 800c50c:	bfa8      	it	ge
 800c50e:	4633      	movge	r3, r6
 800c510:	eba8 0803 	sub.w	r8, r8, r3
 800c514:	1af6      	subs	r6, r6, r3
 800c516:	1ad3      	subs	r3, r2, r3
 800c518:	9308      	str	r3, [sp, #32]
 800c51a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c51c:	b1f3      	cbz	r3, 800c55c <_dtoa_r+0x78c>
 800c51e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c520:	2b00      	cmp	r3, #0
 800c522:	f000 80b7 	beq.w	800c694 <_dtoa_r+0x8c4>
 800c526:	b18c      	cbz	r4, 800c54c <_dtoa_r+0x77c>
 800c528:	4629      	mov	r1, r5
 800c52a:	4622      	mov	r2, r4
 800c52c:	4658      	mov	r0, fp
 800c52e:	f000 fcc7 	bl	800cec0 <__pow5mult>
 800c532:	464a      	mov	r2, r9
 800c534:	4601      	mov	r1, r0
 800c536:	4605      	mov	r5, r0
 800c538:	4658      	mov	r0, fp
 800c53a:	f000 fc17 	bl	800cd6c <__multiply>
 800c53e:	4649      	mov	r1, r9
 800c540:	9004      	str	r0, [sp, #16]
 800c542:	4658      	mov	r0, fp
 800c544:	f000 fb48 	bl	800cbd8 <_Bfree>
 800c548:	9b04      	ldr	r3, [sp, #16]
 800c54a:	4699      	mov	r9, r3
 800c54c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c54e:	1b1a      	subs	r2, r3, r4
 800c550:	d004      	beq.n	800c55c <_dtoa_r+0x78c>
 800c552:	4649      	mov	r1, r9
 800c554:	4658      	mov	r0, fp
 800c556:	f000 fcb3 	bl	800cec0 <__pow5mult>
 800c55a:	4681      	mov	r9, r0
 800c55c:	2101      	movs	r1, #1
 800c55e:	4658      	mov	r0, fp
 800c560:	f000 fbee 	bl	800cd40 <__i2b>
 800c564:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c566:	4604      	mov	r4, r0
 800c568:	2b00      	cmp	r3, #0
 800c56a:	f000 81cf 	beq.w	800c90c <_dtoa_r+0xb3c>
 800c56e:	461a      	mov	r2, r3
 800c570:	4601      	mov	r1, r0
 800c572:	4658      	mov	r0, fp
 800c574:	f000 fca4 	bl	800cec0 <__pow5mult>
 800c578:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c57a:	2b01      	cmp	r3, #1
 800c57c:	4604      	mov	r4, r0
 800c57e:	f300 8095 	bgt.w	800c6ac <_dtoa_r+0x8dc>
 800c582:	9b02      	ldr	r3, [sp, #8]
 800c584:	2b00      	cmp	r3, #0
 800c586:	f040 8087 	bne.w	800c698 <_dtoa_r+0x8c8>
 800c58a:	9b03      	ldr	r3, [sp, #12]
 800c58c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c590:	2b00      	cmp	r3, #0
 800c592:	f040 8089 	bne.w	800c6a8 <_dtoa_r+0x8d8>
 800c596:	9b03      	ldr	r3, [sp, #12]
 800c598:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c59c:	0d1b      	lsrs	r3, r3, #20
 800c59e:	051b      	lsls	r3, r3, #20
 800c5a0:	b12b      	cbz	r3, 800c5ae <_dtoa_r+0x7de>
 800c5a2:	9b08      	ldr	r3, [sp, #32]
 800c5a4:	3301      	adds	r3, #1
 800c5a6:	9308      	str	r3, [sp, #32]
 800c5a8:	f108 0801 	add.w	r8, r8, #1
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c5b0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	f000 81b0 	beq.w	800c918 <_dtoa_r+0xb48>
 800c5b8:	6923      	ldr	r3, [r4, #16]
 800c5ba:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c5be:	6918      	ldr	r0, [r3, #16]
 800c5c0:	f000 fb72 	bl	800cca8 <__hi0bits>
 800c5c4:	f1c0 0020 	rsb	r0, r0, #32
 800c5c8:	9b08      	ldr	r3, [sp, #32]
 800c5ca:	4418      	add	r0, r3
 800c5cc:	f010 001f 	ands.w	r0, r0, #31
 800c5d0:	d077      	beq.n	800c6c2 <_dtoa_r+0x8f2>
 800c5d2:	f1c0 0320 	rsb	r3, r0, #32
 800c5d6:	2b04      	cmp	r3, #4
 800c5d8:	dd6b      	ble.n	800c6b2 <_dtoa_r+0x8e2>
 800c5da:	9b08      	ldr	r3, [sp, #32]
 800c5dc:	f1c0 001c 	rsb	r0, r0, #28
 800c5e0:	4403      	add	r3, r0
 800c5e2:	4480      	add	r8, r0
 800c5e4:	4406      	add	r6, r0
 800c5e6:	9308      	str	r3, [sp, #32]
 800c5e8:	f1b8 0f00 	cmp.w	r8, #0
 800c5ec:	dd05      	ble.n	800c5fa <_dtoa_r+0x82a>
 800c5ee:	4649      	mov	r1, r9
 800c5f0:	4642      	mov	r2, r8
 800c5f2:	4658      	mov	r0, fp
 800c5f4:	f000 fcbe 	bl	800cf74 <__lshift>
 800c5f8:	4681      	mov	r9, r0
 800c5fa:	9b08      	ldr	r3, [sp, #32]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	dd05      	ble.n	800c60c <_dtoa_r+0x83c>
 800c600:	4621      	mov	r1, r4
 800c602:	461a      	mov	r2, r3
 800c604:	4658      	mov	r0, fp
 800c606:	f000 fcb5 	bl	800cf74 <__lshift>
 800c60a:	4604      	mov	r4, r0
 800c60c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d059      	beq.n	800c6c6 <_dtoa_r+0x8f6>
 800c612:	4621      	mov	r1, r4
 800c614:	4648      	mov	r0, r9
 800c616:	f000 fd19 	bl	800d04c <__mcmp>
 800c61a:	2800      	cmp	r0, #0
 800c61c:	da53      	bge.n	800c6c6 <_dtoa_r+0x8f6>
 800c61e:	1e7b      	subs	r3, r7, #1
 800c620:	9304      	str	r3, [sp, #16]
 800c622:	4649      	mov	r1, r9
 800c624:	2300      	movs	r3, #0
 800c626:	220a      	movs	r2, #10
 800c628:	4658      	mov	r0, fp
 800c62a:	f000 faf7 	bl	800cc1c <__multadd>
 800c62e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c630:	4681      	mov	r9, r0
 800c632:	2b00      	cmp	r3, #0
 800c634:	f000 8172 	beq.w	800c91c <_dtoa_r+0xb4c>
 800c638:	2300      	movs	r3, #0
 800c63a:	4629      	mov	r1, r5
 800c63c:	220a      	movs	r2, #10
 800c63e:	4658      	mov	r0, fp
 800c640:	f000 faec 	bl	800cc1c <__multadd>
 800c644:	9b00      	ldr	r3, [sp, #0]
 800c646:	2b00      	cmp	r3, #0
 800c648:	4605      	mov	r5, r0
 800c64a:	dc67      	bgt.n	800c71c <_dtoa_r+0x94c>
 800c64c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c64e:	2b02      	cmp	r3, #2
 800c650:	dc41      	bgt.n	800c6d6 <_dtoa_r+0x906>
 800c652:	e063      	b.n	800c71c <_dtoa_r+0x94c>
 800c654:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c656:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c65a:	e746      	b.n	800c4ea <_dtoa_r+0x71a>
 800c65c:	9b07      	ldr	r3, [sp, #28]
 800c65e:	1e5c      	subs	r4, r3, #1
 800c660:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c662:	42a3      	cmp	r3, r4
 800c664:	bfbf      	itttt	lt
 800c666:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c668:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c66a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c66c:	1ae3      	sublt	r3, r4, r3
 800c66e:	bfb4      	ite	lt
 800c670:	18d2      	addlt	r2, r2, r3
 800c672:	1b1c      	subge	r4, r3, r4
 800c674:	9b07      	ldr	r3, [sp, #28]
 800c676:	bfbc      	itt	lt
 800c678:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c67a:	2400      	movlt	r4, #0
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	bfb5      	itete	lt
 800c680:	eba8 0603 	sublt.w	r6, r8, r3
 800c684:	9b07      	ldrge	r3, [sp, #28]
 800c686:	2300      	movlt	r3, #0
 800c688:	4646      	movge	r6, r8
 800c68a:	e730      	b.n	800c4ee <_dtoa_r+0x71e>
 800c68c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c68e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c690:	4646      	mov	r6, r8
 800c692:	e735      	b.n	800c500 <_dtoa_r+0x730>
 800c694:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c696:	e75c      	b.n	800c552 <_dtoa_r+0x782>
 800c698:	2300      	movs	r3, #0
 800c69a:	e788      	b.n	800c5ae <_dtoa_r+0x7de>
 800c69c:	3fe00000 	.word	0x3fe00000
 800c6a0:	40240000 	.word	0x40240000
 800c6a4:	40140000 	.word	0x40140000
 800c6a8:	9b02      	ldr	r3, [sp, #8]
 800c6aa:	e780      	b.n	800c5ae <_dtoa_r+0x7de>
 800c6ac:	2300      	movs	r3, #0
 800c6ae:	930a      	str	r3, [sp, #40]	@ 0x28
 800c6b0:	e782      	b.n	800c5b8 <_dtoa_r+0x7e8>
 800c6b2:	d099      	beq.n	800c5e8 <_dtoa_r+0x818>
 800c6b4:	9a08      	ldr	r2, [sp, #32]
 800c6b6:	331c      	adds	r3, #28
 800c6b8:	441a      	add	r2, r3
 800c6ba:	4498      	add	r8, r3
 800c6bc:	441e      	add	r6, r3
 800c6be:	9208      	str	r2, [sp, #32]
 800c6c0:	e792      	b.n	800c5e8 <_dtoa_r+0x818>
 800c6c2:	4603      	mov	r3, r0
 800c6c4:	e7f6      	b.n	800c6b4 <_dtoa_r+0x8e4>
 800c6c6:	9b07      	ldr	r3, [sp, #28]
 800c6c8:	9704      	str	r7, [sp, #16]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	dc20      	bgt.n	800c710 <_dtoa_r+0x940>
 800c6ce:	9300      	str	r3, [sp, #0]
 800c6d0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c6d2:	2b02      	cmp	r3, #2
 800c6d4:	dd1e      	ble.n	800c714 <_dtoa_r+0x944>
 800c6d6:	9b00      	ldr	r3, [sp, #0]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	f47f aec0 	bne.w	800c45e <_dtoa_r+0x68e>
 800c6de:	4621      	mov	r1, r4
 800c6e0:	2205      	movs	r2, #5
 800c6e2:	4658      	mov	r0, fp
 800c6e4:	f000 fa9a 	bl	800cc1c <__multadd>
 800c6e8:	4601      	mov	r1, r0
 800c6ea:	4604      	mov	r4, r0
 800c6ec:	4648      	mov	r0, r9
 800c6ee:	f000 fcad 	bl	800d04c <__mcmp>
 800c6f2:	2800      	cmp	r0, #0
 800c6f4:	f77f aeb3 	ble.w	800c45e <_dtoa_r+0x68e>
 800c6f8:	4656      	mov	r6, sl
 800c6fa:	2331      	movs	r3, #49	@ 0x31
 800c6fc:	f806 3b01 	strb.w	r3, [r6], #1
 800c700:	9b04      	ldr	r3, [sp, #16]
 800c702:	3301      	adds	r3, #1
 800c704:	9304      	str	r3, [sp, #16]
 800c706:	e6ae      	b.n	800c466 <_dtoa_r+0x696>
 800c708:	9c07      	ldr	r4, [sp, #28]
 800c70a:	9704      	str	r7, [sp, #16]
 800c70c:	4625      	mov	r5, r4
 800c70e:	e7f3      	b.n	800c6f8 <_dtoa_r+0x928>
 800c710:	9b07      	ldr	r3, [sp, #28]
 800c712:	9300      	str	r3, [sp, #0]
 800c714:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c716:	2b00      	cmp	r3, #0
 800c718:	f000 8104 	beq.w	800c924 <_dtoa_r+0xb54>
 800c71c:	2e00      	cmp	r6, #0
 800c71e:	dd05      	ble.n	800c72c <_dtoa_r+0x95c>
 800c720:	4629      	mov	r1, r5
 800c722:	4632      	mov	r2, r6
 800c724:	4658      	mov	r0, fp
 800c726:	f000 fc25 	bl	800cf74 <__lshift>
 800c72a:	4605      	mov	r5, r0
 800c72c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c72e:	2b00      	cmp	r3, #0
 800c730:	d05a      	beq.n	800c7e8 <_dtoa_r+0xa18>
 800c732:	6869      	ldr	r1, [r5, #4]
 800c734:	4658      	mov	r0, fp
 800c736:	f000 fa0f 	bl	800cb58 <_Balloc>
 800c73a:	4606      	mov	r6, r0
 800c73c:	b928      	cbnz	r0, 800c74a <_dtoa_r+0x97a>
 800c73e:	4b84      	ldr	r3, [pc, #528]	@ (800c950 <_dtoa_r+0xb80>)
 800c740:	4602      	mov	r2, r0
 800c742:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c746:	f7ff bb5a 	b.w	800bdfe <_dtoa_r+0x2e>
 800c74a:	692a      	ldr	r2, [r5, #16]
 800c74c:	3202      	adds	r2, #2
 800c74e:	0092      	lsls	r2, r2, #2
 800c750:	f105 010c 	add.w	r1, r5, #12
 800c754:	300c      	adds	r0, #12
 800c756:	f7ff faa2 	bl	800bc9e <memcpy>
 800c75a:	2201      	movs	r2, #1
 800c75c:	4631      	mov	r1, r6
 800c75e:	4658      	mov	r0, fp
 800c760:	f000 fc08 	bl	800cf74 <__lshift>
 800c764:	f10a 0301 	add.w	r3, sl, #1
 800c768:	9307      	str	r3, [sp, #28]
 800c76a:	9b00      	ldr	r3, [sp, #0]
 800c76c:	4453      	add	r3, sl
 800c76e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c770:	9b02      	ldr	r3, [sp, #8]
 800c772:	f003 0301 	and.w	r3, r3, #1
 800c776:	462f      	mov	r7, r5
 800c778:	930a      	str	r3, [sp, #40]	@ 0x28
 800c77a:	4605      	mov	r5, r0
 800c77c:	9b07      	ldr	r3, [sp, #28]
 800c77e:	4621      	mov	r1, r4
 800c780:	3b01      	subs	r3, #1
 800c782:	4648      	mov	r0, r9
 800c784:	9300      	str	r3, [sp, #0]
 800c786:	f7ff fa98 	bl	800bcba <quorem>
 800c78a:	4639      	mov	r1, r7
 800c78c:	9002      	str	r0, [sp, #8]
 800c78e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c792:	4648      	mov	r0, r9
 800c794:	f000 fc5a 	bl	800d04c <__mcmp>
 800c798:	462a      	mov	r2, r5
 800c79a:	9008      	str	r0, [sp, #32]
 800c79c:	4621      	mov	r1, r4
 800c79e:	4658      	mov	r0, fp
 800c7a0:	f000 fc70 	bl	800d084 <__mdiff>
 800c7a4:	68c2      	ldr	r2, [r0, #12]
 800c7a6:	4606      	mov	r6, r0
 800c7a8:	bb02      	cbnz	r2, 800c7ec <_dtoa_r+0xa1c>
 800c7aa:	4601      	mov	r1, r0
 800c7ac:	4648      	mov	r0, r9
 800c7ae:	f000 fc4d 	bl	800d04c <__mcmp>
 800c7b2:	4602      	mov	r2, r0
 800c7b4:	4631      	mov	r1, r6
 800c7b6:	4658      	mov	r0, fp
 800c7b8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c7ba:	f000 fa0d 	bl	800cbd8 <_Bfree>
 800c7be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c7c2:	9e07      	ldr	r6, [sp, #28]
 800c7c4:	ea43 0102 	orr.w	r1, r3, r2
 800c7c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c7ca:	4319      	orrs	r1, r3
 800c7cc:	d110      	bne.n	800c7f0 <_dtoa_r+0xa20>
 800c7ce:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c7d2:	d029      	beq.n	800c828 <_dtoa_r+0xa58>
 800c7d4:	9b08      	ldr	r3, [sp, #32]
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	dd02      	ble.n	800c7e0 <_dtoa_r+0xa10>
 800c7da:	9b02      	ldr	r3, [sp, #8]
 800c7dc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c7e0:	9b00      	ldr	r3, [sp, #0]
 800c7e2:	f883 8000 	strb.w	r8, [r3]
 800c7e6:	e63f      	b.n	800c468 <_dtoa_r+0x698>
 800c7e8:	4628      	mov	r0, r5
 800c7ea:	e7bb      	b.n	800c764 <_dtoa_r+0x994>
 800c7ec:	2201      	movs	r2, #1
 800c7ee:	e7e1      	b.n	800c7b4 <_dtoa_r+0x9e4>
 800c7f0:	9b08      	ldr	r3, [sp, #32]
 800c7f2:	2b00      	cmp	r3, #0
 800c7f4:	db04      	blt.n	800c800 <_dtoa_r+0xa30>
 800c7f6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c7f8:	430b      	orrs	r3, r1
 800c7fa:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c7fc:	430b      	orrs	r3, r1
 800c7fe:	d120      	bne.n	800c842 <_dtoa_r+0xa72>
 800c800:	2a00      	cmp	r2, #0
 800c802:	dded      	ble.n	800c7e0 <_dtoa_r+0xa10>
 800c804:	4649      	mov	r1, r9
 800c806:	2201      	movs	r2, #1
 800c808:	4658      	mov	r0, fp
 800c80a:	f000 fbb3 	bl	800cf74 <__lshift>
 800c80e:	4621      	mov	r1, r4
 800c810:	4681      	mov	r9, r0
 800c812:	f000 fc1b 	bl	800d04c <__mcmp>
 800c816:	2800      	cmp	r0, #0
 800c818:	dc03      	bgt.n	800c822 <_dtoa_r+0xa52>
 800c81a:	d1e1      	bne.n	800c7e0 <_dtoa_r+0xa10>
 800c81c:	f018 0f01 	tst.w	r8, #1
 800c820:	d0de      	beq.n	800c7e0 <_dtoa_r+0xa10>
 800c822:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c826:	d1d8      	bne.n	800c7da <_dtoa_r+0xa0a>
 800c828:	9a00      	ldr	r2, [sp, #0]
 800c82a:	2339      	movs	r3, #57	@ 0x39
 800c82c:	7013      	strb	r3, [r2, #0]
 800c82e:	4633      	mov	r3, r6
 800c830:	461e      	mov	r6, r3
 800c832:	3b01      	subs	r3, #1
 800c834:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c838:	2a39      	cmp	r2, #57	@ 0x39
 800c83a:	d052      	beq.n	800c8e2 <_dtoa_r+0xb12>
 800c83c:	3201      	adds	r2, #1
 800c83e:	701a      	strb	r2, [r3, #0]
 800c840:	e612      	b.n	800c468 <_dtoa_r+0x698>
 800c842:	2a00      	cmp	r2, #0
 800c844:	dd07      	ble.n	800c856 <_dtoa_r+0xa86>
 800c846:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c84a:	d0ed      	beq.n	800c828 <_dtoa_r+0xa58>
 800c84c:	9a00      	ldr	r2, [sp, #0]
 800c84e:	f108 0301 	add.w	r3, r8, #1
 800c852:	7013      	strb	r3, [r2, #0]
 800c854:	e608      	b.n	800c468 <_dtoa_r+0x698>
 800c856:	9b07      	ldr	r3, [sp, #28]
 800c858:	9a07      	ldr	r2, [sp, #28]
 800c85a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c85e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c860:	4293      	cmp	r3, r2
 800c862:	d028      	beq.n	800c8b6 <_dtoa_r+0xae6>
 800c864:	4649      	mov	r1, r9
 800c866:	2300      	movs	r3, #0
 800c868:	220a      	movs	r2, #10
 800c86a:	4658      	mov	r0, fp
 800c86c:	f000 f9d6 	bl	800cc1c <__multadd>
 800c870:	42af      	cmp	r7, r5
 800c872:	4681      	mov	r9, r0
 800c874:	f04f 0300 	mov.w	r3, #0
 800c878:	f04f 020a 	mov.w	r2, #10
 800c87c:	4639      	mov	r1, r7
 800c87e:	4658      	mov	r0, fp
 800c880:	d107      	bne.n	800c892 <_dtoa_r+0xac2>
 800c882:	f000 f9cb 	bl	800cc1c <__multadd>
 800c886:	4607      	mov	r7, r0
 800c888:	4605      	mov	r5, r0
 800c88a:	9b07      	ldr	r3, [sp, #28]
 800c88c:	3301      	adds	r3, #1
 800c88e:	9307      	str	r3, [sp, #28]
 800c890:	e774      	b.n	800c77c <_dtoa_r+0x9ac>
 800c892:	f000 f9c3 	bl	800cc1c <__multadd>
 800c896:	4629      	mov	r1, r5
 800c898:	4607      	mov	r7, r0
 800c89a:	2300      	movs	r3, #0
 800c89c:	220a      	movs	r2, #10
 800c89e:	4658      	mov	r0, fp
 800c8a0:	f000 f9bc 	bl	800cc1c <__multadd>
 800c8a4:	4605      	mov	r5, r0
 800c8a6:	e7f0      	b.n	800c88a <_dtoa_r+0xaba>
 800c8a8:	9b00      	ldr	r3, [sp, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	bfcc      	ite	gt
 800c8ae:	461e      	movgt	r6, r3
 800c8b0:	2601      	movle	r6, #1
 800c8b2:	4456      	add	r6, sl
 800c8b4:	2700      	movs	r7, #0
 800c8b6:	4649      	mov	r1, r9
 800c8b8:	2201      	movs	r2, #1
 800c8ba:	4658      	mov	r0, fp
 800c8bc:	f000 fb5a 	bl	800cf74 <__lshift>
 800c8c0:	4621      	mov	r1, r4
 800c8c2:	4681      	mov	r9, r0
 800c8c4:	f000 fbc2 	bl	800d04c <__mcmp>
 800c8c8:	2800      	cmp	r0, #0
 800c8ca:	dcb0      	bgt.n	800c82e <_dtoa_r+0xa5e>
 800c8cc:	d102      	bne.n	800c8d4 <_dtoa_r+0xb04>
 800c8ce:	f018 0f01 	tst.w	r8, #1
 800c8d2:	d1ac      	bne.n	800c82e <_dtoa_r+0xa5e>
 800c8d4:	4633      	mov	r3, r6
 800c8d6:	461e      	mov	r6, r3
 800c8d8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c8dc:	2a30      	cmp	r2, #48	@ 0x30
 800c8de:	d0fa      	beq.n	800c8d6 <_dtoa_r+0xb06>
 800c8e0:	e5c2      	b.n	800c468 <_dtoa_r+0x698>
 800c8e2:	459a      	cmp	sl, r3
 800c8e4:	d1a4      	bne.n	800c830 <_dtoa_r+0xa60>
 800c8e6:	9b04      	ldr	r3, [sp, #16]
 800c8e8:	3301      	adds	r3, #1
 800c8ea:	9304      	str	r3, [sp, #16]
 800c8ec:	2331      	movs	r3, #49	@ 0x31
 800c8ee:	f88a 3000 	strb.w	r3, [sl]
 800c8f2:	e5b9      	b.n	800c468 <_dtoa_r+0x698>
 800c8f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c8f6:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c954 <_dtoa_r+0xb84>
 800c8fa:	b11b      	cbz	r3, 800c904 <_dtoa_r+0xb34>
 800c8fc:	f10a 0308 	add.w	r3, sl, #8
 800c900:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c902:	6013      	str	r3, [r2, #0]
 800c904:	4650      	mov	r0, sl
 800c906:	b019      	add	sp, #100	@ 0x64
 800c908:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c90c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c90e:	2b01      	cmp	r3, #1
 800c910:	f77f ae37 	ble.w	800c582 <_dtoa_r+0x7b2>
 800c914:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c916:	930a      	str	r3, [sp, #40]	@ 0x28
 800c918:	2001      	movs	r0, #1
 800c91a:	e655      	b.n	800c5c8 <_dtoa_r+0x7f8>
 800c91c:	9b00      	ldr	r3, [sp, #0]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	f77f aed6 	ble.w	800c6d0 <_dtoa_r+0x900>
 800c924:	4656      	mov	r6, sl
 800c926:	4621      	mov	r1, r4
 800c928:	4648      	mov	r0, r9
 800c92a:	f7ff f9c6 	bl	800bcba <quorem>
 800c92e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c932:	f806 8b01 	strb.w	r8, [r6], #1
 800c936:	9b00      	ldr	r3, [sp, #0]
 800c938:	eba6 020a 	sub.w	r2, r6, sl
 800c93c:	4293      	cmp	r3, r2
 800c93e:	ddb3      	ble.n	800c8a8 <_dtoa_r+0xad8>
 800c940:	4649      	mov	r1, r9
 800c942:	2300      	movs	r3, #0
 800c944:	220a      	movs	r2, #10
 800c946:	4658      	mov	r0, fp
 800c948:	f000 f968 	bl	800cc1c <__multadd>
 800c94c:	4681      	mov	r9, r0
 800c94e:	e7ea      	b.n	800c926 <_dtoa_r+0xb56>
 800c950:	0800f1d2 	.word	0x0800f1d2
 800c954:	0800f156 	.word	0x0800f156

0800c958 <_free_r>:
 800c958:	b538      	push	{r3, r4, r5, lr}
 800c95a:	4605      	mov	r5, r0
 800c95c:	2900      	cmp	r1, #0
 800c95e:	d041      	beq.n	800c9e4 <_free_r+0x8c>
 800c960:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c964:	1f0c      	subs	r4, r1, #4
 800c966:	2b00      	cmp	r3, #0
 800c968:	bfb8      	it	lt
 800c96a:	18e4      	addlt	r4, r4, r3
 800c96c:	f000 f8e8 	bl	800cb40 <__malloc_lock>
 800c970:	4a1d      	ldr	r2, [pc, #116]	@ (800c9e8 <_free_r+0x90>)
 800c972:	6813      	ldr	r3, [r2, #0]
 800c974:	b933      	cbnz	r3, 800c984 <_free_r+0x2c>
 800c976:	6063      	str	r3, [r4, #4]
 800c978:	6014      	str	r4, [r2, #0]
 800c97a:	4628      	mov	r0, r5
 800c97c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c980:	f000 b8e4 	b.w	800cb4c <__malloc_unlock>
 800c984:	42a3      	cmp	r3, r4
 800c986:	d908      	bls.n	800c99a <_free_r+0x42>
 800c988:	6820      	ldr	r0, [r4, #0]
 800c98a:	1821      	adds	r1, r4, r0
 800c98c:	428b      	cmp	r3, r1
 800c98e:	bf01      	itttt	eq
 800c990:	6819      	ldreq	r1, [r3, #0]
 800c992:	685b      	ldreq	r3, [r3, #4]
 800c994:	1809      	addeq	r1, r1, r0
 800c996:	6021      	streq	r1, [r4, #0]
 800c998:	e7ed      	b.n	800c976 <_free_r+0x1e>
 800c99a:	461a      	mov	r2, r3
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	b10b      	cbz	r3, 800c9a4 <_free_r+0x4c>
 800c9a0:	42a3      	cmp	r3, r4
 800c9a2:	d9fa      	bls.n	800c99a <_free_r+0x42>
 800c9a4:	6811      	ldr	r1, [r2, #0]
 800c9a6:	1850      	adds	r0, r2, r1
 800c9a8:	42a0      	cmp	r0, r4
 800c9aa:	d10b      	bne.n	800c9c4 <_free_r+0x6c>
 800c9ac:	6820      	ldr	r0, [r4, #0]
 800c9ae:	4401      	add	r1, r0
 800c9b0:	1850      	adds	r0, r2, r1
 800c9b2:	4283      	cmp	r3, r0
 800c9b4:	6011      	str	r1, [r2, #0]
 800c9b6:	d1e0      	bne.n	800c97a <_free_r+0x22>
 800c9b8:	6818      	ldr	r0, [r3, #0]
 800c9ba:	685b      	ldr	r3, [r3, #4]
 800c9bc:	6053      	str	r3, [r2, #4]
 800c9be:	4408      	add	r0, r1
 800c9c0:	6010      	str	r0, [r2, #0]
 800c9c2:	e7da      	b.n	800c97a <_free_r+0x22>
 800c9c4:	d902      	bls.n	800c9cc <_free_r+0x74>
 800c9c6:	230c      	movs	r3, #12
 800c9c8:	602b      	str	r3, [r5, #0]
 800c9ca:	e7d6      	b.n	800c97a <_free_r+0x22>
 800c9cc:	6820      	ldr	r0, [r4, #0]
 800c9ce:	1821      	adds	r1, r4, r0
 800c9d0:	428b      	cmp	r3, r1
 800c9d2:	bf04      	itt	eq
 800c9d4:	6819      	ldreq	r1, [r3, #0]
 800c9d6:	685b      	ldreq	r3, [r3, #4]
 800c9d8:	6063      	str	r3, [r4, #4]
 800c9da:	bf04      	itt	eq
 800c9dc:	1809      	addeq	r1, r1, r0
 800c9de:	6021      	streq	r1, [r4, #0]
 800c9e0:	6054      	str	r4, [r2, #4]
 800c9e2:	e7ca      	b.n	800c97a <_free_r+0x22>
 800c9e4:	bd38      	pop	{r3, r4, r5, pc}
 800c9e6:	bf00      	nop
 800c9e8:	20013d1c 	.word	0x20013d1c

0800c9ec <malloc>:
 800c9ec:	4b02      	ldr	r3, [pc, #8]	@ (800c9f8 <malloc+0xc>)
 800c9ee:	4601      	mov	r1, r0
 800c9f0:	6818      	ldr	r0, [r3, #0]
 800c9f2:	f000 b825 	b.w	800ca40 <_malloc_r>
 800c9f6:	bf00      	nop
 800c9f8:	20000020 	.word	0x20000020

0800c9fc <sbrk_aligned>:
 800c9fc:	b570      	push	{r4, r5, r6, lr}
 800c9fe:	4e0f      	ldr	r6, [pc, #60]	@ (800ca3c <sbrk_aligned+0x40>)
 800ca00:	460c      	mov	r4, r1
 800ca02:	6831      	ldr	r1, [r6, #0]
 800ca04:	4605      	mov	r5, r0
 800ca06:	b911      	cbnz	r1, 800ca0e <sbrk_aligned+0x12>
 800ca08:	f000 fe46 	bl	800d698 <_sbrk_r>
 800ca0c:	6030      	str	r0, [r6, #0]
 800ca0e:	4621      	mov	r1, r4
 800ca10:	4628      	mov	r0, r5
 800ca12:	f000 fe41 	bl	800d698 <_sbrk_r>
 800ca16:	1c43      	adds	r3, r0, #1
 800ca18:	d103      	bne.n	800ca22 <sbrk_aligned+0x26>
 800ca1a:	f04f 34ff 	mov.w	r4, #4294967295
 800ca1e:	4620      	mov	r0, r4
 800ca20:	bd70      	pop	{r4, r5, r6, pc}
 800ca22:	1cc4      	adds	r4, r0, #3
 800ca24:	f024 0403 	bic.w	r4, r4, #3
 800ca28:	42a0      	cmp	r0, r4
 800ca2a:	d0f8      	beq.n	800ca1e <sbrk_aligned+0x22>
 800ca2c:	1a21      	subs	r1, r4, r0
 800ca2e:	4628      	mov	r0, r5
 800ca30:	f000 fe32 	bl	800d698 <_sbrk_r>
 800ca34:	3001      	adds	r0, #1
 800ca36:	d1f2      	bne.n	800ca1e <sbrk_aligned+0x22>
 800ca38:	e7ef      	b.n	800ca1a <sbrk_aligned+0x1e>
 800ca3a:	bf00      	nop
 800ca3c:	20013d18 	.word	0x20013d18

0800ca40 <_malloc_r>:
 800ca40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca44:	1ccd      	adds	r5, r1, #3
 800ca46:	f025 0503 	bic.w	r5, r5, #3
 800ca4a:	3508      	adds	r5, #8
 800ca4c:	2d0c      	cmp	r5, #12
 800ca4e:	bf38      	it	cc
 800ca50:	250c      	movcc	r5, #12
 800ca52:	2d00      	cmp	r5, #0
 800ca54:	4606      	mov	r6, r0
 800ca56:	db01      	blt.n	800ca5c <_malloc_r+0x1c>
 800ca58:	42a9      	cmp	r1, r5
 800ca5a:	d904      	bls.n	800ca66 <_malloc_r+0x26>
 800ca5c:	230c      	movs	r3, #12
 800ca5e:	6033      	str	r3, [r6, #0]
 800ca60:	2000      	movs	r0, #0
 800ca62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ca66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800cb3c <_malloc_r+0xfc>
 800ca6a:	f000 f869 	bl	800cb40 <__malloc_lock>
 800ca6e:	f8d8 3000 	ldr.w	r3, [r8]
 800ca72:	461c      	mov	r4, r3
 800ca74:	bb44      	cbnz	r4, 800cac8 <_malloc_r+0x88>
 800ca76:	4629      	mov	r1, r5
 800ca78:	4630      	mov	r0, r6
 800ca7a:	f7ff ffbf 	bl	800c9fc <sbrk_aligned>
 800ca7e:	1c43      	adds	r3, r0, #1
 800ca80:	4604      	mov	r4, r0
 800ca82:	d158      	bne.n	800cb36 <_malloc_r+0xf6>
 800ca84:	f8d8 4000 	ldr.w	r4, [r8]
 800ca88:	4627      	mov	r7, r4
 800ca8a:	2f00      	cmp	r7, #0
 800ca8c:	d143      	bne.n	800cb16 <_malloc_r+0xd6>
 800ca8e:	2c00      	cmp	r4, #0
 800ca90:	d04b      	beq.n	800cb2a <_malloc_r+0xea>
 800ca92:	6823      	ldr	r3, [r4, #0]
 800ca94:	4639      	mov	r1, r7
 800ca96:	4630      	mov	r0, r6
 800ca98:	eb04 0903 	add.w	r9, r4, r3
 800ca9c:	f000 fdfc 	bl	800d698 <_sbrk_r>
 800caa0:	4581      	cmp	r9, r0
 800caa2:	d142      	bne.n	800cb2a <_malloc_r+0xea>
 800caa4:	6821      	ldr	r1, [r4, #0]
 800caa6:	1a6d      	subs	r5, r5, r1
 800caa8:	4629      	mov	r1, r5
 800caaa:	4630      	mov	r0, r6
 800caac:	f7ff ffa6 	bl	800c9fc <sbrk_aligned>
 800cab0:	3001      	adds	r0, #1
 800cab2:	d03a      	beq.n	800cb2a <_malloc_r+0xea>
 800cab4:	6823      	ldr	r3, [r4, #0]
 800cab6:	442b      	add	r3, r5
 800cab8:	6023      	str	r3, [r4, #0]
 800caba:	f8d8 3000 	ldr.w	r3, [r8]
 800cabe:	685a      	ldr	r2, [r3, #4]
 800cac0:	bb62      	cbnz	r2, 800cb1c <_malloc_r+0xdc>
 800cac2:	f8c8 7000 	str.w	r7, [r8]
 800cac6:	e00f      	b.n	800cae8 <_malloc_r+0xa8>
 800cac8:	6822      	ldr	r2, [r4, #0]
 800caca:	1b52      	subs	r2, r2, r5
 800cacc:	d420      	bmi.n	800cb10 <_malloc_r+0xd0>
 800cace:	2a0b      	cmp	r2, #11
 800cad0:	d917      	bls.n	800cb02 <_malloc_r+0xc2>
 800cad2:	1961      	adds	r1, r4, r5
 800cad4:	42a3      	cmp	r3, r4
 800cad6:	6025      	str	r5, [r4, #0]
 800cad8:	bf18      	it	ne
 800cada:	6059      	strne	r1, [r3, #4]
 800cadc:	6863      	ldr	r3, [r4, #4]
 800cade:	bf08      	it	eq
 800cae0:	f8c8 1000 	streq.w	r1, [r8]
 800cae4:	5162      	str	r2, [r4, r5]
 800cae6:	604b      	str	r3, [r1, #4]
 800cae8:	4630      	mov	r0, r6
 800caea:	f000 f82f 	bl	800cb4c <__malloc_unlock>
 800caee:	f104 000b 	add.w	r0, r4, #11
 800caf2:	1d23      	adds	r3, r4, #4
 800caf4:	f020 0007 	bic.w	r0, r0, #7
 800caf8:	1ac2      	subs	r2, r0, r3
 800cafa:	bf1c      	itt	ne
 800cafc:	1a1b      	subne	r3, r3, r0
 800cafe:	50a3      	strne	r3, [r4, r2]
 800cb00:	e7af      	b.n	800ca62 <_malloc_r+0x22>
 800cb02:	6862      	ldr	r2, [r4, #4]
 800cb04:	42a3      	cmp	r3, r4
 800cb06:	bf0c      	ite	eq
 800cb08:	f8c8 2000 	streq.w	r2, [r8]
 800cb0c:	605a      	strne	r2, [r3, #4]
 800cb0e:	e7eb      	b.n	800cae8 <_malloc_r+0xa8>
 800cb10:	4623      	mov	r3, r4
 800cb12:	6864      	ldr	r4, [r4, #4]
 800cb14:	e7ae      	b.n	800ca74 <_malloc_r+0x34>
 800cb16:	463c      	mov	r4, r7
 800cb18:	687f      	ldr	r7, [r7, #4]
 800cb1a:	e7b6      	b.n	800ca8a <_malloc_r+0x4a>
 800cb1c:	461a      	mov	r2, r3
 800cb1e:	685b      	ldr	r3, [r3, #4]
 800cb20:	42a3      	cmp	r3, r4
 800cb22:	d1fb      	bne.n	800cb1c <_malloc_r+0xdc>
 800cb24:	2300      	movs	r3, #0
 800cb26:	6053      	str	r3, [r2, #4]
 800cb28:	e7de      	b.n	800cae8 <_malloc_r+0xa8>
 800cb2a:	230c      	movs	r3, #12
 800cb2c:	6033      	str	r3, [r6, #0]
 800cb2e:	4630      	mov	r0, r6
 800cb30:	f000 f80c 	bl	800cb4c <__malloc_unlock>
 800cb34:	e794      	b.n	800ca60 <_malloc_r+0x20>
 800cb36:	6005      	str	r5, [r0, #0]
 800cb38:	e7d6      	b.n	800cae8 <_malloc_r+0xa8>
 800cb3a:	bf00      	nop
 800cb3c:	20013d1c 	.word	0x20013d1c

0800cb40 <__malloc_lock>:
 800cb40:	4801      	ldr	r0, [pc, #4]	@ (800cb48 <__malloc_lock+0x8>)
 800cb42:	f7ff b8aa 	b.w	800bc9a <__retarget_lock_acquire_recursive>
 800cb46:	bf00      	nop
 800cb48:	20013d14 	.word	0x20013d14

0800cb4c <__malloc_unlock>:
 800cb4c:	4801      	ldr	r0, [pc, #4]	@ (800cb54 <__malloc_unlock+0x8>)
 800cb4e:	f7ff b8a5 	b.w	800bc9c <__retarget_lock_release_recursive>
 800cb52:	bf00      	nop
 800cb54:	20013d14 	.word	0x20013d14

0800cb58 <_Balloc>:
 800cb58:	b570      	push	{r4, r5, r6, lr}
 800cb5a:	69c6      	ldr	r6, [r0, #28]
 800cb5c:	4604      	mov	r4, r0
 800cb5e:	460d      	mov	r5, r1
 800cb60:	b976      	cbnz	r6, 800cb80 <_Balloc+0x28>
 800cb62:	2010      	movs	r0, #16
 800cb64:	f7ff ff42 	bl	800c9ec <malloc>
 800cb68:	4602      	mov	r2, r0
 800cb6a:	61e0      	str	r0, [r4, #28]
 800cb6c:	b920      	cbnz	r0, 800cb78 <_Balloc+0x20>
 800cb6e:	4b18      	ldr	r3, [pc, #96]	@ (800cbd0 <_Balloc+0x78>)
 800cb70:	4818      	ldr	r0, [pc, #96]	@ (800cbd4 <_Balloc+0x7c>)
 800cb72:	216b      	movs	r1, #107	@ 0x6b
 800cb74:	f000 fda0 	bl	800d6b8 <__assert_func>
 800cb78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb7c:	6006      	str	r6, [r0, #0]
 800cb7e:	60c6      	str	r6, [r0, #12]
 800cb80:	69e6      	ldr	r6, [r4, #28]
 800cb82:	68f3      	ldr	r3, [r6, #12]
 800cb84:	b183      	cbz	r3, 800cba8 <_Balloc+0x50>
 800cb86:	69e3      	ldr	r3, [r4, #28]
 800cb88:	68db      	ldr	r3, [r3, #12]
 800cb8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb8e:	b9b8      	cbnz	r0, 800cbc0 <_Balloc+0x68>
 800cb90:	2101      	movs	r1, #1
 800cb92:	fa01 f605 	lsl.w	r6, r1, r5
 800cb96:	1d72      	adds	r2, r6, #5
 800cb98:	0092      	lsls	r2, r2, #2
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	f000 fdaa 	bl	800d6f4 <_calloc_r>
 800cba0:	b160      	cbz	r0, 800cbbc <_Balloc+0x64>
 800cba2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cba6:	e00e      	b.n	800cbc6 <_Balloc+0x6e>
 800cba8:	2221      	movs	r2, #33	@ 0x21
 800cbaa:	2104      	movs	r1, #4
 800cbac:	4620      	mov	r0, r4
 800cbae:	f000 fda1 	bl	800d6f4 <_calloc_r>
 800cbb2:	69e3      	ldr	r3, [r4, #28]
 800cbb4:	60f0      	str	r0, [r6, #12]
 800cbb6:	68db      	ldr	r3, [r3, #12]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d1e4      	bne.n	800cb86 <_Balloc+0x2e>
 800cbbc:	2000      	movs	r0, #0
 800cbbe:	bd70      	pop	{r4, r5, r6, pc}
 800cbc0:	6802      	ldr	r2, [r0, #0]
 800cbc2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cbcc:	e7f7      	b.n	800cbbe <_Balloc+0x66>
 800cbce:	bf00      	nop
 800cbd0:	0800f163 	.word	0x0800f163
 800cbd4:	0800f1e3 	.word	0x0800f1e3

0800cbd8 <_Bfree>:
 800cbd8:	b570      	push	{r4, r5, r6, lr}
 800cbda:	69c6      	ldr	r6, [r0, #28]
 800cbdc:	4605      	mov	r5, r0
 800cbde:	460c      	mov	r4, r1
 800cbe0:	b976      	cbnz	r6, 800cc00 <_Bfree+0x28>
 800cbe2:	2010      	movs	r0, #16
 800cbe4:	f7ff ff02 	bl	800c9ec <malloc>
 800cbe8:	4602      	mov	r2, r0
 800cbea:	61e8      	str	r0, [r5, #28]
 800cbec:	b920      	cbnz	r0, 800cbf8 <_Bfree+0x20>
 800cbee:	4b09      	ldr	r3, [pc, #36]	@ (800cc14 <_Bfree+0x3c>)
 800cbf0:	4809      	ldr	r0, [pc, #36]	@ (800cc18 <_Bfree+0x40>)
 800cbf2:	218f      	movs	r1, #143	@ 0x8f
 800cbf4:	f000 fd60 	bl	800d6b8 <__assert_func>
 800cbf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbfc:	6006      	str	r6, [r0, #0]
 800cbfe:	60c6      	str	r6, [r0, #12]
 800cc00:	b13c      	cbz	r4, 800cc12 <_Bfree+0x3a>
 800cc02:	69eb      	ldr	r3, [r5, #28]
 800cc04:	6862      	ldr	r2, [r4, #4]
 800cc06:	68db      	ldr	r3, [r3, #12]
 800cc08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cc0c:	6021      	str	r1, [r4, #0]
 800cc0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cc12:	bd70      	pop	{r4, r5, r6, pc}
 800cc14:	0800f163 	.word	0x0800f163
 800cc18:	0800f1e3 	.word	0x0800f1e3

0800cc1c <__multadd>:
 800cc1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc20:	690d      	ldr	r5, [r1, #16]
 800cc22:	4607      	mov	r7, r0
 800cc24:	460c      	mov	r4, r1
 800cc26:	461e      	mov	r6, r3
 800cc28:	f101 0c14 	add.w	ip, r1, #20
 800cc2c:	2000      	movs	r0, #0
 800cc2e:	f8dc 3000 	ldr.w	r3, [ip]
 800cc32:	b299      	uxth	r1, r3
 800cc34:	fb02 6101 	mla	r1, r2, r1, r6
 800cc38:	0c1e      	lsrs	r6, r3, #16
 800cc3a:	0c0b      	lsrs	r3, r1, #16
 800cc3c:	fb02 3306 	mla	r3, r2, r6, r3
 800cc40:	b289      	uxth	r1, r1
 800cc42:	3001      	adds	r0, #1
 800cc44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cc48:	4285      	cmp	r5, r0
 800cc4a:	f84c 1b04 	str.w	r1, [ip], #4
 800cc4e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc52:	dcec      	bgt.n	800cc2e <__multadd+0x12>
 800cc54:	b30e      	cbz	r6, 800cc9a <__multadd+0x7e>
 800cc56:	68a3      	ldr	r3, [r4, #8]
 800cc58:	42ab      	cmp	r3, r5
 800cc5a:	dc19      	bgt.n	800cc90 <__multadd+0x74>
 800cc5c:	6861      	ldr	r1, [r4, #4]
 800cc5e:	4638      	mov	r0, r7
 800cc60:	3101      	adds	r1, #1
 800cc62:	f7ff ff79 	bl	800cb58 <_Balloc>
 800cc66:	4680      	mov	r8, r0
 800cc68:	b928      	cbnz	r0, 800cc76 <__multadd+0x5a>
 800cc6a:	4602      	mov	r2, r0
 800cc6c:	4b0c      	ldr	r3, [pc, #48]	@ (800cca0 <__multadd+0x84>)
 800cc6e:	480d      	ldr	r0, [pc, #52]	@ (800cca4 <__multadd+0x88>)
 800cc70:	21ba      	movs	r1, #186	@ 0xba
 800cc72:	f000 fd21 	bl	800d6b8 <__assert_func>
 800cc76:	6922      	ldr	r2, [r4, #16]
 800cc78:	3202      	adds	r2, #2
 800cc7a:	f104 010c 	add.w	r1, r4, #12
 800cc7e:	0092      	lsls	r2, r2, #2
 800cc80:	300c      	adds	r0, #12
 800cc82:	f7ff f80c 	bl	800bc9e <memcpy>
 800cc86:	4621      	mov	r1, r4
 800cc88:	4638      	mov	r0, r7
 800cc8a:	f7ff ffa5 	bl	800cbd8 <_Bfree>
 800cc8e:	4644      	mov	r4, r8
 800cc90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc94:	3501      	adds	r5, #1
 800cc96:	615e      	str	r6, [r3, #20]
 800cc98:	6125      	str	r5, [r4, #16]
 800cc9a:	4620      	mov	r0, r4
 800cc9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cca0:	0800f1d2 	.word	0x0800f1d2
 800cca4:	0800f1e3 	.word	0x0800f1e3

0800cca8 <__hi0bits>:
 800cca8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ccac:	4603      	mov	r3, r0
 800ccae:	bf36      	itet	cc
 800ccb0:	0403      	lslcc	r3, r0, #16
 800ccb2:	2000      	movcs	r0, #0
 800ccb4:	2010      	movcc	r0, #16
 800ccb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ccba:	bf3c      	itt	cc
 800ccbc:	021b      	lslcc	r3, r3, #8
 800ccbe:	3008      	addcc	r0, #8
 800ccc0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ccc4:	bf3c      	itt	cc
 800ccc6:	011b      	lslcc	r3, r3, #4
 800ccc8:	3004      	addcc	r0, #4
 800ccca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ccce:	bf3c      	itt	cc
 800ccd0:	009b      	lslcc	r3, r3, #2
 800ccd2:	3002      	addcc	r0, #2
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	db05      	blt.n	800cce4 <__hi0bits+0x3c>
 800ccd8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ccdc:	f100 0001 	add.w	r0, r0, #1
 800cce0:	bf08      	it	eq
 800cce2:	2020      	moveq	r0, #32
 800cce4:	4770      	bx	lr

0800cce6 <__lo0bits>:
 800cce6:	6803      	ldr	r3, [r0, #0]
 800cce8:	4602      	mov	r2, r0
 800ccea:	f013 0007 	ands.w	r0, r3, #7
 800ccee:	d00b      	beq.n	800cd08 <__lo0bits+0x22>
 800ccf0:	07d9      	lsls	r1, r3, #31
 800ccf2:	d421      	bmi.n	800cd38 <__lo0bits+0x52>
 800ccf4:	0798      	lsls	r0, r3, #30
 800ccf6:	bf49      	itett	mi
 800ccf8:	085b      	lsrmi	r3, r3, #1
 800ccfa:	089b      	lsrpl	r3, r3, #2
 800ccfc:	2001      	movmi	r0, #1
 800ccfe:	6013      	strmi	r3, [r2, #0]
 800cd00:	bf5c      	itt	pl
 800cd02:	6013      	strpl	r3, [r2, #0]
 800cd04:	2002      	movpl	r0, #2
 800cd06:	4770      	bx	lr
 800cd08:	b299      	uxth	r1, r3
 800cd0a:	b909      	cbnz	r1, 800cd10 <__lo0bits+0x2a>
 800cd0c:	0c1b      	lsrs	r3, r3, #16
 800cd0e:	2010      	movs	r0, #16
 800cd10:	b2d9      	uxtb	r1, r3
 800cd12:	b909      	cbnz	r1, 800cd18 <__lo0bits+0x32>
 800cd14:	3008      	adds	r0, #8
 800cd16:	0a1b      	lsrs	r3, r3, #8
 800cd18:	0719      	lsls	r1, r3, #28
 800cd1a:	bf04      	itt	eq
 800cd1c:	091b      	lsreq	r3, r3, #4
 800cd1e:	3004      	addeq	r0, #4
 800cd20:	0799      	lsls	r1, r3, #30
 800cd22:	bf04      	itt	eq
 800cd24:	089b      	lsreq	r3, r3, #2
 800cd26:	3002      	addeq	r0, #2
 800cd28:	07d9      	lsls	r1, r3, #31
 800cd2a:	d403      	bmi.n	800cd34 <__lo0bits+0x4e>
 800cd2c:	085b      	lsrs	r3, r3, #1
 800cd2e:	f100 0001 	add.w	r0, r0, #1
 800cd32:	d003      	beq.n	800cd3c <__lo0bits+0x56>
 800cd34:	6013      	str	r3, [r2, #0]
 800cd36:	4770      	bx	lr
 800cd38:	2000      	movs	r0, #0
 800cd3a:	4770      	bx	lr
 800cd3c:	2020      	movs	r0, #32
 800cd3e:	4770      	bx	lr

0800cd40 <__i2b>:
 800cd40:	b510      	push	{r4, lr}
 800cd42:	460c      	mov	r4, r1
 800cd44:	2101      	movs	r1, #1
 800cd46:	f7ff ff07 	bl	800cb58 <_Balloc>
 800cd4a:	4602      	mov	r2, r0
 800cd4c:	b928      	cbnz	r0, 800cd5a <__i2b+0x1a>
 800cd4e:	4b05      	ldr	r3, [pc, #20]	@ (800cd64 <__i2b+0x24>)
 800cd50:	4805      	ldr	r0, [pc, #20]	@ (800cd68 <__i2b+0x28>)
 800cd52:	f240 1145 	movw	r1, #325	@ 0x145
 800cd56:	f000 fcaf 	bl	800d6b8 <__assert_func>
 800cd5a:	2301      	movs	r3, #1
 800cd5c:	6144      	str	r4, [r0, #20]
 800cd5e:	6103      	str	r3, [r0, #16]
 800cd60:	bd10      	pop	{r4, pc}
 800cd62:	bf00      	nop
 800cd64:	0800f1d2 	.word	0x0800f1d2
 800cd68:	0800f1e3 	.word	0x0800f1e3

0800cd6c <__multiply>:
 800cd6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd70:	4614      	mov	r4, r2
 800cd72:	690a      	ldr	r2, [r1, #16]
 800cd74:	6923      	ldr	r3, [r4, #16]
 800cd76:	429a      	cmp	r2, r3
 800cd78:	bfa8      	it	ge
 800cd7a:	4623      	movge	r3, r4
 800cd7c:	460f      	mov	r7, r1
 800cd7e:	bfa4      	itt	ge
 800cd80:	460c      	movge	r4, r1
 800cd82:	461f      	movge	r7, r3
 800cd84:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cd88:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cd8c:	68a3      	ldr	r3, [r4, #8]
 800cd8e:	6861      	ldr	r1, [r4, #4]
 800cd90:	eb0a 0609 	add.w	r6, sl, r9
 800cd94:	42b3      	cmp	r3, r6
 800cd96:	b085      	sub	sp, #20
 800cd98:	bfb8      	it	lt
 800cd9a:	3101      	addlt	r1, #1
 800cd9c:	f7ff fedc 	bl	800cb58 <_Balloc>
 800cda0:	b930      	cbnz	r0, 800cdb0 <__multiply+0x44>
 800cda2:	4602      	mov	r2, r0
 800cda4:	4b44      	ldr	r3, [pc, #272]	@ (800ceb8 <__multiply+0x14c>)
 800cda6:	4845      	ldr	r0, [pc, #276]	@ (800cebc <__multiply+0x150>)
 800cda8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cdac:	f000 fc84 	bl	800d6b8 <__assert_func>
 800cdb0:	f100 0514 	add.w	r5, r0, #20
 800cdb4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cdb8:	462b      	mov	r3, r5
 800cdba:	2200      	movs	r2, #0
 800cdbc:	4543      	cmp	r3, r8
 800cdbe:	d321      	bcc.n	800ce04 <__multiply+0x98>
 800cdc0:	f107 0114 	add.w	r1, r7, #20
 800cdc4:	f104 0214 	add.w	r2, r4, #20
 800cdc8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cdcc:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cdd0:	9302      	str	r3, [sp, #8]
 800cdd2:	1b13      	subs	r3, r2, r4
 800cdd4:	3b15      	subs	r3, #21
 800cdd6:	f023 0303 	bic.w	r3, r3, #3
 800cdda:	3304      	adds	r3, #4
 800cddc:	f104 0715 	add.w	r7, r4, #21
 800cde0:	42ba      	cmp	r2, r7
 800cde2:	bf38      	it	cc
 800cde4:	2304      	movcc	r3, #4
 800cde6:	9301      	str	r3, [sp, #4]
 800cde8:	9b02      	ldr	r3, [sp, #8]
 800cdea:	9103      	str	r1, [sp, #12]
 800cdec:	428b      	cmp	r3, r1
 800cdee:	d80c      	bhi.n	800ce0a <__multiply+0x9e>
 800cdf0:	2e00      	cmp	r6, #0
 800cdf2:	dd03      	ble.n	800cdfc <__multiply+0x90>
 800cdf4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d05b      	beq.n	800ceb4 <__multiply+0x148>
 800cdfc:	6106      	str	r6, [r0, #16]
 800cdfe:	b005      	add	sp, #20
 800ce00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce04:	f843 2b04 	str.w	r2, [r3], #4
 800ce08:	e7d8      	b.n	800cdbc <__multiply+0x50>
 800ce0a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ce0e:	f1ba 0f00 	cmp.w	sl, #0
 800ce12:	d024      	beq.n	800ce5e <__multiply+0xf2>
 800ce14:	f104 0e14 	add.w	lr, r4, #20
 800ce18:	46a9      	mov	r9, r5
 800ce1a:	f04f 0c00 	mov.w	ip, #0
 800ce1e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ce22:	f8d9 3000 	ldr.w	r3, [r9]
 800ce26:	fa1f fb87 	uxth.w	fp, r7
 800ce2a:	b29b      	uxth	r3, r3
 800ce2c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ce30:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ce34:	f8d9 7000 	ldr.w	r7, [r9]
 800ce38:	4463      	add	r3, ip
 800ce3a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ce3e:	fb0a c70b 	mla	r7, sl, fp, ip
 800ce42:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ce46:	b29b      	uxth	r3, r3
 800ce48:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ce4c:	4572      	cmp	r2, lr
 800ce4e:	f849 3b04 	str.w	r3, [r9], #4
 800ce52:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ce56:	d8e2      	bhi.n	800ce1e <__multiply+0xb2>
 800ce58:	9b01      	ldr	r3, [sp, #4]
 800ce5a:	f845 c003 	str.w	ip, [r5, r3]
 800ce5e:	9b03      	ldr	r3, [sp, #12]
 800ce60:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ce64:	3104      	adds	r1, #4
 800ce66:	f1b9 0f00 	cmp.w	r9, #0
 800ce6a:	d021      	beq.n	800ceb0 <__multiply+0x144>
 800ce6c:	682b      	ldr	r3, [r5, #0]
 800ce6e:	f104 0c14 	add.w	ip, r4, #20
 800ce72:	46ae      	mov	lr, r5
 800ce74:	f04f 0a00 	mov.w	sl, #0
 800ce78:	f8bc b000 	ldrh.w	fp, [ip]
 800ce7c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ce80:	fb09 770b 	mla	r7, r9, fp, r7
 800ce84:	4457      	add	r7, sl
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ce8c:	f84e 3b04 	str.w	r3, [lr], #4
 800ce90:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ce94:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ce98:	f8be 3000 	ldrh.w	r3, [lr]
 800ce9c:	fb09 330a 	mla	r3, r9, sl, r3
 800cea0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800cea4:	4562      	cmp	r2, ip
 800cea6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ceaa:	d8e5      	bhi.n	800ce78 <__multiply+0x10c>
 800ceac:	9f01      	ldr	r7, [sp, #4]
 800ceae:	51eb      	str	r3, [r5, r7]
 800ceb0:	3504      	adds	r5, #4
 800ceb2:	e799      	b.n	800cde8 <__multiply+0x7c>
 800ceb4:	3e01      	subs	r6, #1
 800ceb6:	e79b      	b.n	800cdf0 <__multiply+0x84>
 800ceb8:	0800f1d2 	.word	0x0800f1d2
 800cebc:	0800f1e3 	.word	0x0800f1e3

0800cec0 <__pow5mult>:
 800cec0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cec4:	4615      	mov	r5, r2
 800cec6:	f012 0203 	ands.w	r2, r2, #3
 800ceca:	4607      	mov	r7, r0
 800cecc:	460e      	mov	r6, r1
 800cece:	d007      	beq.n	800cee0 <__pow5mult+0x20>
 800ced0:	4c25      	ldr	r4, [pc, #148]	@ (800cf68 <__pow5mult+0xa8>)
 800ced2:	3a01      	subs	r2, #1
 800ced4:	2300      	movs	r3, #0
 800ced6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ceda:	f7ff fe9f 	bl	800cc1c <__multadd>
 800cede:	4606      	mov	r6, r0
 800cee0:	10ad      	asrs	r5, r5, #2
 800cee2:	d03d      	beq.n	800cf60 <__pow5mult+0xa0>
 800cee4:	69fc      	ldr	r4, [r7, #28]
 800cee6:	b97c      	cbnz	r4, 800cf08 <__pow5mult+0x48>
 800cee8:	2010      	movs	r0, #16
 800ceea:	f7ff fd7f 	bl	800c9ec <malloc>
 800ceee:	4602      	mov	r2, r0
 800cef0:	61f8      	str	r0, [r7, #28]
 800cef2:	b928      	cbnz	r0, 800cf00 <__pow5mult+0x40>
 800cef4:	4b1d      	ldr	r3, [pc, #116]	@ (800cf6c <__pow5mult+0xac>)
 800cef6:	481e      	ldr	r0, [pc, #120]	@ (800cf70 <__pow5mult+0xb0>)
 800cef8:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cefc:	f000 fbdc 	bl	800d6b8 <__assert_func>
 800cf00:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf04:	6004      	str	r4, [r0, #0]
 800cf06:	60c4      	str	r4, [r0, #12]
 800cf08:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cf0c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf10:	b94c      	cbnz	r4, 800cf26 <__pow5mult+0x66>
 800cf12:	f240 2171 	movw	r1, #625	@ 0x271
 800cf16:	4638      	mov	r0, r7
 800cf18:	f7ff ff12 	bl	800cd40 <__i2b>
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf22:	4604      	mov	r4, r0
 800cf24:	6003      	str	r3, [r0, #0]
 800cf26:	f04f 0900 	mov.w	r9, #0
 800cf2a:	07eb      	lsls	r3, r5, #31
 800cf2c:	d50a      	bpl.n	800cf44 <__pow5mult+0x84>
 800cf2e:	4631      	mov	r1, r6
 800cf30:	4622      	mov	r2, r4
 800cf32:	4638      	mov	r0, r7
 800cf34:	f7ff ff1a 	bl	800cd6c <__multiply>
 800cf38:	4631      	mov	r1, r6
 800cf3a:	4680      	mov	r8, r0
 800cf3c:	4638      	mov	r0, r7
 800cf3e:	f7ff fe4b 	bl	800cbd8 <_Bfree>
 800cf42:	4646      	mov	r6, r8
 800cf44:	106d      	asrs	r5, r5, #1
 800cf46:	d00b      	beq.n	800cf60 <__pow5mult+0xa0>
 800cf48:	6820      	ldr	r0, [r4, #0]
 800cf4a:	b938      	cbnz	r0, 800cf5c <__pow5mult+0x9c>
 800cf4c:	4622      	mov	r2, r4
 800cf4e:	4621      	mov	r1, r4
 800cf50:	4638      	mov	r0, r7
 800cf52:	f7ff ff0b 	bl	800cd6c <__multiply>
 800cf56:	6020      	str	r0, [r4, #0]
 800cf58:	f8c0 9000 	str.w	r9, [r0]
 800cf5c:	4604      	mov	r4, r0
 800cf5e:	e7e4      	b.n	800cf2a <__pow5mult+0x6a>
 800cf60:	4630      	mov	r0, r6
 800cf62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf66:	bf00      	nop
 800cf68:	0800f23c 	.word	0x0800f23c
 800cf6c:	0800f163 	.word	0x0800f163
 800cf70:	0800f1e3 	.word	0x0800f1e3

0800cf74 <__lshift>:
 800cf74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf78:	460c      	mov	r4, r1
 800cf7a:	6849      	ldr	r1, [r1, #4]
 800cf7c:	6923      	ldr	r3, [r4, #16]
 800cf7e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf82:	68a3      	ldr	r3, [r4, #8]
 800cf84:	4607      	mov	r7, r0
 800cf86:	4691      	mov	r9, r2
 800cf88:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf8c:	f108 0601 	add.w	r6, r8, #1
 800cf90:	42b3      	cmp	r3, r6
 800cf92:	db0b      	blt.n	800cfac <__lshift+0x38>
 800cf94:	4638      	mov	r0, r7
 800cf96:	f7ff fddf 	bl	800cb58 <_Balloc>
 800cf9a:	4605      	mov	r5, r0
 800cf9c:	b948      	cbnz	r0, 800cfb2 <__lshift+0x3e>
 800cf9e:	4602      	mov	r2, r0
 800cfa0:	4b28      	ldr	r3, [pc, #160]	@ (800d044 <__lshift+0xd0>)
 800cfa2:	4829      	ldr	r0, [pc, #164]	@ (800d048 <__lshift+0xd4>)
 800cfa4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cfa8:	f000 fb86 	bl	800d6b8 <__assert_func>
 800cfac:	3101      	adds	r1, #1
 800cfae:	005b      	lsls	r3, r3, #1
 800cfb0:	e7ee      	b.n	800cf90 <__lshift+0x1c>
 800cfb2:	2300      	movs	r3, #0
 800cfb4:	f100 0114 	add.w	r1, r0, #20
 800cfb8:	f100 0210 	add.w	r2, r0, #16
 800cfbc:	4618      	mov	r0, r3
 800cfbe:	4553      	cmp	r3, sl
 800cfc0:	db33      	blt.n	800d02a <__lshift+0xb6>
 800cfc2:	6920      	ldr	r0, [r4, #16]
 800cfc4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cfc8:	f104 0314 	add.w	r3, r4, #20
 800cfcc:	f019 091f 	ands.w	r9, r9, #31
 800cfd0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cfd4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cfd8:	d02b      	beq.n	800d032 <__lshift+0xbe>
 800cfda:	f1c9 0e20 	rsb	lr, r9, #32
 800cfde:	468a      	mov	sl, r1
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	6818      	ldr	r0, [r3, #0]
 800cfe4:	fa00 f009 	lsl.w	r0, r0, r9
 800cfe8:	4310      	orrs	r0, r2
 800cfea:	f84a 0b04 	str.w	r0, [sl], #4
 800cfee:	f853 2b04 	ldr.w	r2, [r3], #4
 800cff2:	459c      	cmp	ip, r3
 800cff4:	fa22 f20e 	lsr.w	r2, r2, lr
 800cff8:	d8f3      	bhi.n	800cfe2 <__lshift+0x6e>
 800cffa:	ebac 0304 	sub.w	r3, ip, r4
 800cffe:	3b15      	subs	r3, #21
 800d000:	f023 0303 	bic.w	r3, r3, #3
 800d004:	3304      	adds	r3, #4
 800d006:	f104 0015 	add.w	r0, r4, #21
 800d00a:	4584      	cmp	ip, r0
 800d00c:	bf38      	it	cc
 800d00e:	2304      	movcc	r3, #4
 800d010:	50ca      	str	r2, [r1, r3]
 800d012:	b10a      	cbz	r2, 800d018 <__lshift+0xa4>
 800d014:	f108 0602 	add.w	r6, r8, #2
 800d018:	3e01      	subs	r6, #1
 800d01a:	4638      	mov	r0, r7
 800d01c:	612e      	str	r6, [r5, #16]
 800d01e:	4621      	mov	r1, r4
 800d020:	f7ff fdda 	bl	800cbd8 <_Bfree>
 800d024:	4628      	mov	r0, r5
 800d026:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d02a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d02e:	3301      	adds	r3, #1
 800d030:	e7c5      	b.n	800cfbe <__lshift+0x4a>
 800d032:	3904      	subs	r1, #4
 800d034:	f853 2b04 	ldr.w	r2, [r3], #4
 800d038:	f841 2f04 	str.w	r2, [r1, #4]!
 800d03c:	459c      	cmp	ip, r3
 800d03e:	d8f9      	bhi.n	800d034 <__lshift+0xc0>
 800d040:	e7ea      	b.n	800d018 <__lshift+0xa4>
 800d042:	bf00      	nop
 800d044:	0800f1d2 	.word	0x0800f1d2
 800d048:	0800f1e3 	.word	0x0800f1e3

0800d04c <__mcmp>:
 800d04c:	690a      	ldr	r2, [r1, #16]
 800d04e:	4603      	mov	r3, r0
 800d050:	6900      	ldr	r0, [r0, #16]
 800d052:	1a80      	subs	r0, r0, r2
 800d054:	b530      	push	{r4, r5, lr}
 800d056:	d10e      	bne.n	800d076 <__mcmp+0x2a>
 800d058:	3314      	adds	r3, #20
 800d05a:	3114      	adds	r1, #20
 800d05c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800d060:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d064:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d068:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d06c:	4295      	cmp	r5, r2
 800d06e:	d003      	beq.n	800d078 <__mcmp+0x2c>
 800d070:	d205      	bcs.n	800d07e <__mcmp+0x32>
 800d072:	f04f 30ff 	mov.w	r0, #4294967295
 800d076:	bd30      	pop	{r4, r5, pc}
 800d078:	42a3      	cmp	r3, r4
 800d07a:	d3f3      	bcc.n	800d064 <__mcmp+0x18>
 800d07c:	e7fb      	b.n	800d076 <__mcmp+0x2a>
 800d07e:	2001      	movs	r0, #1
 800d080:	e7f9      	b.n	800d076 <__mcmp+0x2a>
	...

0800d084 <__mdiff>:
 800d084:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d088:	4689      	mov	r9, r1
 800d08a:	4606      	mov	r6, r0
 800d08c:	4611      	mov	r1, r2
 800d08e:	4648      	mov	r0, r9
 800d090:	4614      	mov	r4, r2
 800d092:	f7ff ffdb 	bl	800d04c <__mcmp>
 800d096:	1e05      	subs	r5, r0, #0
 800d098:	d112      	bne.n	800d0c0 <__mdiff+0x3c>
 800d09a:	4629      	mov	r1, r5
 800d09c:	4630      	mov	r0, r6
 800d09e:	f7ff fd5b 	bl	800cb58 <_Balloc>
 800d0a2:	4602      	mov	r2, r0
 800d0a4:	b928      	cbnz	r0, 800d0b2 <__mdiff+0x2e>
 800d0a6:	4b3f      	ldr	r3, [pc, #252]	@ (800d1a4 <__mdiff+0x120>)
 800d0a8:	f240 2137 	movw	r1, #567	@ 0x237
 800d0ac:	483e      	ldr	r0, [pc, #248]	@ (800d1a8 <__mdiff+0x124>)
 800d0ae:	f000 fb03 	bl	800d6b8 <__assert_func>
 800d0b2:	2301      	movs	r3, #1
 800d0b4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d0b8:	4610      	mov	r0, r2
 800d0ba:	b003      	add	sp, #12
 800d0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d0c0:	bfbc      	itt	lt
 800d0c2:	464b      	movlt	r3, r9
 800d0c4:	46a1      	movlt	r9, r4
 800d0c6:	4630      	mov	r0, r6
 800d0c8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800d0cc:	bfba      	itte	lt
 800d0ce:	461c      	movlt	r4, r3
 800d0d0:	2501      	movlt	r5, #1
 800d0d2:	2500      	movge	r5, #0
 800d0d4:	f7ff fd40 	bl	800cb58 <_Balloc>
 800d0d8:	4602      	mov	r2, r0
 800d0da:	b918      	cbnz	r0, 800d0e4 <__mdiff+0x60>
 800d0dc:	4b31      	ldr	r3, [pc, #196]	@ (800d1a4 <__mdiff+0x120>)
 800d0de:	f240 2145 	movw	r1, #581	@ 0x245
 800d0e2:	e7e3      	b.n	800d0ac <__mdiff+0x28>
 800d0e4:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800d0e8:	6926      	ldr	r6, [r4, #16]
 800d0ea:	60c5      	str	r5, [r0, #12]
 800d0ec:	f109 0310 	add.w	r3, r9, #16
 800d0f0:	f109 0514 	add.w	r5, r9, #20
 800d0f4:	f104 0e14 	add.w	lr, r4, #20
 800d0f8:	f100 0b14 	add.w	fp, r0, #20
 800d0fc:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800d100:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800d104:	9301      	str	r3, [sp, #4]
 800d106:	46d9      	mov	r9, fp
 800d108:	f04f 0c00 	mov.w	ip, #0
 800d10c:	9b01      	ldr	r3, [sp, #4]
 800d10e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800d112:	f853 af04 	ldr.w	sl, [r3, #4]!
 800d116:	9301      	str	r3, [sp, #4]
 800d118:	fa1f f38a 	uxth.w	r3, sl
 800d11c:	4619      	mov	r1, r3
 800d11e:	b283      	uxth	r3, r0
 800d120:	1acb      	subs	r3, r1, r3
 800d122:	0c00      	lsrs	r0, r0, #16
 800d124:	4463      	add	r3, ip
 800d126:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800d12a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800d12e:	b29b      	uxth	r3, r3
 800d130:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800d134:	4576      	cmp	r6, lr
 800d136:	f849 3b04 	str.w	r3, [r9], #4
 800d13a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d13e:	d8e5      	bhi.n	800d10c <__mdiff+0x88>
 800d140:	1b33      	subs	r3, r6, r4
 800d142:	3b15      	subs	r3, #21
 800d144:	f023 0303 	bic.w	r3, r3, #3
 800d148:	3415      	adds	r4, #21
 800d14a:	3304      	adds	r3, #4
 800d14c:	42a6      	cmp	r6, r4
 800d14e:	bf38      	it	cc
 800d150:	2304      	movcc	r3, #4
 800d152:	441d      	add	r5, r3
 800d154:	445b      	add	r3, fp
 800d156:	461e      	mov	r6, r3
 800d158:	462c      	mov	r4, r5
 800d15a:	4544      	cmp	r4, r8
 800d15c:	d30e      	bcc.n	800d17c <__mdiff+0xf8>
 800d15e:	f108 0103 	add.w	r1, r8, #3
 800d162:	1b49      	subs	r1, r1, r5
 800d164:	f021 0103 	bic.w	r1, r1, #3
 800d168:	3d03      	subs	r5, #3
 800d16a:	45a8      	cmp	r8, r5
 800d16c:	bf38      	it	cc
 800d16e:	2100      	movcc	r1, #0
 800d170:	440b      	add	r3, r1
 800d172:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d176:	b191      	cbz	r1, 800d19e <__mdiff+0x11a>
 800d178:	6117      	str	r7, [r2, #16]
 800d17a:	e79d      	b.n	800d0b8 <__mdiff+0x34>
 800d17c:	f854 1b04 	ldr.w	r1, [r4], #4
 800d180:	46e6      	mov	lr, ip
 800d182:	0c08      	lsrs	r0, r1, #16
 800d184:	fa1c fc81 	uxtah	ip, ip, r1
 800d188:	4471      	add	r1, lr
 800d18a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800d18e:	b289      	uxth	r1, r1
 800d190:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800d194:	f846 1b04 	str.w	r1, [r6], #4
 800d198:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800d19c:	e7dd      	b.n	800d15a <__mdiff+0xd6>
 800d19e:	3f01      	subs	r7, #1
 800d1a0:	e7e7      	b.n	800d172 <__mdiff+0xee>
 800d1a2:	bf00      	nop
 800d1a4:	0800f1d2 	.word	0x0800f1d2
 800d1a8:	0800f1e3 	.word	0x0800f1e3

0800d1ac <__d2b>:
 800d1ac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d1b0:	460f      	mov	r7, r1
 800d1b2:	2101      	movs	r1, #1
 800d1b4:	ec59 8b10 	vmov	r8, r9, d0
 800d1b8:	4616      	mov	r6, r2
 800d1ba:	f7ff fccd 	bl	800cb58 <_Balloc>
 800d1be:	4604      	mov	r4, r0
 800d1c0:	b930      	cbnz	r0, 800d1d0 <__d2b+0x24>
 800d1c2:	4602      	mov	r2, r0
 800d1c4:	4b23      	ldr	r3, [pc, #140]	@ (800d254 <__d2b+0xa8>)
 800d1c6:	4824      	ldr	r0, [pc, #144]	@ (800d258 <__d2b+0xac>)
 800d1c8:	f240 310f 	movw	r1, #783	@ 0x30f
 800d1cc:	f000 fa74 	bl	800d6b8 <__assert_func>
 800d1d0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d1d4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d1d8:	b10d      	cbz	r5, 800d1de <__d2b+0x32>
 800d1da:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800d1de:	9301      	str	r3, [sp, #4]
 800d1e0:	f1b8 0300 	subs.w	r3, r8, #0
 800d1e4:	d023      	beq.n	800d22e <__d2b+0x82>
 800d1e6:	4668      	mov	r0, sp
 800d1e8:	9300      	str	r3, [sp, #0]
 800d1ea:	f7ff fd7c 	bl	800cce6 <__lo0bits>
 800d1ee:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d1f2:	b1d0      	cbz	r0, 800d22a <__d2b+0x7e>
 800d1f4:	f1c0 0320 	rsb	r3, r0, #32
 800d1f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d1fc:	430b      	orrs	r3, r1
 800d1fe:	40c2      	lsrs	r2, r0
 800d200:	6163      	str	r3, [r4, #20]
 800d202:	9201      	str	r2, [sp, #4]
 800d204:	9b01      	ldr	r3, [sp, #4]
 800d206:	61a3      	str	r3, [r4, #24]
 800d208:	2b00      	cmp	r3, #0
 800d20a:	bf0c      	ite	eq
 800d20c:	2201      	moveq	r2, #1
 800d20e:	2202      	movne	r2, #2
 800d210:	6122      	str	r2, [r4, #16]
 800d212:	b1a5      	cbz	r5, 800d23e <__d2b+0x92>
 800d214:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d218:	4405      	add	r5, r0
 800d21a:	603d      	str	r5, [r7, #0]
 800d21c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d220:	6030      	str	r0, [r6, #0]
 800d222:	4620      	mov	r0, r4
 800d224:	b003      	add	sp, #12
 800d226:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d22a:	6161      	str	r1, [r4, #20]
 800d22c:	e7ea      	b.n	800d204 <__d2b+0x58>
 800d22e:	a801      	add	r0, sp, #4
 800d230:	f7ff fd59 	bl	800cce6 <__lo0bits>
 800d234:	9b01      	ldr	r3, [sp, #4]
 800d236:	6163      	str	r3, [r4, #20]
 800d238:	3020      	adds	r0, #32
 800d23a:	2201      	movs	r2, #1
 800d23c:	e7e8      	b.n	800d210 <__d2b+0x64>
 800d23e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d242:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d246:	6038      	str	r0, [r7, #0]
 800d248:	6918      	ldr	r0, [r3, #16]
 800d24a:	f7ff fd2d 	bl	800cca8 <__hi0bits>
 800d24e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d252:	e7e5      	b.n	800d220 <__d2b+0x74>
 800d254:	0800f1d2 	.word	0x0800f1d2
 800d258:	0800f1e3 	.word	0x0800f1e3

0800d25c <__ssputs_r>:
 800d25c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d260:	688e      	ldr	r6, [r1, #8]
 800d262:	461f      	mov	r7, r3
 800d264:	42be      	cmp	r6, r7
 800d266:	680b      	ldr	r3, [r1, #0]
 800d268:	4682      	mov	sl, r0
 800d26a:	460c      	mov	r4, r1
 800d26c:	4690      	mov	r8, r2
 800d26e:	d82d      	bhi.n	800d2cc <__ssputs_r+0x70>
 800d270:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d274:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d278:	d026      	beq.n	800d2c8 <__ssputs_r+0x6c>
 800d27a:	6965      	ldr	r5, [r4, #20]
 800d27c:	6909      	ldr	r1, [r1, #16]
 800d27e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d282:	eba3 0901 	sub.w	r9, r3, r1
 800d286:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d28a:	1c7b      	adds	r3, r7, #1
 800d28c:	444b      	add	r3, r9
 800d28e:	106d      	asrs	r5, r5, #1
 800d290:	429d      	cmp	r5, r3
 800d292:	bf38      	it	cc
 800d294:	461d      	movcc	r5, r3
 800d296:	0553      	lsls	r3, r2, #21
 800d298:	d527      	bpl.n	800d2ea <__ssputs_r+0x8e>
 800d29a:	4629      	mov	r1, r5
 800d29c:	f7ff fbd0 	bl	800ca40 <_malloc_r>
 800d2a0:	4606      	mov	r6, r0
 800d2a2:	b360      	cbz	r0, 800d2fe <__ssputs_r+0xa2>
 800d2a4:	6921      	ldr	r1, [r4, #16]
 800d2a6:	464a      	mov	r2, r9
 800d2a8:	f7fe fcf9 	bl	800bc9e <memcpy>
 800d2ac:	89a3      	ldrh	r3, [r4, #12]
 800d2ae:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d2b2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d2b6:	81a3      	strh	r3, [r4, #12]
 800d2b8:	6126      	str	r6, [r4, #16]
 800d2ba:	6165      	str	r5, [r4, #20]
 800d2bc:	444e      	add	r6, r9
 800d2be:	eba5 0509 	sub.w	r5, r5, r9
 800d2c2:	6026      	str	r6, [r4, #0]
 800d2c4:	60a5      	str	r5, [r4, #8]
 800d2c6:	463e      	mov	r6, r7
 800d2c8:	42be      	cmp	r6, r7
 800d2ca:	d900      	bls.n	800d2ce <__ssputs_r+0x72>
 800d2cc:	463e      	mov	r6, r7
 800d2ce:	6820      	ldr	r0, [r4, #0]
 800d2d0:	4632      	mov	r2, r6
 800d2d2:	4641      	mov	r1, r8
 800d2d4:	f000 f9c6 	bl	800d664 <memmove>
 800d2d8:	68a3      	ldr	r3, [r4, #8]
 800d2da:	1b9b      	subs	r3, r3, r6
 800d2dc:	60a3      	str	r3, [r4, #8]
 800d2de:	6823      	ldr	r3, [r4, #0]
 800d2e0:	4433      	add	r3, r6
 800d2e2:	6023      	str	r3, [r4, #0]
 800d2e4:	2000      	movs	r0, #0
 800d2e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d2ea:	462a      	mov	r2, r5
 800d2ec:	f000 fa28 	bl	800d740 <_realloc_r>
 800d2f0:	4606      	mov	r6, r0
 800d2f2:	2800      	cmp	r0, #0
 800d2f4:	d1e0      	bne.n	800d2b8 <__ssputs_r+0x5c>
 800d2f6:	6921      	ldr	r1, [r4, #16]
 800d2f8:	4650      	mov	r0, sl
 800d2fa:	f7ff fb2d 	bl	800c958 <_free_r>
 800d2fe:	230c      	movs	r3, #12
 800d300:	f8ca 3000 	str.w	r3, [sl]
 800d304:	89a3      	ldrh	r3, [r4, #12]
 800d306:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d30a:	81a3      	strh	r3, [r4, #12]
 800d30c:	f04f 30ff 	mov.w	r0, #4294967295
 800d310:	e7e9      	b.n	800d2e6 <__ssputs_r+0x8a>
	...

0800d314 <_svfiprintf_r>:
 800d314:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d318:	4698      	mov	r8, r3
 800d31a:	898b      	ldrh	r3, [r1, #12]
 800d31c:	061b      	lsls	r3, r3, #24
 800d31e:	b09d      	sub	sp, #116	@ 0x74
 800d320:	4607      	mov	r7, r0
 800d322:	460d      	mov	r5, r1
 800d324:	4614      	mov	r4, r2
 800d326:	d510      	bpl.n	800d34a <_svfiprintf_r+0x36>
 800d328:	690b      	ldr	r3, [r1, #16]
 800d32a:	b973      	cbnz	r3, 800d34a <_svfiprintf_r+0x36>
 800d32c:	2140      	movs	r1, #64	@ 0x40
 800d32e:	f7ff fb87 	bl	800ca40 <_malloc_r>
 800d332:	6028      	str	r0, [r5, #0]
 800d334:	6128      	str	r0, [r5, #16]
 800d336:	b930      	cbnz	r0, 800d346 <_svfiprintf_r+0x32>
 800d338:	230c      	movs	r3, #12
 800d33a:	603b      	str	r3, [r7, #0]
 800d33c:	f04f 30ff 	mov.w	r0, #4294967295
 800d340:	b01d      	add	sp, #116	@ 0x74
 800d342:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d346:	2340      	movs	r3, #64	@ 0x40
 800d348:	616b      	str	r3, [r5, #20]
 800d34a:	2300      	movs	r3, #0
 800d34c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d34e:	2320      	movs	r3, #32
 800d350:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d354:	f8cd 800c 	str.w	r8, [sp, #12]
 800d358:	2330      	movs	r3, #48	@ 0x30
 800d35a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d4f8 <_svfiprintf_r+0x1e4>
 800d35e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d362:	f04f 0901 	mov.w	r9, #1
 800d366:	4623      	mov	r3, r4
 800d368:	469a      	mov	sl, r3
 800d36a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d36e:	b10a      	cbz	r2, 800d374 <_svfiprintf_r+0x60>
 800d370:	2a25      	cmp	r2, #37	@ 0x25
 800d372:	d1f9      	bne.n	800d368 <_svfiprintf_r+0x54>
 800d374:	ebba 0b04 	subs.w	fp, sl, r4
 800d378:	d00b      	beq.n	800d392 <_svfiprintf_r+0x7e>
 800d37a:	465b      	mov	r3, fp
 800d37c:	4622      	mov	r2, r4
 800d37e:	4629      	mov	r1, r5
 800d380:	4638      	mov	r0, r7
 800d382:	f7ff ff6b 	bl	800d25c <__ssputs_r>
 800d386:	3001      	adds	r0, #1
 800d388:	f000 80a7 	beq.w	800d4da <_svfiprintf_r+0x1c6>
 800d38c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d38e:	445a      	add	r2, fp
 800d390:	9209      	str	r2, [sp, #36]	@ 0x24
 800d392:	f89a 3000 	ldrb.w	r3, [sl]
 800d396:	2b00      	cmp	r3, #0
 800d398:	f000 809f 	beq.w	800d4da <_svfiprintf_r+0x1c6>
 800d39c:	2300      	movs	r3, #0
 800d39e:	f04f 32ff 	mov.w	r2, #4294967295
 800d3a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d3a6:	f10a 0a01 	add.w	sl, sl, #1
 800d3aa:	9304      	str	r3, [sp, #16]
 800d3ac:	9307      	str	r3, [sp, #28]
 800d3ae:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d3b2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d3b4:	4654      	mov	r4, sl
 800d3b6:	2205      	movs	r2, #5
 800d3b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3bc:	484e      	ldr	r0, [pc, #312]	@ (800d4f8 <_svfiprintf_r+0x1e4>)
 800d3be:	f7f2 ff5f 	bl	8000280 <memchr>
 800d3c2:	9a04      	ldr	r2, [sp, #16]
 800d3c4:	b9d8      	cbnz	r0, 800d3fe <_svfiprintf_r+0xea>
 800d3c6:	06d0      	lsls	r0, r2, #27
 800d3c8:	bf44      	itt	mi
 800d3ca:	2320      	movmi	r3, #32
 800d3cc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3d0:	0711      	lsls	r1, r2, #28
 800d3d2:	bf44      	itt	mi
 800d3d4:	232b      	movmi	r3, #43	@ 0x2b
 800d3d6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d3da:	f89a 3000 	ldrb.w	r3, [sl]
 800d3de:	2b2a      	cmp	r3, #42	@ 0x2a
 800d3e0:	d015      	beq.n	800d40e <_svfiprintf_r+0xfa>
 800d3e2:	9a07      	ldr	r2, [sp, #28]
 800d3e4:	4654      	mov	r4, sl
 800d3e6:	2000      	movs	r0, #0
 800d3e8:	f04f 0c0a 	mov.w	ip, #10
 800d3ec:	4621      	mov	r1, r4
 800d3ee:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d3f2:	3b30      	subs	r3, #48	@ 0x30
 800d3f4:	2b09      	cmp	r3, #9
 800d3f6:	d94b      	bls.n	800d490 <_svfiprintf_r+0x17c>
 800d3f8:	b1b0      	cbz	r0, 800d428 <_svfiprintf_r+0x114>
 800d3fa:	9207      	str	r2, [sp, #28]
 800d3fc:	e014      	b.n	800d428 <_svfiprintf_r+0x114>
 800d3fe:	eba0 0308 	sub.w	r3, r0, r8
 800d402:	fa09 f303 	lsl.w	r3, r9, r3
 800d406:	4313      	orrs	r3, r2
 800d408:	9304      	str	r3, [sp, #16]
 800d40a:	46a2      	mov	sl, r4
 800d40c:	e7d2      	b.n	800d3b4 <_svfiprintf_r+0xa0>
 800d40e:	9b03      	ldr	r3, [sp, #12]
 800d410:	1d19      	adds	r1, r3, #4
 800d412:	681b      	ldr	r3, [r3, #0]
 800d414:	9103      	str	r1, [sp, #12]
 800d416:	2b00      	cmp	r3, #0
 800d418:	bfbb      	ittet	lt
 800d41a:	425b      	neglt	r3, r3
 800d41c:	f042 0202 	orrlt.w	r2, r2, #2
 800d420:	9307      	strge	r3, [sp, #28]
 800d422:	9307      	strlt	r3, [sp, #28]
 800d424:	bfb8      	it	lt
 800d426:	9204      	strlt	r2, [sp, #16]
 800d428:	7823      	ldrb	r3, [r4, #0]
 800d42a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d42c:	d10a      	bne.n	800d444 <_svfiprintf_r+0x130>
 800d42e:	7863      	ldrb	r3, [r4, #1]
 800d430:	2b2a      	cmp	r3, #42	@ 0x2a
 800d432:	d132      	bne.n	800d49a <_svfiprintf_r+0x186>
 800d434:	9b03      	ldr	r3, [sp, #12]
 800d436:	1d1a      	adds	r2, r3, #4
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	9203      	str	r2, [sp, #12]
 800d43c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d440:	3402      	adds	r4, #2
 800d442:	9305      	str	r3, [sp, #20]
 800d444:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d508 <_svfiprintf_r+0x1f4>
 800d448:	7821      	ldrb	r1, [r4, #0]
 800d44a:	2203      	movs	r2, #3
 800d44c:	4650      	mov	r0, sl
 800d44e:	f7f2 ff17 	bl	8000280 <memchr>
 800d452:	b138      	cbz	r0, 800d464 <_svfiprintf_r+0x150>
 800d454:	9b04      	ldr	r3, [sp, #16]
 800d456:	eba0 000a 	sub.w	r0, r0, sl
 800d45a:	2240      	movs	r2, #64	@ 0x40
 800d45c:	4082      	lsls	r2, r0
 800d45e:	4313      	orrs	r3, r2
 800d460:	3401      	adds	r4, #1
 800d462:	9304      	str	r3, [sp, #16]
 800d464:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d468:	4824      	ldr	r0, [pc, #144]	@ (800d4fc <_svfiprintf_r+0x1e8>)
 800d46a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d46e:	2206      	movs	r2, #6
 800d470:	f7f2 ff06 	bl	8000280 <memchr>
 800d474:	2800      	cmp	r0, #0
 800d476:	d036      	beq.n	800d4e6 <_svfiprintf_r+0x1d2>
 800d478:	4b21      	ldr	r3, [pc, #132]	@ (800d500 <_svfiprintf_r+0x1ec>)
 800d47a:	bb1b      	cbnz	r3, 800d4c4 <_svfiprintf_r+0x1b0>
 800d47c:	9b03      	ldr	r3, [sp, #12]
 800d47e:	3307      	adds	r3, #7
 800d480:	f023 0307 	bic.w	r3, r3, #7
 800d484:	3308      	adds	r3, #8
 800d486:	9303      	str	r3, [sp, #12]
 800d488:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d48a:	4433      	add	r3, r6
 800d48c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d48e:	e76a      	b.n	800d366 <_svfiprintf_r+0x52>
 800d490:	fb0c 3202 	mla	r2, ip, r2, r3
 800d494:	460c      	mov	r4, r1
 800d496:	2001      	movs	r0, #1
 800d498:	e7a8      	b.n	800d3ec <_svfiprintf_r+0xd8>
 800d49a:	2300      	movs	r3, #0
 800d49c:	3401      	adds	r4, #1
 800d49e:	9305      	str	r3, [sp, #20]
 800d4a0:	4619      	mov	r1, r3
 800d4a2:	f04f 0c0a 	mov.w	ip, #10
 800d4a6:	4620      	mov	r0, r4
 800d4a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d4ac:	3a30      	subs	r2, #48	@ 0x30
 800d4ae:	2a09      	cmp	r2, #9
 800d4b0:	d903      	bls.n	800d4ba <_svfiprintf_r+0x1a6>
 800d4b2:	2b00      	cmp	r3, #0
 800d4b4:	d0c6      	beq.n	800d444 <_svfiprintf_r+0x130>
 800d4b6:	9105      	str	r1, [sp, #20]
 800d4b8:	e7c4      	b.n	800d444 <_svfiprintf_r+0x130>
 800d4ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800d4be:	4604      	mov	r4, r0
 800d4c0:	2301      	movs	r3, #1
 800d4c2:	e7f0      	b.n	800d4a6 <_svfiprintf_r+0x192>
 800d4c4:	ab03      	add	r3, sp, #12
 800d4c6:	9300      	str	r3, [sp, #0]
 800d4c8:	462a      	mov	r2, r5
 800d4ca:	4b0e      	ldr	r3, [pc, #56]	@ (800d504 <_svfiprintf_r+0x1f0>)
 800d4cc:	a904      	add	r1, sp, #16
 800d4ce:	4638      	mov	r0, r7
 800d4d0:	f7fd fe76 	bl	800b1c0 <_printf_float>
 800d4d4:	1c42      	adds	r2, r0, #1
 800d4d6:	4606      	mov	r6, r0
 800d4d8:	d1d6      	bne.n	800d488 <_svfiprintf_r+0x174>
 800d4da:	89ab      	ldrh	r3, [r5, #12]
 800d4dc:	065b      	lsls	r3, r3, #25
 800d4de:	f53f af2d 	bmi.w	800d33c <_svfiprintf_r+0x28>
 800d4e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d4e4:	e72c      	b.n	800d340 <_svfiprintf_r+0x2c>
 800d4e6:	ab03      	add	r3, sp, #12
 800d4e8:	9300      	str	r3, [sp, #0]
 800d4ea:	462a      	mov	r2, r5
 800d4ec:	4b05      	ldr	r3, [pc, #20]	@ (800d504 <_svfiprintf_r+0x1f0>)
 800d4ee:	a904      	add	r1, sp, #16
 800d4f0:	4638      	mov	r0, r7
 800d4f2:	f7fe f8fd 	bl	800b6f0 <_printf_i>
 800d4f6:	e7ed      	b.n	800d4d4 <_svfiprintf_r+0x1c0>
 800d4f8:	0800f338 	.word	0x0800f338
 800d4fc:	0800f342 	.word	0x0800f342
 800d500:	0800b1c1 	.word	0x0800b1c1
 800d504:	0800d25d 	.word	0x0800d25d
 800d508:	0800f33e 	.word	0x0800f33e

0800d50c <__sflush_r>:
 800d50c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d514:	0716      	lsls	r6, r2, #28
 800d516:	4605      	mov	r5, r0
 800d518:	460c      	mov	r4, r1
 800d51a:	d454      	bmi.n	800d5c6 <__sflush_r+0xba>
 800d51c:	684b      	ldr	r3, [r1, #4]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	dc02      	bgt.n	800d528 <__sflush_r+0x1c>
 800d522:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d524:	2b00      	cmp	r3, #0
 800d526:	dd48      	ble.n	800d5ba <__sflush_r+0xae>
 800d528:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d52a:	2e00      	cmp	r6, #0
 800d52c:	d045      	beq.n	800d5ba <__sflush_r+0xae>
 800d52e:	2300      	movs	r3, #0
 800d530:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d534:	682f      	ldr	r7, [r5, #0]
 800d536:	6a21      	ldr	r1, [r4, #32]
 800d538:	602b      	str	r3, [r5, #0]
 800d53a:	d030      	beq.n	800d59e <__sflush_r+0x92>
 800d53c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d53e:	89a3      	ldrh	r3, [r4, #12]
 800d540:	0759      	lsls	r1, r3, #29
 800d542:	d505      	bpl.n	800d550 <__sflush_r+0x44>
 800d544:	6863      	ldr	r3, [r4, #4]
 800d546:	1ad2      	subs	r2, r2, r3
 800d548:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d54a:	b10b      	cbz	r3, 800d550 <__sflush_r+0x44>
 800d54c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d54e:	1ad2      	subs	r2, r2, r3
 800d550:	2300      	movs	r3, #0
 800d552:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d554:	6a21      	ldr	r1, [r4, #32]
 800d556:	4628      	mov	r0, r5
 800d558:	47b0      	blx	r6
 800d55a:	1c43      	adds	r3, r0, #1
 800d55c:	89a3      	ldrh	r3, [r4, #12]
 800d55e:	d106      	bne.n	800d56e <__sflush_r+0x62>
 800d560:	6829      	ldr	r1, [r5, #0]
 800d562:	291d      	cmp	r1, #29
 800d564:	d82b      	bhi.n	800d5be <__sflush_r+0xb2>
 800d566:	4a2a      	ldr	r2, [pc, #168]	@ (800d610 <__sflush_r+0x104>)
 800d568:	410a      	asrs	r2, r1
 800d56a:	07d6      	lsls	r6, r2, #31
 800d56c:	d427      	bmi.n	800d5be <__sflush_r+0xb2>
 800d56e:	2200      	movs	r2, #0
 800d570:	6062      	str	r2, [r4, #4]
 800d572:	04d9      	lsls	r1, r3, #19
 800d574:	6922      	ldr	r2, [r4, #16]
 800d576:	6022      	str	r2, [r4, #0]
 800d578:	d504      	bpl.n	800d584 <__sflush_r+0x78>
 800d57a:	1c42      	adds	r2, r0, #1
 800d57c:	d101      	bne.n	800d582 <__sflush_r+0x76>
 800d57e:	682b      	ldr	r3, [r5, #0]
 800d580:	b903      	cbnz	r3, 800d584 <__sflush_r+0x78>
 800d582:	6560      	str	r0, [r4, #84]	@ 0x54
 800d584:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d586:	602f      	str	r7, [r5, #0]
 800d588:	b1b9      	cbz	r1, 800d5ba <__sflush_r+0xae>
 800d58a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d58e:	4299      	cmp	r1, r3
 800d590:	d002      	beq.n	800d598 <__sflush_r+0x8c>
 800d592:	4628      	mov	r0, r5
 800d594:	f7ff f9e0 	bl	800c958 <_free_r>
 800d598:	2300      	movs	r3, #0
 800d59a:	6363      	str	r3, [r4, #52]	@ 0x34
 800d59c:	e00d      	b.n	800d5ba <__sflush_r+0xae>
 800d59e:	2301      	movs	r3, #1
 800d5a0:	4628      	mov	r0, r5
 800d5a2:	47b0      	blx	r6
 800d5a4:	4602      	mov	r2, r0
 800d5a6:	1c50      	adds	r0, r2, #1
 800d5a8:	d1c9      	bne.n	800d53e <__sflush_r+0x32>
 800d5aa:	682b      	ldr	r3, [r5, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d0c6      	beq.n	800d53e <__sflush_r+0x32>
 800d5b0:	2b1d      	cmp	r3, #29
 800d5b2:	d001      	beq.n	800d5b8 <__sflush_r+0xac>
 800d5b4:	2b16      	cmp	r3, #22
 800d5b6:	d11e      	bne.n	800d5f6 <__sflush_r+0xea>
 800d5b8:	602f      	str	r7, [r5, #0]
 800d5ba:	2000      	movs	r0, #0
 800d5bc:	e022      	b.n	800d604 <__sflush_r+0xf8>
 800d5be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5c2:	b21b      	sxth	r3, r3
 800d5c4:	e01b      	b.n	800d5fe <__sflush_r+0xf2>
 800d5c6:	690f      	ldr	r7, [r1, #16]
 800d5c8:	2f00      	cmp	r7, #0
 800d5ca:	d0f6      	beq.n	800d5ba <__sflush_r+0xae>
 800d5cc:	0793      	lsls	r3, r2, #30
 800d5ce:	680e      	ldr	r6, [r1, #0]
 800d5d0:	bf08      	it	eq
 800d5d2:	694b      	ldreq	r3, [r1, #20]
 800d5d4:	600f      	str	r7, [r1, #0]
 800d5d6:	bf18      	it	ne
 800d5d8:	2300      	movne	r3, #0
 800d5da:	eba6 0807 	sub.w	r8, r6, r7
 800d5de:	608b      	str	r3, [r1, #8]
 800d5e0:	f1b8 0f00 	cmp.w	r8, #0
 800d5e4:	dde9      	ble.n	800d5ba <__sflush_r+0xae>
 800d5e6:	6a21      	ldr	r1, [r4, #32]
 800d5e8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d5ea:	4643      	mov	r3, r8
 800d5ec:	463a      	mov	r2, r7
 800d5ee:	4628      	mov	r0, r5
 800d5f0:	47b0      	blx	r6
 800d5f2:	2800      	cmp	r0, #0
 800d5f4:	dc08      	bgt.n	800d608 <__sflush_r+0xfc>
 800d5f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d5fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d5fe:	81a3      	strh	r3, [r4, #12]
 800d600:	f04f 30ff 	mov.w	r0, #4294967295
 800d604:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d608:	4407      	add	r7, r0
 800d60a:	eba8 0800 	sub.w	r8, r8, r0
 800d60e:	e7e7      	b.n	800d5e0 <__sflush_r+0xd4>
 800d610:	dfbffffe 	.word	0xdfbffffe

0800d614 <_fflush_r>:
 800d614:	b538      	push	{r3, r4, r5, lr}
 800d616:	690b      	ldr	r3, [r1, #16]
 800d618:	4605      	mov	r5, r0
 800d61a:	460c      	mov	r4, r1
 800d61c:	b913      	cbnz	r3, 800d624 <_fflush_r+0x10>
 800d61e:	2500      	movs	r5, #0
 800d620:	4628      	mov	r0, r5
 800d622:	bd38      	pop	{r3, r4, r5, pc}
 800d624:	b118      	cbz	r0, 800d62e <_fflush_r+0x1a>
 800d626:	6a03      	ldr	r3, [r0, #32]
 800d628:	b90b      	cbnz	r3, 800d62e <_fflush_r+0x1a>
 800d62a:	f7fe fa0d 	bl	800ba48 <__sinit>
 800d62e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d0f3      	beq.n	800d61e <_fflush_r+0xa>
 800d636:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d638:	07d0      	lsls	r0, r2, #31
 800d63a:	d404      	bmi.n	800d646 <_fflush_r+0x32>
 800d63c:	0599      	lsls	r1, r3, #22
 800d63e:	d402      	bmi.n	800d646 <_fflush_r+0x32>
 800d640:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d642:	f7fe fb2a 	bl	800bc9a <__retarget_lock_acquire_recursive>
 800d646:	4628      	mov	r0, r5
 800d648:	4621      	mov	r1, r4
 800d64a:	f7ff ff5f 	bl	800d50c <__sflush_r>
 800d64e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d650:	07da      	lsls	r2, r3, #31
 800d652:	4605      	mov	r5, r0
 800d654:	d4e4      	bmi.n	800d620 <_fflush_r+0xc>
 800d656:	89a3      	ldrh	r3, [r4, #12]
 800d658:	059b      	lsls	r3, r3, #22
 800d65a:	d4e1      	bmi.n	800d620 <_fflush_r+0xc>
 800d65c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d65e:	f7fe fb1d 	bl	800bc9c <__retarget_lock_release_recursive>
 800d662:	e7dd      	b.n	800d620 <_fflush_r+0xc>

0800d664 <memmove>:
 800d664:	4288      	cmp	r0, r1
 800d666:	b510      	push	{r4, lr}
 800d668:	eb01 0402 	add.w	r4, r1, r2
 800d66c:	d902      	bls.n	800d674 <memmove+0x10>
 800d66e:	4284      	cmp	r4, r0
 800d670:	4623      	mov	r3, r4
 800d672:	d807      	bhi.n	800d684 <memmove+0x20>
 800d674:	1e43      	subs	r3, r0, #1
 800d676:	42a1      	cmp	r1, r4
 800d678:	d008      	beq.n	800d68c <memmove+0x28>
 800d67a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d67e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d682:	e7f8      	b.n	800d676 <memmove+0x12>
 800d684:	4402      	add	r2, r0
 800d686:	4601      	mov	r1, r0
 800d688:	428a      	cmp	r2, r1
 800d68a:	d100      	bne.n	800d68e <memmove+0x2a>
 800d68c:	bd10      	pop	{r4, pc}
 800d68e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d692:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d696:	e7f7      	b.n	800d688 <memmove+0x24>

0800d698 <_sbrk_r>:
 800d698:	b538      	push	{r3, r4, r5, lr}
 800d69a:	4d06      	ldr	r5, [pc, #24]	@ (800d6b4 <_sbrk_r+0x1c>)
 800d69c:	2300      	movs	r3, #0
 800d69e:	4604      	mov	r4, r0
 800d6a0:	4608      	mov	r0, r1
 800d6a2:	602b      	str	r3, [r5, #0]
 800d6a4:	f001 faa6 	bl	800ebf4 <_sbrk>
 800d6a8:	1c43      	adds	r3, r0, #1
 800d6aa:	d102      	bne.n	800d6b2 <_sbrk_r+0x1a>
 800d6ac:	682b      	ldr	r3, [r5, #0]
 800d6ae:	b103      	cbz	r3, 800d6b2 <_sbrk_r+0x1a>
 800d6b0:	6023      	str	r3, [r4, #0]
 800d6b2:	bd38      	pop	{r3, r4, r5, pc}
 800d6b4:	20013d10 	.word	0x20013d10

0800d6b8 <__assert_func>:
 800d6b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d6ba:	4614      	mov	r4, r2
 800d6bc:	461a      	mov	r2, r3
 800d6be:	4b09      	ldr	r3, [pc, #36]	@ (800d6e4 <__assert_func+0x2c>)
 800d6c0:	681b      	ldr	r3, [r3, #0]
 800d6c2:	4605      	mov	r5, r0
 800d6c4:	68d8      	ldr	r0, [r3, #12]
 800d6c6:	b954      	cbnz	r4, 800d6de <__assert_func+0x26>
 800d6c8:	4b07      	ldr	r3, [pc, #28]	@ (800d6e8 <__assert_func+0x30>)
 800d6ca:	461c      	mov	r4, r3
 800d6cc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d6d0:	9100      	str	r1, [sp, #0]
 800d6d2:	462b      	mov	r3, r5
 800d6d4:	4905      	ldr	r1, [pc, #20]	@ (800d6ec <__assert_func+0x34>)
 800d6d6:	f000 f86f 	bl	800d7b8 <fiprintf>
 800d6da:	f000 f87f 	bl	800d7dc <abort>
 800d6de:	4b04      	ldr	r3, [pc, #16]	@ (800d6f0 <__assert_func+0x38>)
 800d6e0:	e7f4      	b.n	800d6cc <__assert_func+0x14>
 800d6e2:	bf00      	nop
 800d6e4:	20000020 	.word	0x20000020
 800d6e8:	0800f38e 	.word	0x0800f38e
 800d6ec:	0800f360 	.word	0x0800f360
 800d6f0:	0800f353 	.word	0x0800f353

0800d6f4 <_calloc_r>:
 800d6f4:	b570      	push	{r4, r5, r6, lr}
 800d6f6:	fba1 5402 	umull	r5, r4, r1, r2
 800d6fa:	b93c      	cbnz	r4, 800d70c <_calloc_r+0x18>
 800d6fc:	4629      	mov	r1, r5
 800d6fe:	f7ff f99f 	bl	800ca40 <_malloc_r>
 800d702:	4606      	mov	r6, r0
 800d704:	b928      	cbnz	r0, 800d712 <_calloc_r+0x1e>
 800d706:	2600      	movs	r6, #0
 800d708:	4630      	mov	r0, r6
 800d70a:	bd70      	pop	{r4, r5, r6, pc}
 800d70c:	220c      	movs	r2, #12
 800d70e:	6002      	str	r2, [r0, #0]
 800d710:	e7f9      	b.n	800d706 <_calloc_r+0x12>
 800d712:	462a      	mov	r2, r5
 800d714:	4621      	mov	r1, r4
 800d716:	f7fe fa54 	bl	800bbc2 <memset>
 800d71a:	e7f5      	b.n	800d708 <_calloc_r+0x14>

0800d71c <__ascii_mbtowc>:
 800d71c:	b082      	sub	sp, #8
 800d71e:	b901      	cbnz	r1, 800d722 <__ascii_mbtowc+0x6>
 800d720:	a901      	add	r1, sp, #4
 800d722:	b142      	cbz	r2, 800d736 <__ascii_mbtowc+0x1a>
 800d724:	b14b      	cbz	r3, 800d73a <__ascii_mbtowc+0x1e>
 800d726:	7813      	ldrb	r3, [r2, #0]
 800d728:	600b      	str	r3, [r1, #0]
 800d72a:	7812      	ldrb	r2, [r2, #0]
 800d72c:	1e10      	subs	r0, r2, #0
 800d72e:	bf18      	it	ne
 800d730:	2001      	movne	r0, #1
 800d732:	b002      	add	sp, #8
 800d734:	4770      	bx	lr
 800d736:	4610      	mov	r0, r2
 800d738:	e7fb      	b.n	800d732 <__ascii_mbtowc+0x16>
 800d73a:	f06f 0001 	mvn.w	r0, #1
 800d73e:	e7f8      	b.n	800d732 <__ascii_mbtowc+0x16>

0800d740 <_realloc_r>:
 800d740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d744:	4680      	mov	r8, r0
 800d746:	4615      	mov	r5, r2
 800d748:	460c      	mov	r4, r1
 800d74a:	b921      	cbnz	r1, 800d756 <_realloc_r+0x16>
 800d74c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d750:	4611      	mov	r1, r2
 800d752:	f7ff b975 	b.w	800ca40 <_malloc_r>
 800d756:	b92a      	cbnz	r2, 800d764 <_realloc_r+0x24>
 800d758:	f7ff f8fe 	bl	800c958 <_free_r>
 800d75c:	2400      	movs	r4, #0
 800d75e:	4620      	mov	r0, r4
 800d760:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d764:	f000 f841 	bl	800d7ea <_malloc_usable_size_r>
 800d768:	4285      	cmp	r5, r0
 800d76a:	4606      	mov	r6, r0
 800d76c:	d802      	bhi.n	800d774 <_realloc_r+0x34>
 800d76e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d772:	d8f4      	bhi.n	800d75e <_realloc_r+0x1e>
 800d774:	4629      	mov	r1, r5
 800d776:	4640      	mov	r0, r8
 800d778:	f7ff f962 	bl	800ca40 <_malloc_r>
 800d77c:	4607      	mov	r7, r0
 800d77e:	2800      	cmp	r0, #0
 800d780:	d0ec      	beq.n	800d75c <_realloc_r+0x1c>
 800d782:	42b5      	cmp	r5, r6
 800d784:	462a      	mov	r2, r5
 800d786:	4621      	mov	r1, r4
 800d788:	bf28      	it	cs
 800d78a:	4632      	movcs	r2, r6
 800d78c:	f7fe fa87 	bl	800bc9e <memcpy>
 800d790:	4621      	mov	r1, r4
 800d792:	4640      	mov	r0, r8
 800d794:	f7ff f8e0 	bl	800c958 <_free_r>
 800d798:	463c      	mov	r4, r7
 800d79a:	e7e0      	b.n	800d75e <_realloc_r+0x1e>

0800d79c <__ascii_wctomb>:
 800d79c:	4603      	mov	r3, r0
 800d79e:	4608      	mov	r0, r1
 800d7a0:	b141      	cbz	r1, 800d7b4 <__ascii_wctomb+0x18>
 800d7a2:	2aff      	cmp	r2, #255	@ 0xff
 800d7a4:	d904      	bls.n	800d7b0 <__ascii_wctomb+0x14>
 800d7a6:	228a      	movs	r2, #138	@ 0x8a
 800d7a8:	601a      	str	r2, [r3, #0]
 800d7aa:	f04f 30ff 	mov.w	r0, #4294967295
 800d7ae:	4770      	bx	lr
 800d7b0:	700a      	strb	r2, [r1, #0]
 800d7b2:	2001      	movs	r0, #1
 800d7b4:	4770      	bx	lr
	...

0800d7b8 <fiprintf>:
 800d7b8:	b40e      	push	{r1, r2, r3}
 800d7ba:	b503      	push	{r0, r1, lr}
 800d7bc:	4601      	mov	r1, r0
 800d7be:	ab03      	add	r3, sp, #12
 800d7c0:	4805      	ldr	r0, [pc, #20]	@ (800d7d8 <fiprintf+0x20>)
 800d7c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800d7c6:	6800      	ldr	r0, [r0, #0]
 800d7c8:	9301      	str	r3, [sp, #4]
 800d7ca:	f000 f83f 	bl	800d84c <_vfiprintf_r>
 800d7ce:	b002      	add	sp, #8
 800d7d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7d4:	b003      	add	sp, #12
 800d7d6:	4770      	bx	lr
 800d7d8:	20000020 	.word	0x20000020

0800d7dc <abort>:
 800d7dc:	b508      	push	{r3, lr}
 800d7de:	2006      	movs	r0, #6
 800d7e0:	f000 fa08 	bl	800dbf4 <raise>
 800d7e4:	2001      	movs	r0, #1
 800d7e6:	f7f5 f9bb 	bl	8002b60 <_exit>

0800d7ea <_malloc_usable_size_r>:
 800d7ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d7ee:	1f18      	subs	r0, r3, #4
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	bfbc      	itt	lt
 800d7f4:	580b      	ldrlt	r3, [r1, r0]
 800d7f6:	18c0      	addlt	r0, r0, r3
 800d7f8:	4770      	bx	lr

0800d7fa <__sfputc_r>:
 800d7fa:	6893      	ldr	r3, [r2, #8]
 800d7fc:	3b01      	subs	r3, #1
 800d7fe:	2b00      	cmp	r3, #0
 800d800:	b410      	push	{r4}
 800d802:	6093      	str	r3, [r2, #8]
 800d804:	da08      	bge.n	800d818 <__sfputc_r+0x1e>
 800d806:	6994      	ldr	r4, [r2, #24]
 800d808:	42a3      	cmp	r3, r4
 800d80a:	db01      	blt.n	800d810 <__sfputc_r+0x16>
 800d80c:	290a      	cmp	r1, #10
 800d80e:	d103      	bne.n	800d818 <__sfputc_r+0x1e>
 800d810:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d814:	f000 b932 	b.w	800da7c <__swbuf_r>
 800d818:	6813      	ldr	r3, [r2, #0]
 800d81a:	1c58      	adds	r0, r3, #1
 800d81c:	6010      	str	r0, [r2, #0]
 800d81e:	7019      	strb	r1, [r3, #0]
 800d820:	4608      	mov	r0, r1
 800d822:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d826:	4770      	bx	lr

0800d828 <__sfputs_r>:
 800d828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d82a:	4606      	mov	r6, r0
 800d82c:	460f      	mov	r7, r1
 800d82e:	4614      	mov	r4, r2
 800d830:	18d5      	adds	r5, r2, r3
 800d832:	42ac      	cmp	r4, r5
 800d834:	d101      	bne.n	800d83a <__sfputs_r+0x12>
 800d836:	2000      	movs	r0, #0
 800d838:	e007      	b.n	800d84a <__sfputs_r+0x22>
 800d83a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d83e:	463a      	mov	r2, r7
 800d840:	4630      	mov	r0, r6
 800d842:	f7ff ffda 	bl	800d7fa <__sfputc_r>
 800d846:	1c43      	adds	r3, r0, #1
 800d848:	d1f3      	bne.n	800d832 <__sfputs_r+0xa>
 800d84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d84c <_vfiprintf_r>:
 800d84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d850:	460d      	mov	r5, r1
 800d852:	b09d      	sub	sp, #116	@ 0x74
 800d854:	4614      	mov	r4, r2
 800d856:	4698      	mov	r8, r3
 800d858:	4606      	mov	r6, r0
 800d85a:	b118      	cbz	r0, 800d864 <_vfiprintf_r+0x18>
 800d85c:	6a03      	ldr	r3, [r0, #32]
 800d85e:	b90b      	cbnz	r3, 800d864 <_vfiprintf_r+0x18>
 800d860:	f7fe f8f2 	bl	800ba48 <__sinit>
 800d864:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d866:	07d9      	lsls	r1, r3, #31
 800d868:	d405      	bmi.n	800d876 <_vfiprintf_r+0x2a>
 800d86a:	89ab      	ldrh	r3, [r5, #12]
 800d86c:	059a      	lsls	r2, r3, #22
 800d86e:	d402      	bmi.n	800d876 <_vfiprintf_r+0x2a>
 800d870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d872:	f7fe fa12 	bl	800bc9a <__retarget_lock_acquire_recursive>
 800d876:	89ab      	ldrh	r3, [r5, #12]
 800d878:	071b      	lsls	r3, r3, #28
 800d87a:	d501      	bpl.n	800d880 <_vfiprintf_r+0x34>
 800d87c:	692b      	ldr	r3, [r5, #16]
 800d87e:	b99b      	cbnz	r3, 800d8a8 <_vfiprintf_r+0x5c>
 800d880:	4629      	mov	r1, r5
 800d882:	4630      	mov	r0, r6
 800d884:	f000 f938 	bl	800daf8 <__swsetup_r>
 800d888:	b170      	cbz	r0, 800d8a8 <_vfiprintf_r+0x5c>
 800d88a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d88c:	07dc      	lsls	r4, r3, #31
 800d88e:	d504      	bpl.n	800d89a <_vfiprintf_r+0x4e>
 800d890:	f04f 30ff 	mov.w	r0, #4294967295
 800d894:	b01d      	add	sp, #116	@ 0x74
 800d896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d89a:	89ab      	ldrh	r3, [r5, #12]
 800d89c:	0598      	lsls	r0, r3, #22
 800d89e:	d4f7      	bmi.n	800d890 <_vfiprintf_r+0x44>
 800d8a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d8a2:	f7fe f9fb 	bl	800bc9c <__retarget_lock_release_recursive>
 800d8a6:	e7f3      	b.n	800d890 <_vfiprintf_r+0x44>
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800d8ac:	2320      	movs	r3, #32
 800d8ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d8b2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d8b6:	2330      	movs	r3, #48	@ 0x30
 800d8b8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800da68 <_vfiprintf_r+0x21c>
 800d8bc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d8c0:	f04f 0901 	mov.w	r9, #1
 800d8c4:	4623      	mov	r3, r4
 800d8c6:	469a      	mov	sl, r3
 800d8c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8cc:	b10a      	cbz	r2, 800d8d2 <_vfiprintf_r+0x86>
 800d8ce:	2a25      	cmp	r2, #37	@ 0x25
 800d8d0:	d1f9      	bne.n	800d8c6 <_vfiprintf_r+0x7a>
 800d8d2:	ebba 0b04 	subs.w	fp, sl, r4
 800d8d6:	d00b      	beq.n	800d8f0 <_vfiprintf_r+0xa4>
 800d8d8:	465b      	mov	r3, fp
 800d8da:	4622      	mov	r2, r4
 800d8dc:	4629      	mov	r1, r5
 800d8de:	4630      	mov	r0, r6
 800d8e0:	f7ff ffa2 	bl	800d828 <__sfputs_r>
 800d8e4:	3001      	adds	r0, #1
 800d8e6:	f000 80a7 	beq.w	800da38 <_vfiprintf_r+0x1ec>
 800d8ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d8ec:	445a      	add	r2, fp
 800d8ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800d8f0:	f89a 3000 	ldrb.w	r3, [sl]
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	f000 809f 	beq.w	800da38 <_vfiprintf_r+0x1ec>
 800d8fa:	2300      	movs	r3, #0
 800d8fc:	f04f 32ff 	mov.w	r2, #4294967295
 800d900:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d904:	f10a 0a01 	add.w	sl, sl, #1
 800d908:	9304      	str	r3, [sp, #16]
 800d90a:	9307      	str	r3, [sp, #28]
 800d90c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d910:	931a      	str	r3, [sp, #104]	@ 0x68
 800d912:	4654      	mov	r4, sl
 800d914:	2205      	movs	r2, #5
 800d916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d91a:	4853      	ldr	r0, [pc, #332]	@ (800da68 <_vfiprintf_r+0x21c>)
 800d91c:	f7f2 fcb0 	bl	8000280 <memchr>
 800d920:	9a04      	ldr	r2, [sp, #16]
 800d922:	b9d8      	cbnz	r0, 800d95c <_vfiprintf_r+0x110>
 800d924:	06d1      	lsls	r1, r2, #27
 800d926:	bf44      	itt	mi
 800d928:	2320      	movmi	r3, #32
 800d92a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d92e:	0713      	lsls	r3, r2, #28
 800d930:	bf44      	itt	mi
 800d932:	232b      	movmi	r3, #43	@ 0x2b
 800d934:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d938:	f89a 3000 	ldrb.w	r3, [sl]
 800d93c:	2b2a      	cmp	r3, #42	@ 0x2a
 800d93e:	d015      	beq.n	800d96c <_vfiprintf_r+0x120>
 800d940:	9a07      	ldr	r2, [sp, #28]
 800d942:	4654      	mov	r4, sl
 800d944:	2000      	movs	r0, #0
 800d946:	f04f 0c0a 	mov.w	ip, #10
 800d94a:	4621      	mov	r1, r4
 800d94c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d950:	3b30      	subs	r3, #48	@ 0x30
 800d952:	2b09      	cmp	r3, #9
 800d954:	d94b      	bls.n	800d9ee <_vfiprintf_r+0x1a2>
 800d956:	b1b0      	cbz	r0, 800d986 <_vfiprintf_r+0x13a>
 800d958:	9207      	str	r2, [sp, #28]
 800d95a:	e014      	b.n	800d986 <_vfiprintf_r+0x13a>
 800d95c:	eba0 0308 	sub.w	r3, r0, r8
 800d960:	fa09 f303 	lsl.w	r3, r9, r3
 800d964:	4313      	orrs	r3, r2
 800d966:	9304      	str	r3, [sp, #16]
 800d968:	46a2      	mov	sl, r4
 800d96a:	e7d2      	b.n	800d912 <_vfiprintf_r+0xc6>
 800d96c:	9b03      	ldr	r3, [sp, #12]
 800d96e:	1d19      	adds	r1, r3, #4
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	9103      	str	r1, [sp, #12]
 800d974:	2b00      	cmp	r3, #0
 800d976:	bfbb      	ittet	lt
 800d978:	425b      	neglt	r3, r3
 800d97a:	f042 0202 	orrlt.w	r2, r2, #2
 800d97e:	9307      	strge	r3, [sp, #28]
 800d980:	9307      	strlt	r3, [sp, #28]
 800d982:	bfb8      	it	lt
 800d984:	9204      	strlt	r2, [sp, #16]
 800d986:	7823      	ldrb	r3, [r4, #0]
 800d988:	2b2e      	cmp	r3, #46	@ 0x2e
 800d98a:	d10a      	bne.n	800d9a2 <_vfiprintf_r+0x156>
 800d98c:	7863      	ldrb	r3, [r4, #1]
 800d98e:	2b2a      	cmp	r3, #42	@ 0x2a
 800d990:	d132      	bne.n	800d9f8 <_vfiprintf_r+0x1ac>
 800d992:	9b03      	ldr	r3, [sp, #12]
 800d994:	1d1a      	adds	r2, r3, #4
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	9203      	str	r2, [sp, #12]
 800d99a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d99e:	3402      	adds	r4, #2
 800d9a0:	9305      	str	r3, [sp, #20]
 800d9a2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800da78 <_vfiprintf_r+0x22c>
 800d9a6:	7821      	ldrb	r1, [r4, #0]
 800d9a8:	2203      	movs	r2, #3
 800d9aa:	4650      	mov	r0, sl
 800d9ac:	f7f2 fc68 	bl	8000280 <memchr>
 800d9b0:	b138      	cbz	r0, 800d9c2 <_vfiprintf_r+0x176>
 800d9b2:	9b04      	ldr	r3, [sp, #16]
 800d9b4:	eba0 000a 	sub.w	r0, r0, sl
 800d9b8:	2240      	movs	r2, #64	@ 0x40
 800d9ba:	4082      	lsls	r2, r0
 800d9bc:	4313      	orrs	r3, r2
 800d9be:	3401      	adds	r4, #1
 800d9c0:	9304      	str	r3, [sp, #16]
 800d9c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9c6:	4829      	ldr	r0, [pc, #164]	@ (800da6c <_vfiprintf_r+0x220>)
 800d9c8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d9cc:	2206      	movs	r2, #6
 800d9ce:	f7f2 fc57 	bl	8000280 <memchr>
 800d9d2:	2800      	cmp	r0, #0
 800d9d4:	d03f      	beq.n	800da56 <_vfiprintf_r+0x20a>
 800d9d6:	4b26      	ldr	r3, [pc, #152]	@ (800da70 <_vfiprintf_r+0x224>)
 800d9d8:	bb1b      	cbnz	r3, 800da22 <_vfiprintf_r+0x1d6>
 800d9da:	9b03      	ldr	r3, [sp, #12]
 800d9dc:	3307      	adds	r3, #7
 800d9de:	f023 0307 	bic.w	r3, r3, #7
 800d9e2:	3308      	adds	r3, #8
 800d9e4:	9303      	str	r3, [sp, #12]
 800d9e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d9e8:	443b      	add	r3, r7
 800d9ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800d9ec:	e76a      	b.n	800d8c4 <_vfiprintf_r+0x78>
 800d9ee:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9f2:	460c      	mov	r4, r1
 800d9f4:	2001      	movs	r0, #1
 800d9f6:	e7a8      	b.n	800d94a <_vfiprintf_r+0xfe>
 800d9f8:	2300      	movs	r3, #0
 800d9fa:	3401      	adds	r4, #1
 800d9fc:	9305      	str	r3, [sp, #20]
 800d9fe:	4619      	mov	r1, r3
 800da00:	f04f 0c0a 	mov.w	ip, #10
 800da04:	4620      	mov	r0, r4
 800da06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da0a:	3a30      	subs	r2, #48	@ 0x30
 800da0c:	2a09      	cmp	r2, #9
 800da0e:	d903      	bls.n	800da18 <_vfiprintf_r+0x1cc>
 800da10:	2b00      	cmp	r3, #0
 800da12:	d0c6      	beq.n	800d9a2 <_vfiprintf_r+0x156>
 800da14:	9105      	str	r1, [sp, #20]
 800da16:	e7c4      	b.n	800d9a2 <_vfiprintf_r+0x156>
 800da18:	fb0c 2101 	mla	r1, ip, r1, r2
 800da1c:	4604      	mov	r4, r0
 800da1e:	2301      	movs	r3, #1
 800da20:	e7f0      	b.n	800da04 <_vfiprintf_r+0x1b8>
 800da22:	ab03      	add	r3, sp, #12
 800da24:	9300      	str	r3, [sp, #0]
 800da26:	462a      	mov	r2, r5
 800da28:	4b12      	ldr	r3, [pc, #72]	@ (800da74 <_vfiprintf_r+0x228>)
 800da2a:	a904      	add	r1, sp, #16
 800da2c:	4630      	mov	r0, r6
 800da2e:	f7fd fbc7 	bl	800b1c0 <_printf_float>
 800da32:	4607      	mov	r7, r0
 800da34:	1c78      	adds	r0, r7, #1
 800da36:	d1d6      	bne.n	800d9e6 <_vfiprintf_r+0x19a>
 800da38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800da3a:	07d9      	lsls	r1, r3, #31
 800da3c:	d405      	bmi.n	800da4a <_vfiprintf_r+0x1fe>
 800da3e:	89ab      	ldrh	r3, [r5, #12]
 800da40:	059a      	lsls	r2, r3, #22
 800da42:	d402      	bmi.n	800da4a <_vfiprintf_r+0x1fe>
 800da44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800da46:	f7fe f929 	bl	800bc9c <__retarget_lock_release_recursive>
 800da4a:	89ab      	ldrh	r3, [r5, #12]
 800da4c:	065b      	lsls	r3, r3, #25
 800da4e:	f53f af1f 	bmi.w	800d890 <_vfiprintf_r+0x44>
 800da52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800da54:	e71e      	b.n	800d894 <_vfiprintf_r+0x48>
 800da56:	ab03      	add	r3, sp, #12
 800da58:	9300      	str	r3, [sp, #0]
 800da5a:	462a      	mov	r2, r5
 800da5c:	4b05      	ldr	r3, [pc, #20]	@ (800da74 <_vfiprintf_r+0x228>)
 800da5e:	a904      	add	r1, sp, #16
 800da60:	4630      	mov	r0, r6
 800da62:	f7fd fe45 	bl	800b6f0 <_printf_i>
 800da66:	e7e4      	b.n	800da32 <_vfiprintf_r+0x1e6>
 800da68:	0800f338 	.word	0x0800f338
 800da6c:	0800f342 	.word	0x0800f342
 800da70:	0800b1c1 	.word	0x0800b1c1
 800da74:	0800d829 	.word	0x0800d829
 800da78:	0800f33e 	.word	0x0800f33e

0800da7c <__swbuf_r>:
 800da7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da7e:	460e      	mov	r6, r1
 800da80:	4614      	mov	r4, r2
 800da82:	4605      	mov	r5, r0
 800da84:	b118      	cbz	r0, 800da8e <__swbuf_r+0x12>
 800da86:	6a03      	ldr	r3, [r0, #32]
 800da88:	b90b      	cbnz	r3, 800da8e <__swbuf_r+0x12>
 800da8a:	f7fd ffdd 	bl	800ba48 <__sinit>
 800da8e:	69a3      	ldr	r3, [r4, #24]
 800da90:	60a3      	str	r3, [r4, #8]
 800da92:	89a3      	ldrh	r3, [r4, #12]
 800da94:	071a      	lsls	r2, r3, #28
 800da96:	d501      	bpl.n	800da9c <__swbuf_r+0x20>
 800da98:	6923      	ldr	r3, [r4, #16]
 800da9a:	b943      	cbnz	r3, 800daae <__swbuf_r+0x32>
 800da9c:	4621      	mov	r1, r4
 800da9e:	4628      	mov	r0, r5
 800daa0:	f000 f82a 	bl	800daf8 <__swsetup_r>
 800daa4:	b118      	cbz	r0, 800daae <__swbuf_r+0x32>
 800daa6:	f04f 37ff 	mov.w	r7, #4294967295
 800daaa:	4638      	mov	r0, r7
 800daac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800daae:	6823      	ldr	r3, [r4, #0]
 800dab0:	6922      	ldr	r2, [r4, #16]
 800dab2:	1a98      	subs	r0, r3, r2
 800dab4:	6963      	ldr	r3, [r4, #20]
 800dab6:	b2f6      	uxtb	r6, r6
 800dab8:	4283      	cmp	r3, r0
 800daba:	4637      	mov	r7, r6
 800dabc:	dc05      	bgt.n	800daca <__swbuf_r+0x4e>
 800dabe:	4621      	mov	r1, r4
 800dac0:	4628      	mov	r0, r5
 800dac2:	f7ff fda7 	bl	800d614 <_fflush_r>
 800dac6:	2800      	cmp	r0, #0
 800dac8:	d1ed      	bne.n	800daa6 <__swbuf_r+0x2a>
 800daca:	68a3      	ldr	r3, [r4, #8]
 800dacc:	3b01      	subs	r3, #1
 800dace:	60a3      	str	r3, [r4, #8]
 800dad0:	6823      	ldr	r3, [r4, #0]
 800dad2:	1c5a      	adds	r2, r3, #1
 800dad4:	6022      	str	r2, [r4, #0]
 800dad6:	701e      	strb	r6, [r3, #0]
 800dad8:	6962      	ldr	r2, [r4, #20]
 800dada:	1c43      	adds	r3, r0, #1
 800dadc:	429a      	cmp	r2, r3
 800dade:	d004      	beq.n	800daea <__swbuf_r+0x6e>
 800dae0:	89a3      	ldrh	r3, [r4, #12]
 800dae2:	07db      	lsls	r3, r3, #31
 800dae4:	d5e1      	bpl.n	800daaa <__swbuf_r+0x2e>
 800dae6:	2e0a      	cmp	r6, #10
 800dae8:	d1df      	bne.n	800daaa <__swbuf_r+0x2e>
 800daea:	4621      	mov	r1, r4
 800daec:	4628      	mov	r0, r5
 800daee:	f7ff fd91 	bl	800d614 <_fflush_r>
 800daf2:	2800      	cmp	r0, #0
 800daf4:	d0d9      	beq.n	800daaa <__swbuf_r+0x2e>
 800daf6:	e7d6      	b.n	800daa6 <__swbuf_r+0x2a>

0800daf8 <__swsetup_r>:
 800daf8:	b538      	push	{r3, r4, r5, lr}
 800dafa:	4b29      	ldr	r3, [pc, #164]	@ (800dba0 <__swsetup_r+0xa8>)
 800dafc:	4605      	mov	r5, r0
 800dafe:	6818      	ldr	r0, [r3, #0]
 800db00:	460c      	mov	r4, r1
 800db02:	b118      	cbz	r0, 800db0c <__swsetup_r+0x14>
 800db04:	6a03      	ldr	r3, [r0, #32]
 800db06:	b90b      	cbnz	r3, 800db0c <__swsetup_r+0x14>
 800db08:	f7fd ff9e 	bl	800ba48 <__sinit>
 800db0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db10:	0719      	lsls	r1, r3, #28
 800db12:	d422      	bmi.n	800db5a <__swsetup_r+0x62>
 800db14:	06da      	lsls	r2, r3, #27
 800db16:	d407      	bmi.n	800db28 <__swsetup_r+0x30>
 800db18:	2209      	movs	r2, #9
 800db1a:	602a      	str	r2, [r5, #0]
 800db1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800db20:	81a3      	strh	r3, [r4, #12]
 800db22:	f04f 30ff 	mov.w	r0, #4294967295
 800db26:	e033      	b.n	800db90 <__swsetup_r+0x98>
 800db28:	0758      	lsls	r0, r3, #29
 800db2a:	d512      	bpl.n	800db52 <__swsetup_r+0x5a>
 800db2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db2e:	b141      	cbz	r1, 800db42 <__swsetup_r+0x4a>
 800db30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800db34:	4299      	cmp	r1, r3
 800db36:	d002      	beq.n	800db3e <__swsetup_r+0x46>
 800db38:	4628      	mov	r0, r5
 800db3a:	f7fe ff0d 	bl	800c958 <_free_r>
 800db3e:	2300      	movs	r3, #0
 800db40:	6363      	str	r3, [r4, #52]	@ 0x34
 800db42:	89a3      	ldrh	r3, [r4, #12]
 800db44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800db48:	81a3      	strh	r3, [r4, #12]
 800db4a:	2300      	movs	r3, #0
 800db4c:	6063      	str	r3, [r4, #4]
 800db4e:	6923      	ldr	r3, [r4, #16]
 800db50:	6023      	str	r3, [r4, #0]
 800db52:	89a3      	ldrh	r3, [r4, #12]
 800db54:	f043 0308 	orr.w	r3, r3, #8
 800db58:	81a3      	strh	r3, [r4, #12]
 800db5a:	6923      	ldr	r3, [r4, #16]
 800db5c:	b94b      	cbnz	r3, 800db72 <__swsetup_r+0x7a>
 800db5e:	89a3      	ldrh	r3, [r4, #12]
 800db60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800db64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800db68:	d003      	beq.n	800db72 <__swsetup_r+0x7a>
 800db6a:	4621      	mov	r1, r4
 800db6c:	4628      	mov	r0, r5
 800db6e:	f000 f883 	bl	800dc78 <__smakebuf_r>
 800db72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db76:	f013 0201 	ands.w	r2, r3, #1
 800db7a:	d00a      	beq.n	800db92 <__swsetup_r+0x9a>
 800db7c:	2200      	movs	r2, #0
 800db7e:	60a2      	str	r2, [r4, #8]
 800db80:	6962      	ldr	r2, [r4, #20]
 800db82:	4252      	negs	r2, r2
 800db84:	61a2      	str	r2, [r4, #24]
 800db86:	6922      	ldr	r2, [r4, #16]
 800db88:	b942      	cbnz	r2, 800db9c <__swsetup_r+0xa4>
 800db8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800db8e:	d1c5      	bne.n	800db1c <__swsetup_r+0x24>
 800db90:	bd38      	pop	{r3, r4, r5, pc}
 800db92:	0799      	lsls	r1, r3, #30
 800db94:	bf58      	it	pl
 800db96:	6962      	ldrpl	r2, [r4, #20]
 800db98:	60a2      	str	r2, [r4, #8]
 800db9a:	e7f4      	b.n	800db86 <__swsetup_r+0x8e>
 800db9c:	2000      	movs	r0, #0
 800db9e:	e7f7      	b.n	800db90 <__swsetup_r+0x98>
 800dba0:	20000020 	.word	0x20000020

0800dba4 <_raise_r>:
 800dba4:	291f      	cmp	r1, #31
 800dba6:	b538      	push	{r3, r4, r5, lr}
 800dba8:	4605      	mov	r5, r0
 800dbaa:	460c      	mov	r4, r1
 800dbac:	d904      	bls.n	800dbb8 <_raise_r+0x14>
 800dbae:	2316      	movs	r3, #22
 800dbb0:	6003      	str	r3, [r0, #0]
 800dbb2:	f04f 30ff 	mov.w	r0, #4294967295
 800dbb6:	bd38      	pop	{r3, r4, r5, pc}
 800dbb8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800dbba:	b112      	cbz	r2, 800dbc2 <_raise_r+0x1e>
 800dbbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800dbc0:	b94b      	cbnz	r3, 800dbd6 <_raise_r+0x32>
 800dbc2:	4628      	mov	r0, r5
 800dbc4:	f000 f830 	bl	800dc28 <_getpid_r>
 800dbc8:	4622      	mov	r2, r4
 800dbca:	4601      	mov	r1, r0
 800dbcc:	4628      	mov	r0, r5
 800dbce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dbd2:	f000 b817 	b.w	800dc04 <_kill_r>
 800dbd6:	2b01      	cmp	r3, #1
 800dbd8:	d00a      	beq.n	800dbf0 <_raise_r+0x4c>
 800dbda:	1c59      	adds	r1, r3, #1
 800dbdc:	d103      	bne.n	800dbe6 <_raise_r+0x42>
 800dbde:	2316      	movs	r3, #22
 800dbe0:	6003      	str	r3, [r0, #0]
 800dbe2:	2001      	movs	r0, #1
 800dbe4:	e7e7      	b.n	800dbb6 <_raise_r+0x12>
 800dbe6:	2100      	movs	r1, #0
 800dbe8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800dbec:	4620      	mov	r0, r4
 800dbee:	4798      	blx	r3
 800dbf0:	2000      	movs	r0, #0
 800dbf2:	e7e0      	b.n	800dbb6 <_raise_r+0x12>

0800dbf4 <raise>:
 800dbf4:	4b02      	ldr	r3, [pc, #8]	@ (800dc00 <raise+0xc>)
 800dbf6:	4601      	mov	r1, r0
 800dbf8:	6818      	ldr	r0, [r3, #0]
 800dbfa:	f7ff bfd3 	b.w	800dba4 <_raise_r>
 800dbfe:	bf00      	nop
 800dc00:	20000020 	.word	0x20000020

0800dc04 <_kill_r>:
 800dc04:	b538      	push	{r3, r4, r5, lr}
 800dc06:	4d07      	ldr	r5, [pc, #28]	@ (800dc24 <_kill_r+0x20>)
 800dc08:	2300      	movs	r3, #0
 800dc0a:	4604      	mov	r4, r0
 800dc0c:	4608      	mov	r0, r1
 800dc0e:	4611      	mov	r1, r2
 800dc10:	602b      	str	r3, [r5, #0]
 800dc12:	f7f4 ff95 	bl	8002b40 <_kill>
 800dc16:	1c43      	adds	r3, r0, #1
 800dc18:	d102      	bne.n	800dc20 <_kill_r+0x1c>
 800dc1a:	682b      	ldr	r3, [r5, #0]
 800dc1c:	b103      	cbz	r3, 800dc20 <_kill_r+0x1c>
 800dc1e:	6023      	str	r3, [r4, #0]
 800dc20:	bd38      	pop	{r3, r4, r5, pc}
 800dc22:	bf00      	nop
 800dc24:	20013d10 	.word	0x20013d10

0800dc28 <_getpid_r>:
 800dc28:	f7f4 bf82 	b.w	8002b30 <_getpid>

0800dc2c <__swhatbuf_r>:
 800dc2c:	b570      	push	{r4, r5, r6, lr}
 800dc2e:	460c      	mov	r4, r1
 800dc30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc34:	2900      	cmp	r1, #0
 800dc36:	b096      	sub	sp, #88	@ 0x58
 800dc38:	4615      	mov	r5, r2
 800dc3a:	461e      	mov	r6, r3
 800dc3c:	da0d      	bge.n	800dc5a <__swhatbuf_r+0x2e>
 800dc3e:	89a3      	ldrh	r3, [r4, #12]
 800dc40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800dc44:	f04f 0100 	mov.w	r1, #0
 800dc48:	bf14      	ite	ne
 800dc4a:	2340      	movne	r3, #64	@ 0x40
 800dc4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800dc50:	2000      	movs	r0, #0
 800dc52:	6031      	str	r1, [r6, #0]
 800dc54:	602b      	str	r3, [r5, #0]
 800dc56:	b016      	add	sp, #88	@ 0x58
 800dc58:	bd70      	pop	{r4, r5, r6, pc}
 800dc5a:	466a      	mov	r2, sp
 800dc5c:	f000 f848 	bl	800dcf0 <_fstat_r>
 800dc60:	2800      	cmp	r0, #0
 800dc62:	dbec      	blt.n	800dc3e <__swhatbuf_r+0x12>
 800dc64:	9901      	ldr	r1, [sp, #4]
 800dc66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800dc6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800dc6e:	4259      	negs	r1, r3
 800dc70:	4159      	adcs	r1, r3
 800dc72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800dc76:	e7eb      	b.n	800dc50 <__swhatbuf_r+0x24>

0800dc78 <__smakebuf_r>:
 800dc78:	898b      	ldrh	r3, [r1, #12]
 800dc7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc7c:	079d      	lsls	r5, r3, #30
 800dc7e:	4606      	mov	r6, r0
 800dc80:	460c      	mov	r4, r1
 800dc82:	d507      	bpl.n	800dc94 <__smakebuf_r+0x1c>
 800dc84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800dc88:	6023      	str	r3, [r4, #0]
 800dc8a:	6123      	str	r3, [r4, #16]
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	6163      	str	r3, [r4, #20]
 800dc90:	b003      	add	sp, #12
 800dc92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dc94:	ab01      	add	r3, sp, #4
 800dc96:	466a      	mov	r2, sp
 800dc98:	f7ff ffc8 	bl	800dc2c <__swhatbuf_r>
 800dc9c:	9f00      	ldr	r7, [sp, #0]
 800dc9e:	4605      	mov	r5, r0
 800dca0:	4639      	mov	r1, r7
 800dca2:	4630      	mov	r0, r6
 800dca4:	f7fe fecc 	bl	800ca40 <_malloc_r>
 800dca8:	b948      	cbnz	r0, 800dcbe <__smakebuf_r+0x46>
 800dcaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcae:	059a      	lsls	r2, r3, #22
 800dcb0:	d4ee      	bmi.n	800dc90 <__smakebuf_r+0x18>
 800dcb2:	f023 0303 	bic.w	r3, r3, #3
 800dcb6:	f043 0302 	orr.w	r3, r3, #2
 800dcba:	81a3      	strh	r3, [r4, #12]
 800dcbc:	e7e2      	b.n	800dc84 <__smakebuf_r+0xc>
 800dcbe:	89a3      	ldrh	r3, [r4, #12]
 800dcc0:	6020      	str	r0, [r4, #0]
 800dcc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800dcc6:	81a3      	strh	r3, [r4, #12]
 800dcc8:	9b01      	ldr	r3, [sp, #4]
 800dcca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800dcce:	b15b      	cbz	r3, 800dce8 <__smakebuf_r+0x70>
 800dcd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcd4:	4630      	mov	r0, r6
 800dcd6:	f000 f81d 	bl	800dd14 <_isatty_r>
 800dcda:	b128      	cbz	r0, 800dce8 <__smakebuf_r+0x70>
 800dcdc:	89a3      	ldrh	r3, [r4, #12]
 800dcde:	f023 0303 	bic.w	r3, r3, #3
 800dce2:	f043 0301 	orr.w	r3, r3, #1
 800dce6:	81a3      	strh	r3, [r4, #12]
 800dce8:	89a3      	ldrh	r3, [r4, #12]
 800dcea:	431d      	orrs	r5, r3
 800dcec:	81a5      	strh	r5, [r4, #12]
 800dcee:	e7cf      	b.n	800dc90 <__smakebuf_r+0x18>

0800dcf0 <_fstat_r>:
 800dcf0:	b538      	push	{r3, r4, r5, lr}
 800dcf2:	4d07      	ldr	r5, [pc, #28]	@ (800dd10 <_fstat_r+0x20>)
 800dcf4:	2300      	movs	r3, #0
 800dcf6:	4604      	mov	r4, r0
 800dcf8:	4608      	mov	r0, r1
 800dcfa:	4611      	mov	r1, r2
 800dcfc:	602b      	str	r3, [r5, #0]
 800dcfe:	f7f4 ff63 	bl	8002bc8 <_fstat>
 800dd02:	1c43      	adds	r3, r0, #1
 800dd04:	d102      	bne.n	800dd0c <_fstat_r+0x1c>
 800dd06:	682b      	ldr	r3, [r5, #0]
 800dd08:	b103      	cbz	r3, 800dd0c <_fstat_r+0x1c>
 800dd0a:	6023      	str	r3, [r4, #0]
 800dd0c:	bd38      	pop	{r3, r4, r5, pc}
 800dd0e:	bf00      	nop
 800dd10:	20013d10 	.word	0x20013d10

0800dd14 <_isatty_r>:
 800dd14:	b538      	push	{r3, r4, r5, lr}
 800dd16:	4d06      	ldr	r5, [pc, #24]	@ (800dd30 <_isatty_r+0x1c>)
 800dd18:	2300      	movs	r3, #0
 800dd1a:	4604      	mov	r4, r0
 800dd1c:	4608      	mov	r0, r1
 800dd1e:	602b      	str	r3, [r5, #0]
 800dd20:	f7f4 ff62 	bl	8002be8 <_isatty>
 800dd24:	1c43      	adds	r3, r0, #1
 800dd26:	d102      	bne.n	800dd2e <_isatty_r+0x1a>
 800dd28:	682b      	ldr	r3, [r5, #0]
 800dd2a:	b103      	cbz	r3, 800dd2e <_isatty_r+0x1a>
 800dd2c:	6023      	str	r3, [r4, #0]
 800dd2e:	bd38      	pop	{r3, r4, r5, pc}
 800dd30:	20013d10 	.word	0x20013d10

0800dd34 <pow>:
 800dd34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd36:	ed2d 8b02 	vpush	{d8}
 800dd3a:	eeb0 8a40 	vmov.f32	s16, s0
 800dd3e:	eef0 8a60 	vmov.f32	s17, s1
 800dd42:	ec55 4b11 	vmov	r4, r5, d1
 800dd46:	f000 f873 	bl	800de30 <__ieee754_pow>
 800dd4a:	4622      	mov	r2, r4
 800dd4c:	462b      	mov	r3, r5
 800dd4e:	4620      	mov	r0, r4
 800dd50:	4629      	mov	r1, r5
 800dd52:	ec57 6b10 	vmov	r6, r7, d0
 800dd56:	f7f2 ff41 	bl	8000bdc <__aeabi_dcmpun>
 800dd5a:	2800      	cmp	r0, #0
 800dd5c:	d13b      	bne.n	800ddd6 <pow+0xa2>
 800dd5e:	ec51 0b18 	vmov	r0, r1, d8
 800dd62:	2200      	movs	r2, #0
 800dd64:	2300      	movs	r3, #0
 800dd66:	f7f2 ff07 	bl	8000b78 <__aeabi_dcmpeq>
 800dd6a:	b1b8      	cbz	r0, 800dd9c <pow+0x68>
 800dd6c:	2200      	movs	r2, #0
 800dd6e:	2300      	movs	r3, #0
 800dd70:	4620      	mov	r0, r4
 800dd72:	4629      	mov	r1, r5
 800dd74:	f7f2 ff00 	bl	8000b78 <__aeabi_dcmpeq>
 800dd78:	2800      	cmp	r0, #0
 800dd7a:	d146      	bne.n	800de0a <pow+0xd6>
 800dd7c:	ec45 4b10 	vmov	d0, r4, r5
 800dd80:	f000 f848 	bl	800de14 <finite>
 800dd84:	b338      	cbz	r0, 800ddd6 <pow+0xa2>
 800dd86:	2200      	movs	r2, #0
 800dd88:	2300      	movs	r3, #0
 800dd8a:	4620      	mov	r0, r4
 800dd8c:	4629      	mov	r1, r5
 800dd8e:	f7f2 fefd 	bl	8000b8c <__aeabi_dcmplt>
 800dd92:	b300      	cbz	r0, 800ddd6 <pow+0xa2>
 800dd94:	f7fd ff56 	bl	800bc44 <__errno>
 800dd98:	2322      	movs	r3, #34	@ 0x22
 800dd9a:	e01b      	b.n	800ddd4 <pow+0xa0>
 800dd9c:	ec47 6b10 	vmov	d0, r6, r7
 800dda0:	f000 f838 	bl	800de14 <finite>
 800dda4:	b9e0      	cbnz	r0, 800dde0 <pow+0xac>
 800dda6:	eeb0 0a48 	vmov.f32	s0, s16
 800ddaa:	eef0 0a68 	vmov.f32	s1, s17
 800ddae:	f000 f831 	bl	800de14 <finite>
 800ddb2:	b1a8      	cbz	r0, 800dde0 <pow+0xac>
 800ddb4:	ec45 4b10 	vmov	d0, r4, r5
 800ddb8:	f000 f82c 	bl	800de14 <finite>
 800ddbc:	b180      	cbz	r0, 800dde0 <pow+0xac>
 800ddbe:	4632      	mov	r2, r6
 800ddc0:	463b      	mov	r3, r7
 800ddc2:	4630      	mov	r0, r6
 800ddc4:	4639      	mov	r1, r7
 800ddc6:	f7f2 ff09 	bl	8000bdc <__aeabi_dcmpun>
 800ddca:	2800      	cmp	r0, #0
 800ddcc:	d0e2      	beq.n	800dd94 <pow+0x60>
 800ddce:	f7fd ff39 	bl	800bc44 <__errno>
 800ddd2:	2321      	movs	r3, #33	@ 0x21
 800ddd4:	6003      	str	r3, [r0, #0]
 800ddd6:	ecbd 8b02 	vpop	{d8}
 800ddda:	ec47 6b10 	vmov	d0, r6, r7
 800ddde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dde0:	2200      	movs	r2, #0
 800dde2:	2300      	movs	r3, #0
 800dde4:	4630      	mov	r0, r6
 800dde6:	4639      	mov	r1, r7
 800dde8:	f7f2 fec6 	bl	8000b78 <__aeabi_dcmpeq>
 800ddec:	2800      	cmp	r0, #0
 800ddee:	d0f2      	beq.n	800ddd6 <pow+0xa2>
 800ddf0:	eeb0 0a48 	vmov.f32	s0, s16
 800ddf4:	eef0 0a68 	vmov.f32	s1, s17
 800ddf8:	f000 f80c 	bl	800de14 <finite>
 800ddfc:	2800      	cmp	r0, #0
 800ddfe:	d0ea      	beq.n	800ddd6 <pow+0xa2>
 800de00:	ec45 4b10 	vmov	d0, r4, r5
 800de04:	f000 f806 	bl	800de14 <finite>
 800de08:	e7c3      	b.n	800dd92 <pow+0x5e>
 800de0a:	4f01      	ldr	r7, [pc, #4]	@ (800de10 <pow+0xdc>)
 800de0c:	2600      	movs	r6, #0
 800de0e:	e7e2      	b.n	800ddd6 <pow+0xa2>
 800de10:	3ff00000 	.word	0x3ff00000

0800de14 <finite>:
 800de14:	b082      	sub	sp, #8
 800de16:	ed8d 0b00 	vstr	d0, [sp]
 800de1a:	9801      	ldr	r0, [sp, #4]
 800de1c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800de20:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800de24:	0fc0      	lsrs	r0, r0, #31
 800de26:	b002      	add	sp, #8
 800de28:	4770      	bx	lr
 800de2a:	0000      	movs	r0, r0
 800de2c:	0000      	movs	r0, r0
	...

0800de30 <__ieee754_pow>:
 800de30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de34:	b091      	sub	sp, #68	@ 0x44
 800de36:	ed8d 1b00 	vstr	d1, [sp]
 800de3a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800de3e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800de42:	ea5a 0001 	orrs.w	r0, sl, r1
 800de46:	ec57 6b10 	vmov	r6, r7, d0
 800de4a:	d113      	bne.n	800de74 <__ieee754_pow+0x44>
 800de4c:	19b3      	adds	r3, r6, r6
 800de4e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800de52:	4152      	adcs	r2, r2
 800de54:	4298      	cmp	r0, r3
 800de56:	4b98      	ldr	r3, [pc, #608]	@ (800e0b8 <__ieee754_pow+0x288>)
 800de58:	4193      	sbcs	r3, r2
 800de5a:	f080 84ea 	bcs.w	800e832 <__ieee754_pow+0xa02>
 800de5e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800de62:	4630      	mov	r0, r6
 800de64:	4639      	mov	r1, r7
 800de66:	f7f2 fa69 	bl	800033c <__adddf3>
 800de6a:	ec41 0b10 	vmov	d0, r0, r1
 800de6e:	b011      	add	sp, #68	@ 0x44
 800de70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de74:	4a91      	ldr	r2, [pc, #580]	@ (800e0bc <__ieee754_pow+0x28c>)
 800de76:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800de7a:	4590      	cmp	r8, r2
 800de7c:	463d      	mov	r5, r7
 800de7e:	4633      	mov	r3, r6
 800de80:	d806      	bhi.n	800de90 <__ieee754_pow+0x60>
 800de82:	d101      	bne.n	800de88 <__ieee754_pow+0x58>
 800de84:	2e00      	cmp	r6, #0
 800de86:	d1ea      	bne.n	800de5e <__ieee754_pow+0x2e>
 800de88:	4592      	cmp	sl, r2
 800de8a:	d801      	bhi.n	800de90 <__ieee754_pow+0x60>
 800de8c:	d10e      	bne.n	800deac <__ieee754_pow+0x7c>
 800de8e:	b169      	cbz	r1, 800deac <__ieee754_pow+0x7c>
 800de90:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800de94:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800de98:	431d      	orrs	r5, r3
 800de9a:	d1e0      	bne.n	800de5e <__ieee754_pow+0x2e>
 800de9c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800dea0:	18db      	adds	r3, r3, r3
 800dea2:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800dea6:	4152      	adcs	r2, r2
 800dea8:	429d      	cmp	r5, r3
 800deaa:	e7d4      	b.n	800de56 <__ieee754_pow+0x26>
 800deac:	2d00      	cmp	r5, #0
 800deae:	46c3      	mov	fp, r8
 800deb0:	da3a      	bge.n	800df28 <__ieee754_pow+0xf8>
 800deb2:	4a83      	ldr	r2, [pc, #524]	@ (800e0c0 <__ieee754_pow+0x290>)
 800deb4:	4592      	cmp	sl, r2
 800deb6:	d84d      	bhi.n	800df54 <__ieee754_pow+0x124>
 800deb8:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800debc:	4592      	cmp	sl, r2
 800debe:	f240 84c7 	bls.w	800e850 <__ieee754_pow+0xa20>
 800dec2:	ea4f 522a 	mov.w	r2, sl, asr #20
 800dec6:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800deca:	2a14      	cmp	r2, #20
 800decc:	dd0f      	ble.n	800deee <__ieee754_pow+0xbe>
 800dece:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800ded2:	fa21 f402 	lsr.w	r4, r1, r2
 800ded6:	fa04 f202 	lsl.w	r2, r4, r2
 800deda:	428a      	cmp	r2, r1
 800dedc:	f040 84b8 	bne.w	800e850 <__ieee754_pow+0xa20>
 800dee0:	f004 0401 	and.w	r4, r4, #1
 800dee4:	f1c4 0402 	rsb	r4, r4, #2
 800dee8:	2900      	cmp	r1, #0
 800deea:	d158      	bne.n	800df9e <__ieee754_pow+0x16e>
 800deec:	e00e      	b.n	800df0c <__ieee754_pow+0xdc>
 800deee:	2900      	cmp	r1, #0
 800def0:	d154      	bne.n	800df9c <__ieee754_pow+0x16c>
 800def2:	f1c2 0214 	rsb	r2, r2, #20
 800def6:	fa4a f402 	asr.w	r4, sl, r2
 800defa:	fa04 f202 	lsl.w	r2, r4, r2
 800defe:	4552      	cmp	r2, sl
 800df00:	f040 84a3 	bne.w	800e84a <__ieee754_pow+0xa1a>
 800df04:	f004 0401 	and.w	r4, r4, #1
 800df08:	f1c4 0402 	rsb	r4, r4, #2
 800df0c:	4a6d      	ldr	r2, [pc, #436]	@ (800e0c4 <__ieee754_pow+0x294>)
 800df0e:	4592      	cmp	sl, r2
 800df10:	d12e      	bne.n	800df70 <__ieee754_pow+0x140>
 800df12:	f1b9 0f00 	cmp.w	r9, #0
 800df16:	f280 8494 	bge.w	800e842 <__ieee754_pow+0xa12>
 800df1a:	496a      	ldr	r1, [pc, #424]	@ (800e0c4 <__ieee754_pow+0x294>)
 800df1c:	4632      	mov	r2, r6
 800df1e:	463b      	mov	r3, r7
 800df20:	2000      	movs	r0, #0
 800df22:	f7f2 fceb 	bl	80008fc <__aeabi_ddiv>
 800df26:	e7a0      	b.n	800de6a <__ieee754_pow+0x3a>
 800df28:	2400      	movs	r4, #0
 800df2a:	bbc1      	cbnz	r1, 800df9e <__ieee754_pow+0x16e>
 800df2c:	4a63      	ldr	r2, [pc, #396]	@ (800e0bc <__ieee754_pow+0x28c>)
 800df2e:	4592      	cmp	sl, r2
 800df30:	d1ec      	bne.n	800df0c <__ieee754_pow+0xdc>
 800df32:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800df36:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800df3a:	431a      	orrs	r2, r3
 800df3c:	f000 8479 	beq.w	800e832 <__ieee754_pow+0xa02>
 800df40:	4b61      	ldr	r3, [pc, #388]	@ (800e0c8 <__ieee754_pow+0x298>)
 800df42:	4598      	cmp	r8, r3
 800df44:	d908      	bls.n	800df58 <__ieee754_pow+0x128>
 800df46:	f1b9 0f00 	cmp.w	r9, #0
 800df4a:	f2c0 8476 	blt.w	800e83a <__ieee754_pow+0xa0a>
 800df4e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800df52:	e78a      	b.n	800de6a <__ieee754_pow+0x3a>
 800df54:	2402      	movs	r4, #2
 800df56:	e7e8      	b.n	800df2a <__ieee754_pow+0xfa>
 800df58:	f1b9 0f00 	cmp.w	r9, #0
 800df5c:	f04f 0000 	mov.w	r0, #0
 800df60:	f04f 0100 	mov.w	r1, #0
 800df64:	da81      	bge.n	800de6a <__ieee754_pow+0x3a>
 800df66:	e9dd 0300 	ldrd	r0, r3, [sp]
 800df6a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800df6e:	e77c      	b.n	800de6a <__ieee754_pow+0x3a>
 800df70:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800df74:	d106      	bne.n	800df84 <__ieee754_pow+0x154>
 800df76:	4632      	mov	r2, r6
 800df78:	463b      	mov	r3, r7
 800df7a:	4630      	mov	r0, r6
 800df7c:	4639      	mov	r1, r7
 800df7e:	f7f2 fb93 	bl	80006a8 <__aeabi_dmul>
 800df82:	e772      	b.n	800de6a <__ieee754_pow+0x3a>
 800df84:	4a51      	ldr	r2, [pc, #324]	@ (800e0cc <__ieee754_pow+0x29c>)
 800df86:	4591      	cmp	r9, r2
 800df88:	d109      	bne.n	800df9e <__ieee754_pow+0x16e>
 800df8a:	2d00      	cmp	r5, #0
 800df8c:	db07      	blt.n	800df9e <__ieee754_pow+0x16e>
 800df8e:	ec47 6b10 	vmov	d0, r6, r7
 800df92:	b011      	add	sp, #68	@ 0x44
 800df94:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df98:	f000 bd52 	b.w	800ea40 <__ieee754_sqrt>
 800df9c:	2400      	movs	r4, #0
 800df9e:	ec47 6b10 	vmov	d0, r6, r7
 800dfa2:	9302      	str	r3, [sp, #8]
 800dfa4:	f000 fc88 	bl	800e8b8 <fabs>
 800dfa8:	9b02      	ldr	r3, [sp, #8]
 800dfaa:	ec51 0b10 	vmov	r0, r1, d0
 800dfae:	bb53      	cbnz	r3, 800e006 <__ieee754_pow+0x1d6>
 800dfb0:	4b44      	ldr	r3, [pc, #272]	@ (800e0c4 <__ieee754_pow+0x294>)
 800dfb2:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d002      	beq.n	800dfc0 <__ieee754_pow+0x190>
 800dfba:	f1b8 0f00 	cmp.w	r8, #0
 800dfbe:	d122      	bne.n	800e006 <__ieee754_pow+0x1d6>
 800dfc0:	f1b9 0f00 	cmp.w	r9, #0
 800dfc4:	da05      	bge.n	800dfd2 <__ieee754_pow+0x1a2>
 800dfc6:	4602      	mov	r2, r0
 800dfc8:	460b      	mov	r3, r1
 800dfca:	2000      	movs	r0, #0
 800dfcc:	493d      	ldr	r1, [pc, #244]	@ (800e0c4 <__ieee754_pow+0x294>)
 800dfce:	f7f2 fc95 	bl	80008fc <__aeabi_ddiv>
 800dfd2:	2d00      	cmp	r5, #0
 800dfd4:	f6bf af49 	bge.w	800de6a <__ieee754_pow+0x3a>
 800dfd8:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800dfdc:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800dfe0:	ea58 0804 	orrs.w	r8, r8, r4
 800dfe4:	d108      	bne.n	800dff8 <__ieee754_pow+0x1c8>
 800dfe6:	4602      	mov	r2, r0
 800dfe8:	460b      	mov	r3, r1
 800dfea:	4610      	mov	r0, r2
 800dfec:	4619      	mov	r1, r3
 800dfee:	f7f2 f9a3 	bl	8000338 <__aeabi_dsub>
 800dff2:	4602      	mov	r2, r0
 800dff4:	460b      	mov	r3, r1
 800dff6:	e794      	b.n	800df22 <__ieee754_pow+0xf2>
 800dff8:	2c01      	cmp	r4, #1
 800dffa:	f47f af36 	bne.w	800de6a <__ieee754_pow+0x3a>
 800dffe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e002:	4619      	mov	r1, r3
 800e004:	e731      	b.n	800de6a <__ieee754_pow+0x3a>
 800e006:	0feb      	lsrs	r3, r5, #31
 800e008:	3b01      	subs	r3, #1
 800e00a:	ea53 0204 	orrs.w	r2, r3, r4
 800e00e:	d102      	bne.n	800e016 <__ieee754_pow+0x1e6>
 800e010:	4632      	mov	r2, r6
 800e012:	463b      	mov	r3, r7
 800e014:	e7e9      	b.n	800dfea <__ieee754_pow+0x1ba>
 800e016:	3c01      	subs	r4, #1
 800e018:	431c      	orrs	r4, r3
 800e01a:	d016      	beq.n	800e04a <__ieee754_pow+0x21a>
 800e01c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800e0a8 <__ieee754_pow+0x278>
 800e020:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800e024:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e028:	f240 8112 	bls.w	800e250 <__ieee754_pow+0x420>
 800e02c:	4b28      	ldr	r3, [pc, #160]	@ (800e0d0 <__ieee754_pow+0x2a0>)
 800e02e:	459a      	cmp	sl, r3
 800e030:	4b25      	ldr	r3, [pc, #148]	@ (800e0c8 <__ieee754_pow+0x298>)
 800e032:	d916      	bls.n	800e062 <__ieee754_pow+0x232>
 800e034:	4598      	cmp	r8, r3
 800e036:	d80b      	bhi.n	800e050 <__ieee754_pow+0x220>
 800e038:	f1b9 0f00 	cmp.w	r9, #0
 800e03c:	da0b      	bge.n	800e056 <__ieee754_pow+0x226>
 800e03e:	2000      	movs	r0, #0
 800e040:	b011      	add	sp, #68	@ 0x44
 800e042:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e046:	f000 bcf3 	b.w	800ea30 <__math_oflow>
 800e04a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800e0b0 <__ieee754_pow+0x280>
 800e04e:	e7e7      	b.n	800e020 <__ieee754_pow+0x1f0>
 800e050:	f1b9 0f00 	cmp.w	r9, #0
 800e054:	dcf3      	bgt.n	800e03e <__ieee754_pow+0x20e>
 800e056:	2000      	movs	r0, #0
 800e058:	b011      	add	sp, #68	@ 0x44
 800e05a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e05e:	f000 bcdf 	b.w	800ea20 <__math_uflow>
 800e062:	4598      	cmp	r8, r3
 800e064:	d20c      	bcs.n	800e080 <__ieee754_pow+0x250>
 800e066:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e06a:	2200      	movs	r2, #0
 800e06c:	2300      	movs	r3, #0
 800e06e:	f7f2 fd8d 	bl	8000b8c <__aeabi_dcmplt>
 800e072:	3800      	subs	r0, #0
 800e074:	bf18      	it	ne
 800e076:	2001      	movne	r0, #1
 800e078:	f1b9 0f00 	cmp.w	r9, #0
 800e07c:	daec      	bge.n	800e058 <__ieee754_pow+0x228>
 800e07e:	e7df      	b.n	800e040 <__ieee754_pow+0x210>
 800e080:	4b10      	ldr	r3, [pc, #64]	@ (800e0c4 <__ieee754_pow+0x294>)
 800e082:	4598      	cmp	r8, r3
 800e084:	f04f 0200 	mov.w	r2, #0
 800e088:	d924      	bls.n	800e0d4 <__ieee754_pow+0x2a4>
 800e08a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e08e:	2300      	movs	r3, #0
 800e090:	f7f2 fd7c 	bl	8000b8c <__aeabi_dcmplt>
 800e094:	3800      	subs	r0, #0
 800e096:	bf18      	it	ne
 800e098:	2001      	movne	r0, #1
 800e09a:	f1b9 0f00 	cmp.w	r9, #0
 800e09e:	dccf      	bgt.n	800e040 <__ieee754_pow+0x210>
 800e0a0:	e7da      	b.n	800e058 <__ieee754_pow+0x228>
 800e0a2:	bf00      	nop
 800e0a4:	f3af 8000 	nop.w
 800e0a8:	00000000 	.word	0x00000000
 800e0ac:	3ff00000 	.word	0x3ff00000
 800e0b0:	00000000 	.word	0x00000000
 800e0b4:	bff00000 	.word	0xbff00000
 800e0b8:	fff00000 	.word	0xfff00000
 800e0bc:	7ff00000 	.word	0x7ff00000
 800e0c0:	433fffff 	.word	0x433fffff
 800e0c4:	3ff00000 	.word	0x3ff00000
 800e0c8:	3fefffff 	.word	0x3fefffff
 800e0cc:	3fe00000 	.word	0x3fe00000
 800e0d0:	43f00000 	.word	0x43f00000
 800e0d4:	4b5a      	ldr	r3, [pc, #360]	@ (800e240 <__ieee754_pow+0x410>)
 800e0d6:	f7f2 f92f 	bl	8000338 <__aeabi_dsub>
 800e0da:	a351      	add	r3, pc, #324	@ (adr r3, 800e220 <__ieee754_pow+0x3f0>)
 800e0dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e0:	4604      	mov	r4, r0
 800e0e2:	460d      	mov	r5, r1
 800e0e4:	f7f2 fae0 	bl	80006a8 <__aeabi_dmul>
 800e0e8:	a34f      	add	r3, pc, #316	@ (adr r3, 800e228 <__ieee754_pow+0x3f8>)
 800e0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ee:	4606      	mov	r6, r0
 800e0f0:	460f      	mov	r7, r1
 800e0f2:	4620      	mov	r0, r4
 800e0f4:	4629      	mov	r1, r5
 800e0f6:	f7f2 fad7 	bl	80006a8 <__aeabi_dmul>
 800e0fa:	4b52      	ldr	r3, [pc, #328]	@ (800e244 <__ieee754_pow+0x414>)
 800e0fc:	4682      	mov	sl, r0
 800e0fe:	468b      	mov	fp, r1
 800e100:	2200      	movs	r2, #0
 800e102:	4620      	mov	r0, r4
 800e104:	4629      	mov	r1, r5
 800e106:	f7f2 facf 	bl	80006a8 <__aeabi_dmul>
 800e10a:	4602      	mov	r2, r0
 800e10c:	460b      	mov	r3, r1
 800e10e:	a148      	add	r1, pc, #288	@ (adr r1, 800e230 <__ieee754_pow+0x400>)
 800e110:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e114:	f7f2 f910 	bl	8000338 <__aeabi_dsub>
 800e118:	4622      	mov	r2, r4
 800e11a:	462b      	mov	r3, r5
 800e11c:	f7f2 fac4 	bl	80006a8 <__aeabi_dmul>
 800e120:	4602      	mov	r2, r0
 800e122:	460b      	mov	r3, r1
 800e124:	2000      	movs	r0, #0
 800e126:	4948      	ldr	r1, [pc, #288]	@ (800e248 <__ieee754_pow+0x418>)
 800e128:	f7f2 f906 	bl	8000338 <__aeabi_dsub>
 800e12c:	4622      	mov	r2, r4
 800e12e:	4680      	mov	r8, r0
 800e130:	4689      	mov	r9, r1
 800e132:	462b      	mov	r3, r5
 800e134:	4620      	mov	r0, r4
 800e136:	4629      	mov	r1, r5
 800e138:	f7f2 fab6 	bl	80006a8 <__aeabi_dmul>
 800e13c:	4602      	mov	r2, r0
 800e13e:	460b      	mov	r3, r1
 800e140:	4640      	mov	r0, r8
 800e142:	4649      	mov	r1, r9
 800e144:	f7f2 fab0 	bl	80006a8 <__aeabi_dmul>
 800e148:	a33b      	add	r3, pc, #236	@ (adr r3, 800e238 <__ieee754_pow+0x408>)
 800e14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14e:	f7f2 faab 	bl	80006a8 <__aeabi_dmul>
 800e152:	4602      	mov	r2, r0
 800e154:	460b      	mov	r3, r1
 800e156:	4650      	mov	r0, sl
 800e158:	4659      	mov	r1, fp
 800e15a:	f7f2 f8ed 	bl	8000338 <__aeabi_dsub>
 800e15e:	4602      	mov	r2, r0
 800e160:	460b      	mov	r3, r1
 800e162:	4680      	mov	r8, r0
 800e164:	4689      	mov	r9, r1
 800e166:	4630      	mov	r0, r6
 800e168:	4639      	mov	r1, r7
 800e16a:	f7f2 f8e7 	bl	800033c <__adddf3>
 800e16e:	2400      	movs	r4, #0
 800e170:	4632      	mov	r2, r6
 800e172:	463b      	mov	r3, r7
 800e174:	4620      	mov	r0, r4
 800e176:	460d      	mov	r5, r1
 800e178:	f7f2 f8de 	bl	8000338 <__aeabi_dsub>
 800e17c:	4602      	mov	r2, r0
 800e17e:	460b      	mov	r3, r1
 800e180:	4640      	mov	r0, r8
 800e182:	4649      	mov	r1, r9
 800e184:	f7f2 f8d8 	bl	8000338 <__aeabi_dsub>
 800e188:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e18c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e190:	2300      	movs	r3, #0
 800e192:	9304      	str	r3, [sp, #16]
 800e194:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e198:	4606      	mov	r6, r0
 800e19a:	460f      	mov	r7, r1
 800e19c:	4652      	mov	r2, sl
 800e19e:	465b      	mov	r3, fp
 800e1a0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e1a4:	f7f2 f8c8 	bl	8000338 <__aeabi_dsub>
 800e1a8:	4622      	mov	r2, r4
 800e1aa:	462b      	mov	r3, r5
 800e1ac:	f7f2 fa7c 	bl	80006a8 <__aeabi_dmul>
 800e1b0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1b4:	4680      	mov	r8, r0
 800e1b6:	4689      	mov	r9, r1
 800e1b8:	4630      	mov	r0, r6
 800e1ba:	4639      	mov	r1, r7
 800e1bc:	f7f2 fa74 	bl	80006a8 <__aeabi_dmul>
 800e1c0:	4602      	mov	r2, r0
 800e1c2:	460b      	mov	r3, r1
 800e1c4:	4640      	mov	r0, r8
 800e1c6:	4649      	mov	r1, r9
 800e1c8:	f7f2 f8b8 	bl	800033c <__adddf3>
 800e1cc:	4652      	mov	r2, sl
 800e1ce:	465b      	mov	r3, fp
 800e1d0:	4606      	mov	r6, r0
 800e1d2:	460f      	mov	r7, r1
 800e1d4:	4620      	mov	r0, r4
 800e1d6:	4629      	mov	r1, r5
 800e1d8:	f7f2 fa66 	bl	80006a8 <__aeabi_dmul>
 800e1dc:	460b      	mov	r3, r1
 800e1de:	4602      	mov	r2, r0
 800e1e0:	4680      	mov	r8, r0
 800e1e2:	4689      	mov	r9, r1
 800e1e4:	4630      	mov	r0, r6
 800e1e6:	4639      	mov	r1, r7
 800e1e8:	f7f2 f8a8 	bl	800033c <__adddf3>
 800e1ec:	4b17      	ldr	r3, [pc, #92]	@ (800e24c <__ieee754_pow+0x41c>)
 800e1ee:	4299      	cmp	r1, r3
 800e1f0:	4604      	mov	r4, r0
 800e1f2:	460d      	mov	r5, r1
 800e1f4:	468a      	mov	sl, r1
 800e1f6:	468b      	mov	fp, r1
 800e1f8:	f340 82ef 	ble.w	800e7da <__ieee754_pow+0x9aa>
 800e1fc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800e200:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800e204:	4303      	orrs	r3, r0
 800e206:	f000 81e8 	beq.w	800e5da <__ieee754_pow+0x7aa>
 800e20a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e20e:	2200      	movs	r2, #0
 800e210:	2300      	movs	r3, #0
 800e212:	f7f2 fcbb 	bl	8000b8c <__aeabi_dcmplt>
 800e216:	3800      	subs	r0, #0
 800e218:	bf18      	it	ne
 800e21a:	2001      	movne	r0, #1
 800e21c:	e710      	b.n	800e040 <__ieee754_pow+0x210>
 800e21e:	bf00      	nop
 800e220:	60000000 	.word	0x60000000
 800e224:	3ff71547 	.word	0x3ff71547
 800e228:	f85ddf44 	.word	0xf85ddf44
 800e22c:	3e54ae0b 	.word	0x3e54ae0b
 800e230:	55555555 	.word	0x55555555
 800e234:	3fd55555 	.word	0x3fd55555
 800e238:	652b82fe 	.word	0x652b82fe
 800e23c:	3ff71547 	.word	0x3ff71547
 800e240:	3ff00000 	.word	0x3ff00000
 800e244:	3fd00000 	.word	0x3fd00000
 800e248:	3fe00000 	.word	0x3fe00000
 800e24c:	408fffff 	.word	0x408fffff
 800e250:	4bd5      	ldr	r3, [pc, #852]	@ (800e5a8 <__ieee754_pow+0x778>)
 800e252:	402b      	ands	r3, r5
 800e254:	2200      	movs	r2, #0
 800e256:	b92b      	cbnz	r3, 800e264 <__ieee754_pow+0x434>
 800e258:	4bd4      	ldr	r3, [pc, #848]	@ (800e5ac <__ieee754_pow+0x77c>)
 800e25a:	f7f2 fa25 	bl	80006a8 <__aeabi_dmul>
 800e25e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800e262:	468b      	mov	fp, r1
 800e264:	ea4f 532b 	mov.w	r3, fp, asr #20
 800e268:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800e26c:	4413      	add	r3, r2
 800e26e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e270:	4bcf      	ldr	r3, [pc, #828]	@ (800e5b0 <__ieee754_pow+0x780>)
 800e272:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800e276:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800e27a:	459b      	cmp	fp, r3
 800e27c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800e280:	dd08      	ble.n	800e294 <__ieee754_pow+0x464>
 800e282:	4bcc      	ldr	r3, [pc, #816]	@ (800e5b4 <__ieee754_pow+0x784>)
 800e284:	459b      	cmp	fp, r3
 800e286:	f340 81a5 	ble.w	800e5d4 <__ieee754_pow+0x7a4>
 800e28a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e28c:	3301      	adds	r3, #1
 800e28e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e290:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800e294:	f04f 0a00 	mov.w	sl, #0
 800e298:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800e29c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e29e:	4bc6      	ldr	r3, [pc, #792]	@ (800e5b8 <__ieee754_pow+0x788>)
 800e2a0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800e2a4:	ed93 7b00 	vldr	d7, [r3]
 800e2a8:	4629      	mov	r1, r5
 800e2aa:	ec53 2b17 	vmov	r2, r3, d7
 800e2ae:	ed8d 7b06 	vstr	d7, [sp, #24]
 800e2b2:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e2b6:	f7f2 f83f 	bl	8000338 <__aeabi_dsub>
 800e2ba:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e2be:	4606      	mov	r6, r0
 800e2c0:	460f      	mov	r7, r1
 800e2c2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e2c6:	f7f2 f839 	bl	800033c <__adddf3>
 800e2ca:	4602      	mov	r2, r0
 800e2cc:	460b      	mov	r3, r1
 800e2ce:	2000      	movs	r0, #0
 800e2d0:	49ba      	ldr	r1, [pc, #744]	@ (800e5bc <__ieee754_pow+0x78c>)
 800e2d2:	f7f2 fb13 	bl	80008fc <__aeabi_ddiv>
 800e2d6:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800e2da:	4602      	mov	r2, r0
 800e2dc:	460b      	mov	r3, r1
 800e2de:	4630      	mov	r0, r6
 800e2e0:	4639      	mov	r1, r7
 800e2e2:	f7f2 f9e1 	bl	80006a8 <__aeabi_dmul>
 800e2e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e2ea:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800e2ee:	106d      	asrs	r5, r5, #1
 800e2f0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800e2f4:	f04f 0b00 	mov.w	fp, #0
 800e2f8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800e2fc:	4661      	mov	r1, ip
 800e2fe:	2200      	movs	r2, #0
 800e300:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800e304:	4658      	mov	r0, fp
 800e306:	46e1      	mov	r9, ip
 800e308:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800e30c:	4614      	mov	r4, r2
 800e30e:	461d      	mov	r5, r3
 800e310:	f7f2 f9ca 	bl	80006a8 <__aeabi_dmul>
 800e314:	4602      	mov	r2, r0
 800e316:	460b      	mov	r3, r1
 800e318:	4630      	mov	r0, r6
 800e31a:	4639      	mov	r1, r7
 800e31c:	f7f2 f80c 	bl	8000338 <__aeabi_dsub>
 800e320:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e324:	4606      	mov	r6, r0
 800e326:	460f      	mov	r7, r1
 800e328:	4620      	mov	r0, r4
 800e32a:	4629      	mov	r1, r5
 800e32c:	f7f2 f804 	bl	8000338 <__aeabi_dsub>
 800e330:	4602      	mov	r2, r0
 800e332:	460b      	mov	r3, r1
 800e334:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e338:	f7f1 fffe 	bl	8000338 <__aeabi_dsub>
 800e33c:	465a      	mov	r2, fp
 800e33e:	464b      	mov	r3, r9
 800e340:	f7f2 f9b2 	bl	80006a8 <__aeabi_dmul>
 800e344:	4602      	mov	r2, r0
 800e346:	460b      	mov	r3, r1
 800e348:	4630      	mov	r0, r6
 800e34a:	4639      	mov	r1, r7
 800e34c:	f7f1 fff4 	bl	8000338 <__aeabi_dsub>
 800e350:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800e354:	f7f2 f9a8 	bl	80006a8 <__aeabi_dmul>
 800e358:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e35c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e360:	4610      	mov	r0, r2
 800e362:	4619      	mov	r1, r3
 800e364:	f7f2 f9a0 	bl	80006a8 <__aeabi_dmul>
 800e368:	a37d      	add	r3, pc, #500	@ (adr r3, 800e560 <__ieee754_pow+0x730>)
 800e36a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e36e:	4604      	mov	r4, r0
 800e370:	460d      	mov	r5, r1
 800e372:	f7f2 f999 	bl	80006a8 <__aeabi_dmul>
 800e376:	a37c      	add	r3, pc, #496	@ (adr r3, 800e568 <__ieee754_pow+0x738>)
 800e378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e37c:	f7f1 ffde 	bl	800033c <__adddf3>
 800e380:	4622      	mov	r2, r4
 800e382:	462b      	mov	r3, r5
 800e384:	f7f2 f990 	bl	80006a8 <__aeabi_dmul>
 800e388:	a379      	add	r3, pc, #484	@ (adr r3, 800e570 <__ieee754_pow+0x740>)
 800e38a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e38e:	f7f1 ffd5 	bl	800033c <__adddf3>
 800e392:	4622      	mov	r2, r4
 800e394:	462b      	mov	r3, r5
 800e396:	f7f2 f987 	bl	80006a8 <__aeabi_dmul>
 800e39a:	a377      	add	r3, pc, #476	@ (adr r3, 800e578 <__ieee754_pow+0x748>)
 800e39c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3a0:	f7f1 ffcc 	bl	800033c <__adddf3>
 800e3a4:	4622      	mov	r2, r4
 800e3a6:	462b      	mov	r3, r5
 800e3a8:	f7f2 f97e 	bl	80006a8 <__aeabi_dmul>
 800e3ac:	a374      	add	r3, pc, #464	@ (adr r3, 800e580 <__ieee754_pow+0x750>)
 800e3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3b2:	f7f1 ffc3 	bl	800033c <__adddf3>
 800e3b6:	4622      	mov	r2, r4
 800e3b8:	462b      	mov	r3, r5
 800e3ba:	f7f2 f975 	bl	80006a8 <__aeabi_dmul>
 800e3be:	a372      	add	r3, pc, #456	@ (adr r3, 800e588 <__ieee754_pow+0x758>)
 800e3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3c4:	f7f1 ffba 	bl	800033c <__adddf3>
 800e3c8:	4622      	mov	r2, r4
 800e3ca:	4606      	mov	r6, r0
 800e3cc:	460f      	mov	r7, r1
 800e3ce:	462b      	mov	r3, r5
 800e3d0:	4620      	mov	r0, r4
 800e3d2:	4629      	mov	r1, r5
 800e3d4:	f7f2 f968 	bl	80006a8 <__aeabi_dmul>
 800e3d8:	4602      	mov	r2, r0
 800e3da:	460b      	mov	r3, r1
 800e3dc:	4630      	mov	r0, r6
 800e3de:	4639      	mov	r1, r7
 800e3e0:	f7f2 f962 	bl	80006a8 <__aeabi_dmul>
 800e3e4:	465a      	mov	r2, fp
 800e3e6:	4604      	mov	r4, r0
 800e3e8:	460d      	mov	r5, r1
 800e3ea:	464b      	mov	r3, r9
 800e3ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e3f0:	f7f1 ffa4 	bl	800033c <__adddf3>
 800e3f4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e3f8:	f7f2 f956 	bl	80006a8 <__aeabi_dmul>
 800e3fc:	4622      	mov	r2, r4
 800e3fe:	462b      	mov	r3, r5
 800e400:	f7f1 ff9c 	bl	800033c <__adddf3>
 800e404:	465a      	mov	r2, fp
 800e406:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800e40a:	464b      	mov	r3, r9
 800e40c:	4658      	mov	r0, fp
 800e40e:	4649      	mov	r1, r9
 800e410:	f7f2 f94a 	bl	80006a8 <__aeabi_dmul>
 800e414:	4b6a      	ldr	r3, [pc, #424]	@ (800e5c0 <__ieee754_pow+0x790>)
 800e416:	2200      	movs	r2, #0
 800e418:	4606      	mov	r6, r0
 800e41a:	460f      	mov	r7, r1
 800e41c:	f7f1 ff8e 	bl	800033c <__adddf3>
 800e420:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800e424:	f7f1 ff8a 	bl	800033c <__adddf3>
 800e428:	46d8      	mov	r8, fp
 800e42a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800e42e:	460d      	mov	r5, r1
 800e430:	465a      	mov	r2, fp
 800e432:	460b      	mov	r3, r1
 800e434:	4640      	mov	r0, r8
 800e436:	4649      	mov	r1, r9
 800e438:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800e43c:	f7f2 f934 	bl	80006a8 <__aeabi_dmul>
 800e440:	465c      	mov	r4, fp
 800e442:	4680      	mov	r8, r0
 800e444:	4689      	mov	r9, r1
 800e446:	4b5e      	ldr	r3, [pc, #376]	@ (800e5c0 <__ieee754_pow+0x790>)
 800e448:	2200      	movs	r2, #0
 800e44a:	4620      	mov	r0, r4
 800e44c:	4629      	mov	r1, r5
 800e44e:	f7f1 ff73 	bl	8000338 <__aeabi_dsub>
 800e452:	4632      	mov	r2, r6
 800e454:	463b      	mov	r3, r7
 800e456:	f7f1 ff6f 	bl	8000338 <__aeabi_dsub>
 800e45a:	4602      	mov	r2, r0
 800e45c:	460b      	mov	r3, r1
 800e45e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800e462:	f7f1 ff69 	bl	8000338 <__aeabi_dsub>
 800e466:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e46a:	f7f2 f91d 	bl	80006a8 <__aeabi_dmul>
 800e46e:	4622      	mov	r2, r4
 800e470:	4606      	mov	r6, r0
 800e472:	460f      	mov	r7, r1
 800e474:	462b      	mov	r3, r5
 800e476:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e47a:	f7f2 f915 	bl	80006a8 <__aeabi_dmul>
 800e47e:	4602      	mov	r2, r0
 800e480:	460b      	mov	r3, r1
 800e482:	4630      	mov	r0, r6
 800e484:	4639      	mov	r1, r7
 800e486:	f7f1 ff59 	bl	800033c <__adddf3>
 800e48a:	4606      	mov	r6, r0
 800e48c:	460f      	mov	r7, r1
 800e48e:	4602      	mov	r2, r0
 800e490:	460b      	mov	r3, r1
 800e492:	4640      	mov	r0, r8
 800e494:	4649      	mov	r1, r9
 800e496:	f7f1 ff51 	bl	800033c <__adddf3>
 800e49a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800e49e:	a33c      	add	r3, pc, #240	@ (adr r3, 800e590 <__ieee754_pow+0x760>)
 800e4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4a4:	4658      	mov	r0, fp
 800e4a6:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800e4aa:	460d      	mov	r5, r1
 800e4ac:	f7f2 f8fc 	bl	80006a8 <__aeabi_dmul>
 800e4b0:	465c      	mov	r4, fp
 800e4b2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e4b6:	4642      	mov	r2, r8
 800e4b8:	464b      	mov	r3, r9
 800e4ba:	4620      	mov	r0, r4
 800e4bc:	4629      	mov	r1, r5
 800e4be:	f7f1 ff3b 	bl	8000338 <__aeabi_dsub>
 800e4c2:	4602      	mov	r2, r0
 800e4c4:	460b      	mov	r3, r1
 800e4c6:	4630      	mov	r0, r6
 800e4c8:	4639      	mov	r1, r7
 800e4ca:	f7f1 ff35 	bl	8000338 <__aeabi_dsub>
 800e4ce:	a332      	add	r3, pc, #200	@ (adr r3, 800e598 <__ieee754_pow+0x768>)
 800e4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4d4:	f7f2 f8e8 	bl	80006a8 <__aeabi_dmul>
 800e4d8:	a331      	add	r3, pc, #196	@ (adr r3, 800e5a0 <__ieee754_pow+0x770>)
 800e4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e4de:	4606      	mov	r6, r0
 800e4e0:	460f      	mov	r7, r1
 800e4e2:	4620      	mov	r0, r4
 800e4e4:	4629      	mov	r1, r5
 800e4e6:	f7f2 f8df 	bl	80006a8 <__aeabi_dmul>
 800e4ea:	4602      	mov	r2, r0
 800e4ec:	460b      	mov	r3, r1
 800e4ee:	4630      	mov	r0, r6
 800e4f0:	4639      	mov	r1, r7
 800e4f2:	f7f1 ff23 	bl	800033c <__adddf3>
 800e4f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e4f8:	4b32      	ldr	r3, [pc, #200]	@ (800e5c4 <__ieee754_pow+0x794>)
 800e4fa:	4413      	add	r3, r2
 800e4fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e500:	f7f1 ff1c 	bl	800033c <__adddf3>
 800e504:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800e508:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800e50a:	f7f2 f863 	bl	80005d4 <__aeabi_i2d>
 800e50e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e510:	4b2d      	ldr	r3, [pc, #180]	@ (800e5c8 <__ieee754_pow+0x798>)
 800e512:	4413      	add	r3, r2
 800e514:	e9d3 8900 	ldrd	r8, r9, [r3]
 800e518:	4606      	mov	r6, r0
 800e51a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800e51e:	460f      	mov	r7, r1
 800e520:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e524:	f7f1 ff0a 	bl	800033c <__adddf3>
 800e528:	4642      	mov	r2, r8
 800e52a:	464b      	mov	r3, r9
 800e52c:	f7f1 ff06 	bl	800033c <__adddf3>
 800e530:	4632      	mov	r2, r6
 800e532:	463b      	mov	r3, r7
 800e534:	f7f1 ff02 	bl	800033c <__adddf3>
 800e538:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800e53c:	4632      	mov	r2, r6
 800e53e:	463b      	mov	r3, r7
 800e540:	4658      	mov	r0, fp
 800e542:	460d      	mov	r5, r1
 800e544:	f7f1 fef8 	bl	8000338 <__aeabi_dsub>
 800e548:	4642      	mov	r2, r8
 800e54a:	464b      	mov	r3, r9
 800e54c:	f7f1 fef4 	bl	8000338 <__aeabi_dsub>
 800e550:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e554:	f7f1 fef0 	bl	8000338 <__aeabi_dsub>
 800e558:	465c      	mov	r4, fp
 800e55a:	4602      	mov	r2, r0
 800e55c:	e036      	b.n	800e5cc <__ieee754_pow+0x79c>
 800e55e:	bf00      	nop
 800e560:	4a454eef 	.word	0x4a454eef
 800e564:	3fca7e28 	.word	0x3fca7e28
 800e568:	93c9db65 	.word	0x93c9db65
 800e56c:	3fcd864a 	.word	0x3fcd864a
 800e570:	a91d4101 	.word	0xa91d4101
 800e574:	3fd17460 	.word	0x3fd17460
 800e578:	518f264d 	.word	0x518f264d
 800e57c:	3fd55555 	.word	0x3fd55555
 800e580:	db6fabff 	.word	0xdb6fabff
 800e584:	3fdb6db6 	.word	0x3fdb6db6
 800e588:	33333303 	.word	0x33333303
 800e58c:	3fe33333 	.word	0x3fe33333
 800e590:	e0000000 	.word	0xe0000000
 800e594:	3feec709 	.word	0x3feec709
 800e598:	dc3a03fd 	.word	0xdc3a03fd
 800e59c:	3feec709 	.word	0x3feec709
 800e5a0:	145b01f5 	.word	0x145b01f5
 800e5a4:	be3e2fe0 	.word	0xbe3e2fe0
 800e5a8:	7ff00000 	.word	0x7ff00000
 800e5ac:	43400000 	.word	0x43400000
 800e5b0:	0003988e 	.word	0x0003988e
 800e5b4:	000bb679 	.word	0x000bb679
 800e5b8:	0800f4b0 	.word	0x0800f4b0
 800e5bc:	3ff00000 	.word	0x3ff00000
 800e5c0:	40080000 	.word	0x40080000
 800e5c4:	0800f490 	.word	0x0800f490
 800e5c8:	0800f4a0 	.word	0x0800f4a0
 800e5cc:	460b      	mov	r3, r1
 800e5ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800e5d2:	e5d7      	b.n	800e184 <__ieee754_pow+0x354>
 800e5d4:	f04f 0a01 	mov.w	sl, #1
 800e5d8:	e65e      	b.n	800e298 <__ieee754_pow+0x468>
 800e5da:	a3b4      	add	r3, pc, #720	@ (adr r3, 800e8ac <__ieee754_pow+0xa7c>)
 800e5dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5e0:	4630      	mov	r0, r6
 800e5e2:	4639      	mov	r1, r7
 800e5e4:	f7f1 feaa 	bl	800033c <__adddf3>
 800e5e8:	4642      	mov	r2, r8
 800e5ea:	e9cd 0100 	strd	r0, r1, [sp]
 800e5ee:	464b      	mov	r3, r9
 800e5f0:	4620      	mov	r0, r4
 800e5f2:	4629      	mov	r1, r5
 800e5f4:	f7f1 fea0 	bl	8000338 <__aeabi_dsub>
 800e5f8:	4602      	mov	r2, r0
 800e5fa:	460b      	mov	r3, r1
 800e5fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e600:	f7f2 fae2 	bl	8000bc8 <__aeabi_dcmpgt>
 800e604:	2800      	cmp	r0, #0
 800e606:	f47f ae00 	bne.w	800e20a <__ieee754_pow+0x3da>
 800e60a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800e60e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800e612:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800e616:	fa43 fa0a 	asr.w	sl, r3, sl
 800e61a:	44da      	add	sl, fp
 800e61c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800e620:	489d      	ldr	r0, [pc, #628]	@ (800e898 <__ieee754_pow+0xa68>)
 800e622:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800e626:	4108      	asrs	r0, r1
 800e628:	ea00 030a 	and.w	r3, r0, sl
 800e62c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800e630:	f1c1 0114 	rsb	r1, r1, #20
 800e634:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800e638:	fa4a fa01 	asr.w	sl, sl, r1
 800e63c:	f1bb 0f00 	cmp.w	fp, #0
 800e640:	4640      	mov	r0, r8
 800e642:	4649      	mov	r1, r9
 800e644:	f04f 0200 	mov.w	r2, #0
 800e648:	bfb8      	it	lt
 800e64a:	f1ca 0a00 	rsblt	sl, sl, #0
 800e64e:	f7f1 fe73 	bl	8000338 <__aeabi_dsub>
 800e652:	4680      	mov	r8, r0
 800e654:	4689      	mov	r9, r1
 800e656:	4632      	mov	r2, r6
 800e658:	463b      	mov	r3, r7
 800e65a:	4640      	mov	r0, r8
 800e65c:	4649      	mov	r1, r9
 800e65e:	f7f1 fe6d 	bl	800033c <__adddf3>
 800e662:	2400      	movs	r4, #0
 800e664:	a37c      	add	r3, pc, #496	@ (adr r3, 800e858 <__ieee754_pow+0xa28>)
 800e666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e66a:	4620      	mov	r0, r4
 800e66c:	460d      	mov	r5, r1
 800e66e:	f7f2 f81b 	bl	80006a8 <__aeabi_dmul>
 800e672:	4642      	mov	r2, r8
 800e674:	e9cd 0100 	strd	r0, r1, [sp]
 800e678:	464b      	mov	r3, r9
 800e67a:	4620      	mov	r0, r4
 800e67c:	4629      	mov	r1, r5
 800e67e:	f7f1 fe5b 	bl	8000338 <__aeabi_dsub>
 800e682:	4602      	mov	r2, r0
 800e684:	460b      	mov	r3, r1
 800e686:	4630      	mov	r0, r6
 800e688:	4639      	mov	r1, r7
 800e68a:	f7f1 fe55 	bl	8000338 <__aeabi_dsub>
 800e68e:	a374      	add	r3, pc, #464	@ (adr r3, 800e860 <__ieee754_pow+0xa30>)
 800e690:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e694:	f7f2 f808 	bl	80006a8 <__aeabi_dmul>
 800e698:	a373      	add	r3, pc, #460	@ (adr r3, 800e868 <__ieee754_pow+0xa38>)
 800e69a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e69e:	4680      	mov	r8, r0
 800e6a0:	4689      	mov	r9, r1
 800e6a2:	4620      	mov	r0, r4
 800e6a4:	4629      	mov	r1, r5
 800e6a6:	f7f1 ffff 	bl	80006a8 <__aeabi_dmul>
 800e6aa:	4602      	mov	r2, r0
 800e6ac:	460b      	mov	r3, r1
 800e6ae:	4640      	mov	r0, r8
 800e6b0:	4649      	mov	r1, r9
 800e6b2:	f7f1 fe43 	bl	800033c <__adddf3>
 800e6b6:	4604      	mov	r4, r0
 800e6b8:	460d      	mov	r5, r1
 800e6ba:	4602      	mov	r2, r0
 800e6bc:	460b      	mov	r3, r1
 800e6be:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e6c2:	f7f1 fe3b 	bl	800033c <__adddf3>
 800e6c6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6ca:	4680      	mov	r8, r0
 800e6cc:	4689      	mov	r9, r1
 800e6ce:	f7f1 fe33 	bl	8000338 <__aeabi_dsub>
 800e6d2:	4602      	mov	r2, r0
 800e6d4:	460b      	mov	r3, r1
 800e6d6:	4620      	mov	r0, r4
 800e6d8:	4629      	mov	r1, r5
 800e6da:	f7f1 fe2d 	bl	8000338 <__aeabi_dsub>
 800e6de:	4642      	mov	r2, r8
 800e6e0:	4606      	mov	r6, r0
 800e6e2:	460f      	mov	r7, r1
 800e6e4:	464b      	mov	r3, r9
 800e6e6:	4640      	mov	r0, r8
 800e6e8:	4649      	mov	r1, r9
 800e6ea:	f7f1 ffdd 	bl	80006a8 <__aeabi_dmul>
 800e6ee:	a360      	add	r3, pc, #384	@ (adr r3, 800e870 <__ieee754_pow+0xa40>)
 800e6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e6f4:	4604      	mov	r4, r0
 800e6f6:	460d      	mov	r5, r1
 800e6f8:	f7f1 ffd6 	bl	80006a8 <__aeabi_dmul>
 800e6fc:	a35e      	add	r3, pc, #376	@ (adr r3, 800e878 <__ieee754_pow+0xa48>)
 800e6fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e702:	f7f1 fe19 	bl	8000338 <__aeabi_dsub>
 800e706:	4622      	mov	r2, r4
 800e708:	462b      	mov	r3, r5
 800e70a:	f7f1 ffcd 	bl	80006a8 <__aeabi_dmul>
 800e70e:	a35c      	add	r3, pc, #368	@ (adr r3, 800e880 <__ieee754_pow+0xa50>)
 800e710:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e714:	f7f1 fe12 	bl	800033c <__adddf3>
 800e718:	4622      	mov	r2, r4
 800e71a:	462b      	mov	r3, r5
 800e71c:	f7f1 ffc4 	bl	80006a8 <__aeabi_dmul>
 800e720:	a359      	add	r3, pc, #356	@ (adr r3, 800e888 <__ieee754_pow+0xa58>)
 800e722:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e726:	f7f1 fe07 	bl	8000338 <__aeabi_dsub>
 800e72a:	4622      	mov	r2, r4
 800e72c:	462b      	mov	r3, r5
 800e72e:	f7f1 ffbb 	bl	80006a8 <__aeabi_dmul>
 800e732:	a357      	add	r3, pc, #348	@ (adr r3, 800e890 <__ieee754_pow+0xa60>)
 800e734:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e738:	f7f1 fe00 	bl	800033c <__adddf3>
 800e73c:	4622      	mov	r2, r4
 800e73e:	462b      	mov	r3, r5
 800e740:	f7f1 ffb2 	bl	80006a8 <__aeabi_dmul>
 800e744:	4602      	mov	r2, r0
 800e746:	460b      	mov	r3, r1
 800e748:	4640      	mov	r0, r8
 800e74a:	4649      	mov	r1, r9
 800e74c:	f7f1 fdf4 	bl	8000338 <__aeabi_dsub>
 800e750:	4604      	mov	r4, r0
 800e752:	460d      	mov	r5, r1
 800e754:	4602      	mov	r2, r0
 800e756:	460b      	mov	r3, r1
 800e758:	4640      	mov	r0, r8
 800e75a:	4649      	mov	r1, r9
 800e75c:	f7f1 ffa4 	bl	80006a8 <__aeabi_dmul>
 800e760:	2200      	movs	r2, #0
 800e762:	e9cd 0100 	strd	r0, r1, [sp]
 800e766:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800e76a:	4620      	mov	r0, r4
 800e76c:	4629      	mov	r1, r5
 800e76e:	f7f1 fde3 	bl	8000338 <__aeabi_dsub>
 800e772:	4602      	mov	r2, r0
 800e774:	460b      	mov	r3, r1
 800e776:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e77a:	f7f2 f8bf 	bl	80008fc <__aeabi_ddiv>
 800e77e:	4632      	mov	r2, r6
 800e780:	4604      	mov	r4, r0
 800e782:	460d      	mov	r5, r1
 800e784:	463b      	mov	r3, r7
 800e786:	4640      	mov	r0, r8
 800e788:	4649      	mov	r1, r9
 800e78a:	f7f1 ff8d 	bl	80006a8 <__aeabi_dmul>
 800e78e:	4632      	mov	r2, r6
 800e790:	463b      	mov	r3, r7
 800e792:	f7f1 fdd3 	bl	800033c <__adddf3>
 800e796:	4602      	mov	r2, r0
 800e798:	460b      	mov	r3, r1
 800e79a:	4620      	mov	r0, r4
 800e79c:	4629      	mov	r1, r5
 800e79e:	f7f1 fdcb 	bl	8000338 <__aeabi_dsub>
 800e7a2:	4642      	mov	r2, r8
 800e7a4:	464b      	mov	r3, r9
 800e7a6:	f7f1 fdc7 	bl	8000338 <__aeabi_dsub>
 800e7aa:	460b      	mov	r3, r1
 800e7ac:	4602      	mov	r2, r0
 800e7ae:	493b      	ldr	r1, [pc, #236]	@ (800e89c <__ieee754_pow+0xa6c>)
 800e7b0:	2000      	movs	r0, #0
 800e7b2:	f7f1 fdc1 	bl	8000338 <__aeabi_dsub>
 800e7b6:	ec41 0b10 	vmov	d0, r0, r1
 800e7ba:	ee10 3a90 	vmov	r3, s1
 800e7be:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800e7c2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800e7c6:	da30      	bge.n	800e82a <__ieee754_pow+0x9fa>
 800e7c8:	4650      	mov	r0, sl
 800e7ca:	f000 f87d 	bl	800e8c8 <scalbn>
 800e7ce:	ec51 0b10 	vmov	r0, r1, d0
 800e7d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e7d6:	f7ff bbd2 	b.w	800df7e <__ieee754_pow+0x14e>
 800e7da:	4c31      	ldr	r4, [pc, #196]	@ (800e8a0 <__ieee754_pow+0xa70>)
 800e7dc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e7e0:	42a3      	cmp	r3, r4
 800e7e2:	d91a      	bls.n	800e81a <__ieee754_pow+0x9ea>
 800e7e4:	4b2f      	ldr	r3, [pc, #188]	@ (800e8a4 <__ieee754_pow+0xa74>)
 800e7e6:	440b      	add	r3, r1
 800e7e8:	4303      	orrs	r3, r0
 800e7ea:	d009      	beq.n	800e800 <__ieee754_pow+0x9d0>
 800e7ec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e7f0:	2200      	movs	r2, #0
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	f7f2 f9ca 	bl	8000b8c <__aeabi_dcmplt>
 800e7f8:	3800      	subs	r0, #0
 800e7fa:	bf18      	it	ne
 800e7fc:	2001      	movne	r0, #1
 800e7fe:	e42b      	b.n	800e058 <__ieee754_pow+0x228>
 800e800:	4642      	mov	r2, r8
 800e802:	464b      	mov	r3, r9
 800e804:	f7f1 fd98 	bl	8000338 <__aeabi_dsub>
 800e808:	4632      	mov	r2, r6
 800e80a:	463b      	mov	r3, r7
 800e80c:	f7f2 f9d2 	bl	8000bb4 <__aeabi_dcmpge>
 800e810:	2800      	cmp	r0, #0
 800e812:	d1eb      	bne.n	800e7ec <__ieee754_pow+0x9bc>
 800e814:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800e8b4 <__ieee754_pow+0xa84>
 800e818:	e6f7      	b.n	800e60a <__ieee754_pow+0x7da>
 800e81a:	469a      	mov	sl, r3
 800e81c:	4b22      	ldr	r3, [pc, #136]	@ (800e8a8 <__ieee754_pow+0xa78>)
 800e81e:	459a      	cmp	sl, r3
 800e820:	f63f aef3 	bhi.w	800e60a <__ieee754_pow+0x7da>
 800e824:	f8dd a010 	ldr.w	sl, [sp, #16]
 800e828:	e715      	b.n	800e656 <__ieee754_pow+0x826>
 800e82a:	ec51 0b10 	vmov	r0, r1, d0
 800e82e:	4619      	mov	r1, r3
 800e830:	e7cf      	b.n	800e7d2 <__ieee754_pow+0x9a2>
 800e832:	491a      	ldr	r1, [pc, #104]	@ (800e89c <__ieee754_pow+0xa6c>)
 800e834:	2000      	movs	r0, #0
 800e836:	f7ff bb18 	b.w	800de6a <__ieee754_pow+0x3a>
 800e83a:	2000      	movs	r0, #0
 800e83c:	2100      	movs	r1, #0
 800e83e:	f7ff bb14 	b.w	800de6a <__ieee754_pow+0x3a>
 800e842:	4630      	mov	r0, r6
 800e844:	4639      	mov	r1, r7
 800e846:	f7ff bb10 	b.w	800de6a <__ieee754_pow+0x3a>
 800e84a:	460c      	mov	r4, r1
 800e84c:	f7ff bb5e 	b.w	800df0c <__ieee754_pow+0xdc>
 800e850:	2400      	movs	r4, #0
 800e852:	f7ff bb49 	b.w	800dee8 <__ieee754_pow+0xb8>
 800e856:	bf00      	nop
 800e858:	00000000 	.word	0x00000000
 800e85c:	3fe62e43 	.word	0x3fe62e43
 800e860:	fefa39ef 	.word	0xfefa39ef
 800e864:	3fe62e42 	.word	0x3fe62e42
 800e868:	0ca86c39 	.word	0x0ca86c39
 800e86c:	be205c61 	.word	0xbe205c61
 800e870:	72bea4d0 	.word	0x72bea4d0
 800e874:	3e663769 	.word	0x3e663769
 800e878:	c5d26bf1 	.word	0xc5d26bf1
 800e87c:	3ebbbd41 	.word	0x3ebbbd41
 800e880:	af25de2c 	.word	0xaf25de2c
 800e884:	3f11566a 	.word	0x3f11566a
 800e888:	16bebd93 	.word	0x16bebd93
 800e88c:	3f66c16c 	.word	0x3f66c16c
 800e890:	5555553e 	.word	0x5555553e
 800e894:	3fc55555 	.word	0x3fc55555
 800e898:	fff00000 	.word	0xfff00000
 800e89c:	3ff00000 	.word	0x3ff00000
 800e8a0:	4090cbff 	.word	0x4090cbff
 800e8a4:	3f6f3400 	.word	0x3f6f3400
 800e8a8:	3fe00000 	.word	0x3fe00000
 800e8ac:	652b82fe 	.word	0x652b82fe
 800e8b0:	3c971547 	.word	0x3c971547
 800e8b4:	4090cc00 	.word	0x4090cc00

0800e8b8 <fabs>:
 800e8b8:	ec51 0b10 	vmov	r0, r1, d0
 800e8bc:	4602      	mov	r2, r0
 800e8be:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e8c2:	ec43 2b10 	vmov	d0, r2, r3
 800e8c6:	4770      	bx	lr

0800e8c8 <scalbn>:
 800e8c8:	b570      	push	{r4, r5, r6, lr}
 800e8ca:	ec55 4b10 	vmov	r4, r5, d0
 800e8ce:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800e8d2:	4606      	mov	r6, r0
 800e8d4:	462b      	mov	r3, r5
 800e8d6:	b991      	cbnz	r1, 800e8fe <scalbn+0x36>
 800e8d8:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800e8dc:	4323      	orrs	r3, r4
 800e8de:	d03d      	beq.n	800e95c <scalbn+0x94>
 800e8e0:	4b35      	ldr	r3, [pc, #212]	@ (800e9b8 <scalbn+0xf0>)
 800e8e2:	4620      	mov	r0, r4
 800e8e4:	4629      	mov	r1, r5
 800e8e6:	2200      	movs	r2, #0
 800e8e8:	f7f1 fede 	bl	80006a8 <__aeabi_dmul>
 800e8ec:	4b33      	ldr	r3, [pc, #204]	@ (800e9bc <scalbn+0xf4>)
 800e8ee:	429e      	cmp	r6, r3
 800e8f0:	4604      	mov	r4, r0
 800e8f2:	460d      	mov	r5, r1
 800e8f4:	da0f      	bge.n	800e916 <scalbn+0x4e>
 800e8f6:	a328      	add	r3, pc, #160	@ (adr r3, 800e998 <scalbn+0xd0>)
 800e8f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fc:	e01e      	b.n	800e93c <scalbn+0x74>
 800e8fe:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800e902:	4291      	cmp	r1, r2
 800e904:	d10b      	bne.n	800e91e <scalbn+0x56>
 800e906:	4622      	mov	r2, r4
 800e908:	4620      	mov	r0, r4
 800e90a:	4629      	mov	r1, r5
 800e90c:	f7f1 fd16 	bl	800033c <__adddf3>
 800e910:	4604      	mov	r4, r0
 800e912:	460d      	mov	r5, r1
 800e914:	e022      	b.n	800e95c <scalbn+0x94>
 800e916:	460b      	mov	r3, r1
 800e918:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800e91c:	3936      	subs	r1, #54	@ 0x36
 800e91e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800e922:	4296      	cmp	r6, r2
 800e924:	dd0d      	ble.n	800e942 <scalbn+0x7a>
 800e926:	2d00      	cmp	r5, #0
 800e928:	a11d      	add	r1, pc, #116	@ (adr r1, 800e9a0 <scalbn+0xd8>)
 800e92a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e92e:	da02      	bge.n	800e936 <scalbn+0x6e>
 800e930:	a11d      	add	r1, pc, #116	@ (adr r1, 800e9a8 <scalbn+0xe0>)
 800e932:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e936:	a31a      	add	r3, pc, #104	@ (adr r3, 800e9a0 <scalbn+0xd8>)
 800e938:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e93c:	f7f1 feb4 	bl	80006a8 <__aeabi_dmul>
 800e940:	e7e6      	b.n	800e910 <scalbn+0x48>
 800e942:	1872      	adds	r2, r6, r1
 800e944:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800e948:	428a      	cmp	r2, r1
 800e94a:	dcec      	bgt.n	800e926 <scalbn+0x5e>
 800e94c:	2a00      	cmp	r2, #0
 800e94e:	dd08      	ble.n	800e962 <scalbn+0x9a>
 800e950:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e954:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e958:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e95c:	ec45 4b10 	vmov	d0, r4, r5
 800e960:	bd70      	pop	{r4, r5, r6, pc}
 800e962:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800e966:	da08      	bge.n	800e97a <scalbn+0xb2>
 800e968:	2d00      	cmp	r5, #0
 800e96a:	a10b      	add	r1, pc, #44	@ (adr r1, 800e998 <scalbn+0xd0>)
 800e96c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e970:	dac1      	bge.n	800e8f6 <scalbn+0x2e>
 800e972:	a10f      	add	r1, pc, #60	@ (adr r1, 800e9b0 <scalbn+0xe8>)
 800e974:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e978:	e7bd      	b.n	800e8f6 <scalbn+0x2e>
 800e97a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800e97e:	3236      	adds	r2, #54	@ 0x36
 800e980:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800e984:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e988:	4620      	mov	r0, r4
 800e98a:	4b0d      	ldr	r3, [pc, #52]	@ (800e9c0 <scalbn+0xf8>)
 800e98c:	4629      	mov	r1, r5
 800e98e:	2200      	movs	r2, #0
 800e990:	e7d4      	b.n	800e93c <scalbn+0x74>
 800e992:	bf00      	nop
 800e994:	f3af 8000 	nop.w
 800e998:	c2f8f359 	.word	0xc2f8f359
 800e99c:	01a56e1f 	.word	0x01a56e1f
 800e9a0:	8800759c 	.word	0x8800759c
 800e9a4:	7e37e43c 	.word	0x7e37e43c
 800e9a8:	8800759c 	.word	0x8800759c
 800e9ac:	fe37e43c 	.word	0xfe37e43c
 800e9b0:	c2f8f359 	.word	0xc2f8f359
 800e9b4:	81a56e1f 	.word	0x81a56e1f
 800e9b8:	43500000 	.word	0x43500000
 800e9bc:	ffff3cb0 	.word	0xffff3cb0
 800e9c0:	3c900000 	.word	0x3c900000

0800e9c4 <with_errno>:
 800e9c4:	b510      	push	{r4, lr}
 800e9c6:	ed2d 8b02 	vpush	{d8}
 800e9ca:	eeb0 8a40 	vmov.f32	s16, s0
 800e9ce:	eef0 8a60 	vmov.f32	s17, s1
 800e9d2:	4604      	mov	r4, r0
 800e9d4:	f7fd f936 	bl	800bc44 <__errno>
 800e9d8:	eeb0 0a48 	vmov.f32	s0, s16
 800e9dc:	eef0 0a68 	vmov.f32	s1, s17
 800e9e0:	ecbd 8b02 	vpop	{d8}
 800e9e4:	6004      	str	r4, [r0, #0]
 800e9e6:	bd10      	pop	{r4, pc}

0800e9e8 <xflow>:
 800e9e8:	4603      	mov	r3, r0
 800e9ea:	b507      	push	{r0, r1, r2, lr}
 800e9ec:	ec51 0b10 	vmov	r0, r1, d0
 800e9f0:	b183      	cbz	r3, 800ea14 <xflow+0x2c>
 800e9f2:	4602      	mov	r2, r0
 800e9f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e9f8:	e9cd 2300 	strd	r2, r3, [sp]
 800e9fc:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea00:	f7f1 fe52 	bl	80006a8 <__aeabi_dmul>
 800ea04:	ec41 0b10 	vmov	d0, r0, r1
 800ea08:	2022      	movs	r0, #34	@ 0x22
 800ea0a:	b003      	add	sp, #12
 800ea0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ea10:	f7ff bfd8 	b.w	800e9c4 <with_errno>
 800ea14:	4602      	mov	r2, r0
 800ea16:	460b      	mov	r3, r1
 800ea18:	e7ee      	b.n	800e9f8 <xflow+0x10>
 800ea1a:	0000      	movs	r0, r0
 800ea1c:	0000      	movs	r0, r0
	...

0800ea20 <__math_uflow>:
 800ea20:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ea28 <__math_uflow+0x8>
 800ea24:	f7ff bfe0 	b.w	800e9e8 <xflow>
 800ea28:	00000000 	.word	0x00000000
 800ea2c:	10000000 	.word	0x10000000

0800ea30 <__math_oflow>:
 800ea30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ea38 <__math_oflow+0x8>
 800ea34:	f7ff bfd8 	b.w	800e9e8 <xflow>
 800ea38:	00000000 	.word	0x00000000
 800ea3c:	70000000 	.word	0x70000000

0800ea40 <__ieee754_sqrt>:
 800ea40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea44:	4a68      	ldr	r2, [pc, #416]	@ (800ebe8 <__ieee754_sqrt+0x1a8>)
 800ea46:	ec55 4b10 	vmov	r4, r5, d0
 800ea4a:	43aa      	bics	r2, r5
 800ea4c:	462b      	mov	r3, r5
 800ea4e:	4621      	mov	r1, r4
 800ea50:	d110      	bne.n	800ea74 <__ieee754_sqrt+0x34>
 800ea52:	4622      	mov	r2, r4
 800ea54:	4620      	mov	r0, r4
 800ea56:	4629      	mov	r1, r5
 800ea58:	f7f1 fe26 	bl	80006a8 <__aeabi_dmul>
 800ea5c:	4602      	mov	r2, r0
 800ea5e:	460b      	mov	r3, r1
 800ea60:	4620      	mov	r0, r4
 800ea62:	4629      	mov	r1, r5
 800ea64:	f7f1 fc6a 	bl	800033c <__adddf3>
 800ea68:	4604      	mov	r4, r0
 800ea6a:	460d      	mov	r5, r1
 800ea6c:	ec45 4b10 	vmov	d0, r4, r5
 800ea70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea74:	2d00      	cmp	r5, #0
 800ea76:	dc0e      	bgt.n	800ea96 <__ieee754_sqrt+0x56>
 800ea78:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800ea7c:	4322      	orrs	r2, r4
 800ea7e:	d0f5      	beq.n	800ea6c <__ieee754_sqrt+0x2c>
 800ea80:	b19d      	cbz	r5, 800eaaa <__ieee754_sqrt+0x6a>
 800ea82:	4622      	mov	r2, r4
 800ea84:	4620      	mov	r0, r4
 800ea86:	4629      	mov	r1, r5
 800ea88:	f7f1 fc56 	bl	8000338 <__aeabi_dsub>
 800ea8c:	4602      	mov	r2, r0
 800ea8e:	460b      	mov	r3, r1
 800ea90:	f7f1 ff34 	bl	80008fc <__aeabi_ddiv>
 800ea94:	e7e8      	b.n	800ea68 <__ieee754_sqrt+0x28>
 800ea96:	152a      	asrs	r2, r5, #20
 800ea98:	d115      	bne.n	800eac6 <__ieee754_sqrt+0x86>
 800ea9a:	2000      	movs	r0, #0
 800ea9c:	e009      	b.n	800eab2 <__ieee754_sqrt+0x72>
 800ea9e:	0acb      	lsrs	r3, r1, #11
 800eaa0:	3a15      	subs	r2, #21
 800eaa2:	0549      	lsls	r1, r1, #21
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d0fa      	beq.n	800ea9e <__ieee754_sqrt+0x5e>
 800eaa8:	e7f7      	b.n	800ea9a <__ieee754_sqrt+0x5a>
 800eaaa:	462a      	mov	r2, r5
 800eaac:	e7fa      	b.n	800eaa4 <__ieee754_sqrt+0x64>
 800eaae:	005b      	lsls	r3, r3, #1
 800eab0:	3001      	adds	r0, #1
 800eab2:	02dc      	lsls	r4, r3, #11
 800eab4:	d5fb      	bpl.n	800eaae <__ieee754_sqrt+0x6e>
 800eab6:	1e44      	subs	r4, r0, #1
 800eab8:	1b12      	subs	r2, r2, r4
 800eaba:	f1c0 0420 	rsb	r4, r0, #32
 800eabe:	fa21 f404 	lsr.w	r4, r1, r4
 800eac2:	4323      	orrs	r3, r4
 800eac4:	4081      	lsls	r1, r0
 800eac6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800eaca:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800eace:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ead2:	07d2      	lsls	r2, r2, #31
 800ead4:	bf5c      	itt	pl
 800ead6:	005b      	lslpl	r3, r3, #1
 800ead8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800eadc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800eae0:	bf58      	it	pl
 800eae2:	0049      	lslpl	r1, r1, #1
 800eae4:	2600      	movs	r6, #0
 800eae6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800eaea:	106d      	asrs	r5, r5, #1
 800eaec:	0049      	lsls	r1, r1, #1
 800eaee:	2016      	movs	r0, #22
 800eaf0:	4632      	mov	r2, r6
 800eaf2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800eaf6:	1917      	adds	r7, r2, r4
 800eaf8:	429f      	cmp	r7, r3
 800eafa:	bfde      	ittt	le
 800eafc:	193a      	addle	r2, r7, r4
 800eafe:	1bdb      	suble	r3, r3, r7
 800eb00:	1936      	addle	r6, r6, r4
 800eb02:	0fcf      	lsrs	r7, r1, #31
 800eb04:	3801      	subs	r0, #1
 800eb06:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800eb0a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800eb0e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800eb12:	d1f0      	bne.n	800eaf6 <__ieee754_sqrt+0xb6>
 800eb14:	4604      	mov	r4, r0
 800eb16:	2720      	movs	r7, #32
 800eb18:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	eb00 0e0c 	add.w	lr, r0, ip
 800eb22:	db02      	blt.n	800eb2a <__ieee754_sqrt+0xea>
 800eb24:	d113      	bne.n	800eb4e <__ieee754_sqrt+0x10e>
 800eb26:	458e      	cmp	lr, r1
 800eb28:	d811      	bhi.n	800eb4e <__ieee754_sqrt+0x10e>
 800eb2a:	f1be 0f00 	cmp.w	lr, #0
 800eb2e:	eb0e 000c 	add.w	r0, lr, ip
 800eb32:	da42      	bge.n	800ebba <__ieee754_sqrt+0x17a>
 800eb34:	2800      	cmp	r0, #0
 800eb36:	db40      	blt.n	800ebba <__ieee754_sqrt+0x17a>
 800eb38:	f102 0801 	add.w	r8, r2, #1
 800eb3c:	1a9b      	subs	r3, r3, r2
 800eb3e:	458e      	cmp	lr, r1
 800eb40:	bf88      	it	hi
 800eb42:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800eb46:	eba1 010e 	sub.w	r1, r1, lr
 800eb4a:	4464      	add	r4, ip
 800eb4c:	4642      	mov	r2, r8
 800eb4e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800eb52:	3f01      	subs	r7, #1
 800eb54:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800eb58:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800eb5c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800eb60:	d1dc      	bne.n	800eb1c <__ieee754_sqrt+0xdc>
 800eb62:	4319      	orrs	r1, r3
 800eb64:	d01b      	beq.n	800eb9e <__ieee754_sqrt+0x15e>
 800eb66:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ebec <__ieee754_sqrt+0x1ac>
 800eb6a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ebf0 <__ieee754_sqrt+0x1b0>
 800eb6e:	e9da 0100 	ldrd	r0, r1, [sl]
 800eb72:	e9db 2300 	ldrd	r2, r3, [fp]
 800eb76:	f7f1 fbdf 	bl	8000338 <__aeabi_dsub>
 800eb7a:	e9da 8900 	ldrd	r8, r9, [sl]
 800eb7e:	4602      	mov	r2, r0
 800eb80:	460b      	mov	r3, r1
 800eb82:	4640      	mov	r0, r8
 800eb84:	4649      	mov	r1, r9
 800eb86:	f7f2 f80b 	bl	8000ba0 <__aeabi_dcmple>
 800eb8a:	b140      	cbz	r0, 800eb9e <__ieee754_sqrt+0x15e>
 800eb8c:	f1b4 3fff 	cmp.w	r4, #4294967295
 800eb90:	e9da 0100 	ldrd	r0, r1, [sl]
 800eb94:	e9db 2300 	ldrd	r2, r3, [fp]
 800eb98:	d111      	bne.n	800ebbe <__ieee754_sqrt+0x17e>
 800eb9a:	3601      	adds	r6, #1
 800eb9c:	463c      	mov	r4, r7
 800eb9e:	1072      	asrs	r2, r6, #1
 800eba0:	0863      	lsrs	r3, r4, #1
 800eba2:	07f1      	lsls	r1, r6, #31
 800eba4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800eba8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ebac:	bf48      	it	mi
 800ebae:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ebb2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ebb6:	4618      	mov	r0, r3
 800ebb8:	e756      	b.n	800ea68 <__ieee754_sqrt+0x28>
 800ebba:	4690      	mov	r8, r2
 800ebbc:	e7be      	b.n	800eb3c <__ieee754_sqrt+0xfc>
 800ebbe:	f7f1 fbbd 	bl	800033c <__adddf3>
 800ebc2:	e9da 8900 	ldrd	r8, r9, [sl]
 800ebc6:	4602      	mov	r2, r0
 800ebc8:	460b      	mov	r3, r1
 800ebca:	4640      	mov	r0, r8
 800ebcc:	4649      	mov	r1, r9
 800ebce:	f7f1 ffdd 	bl	8000b8c <__aeabi_dcmplt>
 800ebd2:	b120      	cbz	r0, 800ebde <__ieee754_sqrt+0x19e>
 800ebd4:	1ca0      	adds	r0, r4, #2
 800ebd6:	bf08      	it	eq
 800ebd8:	3601      	addeq	r6, #1
 800ebda:	3402      	adds	r4, #2
 800ebdc:	e7df      	b.n	800eb9e <__ieee754_sqrt+0x15e>
 800ebde:	1c63      	adds	r3, r4, #1
 800ebe0:	f023 0401 	bic.w	r4, r3, #1
 800ebe4:	e7db      	b.n	800eb9e <__ieee754_sqrt+0x15e>
 800ebe6:	bf00      	nop
 800ebe8:	7ff00000 	.word	0x7ff00000
 800ebec:	200001e8 	.word	0x200001e8
 800ebf0:	200001e0 	.word	0x200001e0

0800ebf4 <_sbrk>:
 800ebf4:	4a04      	ldr	r2, [pc, #16]	@ (800ec08 <_sbrk+0x14>)
 800ebf6:	6811      	ldr	r1, [r2, #0]
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	b909      	cbnz	r1, 800ec00 <_sbrk+0xc>
 800ebfc:	4903      	ldr	r1, [pc, #12]	@ (800ec0c <_sbrk+0x18>)
 800ebfe:	6011      	str	r1, [r2, #0]
 800ec00:	6810      	ldr	r0, [r2, #0]
 800ec02:	4403      	add	r3, r0
 800ec04:	6013      	str	r3, [r2, #0]
 800ec06:	4770      	bx	lr
 800ec08:	20013d20 	.word	0x20013d20
 800ec0c:	20013d28 	.word	0x20013d28

0800ec10 <_init>:
 800ec10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec12:	bf00      	nop
 800ec14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec16:	bc08      	pop	{r3}
 800ec18:	469e      	mov	lr, r3
 800ec1a:	4770      	bx	lr

0800ec1c <_fini>:
 800ec1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ec1e:	bf00      	nop
 800ec20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ec22:	bc08      	pop	{r3}
 800ec24:	469e      	mov	lr, r3
 800ec26:	4770      	bx	lr
